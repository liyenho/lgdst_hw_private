
lgdst2.elf:     file format elf32-littlenios2
lgdst2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00029738 memsz 0x00029738 flags r-x
    LOAD off    0x0002a758 vaddr 0x00029758 paddr 0x0002a154 align 2**12
         filesz 0x000009fc memsz 0x000009fc flags rw-
    LOAD off    0x0002bb50 vaddr 0x0002ab50 paddr 0x0002ab50 align 2**12
         filesz 0x00000000 memsz 0x000000c8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  0002b154  2**0
                  CONTENTS
  2 .text         00025328  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00004410  00025348  00025348  00026348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000009fc  00029758  0002a154  0002a758  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000000c8  0002ab50  0002ab50  0002bb50  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_ram   00000000  0002ac18  0002ac18  0002b154  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0002b154  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000be8  00000000  00000000  0002b178  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00027822  00000000  00000000  0002bd60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000748a  00000000  00000000  00053582  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000bd7a  00000000  00000000  0005aa0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00004600  00000000  00000000  00066788  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00007bc8  00000000  00000000  0006ad88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000fec2  00000000  00000000  00072950  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00082814  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001538  00000000  00000000  00082848  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00089a86  2**0
                  CONTENTS, READONLY
 18 .cpu          00000009  00000000  00000000  00089a89  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00089a92  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00089a93  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00089a94  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00089a98  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00089a9c  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  00089aa0  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  00089aa4  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  00089aa8  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000009  00000000  00000000  00089aac  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000064  00000000  00000000  00089ab5  2**0
                  CONTENTS, READONLY
 29 .jdi          00005269  00000000  00000000  00089b19  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00055d2e  00000000  00000000  0008ed82  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00025348 l    d  .rodata	00000000 .rodata
00029758 l    d  .rwdata	00000000 .rwdata
0002ab50 l    d  .bss	00000000 .bss
0002ac18 l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lgdst2_bsp//obj/HAL/src/crt0.o
00000070 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 ad9361.c
00025348 l     O .rodata	000008b2 SynthLUT_FDD
00025bfa l     O .rodata	000008b2 SynthLUT_TDD
000264ac l     O .rodata	000002b5 full_gain_table
00026761 l     O .rodata	00000171 split_gain_table
000268d2 l     O .rodata	00000010 gm_st_gain
000268e2 l     O .rodata	00000010 gm_st_ctrl
000268f2 l     O .rodata	0000000c lna_table
0002a126 l     O .rwdata	00000002 tia_table
000268fe l     O .rodata	00000030 mixer_table
00026930 l     O .rodata	00000050 gain_step_calib_reg_val
000001b8 l     F .text	000000a8 __ad9361_spi_readf
0000031c l     F .text	000000d0 __ad9361_spi_writef
000003ec l     F .text	00000104 ad9361_spi_writem
000279bc l     O .rodata	0000000d __func__.3937
000008c0 l     F .text	000000a8 ad9361_int_loopback_fix_ch_cross
000279cc l     O .rodata	00000015 __func__.3960
000279e4 l     O .rodata	00000011 __func__.3975
000279f8 l     O .rodata	00000011 __func__.3996
00000eb0 l     F .text	000000e0 ad9361_check_cal_done
00000f90 l     F .text	00000098 ad9361_run_calibration
00027a0c l     O .rodata	00000017 __func__.4025
00001028 l     F .text	00000080 ad9361_gt_tableindex
00001150 l     F .text	00000310 ad9361_load_gt
00027a24 l     O .rodata	0000000f __func__.4047
00001460 l     F .text	0000011c ad9361_setup_ext_lna
0000157c l     F .text	000000ac ad9361_clkout_control
00001628 l     F .text	000001d4 ad9361_load_mixer_gm_subtable
00027a34 l     O .rodata	0000001e __func__.4066
00027a54 l     O .rodata	00000014 __func__.4080
00001a30 l     F .text	0000005c ad9361_rfvco_tableindex
00001a8c l     F .text	00000448 ad9361_rfpll_vco_init
00027a68 l     O .rodata	00000016 __func__.4103
00001ed4 l     F .text	0000023c ad9361_get_split_table_gain
00002110 l     F .text	0000015c ad9361_get_full_table_gain
00002828 l     F .text	00000220 set_split_table_gain
00002a48 l     F .text	000001ac set_full_table_gain
00002d60 l     F .text	0000007c ad9361_init_gain_info
00002eb4 l     F .text	00000580 ad9361_gc_update
00003814 l     F .text	00000e8c ad9361_rx_adc_setup
00027a80 l     O .rodata	00000014 __func__.4296
000046a0 l     F .text	000002f0 ad9361_rx_tia_calib
00027a94 l     O .rodata	00000014 __func__.4322
00004990 l     F .text	0000028c ad9361_rx_bb_analog_filter_calib
00027aa8 l     O .rodata	00000021 __func__.4332
00004c1c l     F .text	00000180 ad9361_tx_bb_analog_filter_calib
00027acc l     O .rodata	00000021 __func__.4342
00004d9c l     F .text	00000304 ad9361_tx_bb_second_filter_calib
00027af0 l     O .rodata	00000021 __func__.4356
000050a0 l     F .text	000002a4 ad9361_txrx_synth_cp_calib
00027b14 l     O .rodata	0000001b __func__.4374
00005344 l     F .text	000000a4 ad9361_bb_dc_offset_calib
00027b30 l     O .rodata	0000001a __func__.4379
000053e8 l     F .text	000001b4 ad9361_rf_dc_offset_calib
00027b4c l     O .rodata	0000001a __func__.4386
0000559c l     F .text	00000154 __ad9361_update_rf_bandwidth
00027b68 l     O .rodata	0000001d __func__.4397
000056f0 l     F .text	00000120 __ad9361_tx_quad_calib
00005810 l     F .text	00000190 ad9361_tx_quad_phase_search
00027b88 l     O .rodata	0000001c __func__.4417
000059a0 l     F .text	00000838 ad9361_tx_quad_calib
00027ba4 l     O .rodata	00000015 __func__.4443
00027bbc l     O .rodata	00000018 __func__.4470
00006388 l     F .text	000000c4 ad9361_trx_vco_cal_control
00027bd4 l     O .rodata	0000001b __func__.4477
0000644c l     F .text	0000038c ad9361_trx_ext_lo_control
00027bf0 l     O .rodata	0000001a __func__.4487
000067d8 l     F .text	00000094 ad9361_set_ref_clk_cycles
00027c0c l     O .rodata	0000001a __func__.4493
0000686c l     F .text	000000c4 ad9361_set_dcxo_tune
00027c28 l     O .rodata	00000015 __func__.4500
00006930 l     F .text	000001d4 ad9361_txmon_setup
00027c40 l     O .rodata	00000013 __func__.4507
00006b04 l     F .text	0000010c ad9361_txmon_control
00027c54 l     O .rodata	00000015 __func__.4513
00027c6c l     O .rodata	00000015 __func__.4522
00006d34 l     F .text	00000248 ad9361_pp_port_setup
00027c84 l     O .rodata	00000015 __func__.4530
00006f7c l     F .text	0000135c ad9361_gc_setup
00027c9c l     O .rodata	00000010 __func__.4540
000082d8 l     F .text	00000204 ad9361_auxdac_set
00027cac l     O .rodata	00000012 __func__.4560
00008544 l     F .text	000001fc ad9361_auxdac_setup
00027cc0 l     O .rodata	00000014 __func__.4579
00008740 l     F .text	0000017c ad9361_auxadc_setup
00027cd4 l     O .rodata	00000014 __func__.4588
00008a4c l     F .text	00000098 ad9361_ctrl_outs_setup
00027ce8 l     O .rodata	00000017 __func__.4603
00008ae4 l     F .text	0000025c ad9361_gpo_setup
00027d00 l     O .rodata	00000011 __func__.4610
00008d40 l     F .text	000004e0 ad9361_rssi_setup
00027d14 l     O .rodata	00000012 __func__.4631
00009220 l     F .text	000000b4 ad9361_bb_clk_change_handler
0000984c l     F .text	0000018c ad9361_validate_trx_clock_chain
00027d28 l     O .rodata	00000020 __func__.4680
00027d48 l     O .rodata	0000001b __func__.4691
00027d64 l     O .rodata	00000020 __func__.4733
0000a86c l     F .text	00000094 ad9361_fastlock_readval
0000a900 l     F .text	0000011c ad9361_fastlock_writeval
00027d84 l     O .rodata	00000015 __func__.4783
00027d9c l     O .rodata	00000016 __func__.4798
0000b108 l     F .text	00000364 ad9361_fastlock_prepare
00027db4 l     O .rodata	00000018 __func__.4809
00027dcc l     O .rodata	00000017 __func__.4821
00027de4 l     O .rodata	00000015 __func__.4830
00027dfc l     O .rodata	0000000b __func__.4840
0000bc88 l     F .text	000000a4 ad9361_ref_div_sel
00027e08 l     O .rodata	0000000d __func__.4867
00027e18 l     O .rodata	00000014 __func__.4884
0000cce4 l     F .text	000002bc ad9361_verify_fir_filter_coef
00027e2c l     O .rodata	0000001e __func__.4910
00027e4c l     O .rodata	0000001c __func__.4932
00027e68 l     O .rodata	0000001b __func__.4952
0000d994 l     F .text	0000004c ad9361_set_muldiv
0000d9e0 l     F .text	0000045c ad9361_get_clk_scaler
0000de3c l     F .text	0000009c ad9361_to_refclk_scaler
0000ded8 l     F .text	00000704 ad9361_set_clk_scaler
00027e84 l     O .rodata	0000001d __func__.5033
00027ea4 l     O .rodata	0000001b __func__.5040
00027ec0 l     O .rodata	00000016 __func__.5072
0000f00c l     F .text	0000012c ad9361_calc_rfpll_int_freq
0000f138 l     F .text	000001f8 ad9361_calc_rfpll_int_divder
00027ed8 l     O .rodata	0000001d __func__.5106
00027ef8 l     O .rodata	0000001c __func__.5118
00027f14 l     O .rodata	0000001a __func__.5135
00027f30 l     O .rodata	00000016 __func__.5178
00027f48 l     O .rodata	0000001a __func__.5187
00010100 l     F .text	00000458 ad9361_clk_register
00000000 l    df *ABS*	00000000 ad9361_api.c
00029788 l     O .rwdata	00000018 axiadc_chip_info_tbl
00028050 l     O .rodata	00000016 __func__.4237
00028068 l     O .rodata	00000016 __func__.4245
00028080 l     O .rodata	00000013 __func__.4285
00028094 l     O .rodata	00000020 __func__.4292
000280b4 l     O .rodata	0000001a __func__.4384
000280d0 l     O .rodata	0000001a __func__.4391
00000000 l    df *ABS*	00000000 ad9361_conv.c
00015084 l     F .text	0000009c ad9361_iodelay_set
00015120 l     F .text	00000098 ad9361_midscale_iodelay
000151b8 l     F .text	0000021c ad9361_dig_tune_iodelay
000153d4 l     F .text	00000168 ad9361_dig_tune_verbose_print
000281bc l     O .rodata	00000025 __func__.3851
000281e4 l     O .rodata	00000010 __func__.3901
00000000 l    df *ABS*	00000000 command.c
00000000 l    df *ABS*	00000000 console.c
00029b00 l     O .rwdata	00000011 buffer.2798
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 adc_core.c
00000000 l    df *ABS*	00000000 dac_core.c
0001a6dc l     F .text	000000d4 dds_default_setup
00000000 l    df *ABS*	00000000 platform.c
0001b410 l     F .text	00000050 usleep
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0001d670 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atof.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 impure.c
00029e40 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtod.c
0001fbf0 l     F .text	00000058 match
0001fc48 l     F .text	0000006c sulp
0002934c l     O .rodata	00000014 fpi.2703
00029338 l     O .rodata	00000014 fpinan.2739
00029360 l     O .rodata	00000028 tinytens
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
00021298 l     F .text	00000074 print_repeat
00000000 l    df *ABS*	00000000 vfprintf.c
00021884 l     F .text	00000074 print_repeat
00000000 l    df *ABS*	00000000 ctype_.c
00029489 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
00021fc8 l     F .text	000000cc rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0002283c l     F .text	00000050 L_shift
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0002960c l     O .rodata	0000000c p05.2738
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0002a138 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00029f4c l     O .rwdata	0000002c jtag_uart
00029f20 l     O .rwdata	0000002c uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00025028 l     F .text	00000010 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001f938 g     F .text	00000020 putchar
0002398c g     F .text	00000070 _mprec_log10
000007a0 g     F .text	00000090 ad9361_en_dis_tx
00023a5c g     F .text	00000078 __any_on
00029618 g     O .rodata	00000028 __mprec_tinytens
00012e20 g     F .text	0000006c ad9361_set_rx_lo_freq
000249ec g     F .text	00000044 alt_main
00000968 g     F .text	000001b0 ad9361_bist_loopback
0001b8dc g     F .text	00000040 mdelay
0001f958 g     F .text	00000088 _puts_r
0002ab50 g     O .bss	00000001 tmp
0001418c g     F .text	00000048 ad9361_get_tx_fir_en_dis
0002a154 g       *ABS*	00000000 __flash_rwdata_start
000246a4 g     F .text	0000008c .hidden __eqdf2
0002ac18 g       *ABS*	00000000 __alt_heap_start
0000a71c g     F .text	00000150 ad9361_set_ensm_mode
0001f818 g     F .text	00000054 printf
0000ec9c g     F .text	00000370 ad9361_bbpll_set_rate
00010558 g     F .text	00000560 register_clocks
000139a8 g     F .text	000000ec ad9361_set_tx_attenuation
000137cc g     F .text	00000078 ad9361_set_rx_rf_port_input
0001440c g     F .text	00000044 ad9361_get_tx_auto_cal_en_dis
0002ab54 g     O .bss	00000004 num_5
0001fcb4 g     F .text	00001270 _strtod_r
00018388 g     F .text	00000068 get_dds_tx2_tone1_scale
0001725c g     F .text	00000064 get_rx_rf_bandwidth
00029d14 g     O .rwdata	0000012c tx_fir_config
00022094 g     F .text	00000054 __hexdig_fun
000173bc g     F .text	0000009c set_rx1_gc_mode
0001a800 g     F .text	00000090 dac_start_sync
00022a98 g     F .text	00000068 memmove
00016e08 g     F .text	00000094 set_tx2_attenuation
00013a94 g     F .text	000000c4 ad9361_get_tx_attenuation
00017758 g     F .text	00000068 get_rx_fir_en
0001fb0c g     F .text	000000c0 snprintf
00022b00 g     F .text	000000ec _Balloc
00017560 g     F .text	00000068 get_rx1_rf_gain
000017fc g     F .text	00000188 ad9361_set_tx_atten
0001e068 g     F .text	000000e8 .hidden __gtdf2
00017044 g     F .text	00000100 set_rx_lo_freq
000250f8 g     F .text	00000010 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00000b54 g     F .text	000000bc ad9361_bist_prbs
00016da0 g     F .text	00000068 get_tx2_attenuation
00021f24 g     F .text	000000a4 __sfvwrite_small_str
00000000 g     F .entry	0000001c __reset
00000b18 g     F .text	0000003c ad9361_get_bist_loopback
00002ddc g     F .text	000000d8 ad9361_init_gain_tables
00012d1c g     F .text	000000ac ad9361_set_rx_sampling_freq
00012cdc g     F .text	00000040 ad9361_get_rx_rf_bandwidth
00012b84 g     F .text	000000e8 ad9361_get_rx_rf_gain
000061d8 g     F .text	000001b0 ad9361_tracking_control
00000020 g       *ABS*	00000000 __flash_exceptions_start
00014cf8 g     F .text	00000040 ad9361_get_trx_rate_gov
0001c830 g     F .text	000000d8 find_first_bit
0000b800 g     F .text	000000e0 ad9361_fastlock_save
0002ab78 g     O .bss	00000004 errno
00017144 g     F .text	00000064 get_rx_samp_freq
0000cfa0 g     F .text	000004a4 ad9361_load_fir_filter_coef
0002ab80 g     O .bss	00000004 alt_argv
00032120 g       *ABS*	00000000 _gp
00017458 g     F .text	0000006c get_rx2_gc_mode
00000150 g     F .text	00000068 ad9361_spi_read
0002ab88 g     O .bss	00000090 dds_st
0001294c g     F .text	00000154 ad9361_get_en_state_machine_mode
00016860 g     F .text	000000a0 get_register
00016ca4 g     F .text	00000068 get_tx1_attenuation
0002a124 g     O .rwdata	00000001 has_split_gt
00029f78 g     O .rwdata	00000180 alt_fd_list
00013bc8 g     F .text	00000040 ad9361_get_tx_rf_bandwidth
00018070 g     F .text	00000090 set_dds_tx2_tone2_freq
0001f928 g     F .text	00000010 _putchar_r
0001f52c g     F .text	00000030 memcpy
0002288c g     F .text	0000020c __hexnan
0001b5e8 g     F .text	0000006c spi_write_then_read
00013cb4 g     F .text	00000058 ad9361_get_tx_sampling_freq
00014450 g     F .text	00000044 ad9361_tx_fastlock_store
0001b654 g     F .text	00000040 alt_avl_gpio_read
0002a128 g     O .rwdata	00000001 cmd_no
0001f2cc g     F .text	000000d8 .hidden __floatsidf
00013ebc g     F .text	00000238 ad9361_get_tx_fir_config
000144d8 g     F .text	0000004c ad9361_tx_fastlock_load
0001b460 g     F .text	0000002c altera_bridge_init
0001e150 g     F .text	000000e8 .hidden __ltdf2
00013d0c g     F .text	0000006c ad9361_set_tx_lo_freq
0000b8e0 g     F .text	00000298 ad9361_mcs
0001a684 g     F .text	0000002c dac_dma_read
0001f9e0 g     F .text	0000001c puts
000184c8 g     F .text	00000068 dds_tx2_tone2_scale
000238e0 g     F .text	000000ac __ratio
00017858 g     F .text	00000058 get_dds_tx1_tone1_freq
0000fd80 g     F .text	000002b8 ad9361_rfpll_set_rate
00002674 g     F .text	000001b4 ad9361_ensm_restore_prev_state
00009de0 g     F .text	00000180 ad9361_get_trx_clock_chain
00018100 g     F .text	0000006c get_dds_tx2_tone1_phase
00024c40 g     F .text	00000074 altera_avalon_jtag_uart_read
0001f4f4 g     F .text	0000001c malloc
0001f7d4 g     F .text	00000044 _printf_r
0001d7a4 g     F .text	00000010 .hidden __udivsi3
000196ac g     F .text	00000048 write_reg_bige
0002ab58 g     O .bss	00000004 num_6
0001b544 g     F .text	0000003c spi_init
00029668 g     O .rodata	000000c8 __mprec_tens
00023d10 g     F .text	000000c0 .hidden __lesf2
0001c9fc g     F .text	0000007c .hidden __fixunsdfsi
00025108 g     F .text	00000058 alt_icache_flush
0001be38 g     F .text	000006d0 clk_set_rate
00017a28 g     F .text	0000006c get_dds_tx1_tone1_phase
00029758 g     O .rwdata	00000030 ad9361_ensm_states
0001963c g     F .text	0000002c _localeconv_r
00022fac g     F .text	00000044 __i2b
000099d8 g     F .text	00000408 ad9361_set_trx_clock_chain
0000226c g     F .text	00000208 ad9361_get_rx_gain
0000e8ac g     F .text	00000198 ad9361_bbpll_recalc_rate
000084dc g     F .text	00000068 ad9361_auxdac_get
0002a125 g     O .rwdata	00000001 have_tdd_tables
0001b91c g     F .text	0000003c msleep_interruptible
00013428 g     F .text	00000098 ad9361_set_rx_fir_en_dis
0001f9fc g     F .text	00000058 _sbrk_r
00017998 g     F .text	00000090 set_dds_tx1_tone2_freq
00018e74 g     F .text	000007c8 console_check_commands
0000fab0 g     F .text	00000154 ad9361_rfpll_recalc_rate
00019668 g     F .text	00000044 read_reg_bige
00016900 g     F .text	000000a8 get_tx_lo_freq
0000bb78 g     F .text	00000110 ad9361_clear_state
0002a13c g     O .rwdata	00000004 alt_max_fd
00014d38 g     F .text	00000048 ad9361_do_calib
00016458 g     F .text	000002a4 ad9361_post_setup
00010ab8 g     F .text	00000514 ad9361_rssi_gain_step_calib
00017350 g     F .text	0000006c get_rx1_gc_mode
0001c508 g     F .text	000000ac int_sqrt
00017b6c g     F .text	0000006c get_dds_tx1_tone2_phase
00010038 g     F .text	000000c8 ad9361_clk_mux_set_parent
0001d7c4 g     F .text	000008a4 .hidden __adddf3
00023bd4 g     F .text	0000007c .hidden __nesf2
00017d18 g     F .text	000000d8 set_dds_tx1_tone1_scale
0000bd2c g     F .text	00000d1c ad9361_setup
00023690 g     F .text	00000110 __b2d
0001d0d8 g     F .text	00000598 .hidden __umoddi3
0002a12c g     O .rwdata	00000004 _global_impure_ptr
0002ac18 g       *ABS*	00000000 __bss_end
0001ac70 g     F .text	00000170 dds_set_frequency
0001cb10 g     F .text	000005c8 .hidden __udivdi3
0001463c g     F .text	00000470 ad9361_set_no_ch_mode
0001c908 g     F .text	0000002c ERR_PTR
00013844 g     F .text	00000044 ad9361_get_rx_rf_port_input
00029640 g     O .rodata	00000028 __mprec_bigtens
00022d74 g     F .text	00000110 __s2b
0001f3a4 g     F .text	000000ac .hidden __floatunsidf
0002345c g     F .text	00000064 __mcmp
0001b4fc g     F .text	00000048 alt_avl_spi_write
0001ba58 g     F .text	00000160 axiadc_set_pnsel
00017a94 g     F .text	000000d8 set_dds_tx1_tone1_phase
00014d80 g     F .text	00000164 ad9361_trx_load_enable_fir
0002126c g     F .text	0000002c strtol
00018da4 g     F .text	00000038 console_init
00009f60 g     F .text	00000738 ad9361_calculate_rf_clock_chain
0002a0f8 g     O .rwdata	00000028 alt_dev_null
000010a8 g     F .text	00000048 ad9361_to_clk
0002ab5c g     O .bss	00000004 num_1
00017940 g     F .text	00000058 get_dds_tx1_tone2_freq
0000e648 g     F .text	00000148 ad9361_clk_factor_round_rate
00025008 g     F .text	00000020 alt_dcache_flush_all
00022e84 g     F .text	00000070 __hi0bits
0001a3e0 g     F .text	0000002c adc_dma_read
0000e5dc g     F .text	0000006c ad9361_clk_factor_recalc_rate
0001f23c g     F .text	00000090 .hidden __fixdfsi
0001a354 g     F .text	00000048 adc_read
00020f24 g     F .text	00000024 strtod
0002a154 g       *ABS*	00000000 __ram_rwdata_end
000036b0 g     F .text	00000164 ad9361_read_rssi
0002a140 g     O .rwdata	00000008 alt_dev_list
00024ab0 g     F .text	000000f0 write
0001f8c8 g     F .text	00000060 _putc_r
0001f4bc g     F .text	00000010 atof
00023c50 g     F .text	000000c0 .hidden __gtsf2
000136e0 g     F .text	000000a8 ad9361_set_rx_quad_track_en_dis
00029758 g       *ABS*	00000000 __ram_rodata_end
0001e150 g     F .text	000000e8 .hidden __ledf2
00016e9c g     F .text	00000068 get_tx_fir_en
000231d0 g     F .text	00000138 __pow5mult
0001d7b4 g     F .text	00000010 .hidden __umodsi3
000138cc g     F .text	00000044 ad9361_rx_fastlock_recall
0000aa1c g     F .text	00000240 ad9361_fastlock_load
000145f4 g     F .text	00000048 ad9361_get_trx_path_clks
0001b7dc g     F .text	00000034 gpio_data
0002ac18 g       *ABS*	00000000 end
0001395c g     F .text	0000004c ad9361_rx_fastlock_save
000131c8 g     F .text	00000260 ad9361_get_rx_fir_config
0002ab60 g     O .bss	00000004 num_2
00003434 g     F .text	0000027c ad9361_set_gain_ctrl_mode
0001f4e0 g     F .text	00000014 _atoi_r
000182b0 g     F .text	000000d8 set_dds_tx2_tone2_phase
00013788 g     F .text	00000044 ad9361_get_rx_quad_track_en_dis
00024e98 g     F .text	00000094 altera_avalon_uart_write
000178b0 g     F .text	00000090 set_dds_tx1_tone1_freq
00030000 g       *ABS*	00000000 __alt_stack_pointer
00014570 g     F .text	00000084 ad9361_set_trx_path_clks
00024df0 g     F .text	00000018 altera_avalon_uart_write_fd
0001f450 g     F .text	0000006c .hidden __clzsi2
0001fa54 g     F .text	000000b8 _snprintf_r
00024cb4 g     F .text	0000003c altera_avalon_jtag_uart_write
0001b9d0 g     F .text	00000044 axiadc_read
00018608 g     F .text	0000002c uart_init
000218f8 g     F .text	0000054c ___vfprintf_internal_r
00016f04 g     F .text	00000098 set_tx_fir_en
0001f584 g     F .text	000000ec _free_r
00014aac g     F .text	00000128 ad9361_do_mcs
0001a40c g     F .text	0000002c adc_dma_write
00025188 g     F .text	000001a4 __call_exitprocs
0001b4b8 g     F .text	00000044 alt_avl_spi_read
000175c8 g     F .text	00000094 set_rx1_rf_gain
0001a5f8 g     F .text	00000048 dac_read
0002ab64 g     O .bss	00000004 num_4
00000020 g     F .text	00000054 _start
0001816c g     F .text	000000d8 set_dds_tx2_tone1_phase
0000f330 g     F .text	00000300 ad9361_rfpll_int_recalc_rate
00023308 g     F .text	00000154 __lshift
00024cf0 g     F .text	000000e8 alt_avalon_spi_command
0001c5b4 g     F .text	000001b8 ilog2
000141d4 g     F .text	00000128 ad9361_get_tx_rssi
00017bd8 g     F .text	000000d8 set_dds_tx1_tone2_phase
0000d444 g     F .text	00000034 ad9361_parse_fir
00024bc8 g     F .text	00000048 alt_sys_init
00018720 g     F .text	00000138 int_to_str
00000074 g     F .text	000000dc ad9361_spi_readm
00023b28 g     F .text	0000004c strncmp
00013e44 g     F .text	00000078 ad9361_set_tx_fir_config
00022ff0 g     F .text	000001e0 __multiply
0001b580 g     F .text	00000068 spi_read
0001b810 g     F .text	00000094 gpio_set_value
00029758 g       *ABS*	00000000 __ram_rwdata_start
00025348 g       *ABS*	00000000 __ram_rodata_start
0001b8a4 g     F .text	00000038 udelay
00023bd4 g     F .text	0000007c .hidden __eqsf2
000237a0 g     F .text	00000140 __d2b
0000cbb0 g     F .text	00000134 ad9361_update_rf_bandwidth
00024c10 g     F .text	00000018 altera_avalon_jtag_uart_read_fd
000004f0 g     F .text	00000110 ad9361_find_opt
00016aa8 g     F .text	00000064 get_tx_samp_freq
000134c0 g     F .text	00000048 ad9361_get_rx_fir_en_dis
00012f58 g     F .text	000000c0 ad9361_get_rx_rssi
00000c4c g     F .text	000001f0 ad9361_bist_tone
0000f9f4 g     F .text	00000058 ad9361_rfpll_dummy_recalc_rate
0000ea44 g     F .text	00000258 ad9361_bbpll_round_rate
0002ac18 g       *ABS*	00000000 __alt_stack_base
00016bc0 g     F .text	00000064 get_tx_rf_bandwidth
0002ab68 g     O .bss	00000004 ad9361_phy
00023dd0 g     F .text	000008d4 .hidden __divdf3
000239fc g     F .text	00000060 __copybits
00013de0 g     F .text	00000064 ad9361_set_tx_lo_int_ext
0001b228 g     F .text	000000d0 dds_update
0001e238 g     F .text	0000072c .hidden __muldf3
00014ee4 g     F .text	000001a0 ad9361_hdl_loopback
000177c0 g     F .text	00000098 set_rx_fir_en
000092d4 g     F .text	00000578 ad9361_ensm_set_state
0001c76c g     F .text	000000c4 do_div
00025038 g     F .text	00000080 alt_dev_llist_insert
00024a30 g     F .text	00000080 sbrk
0002130c g     F .text	0000054c ___svfprintf_internal_r
0001a890 g     F .text	000003e0 dac_init
00015998 g     F .text	00000ac0 ad9361_dig_tune
00023ad4 g     F .text	00000054 _calloc_r
00012e8c g     F .text	00000068 ad9361_get_rx_lo_freq
00021e70 g     F .text	000000b4 __sfvwrite_small_dev
00014494 g     F .text	00000044 ad9361_tx_fastlock_recall
0002ab50 g       *ABS*	00000000 __bss_start
0001f55c g     F .text	00000028 memset
000196f4 g     F .text	00000c60 main
00001984 g     F .text	000000ac ad9361_get_tx_atten
0002ab7c g     O .bss	00000004 alt_envp
0001314c g     F .text	0000007c ad9361_set_rx_fir_config
00024c28 g     F .text	00000018 altera_avalon_jtag_uart_write_fd
00017f30 g     F .text	00000058 get_dds_tx2_tone1_freq
00023d10 g     F .text	000000c0 .hidden __ltsf2
000167ac g     F .text	000000b4 get_help
00012ef4 g     F .text	00000064 ad9361_set_rx_lo_int_ext
0001b2f8 g     F .text	00000118 dac_datasel
00030000 g       *ABS*	00000000 __alt_heap_limit
0001ade0 g     F .text	00000168 dds_set_phase
00024730 g     F .text	000001a0 .hidden __truncdfsf2
00021050 g     F .text	0000021c _strtol_r
00013018 g     F .text	000000e0 ad9361_set_rx_gain_control_mode
0001f670 g     F .text	00000164 _malloc_r
000140f4 g     F .text	00000098 ad9361_set_tx_fir_en_dis
0002a150 g     O .rwdata	00000004 alt_errno
00014374 g     F .text	00000044 ad9361_get_tx_rf_port_output
0000f630 g     F .text	000000b8 ad9361_rfpll_int_round_rate
000142fc g     F .text	00000078 ad9361_set_tx_rf_port_output
0002ac18 g       *ABS*	00000000 __alt_stack_limit
00018634 g     F .text	00000054 uart_write_char
0001f86c g     F .text	0000005c putc
00012aa0 g     F .text	000000e4 ad9361_set_rx_rf_gain
0001d6e4 g     F .text	0000005c .hidden __divsi3
0000d478 g     F .text	0000051c ad9361_validate_enable_fir
000135f4 g     F .text	000000a8 ad9361_set_rx_bbdc_track_en_dis
0001ba14 g     F .text	00000044 axiadc_write
0001a6b0 g     F .text	0000002c dac_dma_write
00002bf4 g     F .text	0000016c ad9361_set_rx_gain
0001bc64 g     F .text	0000002c clk_prepare_enable
000143b8 g     F .text	00000054 ad9361_set_tx_auto_cal_en_dis
00018ddc g     F .text	00000098 console_get_command
00025348 g       *ABS*	00000000 __flash_rodata_start
00016b0c g     F .text	000000b4 set_tx_samp_freq
00018018 g     F .text	00000058 get_dds_tx2_tone2_freq
0000fc04 g     F .text	0000017c ad9361_rfpll_round_rate
000246a4 g     F .text	0000008c .hidden __nedf2
0001ca78 g     F .text	00000098 .hidden __fixunsdfdi
0001a4ac g     F .text	0000014c adc_capture
00024ba0 g     F .text	00000028 alt_irq_init
00016f9c g     F .text	000000a8 get_rx_lo_freq
0000f6e8 g     F .text	0000030c ad9361_rfpll_int_set_rate
000250cc g     F .text	0000002c alt_release_fd
00013508 g     F .text	000000a8 ad9361_set_rx_rfdc_track_en_dis
0001bc90 g     F .text	000001a8 clk_get_rate
00029224 g     O .rodata	00000100 .hidden __clz_tab
00020f48 g     F .text	00000108 strtof
00023c50 g     F .text	000000c0 .hidden __gesf2
000183f0 g     F .text	000000d8 set_dds_tx2_tone1_scale
0001af48 g     F .text	000002e0 dds_set_scale
00023b74 g     F .text	00000060 _write_r
00017cb0 g     F .text	00000068 get_dds_tx1_tone1_scale
00016c24 g     F .text	00000080 set_tx_rf_bandwidth
00017f88 g     F .text	00000090 set_dds_tx2_tone1_freq
00018530 g     F .text	000000d8 set_dds_tx2_tone2_scale
0000fa4c g     F .text	00000064 ad9361_rfpll_dummy_set_rate
0002a130 g     O .rwdata	00000004 _impure_ptr
0002ab84 g     O .bss	00000004 alt_argc
0001a438 g     F .text	00000074 adc_init
0001b694 g     F .text	00000048 alt_avl_gpio_write
000088bc g     F .text	000000c8 ad9361_get_temp
00023638 g     F .text	00000058 __ulp
00017df0 g     F .text	00000068 get_dds_tx1_tone2_scale
0002a148 g     O .rwdata	00000008 alt_fs_list
0000b46c g     F .text	00000394 ad9361_fastlock_recall
00021858 g     F .text	0000002c __vfprintf_internal_unused
00018244 g     F .text	0000006c get_dds_tx2_tone2_phase
0001a7b0 g     F .text	00000050 dac_stop
00014524 g     F .text	0000004c ad9361_tx_fastlock_save
00000e3c g     F .text	00000074 ad9361_get_bist_tone
00010fcc g     F .text	00001838 ad9361_init
00013910 g     F .text	0000004c ad9361_rx_fastlock_load
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001a640 g     F .text	00000044 dac_write
00018688 g     F .text	00000028 uart_read_char
00012c6c g     F .text	00000070 ad9361_set_rx_rf_bandwidth
000166fc g     F .text	000000b0 show_invalid_param_message
00012dc8 g     F .text	00000058 ad9361_get_rx_sampling_freq
0002a120 g     O .rwdata	00000004 alt_stack_limit_value
000169a8 g     F .text	00000100 set_tx_lo_freq
00016d0c g     F .text	00000094 set_tx1_attenuation
0000ca48 g     F .text	00000168 ad9361_do_calib_run
0002a154 g       *ABS*	00000000 _edata
00024dd8 g     F .text	00000018 altera_avalon_uart_read_fd
0001b998 g     F .text	00000038 axiadc_post_setup
00014ca8 g     F .text	00000050 ad9361_set_trx_rate_gov
0002ac18 g       *ABS*	00000000 _end
0001bbb8 g     F .text	000000ac axiadc_idelay_set
0002ab6c g     O .bss	00000004 num_3
000174c4 g     F .text	0000009c set_rx2_gc_mode
00018858 g     F .text	0000054c console_print
00000020 g       *ABS*	00000000 __ram_exceptions_end
00017e58 g     F .text	000000d8 set_dds_tx1_tone2_scale
00000698 g     F .text	00000108 ad9361_reset
0001b704 g     F .text	0000009c gpio_direction
000172c0 g     F .text	00000090 set_rx_rf_bandwidth
00025160 g     F .text	00000028 exit
000234c0 g     F .text	00000178 __mdiff
00000830 g     F .text	00000090 ad9361_en_dis_rx
00013c08 g     F .text	000000ac ad9361_set_tx_sampling_freq
0001d740 g     F .text	00000064 .hidden __modsi3
00013b58 g     F .text	00000070 ad9361_set_tx_rf_bandwidth
0002a134 g     O .rwdata	00000004 __ctype_ptr__
00030000 g       *ABS*	00000000 __alt_data_end
00012804 g     F .text	00000148 ad9361_set_en_state_machine_mode
0001f4cc g     F .text	00000014 atoi
000291e4 g     O .rodata	00000040 sine_lut
00006c10 g     F .text	00000124 ad9361_rf_port_setup
0000e790 g     F .text	0000011c ad9361_clk_factor_set_rate
00029388 g     O .rodata	00000101 _ctype_
00000000 g       *ABS*	00000000 __alt_mem_onchip_ram
000130f8 g     F .text	00000054 ad9361_get_rx_gain_control_mode
00008984 g     F .text	000000c8 ad9361_get_auxadc
0002532c g     F .text	0000001c _exit
0000a698 g     F .text	00000084 ad9361_set_trx_clock_chain_freq
0001553c g     F .text	0000045c ad9361_dig_interface_timing_analysis
00000260 g     F .text	000000bc ad9361_spi_write
0001c994 g     F .text	00000068 .hidden __muldi3
00000c10 g     F .text	0000003c ad9361_get_bist_prbs
000186b0 g     F .text	00000070 uart_write_string
000010f0 g     F .text	00000060 ad9361_from_clk
0001fbcc g     F .text	00000024 strlen
000176c4 g     F .text	00000094 set_rx2_rf_gain
000297a0 g     O .rwdata	00000360 cmd_list
0001e068 g     F .text	000000e8 .hidden __gedf2
000135b0 g     F .text	00000044 ad9361_get_rx_rfdc_track_en_dis
000220e8 g     F .text	00000754 __gethex
0002ab70 g     O .bss	00000004 __malloc_sbrk_start
0001c934 g     F .text	00000060 zmalloc
000250b8 g     F .text	00000014 alt_icache_flush_all
0000ac5c g     F .text	000004ac ad9361_fastlock_store
0001b48c g     F .text	0000002c altera_bridge_uninit
0001b6dc g     F .text	00000028 gpio_init
0002ab74 g     O .bss	00000004 __malloc_free_list
00021e44 g     F .text	0000002c __vfprintf_internal
00013888 g     F .text	00000044 ad9361_rx_fastlock_store
00024e08 g     F .text	00000090 altera_avalon_uart_read
00029b14 g     O .rwdata	00000200 default_init_param
00013d78 g     F .text	00000068 ad9361_get_tx_lo_freq
0001e964 g     F .text	000008d8 .hidden __subdf3
00002474 g     F .text	00000200 ad9361_ensm_force_state
00014bd4 g     F .text	000000d4 ad9361_set_trx_fir_en_dis
00022ef4 g     F .text	000000b8 __lo0bits
0001b958 g     F .text	00000040 axiadc_init
00000600 g     F .text	00000098 ad9361_1rx1tx_channel_map
00024f2c g     F .text	000000dc close
0001a39c g     F .text	00000044 adc_write
000248d0 g     F .text	0000011c alt_load
0001369c g     F .text	00000044 ad9361_get_rx_bbdc_track_en_dis
0001f510 g     F .text	0000001c free
00022c6c g     F .text	00000108 __multadd
000171a8 g     F .text	000000b4 set_rx_samp_freq
00022bec g     F .text	00000080 _Bfree
0001b7a0 g     F .text	0000003c gpio_is_valid
0001765c g     F .text	00000068 get_rx2_rf_gain



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <_gp+0xfffcdee4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08400814 	ori	at,at,32
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .text:

00000020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
      20:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
      24:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
      28:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
      2c:	00bffd16 	blt	zero,r2,24 <_gp+0xfffcdf04>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
      30:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
      34:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
      38:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
      3c:	d6884814 	ori	gp,gp,8480
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      40:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
      44:	10aad414 	ori	r2,r2,43856

    movhi r3, %hi(__bss_end)
      48:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
      4c:	18eb0614 	ori	r3,r3,44056

    beq r2, r3, 1f
      50:	10c00326 	beq	r2,r3,60 <_start+0x40>

0:
    stw zero, (r2)
      54:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      58:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      5c:	10fffd36 	bltu	r2,r3,54 <_gp+0xfffcdf34>
     * If the user has selected stack checking then we need to set up a safe
     * value in the stack limit register so that the relocation functions
     * don't think the stack has overflowed (the contents of the rwdata
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
      60:	0031883a 	mov	et,zero
#endif

    call alt_load
      64:	00248d00 	call	248d0 <alt_load>
    /*
     * Set up the stack limit (if required).  The linker has set up the
     * copy of the variable which is in memory.
     */

    ldw   et, %gprel(alt_stack_limit_value)(gp)
      68:	d6200017 	ldw	et,-32768(gp)

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      6c:	00249ec0 	call	249ec <alt_main>

00000070 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      70:	003fff06 	br	70 <_gp+0xfffcdf50>

00000074 <ad9361_spi_readm>:
 * @param num The number of bytes to read.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_spi_readm(struct spi_device *spi, uint32_t reg,
	uint8_t *rbuf, uint32_t num)
{
      74:	defff604 	addi	sp,sp,-40
      78:	de00012e 	bgeu	sp,et,80 <ad9361_spi_readm+0xc>
      7c:	003b68fa 	trap	3
      80:	dfc00915 	stw	ra,36(sp)
      84:	df000815 	stw	fp,32(sp)
      88:	df000804 	addi	fp,sp,32
      8c:	e13ffc15 	stw	r4,-16(fp)
      90:	e17ffd15 	stw	r5,-12(fp)
      94:	e1bffe15 	stw	r6,-8(fp)
      98:	e1ffff15 	stw	r7,-4(fp)
	uint8_t buf[2];
	int32_t ret;
	uint16_t cmd;

	if (num > MAX_MBYTE_SPI)
      9c:	e0bfff17 	ldw	r2,-4(fp)
      a0:	10800270 	cmpltui	r2,r2,9
      a4:	1000021e 	bne	r2,zero,b0 <ad9361_spi_readm+0x3c>
		return -EINVAL;
      a8:	00bffa84 	movi	r2,-22
      ac:	00002306 	br	13c <ad9361_spi_readm+0xc8>

	cmd = AD_READ | AD_CNT(num) | AD_ADDR(reg);
      b0:	e0bfff17 	ldw	r2,-4(fp)
      b4:	10bfffc4 	addi	r2,r2,-1
      b8:	108001cc 	andi	r2,r2,7
      bc:	1004933a 	slli	r2,r2,12
      c0:	1007883a 	mov	r3,r2
      c4:	e0bffd17 	ldw	r2,-12(fp)
      c8:	1080ffcc 	andi	r2,r2,1023
      cc:	1884b03a 	or	r2,r3,r2
      d0:	e0bff90d 	sth	r2,-28(fp)
	buf[0] = cmd >> 8;
      d4:	e0bff90b 	ldhu	r2,-28(fp)
      d8:	1004d23a 	srli	r2,r2,8
      dc:	e0bffb05 	stb	r2,-20(fp)
	buf[1] = cmd & 0xFF;
      e0:	e0bff90b 	ldhu	r2,-28(fp)
      e4:	e0bffb45 	stb	r2,-19(fp)

	ret = spi_write_then_read(spi, &buf[0], 2, rbuf, num);
      e8:	e0fffb04 	addi	r3,fp,-20
      ec:	e0bfff17 	ldw	r2,-4(fp)
      f0:	d8800015 	stw	r2,0(sp)
      f4:	e13ffc17 	ldw	r4,-16(fp)
      f8:	180b883a 	mov	r5,r3
      fc:	01800084 	movi	r6,2
     100:	e1fffe17 	ldw	r7,-8(fp)
     104:	001b5e80 	call	1b5e8 <spi_write_then_read>
     108:	e0bffa15 	stw	r2,-24(fp)
	if (ret < 0) {
     10c:	e0bffa17 	ldw	r2,-24(fp)
     110:	1000090e 	bge	r2,zero,138 <ad9361_spi_readm+0xc4>
		dev_err(&spi->dev, "Read Error %"PRId32, ret);
     114:	010000b4 	movhi	r4,2
     118:	211a7104 	addi	r4,r4,27076
     11c:	e17ffa17 	ldw	r5,-24(fp)
     120:	001f8180 	call	1f818 <printf>
     124:	010000b4 	movhi	r4,2
     128:	211a7504 	addi	r4,r4,27092
     12c:	001f8180 	call	1f818 <printf>
		return ret;
     130:	e0bffa17 	ldw	r2,-24(fp)
     134:	00000106 	br	13c <ad9361_spi_readm+0xc8>
			dev_dbg(&spi->dev, "%s: reg 0x%"PRIX32" val 0x%X",
			__func__, reg--, rbuf[i]);
	}
#endif

	return 0;
     138:	0005883a 	mov	r2,zero
}
     13c:	e037883a 	mov	sp,fp
     140:	dfc00117 	ldw	ra,4(sp)
     144:	df000017 	ldw	fp,0(sp)
     148:	dec00204 	addi	sp,sp,8
     14c:	f800283a 	ret

00000150 <ad9361_spi_read>:
 * @param spi
 * @param reg The register address.
 * @return The register value or negative error code in case of failure.
 */
int32_t ad9361_spi_read(struct spi_device *spi, uint32_t reg)
{
     150:	defffa04 	addi	sp,sp,-24
     154:	de00012e 	bgeu	sp,et,15c <ad9361_spi_read+0xc>
     158:	003b68fa 	trap	3
     15c:	dfc00515 	stw	ra,20(sp)
     160:	df000415 	stw	fp,16(sp)
     164:	df000404 	addi	fp,sp,16
     168:	e13ffe15 	stw	r4,-8(fp)
     16c:	e17fff15 	stw	r5,-4(fp)
	uint8_t buf;
	int32_t ret;

	ret = ad9361_spi_readm(spi, reg, &buf, 1);
     170:	e0bffd04 	addi	r2,fp,-12
     174:	e13ffe17 	ldw	r4,-8(fp)
     178:	e17fff17 	ldw	r5,-4(fp)
     17c:	100d883a 	mov	r6,r2
     180:	01c00044 	movi	r7,1
     184:	00000740 	call	74 <ad9361_spi_readm>
     188:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
     18c:	e0bffc17 	ldw	r2,-16(fp)
     190:	1000020e 	bge	r2,zero,19c <ad9361_spi_read+0x4c>
		return ret;
     194:	e0bffc17 	ldw	r2,-16(fp)
     198:	00000206 	br	1a4 <ad9361_spi_read+0x54>

	return buf;
     19c:	e0bffd03 	ldbu	r2,-12(fp)
     1a0:	10803fcc 	andi	r2,r2,255
}
     1a4:	e037883a 	mov	sp,fp
     1a8:	dfc00117 	ldw	ra,4(sp)
     1ac:	df000017 	ldw	fp,0(sp)
     1b0:	dec00204 	addi	sp,sp,8
     1b4:	f800283a 	ret

000001b8 <__ad9361_spi_readf>:
 * @param offset The mask offset.
 * @return The bits value or negative error code in case of failure.
 */
static int32_t __ad9361_spi_readf(struct spi_device *spi, uint32_t reg,
	uint32_t mask, uint32_t offset)
{
     1b8:	defff804 	addi	sp,sp,-32
     1bc:	de00012e 	bgeu	sp,et,1c4 <__ad9361_spi_readf+0xc>
     1c0:	003b68fa 	trap	3
     1c4:	dfc00715 	stw	ra,28(sp)
     1c8:	df000615 	stw	fp,24(sp)
     1cc:	df000604 	addi	fp,sp,24
     1d0:	e13ffc15 	stw	r4,-16(fp)
     1d4:	e17ffd15 	stw	r5,-12(fp)
     1d8:	e1bffe15 	stw	r6,-8(fp)
     1dc:	e1ffff15 	stw	r7,-4(fp)
	uint8_t buf;
	int32_t ret;

	if (!mask)
     1e0:	e0bffe17 	ldw	r2,-8(fp)
     1e4:	1000021e 	bne	r2,zero,1f0 <__ad9361_spi_readf+0x38>
		return -EINVAL;
     1e8:	00bffa84 	movi	r2,-22
     1ec:	00001706 	br	24c <__ad9361_spi_readf+0x94>

	ret = ad9361_spi_readm(spi, reg, &buf, 1);
     1f0:	e0bffb04 	addi	r2,fp,-20
     1f4:	e13ffc17 	ldw	r4,-16(fp)
     1f8:	e17ffd17 	ldw	r5,-12(fp)
     1fc:	100d883a 	mov	r6,r2
     200:	01c00044 	movi	r7,1
     204:	00000740 	call	74 <ad9361_spi_readm>
     208:	e0bffa15 	stw	r2,-24(fp)
	if (ret < 0)
     20c:	e0bffa17 	ldw	r2,-24(fp)
     210:	1000020e 	bge	r2,zero,21c <__ad9361_spi_readf+0x64>
		return ret;
     214:	e0bffa17 	ldw	r2,-24(fp)
     218:	00000c06 	br	24c <__ad9361_spi_readf+0x94>

	buf &= mask;
     21c:	e0bffe17 	ldw	r2,-8(fp)
     220:	1007883a 	mov	r3,r2
     224:	e0bffb03 	ldbu	r2,-20(fp)
     228:	1884703a 	and	r2,r3,r2
     22c:	e0bffb05 	stb	r2,-20(fp)
	buf >>= offset;
     230:	e0bffb03 	ldbu	r2,-20(fp)
     234:	10c03fcc 	andi	r3,r2,255
     238:	e0bfff17 	ldw	r2,-4(fp)
     23c:	1885d83a 	sra	r2,r3,r2
     240:	e0bffb05 	stb	r2,-20(fp)

	return buf;
     244:	e0bffb03 	ldbu	r2,-20(fp)
     248:	10803fcc 	andi	r2,r2,255
}
     24c:	e037883a 	mov	sp,fp
     250:	dfc00117 	ldw	ra,4(sp)
     254:	df000017 	ldw	fp,0(sp)
     258:	dec00204 	addi	sp,sp,8
     25c:	f800283a 	ret

00000260 <ad9361_spi_write>:
 * @param val The value of the register.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_spi_write(struct spi_device *spi,
	uint32_t reg, uint32_t val)
{
     260:	defff704 	addi	sp,sp,-36
     264:	de00012e 	bgeu	sp,et,26c <ad9361_spi_write+0xc>
     268:	003b68fa 	trap	3
     26c:	dfc00815 	stw	ra,32(sp)
     270:	df000715 	stw	fp,28(sp)
     274:	df000704 	addi	fp,sp,28
     278:	e13ffd15 	stw	r4,-12(fp)
     27c:	e17ffe15 	stw	r5,-8(fp)
     280:	e1bfff15 	stw	r6,-4(fp)
	uint8_t buf[3];
	int32_t ret;
	uint16_t cmd;

	cmd = AD_WRITE | AD_CNT(1) | AD_ADDR(reg);
     284:	e0bffe17 	ldw	r2,-8(fp)
     288:	1080ffcc 	andi	r2,r2,1023
     28c:	1007883a 	mov	r3,r2
     290:	00a00004 	movi	r2,-32768
     294:	1884b03a 	or	r2,r3,r2
     298:	e0bffa0d 	sth	r2,-24(fp)
	buf[0] = cmd >> 8;
     29c:	e0bffa0b 	ldhu	r2,-24(fp)
     2a0:	1004d23a 	srli	r2,r2,8
     2a4:	e0bffc05 	stb	r2,-16(fp)
	buf[1] = cmd & 0xFF;
     2a8:	e0bffa0b 	ldhu	r2,-24(fp)
     2ac:	e0bffc45 	stb	r2,-15(fp)
	buf[2] = val;
     2b0:	e0bfff17 	ldw	r2,-4(fp)
     2b4:	e0bffc85 	stb	r2,-14(fp)

	ret = spi_write_then_read(spi, buf, 3, NULL, 0);
     2b8:	e0bffc04 	addi	r2,fp,-16
     2bc:	d8000015 	stw	zero,0(sp)
     2c0:	e13ffd17 	ldw	r4,-12(fp)
     2c4:	100b883a 	mov	r5,r2
     2c8:	018000c4 	movi	r6,3
     2cc:	000f883a 	mov	r7,zero
     2d0:	001b5e80 	call	1b5e8 <spi_write_then_read>
     2d4:	e0bffb15 	stw	r2,-20(fp)
	if (ret < 0) {
     2d8:	e0bffb17 	ldw	r2,-20(fp)
     2dc:	1000090e 	bge	r2,zero,304 <ad9361_spi_write+0xa4>
		dev_err(&spi->dev, "Write Error %"PRId32, ret);
     2e0:	010000b4 	movhi	r4,2
     2e4:	211a7604 	addi	r4,r4,27096
     2e8:	e17ffb17 	ldw	r5,-20(fp)
     2ec:	001f8180 	call	1f818 <printf>
     2f0:	010000b4 	movhi	r4,2
     2f4:	211a7504 	addi	r4,r4,27092
     2f8:	001f8180 	call	1f818 <printf>
		return ret;
     2fc:	e0bffb17 	ldw	r2,-20(fp)
     300:	00000106 	br	308 <ad9361_spi_write+0xa8>

#ifdef _DEBUG
	dev_dbg(&spi->dev, "%s: reg 0x%"PRIX32" val 0x%X", __func__, reg, buf[2]);
#endif

	return 0;
     304:	0005883a 	mov	r2,zero
}
     308:	e037883a 	mov	sp,fp
     30c:	dfc00117 	ldw	ra,4(sp)
     310:	df000017 	ldw	fp,0(sp)
     314:	dec00204 	addi	sp,sp,8
     318:	f800283a 	ret

0000031c <__ad9361_spi_writef>:
 * @param val The bits value.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t __ad9361_spi_writef(struct spi_device *spi, uint32_t reg,
	uint32_t mask, uint32_t offset, uint32_t val)
{
     31c:	defff804 	addi	sp,sp,-32
     320:	de00012e 	bgeu	sp,et,328 <__ad9361_spi_writef+0xc>
     324:	003b68fa 	trap	3
     328:	dfc00715 	stw	ra,28(sp)
     32c:	df000615 	stw	fp,24(sp)
     330:	df000604 	addi	fp,sp,24
     334:	e13ffc15 	stw	r4,-16(fp)
     338:	e17ffd15 	stw	r5,-12(fp)
     33c:	e1bffe15 	stw	r6,-8(fp)
     340:	e1ffff15 	stw	r7,-4(fp)
	uint8_t buf;
	int32_t ret;

	if (!mask)
     344:	e0bffe17 	ldw	r2,-8(fp)
     348:	1000021e 	bne	r2,zero,354 <__ad9361_spi_writef+0x38>
		return -EINVAL;
     34c:	00bffa84 	movi	r2,-22
     350:	00002106 	br	3d8 <__ad9361_spi_writef+0xbc>

	ret = ad9361_spi_readm(spi, reg, &buf, 1);
     354:	e0bffb04 	addi	r2,fp,-20
     358:	e13ffc17 	ldw	r4,-16(fp)
     35c:	e17ffd17 	ldw	r5,-12(fp)
     360:	100d883a 	mov	r6,r2
     364:	01c00044 	movi	r7,1
     368:	00000740 	call	74 <ad9361_spi_readm>
     36c:	e0bffa15 	stw	r2,-24(fp)
	if (ret < 0)
     370:	e0bffa17 	ldw	r2,-24(fp)
     374:	1000020e 	bge	r2,zero,380 <__ad9361_spi_writef+0x64>
		return ret;
     378:	e0bffa17 	ldw	r2,-24(fp)
     37c:	00001606 	br	3d8 <__ad9361_spi_writef+0xbc>

	buf &= ~mask;
     380:	e0bffe17 	ldw	r2,-8(fp)
     384:	0084303a 	nor	r2,zero,r2
     388:	1007883a 	mov	r3,r2
     38c:	e0bffb03 	ldbu	r2,-20(fp)
     390:	1884703a 	and	r2,r3,r2
     394:	e0bffb05 	stb	r2,-20(fp)
	buf |= ((val << offset) & mask);
     398:	e0bfff17 	ldw	r2,-4(fp)
     39c:	e0c00217 	ldw	r3,8(fp)
     3a0:	1884983a 	sll	r2,r3,r2
     3a4:	1007883a 	mov	r3,r2
     3a8:	e0bffe17 	ldw	r2,-8(fp)
     3ac:	1884703a 	and	r2,r3,r2
     3b0:	1007883a 	mov	r3,r2
     3b4:	e0bffb03 	ldbu	r2,-20(fp)
     3b8:	1884b03a 	or	r2,r3,r2
     3bc:	e0bffb05 	stb	r2,-20(fp)

	return ad9361_spi_write(spi, reg, buf);
     3c0:	e0bffb03 	ldbu	r2,-20(fp)
     3c4:	10803fcc 	andi	r2,r2,255
     3c8:	e13ffc17 	ldw	r4,-16(fp)
     3cc:	e17ffd17 	ldw	r5,-12(fp)
     3d0:	100d883a 	mov	r6,r2
     3d4:	00002600 	call	260 <ad9361_spi_write>
}
     3d8:	e037883a 	mov	sp,fp
     3dc:	dfc00117 	ldw	ra,4(sp)
     3e0:	df000017 	ldw	fp,0(sp)
     3e4:	dec00204 	addi	sp,sp,8
     3e8:	f800283a 	ret

000003ec <ad9361_spi_writem>:
 * @param num The number of bytes to read.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_spi_writem(struct spi_device *spi,
	uint32_t reg, uint8_t *tbuf, uint32_t num)
{
     3ec:	defff404 	addi	sp,sp,-48
     3f0:	de00012e 	bgeu	sp,et,3f8 <ad9361_spi_writem+0xc>
     3f4:	003b68fa 	trap	3
     3f8:	dfc00b15 	stw	ra,44(sp)
     3fc:	df000a15 	stw	fp,40(sp)
     400:	df000a04 	addi	fp,sp,40
     404:	e13ffc15 	stw	r4,-16(fp)
     408:	e17ffd15 	stw	r5,-12(fp)
     40c:	e1bffe15 	stw	r6,-8(fp)
     410:	e1ffff15 	stw	r7,-4(fp)
	uint8_t buf[10];
	int32_t ret;
	uint16_t cmd;

	if (num > MAX_MBYTE_SPI)
     414:	e0bfff17 	ldw	r2,-4(fp)
     418:	10800270 	cmpltui	r2,r2,9
     41c:	1000021e 	bne	r2,zero,428 <ad9361_spi_writem+0x3c>
		return -EINVAL;
     420:	00bffa84 	movi	r2,-22
     424:	00002d06 	br	4dc <ad9361_spi_writem+0xf0>

	cmd = AD_WRITE | AD_CNT(num) | AD_ADDR(reg);
     428:	e0bfff17 	ldw	r2,-4(fp)
     42c:	10bfffc4 	addi	r2,r2,-1
     430:	108001cc 	andi	r2,r2,7
     434:	1004933a 	slli	r2,r2,12
     438:	1007883a 	mov	r3,r2
     43c:	e0bffd17 	ldw	r2,-12(fp)
     440:	1080ffcc 	andi	r2,r2,1023
     444:	1884b03a 	or	r2,r3,r2
     448:	1007883a 	mov	r3,r2
     44c:	00a00004 	movi	r2,-32768
     450:	1884b03a 	or	r2,r3,r2
     454:	e0bff70d 	sth	r2,-36(fp)
	buf[0] = cmd >> 8;
     458:	e0bff70b 	ldhu	r2,-36(fp)
     45c:	1004d23a 	srli	r2,r2,8
     460:	e0bff905 	stb	r2,-28(fp)
	buf[1] = cmd & 0xFF;
     464:	e0bff70b 	ldhu	r2,-36(fp)
     468:	e0bff945 	stb	r2,-27(fp)

#ifndef ALTERA_PLATFORM
	memcpy(&buf[2], tbuf, num);
     46c:	e0bff904 	addi	r2,fp,-28
     470:	10800084 	addi	r2,r2,2
     474:	1009883a 	mov	r4,r2
     478:	e17ffe17 	ldw	r5,-8(fp)
     47c:	e1bfff17 	ldw	r6,-4(fp)
     480:	001f52c0 	call	1f52c <memcpy>
#else
	int32_t i;
	for (i = 0; i < num; i++)
		buf[2 + i] =  tbuf[i];
#endif
	ret = spi_write_then_read(spi, buf, num + 2, NULL, 0);
     484:	e0bfff17 	ldw	r2,-4(fp)
     488:	10800084 	addi	r2,r2,2
     48c:	e0fff904 	addi	r3,fp,-28
     490:	d8000015 	stw	zero,0(sp)
     494:	e13ffc17 	ldw	r4,-16(fp)
     498:	180b883a 	mov	r5,r3
     49c:	100d883a 	mov	r6,r2
     4a0:	000f883a 	mov	r7,zero
     4a4:	001b5e80 	call	1b5e8 <spi_write_then_read>
     4a8:	e0bff815 	stw	r2,-32(fp)
	if (ret < 0) {
     4ac:	e0bff817 	ldw	r2,-32(fp)
     4b0:	1000090e 	bge	r2,zero,4d8 <ad9361_spi_writem+0xec>
		dev_err(&spi->dev, "Write Error %"PRId32, ret);
     4b4:	010000b4 	movhi	r4,2
     4b8:	211a7604 	addi	r4,r4,27096
     4bc:	e17ff817 	ldw	r5,-32(fp)
     4c0:	001f8180 	call	1f818 <printf>
     4c4:	010000b4 	movhi	r4,2
     4c8:	211a7504 	addi	r4,r4,27092
     4cc:	001f8180 	call	1f818 <printf>
		return ret;
     4d0:	e0bff817 	ldw	r2,-32(fp)
     4d4:	00000106 	br	4dc <ad9361_spi_writem+0xf0>
		for (i = 0; i < num; i++)
			dev_dbg(&spi->dev, "Reg 0x%"PRIX32" val 0x%X", reg--, tbuf[i]);
	}
#endif

	return 0;
     4d8:	0005883a 	mov	r2,zero
}
     4dc:	e037883a 	mov	sp,fp
     4e0:	dfc00117 	ldw	ra,4(sp)
     4e4:	df000017 	ldw	fp,0(sp)
     4e8:	dec00204 	addi	sp,sp,8
     4ec:	f800283a 	ret

000004f0 <ad9361_find_opt>:
 * @param field
 * @param ret_start
 * @return The optimal delay in case of success, negative error code otherwise.
 */
int32_t ad9361_find_opt(uint8_t *field, uint32_t size, uint32_t *ret_start)
{
     4f0:	defff704 	addi	sp,sp,-36
     4f4:	de00012e 	bgeu	sp,et,4fc <ad9361_find_opt+0xc>
     4f8:	003b68fa 	trap	3
     4fc:	df000815 	stw	fp,32(sp)
     500:	df000804 	addi	fp,sp,32
     504:	e13ffd15 	stw	r4,-12(fp)
     508:	e17ffe15 	stw	r5,-8(fp)
     50c:	e1bfff15 	stw	r6,-4(fp)
	int32_t i, cnt = 0, max_cnt = 0, start, max_start = 0;
     510:	e03ff915 	stw	zero,-28(fp)
     514:	e03ffa15 	stw	zero,-24(fp)
     518:	e03ffc15 	stw	zero,-16(fp)

	for(i = 0, start = -1; i < (int64_t)size; i++) {
     51c:	e03ff815 	stw	zero,-32(fp)
     520:	013fffc4 	movi	r4,-1
     524:	e13ffb15 	stw	r4,-20(fp)
     528:	00001c06 	br	59c <ad9361_find_opt+0xac>
		if (field[i] == 0) {
     52c:	e13ff817 	ldw	r4,-32(fp)
     530:	e17ffd17 	ldw	r5,-12(fp)
     534:	2909883a 	add	r4,r5,r4
     538:	21000003 	ldbu	r4,0(r4)
     53c:	21003fcc 	andi	r4,r4,255
     540:	2000091e 	bne	r4,zero,568 <ad9361_find_opt+0x78>
			if (start == -1)
     544:	e13ffb17 	ldw	r4,-20(fp)
     548:	213fffd8 	cmpnei	r4,r4,-1
     54c:	2000021e 	bne	r4,zero,558 <ad9361_find_opt+0x68>
				start = i;
     550:	e13ff817 	ldw	r4,-32(fp)
     554:	e13ffb15 	stw	r4,-20(fp)
			cnt++;
     558:	e13ff917 	ldw	r4,-28(fp)
     55c:	21000044 	addi	r4,r4,1
     560:	e13ff915 	stw	r4,-28(fp)
     564:	00000a06 	br	590 <ad9361_find_opt+0xa0>
		} else {
			if (cnt > max_cnt) {
     568:	e13ff917 	ldw	r4,-28(fp)
     56c:	e17ffa17 	ldw	r5,-24(fp)
     570:	2900040e 	bge	r5,r4,584 <ad9361_find_opt+0x94>
				max_cnt = cnt;
     574:	e13ff917 	ldw	r4,-28(fp)
     578:	e13ffa15 	stw	r4,-24(fp)
				max_start = start;
     57c:	e13ffb17 	ldw	r4,-20(fp)
     580:	e13ffc15 	stw	r4,-16(fp)
			}
			start = -1;
     584:	013fffc4 	movi	r4,-1
     588:	e13ffb15 	stw	r4,-20(fp)
			cnt = 0;
     58c:	e03ff915 	stw	zero,-28(fp)
 */
int32_t ad9361_find_opt(uint8_t *field, uint32_t size, uint32_t *ret_start)
{
	int32_t i, cnt = 0, max_cnt = 0, start, max_start = 0;

	for(i = 0, start = -1; i < (int64_t)size; i++) {
     590:	e13ff817 	ldw	r4,-32(fp)
     594:	21000044 	addi	r4,r4,1
     598:	e13ff815 	stw	r4,-32(fp)
     59c:	e13ff817 	ldw	r4,-32(fp)
     5a0:	200f883a 	mov	r7,r4
     5a4:	2009d7fa 	srai	r4,r4,31
     5a8:	2011883a 	mov	r8,r4
     5ac:	e13ffe17 	ldw	r4,-8(fp)
     5b0:	2005883a 	mov	r2,r4
     5b4:	0007883a 	mov	r3,zero
     5b8:	40ffdc16 	blt	r8,r3,52c <_gp+0xfffce40c>
     5bc:	1a00011e 	bne	r3,r8,5c4 <ad9361_find_opt+0xd4>
     5c0:	38bfda36 	bltu	r7,r2,52c <_gp+0xfffce40c>
			start = -1;
			cnt = 0;
		}
	}

	if (cnt > max_cnt) {
     5c4:	e0bff917 	ldw	r2,-28(fp)
     5c8:	e0fffa17 	ldw	r3,-24(fp)
     5cc:	1880040e 	bge	r3,r2,5e0 <ad9361_find_opt+0xf0>
		max_cnt = cnt;
     5d0:	e0bff917 	ldw	r2,-28(fp)
     5d4:	e0bffa15 	stw	r2,-24(fp)
		max_start = start;
     5d8:	e0bffb17 	ldw	r2,-20(fp)
     5dc:	e0bffc15 	stw	r2,-16(fp)
	}

	*ret_start = max_start;
     5e0:	e0fffc17 	ldw	r3,-16(fp)
     5e4:	e0bfff17 	ldw	r2,-4(fp)
     5e8:	10c00015 	stw	r3,0(r2)

	return max_cnt;
     5ec:	e0bffa17 	ldw	r2,-24(fp)
}
     5f0:	e037883a 	mov	sp,fp
     5f4:	df000017 	ldw	fp,0(sp)
     5f8:	dec00104 	addi	sp,sp,4
     5fc:	f800283a 	ret

00000600 <ad9361_1rx1tx_channel_map>:
 * @param map Map
 * @param channel Channel
 * @return The channel number.
 */
int32_t ad9361_1rx1tx_channel_map(struct ad9361_rf_phy *phy, bool tx, int32_t channel)
{
     600:	defffb04 	addi	sp,sp,-20
     604:	de00012e 	bgeu	sp,et,60c <ad9361_1rx1tx_channel_map+0xc>
     608:	003b68fa 	trap	3
     60c:	df000415 	stw	fp,16(sp)
     610:	df000404 	addi	fp,sp,16
     614:	e13ffd15 	stw	r4,-12(fp)
     618:	2805883a 	mov	r2,r5
     61c:	e1bfff15 	stw	r6,-4(fp)
     620:	e0bffe05 	stb	r2,-8(fp)
	uint32_t map;

	if (phy->pdata->rx2tx2)
     624:	e0bffd17 	ldw	r2,-12(fp)
     628:	10803017 	ldw	r2,192(r2)
     62c:	10800003 	ldbu	r2,0(r2)
     630:	10803fcc 	andi	r2,r2,255
     634:	10000226 	beq	r2,zero,640 <ad9361_1rx1tx_channel_map+0x40>
		return channel;
     638:	e0bfff17 	ldw	r2,-4(fp)
     63c:	00001206 	br	688 <ad9361_1rx1tx_channel_map+0x88>

	if (tx)
     640:	e0bffe03 	ldbu	r2,-8(fp)
     644:	10000526 	beq	r2,zero,65c <ad9361_1rx1tx_channel_map+0x5c>
		map = phy->pdata->rx1tx1_mode_use_tx_num;
     648:	e0bffd17 	ldw	r2,-12(fp)
     64c:	10803017 	ldw	r2,192(r2)
     650:	10800b17 	ldw	r2,44(r2)
     654:	e0bffc15 	stw	r2,-16(fp)
     658:	00000406 	br	66c <ad9361_1rx1tx_channel_map+0x6c>
	else
		map = phy->pdata->rx1tx1_mode_use_rx_num;
     65c:	e0bffd17 	ldw	r2,-12(fp)
     660:	10803017 	ldw	r2,192(r2)
     664:	10800a17 	ldw	r2,40(r2)
     668:	e0bffc15 	stw	r2,-16(fp)

	if (map == 2)
     66c:	e0bffc17 	ldw	r2,-16(fp)
     670:	10800098 	cmpnei	r2,r2,2
     674:	1000031e 	bne	r2,zero,684 <ad9361_1rx1tx_channel_map+0x84>
		return channel + 1;
     678:	e0bfff17 	ldw	r2,-4(fp)
     67c:	10800044 	addi	r2,r2,1
     680:	00000106 	br	688 <ad9361_1rx1tx_channel_map+0x88>

	return channel;
     684:	e0bfff17 	ldw	r2,-4(fp)
}
     688:	e037883a 	mov	sp,fp
     68c:	df000017 	ldw	fp,0(sp)
     690:	dec00104 	addi	sp,sp,4
     694:	f800283a 	ret

00000698 <ad9361_reset>:
 * AD9361 Device Reset
 * @param phy The AD9361 state structure.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_reset(struct ad9361_rf_phy *phy)
{
     698:	defffd04 	addi	sp,sp,-12
     69c:	de00012e 	bgeu	sp,et,6a4 <ad9361_reset+0xc>
     6a0:	003b68fa 	trap	3
     6a4:	dfc00215 	stw	ra,8(sp)
     6a8:	df000115 	stw	fp,4(sp)
     6ac:	df000104 	addi	fp,sp,4
     6b0:	e13fff15 	stw	r4,-4(fp)
	if (gpio_is_valid(phy->pdata->gpio_resetb)) {
     6b4:	e0bfff17 	ldw	r2,-4(fp)
     6b8:	10803017 	ldw	r2,192(r2)
     6bc:	10805d17 	ldw	r2,372(r2)
     6c0:	1009883a 	mov	r4,r2
     6c4:	001b7a00 	call	1b7a0 <gpio_is_valid>
     6c8:	10803fcc 	andi	r2,r2,255
     6cc:	10001a26 	beq	r2,zero,738 <ad9361_reset+0xa0>
		gpio_set_value(phy->pdata->gpio_resetb, 0);
     6d0:	e0bfff17 	ldw	r2,-4(fp)
     6d4:	10803017 	ldw	r2,192(r2)
     6d8:	10805d17 	ldw	r2,372(r2)
     6dc:	1009883a 	mov	r4,r2
     6e0:	000b883a 	mov	r5,zero
     6e4:	001b8100 	call	1b810 <gpio_set_value>
		mdelay(1);
     6e8:	01000044 	movi	r4,1
     6ec:	001b8dc0 	call	1b8dc <mdelay>
		gpio_set_value(phy->pdata->gpio_resetb, 1);
     6f0:	e0bfff17 	ldw	r2,-4(fp)
     6f4:	10803017 	ldw	r2,192(r2)
     6f8:	10805d17 	ldw	r2,372(r2)
     6fc:	1009883a 	mov	r4,r2
     700:	01400044 	movi	r5,1
     704:	001b8100 	call	1b810 <gpio_set_value>
		mdelay(1);
     708:	01000044 	movi	r4,1
     70c:	001b8dc0 	call	1b8dc <mdelay>
		dev_dbg(&phy->spi->dev, "%s: by GPIO", __func__);
     710:	010000b4 	movhi	r4,2
     714:	211a7a04 	addi	r4,r4,27112
     718:	014000b4 	movhi	r5,2
     71c:	295e6f04 	addi	r5,r5,31164
     720:	001f8180 	call	1f818 <printf>
     724:	010000b4 	movhi	r4,2
     728:	211a7504 	addi	r4,r4,27092
     72c:	001f8180 	call	1f818 <printf>
		return 0;
     730:	0005883a 	mov	r2,zero
     734:	00001506 	br	78c <ad9361_reset+0xf4>
	/* SPI Soft Reset was removed from the register map, since it doesn't
	 * work reliably. Without a prober HW reset randomness may happen.
	 * Please specify a RESET GPIO.
	 */

	ad9361_spi_write(phy->spi, REG_SPI_CONF, SOFT_RESET | _SOFT_RESET);
     738:	e0bfff17 	ldw	r2,-4(fp)
     73c:	10800117 	ldw	r2,4(r2)
     740:	1009883a 	mov	r4,r2
     744:	000b883a 	mov	r5,zero
     748:	01802044 	movi	r6,129
     74c:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(phy->spi, REG_SPI_CONF, 0x0);
     750:	e0bfff17 	ldw	r2,-4(fp)
     754:	10800117 	ldw	r2,4(r2)
     758:	1009883a 	mov	r4,r2
     75c:	000b883a 	mov	r5,zero
     760:	000d883a 	mov	r6,zero
     764:	00002600 	call	260 <ad9361_spi_write>
	dev_err(&phy->spi->dev,
     768:	010000b4 	movhi	r4,2
     76c:	211a7d04 	addi	r4,r4,27124
     770:	014000b4 	movhi	r5,2
     774:	295e6f04 	addi	r5,r5,31164
     778:	001f8180 	call	1f818 <printf>
     77c:	010000b4 	movhi	r4,2
     780:	211a7504 	addi	r4,r4,27092
     784:	001f8180 	call	1f818 <printf>
		 "%s: by SPI, this may cause unpredicted behavior!", __func__);

	return -ENODEV;
     788:	00bffb44 	movi	r2,-19
}
     78c:	e037883a 	mov	sp,fp
     790:	dfc00117 	ldw	ra,4(sp)
     794:	df000017 	ldw	fp,0(sp)
     798:	dec00204 	addi	sp,sp,8
     79c:	f800283a 	ret

000007a0 <ad9361_en_dis_tx>:
 * @param tx_if The desired channel number [1, 2].
 * @param enable Enable/disable option.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_en_dis_tx(struct ad9361_rf_phy *phy, uint32_t tx_if, uint32_t enable)
{
     7a0:	defff804 	addi	sp,sp,-32
     7a4:	de00012e 	bgeu	sp,et,7ac <ad9361_en_dis_tx+0xc>
     7a8:	003b68fa 	trap	3
     7ac:	dfc00715 	stw	ra,28(sp)
     7b0:	df000615 	stw	fp,24(sp)
     7b4:	dc400515 	stw	r17,20(sp)
     7b8:	dc000415 	stw	r16,16(sp)
     7bc:	df000604 	addi	fp,sp,24
     7c0:	e13ffb15 	stw	r4,-20(fp)
     7c4:	e17ffc15 	stw	r5,-16(fp)
     7c8:	e1bffd15 	stw	r6,-12(fp)
	if ((tx_if & enable) > 1 && AD9364_DEVICE && enable)
		return -EINVAL;

	return ad9361_spi_writef(phy->spi, REG_TX_ENABLE_FILTER_CTRL,
     7cc:	e0bffb17 	ldw	r2,-20(fp)
     7d0:	14400117 	ldw	r17,4(r2)
     7d4:	e0bffc17 	ldw	r2,-16(fp)
     7d8:	100491ba 	slli	r2,r2,6
     7dc:	14003fcc 	andi	r16,r2,255
     7e0:	e0bffc17 	ldw	r2,-16(fp)
     7e4:	100491ba 	slli	r2,r2,6
     7e8:	10803fcc 	andi	r2,r2,255
     7ec:	1009883a 	mov	r4,r2
     7f0:	001c8300 	call	1c830 <find_first_bit>
     7f4:	1007883a 	mov	r3,r2
     7f8:	e0bffd17 	ldw	r2,-12(fp)
     7fc:	d8800015 	stw	r2,0(sp)
     800:	8809883a 	mov	r4,r17
     804:	01400084 	movi	r5,2
     808:	800d883a 	mov	r6,r16
     80c:	180f883a 	mov	r7,r3
     810:	000031c0 	call	31c <__ad9361_spi_writef>
		TX_CHANNEL_ENABLE(tx_if), enable);
}
     814:	e6fffe04 	addi	sp,fp,-8
     818:	dfc00317 	ldw	ra,12(sp)
     81c:	df000217 	ldw	fp,8(sp)
     820:	dc400117 	ldw	r17,4(sp)
     824:	dc000017 	ldw	r16,0(sp)
     828:	dec00404 	addi	sp,sp,16
     82c:	f800283a 	ret

00000830 <ad9361_en_dis_rx>:
 * @param tx_if The desired channel number [1, 2].
 * @param enable Enable/disable option.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_en_dis_rx(struct ad9361_rf_phy *phy, uint32_t rx_if, uint32_t enable)
{
     830:	defff804 	addi	sp,sp,-32
     834:	de00012e 	bgeu	sp,et,83c <ad9361_en_dis_rx+0xc>
     838:	003b68fa 	trap	3
     83c:	dfc00715 	stw	ra,28(sp)
     840:	df000615 	stw	fp,24(sp)
     844:	dc400515 	stw	r17,20(sp)
     848:	dc000415 	stw	r16,16(sp)
     84c:	df000604 	addi	fp,sp,24
     850:	e13ffb15 	stw	r4,-20(fp)
     854:	e17ffc15 	stw	r5,-16(fp)
     858:	e1bffd15 	stw	r6,-12(fp)
	if ((rx_if & enable) > 1 && AD9364_DEVICE && enable)
		return -EINVAL;

	return ad9361_spi_writef(phy->spi, REG_RX_ENABLE_FILTER_CTRL,
     85c:	e0bffb17 	ldw	r2,-20(fp)
     860:	14400117 	ldw	r17,4(r2)
     864:	e0bffc17 	ldw	r2,-16(fp)
     868:	100491ba 	slli	r2,r2,6
     86c:	14003fcc 	andi	r16,r2,255
     870:	e0bffc17 	ldw	r2,-16(fp)
     874:	100491ba 	slli	r2,r2,6
     878:	10803fcc 	andi	r2,r2,255
     87c:	1009883a 	mov	r4,r2
     880:	001c8300 	call	1c830 <find_first_bit>
     884:	1007883a 	mov	r3,r2
     888:	e0bffd17 	ldw	r2,-12(fp)
     88c:	d8800015 	stw	r2,0(sp)
     890:	8809883a 	mov	r4,r17
     894:	014000c4 	movi	r5,3
     898:	800d883a 	mov	r6,r16
     89c:	180f883a 	mov	r7,r3
     8a0:	000031c0 	call	31c <__ad9361_spi_writef>
		RX_CHANNEL_ENABLE(rx_if), enable);
}
     8a4:	e6fffe04 	addi	sp,fp,-8
     8a8:	dfc00317 	ldw	ra,12(sp)
     8ac:	df000217 	ldw	fp,8(sp)
     8b0:	dc400117 	ldw	r17,4(sp)
     8b4:	dc000017 	ldw	r16,0(sp)
     8b8:	dec00404 	addi	sp,sp,16
     8bc:	f800283a 	ret

000008c0 <ad9361_int_loopback_fix_ch_cross>:
 * @param phy The AD9361 state structure.
 * @param enable Enable.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_int_loopback_fix_ch_cross(struct ad9361_rf_phy *phy, bool enable)
{
     8c0:	defffc04 	addi	sp,sp,-16
     8c4:	de00012e 	bgeu	sp,et,8cc <ad9361_int_loopback_fix_ch_cross+0xc>
     8c8:	003b68fa 	trap	3
     8cc:	dfc00315 	stw	ra,12(sp)
     8d0:	df000215 	stw	fp,8(sp)
     8d4:	df000204 	addi	fp,sp,8
     8d8:	e13ffe15 	stw	r4,-8(fp)
     8dc:	2805883a 	mov	r2,r5
     8e0:	e0bfff05 	stb	r2,-4(fp)
	/* Loopback works only TX1->RX1 or RX2->RX2 */
	if (!phy->pdata->rx2tx2 && phy->pdata->rx1tx1_mode_use_rx_num !=
     8e4:	e0bffe17 	ldw	r2,-8(fp)
     8e8:	10803017 	ldw	r2,192(r2)
     8ec:	10800003 	ldbu	r2,0(r2)
     8f0:	1080005c 	xori	r2,r2,1
     8f4:	10803fcc 	andi	r2,r2,255
     8f8:	10001526 	beq	r2,zero,950 <ad9361_int_loopback_fix_ch_cross+0x90>
     8fc:	e0bffe17 	ldw	r2,-8(fp)
     900:	10803017 	ldw	r2,192(r2)
     904:	10c00a17 	ldw	r3,40(r2)
			phy->pdata->rx1tx1_mode_use_tx_num)
     908:	e0bffe17 	ldw	r2,-8(fp)
     90c:	10803017 	ldw	r2,192(r2)
     910:	10800b17 	ldw	r2,44(r2)
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_int_loopback_fix_ch_cross(struct ad9361_rf_phy *phy, bool enable)
{
	/* Loopback works only TX1->RX1 or RX2->RX2 */
	if (!phy->pdata->rx2tx2 && phy->pdata->rx1tx1_mode_use_rx_num !=
     914:	18800e26 	beq	r3,r2,950 <ad9361_int_loopback_fix_ch_cross+0x90>
			phy->pdata->rx1tx1_mode_use_tx_num)
		return ad9361_en_dis_tx(phy, TX_1 | TX_2,
     918:	e0bfff03 	ldbu	r2,-4(fp)
     91c:	10000426 	beq	r2,zero,930 <ad9361_int_loopback_fix_ch_cross+0x70>
				enable ? phy->pdata->rx1tx1_mode_use_rx_num :
     920:	e0bffe17 	ldw	r2,-8(fp)
     924:	10803017 	ldw	r2,192(r2)
static int32_t ad9361_int_loopback_fix_ch_cross(struct ad9361_rf_phy *phy, bool enable)
{
	/* Loopback works only TX1->RX1 or RX2->RX2 */
	if (!phy->pdata->rx2tx2 && phy->pdata->rx1tx1_mode_use_rx_num !=
			phy->pdata->rx1tx1_mode_use_tx_num)
		return ad9361_en_dis_tx(phy, TX_1 | TX_2,
     928:	10800a17 	ldw	r2,40(r2)
     92c:	00000306 	br	93c <ad9361_int_loopback_fix_ch_cross+0x7c>
				enable ? phy->pdata->rx1tx1_mode_use_rx_num :
				phy->pdata->rx1tx1_mode_use_tx_num);
     930:	e0bffe17 	ldw	r2,-8(fp)
     934:	10803017 	ldw	r2,192(r2)
static int32_t ad9361_int_loopback_fix_ch_cross(struct ad9361_rf_phy *phy, bool enable)
{
	/* Loopback works only TX1->RX1 or RX2->RX2 */
	if (!phy->pdata->rx2tx2 && phy->pdata->rx1tx1_mode_use_rx_num !=
			phy->pdata->rx1tx1_mode_use_tx_num)
		return ad9361_en_dis_tx(phy, TX_1 | TX_2,
     938:	10800b17 	ldw	r2,44(r2)
     93c:	e13ffe17 	ldw	r4,-8(fp)
     940:	014000c4 	movi	r5,3
     944:	100d883a 	mov	r6,r2
     948:	00007a00 	call	7a0 <ad9361_en_dis_tx>
     94c:	00000106 	br	954 <ad9361_int_loopback_fix_ch_cross+0x94>
				enable ? phy->pdata->rx1tx1_mode_use_rx_num :
				phy->pdata->rx1tx1_mode_use_tx_num);

	return 0;
     950:	0005883a 	mov	r2,zero
}
     954:	e037883a 	mov	sp,fp
     958:	dfc00117 	ldw	ra,4(sp)
     95c:	df000017 	ldw	fp,0(sp)
     960:	dec00204 	addi	sp,sp,8
     964:	f800283a 	ret

00000968 <ad9361_bist_loopback>:
 * @param phy The AD9361 state structure.
 * @param mode BIST loopback mode.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_bist_loopback(struct ad9361_rf_phy *phy, int32_t mode)
{
     968:	defffa04 	addi	sp,sp,-24
     96c:	de00012e 	bgeu	sp,et,974 <ad9361_bist_loopback+0xc>
     970:	003b68fa 	trap	3
     974:	dfc00515 	stw	ra,20(sp)
     978:	df000415 	stw	fp,16(sp)
     97c:	df000404 	addi	fp,sp,16
     980:	e13ffe15 	stw	r4,-8(fp)
     984:	e17fff15 	stw	r5,-4(fp)
	uint32_t sp_hd, reg;

	dev_dbg(&phy->spi->dev, "%s: mode %"PRId32, __func__, mode);
     988:	010000b4 	movhi	r4,2
     98c:	211a8a04 	addi	r4,r4,27176
     990:	014000b4 	movhi	r5,2
     994:	295e7304 	addi	r5,r5,31180
     998:	e1bfff17 	ldw	r6,-4(fp)
     99c:	001f8180 	call	1f818 <printf>
     9a0:	010000b4 	movhi	r4,2
     9a4:	211a7504 	addi	r4,r4,27092
     9a8:	001f8180 	call	1f818 <printf>

	reg = ad9361_spi_read(phy->spi, REG_OBSERVE_CONFIG);
     9ac:	e0bffe17 	ldw	r2,-8(fp)
     9b0:	10800117 	ldw	r2,4(r2)
     9b4:	1009883a 	mov	r4,r2
     9b8:	0140fd44 	movi	r5,1013
     9bc:	00001500 	call	150 <ad9361_spi_read>
     9c0:	e0bffc15 	stw	r2,-16(fp)

	phy->bist_loopback_mode = mode;
     9c4:	e0bffe17 	ldw	r2,-8(fp)
     9c8:	e0ffff17 	ldw	r3,-4(fp)
     9cc:	10c07115 	stw	r3,452(r2)

	switch (mode) {
     9d0:	e0bfff17 	ldw	r2,-4(fp)
     9d4:	10c00060 	cmpeqi	r3,r2,1
     9d8:	1800141e 	bne	r3,zero,a2c <ad9361_bist_loopback+0xc4>
     9dc:	10c000a0 	cmpeqi	r3,r2,2
     9e0:	1800361e 	bne	r3,zero,abc <ad9361_bist_loopback+0x154>
     9e4:	1000461e 	bne	r2,zero,b00 <ad9361_bist_loopback+0x198>
	case 0:
		ad9361_hdl_loopback(phy, false);
     9e8:	e13ffe17 	ldw	r4,-8(fp)
     9ec:	000b883a 	mov	r5,zero
     9f0:	0014ee40 	call	14ee4 <ad9361_hdl_loopback>
		ad9361_int_loopback_fix_ch_cross(phy, false);
     9f4:	e13ffe17 	ldw	r4,-8(fp)
     9f8:	000b883a 	mov	r5,zero
     9fc:	00008c00 	call	8c0 <ad9361_int_loopback_fix_ch_cross>
		reg &= ~(DATA_PORT_SP_HD_LOOP_TEST_OE |
     a00:	e0fffc17 	ldw	r3,-16(fp)
     a04:	00bfdf84 	movi	r2,-130
     a08:	1884703a 	and	r2,r3,r2
     a0c:	e0bffc15 	stw	r2,-16(fp)
			DATA_PORT_LOOP_TEST_ENABLE);
		return ad9361_spi_write(phy->spi, REG_OBSERVE_CONFIG, reg);
     a10:	e0bffe17 	ldw	r2,-8(fp)
     a14:	10800117 	ldw	r2,4(r2)
     a18:	1009883a 	mov	r4,r2
     a1c:	0140fd44 	movi	r5,1013
     a20:	e1bffc17 	ldw	r6,-16(fp)
     a24:	00002600 	call	260 <ad9361_spi_write>
     a28:	00003606 	br	b04 <ad9361_bist_loopback+0x19c>
	case 1:
		/* loopback (AD9361 internal) TX->RX */
		ad9361_hdl_loopback(phy, false);
     a2c:	e13ffe17 	ldw	r4,-8(fp)
     a30:	000b883a 	mov	r5,zero
     a34:	0014ee40 	call	14ee4 <ad9361_hdl_loopback>
		ad9361_int_loopback_fix_ch_cross(phy, true);
     a38:	e13ffe17 	ldw	r4,-8(fp)
     a3c:	01400044 	movi	r5,1
     a40:	00008c00 	call	8c0 <ad9361_int_loopback_fix_ch_cross>
		sp_hd = ad9361_spi_read(phy->spi, REG_PARALLEL_PORT_CONF_3);
     a44:	e0bffe17 	ldw	r2,-8(fp)
     a48:	10800117 	ldw	r2,4(r2)
     a4c:	1009883a 	mov	r4,r2
     a50:	01400484 	movi	r5,18
     a54:	00001500 	call	150 <ad9361_spi_read>
     a58:	e0bffd15 	stw	r2,-12(fp)
		if ((sp_hd & SINGLE_PORT_MODE) && (sp_hd & HALF_DUPLEX_MODE))
     a5c:	e0bffd17 	ldw	r2,-12(fp)
     a60:	1080010c 	andi	r2,r2,4
     a64:	10000726 	beq	r2,zero,a84 <ad9361_bist_loopback+0x11c>
     a68:	e0bffd17 	ldw	r2,-12(fp)
     a6c:	1080020c 	andi	r2,r2,8
     a70:	10000426 	beq	r2,zero,a84 <ad9361_bist_loopback+0x11c>
			reg |= DATA_PORT_SP_HD_LOOP_TEST_OE;
     a74:	e0bffc17 	ldw	r2,-16(fp)
     a78:	10802014 	ori	r2,r2,128
     a7c:	e0bffc15 	stw	r2,-16(fp)
     a80:	00000406 	br	a94 <ad9361_bist_loopback+0x12c>
		else
			reg &= ~DATA_PORT_SP_HD_LOOP_TEST_OE;
     a84:	e0fffc17 	ldw	r3,-16(fp)
     a88:	00bfdfc4 	movi	r2,-129
     a8c:	1884703a 	and	r2,r3,r2
     a90:	e0bffc15 	stw	r2,-16(fp)

		reg |= DATA_PORT_LOOP_TEST_ENABLE;
     a94:	e0bffc17 	ldw	r2,-16(fp)
     a98:	10800054 	ori	r2,r2,1
     a9c:	e0bffc15 	stw	r2,-16(fp)

		return ad9361_spi_write(phy->spi, REG_OBSERVE_CONFIG, reg);
     aa0:	e0bffe17 	ldw	r2,-8(fp)
     aa4:	10800117 	ldw	r2,4(r2)
     aa8:	1009883a 	mov	r4,r2
     aac:	0140fd44 	movi	r5,1013
     ab0:	e1bffc17 	ldw	r6,-16(fp)
     ab4:	00002600 	call	260 <ad9361_spi_write>
     ab8:	00001206 	br	b04 <ad9361_bist_loopback+0x19c>
	case 2:
		/* loopback (FPGA internal) RX->TX */
		ad9361_hdl_loopback(phy, true);
     abc:	e13ffe17 	ldw	r4,-8(fp)
     ac0:	01400044 	movi	r5,1
     ac4:	0014ee40 	call	14ee4 <ad9361_hdl_loopback>
		ad9361_int_loopback_fix_ch_cross(phy, false);
     ac8:	e13ffe17 	ldw	r4,-8(fp)
     acc:	000b883a 	mov	r5,zero
     ad0:	00008c00 	call	8c0 <ad9361_int_loopback_fix_ch_cross>
		reg &= ~(DATA_PORT_SP_HD_LOOP_TEST_OE |
     ad4:	e0fffc17 	ldw	r3,-16(fp)
     ad8:	00bfdf84 	movi	r2,-130
     adc:	1884703a 	and	r2,r3,r2
     ae0:	e0bffc15 	stw	r2,-16(fp)
			DATA_PORT_LOOP_TEST_ENABLE);
		return ad9361_spi_write(phy->spi, REG_OBSERVE_CONFIG, reg);
     ae4:	e0bffe17 	ldw	r2,-8(fp)
     ae8:	10800117 	ldw	r2,4(r2)
     aec:	1009883a 	mov	r4,r2
     af0:	0140fd44 	movi	r5,1013
     af4:	e1bffc17 	ldw	r6,-16(fp)
     af8:	00002600 	call	260 <ad9361_spi_write>
     afc:	00000106 	br	b04 <ad9361_bist_loopback+0x19c>
	default:
		return -EINVAL;
     b00:	00bffa84 	movi	r2,-22
	}
}
     b04:	e037883a 	mov	sp,fp
     b08:	dfc00117 	ldw	ra,4(sp)
     b0c:	df000017 	ldw	fp,0(sp)
     b10:	dec00204 	addi	sp,sp,8
     b14:	f800283a 	ret

00000b18 <ad9361_get_bist_loopback>:
 * @param phy The AD9361 state structure.
 * @param mode BIST loopback mode.
 * @return 0 in case of success, negative error code otherwise.
 */
void ad9361_get_bist_loopback(struct ad9361_rf_phy *phy, int32_t *mode)
{
     b18:	defffd04 	addi	sp,sp,-12
     b1c:	de00012e 	bgeu	sp,et,b24 <ad9361_get_bist_loopback+0xc>
     b20:	003b68fa 	trap	3
     b24:	df000215 	stw	fp,8(sp)
     b28:	df000204 	addi	fp,sp,8
     b2c:	e13ffe15 	stw	r4,-8(fp)
     b30:	e17fff15 	stw	r5,-4(fp)
	*mode = phy->bist_loopback_mode;
     b34:	e0bffe17 	ldw	r2,-8(fp)
     b38:	10c07117 	ldw	r3,452(r2)
     b3c:	e0bfff17 	ldw	r2,-4(fp)
     b40:	10c00015 	stw	r3,0(r2)
}
     b44:	e037883a 	mov	sp,fp
     b48:	df000017 	ldw	fp,0(sp)
     b4c:	dec00104 	addi	sp,sp,4
     b50:	f800283a 	ret

00000b54 <ad9361_bist_prbs>:
 * @param phy The AD9361 state structure.
 * @param mode Bist mode.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_bist_prbs(struct ad9361_rf_phy *phy, enum ad9361_bist_mode mode)
{
     b54:	defffb04 	addi	sp,sp,-20
     b58:	de00012e 	bgeu	sp,et,b60 <ad9361_bist_prbs+0xc>
     b5c:	003b68fa 	trap	3
     b60:	dfc00415 	stw	ra,16(sp)
     b64:	df000315 	stw	fp,12(sp)
     b68:	df000304 	addi	fp,sp,12
     b6c:	e13ffe15 	stw	r4,-8(fp)
     b70:	e17fff15 	stw	r5,-4(fp)
	uint32_t reg = 0;
     b74:	e03ffd15 	stw	zero,-12(fp)

	dev_dbg(&phy->spi->dev, "%s: mode %d", __func__, mode);
     b78:	010000b4 	movhi	r4,2
     b7c:	211a8e04 	addi	r4,r4,27192
     b80:	014000b4 	movhi	r5,2
     b84:	295e7904 	addi	r5,r5,31204
     b88:	e1bfff17 	ldw	r6,-4(fp)
     b8c:	001f8180 	call	1f818 <printf>
     b90:	010000b4 	movhi	r4,2
     b94:	211a7504 	addi	r4,r4,27092
     b98:	001f8180 	call	1f818 <printf>

	phy->bist_prbs_mode = mode;
     b9c:	e0bffe17 	ldw	r2,-8(fp)
     ba0:	e0ffff17 	ldw	r3,-4(fp)
     ba4:	10c07215 	stw	r3,456(r2)

	switch (mode) {
     ba8:	e0bfff17 	ldw	r2,-4(fp)
     bac:	10c00060 	cmpeqi	r3,r2,1
     bb0:	1800061e 	bne	r3,zero,bcc <ad9361_bist_prbs+0x78>
     bb4:	0080032e 	bgeu	zero,r2,bc4 <ad9361_bist_prbs+0x70>
     bb8:	108000a0 	cmpeqi	r2,r2,2
     bbc:	1000061e 	bne	r2,zero,bd8 <ad9361_bist_prbs+0x84>
     bc0:	00000806 	br	be4 <ad9361_bist_prbs+0x90>
	case BIST_DISABLE:
		reg = 0;
     bc4:	e03ffd15 	stw	zero,-12(fp)
		break;
     bc8:	00000606 	br	be4 <ad9361_bist_prbs+0x90>
	case BIST_INJ_TX:
		reg = BIST_CTRL_POINT(0) | BIST_ENABLE;
     bcc:	00800044 	movi	r2,1
     bd0:	e0bffd15 	stw	r2,-12(fp)
		break;
     bd4:	00000306 	br	be4 <ad9361_bist_prbs+0x90>
	case BIST_INJ_RX:
		reg = BIST_CTRL_POINT(2) | BIST_ENABLE;
     bd8:	00800244 	movi	r2,9
     bdc:	e0bffd15 	stw	r2,-12(fp)
		break;
     be0:	0001883a 	nop
	};

	return ad9361_spi_write(phy->spi, REG_BIST_CONFIG, reg);
     be4:	e0bffe17 	ldw	r2,-8(fp)
     be8:	10800117 	ldw	r2,4(r2)
     bec:	1009883a 	mov	r4,r2
     bf0:	0140fd04 	movi	r5,1012
     bf4:	e1bffd17 	ldw	r6,-12(fp)
     bf8:	00002600 	call	260 <ad9361_spi_write>
}
     bfc:	e037883a 	mov	sp,fp
     c00:	dfc00117 	ldw	ra,4(sp)
     c04:	df000017 	ldw	fp,0(sp)
     c08:	dec00204 	addi	sp,sp,8
     c0c:	f800283a 	ret

00000c10 <ad9361_get_bist_prbs>:
 * @param phy The AD9361 state structure.
 * @param mode Bist mode.
 * @return 0 in case of success, negative error code otherwise.
 */
void ad9361_get_bist_prbs(struct ad9361_rf_phy *phy, enum ad9361_bist_mode *mode)
{
     c10:	defffd04 	addi	sp,sp,-12
     c14:	de00012e 	bgeu	sp,et,c1c <ad9361_get_bist_prbs+0xc>
     c18:	003b68fa 	trap	3
     c1c:	df000215 	stw	fp,8(sp)
     c20:	df000204 	addi	fp,sp,8
     c24:	e13ffe15 	stw	r4,-8(fp)
     c28:	e17fff15 	stw	r5,-4(fp)
	*mode = phy->bist_prbs_mode;
     c2c:	e0bffe17 	ldw	r2,-8(fp)
     c30:	10c07217 	ldw	r3,456(r2)
     c34:	e0bfff17 	ldw	r2,-4(fp)
     c38:	10c00015 	stw	r3,0(r2)
}
     c3c:	e037883a 	mov	sp,fp
     c40:	df000017 	ldw	fp,0(sp)
     c44:	dec00104 	addi	sp,sp,4
     c48:	f800283a 	ret

00000c4c <ad9361_bist_tone>:
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_bist_tone(struct ad9361_rf_phy *phy,
						 enum ad9361_bist_mode mode, uint32_t freq_Hz,
						 uint32_t level_dB, uint32_t mask)
{
     c4c:	defff604 	addi	sp,sp,-40
     c50:	de00012e 	bgeu	sp,et,c58 <ad9361_bist_tone+0xc>
     c54:	003b68fa 	trap	3
     c58:	dfc00915 	stw	ra,36(sp)
     c5c:	df000815 	stw	fp,32(sp)
     c60:	df000804 	addi	fp,sp,32
     c64:	e13ffc15 	stw	r4,-16(fp)
     c68:	e17ffd15 	stw	r5,-12(fp)
     c6c:	e1bffe15 	stw	r6,-8(fp)
     c70:	e1ffff15 	stw	r7,-4(fp)
	uint32_t clk = 0;
     c74:	e03ff815 	stw	zero,-32(fp)
	uint32_t reg = 0, reg1, reg_mask;
     c78:	e03ff915 	stw	zero,-28(fp)

	dev_dbg(&phy->spi->dev, "%s: mode %d", __func__, mode);
     c7c:	010000b4 	movhi	r4,2
     c80:	211a8e04 	addi	r4,r4,27192
     c84:	014000b4 	movhi	r5,2
     c88:	295e7e04 	addi	r5,r5,31224
     c8c:	e1bffd17 	ldw	r6,-12(fp)
     c90:	001f8180 	call	1f818 <printf>
     c94:	010000b4 	movhi	r4,2
     c98:	211a7504 	addi	r4,r4,27092
     c9c:	001f8180 	call	1f818 <printf>

	phy->bist_tone_mode = mode;
     ca0:	e0bffc17 	ldw	r2,-16(fp)
     ca4:	e0fffd17 	ldw	r3,-12(fp)
     ca8:	10c07315 	stw	r3,460(r2)
	phy->bist_tone_freq_Hz = freq_Hz;
     cac:	e0bffc17 	ldw	r2,-16(fp)
     cb0:	e0fffe17 	ldw	r3,-8(fp)
     cb4:	10c07415 	stw	r3,464(r2)
	phy->bist_tone_level_dB = level_dB;
     cb8:	e0bffc17 	ldw	r2,-16(fp)
     cbc:	e0ffff17 	ldw	r3,-4(fp)
     cc0:	10c07515 	stw	r3,468(r2)
	phy->bist_tone_mask = mask;
     cc4:	e0bffc17 	ldw	r2,-16(fp)
     cc8:	e0c00217 	ldw	r3,8(fp)
     ccc:	10c07615 	stw	r3,472(r2)

	switch (mode) {
     cd0:	e0bffd17 	ldw	r2,-12(fp)
     cd4:	10c00060 	cmpeqi	r3,r2,1
     cd8:	1800061e 	bne	r3,zero,cf4 <ad9361_bist_tone+0xa8>
     cdc:	0080032e 	bgeu	zero,r2,cec <ad9361_bist_tone+0xa0>
     ce0:	108000a0 	cmpeqi	r2,r2,2
     ce4:	10000c1e 	bne	r2,zero,d18 <ad9361_bist_tone+0xcc>
     ce8:	00001406 	br	d3c <ad9361_bist_tone+0xf0>
	case BIST_DISABLE:
		reg = 0;
     cec:	e03ff915 	stw	zero,-28(fp)
		break;
     cf0:	00001206 	br	d3c <ad9361_bist_tone+0xf0>
	case BIST_INJ_TX:
		clk = clk_get_rate(phy, phy->ref_clk_scale[TX_SAMPL_CLK]);
     cf4:	e0bffc17 	ldw	r2,-16(fp)
     cf8:	10802417 	ldw	r2,144(r2)
     cfc:	e13ffc17 	ldw	r4,-16(fp)
     d00:	100b883a 	mov	r5,r2
     d04:	001bc900 	call	1bc90 <clk_get_rate>
     d08:	e0bff815 	stw	r2,-32(fp)
		reg = BIST_CTRL_POINT(0) | BIST_ENABLE;
     d0c:	00800044 	movi	r2,1
     d10:	e0bff915 	stw	r2,-28(fp)
		break;
     d14:	00000906 	br	d3c <ad9361_bist_tone+0xf0>
	case BIST_INJ_RX:
		clk = clk_get_rate(phy, phy->ref_clk_scale[RX_SAMPL_CLK]);
     d18:	e0bffc17 	ldw	r2,-16(fp)
     d1c:	10801f17 	ldw	r2,124(r2)
     d20:	e13ffc17 	ldw	r4,-16(fp)
     d24:	100b883a 	mov	r5,r2
     d28:	001bc900 	call	1bc90 <clk_get_rate>
     d2c:	e0bff815 	stw	r2,-32(fp)
		reg = BIST_CTRL_POINT(2) | BIST_ENABLE;
     d30:	00800244 	movi	r2,9
     d34:	e0bff915 	stw	r2,-28(fp)
		break;
     d38:	0001883a 	nop
	};

	reg |= TONE_PRBS;
     d3c:	e0bff917 	ldw	r2,-28(fp)
     d40:	10800094 	ori	r2,r2,2
     d44:	e0bff915 	stw	r2,-28(fp)
	reg |= TONE_LEVEL(level_dB / 6);
     d48:	e0bfff17 	ldw	r2,-4(fp)
     d4c:	1009883a 	mov	r4,r2
     d50:	01400184 	movi	r5,6
     d54:	001d7a40 	call	1d7a4 <__udivsi3>
     d58:	108000cc 	andi	r2,r2,3
     d5c:	1004913a 	slli	r2,r2,4
     d60:	e0fff917 	ldw	r3,-28(fp)
     d64:	1884b03a 	or	r2,r3,r2
     d68:	e0bff915 	stw	r2,-28(fp)

	if (freq_Hz < 4) {
     d6c:	e0bffe17 	ldw	r2,-8(fp)
     d70:	10800128 	cmpgeui	r2,r2,4
     d74:	1000071e 	bne	r2,zero,d94 <ad9361_bist_tone+0x148>
		reg |= TONE_FREQ(freq_Hz);
     d78:	e0bffe17 	ldw	r2,-8(fp)
     d7c:	100491ba 	slli	r2,r2,6
     d80:	10803fcc 	andi	r2,r2,255
     d84:	e0fff917 	ldw	r3,-28(fp)
     d88:	1884b03a 	or	r2,r3,r2
     d8c:	e0bff915 	stw	r2,-28(fp)
     d90:	00001006 	br	dd4 <ad9361_bist_tone+0x188>
	}
	else {
		if (clk)
     d94:	e0bff817 	ldw	r2,-32(fp)
     d98:	10000e26 	beq	r2,zero,dd4 <ad9361_bist_tone+0x188>
			reg |= TONE_FREQ(DIV_ROUND_CLOSEST(freq_Hz * 32, clk) - 1);
     d9c:	e0bffe17 	ldw	r2,-8(fp)
     da0:	1006917a 	slli	r3,r2,5
     da4:	e0bff817 	ldw	r2,-32(fp)
     da8:	1004d07a 	srli	r2,r2,1
     dac:	1885883a 	add	r2,r3,r2
     db0:	1009883a 	mov	r4,r2
     db4:	e17ff817 	ldw	r5,-32(fp)
     db8:	001d7a40 	call	1d7a4 <__udivsi3>
     dbc:	10bfffc4 	addi	r2,r2,-1
     dc0:	100491ba 	slli	r2,r2,6
     dc4:	10803fcc 	andi	r2,r2,255
     dc8:	e0fff917 	ldw	r3,-28(fp)
     dcc:	1884b03a 	or	r2,r3,r2
     dd0:	e0bff915 	stw	r2,-28(fp)
	}

	reg_mask = BIST_MASK_CHANNEL_1_I_DATA | BIST_MASK_CHANNEL_1_Q_DATA |
     dd4:	00800f04 	movi	r2,60
     dd8:	e0bffa15 	stw	r2,-24(fp)
		BIST_MASK_CHANNEL_2_I_DATA | BIST_MASK_CHANNEL_2_Q_DATA;

	reg1 = ((mask << 2) & reg_mask);
     ddc:	e0800217 	ldw	r2,8(fp)
     de0:	1085883a 	add	r2,r2,r2
     de4:	1085883a 	add	r2,r2,r2
     de8:	1007883a 	mov	r3,r2
     dec:	e0bffa17 	ldw	r2,-24(fp)
     df0:	1884703a 	and	r2,r3,r2
     df4:	e0bffb15 	stw	r2,-20(fp)
	ad9361_spi_write(phy->spi, REG_BIST_AND_DATA_PORT_TEST_CONFIG, reg1);
     df8:	e0bffc17 	ldw	r2,-16(fp)
     dfc:	10800117 	ldw	r2,4(r2)
     e00:	1009883a 	mov	r4,r2
     e04:	0140fd84 	movi	r5,1014
     e08:	e1bffb17 	ldw	r6,-20(fp)
     e0c:	00002600 	call	260 <ad9361_spi_write>

	return ad9361_spi_write(phy->spi, REG_BIST_CONFIG, reg);
     e10:	e0bffc17 	ldw	r2,-16(fp)
     e14:	10800117 	ldw	r2,4(r2)
     e18:	1009883a 	mov	r4,r2
     e1c:	0140fd04 	movi	r5,1012
     e20:	e1bff917 	ldw	r6,-28(fp)
     e24:	00002600 	call	260 <ad9361_spi_write>
}
     e28:	e037883a 	mov	sp,fp
     e2c:	dfc00117 	ldw	ra,4(sp)
     e30:	df000017 	ldw	fp,0(sp)
     e34:	dec00204 	addi	sp,sp,8
     e38:	f800283a 	ret

00000e3c <ad9361_get_bist_tone>:
 * @return 0 in case of success, negative error code otherwise.
 */
void ad9361_get_bist_tone(struct ad9361_rf_phy *phy,
						 enum ad9361_bist_mode *mode, uint32_t *freq_Hz,
						 uint32_t *level_dB, uint32_t *mask)
{
     e3c:	defffb04 	addi	sp,sp,-20
     e40:	de00012e 	bgeu	sp,et,e48 <ad9361_get_bist_tone+0xc>
     e44:	003b68fa 	trap	3
     e48:	df000415 	stw	fp,16(sp)
     e4c:	df000404 	addi	fp,sp,16
     e50:	e13ffc15 	stw	r4,-16(fp)
     e54:	e17ffd15 	stw	r5,-12(fp)
     e58:	e1bffe15 	stw	r6,-8(fp)
     e5c:	e1ffff15 	stw	r7,-4(fp)
	*mode = phy->bist_tone_mode;
     e60:	e0bffc17 	ldw	r2,-16(fp)
     e64:	10c07317 	ldw	r3,460(r2)
     e68:	e0bffd17 	ldw	r2,-12(fp)
     e6c:	10c00015 	stw	r3,0(r2)
	*freq_Hz = phy->bist_tone_freq_Hz;
     e70:	e0bffc17 	ldw	r2,-16(fp)
     e74:	10c07417 	ldw	r3,464(r2)
     e78:	e0bffe17 	ldw	r2,-8(fp)
     e7c:	10c00015 	stw	r3,0(r2)
	*level_dB = phy->bist_tone_level_dB;
     e80:	e0bffc17 	ldw	r2,-16(fp)
     e84:	10c07517 	ldw	r3,468(r2)
     e88:	e0bfff17 	ldw	r2,-4(fp)
     e8c:	10c00015 	stw	r3,0(r2)
	*mask = phy->bist_tone_mask;
     e90:	e0bffc17 	ldw	r2,-16(fp)
     e94:	10c07617 	ldw	r3,472(r2)
     e98:	e0800117 	ldw	r2,4(fp)
     e9c:	10c00015 	stw	r3,0(r2)
}
     ea0:	e037883a 	mov	sp,fp
     ea4:	df000017 	ldw	fp,0(sp)
     ea8:	dec00104 	addi	sp,sp,4
     eac:	f800283a 	ret

00000eb0 <ad9361_check_cal_done>:
 * @param done_state The done state [0,1].
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_check_cal_done(struct ad9361_rf_phy *phy, uint32_t reg,
	uint32_t mask, bool done_state)
{
     eb0:	defff704 	addi	sp,sp,-36
     eb4:	de00012e 	bgeu	sp,et,ebc <ad9361_check_cal_done+0xc>
     eb8:	003b68fa 	trap	3
     ebc:	dfc00815 	stw	ra,32(sp)
     ec0:	df000715 	stw	fp,28(sp)
     ec4:	dc000615 	stw	r16,24(sp)
     ec8:	df000704 	addi	fp,sp,28
     ecc:	e13ffb15 	stw	r4,-20(fp)
     ed0:	e17ffc15 	stw	r5,-16(fp)
     ed4:	e1bffd15 	stw	r6,-12(fp)
     ed8:	3805883a 	mov	r2,r7
     edc:	e0bffe05 	stb	r2,-8(fp)
	uint32_t timeout = 5000; /* RFDC_CAL can take long */
     ee0:	0084e204 	movi	r2,5000
     ee4:	e0bff915 	stw	r2,-28(fp)
	uint32_t state;

	do {
		state = ad9361_spi_readf(phy->spi, reg, mask);
     ee8:	e0bffb17 	ldw	r2,-20(fp)
     eec:	14000117 	ldw	r16,4(r2)
     ef0:	e13ffd17 	ldw	r4,-12(fp)
     ef4:	001c8300 	call	1c830 <find_first_bit>
     ef8:	8009883a 	mov	r4,r16
     efc:	e17ffc17 	ldw	r5,-16(fp)
     f00:	e1bffd17 	ldw	r6,-12(fp)
     f04:	100f883a 	mov	r7,r2
     f08:	00001b80 	call	1b8 <__ad9361_spi_readf>
     f0c:	e0bffa15 	stw	r2,-24(fp)
		if (state == done_state)
     f10:	e0fffe03 	ldbu	r3,-8(fp)
     f14:	e0bffa17 	ldw	r2,-24(fp)
     f18:	1880021e 	bne	r3,r2,f24 <ad9361_check_cal_done+0x74>
			return 0;
     f1c:	0005883a 	mov	r2,zero
     f20:	00001506 	br	f78 <ad9361_check_cal_done+0xc8>

		if (reg == REG_CALIBRATION_CTRL)
     f24:	e0bffc17 	ldw	r2,-16(fp)
     f28:	10800598 	cmpnei	r2,r2,22
     f2c:	1000031e 	bne	r2,zero,f3c <ad9361_check_cal_done+0x8c>
			udelay(1200);
     f30:	01012c04 	movi	r4,1200
     f34:	001b8a40 	call	1b8a4 <udelay>
     f38:	00000206 	br	f44 <ad9361_check_cal_done+0x94>
		else
			udelay(120);
     f3c:	01001e04 	movi	r4,120
     f40:	001b8a40 	call	1b8a4 <udelay>
	} while (timeout--);
     f44:	e0bff917 	ldw	r2,-28(fp)
     f48:	10ffffc4 	addi	r3,r2,-1
     f4c:	e0fff915 	stw	r3,-28(fp)
     f50:	103fe51e 	bne	r2,zero,ee8 <_gp+0xfffcedc8>

	dev_err(&phy->spi->dev, "Calibration TIMEOUT (0x%"PRIX32", 0x%"PRIX32")", reg, mask);
     f54:	010000b4 	movhi	r4,2
     f58:	211a9104 	addi	r4,r4,27204
     f5c:	e17ffc17 	ldw	r5,-16(fp)
     f60:	e1bffd17 	ldw	r6,-12(fp)
     f64:	001f8180 	call	1f818 <printf>
     f68:	010000b4 	movhi	r4,2
     f6c:	211a7504 	addi	r4,r4,27092
     f70:	001f8180 	call	1f818 <printf>

	return -ETIMEDOUT;
     f74:	00bfe484 	movi	r2,-110
}
     f78:	e6ffff04 	addi	sp,fp,-4
     f7c:	dfc00217 	ldw	ra,8(sp)
     f80:	df000117 	ldw	fp,4(sp)
     f84:	dc000017 	ldw	r16,0(sp)
     f88:	dec00304 	addi	sp,sp,12
     f8c:	f800283a 	ret

00000f90 <ad9361_run_calibration>:
 *             RX_QUAD_CAL, TX_QUAD_CAL, RX_GAIN_STEP_CAL, TXMON_CAL,
 *             RFDC_CAL, BBDC_CAL].
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_run_calibration(struct ad9361_rf_phy *phy, uint32_t mask)
{
     f90:	defffb04 	addi	sp,sp,-20
     f94:	de00012e 	bgeu	sp,et,f9c <ad9361_run_calibration+0xc>
     f98:	003b68fa 	trap	3
     f9c:	dfc00415 	stw	ra,16(sp)
     fa0:	df000315 	stw	fp,12(sp)
     fa4:	df000304 	addi	fp,sp,12
     fa8:	e13ffe15 	stw	r4,-8(fp)
     fac:	e17fff15 	stw	r5,-4(fp)
	int32_t ret = ad9361_spi_write(phy->spi, REG_CALIBRATION_CTRL, mask);
     fb0:	e0bffe17 	ldw	r2,-8(fp)
     fb4:	10800117 	ldw	r2,4(r2)
     fb8:	1009883a 	mov	r4,r2
     fbc:	01400584 	movi	r5,22
     fc0:	e1bfff17 	ldw	r6,-4(fp)
     fc4:	00002600 	call	260 <ad9361_spi_write>
     fc8:	e0bffd15 	stw	r2,-12(fp)
	if (ret < 0)
     fcc:	e0bffd17 	ldw	r2,-12(fp)
     fd0:	1000020e 	bge	r2,zero,fdc <ad9361_run_calibration+0x4c>
		return ret;
     fd4:	e0bffd17 	ldw	r2,-12(fp)
     fd8:	00000e06 	br	1014 <ad9361_run_calibration+0x84>

	dev_dbg(&phy->spi->dev, "%s: CAL Mask 0x%"PRIx32, __func__, mask);
     fdc:	010000b4 	movhi	r4,2
     fe0:	211a9a04 	addi	r4,r4,27240
     fe4:	014000b4 	movhi	r5,2
     fe8:	295e8304 	addi	r5,r5,31244
     fec:	e1bfff17 	ldw	r6,-4(fp)
     ff0:	001f8180 	call	1f818 <printf>
     ff4:	010000b4 	movhi	r4,2
     ff8:	211a7504 	addi	r4,r4,27092
     ffc:	001f8180 	call	1f818 <printf>

	return ad9361_check_cal_done(phy, REG_CALIBRATION_CTRL, mask, 0);
    1000:	e13ffe17 	ldw	r4,-8(fp)
    1004:	01400584 	movi	r5,22
    1008:	e1bfff17 	ldw	r6,-4(fp)
    100c:	000f883a 	mov	r7,zero
    1010:	0000eb00 	call	eb0 <ad9361_check_cal_done>
}
    1014:	e037883a 	mov	sp,fp
    1018:	dfc00117 	ldw	ra,4(sp)
    101c:	df000017 	ldw	fp,0(sp)
    1020:	dec00204 	addi	sp,sp,8
    1024:	f800283a 	ret

00001028 <ad9361_gt_tableindex>:
 * Choose the right RX gain table index for the selected frequency.
 * @param freq The frequency value [Hz].
 * @return The index to the RX gain table.
 */
static enum rx_gain_table_name ad9361_gt_tableindex(uint64_t freq)
{
    1028:	defffd04 	addi	sp,sp,-12
    102c:	de00012e 	bgeu	sp,et,1034 <ad9361_gt_tableindex+0xc>
    1030:	003b68fa 	trap	3
    1034:	df000215 	stw	fp,8(sp)
    1038:	df000204 	addi	fp,sp,8
    103c:	e13ffe15 	stw	r4,-8(fp)
    1040:	e17fff15 	stw	r5,-4(fp)
	if (freq <= 1300000000ULL)
    1044:	e0bfff17 	ldw	r2,-4(fp)
    1048:	1000081e 	bne	r2,zero,106c <ad9361_gt_tableindex+0x44>
    104c:	e0bfff17 	ldw	r2,-4(fp)
    1050:	1000041e 	bne	r2,zero,1064 <ad9361_gt_tableindex+0x3c>
    1054:	e0fffe17 	ldw	r3,-8(fp)
    1058:	00935f34 	movhi	r2,19836
    105c:	109b4004 	addi	r2,r2,27904
    1060:	10c00236 	bltu	r2,r3,106c <ad9361_gt_tableindex+0x44>
		return TBL_200_1300_MHZ;
    1064:	0005883a 	mov	r2,zero
    1068:	00000b06 	br	1098 <ad9361_gt_tableindex+0x70>

	if (freq <= 4000000000ULL)
    106c:	e0bfff17 	ldw	r2,-4(fp)
    1070:	1000081e 	bne	r2,zero,1094 <ad9361_gt_tableindex+0x6c>
    1074:	e0bfff17 	ldw	r2,-4(fp)
    1078:	1000041e 	bne	r2,zero,108c <ad9361_gt_tableindex+0x64>
    107c:	e0fffe17 	ldw	r3,-8(fp)
    1080:	00bb9af4 	movhi	r2,61035
    1084:	108a0004 	addi	r2,r2,10240
    1088:	10c00236 	bltu	r2,r3,1094 <ad9361_gt_tableindex+0x6c>
		return TBL_1300_4000_MHZ;
    108c:	00800044 	movi	r2,1
    1090:	00000106 	br	1098 <ad9361_gt_tableindex+0x70>

	return TBL_4000_6000_MHZ;
    1094:	00800084 	movi	r2,2
}
    1098:	e037883a 	mov	sp,fp
    109c:	df000017 	ldw	fp,0(sp)
    10a0:	dec00104 	addi	sp,sp,4
    10a4:	f800283a 	ret

000010a8 <ad9361_to_clk>:
 * Note: PLL operates between 47 .. 6000 MHz which is > 2^32.
 * @param freq The frequency value [Hz].
 * @return The shifted frequency value.
 */
uint32_t ad9361_to_clk(uint64_t freq)
{
    10a8:	defffd04 	addi	sp,sp,-12
    10ac:	de00012e 	bgeu	sp,et,10b4 <ad9361_to_clk+0xc>
    10b0:	003b68fa 	trap	3
    10b4:	df000215 	stw	fp,8(sp)
    10b8:	df000204 	addi	fp,sp,8
    10bc:	e13ffe15 	stw	r4,-8(fp)
    10c0:	e17fff15 	stw	r5,-4(fp)
	return (uint32_t)(freq >> 1);
    10c4:	e13fff17 	ldw	r4,-4(fp)
    10c8:	200897fa 	slli	r4,r4,31
    10cc:	e17ffe17 	ldw	r5,-8(fp)
    10d0:	2804d07a 	srli	r2,r5,1
    10d4:	2084b03a 	or	r2,r4,r2
    10d8:	e13fff17 	ldw	r4,-4(fp)
    10dc:	2006d07a 	srli	r3,r4,1
}
    10e0:	e037883a 	mov	sp,fp
    10e4:	df000017 	ldw	fp,0(sp)
    10e8:	dec00104 	addi	sp,sp,4
    10ec:	f800283a 	ret

000010f0 <ad9361_from_clk>:
 * Note: PLL operates between 47 .. 6000 MHz which is > 2^32.
 * @param freq The frequency value [Hz].
 * @return The shifted frequency value.
 */
uint64_t ad9361_from_clk(uint32_t freq)
{
    10f0:	defffe04 	addi	sp,sp,-8
    10f4:	de00012e 	bgeu	sp,et,10fc <ad9361_from_clk+0xc>
    10f8:	003b68fa 	trap	3
    10fc:	df000115 	stw	fp,4(sp)
    1100:	df000104 	addi	fp,sp,4
    1104:	e13fff15 	stw	r4,-4(fp)
	return ((uint64_t)freq << 1);
    1108:	e0bfff17 	ldw	r2,-4(fp)
    110c:	100b883a 	mov	r5,r2
    1110:	000d883a 	mov	r6,zero
    1114:	2945883a 	add	r2,r5,r5
    1118:	1149803a 	cmpltu	r4,r2,r5
    111c:	3187883a 	add	r3,r6,r6
    1120:	20c9883a 	add	r4,r4,r3
    1124:	2007883a 	mov	r3,r4
    1128:	100b883a 	mov	r5,r2
    112c:	180d883a 	mov	r6,r3
    1130:	2807883a 	mov	r3,r5
    1134:	3009883a 	mov	r4,r6
}
    1138:	1805883a 	mov	r2,r3
    113c:	2007883a 	mov	r3,r4
    1140:	e037883a 	mov	sp,fp
    1144:	df000017 	ldw	fp,0(sp)
    1148:	dec00104 	addi	sp,sp,4
    114c:	f800283a 	ret

00001150 <ad9361_load_gt>:
 * @param freq The frequency value [Hz].
 * @param dest The destination [GT_RX1, GT_RX2].
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_load_gt(struct ad9361_rf_phy *phy, uint64_t freq, uint32_t dest)
{
    1150:	defff304 	addi	sp,sp,-52
    1154:	de00012e 	bgeu	sp,et,115c <ad9361_load_gt+0xc>
    1158:	003b68fa 	trap	3
    115c:	dfc00c15 	stw	ra,48(sp)
    1160:	df000b15 	stw	fp,44(sp)
    1164:	df000b04 	addi	fp,sp,44
    1168:	e13ffc15 	stw	r4,-16(fp)
    116c:	e17ffd15 	stw	r5,-12(fp)
    1170:	e1bffe15 	stw	r6,-8(fp)
    1174:	e1ffff15 	stw	r7,-4(fp)
	struct spi_device *spi = phy->spi;
    1178:	e0bffc17 	ldw	r2,-16(fp)
    117c:	10800117 	ldw	r2,4(r2)
    1180:	e0bff915 	stw	r2,-28(fp)
	const uint8_t(*tab)[3];
	enum rx_gain_table_name band;
	uint32_t index_max, i, lna;

	dev_dbg(&phy->spi->dev, "%s: frequency %"PRIu64, __func__, freq);
    1184:	010000b4 	movhi	r4,2
    1188:	211a9f04 	addi	r4,r4,27260
    118c:	014000b4 	movhi	r5,2
    1190:	295e8904 	addi	r5,r5,31268
    1194:	e1bffd17 	ldw	r6,-12(fp)
    1198:	e1fffe17 	ldw	r7,-8(fp)
    119c:	001f8180 	call	1f818 <printf>
    11a0:	010000b4 	movhi	r4,2
    11a4:	211a7504 	addi	r4,r4,27092
    11a8:	001f8180 	call	1f818 <printf>

	band = ad9361_gt_tableindex(freq);
    11ac:	e13ffd17 	ldw	r4,-12(fp)
    11b0:	e17ffe17 	ldw	r5,-8(fp)
    11b4:	00010280 	call	1028 <ad9361_gt_tableindex>
    11b8:	e0bffa15 	stw	r2,-24(fp)

	dev_dbg(&phy->spi->dev, "%s: frequency %"PRIu64" (band %d)",
    11bc:	e0bffa17 	ldw	r2,-24(fp)
    11c0:	d8800015 	stw	r2,0(sp)
    11c4:	010000b4 	movhi	r4,2
    11c8:	211aa404 	addi	r4,r4,27280
    11cc:	014000b4 	movhi	r5,2
    11d0:	295e8904 	addi	r5,r5,31268
    11d4:	e1bffd17 	ldw	r6,-12(fp)
    11d8:	e1fffe17 	ldw	r7,-8(fp)
    11dc:	001f8180 	call	1f818 <printf>
    11e0:	010000b4 	movhi	r4,2
    11e4:	211a7504 	addi	r4,r4,27092
    11e8:	001f8180 	call	1f818 <printf>
		__func__, freq, band);

	/* check if table is present */
	if (phy->current_table == band)
    11ec:	e0bffc17 	ldw	r2,-16(fp)
    11f0:	10c04417 	ldw	r3,272(r2)
    11f4:	e0bffa17 	ldw	r2,-24(fp)
    11f8:	1880021e 	bne	r3,r2,1204 <ad9361_load_gt+0xb4>
		return 0;
    11fc:	0005883a 	mov	r2,zero
    1200:	00009206 	br	144c <ad9361_load_gt+0x2fc>

	ad9361_spi_writef(spi, REG_AGC_CONFIG_2,
    1204:	01000204 	movi	r4,8
    1208:	001c8300 	call	1c830 <find_first_bit>
    120c:	1007883a 	mov	r3,r2
    1210:	e0bffc17 	ldw	r2,-16(fp)
    1214:	10803017 	ldw	r2,192(r2)
    1218:	108000c3 	ldbu	r2,3(r2)
    121c:	1080005c 	xori	r2,r2,1
    1220:	10803fcc 	andi	r2,r2,255
    1224:	d8800015 	stw	r2,0(sp)
    1228:	e13ff917 	ldw	r4,-28(fp)
    122c:	01403ec4 	movi	r5,251
    1230:	01800204 	movi	r6,8
    1234:	180f883a 	mov	r7,r3
    1238:	000031c0 	call	31c <__ad9361_spi_writef>
		AGC_USE_FULL_GAIN_TABLE, !phy->pdata->split_gt);

	if (has_split_gt && phy->pdata->split_gt) {
    123c:	00800044 	movi	r2,1
    1240:	10803fcc 	andi	r2,r2,255
    1244:	10000e26 	beq	r2,zero,1280 <ad9361_load_gt+0x130>
    1248:	e0bffc17 	ldw	r2,-16(fp)
    124c:	10803017 	ldw	r2,192(r2)
    1250:	108000c3 	ldbu	r2,3(r2)
    1254:	10803fcc 	andi	r2,r2,255
    1258:	10000926 	beq	r2,zero,1280 <ad9361_load_gt+0x130>
		tab = &split_gain_table[band][0];
    125c:	e0bffa17 	ldw	r2,-24(fp)
    1260:	10c01ee4 	muli	r3,r2,123
    1264:	008000b4 	movhi	r2,2
    1268:	1099d844 	addi	r2,r2,26465
    126c:	1885883a 	add	r2,r3,r2
    1270:	e0bff615 	stw	r2,-40(fp)
		index_max = SIZE_SPLIT_TABLE;
    1274:	00800a44 	movi	r2,41
    1278:	e0bff715 	stw	r2,-36(fp)
    127c:	00000806 	br	12a0 <ad9361_load_gt+0x150>
	}
	else {
		tab = &full_gain_table[band][0];
    1280:	e0bffa17 	ldw	r2,-24(fp)
    1284:	10c039e4 	muli	r3,r2,231
    1288:	008000b4 	movhi	r2,2
    128c:	10992b04 	addi	r2,r2,25772
    1290:	1885883a 	add	r2,r3,r2
    1294:	e0bff615 	stw	r2,-40(fp)
		index_max = SIZE_FULL_TABLE;
    1298:	00801344 	movi	r2,77
    129c:	e0bff715 	stw	r2,-36(fp)
	}

	lna = phy->pdata->elna_ctrl.elna_in_gaintable_all_index_en ?
    12a0:	e0bffc17 	ldw	r2,-16(fp)
    12a4:	10803017 	ldw	r2,192(r2)
    12a8:	10804883 	ldbu	r2,290(r2)
    12ac:	10803fcc 	andi	r2,r2,255
    12b0:	10000226 	beq	r2,zero,12bc <ad9361_load_gt+0x16c>
    12b4:	00802004 	movi	r2,128
    12b8:	00000106 	br	12c0 <ad9361_load_gt+0x170>
    12bc:	0005883a 	mov	r2,zero
    12c0:	e0bffb15 	stw	r2,-20(fp)
			EXT_LNA_CTRL : 0;

	ad9361_spi_write(spi, REG_GAIN_TABLE_CONFIG, START_GAIN_TABLE_CLOCK |
		RECEIVER_SELECT(dest)); /* Start Gain Table Clock */
    12c4:	e0bfff17 	ldw	r2,-4(fp)
    12c8:	108000cc 	andi	r2,r2,3
    12cc:	100490fa 	slli	r2,r2,3
	}

	lna = phy->pdata->elna_ctrl.elna_in_gaintable_all_index_en ?
			EXT_LNA_CTRL : 0;

	ad9361_spi_write(spi, REG_GAIN_TABLE_CONFIG, START_GAIN_TABLE_CLOCK |
    12d0:	10800094 	ori	r2,r2,2
    12d4:	e13ff917 	ldw	r4,-28(fp)
    12d8:	01404dc4 	movi	r5,311
    12dc:	100d883a 	mov	r6,r2
    12e0:	00002600 	call	260 <ad9361_spi_write>
		RECEIVER_SELECT(dest)); /* Start Gain Table Clock */

	for (i = 0; i < index_max; i++) {
    12e4:	e03ff815 	stw	zero,-32(fp)
    12e8:	00003d06 	br	13e0 <ad9361_load_gt+0x290>
		ad9361_spi_write(spi, REG_GAIN_TABLE_ADDRESS, i); /* Gain Table Index */
    12ec:	e13ff917 	ldw	r4,-28(fp)
    12f0:	01404c04 	movi	r5,304
    12f4:	e1bff817 	ldw	r6,-32(fp)
    12f8:	00002600 	call	260 <ad9361_spi_write>
		ad9361_spi_write(spi, REG_GAIN_TABLE_WRITE_DATA1, tab[i][0] | lna); /* Ext LNA, Int LNA, & Mixer Gain Word */
    12fc:	e0fff817 	ldw	r3,-32(fp)
    1300:	1805883a 	mov	r2,r3
    1304:	1085883a 	add	r2,r2,r2
    1308:	10c5883a 	add	r2,r2,r3
    130c:	e0fff617 	ldw	r3,-40(fp)
    1310:	1885883a 	add	r2,r3,r2
    1314:	10800003 	ldbu	r2,0(r2)
    1318:	10c03fcc 	andi	r3,r2,255
    131c:	e0bffb17 	ldw	r2,-20(fp)
    1320:	1884b03a 	or	r2,r3,r2
    1324:	e13ff917 	ldw	r4,-28(fp)
    1328:	01404c44 	movi	r5,305
    132c:	100d883a 	mov	r6,r2
    1330:	00002600 	call	260 <ad9361_spi_write>
		ad9361_spi_write(spi, REG_GAIN_TABLE_WRITE_DATA2, tab[i][1]); /* TIA & LPF Word */
    1334:	e0fff817 	ldw	r3,-32(fp)
    1338:	1805883a 	mov	r2,r3
    133c:	1085883a 	add	r2,r2,r2
    1340:	10c5883a 	add	r2,r2,r3
    1344:	e0fff617 	ldw	r3,-40(fp)
    1348:	1885883a 	add	r2,r3,r2
    134c:	10800043 	ldbu	r2,1(r2)
    1350:	10803fcc 	andi	r2,r2,255
    1354:	e13ff917 	ldw	r4,-28(fp)
    1358:	01404c84 	movi	r5,306
    135c:	100d883a 	mov	r6,r2
    1360:	00002600 	call	260 <ad9361_spi_write>
		ad9361_spi_write(spi, REG_GAIN_TABLE_WRITE_DATA3, tab[i][2]); /* DC Cal bit & Dig Gain Word */
    1364:	e0fff817 	ldw	r3,-32(fp)
    1368:	1805883a 	mov	r2,r3
    136c:	1085883a 	add	r2,r2,r2
    1370:	10c5883a 	add	r2,r2,r3
    1374:	e0fff617 	ldw	r3,-40(fp)
    1378:	1885883a 	add	r2,r3,r2
    137c:	10800083 	ldbu	r2,2(r2)
    1380:	10803fcc 	andi	r2,r2,255
    1384:	e13ff917 	ldw	r4,-28(fp)
    1388:	01404cc4 	movi	r5,307
    138c:	100d883a 	mov	r6,r2
    1390:	00002600 	call	260 <ad9361_spi_write>
		ad9361_spi_write(spi, REG_GAIN_TABLE_CONFIG,
			START_GAIN_TABLE_CLOCK |
			WRITE_GAIN_TABLE |
			RECEIVER_SELECT(dest)); /* Gain Table Index */
    1394:	e0bfff17 	ldw	r2,-4(fp)
    1398:	108000cc 	andi	r2,r2,3
    139c:	100490fa 	slli	r2,r2,3
	for (i = 0; i < index_max; i++) {
		ad9361_spi_write(spi, REG_GAIN_TABLE_ADDRESS, i); /* Gain Table Index */
		ad9361_spi_write(spi, REG_GAIN_TABLE_WRITE_DATA1, tab[i][0] | lna); /* Ext LNA, Int LNA, & Mixer Gain Word */
		ad9361_spi_write(spi, REG_GAIN_TABLE_WRITE_DATA2, tab[i][1]); /* TIA & LPF Word */
		ad9361_spi_write(spi, REG_GAIN_TABLE_WRITE_DATA3, tab[i][2]); /* DC Cal bit & Dig Gain Word */
		ad9361_spi_write(spi, REG_GAIN_TABLE_CONFIG,
    13a0:	10800194 	ori	r2,r2,6
    13a4:	e13ff917 	ldw	r4,-28(fp)
    13a8:	01404dc4 	movi	r5,311
    13ac:	100d883a 	mov	r6,r2
    13b0:	00002600 	call	260 <ad9361_spi_write>
			START_GAIN_TABLE_CLOCK |
			WRITE_GAIN_TABLE |
			RECEIVER_SELECT(dest)); /* Gain Table Index */
		ad9361_spi_write(spi, REG_GAIN_TABLE_READ_DATA1, 0); /* Dummy Write to delay 3 ADCCLK/16 cycles */
    13b4:	e13ff917 	ldw	r4,-28(fp)
    13b8:	01404d04 	movi	r5,308
    13bc:	000d883a 	mov	r6,zero
    13c0:	00002600 	call	260 <ad9361_spi_write>
		ad9361_spi_write(spi, REG_GAIN_TABLE_READ_DATA1, 0); /* Dummy Write to delay ~1u */
    13c4:	e13ff917 	ldw	r4,-28(fp)
    13c8:	01404d04 	movi	r5,308
    13cc:	000d883a 	mov	r6,zero
    13d0:	00002600 	call	260 <ad9361_spi_write>
			EXT_LNA_CTRL : 0;

	ad9361_spi_write(spi, REG_GAIN_TABLE_CONFIG, START_GAIN_TABLE_CLOCK |
		RECEIVER_SELECT(dest)); /* Start Gain Table Clock */

	for (i = 0; i < index_max; i++) {
    13d4:	e0bff817 	ldw	r2,-32(fp)
    13d8:	10800044 	addi	r2,r2,1
    13dc:	e0bff815 	stw	r2,-32(fp)
    13e0:	e0fff817 	ldw	r3,-32(fp)
    13e4:	e0bff717 	ldw	r2,-36(fp)
    13e8:	18bfc036 	bltu	r3,r2,12ec <_gp+0xfffcf1cc>
		ad9361_spi_write(spi, REG_GAIN_TABLE_READ_DATA1, 0); /* Dummy Write to delay 3 ADCCLK/16 cycles */
		ad9361_spi_write(spi, REG_GAIN_TABLE_READ_DATA1, 0); /* Dummy Write to delay ~1u */
	}

	ad9361_spi_write(spi, REG_GAIN_TABLE_CONFIG, START_GAIN_TABLE_CLOCK |
		RECEIVER_SELECT(dest)); /* Clear Write Bit */
    13ec:	e0bfff17 	ldw	r2,-4(fp)
    13f0:	108000cc 	andi	r2,r2,3
    13f4:	100490fa 	slli	r2,r2,3
			RECEIVER_SELECT(dest)); /* Gain Table Index */
		ad9361_spi_write(spi, REG_GAIN_TABLE_READ_DATA1, 0); /* Dummy Write to delay 3 ADCCLK/16 cycles */
		ad9361_spi_write(spi, REG_GAIN_TABLE_READ_DATA1, 0); /* Dummy Write to delay ~1u */
	}

	ad9361_spi_write(spi, REG_GAIN_TABLE_CONFIG, START_GAIN_TABLE_CLOCK |
    13f8:	10800094 	ori	r2,r2,2
    13fc:	e13ff917 	ldw	r4,-28(fp)
    1400:	01404dc4 	movi	r5,311
    1404:	100d883a 	mov	r6,r2
    1408:	00002600 	call	260 <ad9361_spi_write>
		RECEIVER_SELECT(dest)); /* Clear Write Bit */
	ad9361_spi_write(spi, REG_GAIN_TABLE_READ_DATA1, 0); /* Dummy Write to delay ~1u */
    140c:	e13ff917 	ldw	r4,-28(fp)
    1410:	01404d04 	movi	r5,308
    1414:	000d883a 	mov	r6,zero
    1418:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_GAIN_TABLE_READ_DATA1, 0); /* Dummy Write to delay ~1u */
    141c:	e13ff917 	ldw	r4,-28(fp)
    1420:	01404d04 	movi	r5,308
    1424:	000d883a 	mov	r6,zero
    1428:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_GAIN_TABLE_CONFIG, 0); /* Stop Gain Table Clock */
    142c:	e13ff917 	ldw	r4,-28(fp)
    1430:	01404dc4 	movi	r5,311
    1434:	000d883a 	mov	r6,zero
    1438:	00002600 	call	260 <ad9361_spi_write>

	phy->current_table = band;
    143c:	e0bffc17 	ldw	r2,-16(fp)
    1440:	e0fffa17 	ldw	r3,-24(fp)
    1444:	10c04415 	stw	r3,272(r2)

	return 0;
    1448:	0005883a 	mov	r2,zero
}
    144c:	e037883a 	mov	sp,fp
    1450:	dfc00117 	ldw	ra,4(sp)
    1454:	df000017 	ldw	fp,0(sp)
    1458:	dec00204 	addi	sp,sp,8
    145c:	f800283a 	ret

00001460 <ad9361_setup_ext_lna>:
 * @param ctrl Pointer to eLNA control structure.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_setup_ext_lna(struct ad9361_rf_phy *phy,
struct elna_control *ctrl)
{
    1460:	defffa04 	addi	sp,sp,-24
    1464:	de00012e 	bgeu	sp,et,146c <ad9361_setup_ext_lna+0xc>
    1468:	003b68fa 	trap	3
    146c:	dfc00515 	stw	ra,20(sp)
    1470:	df000415 	stw	fp,16(sp)
    1474:	dc000315 	stw	r16,12(sp)
    1478:	df000404 	addi	fp,sp,16
    147c:	e13ffd15 	stw	r4,-12(fp)
    1480:	e17ffe15 	stw	r5,-8(fp)
	ad9361_spi_writef(phy->spi, REG_EXTERNAL_LNA_CTRL, EXTERNAL_LNA1_CTRL,
    1484:	e0bffd17 	ldw	r2,-12(fp)
    1488:	14000117 	ldw	r16,4(r2)
    148c:	01000804 	movi	r4,32
    1490:	001c8300 	call	1c830 <find_first_bit>
    1494:	1007883a 	mov	r3,r2
    1498:	e0bffe17 	ldw	r2,-8(fp)
    149c:	10800203 	ldbu	r2,8(r2)
    14a0:	10803fcc 	andi	r2,r2,255
    14a4:	d8800015 	stw	r2,0(sp)
    14a8:	8009883a 	mov	r4,r16
    14ac:	01400984 	movi	r5,38
    14b0:	01800804 	movi	r6,32
    14b4:	180f883a 	mov	r7,r3
    14b8:	000031c0 	call	31c <__ad9361_spi_writef>
		ctrl->elna_1_control_en);

	ad9361_spi_writef(phy->spi, REG_EXTERNAL_LNA_CTRL, EXTERNAL_LNA2_CTRL,
    14bc:	e0bffd17 	ldw	r2,-12(fp)
    14c0:	14000117 	ldw	r16,4(r2)
    14c4:	01001004 	movi	r4,64
    14c8:	001c8300 	call	1c830 <find_first_bit>
    14cc:	1007883a 	mov	r3,r2
    14d0:	e0bffe17 	ldw	r2,-8(fp)
    14d4:	10800243 	ldbu	r2,9(r2)
    14d8:	10803fcc 	andi	r2,r2,255
    14dc:	d8800015 	stw	r2,0(sp)
    14e0:	8009883a 	mov	r4,r16
    14e4:	01400984 	movi	r5,38
    14e8:	01801004 	movi	r6,64
    14ec:	180f883a 	mov	r7,r3
    14f0:	000031c0 	call	31c <__ad9361_spi_writef>
		ctrl->elna_2_control_en);

	ad9361_spi_write(phy->spi, REG_EXT_LNA_HIGH_GAIN,
    14f4:	e0bffd17 	ldw	r2,-12(fp)
    14f8:	14000117 	ldw	r16,4(r2)
		EXT_LNA_HIGH_GAIN(ctrl->gain_mdB / 500));
    14fc:	e0bffe17 	ldw	r2,-8(fp)
    1500:	1080000b 	ldhu	r2,0(r2)
		ctrl->elna_1_control_en);

	ad9361_spi_writef(phy->spi, REG_EXTERNAL_LNA_CTRL, EXTERNAL_LNA2_CTRL,
		ctrl->elna_2_control_en);

	ad9361_spi_write(phy->spi, REG_EXT_LNA_HIGH_GAIN,
    1504:	10bfffcc 	andi	r2,r2,65535
    1508:	1009883a 	mov	r4,r2
    150c:	01407d04 	movi	r5,500
    1510:	001d7a40 	call	1d7a4 <__udivsi3>
    1514:	10bfffcc 	andi	r2,r2,65535
    1518:	10800fcc 	andi	r2,r2,63
    151c:	8009883a 	mov	r4,r16
    1520:	01404b04 	movi	r5,300
    1524:	100d883a 	mov	r6,r2
    1528:	00002600 	call	260 <ad9361_spi_write>
		EXT_LNA_HIGH_GAIN(ctrl->gain_mdB / 500));

	return ad9361_spi_write(phy->spi, REG_EXT_LNA_LOW_GAIN,
    152c:	e0bffd17 	ldw	r2,-12(fp)
    1530:	14000117 	ldw	r16,4(r2)
		EXT_LNA_LOW_GAIN(ctrl->bypass_loss_mdB / 500));
    1534:	e0bffe17 	ldw	r2,-8(fp)
    1538:	1080008b 	ldhu	r2,2(r2)
		ctrl->elna_2_control_en);

	ad9361_spi_write(phy->spi, REG_EXT_LNA_HIGH_GAIN,
		EXT_LNA_HIGH_GAIN(ctrl->gain_mdB / 500));

	return ad9361_spi_write(phy->spi, REG_EXT_LNA_LOW_GAIN,
    153c:	10bfffcc 	andi	r2,r2,65535
    1540:	1009883a 	mov	r4,r2
    1544:	01407d04 	movi	r5,500
    1548:	001d7a40 	call	1d7a4 <__udivsi3>
    154c:	10bfffcc 	andi	r2,r2,65535
    1550:	10800fcc 	andi	r2,r2,63
    1554:	8009883a 	mov	r4,r16
    1558:	01404b44 	movi	r5,301
    155c:	100d883a 	mov	r6,r2
    1560:	00002600 	call	260 <ad9361_spi_write>
		EXT_LNA_LOW_GAIN(ctrl->bypass_loss_mdB / 500));
}
    1564:	e6ffff04 	addi	sp,fp,-4
    1568:	dfc00217 	ldw	ra,8(sp)
    156c:	df000117 	ldw	fp,4(sp)
    1570:	dc000017 	ldw	r16,0(sp)
    1574:	dec00304 	addi	sp,sp,12
    1578:	f800283a 	ret

0000157c <ad9361_clkout_control>:
 * @param mode The clock output mode [].
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_clkout_control(struct ad9361_rf_phy *phy,
enum ad9361_clkout mode)
{
    157c:	defffa04 	addi	sp,sp,-24
    1580:	de00012e 	bgeu	sp,et,1588 <ad9361_clkout_control+0xc>
    1584:	003b68fa 	trap	3
    1588:	dfc00515 	stw	ra,20(sp)
    158c:	df000415 	stw	fp,16(sp)
    1590:	dc000315 	stw	r16,12(sp)
    1594:	df000404 	addi	fp,sp,16
    1598:	e13ffd15 	stw	r4,-12(fp)
    159c:	e17ffe15 	stw	r5,-8(fp)
	if (mode == CLKOUT_DISABLE)
    15a0:	e0bffe17 	ldw	r2,-8(fp)
    15a4:	10000b1e 	bne	r2,zero,15d4 <ad9361_clkout_control+0x58>
		return ad9361_spi_writef(phy->spi, REG_BBPLL, CLKOUT_ENABLE, 0);
    15a8:	e0bffd17 	ldw	r2,-12(fp)
    15ac:	14000117 	ldw	r16,4(r2)
    15b0:	01000404 	movi	r4,16
    15b4:	001c8300 	call	1c830 <find_first_bit>
    15b8:	d8000015 	stw	zero,0(sp)
    15bc:	8009883a 	mov	r4,r16
    15c0:	01400284 	movi	r5,10
    15c4:	01800404 	movi	r6,16
    15c8:	100f883a 	mov	r7,r2
    15cc:	000031c0 	call	31c <__ad9361_spi_writef>
    15d0:	00000f06 	br	1610 <ad9361_clkout_control+0x94>

	return ad9361_spi_writef(phy->spi, REG_BBPLL,
    15d4:	e0bffd17 	ldw	r2,-12(fp)
    15d8:	14000117 	ldw	r16,4(r2)
    15dc:	01003c04 	movi	r4,240
    15e0:	001c8300 	call	1c830 <find_first_bit>
    15e4:	1007883a 	mov	r3,r2
    15e8:	e0bffe17 	ldw	r2,-8(fp)
    15ec:	10bfffc4 	addi	r2,r2,-1
    15f0:	1085883a 	add	r2,r2,r2
    15f4:	10800054 	ori	r2,r2,1
    15f8:	d8800015 	stw	r2,0(sp)
    15fc:	8009883a 	mov	r4,r16
    1600:	01400284 	movi	r5,10
    1604:	01803c04 	movi	r6,240
    1608:	180f883a 	mov	r7,r3
    160c:	000031c0 	call	31c <__ad9361_spi_writef>
		CLKOUT_ENABLE | CLKOUT_SELECT(~0),
		((mode - 1) << 1) | 0x1);
}
    1610:	e6ffff04 	addi	sp,fp,-4
    1614:	dfc00217 	ldw	ra,8(sp)
    1618:	df000117 	ldw	fp,4(sp)
    161c:	dc000017 	ldw	r16,0(sp)
    1620:	dec00304 	addi	sp,sp,12
    1624:	f800283a 	ret

00001628 <ad9361_load_mixer_gm_subtable>:
 * Load the Gm Sub Table.
 * @param phy The AD9361 state structure.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_load_mixer_gm_subtable(struct ad9361_rf_phy *phy)
{
    1628:	defffb04 	addi	sp,sp,-20
    162c:	de00012e 	bgeu	sp,et,1634 <ad9361_load_mixer_gm_subtable+0xc>
    1630:	003b68fa 	trap	3
    1634:	dfc00415 	stw	ra,16(sp)
    1638:	df000315 	stw	fp,12(sp)
    163c:	df000304 	addi	fp,sp,12
    1640:	e13fff15 	stw	r4,-4(fp)
	int32_t i, addr;
	dev_dbg(&phy->spi->dev, "%s", __func__);
    1644:	010000b4 	movhi	r4,2
    1648:	211aac04 	addi	r4,r4,27312
    164c:	014000b4 	movhi	r5,2
    1650:	295e8d04 	addi	r5,r5,31284
    1654:	001f8180 	call	1f818 <printf>
    1658:	010000b4 	movhi	r4,2
    165c:	211a7504 	addi	r4,r4,27092
    1660:	001f8180 	call	1f818 <printf>

	ad9361_spi_write(phy->spi, REG_GM_SUB_TABLE_CONFIG,
    1664:	e0bfff17 	ldw	r2,-4(fp)
    1668:	10800117 	ldw	r2,4(r2)
    166c:	1009883a 	mov	r4,r2
    1670:	01404fc4 	movi	r5,319
    1674:	01800084 	movi	r6,2
    1678:	00002600 	call	260 <ad9361_spi_write>
		START_GM_SUB_TABLE_CLOCK); /* Start Clock */

	for (i = 0, addr = ARRAY_SIZE(gm_st_ctrl); i < (int64_t)ARRAY_SIZE(gm_st_ctrl); i++) {
    167c:	e03ffd15 	stw	zero,-12(fp)
    1680:	00800404 	movi	r2,16
    1684:	e0bffe15 	stw	r2,-8(fp)
    1688:	00003b06 	br	1778 <ad9361_load_mixer_gm_subtable+0x150>
		ad9361_spi_write(phy->spi, REG_GM_SUB_TABLE_ADDRESS, --addr); /* Gain Table Index */
    168c:	e0bfff17 	ldw	r2,-4(fp)
    1690:	10c00117 	ldw	r3,4(r2)
    1694:	e0bffe17 	ldw	r2,-8(fp)
    1698:	10bfffc4 	addi	r2,r2,-1
    169c:	e0bffe15 	stw	r2,-8(fp)
    16a0:	e0bffe17 	ldw	r2,-8(fp)
    16a4:	1809883a 	mov	r4,r3
    16a8:	01404e04 	movi	r5,312
    16ac:	100d883a 	mov	r6,r2
    16b0:	00002600 	call	260 <ad9361_spi_write>
		ad9361_spi_write(phy->spi, REG_GM_SUB_TABLE_BIAS_WRITE, 0); /* Bias */
    16b4:	e0bfff17 	ldw	r2,-4(fp)
    16b8:	10800117 	ldw	r2,4(r2)
    16bc:	1009883a 	mov	r4,r2
    16c0:	01404e84 	movi	r5,314
    16c4:	000d883a 	mov	r6,zero
    16c8:	00002600 	call	260 <ad9361_spi_write>
		ad9361_spi_write(phy->spi, REG_GM_SUB_TABLE_GAIN_WRITE, gm_st_gain[i]); /* Gain */
    16cc:	e0bfff17 	ldw	r2,-4(fp)
    16d0:	11000117 	ldw	r4,4(r2)
    16d4:	008000b4 	movhi	r2,2
    16d8:	109a3484 	addi	r2,r2,26834
    16dc:	e0fffd17 	ldw	r3,-12(fp)
    16e0:	10c5883a 	add	r2,r2,r3
    16e4:	10800003 	ldbu	r2,0(r2)
    16e8:	10803fcc 	andi	r2,r2,255
    16ec:	01404e44 	movi	r5,313
    16f0:	100d883a 	mov	r6,r2
    16f4:	00002600 	call	260 <ad9361_spi_write>
		ad9361_spi_write(phy->spi, REG_GM_SUB_TABLE_CTRL_WRITE, gm_st_ctrl[i]); /* Control */
    16f8:	e0bfff17 	ldw	r2,-4(fp)
    16fc:	11000117 	ldw	r4,4(r2)
    1700:	008000b4 	movhi	r2,2
    1704:	109a3884 	addi	r2,r2,26850
    1708:	e0fffd17 	ldw	r3,-12(fp)
    170c:	10c5883a 	add	r2,r2,r3
    1710:	10800003 	ldbu	r2,0(r2)
    1714:	10803fcc 	andi	r2,r2,255
    1718:	01404ec4 	movi	r5,315
    171c:	100d883a 	mov	r6,r2
    1720:	00002600 	call	260 <ad9361_spi_write>
		ad9361_spi_write(phy->spi, REG_GM_SUB_TABLE_CONFIG,
    1724:	e0bfff17 	ldw	r2,-4(fp)
    1728:	10800117 	ldw	r2,4(r2)
    172c:	1009883a 	mov	r4,r2
    1730:	01404fc4 	movi	r5,319
    1734:	01800184 	movi	r6,6
    1738:	00002600 	call	260 <ad9361_spi_write>
			WRITE_GM_SUB_TABLE | START_GM_SUB_TABLE_CLOCK); /* Write Words */
		ad9361_spi_write(phy->spi, REG_GM_SUB_TABLE_GAIN_READ, 0); /* Dummy Delay */
    173c:	e0bfff17 	ldw	r2,-4(fp)
    1740:	10800117 	ldw	r2,4(r2)
    1744:	1009883a 	mov	r4,r2
    1748:	01404f04 	movi	r5,316
    174c:	000d883a 	mov	r6,zero
    1750:	00002600 	call	260 <ad9361_spi_write>
		ad9361_spi_write(phy->spi, REG_GM_SUB_TABLE_GAIN_READ, 0); /* Dummy Delay */
    1754:	e0bfff17 	ldw	r2,-4(fp)
    1758:	10800117 	ldw	r2,4(r2)
    175c:	1009883a 	mov	r4,r2
    1760:	01404f04 	movi	r5,316
    1764:	000d883a 	mov	r6,zero
    1768:	00002600 	call	260 <ad9361_spi_write>
	dev_dbg(&phy->spi->dev, "%s", __func__);

	ad9361_spi_write(phy->spi, REG_GM_SUB_TABLE_CONFIG,
		START_GM_SUB_TABLE_CLOCK); /* Start Clock */

	for (i = 0, addr = ARRAY_SIZE(gm_st_ctrl); i < (int64_t)ARRAY_SIZE(gm_st_ctrl); i++) {
    176c:	e0bffd17 	ldw	r2,-12(fp)
    1770:	10800044 	addi	r2,r2,1
    1774:	e0bffd15 	stw	r2,-12(fp)
    1778:	e0bffd17 	ldw	r2,-12(fp)
    177c:	10800410 	cmplti	r2,r2,16
    1780:	103fc21e 	bne	r2,zero,168c <_gp+0xfffcf56c>
			WRITE_GM_SUB_TABLE | START_GM_SUB_TABLE_CLOCK); /* Write Words */
		ad9361_spi_write(phy->spi, REG_GM_SUB_TABLE_GAIN_READ, 0); /* Dummy Delay */
		ad9361_spi_write(phy->spi, REG_GM_SUB_TABLE_GAIN_READ, 0); /* Dummy Delay */
	}

	ad9361_spi_write(phy->spi, REG_GM_SUB_TABLE_CONFIG, START_GM_SUB_TABLE_CLOCK); /* Clear Write */
    1784:	e0bfff17 	ldw	r2,-4(fp)
    1788:	10800117 	ldw	r2,4(r2)
    178c:	1009883a 	mov	r4,r2
    1790:	01404fc4 	movi	r5,319
    1794:	01800084 	movi	r6,2
    1798:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(phy->spi, REG_GM_SUB_TABLE_GAIN_READ, 0); /* Dummy Delay */
    179c:	e0bfff17 	ldw	r2,-4(fp)
    17a0:	10800117 	ldw	r2,4(r2)
    17a4:	1009883a 	mov	r4,r2
    17a8:	01404f04 	movi	r5,316
    17ac:	000d883a 	mov	r6,zero
    17b0:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(phy->spi, REG_GM_SUB_TABLE_GAIN_READ, 0); /* Dummy Delay */
    17b4:	e0bfff17 	ldw	r2,-4(fp)
    17b8:	10800117 	ldw	r2,4(r2)
    17bc:	1009883a 	mov	r4,r2
    17c0:	01404f04 	movi	r5,316
    17c4:	000d883a 	mov	r6,zero
    17c8:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(phy->spi, REG_GM_SUB_TABLE_CONFIG, 0); /* Stop Clock */
    17cc:	e0bfff17 	ldw	r2,-4(fp)
    17d0:	10800117 	ldw	r2,4(r2)
    17d4:	1009883a 	mov	r4,r2
    17d8:	01404fc4 	movi	r5,319
    17dc:	000d883a 	mov	r6,zero
    17e0:	00002600 	call	260 <ad9361_spi_write>

	return 0;
    17e4:	0005883a 	mov	r2,zero
}
    17e8:	e037883a 	mov	sp,fp
    17ec:	dfc00117 	ldw	ra,4(sp)
    17f0:	df000017 	ldw	fp,0(sp)
    17f4:	dec00204 	addi	sp,sp,8
    17f8:	f800283a 	ret

000017fc <ad9361_set_tx_atten>:
 * @param immed Set true, an immediate update will take place.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_set_tx_atten(struct ad9361_rf_phy *phy, uint32_t atten_mdb,
	bool tx1, bool tx2, bool immed)
{
    17fc:	defff504 	addi	sp,sp,-44
    1800:	de00012e 	bgeu	sp,et,1808 <ad9361_set_tx_atten+0xc>
    1804:	003b68fa 	trap	3
    1808:	dfc00a15 	stw	ra,40(sp)
    180c:	df000915 	stw	fp,36(sp)
    1810:	dc000815 	stw	r16,32(sp)
    1814:	df000904 	addi	fp,sp,36
    1818:	e13ffa15 	stw	r4,-24(fp)
    181c:	e17ffb15 	stw	r5,-20(fp)
    1820:	3009883a 	mov	r4,r6
    1824:	3807883a 	mov	r3,r7
    1828:	e0800217 	ldw	r2,8(fp)
    182c:	e13ffc05 	stb	r4,-16(fp)
    1830:	e0fffd05 	stb	r3,-12(fp)
    1834:	e0bffe05 	stb	r2,-8(fp)
	uint8_t buf[2];
	int32_t ret = 0;
    1838:	e03ff815 	stw	zero,-32(fp)

	dev_dbg(&phy->spi->dev, "%s : attenuation %"PRIu32" mdB tx1=%d tx2=%d",
    183c:	e0fffc03 	ldbu	r3,-16(fp)
    1840:	e0bffd03 	ldbu	r2,-12(fp)
    1844:	d8800015 	stw	r2,0(sp)
    1848:	010000b4 	movhi	r4,2
    184c:	211aad04 	addi	r4,r4,27316
    1850:	014000b4 	movhi	r5,2
    1854:	295e9504 	addi	r5,r5,31316
    1858:	e1bffb17 	ldw	r6,-20(fp)
    185c:	180f883a 	mov	r7,r3
    1860:	001f8180 	call	1f818 <printf>
    1864:	010000b4 	movhi	r4,2
    1868:	211a7504 	addi	r4,r4,27092
    186c:	001f8180 	call	1f818 <printf>
		__func__, atten_mdb, tx1, tx2);

	if (atten_mdb > 89750) /* 89.75 dB */
    1870:	e0fffb17 	ldw	r3,-20(fp)
    1874:	00800074 	movhi	r2,1
    1878:	1097a584 	addi	r2,r2,24214
    187c:	10c0022e 	bgeu	r2,r3,1888 <ad9361_set_tx_atten+0x8c>
		return -EINVAL;
    1880:	00bffa84 	movi	r2,-22
    1884:	00003906 	br	196c <ad9361_set_tx_atten+0x170>

	atten_mdb /= 250; /* Scale to 0.25dB / LSB */
    1888:	e0bffb17 	ldw	r2,-20(fp)
    188c:	1009883a 	mov	r4,r2
    1890:	01403e84 	movi	r5,250
    1894:	001d7a40 	call	1d7a4 <__udivsi3>
    1898:	e0bffb15 	stw	r2,-20(fp)

	buf[0] = atten_mdb >> 8;
    189c:	e0bffb17 	ldw	r2,-20(fp)
    18a0:	1004d23a 	srli	r2,r2,8
    18a4:	e0bff905 	stb	r2,-28(fp)
	buf[1] = atten_mdb & 0xFF;
    18a8:	e0bffb17 	ldw	r2,-20(fp)
    18ac:	e0bff945 	stb	r2,-27(fp)

	ad9361_spi_writef(phy->spi, REG_TX2_DIG_ATTEN,
    18b0:	e0bffa17 	ldw	r2,-24(fp)
    18b4:	14000117 	ldw	r16,4(r2)
    18b8:	01001004 	movi	r4,64
    18bc:	001c8300 	call	1c830 <find_first_bit>
    18c0:	d8000015 	stw	zero,0(sp)
    18c4:	8009883a 	mov	r4,r16
    18c8:	01401f04 	movi	r5,124
    18cc:	01801004 	movi	r6,64
    18d0:	100f883a 	mov	r7,r2
    18d4:	000031c0 	call	31c <__ad9361_spi_writef>
		IMMEDIATELY_UPDATE_TPC_ATTEN, 0);

	if (tx1)
    18d8:	e0bffc03 	ldbu	r2,-16(fp)
    18dc:	10000926 	beq	r2,zero,1904 <ad9361_set_tx_atten+0x108>
		ret = ad9361_spi_writem(phy->spi, REG_TX1_ATTEN_1, buf, 2);
    18e0:	e0bffa17 	ldw	r2,-24(fp)
    18e4:	10c00117 	ldw	r3,4(r2)
    18e8:	e0bff904 	addi	r2,fp,-28
    18ec:	1809883a 	mov	r4,r3
    18f0:	01401d04 	movi	r5,116
    18f4:	100d883a 	mov	r6,r2
    18f8:	01c00084 	movi	r7,2
    18fc:	00003ec0 	call	3ec <ad9361_spi_writem>
    1900:	e0bff815 	stw	r2,-32(fp)

	if (tx2)
    1904:	e0bffd03 	ldbu	r2,-12(fp)
    1908:	10000926 	beq	r2,zero,1930 <ad9361_set_tx_atten+0x134>
		ret = ad9361_spi_writem(phy->spi, REG_TX2_ATTEN_1, buf, 2);
    190c:	e0bffa17 	ldw	r2,-24(fp)
    1910:	10c00117 	ldw	r3,4(r2)
    1914:	e0bff904 	addi	r2,fp,-28
    1918:	1809883a 	mov	r4,r3
    191c:	01401d84 	movi	r5,118
    1920:	100d883a 	mov	r6,r2
    1924:	01c00084 	movi	r7,2
    1928:	00003ec0 	call	3ec <ad9361_spi_writem>
    192c:	e0bff815 	stw	r2,-32(fp)

	if (immed)
    1930:	e0bffe03 	ldbu	r2,-8(fp)
    1934:	10000c26 	beq	r2,zero,1968 <ad9361_set_tx_atten+0x16c>
		ad9361_spi_writef(phy->spi, REG_TX2_DIG_ATTEN,
    1938:	e0bffa17 	ldw	r2,-24(fp)
    193c:	14000117 	ldw	r16,4(r2)
    1940:	01001004 	movi	r4,64
    1944:	001c8300 	call	1c830 <find_first_bit>
    1948:	1007883a 	mov	r3,r2
    194c:	00800044 	movi	r2,1
    1950:	d8800015 	stw	r2,0(sp)
    1954:	8009883a 	mov	r4,r16
    1958:	01401f04 	movi	r5,124
    195c:	01801004 	movi	r6,64
    1960:	180f883a 	mov	r7,r3
    1964:	000031c0 	call	31c <__ad9361_spi_writef>
		IMMEDIATELY_UPDATE_TPC_ATTEN, 1);

	return ret;
    1968:	e0bff817 	ldw	r2,-32(fp)
}
    196c:	e6ffff04 	addi	sp,fp,-4
    1970:	dfc00217 	ldw	ra,8(sp)
    1974:	df000117 	ldw	fp,4(sp)
    1978:	dc000017 	ldw	r16,0(sp)
    197c:	dec00304 	addi	sp,sp,12
    1980:	f800283a 	ret

00001984 <ad9361_get_tx_atten>:
 * @param phy The AD9361 state structure.
 * @param tx_num The selected channel [1, 2].
 * @return The attenuation value [mdB] or negative error code in case of failure.
 */
int32_t ad9361_get_tx_atten(struct ad9361_rf_phy *phy, uint32_t tx_num)
{
    1984:	defff904 	addi	sp,sp,-28
    1988:	de00012e 	bgeu	sp,et,1990 <ad9361_get_tx_atten+0xc>
    198c:	003b68fa 	trap	3
    1990:	dfc00615 	stw	ra,24(sp)
    1994:	df000515 	stw	fp,20(sp)
    1998:	df000504 	addi	fp,sp,20
    199c:	e13ffe15 	stw	r4,-8(fp)
    19a0:	e17fff15 	stw	r5,-4(fp)
	uint8_t buf[2];
	int32_t ret = 0;
    19a4:	e03ffb15 	stw	zero,-20(fp)
	uint32_t code;

	ret = ad9361_spi_readm(phy->spi, (tx_num == 1) ?
    19a8:	e0bffe17 	ldw	r2,-8(fp)
    19ac:	11000117 	ldw	r4,4(r2)
    19b0:	e0bfff17 	ldw	r2,-4(fp)
    19b4:	10800058 	cmpnei	r2,r2,1
    19b8:	1000021e 	bne	r2,zero,19c4 <ad9361_get_tx_atten+0x40>
    19bc:	00801d04 	movi	r2,116
    19c0:	00000106 	br	19c8 <ad9361_get_tx_atten+0x44>
    19c4:	00801d84 	movi	r2,118
    19c8:	e0fffd04 	addi	r3,fp,-12
    19cc:	100b883a 	mov	r5,r2
    19d0:	180d883a 	mov	r6,r3
    19d4:	01c00084 	movi	r7,2
    19d8:	00000740 	call	74 <ad9361_spi_readm>
    19dc:	e0bffb15 	stw	r2,-20(fp)
	REG_TX1_ATTEN_1 : REG_TX2_ATTEN_1, buf, 2);

	if (ret < 0)
    19e0:	e0bffb17 	ldw	r2,-20(fp)
    19e4:	1000020e 	bge	r2,zero,19f0 <ad9361_get_tx_atten+0x6c>
		return ret;
    19e8:	e0bffb17 	ldw	r2,-20(fp)
    19ec:	00000b06 	br	1a1c <ad9361_get_tx_atten+0x98>

	code = (buf[0] << 8) | buf[1];
    19f0:	e0bffd03 	ldbu	r2,-12(fp)
    19f4:	10803fcc 	andi	r2,r2,255
    19f8:	1006923a 	slli	r3,r2,8
    19fc:	e0bffd43 	ldbu	r2,-11(fp)
    1a00:	10803fcc 	andi	r2,r2,255
    1a04:	1884b03a 	or	r2,r3,r2
    1a08:	e0bffc15 	stw	r2,-16(fp)

	code *= 250;
    1a0c:	e0bffc17 	ldw	r2,-16(fp)
    1a10:	10803ea4 	muli	r2,r2,250
    1a14:	e0bffc15 	stw	r2,-16(fp)

	return code;
    1a18:	e0bffc17 	ldw	r2,-16(fp)
}
    1a1c:	e037883a 	mov	sp,fp
    1a20:	dfc00117 	ldw	ra,4(sp)
    1a24:	df000017 	ldw	fp,0(sp)
    1a28:	dec00204 	addi	sp,sp,8
    1a2c:	f800283a 	ret

00001a30 <ad9361_rfvco_tableindex>:
 * Choose the right RF VCO table index for the selected frequency.
 * @param freq The frequency value [Hz].
 * @return The index from the RF VCO table.
 */
static uint32_t ad9361_rfvco_tableindex(uint32_t freq)
{
    1a30:	defffe04 	addi	sp,sp,-8
    1a34:	de00012e 	bgeu	sp,et,1a3c <ad9361_rfvco_tableindex+0xc>
    1a38:	003b68fa 	trap	3
    1a3c:	df000115 	stw	fp,4(sp)
    1a40:	df000104 	addi	fp,sp,4
    1a44:	e13fff15 	stw	r4,-4(fp)
	if (freq < 50000000UL)
    1a48:	e0ffff17 	ldw	r3,-4(fp)
    1a4c:	0080bef4 	movhi	r2,763
    1a50:	10bc1fc4 	addi	r2,r2,-3969
    1a54:	10c00236 	bltu	r2,r3,1a60 <ad9361_rfvco_tableindex+0x30>
		return LUT_FTDD_40;
    1a58:	0005883a 	mov	r2,zero
    1a5c:	00000706 	br	1a7c <ad9361_rfvco_tableindex+0x4c>

	if (freq <= 70000000UL)
    1a60:	e0ffff17 	ldw	r3,-4(fp)
    1a64:	00810b34 	movhi	r2,1068
    1a68:	10876004 	addi	r2,r2,7552
    1a6c:	10c00236 	bltu	r2,r3,1a78 <ad9361_rfvco_tableindex+0x48>
		return LUT_FTDD_60;
    1a70:	00800044 	movi	r2,1
    1a74:	00000106 	br	1a7c <ad9361_rfvco_tableindex+0x4c>

	return LUT_FTDD_80;
    1a78:	00800084 	movi	r2,2
}
    1a7c:	e037883a 	mov	sp,fp
    1a80:	df000017 	ldw	fp,0(sp)
    1a84:	dec00104 	addi	sp,sp,4
    1a88:	f800283a 	ret

00001a8c <ad9361_rfpll_vco_init>:
 * @return 0 in case of success
 */
static int32_t ad9361_rfpll_vco_init(struct ad9361_rf_phy *phy,
	bool tx, uint64_t vco_freq,
	uint32_t ref_clk)
{
    1a8c:	defff104 	addi	sp,sp,-60
    1a90:	de00012e 	bgeu	sp,et,1a98 <ad9361_rfpll_vco_init+0xc>
    1a94:	003b68fa 	trap	3
    1a98:	dfc00e15 	stw	ra,56(sp)
    1a9c:	df000d15 	stw	fp,52(sp)
    1aa0:	dc400c15 	stw	r17,48(sp)
    1aa4:	dc000b15 	stw	r16,44(sp)
    1aa8:	df000d04 	addi	fp,sp,52
    1aac:	e13ffa15 	stw	r4,-24(fp)
    1ab0:	2805883a 	mov	r2,r5
    1ab4:	e1bffc15 	stw	r6,-16(fp)
    1ab8:	e1fffd15 	stw	r7,-12(fp)
    1abc:	e0bffb05 	stb	r2,-20(fp)
	struct spi_device *spi = phy->spi;
    1ac0:	e0bffa17 	ldw	r2,-24(fp)
    1ac4:	10800117 	ldw	r2,4(r2)
    1ac8:	e0bff815 	stw	r2,-32(fp)
	const struct SynthLUT(*tab);
	int32_t i = 0;
    1acc:	e03ff615 	stw	zero,-40(fp)
	uint32_t range, offs = 0;
    1ad0:	e03ff715 	stw	zero,-36(fp)

	range = ad9361_rfvco_tableindex(ref_clk);
    1ad4:	e1000217 	ldw	r4,8(fp)
    1ad8:	0001a300 	call	1a30 <ad9361_rfvco_tableindex>
    1adc:	e0bff915 	stw	r2,-28(fp)

	dev_dbg(&phy->spi->dev, "%s : vco_freq %"PRIu64" : ref_clk %"PRIu32" : range %"PRIu32,
    1ae0:	e0bffc17 	ldw	r2,-16(fp)
    1ae4:	e0fffd17 	ldw	r3,-12(fp)
    1ae8:	e1000217 	ldw	r4,8(fp)
    1aec:	d9000015 	stw	r4,0(sp)
    1af0:	e13ff917 	ldw	r4,-28(fp)
    1af4:	d9000115 	stw	r4,4(sp)
    1af8:	010000b4 	movhi	r4,2
    1afc:	211ab704 	addi	r4,r4,27356
    1b00:	014000b4 	movhi	r5,2
    1b04:	295e9a04 	addi	r5,r5,31336
    1b08:	100d883a 	mov	r6,r2
    1b0c:	180f883a 	mov	r7,r3
    1b10:	001f8180 	call	1f818 <printf>
    1b14:	010000b4 	movhi	r4,2
    1b18:	211a7504 	addi	r4,r4,27092
    1b1c:	001f8180 	call	1f818 <printf>
		__func__, vco_freq, ref_clk, range);

	do_div(&vco_freq, 1000000UL); /* vco_freq in MHz */
    1b20:	e0bffc04 	addi	r2,fp,-16
    1b24:	1009883a 	mov	r4,r2
    1b28:	014003f4 	movhi	r5,15
    1b2c:	29509004 	addi	r5,r5,16960
    1b30:	000d883a 	mov	r6,zero
    1b34:	001c76c0 	call	1c76c <do_div>

	if (phy->pdata->fdd || phy->pdata->tdd_use_fdd_tables) {
    1b38:	e0bffa17 	ldw	r2,-24(fp)
    1b3c:	10803017 	ldw	r2,192(r2)
    1b40:	10800043 	ldbu	r2,1(r2)
    1b44:	10803fcc 	andi	r2,r2,255
    1b48:	1000051e 	bne	r2,zero,1b60 <ad9361_rfpll_vco_init+0xd4>
    1b4c:	e0bffa17 	ldw	r2,-24(fp)
    1b50:	10803017 	ldw	r2,192(r2)
    1b54:	10800203 	ldbu	r2,8(r2)
    1b58:	10803fcc 	andi	r2,r2,255
    1b5c:	10000726 	beq	r2,zero,1b7c <ad9361_rfpll_vco_init+0xf0>
		tab = &SynthLUT_FDD[range][0];
    1b60:	e0bff917 	ldw	r2,-28(fp)
    1b64:	10c0b9a4 	muli	r3,r2,742
    1b68:	008000b4 	movhi	r2,2
    1b6c:	1094d204 	addi	r2,r2,21320
    1b70:	1885883a 	add	r2,r3,r2
    1b74:	e0bff515 	stw	r2,-44(fp)
    1b78:	00000906 	br	1ba0 <ad9361_rfpll_vco_init+0x114>
	} else if (have_tdd_tables) {
    1b7c:	00800044 	movi	r2,1
    1b80:	10803fcc 	andi	r2,r2,255
    1b84:	10000626 	beq	r2,zero,1ba0 <ad9361_rfpll_vco_init+0x114>
		tab = &SynthLUT_TDD[range][0];
    1b88:	e0bff917 	ldw	r2,-28(fp)
    1b8c:	10c0b9a4 	muli	r3,r2,742
    1b90:	008000b4 	movhi	r2,2
    1b94:	1096fe84 	addi	r2,r2,23546
    1b98:	1885883a 	add	r2,r3,r2
    1b9c:	e0bff515 	stw	r2,-44(fp)
	}

	if (tx)
    1ba0:	e0bffb03 	ldbu	r2,-20(fp)
    1ba4:	10000226 	beq	r2,zero,1bb0 <ad9361_rfpll_vco_init+0x124>
		offs = REG_TX_VCO_OUTPUT - REG_RX_VCO_OUTPUT;
    1ba8:	00801004 	movi	r2,64
    1bac:	e0bff715 	stw	r2,-36(fp)

	while (i < SYNTH_LUT_SIZE && tab[i].VCO_MHz > vco_freq)
    1bb0:	00000306 	br	1bc0 <ad9361_rfpll_vco_init+0x134>
		i++;
    1bb4:	e0bff617 	ldw	r2,-40(fp)
    1bb8:	10800044 	addi	r2,r2,1
    1bbc:	e0bff615 	stw	r2,-40(fp)
	}

	if (tx)
		offs = REG_TX_VCO_OUTPUT - REG_RX_VCO_OUTPUT;

	while (i < SYNTH_LUT_SIZE && tab[i].VCO_MHz > vco_freq)
    1bc0:	e0bff617 	ldw	r2,-40(fp)
    1bc4:	10800d48 	cmpgei	r2,r2,53
    1bc8:	10000d1e 	bne	r2,zero,1c00 <ad9361_rfpll_vco_init+0x174>
    1bcc:	e0bff617 	ldw	r2,-40(fp)
    1bd0:	108003a4 	muli	r2,r2,14
    1bd4:	e0fff517 	ldw	r3,-44(fp)
    1bd8:	1885883a 	add	r2,r3,r2
    1bdc:	1080000b 	ldhu	r2,0(r2)
    1be0:	10bfffcc 	andi	r2,r2,65535
    1be4:	1021883a 	mov	r16,r2
    1be8:	0023883a 	mov	r17,zero
    1bec:	e0bffc17 	ldw	r2,-16(fp)
    1bf0:	e0fffd17 	ldw	r3,-12(fp)
    1bf4:	1c7fef36 	bltu	r3,r17,1bb4 <_gp+0xfffcfa94>
    1bf8:	88c0011e 	bne	r17,r3,1c00 <ad9361_rfpll_vco_init+0x174>
    1bfc:	143fed36 	bltu	r2,r16,1bb4 <_gp+0xfffcfa94>
		i++;

	dev_dbg(&phy->spi->dev, "%s : freq %d MHz : index %"PRId32,
    1c00:	e0bff617 	ldw	r2,-40(fp)
    1c04:	108003a4 	muli	r2,r2,14
    1c08:	e0fff517 	ldw	r3,-44(fp)
    1c0c:	1885883a 	add	r2,r3,r2
    1c10:	1080000b 	ldhu	r2,0(r2)
    1c14:	10bfffcc 	andi	r2,r2,65535
    1c18:	010000b4 	movhi	r4,2
    1c1c:	211ac304 	addi	r4,r4,27404
    1c20:	014000b4 	movhi	r5,2
    1c24:	295e9a04 	addi	r5,r5,31336
    1c28:	100d883a 	mov	r6,r2
    1c2c:	e1fff617 	ldw	r7,-40(fp)
    1c30:	001f8180 	call	1f818 <printf>
    1c34:	010000b4 	movhi	r4,2
    1c38:	211a7504 	addi	r4,r4,27092
    1c3c:	001f8180 	call	1f818 <printf>
		__func__, tab[i].VCO_MHz, i);

	ad9361_spi_write(spi, REG_RX_VCO_OUTPUT + offs,
    1c40:	e0bff717 	ldw	r2,-36(fp)
    1c44:	11408e84 	addi	r5,r2,570
		VCO_OUTPUT_LEVEL(tab[i].VCO_Output_Level) |
    1c48:	e0bff617 	ldw	r2,-40(fp)
    1c4c:	108003a4 	muli	r2,r2,14
    1c50:	e0fff517 	ldw	r3,-44(fp)
    1c54:	1885883a 	add	r2,r3,r2
    1c58:	10800083 	ldbu	r2,2(r2)
    1c5c:	10803fcc 	andi	r2,r2,255
    1c60:	108003cc 	andi	r2,r2,15
    1c64:	10801014 	ori	r2,r2,64
		i++;

	dev_dbg(&phy->spi->dev, "%s : freq %d MHz : index %"PRId32,
		__func__, tab[i].VCO_MHz, i);

	ad9361_spi_write(spi, REG_RX_VCO_OUTPUT + offs,
    1c68:	e13ff817 	ldw	r4,-32(fp)
    1c6c:	100d883a 	mov	r6,r2
    1c70:	00002600 	call	260 <ad9361_spi_write>
		VCO_OUTPUT_LEVEL(tab[i].VCO_Output_Level) |
		PORB_VCO_LOGIC);
	ad9361_spi_writef(spi, REG_RX_ALC_VARACTOR + offs,
    1c74:	e0bff717 	ldw	r2,-36(fp)
    1c78:	14008e44 	addi	r16,r2,569
    1c7c:	010003c4 	movi	r4,15
    1c80:	001c8300 	call	1c830 <find_first_bit>
    1c84:	100f883a 	mov	r7,r2
    1c88:	e0bff617 	ldw	r2,-40(fp)
    1c8c:	108003a4 	muli	r2,r2,14
    1c90:	e0fff517 	ldw	r3,-44(fp)
    1c94:	1885883a 	add	r2,r3,r2
    1c98:	108000c3 	ldbu	r2,3(r2)
    1c9c:	10803fcc 	andi	r2,r2,255
    1ca0:	d8800015 	stw	r2,0(sp)
    1ca4:	e13ff817 	ldw	r4,-32(fp)
    1ca8:	800b883a 	mov	r5,r16
    1cac:	018003c4 	movi	r6,15
    1cb0:	000031c0 	call	31c <__ad9361_spi_writef>
		VCO_VARACTOR(~0), tab[i].VCO_Varactor);
	ad9361_spi_write(spi, REG_RX_VCO_BIAS_1 + offs,
    1cb4:	e0bff717 	ldw	r2,-36(fp)
    1cb8:	11409084 	addi	r5,r2,578
		VCO_BIAS_REF(tab[i].VCO_Bias_Ref) |
    1cbc:	e0bff617 	ldw	r2,-40(fp)
    1cc0:	108003a4 	muli	r2,r2,14
    1cc4:	e0fff517 	ldw	r3,-44(fp)
    1cc8:	1885883a 	add	r2,r3,r2
    1ccc:	10800103 	ldbu	r2,4(r2)
    1cd0:	10803fcc 	andi	r2,r2,255
    1cd4:	10c001cc 	andi	r3,r2,7
		VCO_BIAS_TCF(tab[i].VCO_Bias_Tcf));
    1cd8:	e0bff617 	ldw	r2,-40(fp)
    1cdc:	108003a4 	muli	r2,r2,14
    1ce0:	e13ff517 	ldw	r4,-44(fp)
    1ce4:	2085883a 	add	r2,r4,r2
    1ce8:	10800143 	ldbu	r2,5(r2)
    1cec:	10803fcc 	andi	r2,r2,255
    1cf0:	108000cc 	andi	r2,r2,3
    1cf4:	100490fa 	slli	r2,r2,3
		VCO_OUTPUT_LEVEL(tab[i].VCO_Output_Level) |
		PORB_VCO_LOGIC);
	ad9361_spi_writef(spi, REG_RX_ALC_VARACTOR + offs,
		VCO_VARACTOR(~0), tab[i].VCO_Varactor);
	ad9361_spi_write(spi, REG_RX_VCO_BIAS_1 + offs,
		VCO_BIAS_REF(tab[i].VCO_Bias_Ref) |
    1cf8:	1884b03a 	or	r2,r3,r2
	ad9361_spi_write(spi, REG_RX_VCO_OUTPUT + offs,
		VCO_OUTPUT_LEVEL(tab[i].VCO_Output_Level) |
		PORB_VCO_LOGIC);
	ad9361_spi_writef(spi, REG_RX_ALC_VARACTOR + offs,
		VCO_VARACTOR(~0), tab[i].VCO_Varactor);
	ad9361_spi_write(spi, REG_RX_VCO_BIAS_1 + offs,
    1cfc:	e13ff817 	ldw	r4,-32(fp)
    1d00:	100d883a 	mov	r6,r2
    1d04:	00002600 	call	260 <ad9361_spi_write>
		VCO_BIAS_REF(tab[i].VCO_Bias_Ref) |
		VCO_BIAS_TCF(tab[i].VCO_Bias_Tcf));

	ad9361_spi_write(spi, REG_RX_FORCE_VCO_TUNE_1 + offs,
    1d08:	e0bff717 	ldw	r2,-36(fp)
    1d0c:	11408e04 	addi	r5,r2,568
		VCO_CAL_OFFSET(tab[i].VCO_Cal_Offset));
    1d10:	e0bff617 	ldw	r2,-40(fp)
    1d14:	108003a4 	muli	r2,r2,14
    1d18:	e0fff517 	ldw	r3,-44(fp)
    1d1c:	1885883a 	add	r2,r3,r2
    1d20:	10800183 	ldbu	r2,6(r2)
    1d24:	10803fcc 	andi	r2,r2,255
    1d28:	108003cc 	andi	r2,r2,15
    1d2c:	100490fa 	slli	r2,r2,3
		VCO_VARACTOR(~0), tab[i].VCO_Varactor);
	ad9361_spi_write(spi, REG_RX_VCO_BIAS_1 + offs,
		VCO_BIAS_REF(tab[i].VCO_Bias_Ref) |
		VCO_BIAS_TCF(tab[i].VCO_Bias_Tcf));

	ad9361_spi_write(spi, REG_RX_FORCE_VCO_TUNE_1 + offs,
    1d30:	e13ff817 	ldw	r4,-32(fp)
    1d34:	100d883a 	mov	r6,r2
    1d38:	00002600 	call	260 <ad9361_spi_write>
		VCO_CAL_OFFSET(tab[i].VCO_Cal_Offset));
	ad9361_spi_write(spi, REG_RX_VCO_VARACTOR_CTRL_1 + offs,
    1d3c:	e0bff717 	ldw	r2,-36(fp)
    1d40:	11409444 	addi	r5,r2,593
		VCO_VARACTOR_REFERENCE(
    1d44:	e0bff617 	ldw	r2,-40(fp)
    1d48:	108003a4 	muli	r2,r2,14
    1d4c:	e0fff517 	ldw	r3,-44(fp)
    1d50:	1885883a 	add	r2,r3,r2
    1d54:	108001c3 	ldbu	r2,7(r2)
		VCO_BIAS_REF(tab[i].VCO_Bias_Ref) |
		VCO_BIAS_TCF(tab[i].VCO_Bias_Tcf));

	ad9361_spi_write(spi, REG_RX_FORCE_VCO_TUNE_1 + offs,
		VCO_CAL_OFFSET(tab[i].VCO_Cal_Offset));
	ad9361_spi_write(spi, REG_RX_VCO_VARACTOR_CTRL_1 + offs,
    1d58:	10803fcc 	andi	r2,r2,255
    1d5c:	108003cc 	andi	r2,r2,15
    1d60:	e13ff817 	ldw	r4,-32(fp)
    1d64:	100d883a 	mov	r6,r2
    1d68:	00002600 	call	260 <ad9361_spi_write>
		VCO_VARACTOR_REFERENCE(
		tab[i].VCO_Varactor_Reference));

	ad9361_spi_write(spi, REG_RX_VCO_CAL_REF + offs, VCO_CAL_REF_TCF(0));
    1d6c:	e0bff717 	ldw	r2,-36(fp)
    1d70:	10809144 	addi	r2,r2,581
    1d74:	e13ff817 	ldw	r4,-32(fp)
    1d78:	100b883a 	mov	r5,r2
    1d7c:	000d883a 	mov	r6,zero
    1d80:	00002600 	call	260 <ad9361_spi_write>

	ad9361_spi_write(spi, REG_RX_VCO_VARACTOR_CTRL_0 + offs,
    1d84:	e0bff717 	ldw	r2,-36(fp)
    1d88:	10809404 	addi	r2,r2,592
    1d8c:	e13ff817 	ldw	r4,-32(fp)
    1d90:	100b883a 	mov	r5,r2
    1d94:	01801c04 	movi	r6,112
    1d98:	00002600 	call	260 <ad9361_spi_write>
		VCO_VARACTOR_OFFSET(0) |
		VCO_VARACTOR_REFERENCE_TCF(7));

	ad9361_spi_writef(spi, REG_RX_CP_CURRENT + offs, CHARGE_PUMP_CURRENT(~0),
    1d9c:	e0bff717 	ldw	r2,-36(fp)
    1da0:	14008ec4 	addi	r16,r2,571
    1da4:	01000fc4 	movi	r4,63
    1da8:	001c8300 	call	1c830 <find_first_bit>
    1dac:	100f883a 	mov	r7,r2
    1db0:	e0bff617 	ldw	r2,-40(fp)
    1db4:	108003a4 	muli	r2,r2,14
    1db8:	e0fff517 	ldw	r3,-44(fp)
    1dbc:	1885883a 	add	r2,r3,r2
    1dc0:	10800203 	ldbu	r2,8(r2)
    1dc4:	10803fcc 	andi	r2,r2,255
    1dc8:	d8800015 	stw	r2,0(sp)
    1dcc:	e13ff817 	ldw	r4,-32(fp)
    1dd0:	800b883a 	mov	r5,r16
    1dd4:	01800fc4 	movi	r6,63
    1dd8:	000031c0 	call	31c <__ad9361_spi_writef>
		tab[i].Charge_Pump_Current);
	ad9361_spi_write(spi, REG_RX_LOOP_FILTER_1 + offs,
    1ddc:	e0bff717 	ldw	r2,-36(fp)
    1de0:	11408f84 	addi	r5,r2,574
		LOOP_FILTER_C2(tab[i].LF_C2) |
    1de4:	e0bff617 	ldw	r2,-40(fp)
    1de8:	108003a4 	muli	r2,r2,14
    1dec:	e0fff517 	ldw	r3,-44(fp)
    1df0:	1885883a 	add	r2,r3,r2
    1df4:	10800243 	ldbu	r2,9(r2)
    1df8:	10803fcc 	andi	r2,r2,255
    1dfc:	1004913a 	slli	r2,r2,4
    1e00:	10c03fcc 	andi	r3,r2,255
		LOOP_FILTER_C1(tab[i].LF_C1));
    1e04:	e0bff617 	ldw	r2,-40(fp)
    1e08:	108003a4 	muli	r2,r2,14
    1e0c:	e13ff517 	ldw	r4,-44(fp)
    1e10:	2085883a 	add	r2,r4,r2
    1e14:	10800283 	ldbu	r2,10(r2)
    1e18:	10803fcc 	andi	r2,r2,255
    1e1c:	108003cc 	andi	r2,r2,15
		VCO_VARACTOR_REFERENCE_TCF(7));

	ad9361_spi_writef(spi, REG_RX_CP_CURRENT + offs, CHARGE_PUMP_CURRENT(~0),
		tab[i].Charge_Pump_Current);
	ad9361_spi_write(spi, REG_RX_LOOP_FILTER_1 + offs,
		LOOP_FILTER_C2(tab[i].LF_C2) |
    1e20:	1884b03a 	or	r2,r3,r2
		VCO_VARACTOR_OFFSET(0) |
		VCO_VARACTOR_REFERENCE_TCF(7));

	ad9361_spi_writef(spi, REG_RX_CP_CURRENT + offs, CHARGE_PUMP_CURRENT(~0),
		tab[i].Charge_Pump_Current);
	ad9361_spi_write(spi, REG_RX_LOOP_FILTER_1 + offs,
    1e24:	e13ff817 	ldw	r4,-32(fp)
    1e28:	100d883a 	mov	r6,r2
    1e2c:	00002600 	call	260 <ad9361_spi_write>
		LOOP_FILTER_C2(tab[i].LF_C2) |
		LOOP_FILTER_C1(tab[i].LF_C1));
	ad9361_spi_write(spi, REG_RX_LOOP_FILTER_2 + offs,
    1e30:	e0bff717 	ldw	r2,-36(fp)
    1e34:	11408fc4 	addi	r5,r2,575
		LOOP_FILTER_R1(tab[i].LF_R1) |
    1e38:	e0bff617 	ldw	r2,-40(fp)
    1e3c:	108003a4 	muli	r2,r2,14
    1e40:	e0fff517 	ldw	r3,-44(fp)
    1e44:	1885883a 	add	r2,r3,r2
    1e48:	108002c3 	ldbu	r2,11(r2)
    1e4c:	10803fcc 	andi	r2,r2,255
    1e50:	1004913a 	slli	r2,r2,4
    1e54:	10c03fcc 	andi	r3,r2,255
		LOOP_FILTER_C3(tab[i].LF_C3));
    1e58:	e0bff617 	ldw	r2,-40(fp)
    1e5c:	108003a4 	muli	r2,r2,14
    1e60:	e13ff517 	ldw	r4,-44(fp)
    1e64:	2085883a 	add	r2,r4,r2
    1e68:	10800303 	ldbu	r2,12(r2)
    1e6c:	10803fcc 	andi	r2,r2,255
    1e70:	108003cc 	andi	r2,r2,15
		tab[i].Charge_Pump_Current);
	ad9361_spi_write(spi, REG_RX_LOOP_FILTER_1 + offs,
		LOOP_FILTER_C2(tab[i].LF_C2) |
		LOOP_FILTER_C1(tab[i].LF_C1));
	ad9361_spi_write(spi, REG_RX_LOOP_FILTER_2 + offs,
		LOOP_FILTER_R1(tab[i].LF_R1) |
    1e74:	1884b03a 	or	r2,r3,r2
	ad9361_spi_writef(spi, REG_RX_CP_CURRENT + offs, CHARGE_PUMP_CURRENT(~0),
		tab[i].Charge_Pump_Current);
	ad9361_spi_write(spi, REG_RX_LOOP_FILTER_1 + offs,
		LOOP_FILTER_C2(tab[i].LF_C2) |
		LOOP_FILTER_C1(tab[i].LF_C1));
	ad9361_spi_write(spi, REG_RX_LOOP_FILTER_2 + offs,
    1e78:	e13ff817 	ldw	r4,-32(fp)
    1e7c:	100d883a 	mov	r6,r2
    1e80:	00002600 	call	260 <ad9361_spi_write>
		LOOP_FILTER_R1(tab[i].LF_R1) |
		LOOP_FILTER_C3(tab[i].LF_C3));
	ad9361_spi_write(spi, REG_RX_LOOP_FILTER_3 + offs,
    1e84:	e0bff717 	ldw	r2,-36(fp)
    1e88:	11409004 	addi	r5,r2,576
		LOOP_FILTER_R3(tab[i].LF_R3));
    1e8c:	e0bff617 	ldw	r2,-40(fp)
    1e90:	108003a4 	muli	r2,r2,14
    1e94:	e0fff517 	ldw	r3,-44(fp)
    1e98:	1885883a 	add	r2,r3,r2
    1e9c:	10800343 	ldbu	r2,13(r2)
		LOOP_FILTER_C2(tab[i].LF_C2) |
		LOOP_FILTER_C1(tab[i].LF_C1));
	ad9361_spi_write(spi, REG_RX_LOOP_FILTER_2 + offs,
		LOOP_FILTER_R1(tab[i].LF_R1) |
		LOOP_FILTER_C3(tab[i].LF_C3));
	ad9361_spi_write(spi, REG_RX_LOOP_FILTER_3 + offs,
    1ea0:	10803fcc 	andi	r2,r2,255
    1ea4:	108003cc 	andi	r2,r2,15
    1ea8:	e13ff817 	ldw	r4,-32(fp)
    1eac:	100d883a 	mov	r6,r2
    1eb0:	00002600 	call	260 <ad9361_spi_write>
		LOOP_FILTER_R3(tab[i].LF_R3));

	return 0;
    1eb4:	0005883a 	mov	r2,zero
}
    1eb8:	e6fffe04 	addi	sp,fp,-8
    1ebc:	dfc00317 	ldw	ra,12(sp)
    1ec0:	df000217 	ldw	fp,8(sp)
    1ec4:	dc400117 	ldw	r17,4(sp)
    1ec8:	dc000017 	ldw	r16,0(sp)
    1ecc:	dec00404 	addi	sp,sp,16
    1ed0:	f800283a 	ret

00001ed4 <ad9361_get_split_table_gain>:
 * @param rx_gain  A rf_rx_gain struct to store the RF gain.
 * @return 0 in case of success,
 */
static int32_t ad9361_get_split_table_gain(struct ad9361_rf_phy *phy, uint32_t idx_reg,
struct rf_rx_gain *rx_gain)
{
    1ed4:	defff604 	addi	sp,sp,-40
    1ed8:	de00012e 	bgeu	sp,et,1ee0 <ad9361_get_split_table_gain+0xc>
    1edc:	003b68fa 	trap	3
    1ee0:	dfc00915 	stw	ra,36(sp)
    1ee4:	df000815 	stw	fp,32(sp)
    1ee8:	dc000715 	stw	r16,28(sp)
    1eec:	df000804 	addi	fp,sp,32
    1ef0:	e13ffc15 	stw	r4,-16(fp)
    1ef4:	e17ffd15 	stw	r5,-12(fp)
    1ef8:	e1bffe15 	stw	r6,-8(fp)
	struct spi_device *spi = phy->spi;
    1efc:	e0bffc17 	ldw	r2,-16(fp)
    1f00:	10800117 	ldw	r2,4(r2)
    1f04:	e0bff815 	stw	r2,-32(fp)
	uint32_t val, tbl_addr;
	int32_t rc = 0;
    1f08:	e03ff915 	stw	zero,-28(fp)

	rx_gain->fgt_lmt_index = ad9361_spi_readf(spi, idx_reg,
    1f0c:	01001fc4 	movi	r4,127
    1f10:	001c8300 	call	1c830 <find_first_bit>
    1f14:	e13ff817 	ldw	r4,-32(fp)
    1f18:	e17ffd17 	ldw	r5,-12(fp)
    1f1c:	01801fc4 	movi	r6,127
    1f20:	100f883a 	mov	r7,r2
    1f24:	00001b80 	call	1b8 <__ad9361_spi_readf>
    1f28:	1007883a 	mov	r3,r2
    1f2c:	e0bffe17 	ldw	r2,-8(fp)
    1f30:	10c00215 	stw	r3,8(r2)
		FULL_TABLE_GAIN_INDEX(~0));
	tbl_addr = ad9361_spi_read(spi, REG_GAIN_TABLE_ADDRESS);
    1f34:	e13ff817 	ldw	r4,-32(fp)
    1f38:	01404c04 	movi	r5,304
    1f3c:	00001500 	call	150 <ad9361_spi_read>
    1f40:	e0bffa15 	stw	r2,-24(fp)

	ad9361_spi_write(spi, REG_GAIN_TABLE_ADDRESS, rx_gain->fgt_lmt_index);
    1f44:	e0bffe17 	ldw	r2,-8(fp)
    1f48:	10800217 	ldw	r2,8(r2)
    1f4c:	e13ff817 	ldw	r4,-32(fp)
    1f50:	01404c04 	movi	r5,304
    1f54:	100d883a 	mov	r6,r2
    1f58:	00002600 	call	260 <ad9361_spi_write>

	val = ad9361_spi_read(spi, REG_GAIN_TABLE_READ_DATA1);
    1f5c:	e13ff817 	ldw	r4,-32(fp)
    1f60:	01404d04 	movi	r5,308
    1f64:	00001500 	call	150 <ad9361_spi_read>
    1f68:	e0bffb15 	stw	r2,-20(fp)
	rx_gain->lna_index = TO_LNA_GAIN(val);
    1f6c:	e0bffb17 	ldw	r2,-20(fp)
    1f70:	1004d17a 	srli	r2,r2,5
    1f74:	10c000cc 	andi	r3,r2,3
    1f78:	e0bffe17 	ldw	r2,-8(fp)
    1f7c:	10c00615 	stw	r3,24(r2)
	rx_gain->mixer_index = TO_MIXER_GM_GAIN(val);
    1f80:	e0bffb17 	ldw	r2,-20(fp)
    1f84:	10c007cc 	andi	r3,r2,31
    1f88:	e0bffe17 	ldw	r2,-8(fp)
    1f8c:	10c00815 	stw	r3,32(r2)

	rx_gain->tia_index = ad9361_spi_readf(spi, REG_GAIN_TABLE_READ_DATA2, TIA_GAIN);
    1f90:	01000804 	movi	r4,32
    1f94:	001c8300 	call	1c830 <find_first_bit>
    1f98:	e13ff817 	ldw	r4,-32(fp)
    1f9c:	01404d44 	movi	r5,309
    1fa0:	01800804 	movi	r6,32
    1fa4:	100f883a 	mov	r7,r2
    1fa8:	00001b80 	call	1b8 <__ad9361_spi_readf>
    1fac:	1007883a 	mov	r3,r2
    1fb0:	e0bffe17 	ldw	r2,-8(fp)
    1fb4:	10c00715 	stw	r3,28(r2)

	rx_gain->lmt_gain = lna_table[phy->current_table][rx_gain->lna_index] +
    1fb8:	e0bffc17 	ldw	r2,-16(fp)
    1fbc:	10c04417 	ldw	r3,272(r2)
    1fc0:	e0bffe17 	ldw	r2,-8(fp)
    1fc4:	11000617 	ldw	r4,24(r2)
    1fc8:	008000b4 	movhi	r2,2
    1fcc:	109a3c84 	addi	r2,r2,26866
    1fd0:	18c7883a 	add	r3,r3,r3
    1fd4:	18c7883a 	add	r3,r3,r3
    1fd8:	1907883a 	add	r3,r3,r4
    1fdc:	10c5883a 	add	r2,r2,r3
    1fe0:	10800003 	ldbu	r2,0(r2)
    1fe4:	10c03fcc 	andi	r3,r2,255
    1fe8:	18c0201c 	xori	r3,r3,128
    1fec:	18ffe004 	addi	r3,r3,-128
		mixer_table[phy->current_table][rx_gain->mixer_index] +
    1ff0:	e0bffc17 	ldw	r2,-16(fp)
    1ff4:	11404417 	ldw	r5,272(r2)
    1ff8:	e0bffe17 	ldw	r2,-8(fp)
    1ffc:	11000817 	ldw	r4,32(r2)
    2000:	008000b4 	movhi	r2,2
    2004:	109a3f84 	addi	r2,r2,26878
    2008:	280a913a 	slli	r5,r5,4
    200c:	2909883a 	add	r4,r5,r4
    2010:	1105883a 	add	r2,r2,r4
    2014:	10800003 	ldbu	r2,0(r2)
	rx_gain->lna_index = TO_LNA_GAIN(val);
	rx_gain->mixer_index = TO_MIXER_GM_GAIN(val);

	rx_gain->tia_index = ad9361_spi_readf(spi, REG_GAIN_TABLE_READ_DATA2, TIA_GAIN);

	rx_gain->lmt_gain = lna_table[phy->current_table][rx_gain->lna_index] +
    2018:	10803fcc 	andi	r2,r2,255
    201c:	1080201c 	xori	r2,r2,128
    2020:	10bfe004 	addi	r2,r2,-128
    2024:	1887883a 	add	r3,r3,r2
		mixer_table[phy->current_table][rx_gain->mixer_index] +
		tia_table[rx_gain->tia_index];
    2028:	e0bffe17 	ldw	r2,-8(fp)
    202c:	11000717 	ldw	r4,28(r2)
    2030:	d0a00184 	addi	r2,gp,-32762
    2034:	2085883a 	add	r2,r4,r2
    2038:	10800003 	ldbu	r2,0(r2)
	rx_gain->mixer_index = TO_MIXER_GM_GAIN(val);

	rx_gain->tia_index = ad9361_spi_readf(spi, REG_GAIN_TABLE_READ_DATA2, TIA_GAIN);

	rx_gain->lmt_gain = lna_table[phy->current_table][rx_gain->lna_index] +
		mixer_table[phy->current_table][rx_gain->mixer_index] +
    203c:	10803fcc 	andi	r2,r2,255
    2040:	1080201c 	xori	r2,r2,128
    2044:	10bfe004 	addi	r2,r2,-128
    2048:	1885883a 	add	r2,r3,r2
	rx_gain->lna_index = TO_LNA_GAIN(val);
	rx_gain->mixer_index = TO_MIXER_GM_GAIN(val);

	rx_gain->tia_index = ad9361_spi_readf(spi, REG_GAIN_TABLE_READ_DATA2, TIA_GAIN);

	rx_gain->lmt_gain = lna_table[phy->current_table][rx_gain->lna_index] +
    204c:	1007883a 	mov	r3,r2
    2050:	e0bffe17 	ldw	r2,-8(fp)
    2054:	10c00315 	stw	r3,12(r2)
		mixer_table[phy->current_table][rx_gain->mixer_index] +
		tia_table[rx_gain->tia_index];

	ad9361_spi_write(spi, REG_GAIN_TABLE_ADDRESS, tbl_addr);
    2058:	e13ff817 	ldw	r4,-32(fp)
    205c:	01404c04 	movi	r5,304
    2060:	e1bffa17 	ldw	r6,-24(fp)
    2064:	00002600 	call	260 <ad9361_spi_write>

	/* Read LPF Index */
	rx_gain->lpf_gain = ad9361_spi_readf(spi, idx_reg + 1, LPF_GAIN_RX(~0));
    2068:	e0bffd17 	ldw	r2,-12(fp)
    206c:	14000044 	addi	r16,r2,1
    2070:	010007c4 	movi	r4,31
    2074:	001c8300 	call	1c830 <find_first_bit>
    2078:	e13ff817 	ldw	r4,-32(fp)
    207c:	800b883a 	mov	r5,r16
    2080:	018007c4 	movi	r6,31
    2084:	100f883a 	mov	r7,r2
    2088:	00001b80 	call	1b8 <__ad9361_spi_readf>
    208c:	1007883a 	mov	r3,r2
    2090:	e0bffe17 	ldw	r2,-8(fp)
    2094:	10c00415 	stw	r3,16(r2)

	/* Read Digital Gain */
	rx_gain->digital_gain = ad9361_spi_readf(spi, idx_reg + 2,
    2098:	e0bffd17 	ldw	r2,-12(fp)
    209c:	14000084 	addi	r16,r2,2
    20a0:	010007c4 	movi	r4,31
    20a4:	001c8300 	call	1c830 <find_first_bit>
    20a8:	e13ff817 	ldw	r4,-32(fp)
    20ac:	800b883a 	mov	r5,r16
    20b0:	018007c4 	movi	r6,31
    20b4:	100f883a 	mov	r7,r2
    20b8:	00001b80 	call	1b8 <__ad9361_spi_readf>
    20bc:	1007883a 	mov	r3,r2
    20c0:	e0bffe17 	ldw	r2,-8(fp)
    20c4:	10c00515 	stw	r3,20(r2)
		DIGITAL_GAIN_RX(~0));

	rx_gain->gain_db = rx_gain->lmt_gain + rx_gain->lpf_gain +
    20c8:	e0bffe17 	ldw	r2,-8(fp)
    20cc:	10c00317 	ldw	r3,12(r2)
    20d0:	e0bffe17 	ldw	r2,-8(fp)
    20d4:	10800417 	ldw	r2,16(r2)
    20d8:	1887883a 	add	r3,r3,r2
		rx_gain->digital_gain;
    20dc:	e0bffe17 	ldw	r2,-8(fp)
    20e0:	10800517 	ldw	r2,20(r2)

	/* Read Digital Gain */
	rx_gain->digital_gain = ad9361_spi_readf(spi, idx_reg + 2,
		DIGITAL_GAIN_RX(~0));

	rx_gain->gain_db = rx_gain->lmt_gain + rx_gain->lpf_gain +
    20e4:	1885883a 	add	r2,r3,r2
    20e8:	1007883a 	mov	r3,r2
    20ec:	e0bffe17 	ldw	r2,-8(fp)
    20f0:	10c00115 	stw	r3,4(r2)
		rx_gain->digital_gain;
	return rc;
    20f4:	e0bff917 	ldw	r2,-28(fp)
}
    20f8:	e6ffff04 	addi	sp,fp,-4
    20fc:	dfc00217 	ldw	ra,8(sp)
    2100:	df000117 	ldw	fp,4(sp)
    2104:	dc000017 	ldw	r16,0(sp)
    2108:	dec00304 	addi	sp,sp,12
    210c:	f800283a 	ret

00002110 <ad9361_get_full_table_gain>:
 * @param rx_gain A rf_rx_gain struct to store the RF gain.
 * @return 0 in case of success
 */
static int32_t ad9361_get_full_table_gain(struct ad9361_rf_phy *phy, uint32_t idx_reg,
struct rf_rx_gain *rx_gain)
{
    2110:	defff404 	addi	sp,sp,-48
    2114:	de00012e 	bgeu	sp,et,211c <ad9361_get_full_table_gain+0xc>
    2118:	003b68fa 	trap	3
    211c:	dfc00b15 	stw	ra,44(sp)
    2120:	df000a15 	stw	fp,40(sp)
    2124:	dc000915 	stw	r16,36(sp)
    2128:	df000a04 	addi	fp,sp,40
    212c:	e13ffc15 	stw	r4,-16(fp)
    2130:	e17ffd15 	stw	r5,-12(fp)
    2134:	e1bffe15 	stw	r6,-8(fp)
	struct spi_device *spi = phy->spi;
    2138:	e0bffc17 	ldw	r2,-16(fp)
    213c:	10800117 	ldw	r2,4(r2)
    2140:	e0bff715 	stw	r2,-36(fp)
	int32_t val;
	enum rx_gain_table_name tbl;
	struct rx_gain_info *gain_info;
	int32_t rc = 0, rx_gain_db;
    2144:	e03ff815 	stw	zero,-32(fp)

	tbl = ad9361_gt_tableindex(
    2148:	e0bffc17 	ldw	r2,-16(fp)
    214c:	10802917 	ldw	r2,164(r2)
    2150:	e13ffc17 	ldw	r4,-16(fp)
    2154:	100b883a 	mov	r5,r2
    2158:	001bc900 	call	1bc90 <clk_get_rate>
    215c:	1009883a 	mov	r4,r2
    2160:	00010f00 	call	10f0 <ad9361_from_clk>
    2164:	100b883a 	mov	r5,r2
    2168:	180d883a 	mov	r6,r3
    216c:	2809883a 	mov	r4,r5
    2170:	300b883a 	mov	r5,r6
    2174:	00010280 	call	1028 <ad9361_gt_tableindex>
    2178:	e0bff915 	stw	r2,-28(fp)
		ad9361_from_clk(clk_get_rate(phy, phy->ref_clk_scale[RX_RFPLL])));

	rx_gain->fgt_lmt_index = val = ad9361_spi_readf(spi, idx_reg,
    217c:	01001fc4 	movi	r4,127
    2180:	001c8300 	call	1c830 <find_first_bit>
    2184:	e13ff717 	ldw	r4,-36(fp)
    2188:	e17ffd17 	ldw	r5,-12(fp)
    218c:	01801fc4 	movi	r6,127
    2190:	100f883a 	mov	r7,r2
    2194:	00001b80 	call	1b8 <__ad9361_spi_readf>
    2198:	e0bffa15 	stw	r2,-24(fp)
    219c:	e0fffa17 	ldw	r3,-24(fp)
    21a0:	e0bffe17 	ldw	r2,-8(fp)
    21a4:	10c00215 	stw	r3,8(r2)
		FULL_TABLE_GAIN_INDEX(~0));
	gain_info = &phy->rx_gain[tbl];
    21a8:	e0bff917 	ldw	r2,-28(fp)
    21ac:	10800624 	muli	r2,r2,24
    21b0:	10803204 	addi	r2,r2,200
    21b4:	e0fffc17 	ldw	r3,-16(fp)
    21b8:	1885883a 	add	r2,r3,r2
    21bc:	e0bffb15 	stw	r2,-20(fp)
	if (val > gain_info->idx_step_offset) {
    21c0:	e0bffb17 	ldw	r2,-20(fp)
    21c4:	10c00517 	ldw	r3,20(r2)
    21c8:	e0bffa17 	ldw	r2,-24(fp)
    21cc:	18800e0e 	bge	r3,r2,2208 <ad9361_get_full_table_gain+0xf8>
		val = val - gain_info->idx_step_offset;
    21d0:	e0bffb17 	ldw	r2,-20(fp)
    21d4:	10800517 	ldw	r2,20(r2)
    21d8:	e0fffa17 	ldw	r3,-24(fp)
    21dc:	1885c83a 	sub	r2,r3,r2
    21e0:	e0bffa15 	stw	r2,-24(fp)
		rx_gain_db = gain_info->starting_gain_db +
    21e4:	e0bffb17 	ldw	r2,-20(fp)
    21e8:	10c00117 	ldw	r3,4(r2)
			((val)* gain_info->gain_step_db);
    21ec:	e0bffb17 	ldw	r2,-20(fp)
    21f0:	11000317 	ldw	r4,12(r2)
    21f4:	e0bffa17 	ldw	r2,-24(fp)
    21f8:	2085383a 	mul	r2,r4,r2
	rx_gain->fgt_lmt_index = val = ad9361_spi_readf(spi, idx_reg,
		FULL_TABLE_GAIN_INDEX(~0));
	gain_info = &phy->rx_gain[tbl];
	if (val > gain_info->idx_step_offset) {
		val = val - gain_info->idx_step_offset;
		rx_gain_db = gain_info->starting_gain_db +
    21fc:	1885883a 	add	r2,r3,r2
    2200:	e0bff615 	stw	r2,-40(fp)
    2204:	00000306 	br	2214 <ad9361_get_full_table_gain+0x104>
			((val)* gain_info->gain_step_db);
	}
	else {
		rx_gain_db = gain_info->starting_gain_db;
    2208:	e0bffb17 	ldw	r2,-20(fp)
    220c:	10800117 	ldw	r2,4(r2)
    2210:	e0bff615 	stw	r2,-40(fp)
	}

	/* Read Digital Gain */
	rx_gain->digital_gain = ad9361_spi_readf(spi, idx_reg + 2,
    2214:	e0bffd17 	ldw	r2,-12(fp)
    2218:	14000084 	addi	r16,r2,2
    221c:	010007c4 	movi	r4,31
    2220:	001c8300 	call	1c830 <find_first_bit>
    2224:	e13ff717 	ldw	r4,-36(fp)
    2228:	800b883a 	mov	r5,r16
    222c:	018007c4 	movi	r6,31
    2230:	100f883a 	mov	r7,r2
    2234:	00001b80 	call	1b8 <__ad9361_spi_readf>
    2238:	1007883a 	mov	r3,r2
    223c:	e0bffe17 	ldw	r2,-8(fp)
    2240:	10c00515 	stw	r3,20(r2)
		DIGITAL_GAIN_RX(~0));

	rx_gain->gain_db = rx_gain_db;
    2244:	e0bffe17 	ldw	r2,-8(fp)
    2248:	e0fff617 	ldw	r3,-40(fp)
    224c:	10c00115 	stw	r3,4(r2)

	return rc;
    2250:	e0bff817 	ldw	r2,-32(fp)
}
    2254:	e6ffff04 	addi	sp,fp,-4
    2258:	dfc00217 	ldw	ra,8(sp)
    225c:	df000117 	ldw	fp,4(sp)
    2260:	dc000017 	ldw	r16,0(sp)
    2264:	dec00304 	addi	sp,sp,12
    2268:	f800283a 	ret

0000226c <ad9361_get_rx_gain>:
 * @param rx_gain A rf_rx_gain struct to store the RF gain.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_get_rx_gain(struct ad9361_rf_phy *phy,
	uint32_t rx_id, struct rf_rx_gain *rx_gain)
{
    226c:	defff504 	addi	sp,sp,-44
    2270:	de00012e 	bgeu	sp,et,2278 <ad9361_get_rx_gain+0xc>
    2274:	003b68fa 	trap	3
    2278:	dfc00a15 	stw	ra,40(sp)
    227c:	df000915 	stw	fp,36(sp)
    2280:	dc000815 	stw	r16,32(sp)
    2284:	df000904 	addi	fp,sp,36
    2288:	e13ffc15 	stw	r4,-16(fp)
    228c:	e17ffd15 	stw	r5,-12(fp)
    2290:	e1bffe15 	stw	r6,-8(fp)
	struct spi_device *spi = phy->spi;
    2294:	e0bffc17 	ldw	r2,-16(fp)
    2298:	10800117 	ldw	r2,4(r2)
    229c:	e0bffa15 	stw	r2,-24(fp)
	uint32_t val, idx_reg;
	uint8_t gain_ctl_shift, rx_enable_mask;
	uint8_t fast_atk_shift;
	int32_t rc = 0;
    22a0:	e03ff915 	stw	zero,-28(fp)

	if (rx_id == 1) {
    22a4:	e0bffd17 	ldw	r2,-12(fp)
    22a8:	10800058 	cmpnei	r2,r2,1
    22ac:	1000071e 	bne	r2,zero,22cc <ad9361_get_rx_gain+0x60>
		gain_ctl_shift = RX1_GAIN_CTRL_SHIFT;
    22b0:	e03ff805 	stb	zero,-32(fp)
		idx_reg = REG_GAIN_RX1;
    22b4:	0080ac04 	movi	r2,688
    22b8:	e0bff715 	stw	r2,-36(fp)
		rx_enable_mask = RX_CHANNEL_ENABLE(RX_1);
    22bc:	00801004 	movi	r2,64
    22c0:	e0bff845 	stb	r2,-31(fp)
		fast_atk_shift = RX1_FAST_ATK_SHIFT;
    22c4:	e03ff885 	stb	zero,-30(fp)
    22c8:	00001606 	br	2324 <ad9361_get_rx_gain+0xb8>

	}
	else if (rx_id == 2) {
    22cc:	e0bffd17 	ldw	r2,-12(fp)
    22d0:	10800098 	cmpnei	r2,r2,2
    22d4:	1000091e 	bne	r2,zero,22fc <ad9361_get_rx_gain+0x90>
		gain_ctl_shift = RX2_GAIN_CTRL_SHIFT;
    22d8:	00800084 	movi	r2,2
    22dc:	e0bff805 	stb	r2,-32(fp)
		idx_reg = REG_GAIN_RX2;
    22e0:	0080ad44 	movi	r2,693
    22e4:	e0bff715 	stw	r2,-36(fp)
		rx_enable_mask = RX_CHANNEL_ENABLE(RX_2);
    22e8:	00bfe004 	movi	r2,-128
    22ec:	e0bff845 	stb	r2,-31(fp)
		fast_atk_shift = RX2_FAST_ATK_SHIFT;
    22f0:	00800104 	movi	r2,4
    22f4:	e0bff885 	stb	r2,-30(fp)
    22f8:	00000a06 	br	2324 <ad9361_get_rx_gain+0xb8>
	}
	else {
		dev_err(dev, "Unknown Rx path %"PRIu32, rx_id);
    22fc:	010000b4 	movhi	r4,2
    2300:	211acb04 	addi	r4,r4,27436
    2304:	e17ffd17 	ldw	r5,-12(fp)
    2308:	001f8180 	call	1f818 <printf>
    230c:	010000b4 	movhi	r4,2
    2310:	211a7504 	addi	r4,r4,27092
    2314:	001f8180 	call	1f818 <printf>
		rc = -EINVAL;
    2318:	00bffa84 	movi	r2,-22
    231c:	e0bff915 	stw	r2,-28(fp)
		goto out;
    2320:	00004d06 	br	2458 <ad9361_get_rx_gain+0x1ec>
	}

	val = ad9361_spi_readf(spi, REG_RX_ENABLE_FILTER_CTRL, rx_enable_mask);
    2324:	e43ff843 	ldbu	r16,-31(fp)
    2328:	e0bff843 	ldbu	r2,-31(fp)
    232c:	1009883a 	mov	r4,r2
    2330:	001c8300 	call	1c830 <find_first_bit>
    2334:	e13ffa17 	ldw	r4,-24(fp)
    2338:	014000c4 	movi	r5,3
    233c:	800d883a 	mov	r6,r16
    2340:	100f883a 	mov	r7,r2
    2344:	00001b80 	call	1b8 <__ad9361_spi_readf>
    2348:	e0bffb15 	stw	r2,-20(fp)

	if (!val) {
    234c:	e0bffb17 	ldw	r2,-20(fp)
    2350:	10000c1e 	bne	r2,zero,2384 <ad9361_get_rx_gain+0x118>
		dev_dbg(dev, "Rx%"PRIu32" is not enabled", rx_gain->ant);
    2354:	e0bffe17 	ldw	r2,-8(fp)
    2358:	10800017 	ldw	r2,0(r2)
    235c:	010000b4 	movhi	r4,2
    2360:	211ad004 	addi	r4,r4,27456
    2364:	100b883a 	mov	r5,r2
    2368:	001f8180 	call	1f818 <printf>
    236c:	010000b4 	movhi	r4,2
    2370:	211a7504 	addi	r4,r4,27092
    2374:	001f8180 	call	1f818 <printf>
		rc = -EAGAIN;
    2378:	00bffd44 	movi	r2,-11
    237c:	e0bff915 	stw	r2,-28(fp)
		goto out;
    2380:	00003506 	br	2458 <ad9361_get_rx_gain+0x1ec>
	}

	val = ad9361_spi_read(spi, REG_AGC_CONFIG_1);
    2384:	e13ffa17 	ldw	r4,-24(fp)
    2388:	01403e84 	movi	r5,250
    238c:	00001500 	call	150 <ad9361_spi_read>
    2390:	e0bffb15 	stw	r2,-20(fp)

	val = (val >> gain_ctl_shift) & RX_GAIN_CTL_MASK;
    2394:	e0bff803 	ldbu	r2,-32(fp)
    2398:	e0fffb17 	ldw	r3,-20(fp)
    239c:	1884d83a 	srl	r2,r3,r2
    23a0:	108000cc 	andi	r2,r2,3
    23a4:	e0bffb15 	stw	r2,-20(fp)

	if (val == RX_GAIN_CTL_AGC_FAST_ATK) {
    23a8:	e0bffb17 	ldw	r2,-20(fp)
    23ac:	10800058 	cmpnei	r2,r2,1
    23b0:	1000161e 	bne	r2,zero,240c <ad9361_get_rx_gain+0x1a0>
		/* In fast attack mode check whether Fast attack state machine
		* has locked gain, if not then we can not read gain.
		*/
		val = ad9361_spi_read(spi, REG_FAST_ATTACK_STATE);
    23b4:	e13ffa17 	ldw	r4,-24(fp)
    23b8:	0140acc4 	movi	r5,691
    23bc:	00001500 	call	150 <ad9361_spi_read>
    23c0:	e0bffb15 	stw	r2,-20(fp)
		val = (val >> fast_atk_shift) & FAST_ATK_MASK;
    23c4:	e0bff883 	ldbu	r2,-30(fp)
    23c8:	e0fffb17 	ldw	r3,-20(fp)
    23cc:	1884d83a 	srl	r2,r3,r2
    23d0:	108001cc 	andi	r2,r2,7
    23d4:	e0bffb15 	stw	r2,-20(fp)
		if (val != FAST_ATK_GAIN_LOCKED) {
    23d8:	e0bffb17 	ldw	r2,-20(fp)
    23dc:	10800160 	cmpeqi	r2,r2,5
    23e0:	10000a1e 	bne	r2,zero,240c <ad9361_get_rx_gain+0x1a0>
			dev_warn(dev, "Failed to read gain, state m/c at %"PRIx32,
    23e4:	010000b4 	movhi	r4,2
    23e8:	211ad604 	addi	r4,r4,27480
    23ec:	e17ffb17 	ldw	r5,-20(fp)
    23f0:	001f8180 	call	1f818 <printf>
    23f4:	010000b4 	movhi	r4,2
    23f8:	211a7504 	addi	r4,r4,27092
    23fc:	001f8180 	call	1f818 <printf>
				val);
			rc = -EAGAIN;
    2400:	00bffd44 	movi	r2,-11
    2404:	e0bff915 	stw	r2,-28(fp)
			goto out;
    2408:	00001306 	br	2458 <ad9361_get_rx_gain+0x1ec>
		}
	}

	if (has_split_gt && phy->pdata->split_gt)
    240c:	00800044 	movi	r2,1
    2410:	10803fcc 	andi	r2,r2,255
    2414:	10000b26 	beq	r2,zero,2444 <ad9361_get_rx_gain+0x1d8>
    2418:	e0bffc17 	ldw	r2,-16(fp)
    241c:	10803017 	ldw	r2,192(r2)
    2420:	108000c3 	ldbu	r2,3(r2)
    2424:	10803fcc 	andi	r2,r2,255
    2428:	10000626 	beq	r2,zero,2444 <ad9361_get_rx_gain+0x1d8>
		rc = ad9361_get_split_table_gain(phy, idx_reg, rx_gain);
    242c:	e13ffc17 	ldw	r4,-16(fp)
    2430:	e17ff717 	ldw	r5,-36(fp)
    2434:	e1bffe17 	ldw	r6,-8(fp)
    2438:	0001ed40 	call	1ed4 <ad9361_get_split_table_gain>
    243c:	e0bff915 	stw	r2,-28(fp)
    2440:	00000506 	br	2458 <ad9361_get_rx_gain+0x1ec>
	else
		rc = ad9361_get_full_table_gain(phy, idx_reg, rx_gain);
    2444:	e13ffc17 	ldw	r4,-16(fp)
    2448:	e17ff717 	ldw	r5,-36(fp)
    244c:	e1bffe17 	ldw	r6,-8(fp)
    2450:	00021100 	call	2110 <ad9361_get_full_table_gain>
    2454:	e0bff915 	stw	r2,-28(fp)

out:
	return rc;
    2458:	e0bff917 	ldw	r2,-28(fp)
}
    245c:	e6ffff04 	addi	sp,fp,-4
    2460:	dfc00217 	ldw	ra,8(sp)
    2464:	df000117 	ldw	fp,4(sp)
    2468:	dc000017 	ldw	r16,0(sp)
    246c:	dec00304 	addi	sp,sp,12
    2470:	f800283a 	ret

00002474 <ad9361_ensm_force_state>:
 *                   ENSM_STATE_TX, ENSM_STATE_TX_FLUSH, ENSM_STATE_RX,
 *                   ENSM_STATE_RX_FLUSH, ENSM_STATE_FDD, ENSM_STATE_FDD_FLUSH].
 * @return None.
 */
void ad9361_ensm_force_state(struct ad9361_rf_phy *phy, uint8_t ensm_state)
{
    2474:	defff804 	addi	sp,sp,-32
    2478:	de00012e 	bgeu	sp,et,2480 <ad9361_ensm_force_state+0xc>
    247c:	003b68fa 	trap	3
    2480:	dfc00715 	stw	ra,28(sp)
    2484:	df000615 	stw	fp,24(sp)
    2488:	df000604 	addi	fp,sp,24
    248c:	e13ffe15 	stw	r4,-8(fp)
    2490:	2805883a 	mov	r2,r5
    2494:	e0bfff05 	stb	r2,-4(fp)
	struct spi_device *spi = phy->spi;
    2498:	e0bffe17 	ldw	r2,-8(fp)
    249c:	10800117 	ldw	r2,4(r2)
    24a0:	e0bffb15 	stw	r2,-20(fp)
	uint8_t dev_ensm_state;
	int32_t rc;
	uint32_t val;

	dev_ensm_state = ad9361_spi_readf(spi, REG_STATE, ENSM_STATE(~0));
    24a4:	010003c4 	movi	r4,15
    24a8:	001c8300 	call	1c830 <find_first_bit>
    24ac:	e13ffb17 	ldw	r4,-20(fp)
    24b0:	014005c4 	movi	r5,23
    24b4:	018003c4 	movi	r6,15
    24b8:	100f883a 	mov	r7,r2
    24bc:	00001b80 	call	1b8 <__ad9361_spi_readf>
    24c0:	e0bffc05 	stb	r2,-16(fp)

	phy->prev_ensm_state = dev_ensm_state;
    24c4:	e0bffe17 	ldw	r2,-8(fp)
    24c8:	e0fffc03 	ldbu	r3,-16(fp)
    24cc:	10c03105 	stb	r3,196(r2)

	if (dev_ensm_state == ensm_state) {
    24d0:	e0fffc03 	ldbu	r3,-16(fp)
    24d4:	e0bfff03 	ldbu	r2,-4(fp)
    24d8:	1880091e 	bne	r3,r2,2500 <ad9361_ensm_force_state+0x8c>
		dev_dbg(dev, "Nothing to do, device is already in %d state",
    24dc:	e0bfff03 	ldbu	r2,-4(fp)
    24e0:	010000b4 	movhi	r4,2
    24e4:	211ae004 	addi	r4,r4,27520
    24e8:	100b883a 	mov	r5,r2
    24ec:	001f8180 	call	1f818 <printf>
    24f0:	010000b4 	movhi	r4,2
    24f4:	211a7504 	addi	r4,r4,27092
    24f8:	001f8180 	call	1f818 <printf>
			ensm_state);
		goto out;
    24fc:	00005706 	br	265c <ad9361_ensm_force_state+0x1e8>
	}

	dev_dbg(dev, "Device is in %x state, forcing to %x", dev_ensm_state,
    2500:	e0fffc03 	ldbu	r3,-16(fp)
    2504:	e0bfff03 	ldbu	r2,-4(fp)
    2508:	010000b4 	movhi	r4,2
    250c:	211aec04 	addi	r4,r4,27568
    2510:	180b883a 	mov	r5,r3
    2514:	100d883a 	mov	r6,r2
    2518:	001f8180 	call	1f818 <printf>
    251c:	010000b4 	movhi	r4,2
    2520:	211a7504 	addi	r4,r4,27092
    2524:	001f8180 	call	1f818 <printf>
		ensm_state);

	val = ad9361_spi_read(spi, REG_ENSM_CONFIG_1);
    2528:	e13ffb17 	ldw	r4,-20(fp)
    252c:	01400504 	movi	r5,20
    2530:	00001500 	call	150 <ad9361_spi_read>
    2534:	e0bffa15 	stw	r2,-24(fp)

	/* Enable control through SPI writes, and take out from
	* Alert
	*/
	if (val & ENABLE_ENSM_PIN_CTRL) {
    2538:	e0bffa17 	ldw	r2,-24(fp)
    253c:	1080040c 	andi	r2,r2,16
    2540:	10000826 	beq	r2,zero,2564 <ad9361_ensm_force_state+0xf0>
		val &= ~ENABLE_ENSM_PIN_CTRL;
    2544:	e0fffa17 	ldw	r3,-24(fp)
    2548:	00bffbc4 	movi	r2,-17
    254c:	1884703a 	and	r2,r3,r2
    2550:	e0bffa15 	stw	r2,-24(fp)
		phy->ensm_pin_ctl_en = true;
    2554:	e0bffe17 	ldw	r2,-8(fp)
    2558:	00c00044 	movi	r3,1
    255c:	10c04505 	stb	r3,276(r2)
    2560:	00000206 	br	256c <ad9361_ensm_force_state+0xf8>
	}
	else {
		phy->ensm_pin_ctl_en = false;
    2564:	e0bffe17 	ldw	r2,-8(fp)
    2568:	10004505 	stb	zero,276(r2)
	}

	if (dev_ensm_state)
    256c:	e0bffc03 	ldbu	r2,-16(fp)
    2570:	10000426 	beq	r2,zero,2584 <ad9361_ensm_force_state+0x110>
		val &= ~(TO_ALERT);
    2574:	e0fffa17 	ldw	r3,-24(fp)
    2578:	00bfff84 	movi	r2,-2
    257c:	1884703a 	and	r2,r3,r2
    2580:	e0bffa15 	stw	r2,-24(fp)

	switch (ensm_state) {
    2584:	e0bfff03 	ldbu	r2,-4(fp)
    2588:	10c001a0 	cmpeqi	r3,r2,6
    258c:	1800091e 	bne	r3,zero,25b4 <ad9361_ensm_force_state+0x140>
    2590:	10c001c8 	cmpgei	r3,r2,7
    2594:	1800031e 	bne	r3,zero,25a4 <ad9361_ensm_force_state+0x130>
    2598:	10800160 	cmpeqi	r2,r2,5
    259c:	10000d1e 	bne	r2,zero,25d4 <ad9361_ensm_force_state+0x160>
    25a0:	00001406 	br	25f4 <ad9361_ensm_force_state+0x180>
    25a4:	10c00220 	cmpeqi	r3,r2,8
    25a8:	1800061e 	bne	r3,zero,25c4 <ad9361_ensm_force_state+0x150>
    25ac:	108002a0 	cmpeqi	r2,r2,10
    25b0:	10001026 	beq	r2,zero,25f4 <ad9361_ensm_force_state+0x180>

	case ENSM_STATE_TX:
	case ENSM_STATE_FDD:
		val |= FORCE_TX_ON;
    25b4:	e0bffa17 	ldw	r2,-24(fp)
    25b8:	10800814 	ori	r2,r2,32
    25bc:	e0bffa15 	stw	r2,-24(fp)
		break;
    25c0:	00001506 	br	2618 <ad9361_ensm_force_state+0x1a4>
	case ENSM_STATE_RX:
		val |= FORCE_RX_ON;
    25c4:	e0bffa17 	ldw	r2,-24(fp)
    25c8:	10801014 	ori	r2,r2,64
    25cc:	e0bffa15 	stw	r2,-24(fp)
		break;
    25d0:	00001106 	br	2618 <ad9361_ensm_force_state+0x1a4>
	case ENSM_STATE_ALERT:
		val &= ~(FORCE_TX_ON | FORCE_RX_ON);
    25d4:	e0fffa17 	ldw	r3,-24(fp)
    25d8:	00bfe7c4 	movi	r2,-97
    25dc:	1884703a 	and	r2,r3,r2
    25e0:	e0bffa15 	stw	r2,-24(fp)
		val |= TO_ALERT | FORCE_ALERT_STATE;
    25e4:	e0bffa17 	ldw	r2,-24(fp)
    25e8:	10800154 	ori	r2,r2,5
    25ec:	e0bffa15 	stw	r2,-24(fp)
		break;
    25f0:	00000906 	br	2618 <ad9361_ensm_force_state+0x1a4>
	default:
		dev_err(dev, "No handling for forcing %d ensm state",
    25f4:	e0bfff03 	ldbu	r2,-4(fp)
    25f8:	010000b4 	movhi	r4,2
    25fc:	211af604 	addi	r4,r4,27608
    2600:	100b883a 	mov	r5,r2
    2604:	001f8180 	call	1f818 <printf>
    2608:	010000b4 	movhi	r4,2
    260c:	211a7504 	addi	r4,r4,27092
    2610:	001f8180 	call	1f818 <printf>
			ensm_state);
		goto out;
    2614:	00001106 	br	265c <ad9361_ensm_force_state+0x1e8>
	}

	ad9361_spi_write(spi, REG_ENSM_CONFIG_1, TO_ALERT | FORCE_ALERT_STATE);
    2618:	e13ffb17 	ldw	r4,-20(fp)
    261c:	01400504 	movi	r5,20
    2620:	01800144 	movi	r6,5
    2624:	00002600 	call	260 <ad9361_spi_write>

	rc = ad9361_spi_write(spi, REG_ENSM_CONFIG_1, val);
    2628:	e13ffb17 	ldw	r4,-20(fp)
    262c:	01400504 	movi	r5,20
    2630:	e1bffa17 	ldw	r6,-24(fp)
    2634:	00002600 	call	260 <ad9361_spi_write>
    2638:	e0bffd15 	stw	r2,-12(fp)
	if (rc)
    263c:	e0bffd17 	ldw	r2,-12(fp)
    2640:	10000626 	beq	r2,zero,265c <ad9361_ensm_force_state+0x1e8>
		dev_err(dev, "Failed to restore state");
    2644:	010000b4 	movhi	r4,2
    2648:	211b0004 	addi	r4,r4,27648
    264c:	001f8180 	call	1f818 <printf>
    2650:	010000b4 	movhi	r4,2
    2654:	211a7504 	addi	r4,r4,27092
    2658:	001f8180 	call	1f818 <printf>

out:
	return;
    265c:	0001883a 	nop

}
    2660:	e037883a 	mov	sp,fp
    2664:	dfc00117 	ldw	ra,4(sp)
    2668:	df000017 	ldw	fp,0(sp)
    266c:	dec00204 	addi	sp,sp,8
    2670:	f800283a 	ret

00002674 <ad9361_ensm_restore_prev_state>:
 * Restore the previous Enable State Machine (ENSM) state.
 * @param phy The AD9361 state structure.
 * @return None.
 */
void ad9361_ensm_restore_prev_state(struct ad9361_rf_phy *phy)
{
    2674:	defffa04 	addi	sp,sp,-24
    2678:	de00012e 	bgeu	sp,et,2680 <ad9361_ensm_restore_prev_state+0xc>
    267c:	003b68fa 	trap	3
    2680:	dfc00515 	stw	ra,20(sp)
    2684:	df000415 	stw	fp,16(sp)
    2688:	df000404 	addi	fp,sp,16
    268c:	e13fff15 	stw	r4,-4(fp)
	struct spi_device *spi = phy->spi;
    2690:	e0bfff17 	ldw	r2,-4(fp)
    2694:	10800117 	ldw	r2,4(r2)
    2698:	e0bffd15 	stw	r2,-12(fp)
	int32_t rc;
	uint32_t val;

	val = ad9361_spi_read(spi, REG_ENSM_CONFIG_1);
    269c:	e13ffd17 	ldw	r4,-12(fp)
    26a0:	01400504 	movi	r5,20
    26a4:	00001500 	call	150 <ad9361_spi_read>
    26a8:	e0bffc15 	stw	r2,-16(fp)

	/* We are restoring state only, so clear State bits first
	* which might have set while forcing a particular state
	*/
	val &= ~(FORCE_TX_ON | FORCE_RX_ON |
    26ac:	e0fffc17 	ldw	r3,-16(fp)
    26b0:	00bfe684 	movi	r2,-102
    26b4:	1884703a 	and	r2,r3,r2
    26b8:	e0bffc15 	stw	r2,-16(fp)
		TO_ALERT | FORCE_ALERT_STATE);

	switch (phy->prev_ensm_state) {
    26bc:	e0bfff17 	ldw	r2,-4(fp)
    26c0:	10803103 	ldbu	r2,196(r2)
    26c4:	10803fcc 	andi	r2,r2,255
    26c8:	10c00220 	cmpeqi	r3,r2,8
    26cc:	1800101e 	bne	r3,zero,2710 <ad9361_ensm_restore_prev_state+0x9c>
    26d0:	10c00248 	cmpgei	r3,r2,9
    26d4:	1800051e 	bne	r3,zero,26ec <ad9361_ensm_restore_prev_state+0x78>
    26d8:	10c00160 	cmpeqi	r3,r2,5
    26dc:	1800101e 	bne	r3,zero,2720 <ad9361_ensm_restore_prev_state+0xac>
    26e0:	108001a0 	cmpeqi	r2,r2,6
    26e4:	1000061e 	bne	r2,zero,2700 <ad9361_ensm_restore_prev_state+0x8c>
    26e8:	00001806 	br	274c <ad9361_ensm_restore_prev_state+0xd8>
    26ec:	10c002a0 	cmpeqi	r3,r2,10
    26f0:	1800031e 	bne	r3,zero,2700 <ad9361_ensm_restore_prev_state+0x8c>
    26f4:	10803fe0 	cmpeqi	r2,r2,255
    26f8:	10000d1e 	bne	r2,zero,2730 <ad9361_ensm_restore_prev_state+0xbc>
    26fc:	00001306 	br	274c <ad9361_ensm_restore_prev_state+0xd8>

	case ENSM_STATE_TX:
	case ENSM_STATE_FDD:
		val |= FORCE_TX_ON;
    2700:	e0bffc17 	ldw	r2,-16(fp)
    2704:	10800814 	ori	r2,r2,32
    2708:	e0bffc15 	stw	r2,-16(fp)
		break;
    270c:	00001a06 	br	2778 <ad9361_ensm_restore_prev_state+0x104>
	case ENSM_STATE_RX:
		val |= FORCE_RX_ON;
    2710:	e0bffc17 	ldw	r2,-16(fp)
    2714:	10801014 	ori	r2,r2,64
    2718:	e0bffc15 	stw	r2,-16(fp)
		break;
    271c:	00001606 	br	2778 <ad9361_ensm_restore_prev_state+0x104>
	case ENSM_STATE_ALERT:
		val |= TO_ALERT;
    2720:	e0bffc17 	ldw	r2,-16(fp)
    2724:	10800054 	ori	r2,r2,1
    2728:	e0bffc15 	stw	r2,-16(fp)
		break;
    272c:	00001206 	br	2778 <ad9361_ensm_restore_prev_state+0x104>
	case ENSM_STATE_INVALID:
		dev_dbg(dev, "No need to restore, ENSM state wasn't saved");
    2730:	010000b4 	movhi	r4,2
    2734:	211b0604 	addi	r4,r4,27672
    2738:	001f8180 	call	1f818 <printf>
    273c:	010000b4 	movhi	r4,2
    2740:	211a7504 	addi	r4,r4,27092
    2744:	001f8180 	call	1f818 <printf>
		goto out;
    2748:	00003106 	br	2810 <ad9361_ensm_restore_prev_state+0x19c>
	default:
		dev_dbg(dev, "Could not restore to %d ENSM state",
    274c:	e0bfff17 	ldw	r2,-4(fp)
    2750:	10803103 	ldbu	r2,196(r2)
    2754:	10803fcc 	andi	r2,r2,255
    2758:	010000b4 	movhi	r4,2
    275c:	211b1104 	addi	r4,r4,27716
    2760:	100b883a 	mov	r5,r2
    2764:	001f8180 	call	1f818 <printf>
    2768:	010000b4 	movhi	r4,2
    276c:	211a7504 	addi	r4,r4,27092
    2770:	001f8180 	call	1f818 <printf>
			phy->prev_ensm_state);
		goto out;
    2774:	00002606 	br	2810 <ad9361_ensm_restore_prev_state+0x19c>
	}

	ad9361_spi_write(spi, REG_ENSM_CONFIG_1, TO_ALERT | FORCE_ALERT_STATE);
    2778:	e13ffd17 	ldw	r4,-12(fp)
    277c:	01400504 	movi	r5,20
    2780:	01800144 	movi	r6,5
    2784:	00002600 	call	260 <ad9361_spi_write>

	rc = ad9361_spi_write(spi, REG_ENSM_CONFIG_1, val);
    2788:	e13ffd17 	ldw	r4,-12(fp)
    278c:	01400504 	movi	r5,20
    2790:	e1bffc17 	ldw	r6,-16(fp)
    2794:	00002600 	call	260 <ad9361_spi_write>
    2798:	e0bffe15 	stw	r2,-8(fp)
	if (rc) {
    279c:	e0bffe17 	ldw	r2,-8(fp)
    27a0:	10000726 	beq	r2,zero,27c0 <ad9361_ensm_restore_prev_state+0x14c>
		dev_err(dev, "Failed to write ENSM_CONFIG_1");
    27a4:	010000b4 	movhi	r4,2
    27a8:	211b1a04 	addi	r4,r4,27752
    27ac:	001f8180 	call	1f818 <printf>
    27b0:	010000b4 	movhi	r4,2
    27b4:	211a7504 	addi	r4,r4,27092
    27b8:	001f8180 	call	1f818 <printf>
		goto out;
    27bc:	00001406 	br	2810 <ad9361_ensm_restore_prev_state+0x19c>
	}

	if (phy->ensm_pin_ctl_en) {
    27c0:	e0bfff17 	ldw	r2,-4(fp)
    27c4:	10804503 	ldbu	r2,276(r2)
    27c8:	10803fcc 	andi	r2,r2,255
    27cc:	10001026 	beq	r2,zero,2810 <ad9361_ensm_restore_prev_state+0x19c>
		val |= ENABLE_ENSM_PIN_CTRL;
    27d0:	e0bffc17 	ldw	r2,-16(fp)
    27d4:	10800414 	ori	r2,r2,16
    27d8:	e0bffc15 	stw	r2,-16(fp)
		rc = ad9361_spi_write(spi, REG_ENSM_CONFIG_1, val);
    27dc:	e13ffd17 	ldw	r4,-12(fp)
    27e0:	01400504 	movi	r5,20
    27e4:	e1bffc17 	ldw	r6,-16(fp)
    27e8:	00002600 	call	260 <ad9361_spi_write>
    27ec:	e0bffe15 	stw	r2,-8(fp)
		if (rc)
    27f0:	e0bffe17 	ldw	r2,-8(fp)
    27f4:	10000626 	beq	r2,zero,2810 <ad9361_ensm_restore_prev_state+0x19c>
			dev_err(dev, "Failed to write ENSM_CONFIG_1");
    27f8:	010000b4 	movhi	r4,2
    27fc:	211b1a04 	addi	r4,r4,27752
    2800:	001f8180 	call	1f818 <printf>
    2804:	010000b4 	movhi	r4,2
    2808:	211a7504 	addi	r4,r4,27092
    280c:	001f8180 	call	1f818 <printf>
	}

out:
	return;
    2810:	0001883a 	nop
}
    2814:	e037883a 	mov	sp,fp
    2818:	dfc00117 	ldw	ra,4(sp)
    281c:	df000017 	ldw	fp,0(sp)
    2820:	dec00204 	addi	sp,sp,8
    2824:	f800283a 	ret

00002828 <set_split_table_gain>:
 * @param rx_gain The rf_rx_gain struct containing the RF gain.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t set_split_table_gain(struct ad9361_rf_phy *phy, uint32_t idx_reg,
struct rf_rx_gain *rx_gain)
{
    2828:	defff704 	addi	sp,sp,-36
    282c:	de00012e 	bgeu	sp,et,2834 <set_split_table_gain+0xc>
    2830:	003b68fa 	trap	3
    2834:	dfc00815 	stw	ra,32(sp)
    2838:	df000715 	stw	fp,28(sp)
    283c:	dc000615 	stw	r16,24(sp)
    2840:	df000704 	addi	fp,sp,28
    2844:	e13ffc15 	stw	r4,-16(fp)
    2848:	e17ffd15 	stw	r5,-12(fp)
    284c:	e1bffe15 	stw	r6,-8(fp)
	struct spi_device *spi = phy->spi;
    2850:	e0bffc17 	ldw	r2,-16(fp)
    2854:	10800117 	ldw	r2,4(r2)
    2858:	e0bffb15 	stw	r2,-20(fp)
	int32_t rc = 0;
    285c:	e03ffa15 	stw	zero,-24(fp)

	if ((rx_gain->fgt_lmt_index > MAX_LMT_INDEX) ||
    2860:	e0bffe17 	ldw	r2,-8(fp)
    2864:	10800217 	ldw	r2,8(r2)
    2868:	10800a68 	cmpgeui	r2,r2,41
    286c:	1000081e 	bne	r2,zero,2890 <set_split_table_gain+0x68>
		(rx_gain->lpf_gain > MAX_LPF_GAIN) ||
    2870:	e0bffe17 	ldw	r2,-8(fp)
    2874:	10800417 	ldw	r2,16(r2)
struct rf_rx_gain *rx_gain)
{
	struct spi_device *spi = phy->spi;
	int32_t rc = 0;

	if ((rx_gain->fgt_lmt_index > MAX_LMT_INDEX) ||
    2878:	10800668 	cmpgeui	r2,r2,25
    287c:	1000041e 	bne	r2,zero,2890 <set_split_table_gain+0x68>
		(rx_gain->lpf_gain > MAX_LPF_GAIN) ||
		(rx_gain->digital_gain > MAX_DIG_GAIN)) {
    2880:	e0bffe17 	ldw	r2,-8(fp)
    2884:	10800517 	ldw	r2,20(r2)
{
	struct spi_device *spi = phy->spi;
	int32_t rc = 0;

	if ((rx_gain->fgt_lmt_index > MAX_LMT_INDEX) ||
		(rx_gain->lpf_gain > MAX_LPF_GAIN) ||
    2888:	10800830 	cmpltui	r2,r2,32
    288c:	1000181e 	bne	r2,zero,28f0 <set_split_table_gain+0xc8>
		(rx_gain->digital_gain > MAX_DIG_GAIN)) {
		dev_err(dev, "LMT_INDEX missing or greater than max value %d",
    2890:	010000b4 	movhi	r4,2
    2894:	211b2204 	addi	r4,r4,27784
    2898:	01400a04 	movi	r5,40
    289c:	001f8180 	call	1f818 <printf>
    28a0:	010000b4 	movhi	r4,2
    28a4:	211a7504 	addi	r4,r4,27092
    28a8:	001f8180 	call	1f818 <printf>
			MAX_LMT_INDEX);
		dev_err(dev, "LPF_GAIN missing or greater than max value %d",
    28ac:	010000b4 	movhi	r4,2
    28b0:	211b2e04 	addi	r4,r4,27832
    28b4:	01400604 	movi	r5,24
    28b8:	001f8180 	call	1f818 <printf>
    28bc:	010000b4 	movhi	r4,2
    28c0:	211a7504 	addi	r4,r4,27092
    28c4:	001f8180 	call	1f818 <printf>
			MAX_LPF_GAIN);
		dev_err(dev, "DIGITAL_GAIN cannot be more than %d",
    28c8:	010000b4 	movhi	r4,2
    28cc:	211b3a04 	addi	r4,r4,27880
    28d0:	014007c4 	movi	r5,31
    28d4:	001f8180 	call	1f818 <printf>
    28d8:	010000b4 	movhi	r4,2
    28dc:	211a7504 	addi	r4,r4,27092
    28e0:	001f8180 	call	1f818 <printf>
			MAX_DIG_GAIN);
		rc = -EINVAL;
    28e4:	00bffa84 	movi	r2,-22
    28e8:	e0bffa15 	stw	r2,-24(fp)
		goto out;
    28ec:	00004f06 	br	2a2c <set_split_table_gain+0x204>
	}
	if (rx_gain->gain_db > 0)
    28f0:	e0bffe17 	ldw	r2,-8(fp)
    28f4:	10800117 	ldw	r2,4(r2)
    28f8:	0080060e 	bge	zero,r2,2914 <set_split_table_gain+0xec>
		dev_dbg(dev, "Ignoring rx_gain value in split table mode.");
    28fc:	010000b4 	movhi	r4,2
    2900:	211b4304 	addi	r4,r4,27916
    2904:	001f8180 	call	1f818 <printf>
    2908:	010000b4 	movhi	r4,2
    290c:	211a7504 	addi	r4,r4,27092
    2910:	001f8180 	call	1f818 <printf>
	if (rx_gain->fgt_lmt_index == 0 && rx_gain->lpf_gain == 0 &&
    2914:	e0bffe17 	ldw	r2,-8(fp)
    2918:	10800217 	ldw	r2,8(r2)
    291c:	10000f1e 	bne	r2,zero,295c <set_split_table_gain+0x134>
    2920:	e0bffe17 	ldw	r2,-8(fp)
    2924:	10800417 	ldw	r2,16(r2)
    2928:	10000c1e 	bne	r2,zero,295c <set_split_table_gain+0x134>
		rx_gain->digital_gain == 0) {
    292c:	e0bffe17 	ldw	r2,-8(fp)
    2930:	10800517 	ldw	r2,20(r2)
		rc = -EINVAL;
		goto out;
	}
	if (rx_gain->gain_db > 0)
		dev_dbg(dev, "Ignoring rx_gain value in split table mode.");
	if (rx_gain->fgt_lmt_index == 0 && rx_gain->lpf_gain == 0 &&
    2934:	1000091e 	bne	r2,zero,295c <set_split_table_gain+0x134>
		rx_gain->digital_gain == 0) {
		dev_err(dev,
    2938:	010000b4 	movhi	r4,2
    293c:	211b4e04 	addi	r4,r4,27960
    2940:	001f8180 	call	1f818 <printf>
    2944:	010000b4 	movhi	r4,2
    2948:	211a7504 	addi	r4,r4,27092
    294c:	001f8180 	call	1f818 <printf>
			"In split table mode, All LMT/LPF/digital gains cannot be 0");
		rc = -EINVAL;
    2950:	00bffa84 	movi	r2,-22
    2954:	e0bffa15 	stw	r2,-24(fp)
		goto out;
    2958:	00003406 	br	2a2c <set_split_table_gain+0x204>
	}

	ad9361_spi_writef(spi, idx_reg, RX_FULL_TBL_IDX_MASK, rx_gain->fgt_lmt_index);
    295c:	01001fc4 	movi	r4,127
    2960:	001c8300 	call	1c830 <find_first_bit>
    2964:	1007883a 	mov	r3,r2
    2968:	e0bffe17 	ldw	r2,-8(fp)
    296c:	10800217 	ldw	r2,8(r2)
    2970:	d8800015 	stw	r2,0(sp)
    2974:	e13ffb17 	ldw	r4,-20(fp)
    2978:	e17ffd17 	ldw	r5,-12(fp)
    297c:	01801fc4 	movi	r6,127
    2980:	180f883a 	mov	r7,r3
    2984:	000031c0 	call	31c <__ad9361_spi_writef>
	ad9361_spi_writef(spi, idx_reg + 1, RX_LPF_IDX_MASK, rx_gain->lpf_gain);
    2988:	e0bffd17 	ldw	r2,-12(fp)
    298c:	14000044 	addi	r16,r2,1
    2990:	010007c4 	movi	r4,31
    2994:	001c8300 	call	1c830 <find_first_bit>
    2998:	1007883a 	mov	r3,r2
    299c:	e0bffe17 	ldw	r2,-8(fp)
    29a0:	10800417 	ldw	r2,16(r2)
    29a4:	d8800015 	stw	r2,0(sp)
    29a8:	e13ffb17 	ldw	r4,-20(fp)
    29ac:	800b883a 	mov	r5,r16
    29b0:	018007c4 	movi	r6,31
    29b4:	180f883a 	mov	r7,r3
    29b8:	000031c0 	call	31c <__ad9361_spi_writef>

	if (phy->pdata->gain_ctrl.dig_gain_en) {
    29bc:	e0bffc17 	ldw	r2,-16(fp)
    29c0:	10803017 	ldw	r2,192(r2)
    29c4:	108029c3 	ldbu	r2,167(r2)
    29c8:	10803fcc 	andi	r2,r2,255
    29cc:	10000e26 	beq	r2,zero,2a08 <set_split_table_gain+0x1e0>
		ad9361_spi_writef(spi, idx_reg + 2, RX_DIGITAL_IDX_MASK, rx_gain->digital_gain);
    29d0:	e0bffd17 	ldw	r2,-12(fp)
    29d4:	14000084 	addi	r16,r2,2
    29d8:	010007c4 	movi	r4,31
    29dc:	001c8300 	call	1c830 <find_first_bit>
    29e0:	1007883a 	mov	r3,r2
    29e4:	e0bffe17 	ldw	r2,-8(fp)
    29e8:	10800517 	ldw	r2,20(r2)
    29ec:	d8800015 	stw	r2,0(sp)
    29f0:	e13ffb17 	ldw	r4,-20(fp)
    29f4:	800b883a 	mov	r5,r16
    29f8:	018007c4 	movi	r6,31
    29fc:	180f883a 	mov	r7,r3
    2a00:	000031c0 	call	31c <__ad9361_spi_writef>
    2a04:	00000906 	br	2a2c <set_split_table_gain+0x204>

	}
	else if (rx_gain->digital_gain > 0) {
    2a08:	e0bffe17 	ldw	r2,-8(fp)
    2a0c:	10800517 	ldw	r2,20(r2)
    2a10:	10000626 	beq	r2,zero,2a2c <set_split_table_gain+0x204>
		dev_err(dev, "Digital gain is disabled and cannot be set");
    2a14:	010000b4 	movhi	r4,2
    2a18:	211b5d04 	addi	r4,r4,28020
    2a1c:	001f8180 	call	1f818 <printf>
    2a20:	010000b4 	movhi	r4,2
    2a24:	211a7504 	addi	r4,r4,27092
    2a28:	001f8180 	call	1f818 <printf>
	}
out:
	return rc;
    2a2c:	e0bffa17 	ldw	r2,-24(fp)
}
    2a30:	e6ffff04 	addi	sp,fp,-4
    2a34:	dfc00217 	ldw	ra,8(sp)
    2a38:	df000117 	ldw	fp,4(sp)
    2a3c:	dc000017 	ldw	r16,0(sp)
    2a40:	dec00304 	addi	sp,sp,12
    2a44:	f800283a 	ret

00002a48 <set_full_table_gain>:
 * @param rx_gain The rf_rx_gain struct containing the RF gain.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t set_full_table_gain(struct ad9361_rf_phy *phy, uint32_t idx_reg,
struct rf_rx_gain *rx_gain)
{
    2a48:	defff504 	addi	sp,sp,-44
    2a4c:	de00012e 	bgeu	sp,et,2a54 <set_full_table_gain+0xc>
    2a50:	003b68fa 	trap	3
    2a54:	dfc00a15 	stw	ra,40(sp)
    2a58:	df000915 	stw	fp,36(sp)
    2a5c:	df000904 	addi	fp,sp,36
    2a60:	e13ffd15 	stw	r4,-12(fp)
    2a64:	e17ffe15 	stw	r5,-8(fp)
    2a68:	e1bfff15 	stw	r6,-4(fp)
	struct spi_device *spi = phy->spi;
    2a6c:	e0bffd17 	ldw	r2,-12(fp)
    2a70:	10800117 	ldw	r2,4(r2)
    2a74:	e0bff915 	stw	r2,-28(fp)
	enum rx_gain_table_name tbl;
	struct rx_gain_info *gain_info;
	uint32_t val;
	int32_t rc = 0;
    2a78:	e03ff815 	stw	zero,-32(fp)

	if (rx_gain->fgt_lmt_index != (uint32_t)~0 || (int64_t)rx_gain->lpf_gain != (uint32_t)~0 ||
    2a7c:	e0bfff17 	ldw	r2,-4(fp)
    2a80:	10800217 	ldw	r2,8(r2)
    2a84:	10bfffd8 	cmpnei	r2,r2,-1
    2a88:	1000071e 	bne	r2,zero,2aa8 <set_full_table_gain+0x60>
    2a8c:	e0bfff17 	ldw	r2,-4(fp)
    2a90:	10800417 	ldw	r2,16(r2)
    2a94:	10bfffd8 	cmpnei	r2,r2,-1
    2a98:	1000031e 	bne	r2,zero,2aa8 <set_full_table_gain+0x60>
		rx_gain->digital_gain > 0)
    2a9c:	e0bfff17 	ldw	r2,-4(fp)
    2aa0:	10800517 	ldw	r2,20(r2)
	enum rx_gain_table_name tbl;
	struct rx_gain_info *gain_info;
	uint32_t val;
	int32_t rc = 0;

	if (rx_gain->fgt_lmt_index != (uint32_t)~0 || (int64_t)rx_gain->lpf_gain != (uint32_t)~0 ||
    2aa4:	10000626 	beq	r2,zero,2ac0 <set_full_table_gain+0x78>
		rx_gain->digital_gain > 0)
		dev_dbg(dev,
    2aa8:	010000b4 	movhi	r4,2
    2aac:	211b6804 	addi	r4,r4,28064
    2ab0:	001f8180 	call	1f818 <printf>
    2ab4:	010000b4 	movhi	r4,2
    2ab8:	211a7504 	addi	r4,r4,27092
    2abc:	001f8180 	call	1f818 <printf>
		"Ignoring lmt/lpf/digital gains in Single Table mode");

	tbl = ad9361_gt_tableindex(
    2ac0:	e0bffd17 	ldw	r2,-12(fp)
    2ac4:	10802917 	ldw	r2,164(r2)
    2ac8:	e13ffd17 	ldw	r4,-12(fp)
    2acc:	100b883a 	mov	r5,r2
    2ad0:	001bc900 	call	1bc90 <clk_get_rate>
    2ad4:	1009883a 	mov	r4,r2
    2ad8:	00010f00 	call	10f0 <ad9361_from_clk>
    2adc:	100b883a 	mov	r5,r2
    2ae0:	180d883a 	mov	r6,r3
    2ae4:	2809883a 	mov	r4,r5
    2ae8:	300b883a 	mov	r5,r6
    2aec:	00010280 	call	1028 <ad9361_gt_tableindex>
    2af0:	e0bffa15 	stw	r2,-24(fp)
		ad9361_from_clk(clk_get_rate(phy, phy->ref_clk_scale[RX_RFPLL])));

	gain_info = &phy->rx_gain[tbl];
    2af4:	e0bffa17 	ldw	r2,-24(fp)
    2af8:	10800624 	muli	r2,r2,24
    2afc:	10803204 	addi	r2,r2,200
    2b00:	e0fffd17 	ldw	r3,-12(fp)
    2b04:	1885883a 	add	r2,r3,r2
    2b08:	e0bffb15 	stw	r2,-20(fp)
	if ((rx_gain->gain_db < gain_info->starting_gain_db) ||
    2b0c:	e0bfff17 	ldw	r2,-4(fp)
    2b10:	10c00117 	ldw	r3,4(r2)
    2b14:	e0bffb17 	ldw	r2,-20(fp)
    2b18:	10800117 	ldw	r2,4(r2)
    2b1c:	18800516 	blt	r3,r2,2b34 <set_full_table_gain+0xec>
		(rx_gain->gain_db > gain_info->max_gain_db)) {
    2b20:	e0bfff17 	ldw	r2,-4(fp)
    2b24:	10800117 	ldw	r2,4(r2)
    2b28:	e0fffb17 	ldw	r3,-20(fp)
    2b2c:	18c00217 	ldw	r3,8(r3)

	tbl = ad9361_gt_tableindex(
		ad9361_from_clk(clk_get_rate(phy, phy->ref_clk_scale[RX_RFPLL])));

	gain_info = &phy->rx_gain[tbl];
	if ((rx_gain->gain_db < gain_info->starting_gain_db) ||
    2b30:	1880110e 	bge	r3,r2,2b78 <set_full_table_gain+0x130>
		(rx_gain->gain_db > gain_info->max_gain_db)) {

		dev_err(dev, "Invalid gain %"PRId32", supported range [%"PRId32" - %"PRId32"]",
    2b34:	e0bfff17 	ldw	r2,-4(fp)
    2b38:	11400117 	ldw	r5,4(r2)
    2b3c:	e0bffb17 	ldw	r2,-20(fp)
    2b40:	10c00117 	ldw	r3,4(r2)
    2b44:	e0bffb17 	ldw	r2,-20(fp)
    2b48:	10800217 	ldw	r2,8(r2)
    2b4c:	010000b4 	movhi	r4,2
    2b50:	211b7504 	addi	r4,r4,28116
    2b54:	180d883a 	mov	r6,r3
    2b58:	100f883a 	mov	r7,r2
    2b5c:	001f8180 	call	1f818 <printf>
    2b60:	010000b4 	movhi	r4,2
    2b64:	211a7504 	addi	r4,r4,27092
    2b68:	001f8180 	call	1f818 <printf>
			rx_gain->gain_db, gain_info->starting_gain_db,
			gain_info->max_gain_db);
		rc = -EINVAL;
    2b6c:	00bffa84 	movi	r2,-22
    2b70:	e0bff815 	stw	r2,-32(fp)
		goto out;
    2b74:	00001906 	br	2bdc <set_full_table_gain+0x194>

	}

	val = ((rx_gain->gain_db - gain_info->starting_gain_db) /
    2b78:	e0bfff17 	ldw	r2,-4(fp)
    2b7c:	10c00117 	ldw	r3,4(r2)
    2b80:	e0bffb17 	ldw	r2,-20(fp)
    2b84:	10800117 	ldw	r2,4(r2)
    2b88:	1887c83a 	sub	r3,r3,r2
		gain_info->gain_step_db) + gain_info->idx_step_offset;
    2b8c:	e0bffb17 	ldw	r2,-20(fp)
    2b90:	10800317 	ldw	r2,12(r2)
		rc = -EINVAL;
		goto out;

	}

	val = ((rx_gain->gain_db - gain_info->starting_gain_db) /
    2b94:	1809883a 	mov	r4,r3
    2b98:	100b883a 	mov	r5,r2
    2b9c:	001d6e40 	call	1d6e4 <__divsi3>
    2ba0:	1007883a 	mov	r3,r2
		gain_info->gain_step_db) + gain_info->idx_step_offset;
    2ba4:	e0bffb17 	ldw	r2,-20(fp)
    2ba8:	10800517 	ldw	r2,20(r2)
    2bac:	1885883a 	add	r2,r3,r2
		rc = -EINVAL;
		goto out;

	}

	val = ((rx_gain->gain_db - gain_info->starting_gain_db) /
    2bb0:	e0bffc15 	stw	r2,-16(fp)
		gain_info->gain_step_db) + gain_info->idx_step_offset;
	ad9361_spi_writef(spi, idx_reg, RX_FULL_TBL_IDX_MASK, val);
    2bb4:	01001fc4 	movi	r4,127
    2bb8:	001c8300 	call	1c830 <find_first_bit>
    2bbc:	1007883a 	mov	r3,r2
    2bc0:	e0bffc17 	ldw	r2,-16(fp)
    2bc4:	d8800015 	stw	r2,0(sp)
    2bc8:	e13ff917 	ldw	r4,-28(fp)
    2bcc:	e17ffe17 	ldw	r5,-8(fp)
    2bd0:	01801fc4 	movi	r6,127
    2bd4:	180f883a 	mov	r7,r3
    2bd8:	000031c0 	call	31c <__ad9361_spi_writef>

out:
	return rc;
    2bdc:	e0bff817 	ldw	r2,-32(fp)
}
    2be0:	e037883a 	mov	sp,fp
    2be4:	dfc00117 	ldw	ra,4(sp)
    2be8:	df000017 	ldw	fp,0(sp)
    2bec:	dec00204 	addi	sp,sp,8
    2bf0:	f800283a 	ret

00002bf4 <ad9361_set_rx_gain>:
 * @param rx_gain The rf_rx_gain struct containing the RF gain.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_set_rx_gain(struct ad9361_rf_phy *phy,
	uint32_t rx_id, struct rf_rx_gain *rx_gain)
{
    2bf4:	defff604 	addi	sp,sp,-40
    2bf8:	de00012e 	bgeu	sp,et,2c00 <ad9361_set_rx_gain+0xc>
    2bfc:	003b68fa 	trap	3
    2c00:	dfc00915 	stw	ra,36(sp)
    2c04:	df000815 	stw	fp,32(sp)
    2c08:	df000804 	addi	fp,sp,32
    2c0c:	e13ffd15 	stw	r4,-12(fp)
    2c10:	e17ffe15 	stw	r5,-8(fp)
    2c14:	e1bfff15 	stw	r6,-4(fp)
	struct spi_device *spi = phy->spi;
    2c18:	e0bffd17 	ldw	r2,-12(fp)
    2c1c:	10800117 	ldw	r2,4(r2)
    2c20:	e0bffb15 	stw	r2,-20(fp)
	uint32_t val, idx_reg;
	uint8_t gain_ctl_shift;
	int32_t rc = 0;
    2c24:	e03ffa15 	stw	zero,-24(fp)

	if (rx_id == 1) {
    2c28:	e0bffe17 	ldw	r2,-8(fp)
    2c2c:	10800058 	cmpnei	r2,r2,1
    2c30:	1000041e 	bne	r2,zero,2c44 <ad9361_set_rx_gain+0x50>
		gain_ctl_shift = RX1_GAIN_CTRL_SHIFT;
    2c34:	e03ff905 	stb	zero,-28(fp)
		idx_reg = REG_RX1_MANUAL_LMT_FULL_GAIN;
    2c38:	00804244 	movi	r2,265
    2c3c:	e0bff815 	stw	r2,-32(fp)
    2c40:	00001206 	br	2c8c <ad9361_set_rx_gain+0x98>

	}
	else if (rx_id == 2) {
    2c44:	e0bffe17 	ldw	r2,-8(fp)
    2c48:	10800098 	cmpnei	r2,r2,2
    2c4c:	1000051e 	bne	r2,zero,2c64 <ad9361_set_rx_gain+0x70>
		gain_ctl_shift = RX2_GAIN_CTRL_SHIFT;
    2c50:	00800084 	movi	r2,2
    2c54:	e0bff905 	stb	r2,-28(fp)
		idx_reg = REG_RX2_MANUAL_LMT_FULL_GAIN;
    2c58:	00804304 	movi	r2,268
    2c5c:	e0bff815 	stw	r2,-32(fp)
    2c60:	00000a06 	br	2c8c <ad9361_set_rx_gain+0x98>
	}
	else {
		dev_err(dev, "Unknown Rx path %"PRIu32, rx_id);
    2c64:	010000b4 	movhi	r4,2
    2c68:	211acb04 	addi	r4,r4,27436
    2c6c:	e17ffe17 	ldw	r5,-8(fp)
    2c70:	001f8180 	call	1f818 <printf>
    2c74:	010000b4 	movhi	r4,2
    2c78:	211a7504 	addi	r4,r4,27092
    2c7c:	001f8180 	call	1f818 <printf>
		rc = -EINVAL;
    2c80:	00bffa84 	movi	r2,-22
    2c84:	e0bffa15 	stw	r2,-24(fp)
		goto out;
    2c88:	00002f06 	br	2d48 <ad9361_set_rx_gain+0x154>

	}

	val = ad9361_spi_read(spi, REG_AGC_CONFIG_1);
    2c8c:	e13ffb17 	ldw	r4,-20(fp)
    2c90:	01403e84 	movi	r5,250
    2c94:	00001500 	call	150 <ad9361_spi_read>
    2c98:	e0bffc15 	stw	r2,-16(fp)
	val = (val >> gain_ctl_shift) & RX_GAIN_CTL_MASK;
    2c9c:	e0bff903 	ldbu	r2,-28(fp)
    2ca0:	e0fffc17 	ldw	r3,-16(fp)
    2ca4:	1884d83a 	srl	r2,r3,r2
    2ca8:	108000cc 	andi	r2,r2,3
    2cac:	e0bffc15 	stw	r2,-16(fp)

	if (val != RX_GAIN_CTL_MGC) {
    2cb0:	e0bffc17 	ldw	r2,-16(fp)
    2cb4:	10000726 	beq	r2,zero,2cd4 <ad9361_set_rx_gain+0xe0>
		dev_dbg(dev, "Rx gain can be set in MGC mode only");
    2cb8:	010000b4 	movhi	r4,2
    2cbc:	211b8104 	addi	r4,r4,28164
    2cc0:	001f8180 	call	1f818 <printf>
    2cc4:	010000b4 	movhi	r4,2
    2cc8:	211a7504 	addi	r4,r4,27092
    2ccc:	001f8180 	call	1f818 <printf>
		goto out;
    2cd0:	00001d06 	br	2d48 <ad9361_set_rx_gain+0x154>
	}

	if (has_split_gt && phy->pdata->split_gt)
    2cd4:	00800044 	movi	r2,1
    2cd8:	10803fcc 	andi	r2,r2,255
    2cdc:	10000b26 	beq	r2,zero,2d0c <ad9361_set_rx_gain+0x118>
    2ce0:	e0bffd17 	ldw	r2,-12(fp)
    2ce4:	10803017 	ldw	r2,192(r2)
    2ce8:	108000c3 	ldbu	r2,3(r2)
    2cec:	10803fcc 	andi	r2,r2,255
    2cf0:	10000626 	beq	r2,zero,2d0c <ad9361_set_rx_gain+0x118>
		rc = set_split_table_gain(phy, idx_reg, rx_gain);
    2cf4:	e13ffd17 	ldw	r4,-12(fp)
    2cf8:	e17ff817 	ldw	r5,-32(fp)
    2cfc:	e1bfff17 	ldw	r6,-4(fp)
    2d00:	00028280 	call	2828 <set_split_table_gain>
    2d04:	e0bffa15 	stw	r2,-24(fp)
    2d08:	00000506 	br	2d20 <ad9361_set_rx_gain+0x12c>
	else
		rc = set_full_table_gain(phy, idx_reg, rx_gain);
    2d0c:	e13ffd17 	ldw	r4,-12(fp)
    2d10:	e17ff817 	ldw	r5,-32(fp)
    2d14:	e1bfff17 	ldw	r6,-4(fp)
    2d18:	0002a480 	call	2a48 <set_full_table_gain>
    2d1c:	e0bffa15 	stw	r2,-24(fp)

	if (rc) {
    2d20:	e0bffa17 	ldw	r2,-24(fp)
    2d24:	10000826 	beq	r2,zero,2d48 <ad9361_set_rx_gain+0x154>
		dev_err(dev, "Unable to write gain tbl idx reg: %"PRIu32, idx_reg);
    2d28:	010000b4 	movhi	r4,2
    2d2c:	211b8a04 	addi	r4,r4,28200
    2d30:	e17ff817 	ldw	r5,-32(fp)
    2d34:	001f8180 	call	1f818 <printf>
    2d38:	010000b4 	movhi	r4,2
    2d3c:	211a7504 	addi	r4,r4,27092
    2d40:	001f8180 	call	1f818 <printf>
		goto out;
    2d44:	0001883a 	nop
	}

out:
	return rc;
    2d48:	e0bffa17 	ldw	r2,-24(fp)

}
    2d4c:	e037883a 	mov	sp,fp
    2d50:	dfc00117 	ldw	ra,4(sp)
    2d54:	df000017 	ldw	fp,0(sp)
    2d58:	dec00204 	addi	sp,sp,8
    2d5c:	f800283a 	ret

00002d60 <ad9361_init_gain_info>:
 * @return None
 */
static void ad9361_init_gain_info(struct rx_gain_info *rx_gain,
enum rx_gain_table_type type, int32_t starting_gain,
	int32_t max_gain, int32_t gain_step, int32_t max_idx, int32_t idx_offset)
{
    2d60:	defffb04 	addi	sp,sp,-20
    2d64:	de00012e 	bgeu	sp,et,2d6c <ad9361_init_gain_info+0xc>
    2d68:	003b68fa 	trap	3
    2d6c:	df000415 	stw	fp,16(sp)
    2d70:	df000404 	addi	fp,sp,16
    2d74:	e13ffc15 	stw	r4,-16(fp)
    2d78:	e17ffd15 	stw	r5,-12(fp)
    2d7c:	e1bffe15 	stw	r6,-8(fp)
    2d80:	e1ffff15 	stw	r7,-4(fp)
	rx_gain->tbl_type = type;
    2d84:	e0bffc17 	ldw	r2,-16(fp)
    2d88:	e0fffd17 	ldw	r3,-12(fp)
    2d8c:	10c00015 	stw	r3,0(r2)
	rx_gain->starting_gain_db = starting_gain;
    2d90:	e0bffc17 	ldw	r2,-16(fp)
    2d94:	e0fffe17 	ldw	r3,-8(fp)
    2d98:	10c00115 	stw	r3,4(r2)
	rx_gain->max_gain_db = max_gain;
    2d9c:	e0bffc17 	ldw	r2,-16(fp)
    2da0:	e0ffff17 	ldw	r3,-4(fp)
    2da4:	10c00215 	stw	r3,8(r2)
	rx_gain->gain_step_db = gain_step;
    2da8:	e0bffc17 	ldw	r2,-16(fp)
    2dac:	e0c00117 	ldw	r3,4(fp)
    2db0:	10c00315 	stw	r3,12(r2)
	rx_gain->max_idx = max_idx;
    2db4:	e0bffc17 	ldw	r2,-16(fp)
    2db8:	e0c00217 	ldw	r3,8(fp)
    2dbc:	10c00415 	stw	r3,16(r2)
	rx_gain->idx_step_offset = idx_offset;
    2dc0:	e0bffc17 	ldw	r2,-16(fp)
    2dc4:	e0c00317 	ldw	r3,12(fp)
    2dc8:	10c00515 	stw	r3,20(r2)
}
    2dcc:	e037883a 	mov	sp,fp
    2dd0:	df000017 	ldw	fp,0(sp)
    2dd4:	dec00104 	addi	sp,sp,4
    2dd8:	f800283a 	ret

00002ddc <ad9361_init_gain_tables>:
 * Initialize the gain table information.
 * @param phy The AD9361 state structure.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_init_gain_tables(struct ad9361_rf_phy *phy)
{
    2ddc:	defff904 	addi	sp,sp,-28
    2de0:	de00012e 	bgeu	sp,et,2de8 <ad9361_init_gain_tables+0xc>
    2de4:	003b68fa 	trap	3
    2de8:	dfc00615 	stw	ra,24(sp)
    2dec:	df000515 	stw	fp,20(sp)
    2df0:	df000504 	addi	fp,sp,20
    2df4:	e13fff15 	stw	r4,-4(fp)

	/* Intialize Meta data according to default gain tables
	* of AD9631. Changing/Writing of gain tables is not
	* supported yet.
	*/
	rx_gain = &phy->rx_gain[TBL_200_1300_MHZ];
    2df8:	e0bfff17 	ldw	r2,-4(fp)
    2dfc:	10803204 	addi	r2,r2,200
    2e00:	e0bffe15 	stw	r2,-8(fp)
	ad9361_init_gain_info(rx_gain, RXGAIN_FULL_TBL, 1, 77, 1,
    2e04:	00800044 	movi	r2,1
    2e08:	d8800015 	stw	r2,0(sp)
    2e0c:	00801344 	movi	r2,77
    2e10:	d8800115 	stw	r2,4(sp)
    2e14:	d8000215 	stw	zero,8(sp)
    2e18:	e13ffe17 	ldw	r4,-8(fp)
    2e1c:	000b883a 	mov	r5,zero
    2e20:	01800044 	movi	r6,1
    2e24:	01c01344 	movi	r7,77
    2e28:	0002d600 	call	2d60 <ad9361_init_gain_info>
		SIZE_FULL_TABLE, 0);

	rx_gain = &phy->rx_gain[TBL_1300_4000_MHZ];
    2e2c:	e0bfff17 	ldw	r2,-4(fp)
    2e30:	10803804 	addi	r2,r2,224
    2e34:	e0bffe15 	stw	r2,-8(fp)
	ad9361_init_gain_info(rx_gain, RXGAIN_FULL_TBL, -4, 71, 1,
    2e38:	00800044 	movi	r2,1
    2e3c:	d8800015 	stw	r2,0(sp)
    2e40:	00801344 	movi	r2,77
    2e44:	d8800115 	stw	r2,4(sp)
    2e48:	00800044 	movi	r2,1
    2e4c:	d8800215 	stw	r2,8(sp)
    2e50:	e13ffe17 	ldw	r4,-8(fp)
    2e54:	000b883a 	mov	r5,zero
    2e58:	01bfff04 	movi	r6,-4
    2e5c:	01c011c4 	movi	r7,71
    2e60:	0002d600 	call	2d60 <ad9361_init_gain_info>
		SIZE_FULL_TABLE, 1);

	rx_gain = &phy->rx_gain[TBL_4000_6000_MHZ];
    2e64:	e0bfff17 	ldw	r2,-4(fp)
    2e68:	10803e04 	addi	r2,r2,248
    2e6c:	e0bffe15 	stw	r2,-8(fp)
	ad9361_init_gain_info(rx_gain, RXGAIN_FULL_TBL, -10, 62, 1,
    2e70:	00800044 	movi	r2,1
    2e74:	d8800015 	stw	r2,0(sp)
    2e78:	00801344 	movi	r2,77
    2e7c:	d8800115 	stw	r2,4(sp)
    2e80:	00800104 	movi	r2,4
    2e84:	d8800215 	stw	r2,8(sp)
    2e88:	e13ffe17 	ldw	r4,-8(fp)
    2e8c:	000b883a 	mov	r5,zero
    2e90:	01bffd84 	movi	r6,-10
    2e94:	01c00f84 	movi	r7,62
    2e98:	0002d600 	call	2d60 <ad9361_init_gain_info>
		SIZE_FULL_TABLE, 4);

	return 0;
    2e9c:	0005883a 	mov	r2,zero
}
    2ea0:	e037883a 	mov	sp,fp
    2ea4:	dfc00117 	ldw	ra,4(sp)
    2ea8:	df000017 	ldw	fp,0(sp)
    2eac:	dec00204 	addi	sp,sp,8
    2eb0:	f800283a 	ret

00002eb4 <ad9361_gc_update>:
 * Update the Gain Control.
 * @param phy The AD9361 state structure.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_gc_update(struct ad9361_rf_phy *phy)
{
    2eb4:	defff304 	addi	sp,sp,-52
    2eb8:	de00012e 	bgeu	sp,et,2ec0 <ad9361_gc_update+0xc>
    2ebc:	003b68fa 	trap	3
    2ec0:	dfc00c15 	stw	ra,48(sp)
    2ec4:	df000b15 	stw	fp,44(sp)
    2ec8:	dc000a15 	stw	r16,40(sp)
    2ecc:	df000b04 	addi	fp,sp,44
    2ed0:	e13ffe15 	stw	r4,-8(fp)
	struct spi_device *spi = phy->spi;
    2ed4:	e0bffe17 	ldw	r2,-8(fp)
    2ed8:	10800117 	ldw	r2,4(r2)
    2edc:	e0bff815 	stw	r2,-32(fp)
	uint32_t clkrf;
	uint32_t reg, delay_lna, settling_delay, dec_pow_meas_dur;
	int32_t ret;
	uint32_t fir_div;

	clkrf = clk_get_rate(phy, phy->ref_clk_scale[CLKRF_CLK]);
    2ee0:	e0bffe17 	ldw	r2,-8(fp)
    2ee4:	10801e17 	ldw	r2,120(r2)
    2ee8:	e13ffe17 	ldw	r4,-8(fp)
    2eec:	100b883a 	mov	r5,r2
    2ef0:	001bc900 	call	1bc90 <clk_get_rate>
    2ef4:	e0bff915 	stw	r2,-28(fp)
	delay_lna = phy->pdata->elna_ctrl.settling_delay_ns;
    2ef8:	e0bffe17 	ldw	r2,-8(fp)
    2efc:	10803017 	ldw	r2,192(r2)
    2f00:	10804717 	ldw	r2,284(r2)
    2f04:	e0bffa15 	stw	r2,-24(fp)
	/*
	 * AGC Attack Delay (us)=ceiling((((0.2+Delay_LNA)*ClkRF+14))/(2*ClkRF))+1
	 * ClkRF in MHz, delay in us
	 */

	reg = (200 * delay_lna) / 2 + (14000000UL / (clkrf / 500U));
    2f08:	e0bffa17 	ldw	r2,-24(fp)
    2f0c:	10803224 	muli	r2,r2,200
    2f10:	1020d07a 	srli	r16,r2,1
    2f14:	e0bff917 	ldw	r2,-28(fp)
    2f18:	1009883a 	mov	r4,r2
    2f1c:	01407d04 	movi	r5,500
    2f20:	001d7a40 	call	1d7a4 <__udivsi3>
    2f24:	010035b4 	movhi	r4,214
    2f28:	2127e004 	addi	r4,r4,-24704
    2f2c:	100b883a 	mov	r5,r2
    2f30:	001d7a40 	call	1d7a4 <__udivsi3>
    2f34:	8085883a 	add	r2,r16,r2
    2f38:	e0bff615 	stw	r2,-40(fp)
	reg = DIV_ROUND_UP(reg, 1000UL) +
    2f3c:	e0bff617 	ldw	r2,-40(fp)
    2f40:	1080f9c4 	addi	r2,r2,999
    2f44:	1009883a 	mov	r4,r2
    2f48:	0140fa04 	movi	r5,1000
    2f4c:	001d7a40 	call	1d7a4 <__udivsi3>
    2f50:	1007883a 	mov	r3,r2
		phy->pdata->gain_ctrl.agc_attack_delay_extra_margin_us;
    2f54:	e0bffe17 	ldw	r2,-8(fp)
    2f58:	10803017 	ldw	r2,192(r2)
    2f5c:	10802b83 	ldbu	r2,174(r2)
	 * AGC Attack Delay (us)=ceiling((((0.2+Delay_LNA)*ClkRF+14))/(2*ClkRF))+1
	 * ClkRF in MHz, delay in us
	 */

	reg = (200 * delay_lna) / 2 + (14000000UL / (clkrf / 500U));
	reg = DIV_ROUND_UP(reg, 1000UL) +
    2f60:	10803fcc 	andi	r2,r2,255
    2f64:	1885883a 	add	r2,r3,r2
    2f68:	e0bff615 	stw	r2,-40(fp)
		phy->pdata->gain_ctrl.agc_attack_delay_extra_margin_us;
	reg = clamp_t(uint8_t, reg, 0U, 31U);
    2f6c:	e0bff617 	ldw	r2,-40(fp)
    2f70:	10803fcc 	andi	r2,r2,255
    2f74:	108007e8 	cmpgeui	r2,r2,31
    2f78:	1000031e 	bne	r2,zero,2f88 <ad9361_gc_update+0xd4>
    2f7c:	e0bff617 	ldw	r2,-40(fp)
    2f80:	10803fcc 	andi	r2,r2,255
    2f84:	0080070e 	bge	zero,r2,2fa4 <ad9361_gc_update+0xf0>
    2f88:	e0bff617 	ldw	r2,-40(fp)
    2f8c:	10c03fcc 	andi	r3,r2,255
    2f90:	18c00830 	cmpltui	r3,r3,32
    2f94:	1800011e 	bne	r3,zero,2f9c <ad9361_gc_update+0xe8>
    2f98:	008007c4 	movi	r2,31
    2f9c:	10803fcc 	andi	r2,r2,255
    2fa0:	00000106 	br	2fa8 <ad9361_gc_update+0xf4>
    2fa4:	0005883a 	mov	r2,zero
    2fa8:	e0bff615 	stw	r2,-40(fp)
	ret = ad9361_spi_writef(spi, REG_AGC_ATTACK_DELAY,
    2fac:	01000fc4 	movi	r4,63
    2fb0:	001c8300 	call	1c830 <find_first_bit>
    2fb4:	1007883a 	mov	r3,r2
    2fb8:	e0bff617 	ldw	r2,-40(fp)
    2fbc:	d8800015 	stw	r2,0(sp)
    2fc0:	e13ff817 	ldw	r4,-32(fp)
    2fc4:	01400884 	movi	r5,34
    2fc8:	01800fc4 	movi	r6,63
    2fcc:	180f883a 	mov	r7,r3
    2fd0:	000031c0 	call	31c <__ad9361_spi_writef>
    2fd4:	e0bffb15 	stw	r2,-20(fp)

	/*
	 * Peak Overload Wait Time (ClkRF cycles)=ceiling((0.1+Delay_LNA) *clkRF+1)
	 */

	reg = (delay_lna + 100UL) * (clkrf / 1000UL);
    2fd8:	e0bffa17 	ldw	r2,-24(fp)
    2fdc:	14001904 	addi	r16,r2,100
    2fe0:	e0bff917 	ldw	r2,-28(fp)
    2fe4:	1009883a 	mov	r4,r2
    2fe8:	0140fa04 	movi	r5,1000
    2fec:	001d7a40 	call	1d7a4 <__udivsi3>
    2ff0:	8085383a 	mul	r2,r16,r2
    2ff4:	e0bff615 	stw	r2,-40(fp)
	reg = DIV_ROUND_UP(reg, 1000000UL) + 1;
    2ff8:	e0fff617 	ldw	r3,-40(fp)
    2ffc:	008003f4 	movhi	r2,15
    3000:	10908fc4 	addi	r2,r2,16959
    3004:	1885883a 	add	r2,r3,r2
    3008:	1009883a 	mov	r4,r2
    300c:	014003f4 	movhi	r5,15
    3010:	29509004 	addi	r5,r5,16960
    3014:	001d7a40 	call	1d7a4 <__udivsi3>
    3018:	10800044 	addi	r2,r2,1
    301c:	e0bff615 	stw	r2,-40(fp)
	reg = clamp_t(uint8_t, reg, 0U, 31U);
    3020:	e0bff617 	ldw	r2,-40(fp)
    3024:	10803fcc 	andi	r2,r2,255
    3028:	108007e8 	cmpgeui	r2,r2,31
    302c:	1000031e 	bne	r2,zero,303c <ad9361_gc_update+0x188>
    3030:	e0bff617 	ldw	r2,-40(fp)
    3034:	10803fcc 	andi	r2,r2,255
    3038:	0080070e 	bge	zero,r2,3058 <ad9361_gc_update+0x1a4>
    303c:	e0bff617 	ldw	r2,-40(fp)
    3040:	10c03fcc 	andi	r3,r2,255
    3044:	18c00830 	cmpltui	r3,r3,32
    3048:	1800011e 	bne	r3,zero,3050 <ad9361_gc_update+0x19c>
    304c:	008007c4 	movi	r2,31
    3050:	10803fcc 	andi	r2,r2,255
    3054:	00000106 	br	305c <ad9361_gc_update+0x1a8>
    3058:	0005883a 	mov	r2,zero
    305c:	e0bff615 	stw	r2,-40(fp)
	ret |= ad9361_spi_writef(spi, REG_PEAK_WAIT_TIME,
    3060:	010007c4 	movi	r4,31
    3064:	001c8300 	call	1c830 <find_first_bit>
    3068:	1007883a 	mov	r3,r2
    306c:	e0bff617 	ldw	r2,-40(fp)
    3070:	d8800015 	stw	r2,0(sp)
    3074:	e13ff817 	ldw	r4,-32(fp)
    3078:	01403f84 	movi	r5,254
    307c:	018007c4 	movi	r6,31
    3080:	180f883a 	mov	r7,r3
    3084:	000031c0 	call	31c <__ad9361_spi_writef>
    3088:	1007883a 	mov	r3,r2
    308c:	e0bffb17 	ldw	r2,-20(fp)
    3090:	10c4b03a 	or	r2,r2,r3
    3094:	e0bffb15 	stw	r2,-20(fp)
	 * Settling Delay in 0x111.  Applies to all gain control modes:
	 * 0x111[D4:D0]= ceiling(((0.2+Delay_LNA)*clkRF
	dodebug = false;+14)/2)
	 */

	reg = (delay_lna + 200UL) * (clkrf / 2000UL);
    3098:	e0bffa17 	ldw	r2,-24(fp)
    309c:	14003204 	addi	r16,r2,200
    30a0:	e0bff917 	ldw	r2,-28(fp)
    30a4:	1009883a 	mov	r4,r2
    30a8:	0141f404 	movi	r5,2000
    30ac:	001d7a40 	call	1d7a4 <__udivsi3>
    30b0:	8085383a 	mul	r2,r16,r2
    30b4:	e0bff615 	stw	r2,-40(fp)
	reg = DIV_ROUND_UP(reg, 1000000UL) + 7;
    30b8:	e0fff617 	ldw	r3,-40(fp)
    30bc:	008003f4 	movhi	r2,15
    30c0:	10908fc4 	addi	r2,r2,16959
    30c4:	1885883a 	add	r2,r3,r2
    30c8:	1009883a 	mov	r4,r2
    30cc:	014003f4 	movhi	r5,15
    30d0:	29509004 	addi	r5,r5,16960
    30d4:	001d7a40 	call	1d7a4 <__udivsi3>
    30d8:	108001c4 	addi	r2,r2,7
    30dc:	e0bff615 	stw	r2,-40(fp)
	reg = settling_delay = clamp_t(uint8_t, reg, 0U, 31U);
    30e0:	e0bff617 	ldw	r2,-40(fp)
    30e4:	10803fcc 	andi	r2,r2,255
    30e8:	108007e8 	cmpgeui	r2,r2,31
    30ec:	1000031e 	bne	r2,zero,30fc <ad9361_gc_update+0x248>
    30f0:	e0bff617 	ldw	r2,-40(fp)
    30f4:	10803fcc 	andi	r2,r2,255
    30f8:	0080070e 	bge	zero,r2,3118 <ad9361_gc_update+0x264>
    30fc:	e0bff617 	ldw	r2,-40(fp)
    3100:	10c03fcc 	andi	r3,r2,255
    3104:	18c00830 	cmpltui	r3,r3,32
    3108:	1800011e 	bne	r3,zero,3110 <ad9361_gc_update+0x25c>
    310c:	008007c4 	movi	r2,31
    3110:	10803fcc 	andi	r2,r2,255
    3114:	00000106 	br	311c <ad9361_gc_update+0x268>
    3118:	0005883a 	mov	r2,zero
    311c:	e0bffc15 	stw	r2,-16(fp)
    3120:	e0bffc17 	ldw	r2,-16(fp)
    3124:	e0bff615 	stw	r2,-40(fp)
	ret |= ad9361_spi_writef(spi, REG_FAST_CONFIG_2_SETTLING_DELAY,
    3128:	010007c4 	movi	r4,31
    312c:	001c8300 	call	1c830 <find_first_bit>
    3130:	1007883a 	mov	r3,r2
    3134:	e0bff617 	ldw	r2,-40(fp)
    3138:	d8800015 	stw	r2,0(sp)
    313c:	e13ff817 	ldw	r4,-32(fp)
    3140:	01404444 	movi	r5,273
    3144:	018007c4 	movi	r6,31
    3148:	180f883a 	mov	r7,r3
    314c:	000031c0 	call	31c <__ad9361_spi_writef>
    3150:	1007883a 	mov	r3,r2
    3154:	e0bffb17 	ldw	r2,-20(fp)
    3158:	10c4b03a 	or	r2,r2,r3
    315c:	e0bffb15 	stw	r2,-20(fp)
			 SETTLING_DELAY(~0), reg);

	/*
	 * Gain Update Counter [15:0]= round((((time*ClkRF-0x111[D4:D0]*2)-2))/2)
	 */
	reg = phy->pdata->gain_ctrl.gain_update_interval_us * (clkrf / 1000UL) -
    3160:	e0bffe17 	ldw	r2,-8(fp)
    3164:	10803017 	ldw	r2,192(r2)
    3168:	14003117 	ldw	r16,196(r2)
    316c:	e0bff917 	ldw	r2,-28(fp)
    3170:	1009883a 	mov	r4,r2
    3174:	0140fa04 	movi	r5,1000
    3178:	001d7a40 	call	1d7a4 <__udivsi3>
    317c:	8087383a 	mul	r3,r16,r2
		settling_delay * 2000UL - 2000UL;
    3180:	e0bffc17 	ldw	r2,-16(fp)
    3184:	1081f424 	muli	r2,r2,2000
			 SETTLING_DELAY(~0), reg);

	/*
	 * Gain Update Counter [15:0]= round((((time*ClkRF-0x111[D4:D0]*2)-2))/2)
	 */
	reg = phy->pdata->gain_ctrl.gain_update_interval_us * (clkrf / 1000UL) -
    3188:	1885c83a 	sub	r2,r3,r2
    318c:	10be0c04 	addi	r2,r2,-2000
    3190:	e0bff615 	stw	r2,-40(fp)
		settling_delay * 2000UL - 2000UL;

	reg = DIV_ROUND_CLOSEST(reg, 2000UL);
    3194:	e0bff617 	ldw	r2,-40(fp)
    3198:	1080fa04 	addi	r2,r2,1000
    319c:	1009883a 	mov	r4,r2
    31a0:	0141f404 	movi	r5,2000
    31a4:	001d7a40 	call	1d7a4 <__udivsi3>
    31a8:	e0bff615 	stw	r2,-40(fp)
	reg = clamp_t(uint32_t, reg, 0U, 131071UL);
    31ac:	e0bff617 	ldw	r2,-40(fp)
    31b0:	10000626 	beq	r2,zero,31cc <ad9361_gc_update+0x318>
    31b4:	e0bff617 	ldw	r2,-40(fp)
    31b8:	00c000b4 	movhi	r3,2
    31bc:	10c00436 	bltu	r2,r3,31d0 <ad9361_gc_update+0x31c>
    31c0:	008000b4 	movhi	r2,2
    31c4:	10bfffc4 	addi	r2,r2,-1
    31c8:	00000106 	br	31d0 <ad9361_gc_update+0x31c>
    31cc:	0005883a 	mov	r2,zero
    31d0:	e0bff615 	stw	r2,-40(fp)

	if (phy->agc_mode[0] == RF_GAIN_FASTATTACK_AGC ||
    31d4:	e0bffe17 	ldw	r2,-8(fp)
    31d8:	10805f03 	ldbu	r2,380(r2)
    31dc:	10803fcc 	andi	r2,r2,255
    31e0:	10800060 	cmpeqi	r2,r2,1
    31e4:	1000051e 	bne	r2,zero,31fc <ad9361_gc_update+0x348>
		phy->agc_mode[1] == RF_GAIN_FASTATTACK_AGC) {
    31e8:	e0bffe17 	ldw	r2,-8(fp)
    31ec:	10805f43 	ldbu	r2,381(r2)
		settling_delay * 2000UL - 2000UL;

	reg = DIV_ROUND_CLOSEST(reg, 2000UL);
	reg = clamp_t(uint32_t, reg, 0U, 131071UL);

	if (phy->agc_mode[0] == RF_GAIN_FASTATTACK_AGC ||
    31f0:	10803fcc 	andi	r2,r2,255
    31f4:	10800058 	cmpnei	r2,r2,1
    31f8:	1000051e 	bne	r2,zero,3210 <ad9361_gc_update+0x35c>
		phy->agc_mode[1] == RF_GAIN_FASTATTACK_AGC) {
		dec_pow_meas_dur =
			phy->pdata->gain_ctrl.f_agc_dec_pow_measuremnt_duration;
    31fc:	e0bffe17 	ldw	r2,-8(fp)
    3200:	10803017 	ldw	r2,192(r2)
	reg = DIV_ROUND_CLOSEST(reg, 2000UL);
	reg = clamp_t(uint32_t, reg, 0U, 131071UL);

	if (phy->agc_mode[0] == RF_GAIN_FASTATTACK_AGC ||
		phy->agc_mode[1] == RF_GAIN_FASTATTACK_AGC) {
		dec_pow_meas_dur =
    3204:	10803317 	ldw	r2,204(r2)
    3208:	e0bff715 	stw	r2,-36(fp)
    320c:	00002406 	br	32a0 <ad9361_gc_update+0x3ec>
			phy->pdata->gain_ctrl.f_agc_dec_pow_measuremnt_duration;
	} else {
		fir_div = DIV_ROUND_CLOSEST(clkrf,
    3210:	e0bffe17 	ldw	r2,-8(fp)
    3214:	10801f17 	ldw	r2,124(r2)
    3218:	e13ffe17 	ldw	r4,-8(fp)
    321c:	100b883a 	mov	r5,r2
    3220:	001bc900 	call	1bc90 <clk_get_rate>
    3224:	1006d07a 	srli	r3,r2,1
    3228:	e0bff917 	ldw	r2,-28(fp)
    322c:	18a1883a 	add	r16,r3,r2
    3230:	e0bffe17 	ldw	r2,-8(fp)
    3234:	10801f17 	ldw	r2,124(r2)
    3238:	e13ffe17 	ldw	r4,-8(fp)
    323c:	100b883a 	mov	r5,r2
    3240:	001bc900 	call	1bc90 <clk_get_rate>
    3244:	8009883a 	mov	r4,r16
    3248:	100b883a 	mov	r5,r2
    324c:	001d7a40 	call	1d7a4 <__udivsi3>
    3250:	e0bffd15 	stw	r2,-12(fp)
				clk_get_rate(phy, phy->ref_clk_scale[RX_SAMPL_CLK]));
		dec_pow_meas_dur = phy->pdata->gain_ctrl.dec_pow_measuremnt_duration;
    3254:	e0bffe17 	ldw	r2,-8(fp)
    3258:	10803017 	ldw	r2,192(r2)
    325c:	1080290b 	ldhu	r2,164(r2)
    3260:	10bfffcc 	andi	r2,r2,65535
    3264:	e0bff715 	stw	r2,-36(fp)

		if (((reg * 2 / fir_div) / dec_pow_meas_dur) < 2) {
    3268:	e0bff617 	ldw	r2,-40(fp)
    326c:	1085883a 	add	r2,r2,r2
    3270:	1009883a 	mov	r4,r2
    3274:	e17ffd17 	ldw	r5,-12(fp)
    3278:	001d7a40 	call	1d7a4 <__udivsi3>
    327c:	1009883a 	mov	r4,r2
    3280:	e17ff717 	ldw	r5,-36(fp)
    3284:	001d7a40 	call	1d7a4 <__udivsi3>
    3288:	108000a8 	cmpgeui	r2,r2,2
    328c:	1000041e 	bne	r2,zero,32a0 <ad9361_gc_update+0x3ec>
			dec_pow_meas_dur = reg / fir_div;
    3290:	e13ff617 	ldw	r4,-40(fp)
    3294:	e17ffd17 	ldw	r5,-12(fp)
    3298:	001d7a40 	call	1d7a4 <__udivsi3>
    329c:	e0bff715 	stw	r2,-36(fp)
		}
	}

	/* Power Measurement Duration */
	ad9361_spi_writef(spi, REG_DEC_POWER_MEASURE_DURATION_0,
    32a0:	010003c4 	movi	r4,15
    32a4:	001c8300 	call	1c830 <find_first_bit>
    32a8:	1021883a 	mov	r16,r2
    32ac:	e0bff717 	ldw	r2,-36(fp)
    32b0:	1004d13a 	srli	r2,r2,4
    32b4:	1009883a 	mov	r4,r2
    32b8:	001c5b40 	call	1c5b4 <ilog2>
    32bc:	d8800015 	stw	r2,0(sp)
    32c0:	e13ff817 	ldw	r4,-32(fp)
    32c4:	01405704 	movi	r5,348
    32c8:	018003c4 	movi	r6,15
    32cc:	800f883a 	mov	r7,r16
    32d0:	000031c0 	call	31c <__ad9361_spi_writef>
			  DEC_POWER_MEASUREMENT_DURATION(~0),
			  ilog2(dec_pow_meas_dur / 16));


	ret |= ad9361_spi_writef(spi, REG_DIGITAL_SAT_COUNTER,
    32d4:	01000804 	movi	r4,32
    32d8:	001c8300 	call	1c830 <find_first_bit>
    32dc:	100f883a 	mov	r7,r2
    32e0:	e0bff617 	ldw	r2,-40(fp)
    32e4:	00ffffd4 	movui	r3,65535
    32e8:	1885803a 	cmpltu	r2,r3,r2
    32ec:	10803fcc 	andi	r2,r2,255
    32f0:	d8800015 	stw	r2,0(sp)
    32f4:	e13ff817 	ldw	r4,-32(fp)
    32f8:	01404a04 	movi	r5,296
    32fc:	01800804 	movi	r6,32
    3300:	000031c0 	call	31c <__ad9361_spi_writef>
    3304:	1007883a 	mov	r3,r2
    3308:	e0bffb17 	ldw	r2,-20(fp)
    330c:	10c4b03a 	or	r2,r2,r3
    3310:	e0bffb15 	stw	r2,-20(fp)
			  DOUBLE_GAIN_COUNTER,  reg > 65535);

	if (reg > 65535)
    3314:	e0bff617 	ldw	r2,-40(fp)
    3318:	00ffffd4 	movui	r3,65535
    331c:	1880032e 	bgeu	r3,r2,332c <ad9361_gc_update+0x478>
		reg /= 2;
    3320:	e0bff617 	ldw	r2,-40(fp)
    3324:	1004d07a 	srli	r2,r2,1
    3328:	e0bff615 	stw	r2,-40(fp)

	ret |= ad9361_spi_write(spi, REG_GAIN_UPDATE_COUNTER1, reg & 0xFF);
    332c:	e0bff617 	ldw	r2,-40(fp)
    3330:	10803fcc 	andi	r2,r2,255
    3334:	e13ff817 	ldw	r4,-32(fp)
    3338:	01404904 	movi	r5,292
    333c:	100d883a 	mov	r6,r2
    3340:	00002600 	call	260 <ad9361_spi_write>
    3344:	1007883a 	mov	r3,r2
    3348:	e0bffb17 	ldw	r2,-20(fp)
    334c:	10c4b03a 	or	r2,r2,r3
    3350:	e0bffb15 	stw	r2,-20(fp)
	ret |= ad9361_spi_write(spi, REG_GAIN_UPDATE_COUNTER2, reg >> 8);
    3354:	e0bff617 	ldw	r2,-40(fp)
    3358:	1004d23a 	srli	r2,r2,8
    335c:	e13ff817 	ldw	r4,-32(fp)
    3360:	01404944 	movi	r5,293
    3364:	100d883a 	mov	r6,r2
    3368:	00002600 	call	260 <ad9361_spi_write>
    336c:	1007883a 	mov	r3,r2
    3370:	e0bffb17 	ldw	r2,-20(fp)
    3374:	10c4b03a 	or	r2,r2,r3
    3378:	e0bffb15 	stw	r2,-20(fp)

	/*
	 * Fast AGC State Wait Time - Energy Detect Count
	 */

	reg = DIV_ROUND_CLOSEST(phy->pdata->gain_ctrl.f_agc_state_wait_time_ns *
    337c:	e0bffe17 	ldw	r2,-8(fp)
    3380:	10803017 	ldw	r2,192(r2)
    3384:	14003417 	ldw	r16,208(r2)
    3388:	e0bff917 	ldw	r2,-28(fp)
    338c:	1009883a 	mov	r4,r2
    3390:	0140fa04 	movi	r5,1000
    3394:	001d7a40 	call	1d7a4 <__udivsi3>
    3398:	8087383a 	mul	r3,r16,r2
    339c:	00800234 	movhi	r2,8
    33a0:	10a84804 	addi	r2,r2,-24288
    33a4:	1885883a 	add	r2,r3,r2
    33a8:	1009883a 	mov	r4,r2
    33ac:	014003f4 	movhi	r5,15
    33b0:	29509004 	addi	r5,r5,16960
    33b4:	001d7a40 	call	1d7a4 <__udivsi3>
    33b8:	e0bff615 	stw	r2,-40(fp)
				(clkrf / 1000UL), 1000000UL);
	reg = clamp_t(uint32_t, reg, 0U, 31U);
    33bc:	e0bff617 	ldw	r2,-40(fp)
    33c0:	10000526 	beq	r2,zero,33d8 <ad9361_gc_update+0x524>
    33c4:	e0bff617 	ldw	r2,-40(fp)
    33c8:	10c00830 	cmpltui	r3,r2,32
    33cc:	1800031e 	bne	r3,zero,33dc <ad9361_gc_update+0x528>
    33d0:	008007c4 	movi	r2,31
    33d4:	00000106 	br	33dc <ad9361_gc_update+0x528>
    33d8:	0005883a 	mov	r2,zero
    33dc:	e0bff615 	stw	r2,-40(fp)
	ret |= ad9361_spi_writef(spi, REG_FAST_ENERGY_DETECT_COUNT,
    33e0:	010007c4 	movi	r4,31
    33e4:	001c8300 	call	1c830 <find_first_bit>
    33e8:	1007883a 	mov	r3,r2
    33ec:	e0bff617 	ldw	r2,-40(fp)
    33f0:	d8800015 	stw	r2,0(sp)
    33f4:	e13ff817 	ldw	r4,-32(fp)
    33f8:	014045c4 	movi	r5,279
    33fc:	018007c4 	movi	r6,31
    3400:	180f883a 	mov	r7,r3
    3404:	000031c0 	call	31c <__ad9361_spi_writef>
    3408:	1007883a 	mov	r3,r2
    340c:	e0bffb17 	ldw	r2,-20(fp)
    3410:	10c4b03a 	or	r2,r2,r3
    3414:	e0bffb15 	stw	r2,-20(fp)
			  ENERGY_DETECT_COUNT(~0),  reg);

	return ret;
    3418:	e0bffb17 	ldw	r2,-20(fp)
}
    341c:	e6ffff04 	addi	sp,fp,-4
    3420:	dfc00217 	ldw	ra,8(sp)
    3424:	df000117 	ldw	fp,4(sp)
    3428:	dc000017 	ldw	r16,0(sp)
    342c:	dec00304 	addi	sp,sp,12
    3430:	f800283a 	ret

00003434 <ad9361_set_gain_ctrl_mode>:
 *        channel information and the gain control mode.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_set_gain_ctrl_mode(struct ad9361_rf_phy *phy,
		struct rf_gain_ctrl *gain_ctrl)
{
    3434:	defff704 	addi	sp,sp,-36
    3438:	de00012e 	bgeu	sp,et,3440 <ad9361_set_gain_ctrl_mode+0xc>
    343c:	003b68fa 	trap	3
    3440:	dfc00815 	stw	ra,32(sp)
    3444:	df000715 	stw	fp,28(sp)
    3448:	df000704 	addi	fp,sp,28
    344c:	e13ffe15 	stw	r4,-8(fp)
    3450:	e17fff15 	stw	r5,-4(fp)
	struct spi_device *spi = phy->spi;
    3454:	e0bffe17 	ldw	r2,-8(fp)
    3458:	10800117 	ldw	r2,4(r2)
    345c:	e0bffc15 	stw	r2,-16(fp)
	int32_t rc = 0;
    3460:	e03ff915 	stw	zero,-28(fp)
	uint32_t gain_ctl_shift, mode;
	uint8_t val;

	rc = ad9361_spi_readm(spi, REG_AGC_CONFIG_1, &val, 1);
    3464:	e0bffd04 	addi	r2,fp,-12
    3468:	e13ffc17 	ldw	r4,-16(fp)
    346c:	01403e84 	movi	r5,250
    3470:	100d883a 	mov	r6,r2
    3474:	01c00044 	movi	r7,1
    3478:	00000740 	call	74 <ad9361_spi_readm>
    347c:	e0bff915 	stw	r2,-28(fp)
	if (rc) {
    3480:	e0bff917 	ldw	r2,-28(fp)
    3484:	10000826 	beq	r2,zero,34a8 <ad9361_set_gain_ctrl_mode+0x74>
		dev_err(dev, "Unable to read AGC config1 register: %x",
    3488:	010000b4 	movhi	r4,2
    348c:	211b9404 	addi	r4,r4,28240
    3490:	01403e84 	movi	r5,250
    3494:	001f8180 	call	1f818 <printf>
    3498:	010000b4 	movhi	r4,2
    349c:	211a7504 	addi	r4,r4,27092
    34a0:	001f8180 	call	1f818 <printf>
			REG_AGC_CONFIG_1);
		goto out;
    34a4:	00007c06 	br	3698 <ad9361_set_gain_ctrl_mode+0x264>
	}

	switch (gain_ctrl->mode) {
    34a8:	e0bfff17 	ldw	r2,-4(fp)
    34ac:	10800103 	ldbu	r2,4(r2)
    34b0:	10803fcc 	andi	r2,r2,255
    34b4:	10c00060 	cmpeqi	r3,r2,1
    34b8:	18000b1e 	bne	r3,zero,34e8 <ad9361_set_gain_ctrl_mode+0xb4>
    34bc:	10c00088 	cmpgei	r3,r2,2
    34c0:	1800021e 	bne	r3,zero,34cc <ad9361_set_gain_ctrl_mode+0x98>
    34c4:	10000626 	beq	r2,zero,34e0 <ad9361_set_gain_ctrl_mode+0xac>
    34c8:	00001006 	br	350c <ad9361_set_gain_ctrl_mode+0xd8>
    34cc:	10c000a0 	cmpeqi	r3,r2,2
    34d0:	1800081e 	bne	r3,zero,34f4 <ad9361_set_gain_ctrl_mode+0xc0>
    34d4:	108000e0 	cmpeqi	r2,r2,3
    34d8:	1000091e 	bne	r2,zero,3500 <ad9361_set_gain_ctrl_mode+0xcc>
    34dc:	00000b06 	br	350c <ad9361_set_gain_ctrl_mode+0xd8>
	case RF_GAIN_MGC:
		mode = RX_GAIN_CTL_MGC;
    34e0:	e03ffb15 	stw	zero,-20(fp)
		break;
    34e4:	00000c06 	br	3518 <ad9361_set_gain_ctrl_mode+0xe4>
	case RF_GAIN_FASTATTACK_AGC:
		mode = RX_GAIN_CTL_AGC_FAST_ATK;
    34e8:	00800044 	movi	r2,1
    34ec:	e0bffb15 	stw	r2,-20(fp)
		break;
    34f0:	00000906 	br	3518 <ad9361_set_gain_ctrl_mode+0xe4>
	case RF_GAIN_SLOWATTACK_AGC:
		mode = RX_GAIN_CTL_AGC_SLOW_ATK;
    34f4:	00800084 	movi	r2,2
    34f8:	e0bffb15 	stw	r2,-20(fp)
		break;
    34fc:	00000606 	br	3518 <ad9361_set_gain_ctrl_mode+0xe4>
	case RF_GAIN_HYBRID_AGC:
		mode = RX_GAIN_CTL_AGC_SLOW_ATK_HYBD;
    3500:	008000c4 	movi	r2,3
    3504:	e0bffb15 	stw	r2,-20(fp)
		break;
    3508:	00000306 	br	3518 <ad9361_set_gain_ctrl_mode+0xe4>
	default:
		rc = -EINVAL;
    350c:	00bffa84 	movi	r2,-22
    3510:	e0bff915 	stw	r2,-28(fp)
		goto out;
    3514:	00006006 	br	3698 <ad9361_set_gain_ctrl_mode+0x264>
	}

	if (gain_ctrl->ant == 1) {
    3518:	e0bfff17 	ldw	r2,-4(fp)
    351c:	10800017 	ldw	r2,0(r2)
    3520:	10800058 	cmpnei	r2,r2,1
    3524:	1000021e 	bne	r2,zero,3530 <ad9361_set_gain_ctrl_mode+0xfc>
		gain_ctl_shift = RX1_GAIN_CTRL_SHIFT;
    3528:	e03ffa15 	stw	zero,-24(fp)
    352c:	00001306 	br	357c <ad9361_set_gain_ctrl_mode+0x148>
	}
	else if (gain_ctrl->ant == 2) {
    3530:	e0bfff17 	ldw	r2,-4(fp)
    3534:	10800017 	ldw	r2,0(r2)
    3538:	10800098 	cmpnei	r2,r2,2
    353c:	1000031e 	bne	r2,zero,354c <ad9361_set_gain_ctrl_mode+0x118>
		gain_ctl_shift = RX2_GAIN_CTRL_SHIFT;
    3540:	00800084 	movi	r2,2
    3544:	e0bffa15 	stw	r2,-24(fp)
    3548:	00000c06 	br	357c <ad9361_set_gain_ctrl_mode+0x148>
	}
	else {
		dev_err(dev, "Unknown Rx path %"PRIu32, gain_ctrl->ant);
    354c:	e0bfff17 	ldw	r2,-4(fp)
    3550:	10800017 	ldw	r2,0(r2)
    3554:	010000b4 	movhi	r4,2
    3558:	211acb04 	addi	r4,r4,27436
    355c:	100b883a 	mov	r5,r2
    3560:	001f8180 	call	1f818 <printf>
    3564:	010000b4 	movhi	r4,2
    3568:	211a7504 	addi	r4,r4,27092
    356c:	001f8180 	call	1f818 <printf>
		rc = -EINVAL;
    3570:	00bffa84 	movi	r2,-22
    3574:	e0bff915 	stw	r2,-28(fp)
		goto out;
    3578:	00004706 	br	3698 <ad9361_set_gain_ctrl_mode+0x264>
	}

	rc = ad9361_en_dis_rx(phy, gain_ctrl->ant, RX_DISABLE);
    357c:	e0bfff17 	ldw	r2,-4(fp)
    3580:	10800017 	ldw	r2,0(r2)
    3584:	e13ffe17 	ldw	r4,-8(fp)
    3588:	100b883a 	mov	r5,r2
    358c:	000d883a 	mov	r6,zero
    3590:	00008300 	call	830 <ad9361_en_dis_rx>
    3594:	e0bff915 	stw	r2,-28(fp)
	if (rc) {
    3598:	e0bff917 	ldw	r2,-28(fp)
    359c:	10000a26 	beq	r2,zero,35c8 <ad9361_set_gain_ctrl_mode+0x194>
		dev_err(dev, "Unable to disable rx%"PRIu32, gain_ctrl->ant);
    35a0:	e0bfff17 	ldw	r2,-4(fp)
    35a4:	10800017 	ldw	r2,0(r2)
    35a8:	010000b4 	movhi	r4,2
    35ac:	211b9e04 	addi	r4,r4,28280
    35b0:	100b883a 	mov	r5,r2
    35b4:	001f8180 	call	1f818 <printf>
    35b8:	010000b4 	movhi	r4,2
    35bc:	211a7504 	addi	r4,r4,27092
    35c0:	001f8180 	call	1f818 <printf>
		goto out;
    35c4:	00003406 	br	3698 <ad9361_set_gain_ctrl_mode+0x264>
	}

	val &= ~(RX_GAIN_CTL_MASK << gain_ctl_shift);
    35c8:	e0bffa17 	ldw	r2,-24(fp)
    35cc:	00c000c4 	movi	r3,3
    35d0:	1884983a 	sll	r2,r3,r2
    35d4:	0084303a 	nor	r2,zero,r2
    35d8:	1007883a 	mov	r3,r2
    35dc:	e0bffd03 	ldbu	r2,-12(fp)
    35e0:	1884703a 	and	r2,r3,r2
    35e4:	e0bffd05 	stb	r2,-12(fp)
	val |= mode << gain_ctl_shift;
    35e8:	e0bffa17 	ldw	r2,-24(fp)
    35ec:	e0fffb17 	ldw	r3,-20(fp)
    35f0:	1884983a 	sll	r2,r3,r2
    35f4:	1007883a 	mov	r3,r2
    35f8:	e0bffd03 	ldbu	r2,-12(fp)
    35fc:	1884b03a 	or	r2,r3,r2
    3600:	e0bffd05 	stb	r2,-12(fp)
	if (mode == RX_GAIN_CTL_AGC_SLOW_ATK_HYBD)
    3604:	e0bffb17 	ldw	r2,-20(fp)
    3608:	108000d8 	cmpnei	r2,r2,3
    360c:	1000041e 	bne	r2,zero,3620 <ad9361_set_gain_ctrl_mode+0x1ec>
		val |= SLOW_ATTACK_HYBRID_MODE;
    3610:	e0bffd03 	ldbu	r2,-12(fp)
    3614:	10800414 	ori	r2,r2,16
    3618:	e0bffd05 	stb	r2,-12(fp)
    361c:	00000406 	br	3630 <ad9361_set_gain_ctrl_mode+0x1fc>
	else
		val &= ~SLOW_ATTACK_HYBRID_MODE;
    3620:	e0fffd03 	ldbu	r3,-12(fp)
    3624:	00bffbc4 	movi	r2,-17
    3628:	1884703a 	and	r2,r3,r2
    362c:	e0bffd05 	stb	r2,-12(fp)

	rc = ad9361_spi_write(spi, REG_AGC_CONFIG_1, val);
    3630:	e0bffd03 	ldbu	r2,-12(fp)
    3634:	10803fcc 	andi	r2,r2,255
    3638:	e13ffc17 	ldw	r4,-16(fp)
    363c:	01403e84 	movi	r5,250
    3640:	100d883a 	mov	r6,r2
    3644:	00002600 	call	260 <ad9361_spi_write>
    3648:	e0bff915 	stw	r2,-28(fp)
	if (rc) {
    364c:	e0bff917 	ldw	r2,-28(fp)
    3650:	10000826 	beq	r2,zero,3674 <ad9361_set_gain_ctrl_mode+0x240>
		dev_err(dev, "Unable to write AGC config1 register: %x",
    3654:	010000b4 	movhi	r4,2
    3658:	211ba404 	addi	r4,r4,28304
    365c:	01403e84 	movi	r5,250
    3660:	001f8180 	call	1f818 <printf>
    3664:	010000b4 	movhi	r4,2
    3668:	211a7504 	addi	r4,r4,27092
    366c:	001f8180 	call	1f818 <printf>
			REG_AGC_CONFIG_1);
		goto out;
    3670:	00000906 	br	3698 <ad9361_set_gain_ctrl_mode+0x264>
	}

	ad9361_en_dis_rx(phy, gain_ctrl->ant, RX_ENABLE);
    3674:	e0bfff17 	ldw	r2,-4(fp)
    3678:	10800017 	ldw	r2,0(r2)
    367c:	e13ffe17 	ldw	r4,-8(fp)
    3680:	100b883a 	mov	r5,r2
    3684:	01800044 	movi	r6,1
    3688:	00008300 	call	830 <ad9361_en_dis_rx>
	rc = ad9361_gc_update(phy);
    368c:	e13ffe17 	ldw	r4,-8(fp)
    3690:	0002eb40 	call	2eb4 <ad9361_gc_update>
    3694:	e0bff915 	stw	r2,-28(fp)
out:
	return rc;
    3698:	e0bff917 	ldw	r2,-28(fp)
}
    369c:	e037883a 	mov	sp,fp
    36a0:	dfc00117 	ldw	ra,4(sp)
    36a4:	df000017 	ldw	fp,0(sp)
    36a8:	dec00204 	addi	sp,sp,8
    36ac:	f800283a 	ret

000036b0 <ad9361_read_rssi>:
 * @param phy The AD9361 state structure.
 * @param rssi A rf_rssi struct to store the RSSI.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_read_rssi(struct ad9361_rf_phy *phy, struct rf_rssi *rssi)
{
    36b0:	defff804 	addi	sp,sp,-32
    36b4:	de00012e 	bgeu	sp,et,36bc <ad9361_read_rssi+0xc>
    36b8:	003b68fa 	trap	3
    36bc:	dfc00715 	stw	ra,28(sp)
    36c0:	df000615 	stw	fp,24(sp)
    36c4:	df000604 	addi	fp,sp,24
    36c8:	e13ffe15 	stw	r4,-8(fp)
    36cc:	e17fff15 	stw	r5,-4(fp)
	struct spi_device *spi = phy->spi;
    36d0:	e0bffe17 	ldw	r2,-8(fp)
    36d4:	10800117 	ldw	r2,4(r2)
    36d8:	e0bffb15 	stw	r2,-20(fp)
	uint8_t reg_val_buf[6];
	int32_t rc;

	rc = ad9361_spi_readm(spi, REG_PREAMBLE_LSB,
    36dc:	e0bffc04 	addi	r2,fp,-16
    36e0:	e13ffb17 	ldw	r4,-20(fp)
    36e4:	01406b04 	movi	r5,428
    36e8:	100d883a 	mov	r6,r2
    36ec:	01c00184 	movi	r7,6
    36f0:	00000740 	call	74 <ad9361_spi_readm>
    36f4:	e0bffa15 	stw	r2,-24(fp)
		reg_val_buf, ARRAY_SIZE(reg_val_buf));
	if (rssi->ant == 1) {
    36f8:	e0bfff17 	ldw	r2,-4(fp)
    36fc:	10800017 	ldw	r2,0(r2)
    3700:	10800058 	cmpnei	r2,r2,1
    3704:	1000191e 	bne	r2,zero,376c <ad9361_read_rssi+0xbc>
		rssi->symbol = RSSI_RESOLUTION *
			((reg_val_buf[5] << RSSI_LSB_SHIFT) +
    3708:	e0bffd43 	ldbu	r2,-11(fp)
    370c:	10803fcc 	andi	r2,r2,255
    3710:	1085883a 	add	r2,r2,r2
    3714:	1007883a 	mov	r3,r2
			(reg_val_buf[1] & RSSI_LSB_MASK1));
    3718:	e0bffc43 	ldbu	r2,-15(fp)
    371c:	10803fcc 	andi	r2,r2,255
    3720:	1080004c 	andi	r2,r2,1

	rc = ad9361_spi_readm(spi, REG_PREAMBLE_LSB,
		reg_val_buf, ARRAY_SIZE(reg_val_buf));
	if (rssi->ant == 1) {
		rssi->symbol = RSSI_RESOLUTION *
			((reg_val_buf[5] << RSSI_LSB_SHIFT) +
    3724:	1885883a 	add	r2,r3,r2
	int32_t rc;

	rc = ad9361_spi_readm(spi, REG_PREAMBLE_LSB,
		reg_val_buf, ARRAY_SIZE(reg_val_buf));
	if (rssi->ant == 1) {
		rssi->symbol = RSSI_RESOLUTION *
    3728:	10800664 	muli	r2,r2,25
    372c:	1007883a 	mov	r3,r2
    3730:	e0bfff17 	ldw	r2,-4(fp)
    3734:	10c00115 	stw	r3,4(r2)
			((reg_val_buf[5] << RSSI_LSB_SHIFT) +
			(reg_val_buf[1] & RSSI_LSB_MASK1));
		rssi->preamble = RSSI_RESOLUTION *
			((reg_val_buf[4] << RSSI_LSB_SHIFT) +
    3738:	e0bffd03 	ldbu	r2,-12(fp)
    373c:	10803fcc 	andi	r2,r2,255
    3740:	1085883a 	add	r2,r2,r2
    3744:	1007883a 	mov	r3,r2
			(reg_val_buf[0] & RSSI_LSB_MASK1));
    3748:	e0bffc03 	ldbu	r2,-16(fp)
    374c:	10803fcc 	andi	r2,r2,255
    3750:	1080004c 	andi	r2,r2,1
	if (rssi->ant == 1) {
		rssi->symbol = RSSI_RESOLUTION *
			((reg_val_buf[5] << RSSI_LSB_SHIFT) +
			(reg_val_buf[1] & RSSI_LSB_MASK1));
		rssi->preamble = RSSI_RESOLUTION *
			((reg_val_buf[4] << RSSI_LSB_SHIFT) +
    3754:	1885883a 	add	r2,r3,r2
		reg_val_buf, ARRAY_SIZE(reg_val_buf));
	if (rssi->ant == 1) {
		rssi->symbol = RSSI_RESOLUTION *
			((reg_val_buf[5] << RSSI_LSB_SHIFT) +
			(reg_val_buf[1] & RSSI_LSB_MASK1));
		rssi->preamble = RSSI_RESOLUTION *
    3758:	10800664 	muli	r2,r2,25
    375c:	1007883a 	mov	r3,r2
    3760:	e0bfff17 	ldw	r2,-4(fp)
    3764:	10c00215 	stw	r3,8(r2)
    3768:	00002106 	br	37f0 <ad9361_read_rssi+0x140>
			((reg_val_buf[4] << RSSI_LSB_SHIFT) +
			(reg_val_buf[0] & RSSI_LSB_MASK1));
	}
	else if (rssi->ant == 2) {
    376c:	e0bfff17 	ldw	r2,-4(fp)
    3770:	10800017 	ldw	r2,0(r2)
    3774:	10800098 	cmpnei	r2,r2,2
    3778:	10001b1e 	bne	r2,zero,37e8 <ad9361_read_rssi+0x138>
		rssi->symbol = RSSI_RESOLUTION *
			((reg_val_buf[3] << RSSI_LSB_SHIFT) +
    377c:	e0bffcc3 	ldbu	r2,-13(fp)
    3780:	10803fcc 	andi	r2,r2,255
    3784:	1085883a 	add	r2,r2,r2
    3788:	1007883a 	mov	r3,r2
			((reg_val_buf[1] & RSSI_LSB_MASK2) >> 1));
    378c:	e0bffc43 	ldbu	r2,-15(fp)
    3790:	10803fcc 	andi	r2,r2,255
    3794:	1080008c 	andi	r2,r2,2
    3798:	1005d07a 	srai	r2,r2,1
			((reg_val_buf[4] << RSSI_LSB_SHIFT) +
			(reg_val_buf[0] & RSSI_LSB_MASK1));
	}
	else if (rssi->ant == 2) {
		rssi->symbol = RSSI_RESOLUTION *
			((reg_val_buf[3] << RSSI_LSB_SHIFT) +
    379c:	1885883a 	add	r2,r3,r2
		rssi->preamble = RSSI_RESOLUTION *
			((reg_val_buf[4] << RSSI_LSB_SHIFT) +
			(reg_val_buf[0] & RSSI_LSB_MASK1));
	}
	else if (rssi->ant == 2) {
		rssi->symbol = RSSI_RESOLUTION *
    37a0:	10800664 	muli	r2,r2,25
    37a4:	1007883a 	mov	r3,r2
    37a8:	e0bfff17 	ldw	r2,-4(fp)
    37ac:	10c00115 	stw	r3,4(r2)
			((reg_val_buf[3] << RSSI_LSB_SHIFT) +
			((reg_val_buf[1] & RSSI_LSB_MASK2) >> 1));
		rssi->preamble = RSSI_RESOLUTION *
			((reg_val_buf[2] << RSSI_LSB_SHIFT) +
    37b0:	e0bffc83 	ldbu	r2,-14(fp)
    37b4:	10803fcc 	andi	r2,r2,255
    37b8:	1085883a 	add	r2,r2,r2
    37bc:	1007883a 	mov	r3,r2
			((reg_val_buf[0] & RSSI_LSB_MASK2) >> 1));
    37c0:	e0bffc03 	ldbu	r2,-16(fp)
    37c4:	10803fcc 	andi	r2,r2,255
    37c8:	1080008c 	andi	r2,r2,2
    37cc:	1005d07a 	srai	r2,r2,1
	else if (rssi->ant == 2) {
		rssi->symbol = RSSI_RESOLUTION *
			((reg_val_buf[3] << RSSI_LSB_SHIFT) +
			((reg_val_buf[1] & RSSI_LSB_MASK2) >> 1));
		rssi->preamble = RSSI_RESOLUTION *
			((reg_val_buf[2] << RSSI_LSB_SHIFT) +
    37d0:	1885883a 	add	r2,r3,r2
	}
	else if (rssi->ant == 2) {
		rssi->symbol = RSSI_RESOLUTION *
			((reg_val_buf[3] << RSSI_LSB_SHIFT) +
			((reg_val_buf[1] & RSSI_LSB_MASK2) >> 1));
		rssi->preamble = RSSI_RESOLUTION *
    37d4:	10800664 	muli	r2,r2,25
    37d8:	1007883a 	mov	r3,r2
    37dc:	e0bfff17 	ldw	r2,-4(fp)
    37e0:	10c00215 	stw	r3,8(r2)
    37e4:	00000206 	br	37f0 <ad9361_read_rssi+0x140>
			((reg_val_buf[2] << RSSI_LSB_SHIFT) +
			((reg_val_buf[0] & RSSI_LSB_MASK2) >> 1));
	}
	else
		rc = -EFAULT;
    37e8:	00bffc84 	movi	r2,-14
    37ec:	e0bffa15 	stw	r2,-24(fp)

	rssi->multiplier = RSSI_MULTIPLIER;
    37f0:	e0bfff17 	ldw	r2,-4(fp)
    37f4:	00c01904 	movi	r3,100
    37f8:	10c00315 	stw	r3,12(r2)

	return rc;
    37fc:	e0bffa17 	ldw	r2,-24(fp)
}
    3800:	e037883a 	mov	sp,fp
    3804:	dfc00117 	ldw	ra,4(sp)
    3808:	df000017 	ldw	fp,0(sp)
    380c:	dec00204 	addi	sp,sp,8
    3810:	f800283a 	ret

00003814 <ad9361_rx_adc_setup>:
 * @param adc_sampl_freq_Hz The ADC sampling frequency [Hz].
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_rx_adc_setup(struct ad9361_rf_phy *phy, uint32_t bbpll_freq,
	uint32_t adc_sampl_freq_Hz)
{
    3814:	deffb504 	addi	sp,sp,-300
    3818:	de00012e 	bgeu	sp,et,3820 <ad9361_rx_adc_setup+0xc>
    381c:	003b68fa 	trap	3
    3820:	dfc04a15 	stw	ra,296(sp)
    3824:	df004915 	stw	fp,292(sp)
    3828:	ddc04815 	stw	r23,288(sp)
    382c:	dd804715 	stw	r22,284(sp)
    3830:	dd404615 	stw	r21,280(sp)
    3834:	dd004515 	stw	r20,276(sp)
    3838:	dcc04415 	stw	r19,272(sp)
    383c:	dc804315 	stw	r18,268(sp)
    3840:	dc404215 	stw	r17,264(sp)
    3844:	dc004115 	stw	r16,260(sp)
    3848:	df004904 	addi	fp,sp,292
    384c:	e13fd115 	stw	r4,-188(fp)
    3850:	e17fd215 	stw	r5,-184(fp)
    3854:	e1bfd315 	stw	r6,-180(fp)
	uint64_t tmp, invrc_tconst_1e6;
	uint8_t data[40];
	uint32_t i;
	int32_t ret;

	uint8_t c3_msb = ad9361_spi_read(phy->spi, REG_RX_BBF_C3_MSB);
    3858:	e0bfd117 	ldw	r2,-188(fp)
    385c:	10800117 	ldw	r2,4(r2)
    3860:	1009883a 	mov	r4,r2
    3864:	01407ac4 	movi	r5,491
    3868:	00001500 	call	150 <ad9361_spi_read>
    386c:	e0bfb905 	stb	r2,-284(fp)
	uint8_t c3_lsb = ad9361_spi_read(phy->spi, REG_RX_BBF_C3_LSB);
    3870:	e0bfd117 	ldw	r2,-188(fp)
    3874:	10800117 	ldw	r2,4(r2)
    3878:	1009883a 	mov	r4,r2
    387c:	01407b04 	movi	r5,492
    3880:	00001500 	call	150 <ad9361_spi_read>
    3884:	e0bfb945 	stb	r2,-283(fp)
	uint8_t r2346 = ad9361_spi_read(phy->spi, REG_RX_BBF_R2346);
    3888:	e0bfd117 	ldw	r2,-188(fp)
    388c:	10800117 	ldw	r2,4(r2)
    3890:	1009883a 	mov	r4,r2
    3894:	01407984 	movi	r5,486
    3898:	00001500 	call	150 <ad9361_spi_read>
    389c:	e0bfb985 	stb	r2,-282(fp)
	/*
	* BBBW = (BBPLL / RxTuneDiv) * ln(2) / (1.4 * 2PI )
	* We assume ad9361_rx_bb_analog_filter_calib() is always run prior
	*/

	tmp = bbpll_freq * 10000ULL;
    38a0:	e0bfd217 	ldw	r2,-184(fp)
    38a4:	1021883a 	mov	r16,r2
    38a8:	0023883a 	mov	r17,zero
    38ac:	0089c404 	movi	r2,10000
    38b0:	0007883a 	mov	r3,zero
    38b4:	8009883a 	mov	r4,r16
    38b8:	880b883a 	mov	r5,r17
    38bc:	100d883a 	mov	r6,r2
    38c0:	180f883a 	mov	r7,r3
    38c4:	001c9940 	call	1c994 <__muldi3>
    38c8:	1009883a 	mov	r4,r2
    38cc:	180b883a 	mov	r5,r3
    38d0:	2005883a 	mov	r2,r4
    38d4:	2807883a 	mov	r3,r5
    38d8:	e0bfc315 	stw	r2,-244(fp)
    38dc:	e0ffc415 	stw	r3,-240(fp)
	do_div(&tmp, 126906UL * phy->rxbbf_div);
    38e0:	e0bfd117 	ldw	r2,-188(fp)
    38e4:	10c04d17 	ldw	r3,308(r2)
    38e8:	008000b4 	movhi	r2,2
    38ec:	10bbee84 	addi	r2,r2,-4166
    38f0:	1885383a 	mul	r2,r3,r2
    38f4:	1025883a 	mov	r18,r2
    38f8:	0027883a 	mov	r19,zero
    38fc:	e0bfc304 	addi	r2,fp,-244
    3900:	1009883a 	mov	r4,r2
    3904:	900b883a 	mov	r5,r18
    3908:	980d883a 	mov	r6,r19
    390c:	001c76c0 	call	1c76c <do_div>
	bb_bw_Hz = tmp;
    3910:	e0bfc317 	ldw	r2,-244(fp)
    3914:	e0ffc417 	ldw	r3,-240(fp)
    3918:	e0bfba15 	stw	r2,-280(fp)

	dev_dbg(&phy->spi->dev, "%s : BBBW %"PRIu32" : ADCfreq %"PRIu32,
    391c:	010000b4 	movhi	r4,2
    3920:	211baf04 	addi	r4,r4,28348
    3924:	014000b4 	movhi	r5,2
    3928:	295ea004 	addi	r5,r5,31360
    392c:	e1bfba17 	ldw	r6,-280(fp)
    3930:	e1ffd317 	ldw	r7,-180(fp)
    3934:	001f8180 	call	1f818 <printf>
    3938:	010000b4 	movhi	r4,2
    393c:	211a7504 	addi	r4,r4,27092
    3940:	001f8180 	call	1f818 <printf>
		__func__, bb_bw_Hz, adc_sampl_freq_Hz);

	dev_dbg(&phy->spi->dev, "c3_msb 0x%X : c3_lsb 0x%X : r2346 0x%X : ",
    3944:	e17fb903 	ldbu	r5,-284(fp)
    3948:	e0ffb943 	ldbu	r3,-283(fp)
    394c:	e0bfb983 	ldbu	r2,-282(fp)
    3950:	010000b4 	movhi	r4,2
    3954:	211bb604 	addi	r4,r4,28376
    3958:	180d883a 	mov	r6,r3
    395c:	100f883a 	mov	r7,r2
    3960:	001f8180 	call	1f818 <printf>
    3964:	010000b4 	movhi	r4,2
    3968:	211a7504 	addi	r4,r4,27092
    396c:	001f8180 	call	1f818 <printf>
		c3_msb, c3_lsb, r2346);

	bb_bw_Hz = clamp(bb_bw_Hz, 200000UL, 28000000UL);
    3970:	e0ffba17 	ldw	r3,-280(fp)
    3974:	008000f4 	movhi	r2,3
    3978:	10835004 	addi	r2,r2,3392
    397c:	10c0072e 	bgeu	r2,r3,399c <ad9361_rx_adc_setup+0x188>
    3980:	e0ffba17 	ldw	r3,-280(fp)
    3984:	00806af4 	movhi	r2,427
    3988:	108fc004 	addi	r2,r2,16128
    398c:	10c0052e 	bgeu	r2,r3,39a4 <ad9361_rx_adc_setup+0x190>
    3990:	00c06af4 	movhi	r3,427
    3994:	18cfc004 	addi	r3,r3,16128
    3998:	00000206 	br	39a4 <ad9361_rx_adc_setup+0x190>
    399c:	00c000f4 	movhi	r3,3
    39a0:	18c35004 	addi	r3,r3,3392
    39a4:	e0ffba15 	stw	r3,-280(fp)

	if (adc_sampl_freq_Hz < 80000000)
    39a8:	e0ffd317 	ldw	r3,-180(fp)
    39ac:	00813174 	movhi	r2,1221
    39b0:	10acffc4 	addi	r2,r2,-19457
    39b4:	10c00336 	bltu	r2,r3,39c4 <ad9361_rx_adc_setup+0x1b0>
		scale_snr_1e3 = 1000;
    39b8:	0080fa04 	movi	r2,1000
    39bc:	e0bfb715 	stw	r2,-292(fp)
    39c0:	00000206 	br	39cc <ad9361_rx_adc_setup+0x1b8>
	else
		scale_snr_1e3 = 1585; /* pow(10, scale_snr_dB/10); */
    39c4:	00818c44 	movi	r2,1585
    39c8:	e0bfb715 	stw	r2,-292(fp)

	if (bb_bw_Hz >= 18000000) {
    39cc:	e0ffba17 	ldw	r3,-280(fp)
    39d0:	008044f4 	movhi	r2,275
    39d4:	10aa1fc4 	addi	r2,r2,-22401
    39d8:	10c04b2e 	bgeu	r2,r3,3b08 <ad9361_rx_adc_setup+0x2f4>
		invrc_tconst_1e6 = (160975ULL * r2346 *
    39dc:	e0bfb983 	ldbu	r2,-282(fp)
    39e0:	10803fcc 	andi	r2,r2,255
    39e4:	e0bfd415 	stw	r2,-176(fp)
    39e8:	e03fd515 	stw	zero,-172(fp)
			(160 * c3_msb + 10 * c3_lsb + 140) *
    39ec:	e0bfb903 	ldbu	r2,-284(fp)
    39f0:	10c02824 	muli	r3,r2,160
    39f4:	e0bfb943 	ldbu	r2,-283(fp)
    39f8:	108002a4 	muli	r2,r2,10
    39fc:	1885883a 	add	r2,r3,r2
    3a00:	10802304 	addi	r2,r2,140
		scale_snr_1e3 = 1000;
	else
		scale_snr_1e3 = 1585; /* pow(10, scale_snr_dB/10); */

	if (bb_bw_Hz >= 18000000) {
		invrc_tconst_1e6 = (160975ULL * r2346 *
    3a04:	e0bfd615 	stw	r2,-168(fp)
    3a08:	1005d7fa 	srai	r2,r2,31
    3a0c:	e0bfd715 	stw	r2,-164(fp)
    3a10:	e13fd417 	ldw	r4,-176(fp)
    3a14:	e17fd517 	ldw	r5,-172(fp)
    3a18:	e1bfd617 	ldw	r6,-168(fp)
    3a1c:	e1ffd717 	ldw	r7,-164(fp)
    3a20:	001c9940 	call	1c994 <__muldi3>
    3a24:	1009883a 	mov	r4,r2
    3a28:	180b883a 	mov	r5,r3
    3a2c:	200d883a 	mov	r6,r4
    3a30:	280f883a 	mov	r7,r5
			(160 * c3_msb + 10 * c3_lsb + 140) *
    3a34:	e0bfba17 	ldw	r2,-280(fp)
    3a38:	e0bfd815 	stw	r2,-160(fp)
    3a3c:	e03fd915 	stw	zero,-156(fp)
    3a40:	3009883a 	mov	r4,r6
    3a44:	380b883a 	mov	r5,r7
    3a48:	e1bfd817 	ldw	r6,-160(fp)
    3a4c:	e1ffd917 	ldw	r7,-156(fp)
    3a50:	001c9940 	call	1c994 <__muldi3>
    3a54:	1009883a 	mov	r4,r2
    3a58:	180b883a 	mov	r5,r3
    3a5c:	2021883a 	mov	r16,r4
    3a60:	2823883a 	mov	r17,r5
			(bb_bw_Hz)* (1000 + (10 * (bb_bw_Hz - 18000000) / 1000000)));
    3a64:	e0bfba17 	ldw	r2,-280(fp)
    3a68:	10c002a4 	muli	r3,r2,10
    3a6c:	00bd5174 	movhi	r2,62789
    3a70:	109ac004 	addi	r2,r2,27392
    3a74:	1885883a 	add	r2,r3,r2
    3a78:	1009883a 	mov	r4,r2
    3a7c:	014003f4 	movhi	r5,15
    3a80:	29509004 	addi	r5,r5,16960
    3a84:	001d7a40 	call	1d7a4 <__udivsi3>
    3a88:	1080fa04 	addi	r2,r2,1000
    3a8c:	e0bfda15 	stw	r2,-152(fp)
    3a90:	e03fdb15 	stw	zero,-148(fp)
    3a94:	8009883a 	mov	r4,r16
    3a98:	880b883a 	mov	r5,r17
    3a9c:	e1bfda17 	ldw	r6,-152(fp)
    3aa0:	e1ffdb17 	ldw	r7,-148(fp)
    3aa4:	001c9940 	call	1c994 <__muldi3>
    3aa8:	1009883a 	mov	r4,r2
    3aac:	180b883a 	mov	r5,r3
    3ab0:	200d883a 	mov	r6,r4
    3ab4:	280f883a 	mov	r7,r5
    3ab8:	008000b4 	movhi	r2,2
    3abc:	109d33c4 	addi	r2,r2,29903
    3ac0:	0007883a 	mov	r3,zero
    3ac4:	3009883a 	mov	r4,r6
    3ac8:	380b883a 	mov	r5,r7
    3acc:	100d883a 	mov	r6,r2
    3ad0:	180f883a 	mov	r7,r3
    3ad4:	001c9940 	call	1c994 <__muldi3>
    3ad8:	1009883a 	mov	r4,r2
    3adc:	180b883a 	mov	r5,r3
    3ae0:	2005883a 	mov	r2,r4
    3ae4:	2807883a 	mov	r3,r5
		scale_snr_1e3 = 1000;
	else
		scale_snr_1e3 = 1585; /* pow(10, scale_snr_dB/10); */

	if (bb_bw_Hz >= 18000000) {
		invrc_tconst_1e6 = (160975ULL * r2346 *
    3ae8:	e0bfc515 	stw	r2,-236(fp)
    3aec:	e0ffc615 	stw	r3,-232(fp)
			(160 * c3_msb + 10 * c3_lsb + 140) *
			(bb_bw_Hz)* (1000 + (10 * (bb_bw_Hz - 18000000) / 1000000)));

		do_div(&invrc_tconst_1e6, 1000UL);
    3af0:	e0bfc504 	addi	r2,fp,-236
    3af4:	1009883a 	mov	r4,r2
    3af8:	0140fa04 	movi	r5,1000
    3afc:	000d883a 	mov	r6,zero
    3b00:	001c76c0 	call	1c76c <do_div>
    3b04:	00003006 	br	3bc8 <ad9361_rx_adc_setup+0x3b4>

	}
	else {
		invrc_tconst_1e6 = (160975ULL * r2346 *
    3b08:	e0bfb983 	ldbu	r2,-282(fp)
    3b0c:	10803fcc 	andi	r2,r2,255
    3b10:	e0bfdc15 	stw	r2,-144(fp)
    3b14:	e03fdd15 	stw	zero,-140(fp)
			(160 * c3_msb + 10 * c3_lsb + 140) *
    3b18:	e0bfb903 	ldbu	r2,-284(fp)
    3b1c:	10c02824 	muli	r3,r2,160
    3b20:	e0bfb943 	ldbu	r2,-283(fp)
    3b24:	108002a4 	muli	r2,r2,10
    3b28:	1885883a 	add	r2,r3,r2
    3b2c:	10802304 	addi	r2,r2,140

		do_div(&invrc_tconst_1e6, 1000UL);

	}
	else {
		invrc_tconst_1e6 = (160975ULL * r2346 *
    3b30:	e0bfde15 	stw	r2,-136(fp)
    3b34:	1005d7fa 	srai	r2,r2,31
    3b38:	e0bfdf15 	stw	r2,-132(fp)
    3b3c:	e13fdc17 	ldw	r4,-144(fp)
    3b40:	e17fdd17 	ldw	r5,-140(fp)
    3b44:	e1bfde17 	ldw	r6,-136(fp)
    3b48:	e1ffdf17 	ldw	r7,-132(fp)
    3b4c:	001c9940 	call	1c994 <__muldi3>
    3b50:	1009883a 	mov	r4,r2
    3b54:	180b883a 	mov	r5,r3
    3b58:	200d883a 	mov	r6,r4
    3b5c:	280f883a 	mov	r7,r5
			(160 * c3_msb + 10 * c3_lsb + 140) *
    3b60:	e0bfba17 	ldw	r2,-280(fp)
    3b64:	e0bfe015 	stw	r2,-128(fp)
    3b68:	e03fe115 	stw	zero,-124(fp)
    3b6c:	3009883a 	mov	r4,r6
    3b70:	380b883a 	mov	r5,r7
    3b74:	e1bfe017 	ldw	r6,-128(fp)
    3b78:	e1ffe117 	ldw	r7,-124(fp)
    3b7c:	001c9940 	call	1c994 <__muldi3>
    3b80:	1009883a 	mov	r4,r2
    3b84:	180b883a 	mov	r5,r3
    3b88:	200d883a 	mov	r6,r4
    3b8c:	280f883a 	mov	r7,r5
    3b90:	008000b4 	movhi	r2,2
    3b94:	109d33c4 	addi	r2,r2,29903
    3b98:	0007883a 	mov	r3,zero
    3b9c:	3009883a 	mov	r4,r6
    3ba0:	380b883a 	mov	r5,r7
    3ba4:	100d883a 	mov	r6,r2
    3ba8:	180f883a 	mov	r7,r3
    3bac:	001c9940 	call	1c994 <__muldi3>
    3bb0:	1009883a 	mov	r4,r2
    3bb4:	180b883a 	mov	r5,r3
    3bb8:	2005883a 	mov	r2,r4
    3bbc:	2807883a 	mov	r3,r5

		do_div(&invrc_tconst_1e6, 1000UL);

	}
	else {
		invrc_tconst_1e6 = (160975ULL * r2346 *
    3bc0:	e0bfc515 	stw	r2,-236(fp)
    3bc4:	e0ffc615 	stw	r3,-232(fp)
			(160 * c3_msb + 10 * c3_lsb + 140) *
			(bb_bw_Hz));
	}

	do_div(&invrc_tconst_1e6, 1000000000UL);
    3bc8:	e0bfc504 	addi	r2,fp,-236
    3bcc:	1009883a 	mov	r4,r2
    3bd0:	014ee6f4 	movhi	r5,15259
    3bd4:	29728004 	addi	r5,r5,-13824
    3bd8:	000d883a 	mov	r6,zero
    3bdc:	001c76c0 	call	1c76c <do_div>

	if (invrc_tconst_1e6 > ULONG_MAX)
    3be0:	e0bfc517 	ldw	r2,-236(fp)
    3be4:	e0ffc617 	ldw	r3,-232(fp)
    3be8:	18000626 	beq	r3,zero,3c04 <ad9361_rx_adc_setup+0x3f0>
		dev_err(&phy->spi->dev, "invrc_tconst_1e6 > ULONG_MAX");
    3bec:	010000b4 	movhi	r4,2
    3bf0:	211bc104 	addi	r4,r4,28420
    3bf4:	001f8180 	call	1f818 <printf>
    3bf8:	010000b4 	movhi	r4,2
    3bfc:	211a7504 	addi	r4,r4,27092
    3c00:	001f8180 	call	1f818 <printf>

	sqrt_inv_rc_tconst_1e3 = int_sqrt((uint32_t)invrc_tconst_1e6);
    3c04:	e0bfc517 	ldw	r2,-236(fp)
    3c08:	e0ffc617 	ldw	r3,-232(fp)
    3c0c:	1009883a 	mov	r4,r2
    3c10:	001c5080 	call	1c508 <int_sqrt>
    3c14:	e0bfbb15 	stw	r2,-276(fp)
	maxsnr = 640 / 160;
    3c18:	00800104 	movi	r2,4
    3c1c:	e0bfbc15 	stw	r2,-272(fp)
	scaled_adc_clk_1e6 = DIV_ROUND_CLOSEST(adc_sampl_freq_Hz, 640);
    3c20:	e0bfd317 	ldw	r2,-180(fp)
    3c24:	10805004 	addi	r2,r2,320
    3c28:	1009883a 	mov	r4,r2
    3c2c:	0140a004 	movi	r5,640
    3c30:	001d7a40 	call	1d7a4 <__udivsi3>
    3c34:	e0bfbd15 	stw	r2,-268(fp)
	inv_scaled_adc_clk_1e3 = DIV_ROUND_CLOSEST(640000000,
    3c38:	e0bfd317 	ldw	r2,-180(fp)
    3c3c:	10807d04 	addi	r2,r2,500
    3c40:	1009883a 	mov	r4,r2
    3c44:	0141f404 	movi	r5,2000
    3c48:	001d7a40 	call	1d7a4 <__udivsi3>
    3c4c:	1007883a 	mov	r3,r2
    3c50:	008989b4 	movhi	r2,9766
    3c54:	10a80004 	addi	r2,r2,-24576
    3c58:	18a1883a 	add	r16,r3,r2
    3c5c:	e0bfd317 	ldw	r2,-180(fp)
    3c60:	10807d04 	addi	r2,r2,500
    3c64:	1009883a 	mov	r4,r2
    3c68:	0140fa04 	movi	r5,1000
    3c6c:	001d7a40 	call	1d7a4 <__udivsi3>
    3c70:	8009883a 	mov	r4,r16
    3c74:	100b883a 	mov	r5,r2
    3c78:	001d7a40 	call	1d7a4 <__udivsi3>
    3c7c:	e0bfbe15 	stw	r2,-264(fp)
		DIV_ROUND_CLOSEST(adc_sampl_freq_Hz, 1000));
	tmp_1e3 = DIV_ROUND_CLOSEST(980000 + 20 * max_t(uint32_t, 1000U,
    3c80:	e0bfbc17 	ldw	r2,-272(fp)
    3c84:	1006d07a 	srli	r3,r2,1
    3c88:	e0bfbe17 	ldw	r2,-264(fp)
    3c8c:	1885883a 	add	r2,r3,r2
    3c90:	1009883a 	mov	r4,r2
    3c94:	e17fbc17 	ldw	r5,-272(fp)
    3c98:	001d7a40 	call	1d7a4 <__udivsi3>
    3c9c:	1007883a 	mov	r3,r2
    3ca0:	1880fa28 	cmpgeui	r2,r3,1000
    3ca4:	1000011e 	bne	r2,zero,3cac <ad9361_rx_adc_setup+0x498>
    3ca8:	00c0fa04 	movi	r3,1000
    3cac:	18c00524 	muli	r3,r3,20
    3cb0:	008003f4 	movhi	r2,15
    3cb4:	10bd8504 	addi	r2,r2,-2540
    3cb8:	1885883a 	add	r2,r3,r2
    3cbc:	1009883a 	mov	r4,r2
    3cc0:	0140fa04 	movi	r5,1000
    3cc4:	001d7a40 	call	1d7a4 <__udivsi3>
    3cc8:	e0bfbf15 	stw	r2,-260(fp)
		DIV_ROUND_CLOSEST(inv_scaled_adc_clk_1e3, maxsnr)), 1000);
	sqrt_term_1e3 = int_sqrt(scaled_adc_clk_1e6);
    3ccc:	e13fbd17 	ldw	r4,-268(fp)
    3cd0:	001c5080 	call	1c508 <int_sqrt>
    3cd4:	e0bfc015 	stw	r2,-256(fp)
	min_sqrt_term_1e3 = min_t(uint32_t, 1000U,
    3cd8:	e0ffbc17 	ldw	r3,-272(fp)
    3cdc:	e0bfbd17 	ldw	r2,-268(fp)
    3ce0:	1885383a 	mul	r2,r3,r2
    3ce4:	1009883a 	mov	r4,r2
    3ce8:	001c5080 	call	1c508 <int_sqrt>
    3cec:	1080fa68 	cmpgeui	r2,r2,1001
    3cf0:	1000061e 	bne	r2,zero,3d0c <ad9361_rx_adc_setup+0x4f8>
    3cf4:	e0ffbc17 	ldw	r3,-272(fp)
    3cf8:	e0bfbd17 	ldw	r2,-268(fp)
    3cfc:	1885383a 	mul	r2,r3,r2
    3d00:	1009883a 	mov	r4,r2
    3d04:	001c5080 	call	1c508 <int_sqrt>
    3d08:	00000106 	br	3d10 <ad9361_rx_adc_setup+0x4fc>
    3d0c:	0080fa04 	movi	r2,1000
    3d10:	e0bfc115 	stw	r2,-252(fp)
		int_sqrt(maxsnr * scaled_adc_clk_1e6));

	dev_dbg(&phy->spi->dev, "invrc_tconst_1e6 %"PRIu64", sqrt_inv_rc_tconst_1e3 %"PRIu32,
    3d14:	e0bfc517 	ldw	r2,-236(fp)
    3d18:	e0ffc617 	ldw	r3,-232(fp)
    3d1c:	010000b4 	movhi	r4,2
    3d20:	211bc904 	addi	r4,r4,28452
    3d24:	100b883a 	mov	r5,r2
    3d28:	180d883a 	mov	r6,r3
    3d2c:	e1ffbb17 	ldw	r7,-276(fp)
    3d30:	001f8180 	call	1f818 <printf>
    3d34:	010000b4 	movhi	r4,2
    3d38:	211a7504 	addi	r4,r4,27092
    3d3c:	001f8180 	call	1f818 <printf>
		invrc_tconst_1e6, sqrt_inv_rc_tconst_1e3);
	dev_dbg(&phy->spi->dev, "scaled_adc_clk_1e6 %"PRIu32", inv_scaled_adc_clk_1e3 %"PRIu32,
    3d40:	010000b4 	movhi	r4,2
    3d44:	211bd604 	addi	r4,r4,28504
    3d48:	e17fbd17 	ldw	r5,-268(fp)
    3d4c:	e1bfbe17 	ldw	r6,-264(fp)
    3d50:	001f8180 	call	1f818 <printf>
    3d54:	010000b4 	movhi	r4,2
    3d58:	211a7504 	addi	r4,r4,27092
    3d5c:	001f8180 	call	1f818 <printf>
		scaled_adc_clk_1e6, inv_scaled_adc_clk_1e3);
	dev_dbg(&phy->spi->dev, "tmp_1e3 %"PRIu32", sqrt_term_1e3 %"PRIu32", min_sqrt_term_1e3 %"PRIu32,
    3d60:	010000b4 	movhi	r4,2
    3d64:	211be304 	addi	r4,r4,28556
    3d68:	e17fbf17 	ldw	r5,-260(fp)
    3d6c:	e1bfc017 	ldw	r6,-256(fp)
    3d70:	e1ffc117 	ldw	r7,-252(fp)
    3d74:	001f8180 	call	1f818 <printf>
    3d78:	010000b4 	movhi	r4,2
    3d7c:	211a7504 	addi	r4,r4,27092
    3d80:	001f8180 	call	1f818 <printf>
		tmp_1e3, sqrt_term_1e3, min_sqrt_term_1e3);

	data[0] = 0;
    3d84:	e03fc705 	stb	zero,-228(fp)
	data[1] = 0;
    3d88:	e03fc745 	stb	zero,-227(fp)
	data[2] = 0;
    3d8c:	e03fc785 	stb	zero,-226(fp)
	data[3] = 0x24;
    3d90:	00800904 	movi	r2,36
    3d94:	e0bfc7c5 	stb	r2,-225(fp)
	data[4] = 0x24;
    3d98:	00800904 	movi	r2,36
    3d9c:	e0bfc805 	stb	r2,-224(fp)
	data[5] = 0;
    3da0:	e03fc845 	stb	zero,-223(fp)
	data[6] = 0;
    3da4:	e03fc885 	stb	zero,-222(fp)

	tmp = -50000000 + 8ULL * scale_snr_1e3 * sqrt_inv_rc_tconst_1e3 *
    3da8:	e0bfb717 	ldw	r2,-292(fp)
    3dac:	e0bfe215 	stw	r2,-120(fp)
    3db0:	e03fe315 	stw	zero,-116(fp)
    3db4:	e0bfbb17 	ldw	r2,-276(fp)
    3db8:	e0bfe415 	stw	r2,-112(fp)
    3dbc:	e03fe515 	stw	zero,-108(fp)
    3dc0:	e13fe217 	ldw	r4,-120(fp)
    3dc4:	e17fe317 	ldw	r5,-116(fp)
    3dc8:	e1bfe417 	ldw	r6,-112(fp)
    3dcc:	e1ffe517 	ldw	r7,-108(fp)
    3dd0:	001c9940 	call	1c994 <__muldi3>
    3dd4:	1009883a 	mov	r4,r2
    3dd8:	180b883a 	mov	r5,r3
    3ddc:	200d883a 	mov	r6,r4
    3de0:	280f883a 	mov	r7,r5
    3de4:	e0bfc117 	ldw	r2,-252(fp)
    3de8:	e0bfe615 	stw	r2,-104(fp)
    3dec:	e03fe715 	stw	zero,-100(fp)
    3df0:	3009883a 	mov	r4,r6
    3df4:	380b883a 	mov	r5,r7
    3df8:	e1bfe617 	ldw	r6,-104(fp)
    3dfc:	e1ffe717 	ldw	r7,-100(fp)
    3e00:	001c9940 	call	1c994 <__muldi3>
    3e04:	1009883a 	mov	r4,r2
    3e08:	180b883a 	mov	r5,r3
    3e0c:	200f883a 	mov	r7,r4
    3e10:	2811883a 	mov	r8,r5
    3e14:	00bfe874 	movhi	r2,65441
    3e18:	10a87c04 	addi	r2,r2,-24080
    3e1c:	00ffffc4 	movi	r3,-1
    3e20:	3889883a 	add	r4,r7,r2
    3e24:	21cd803a 	cmpltu	r6,r4,r7
    3e28:	40cb883a 	add	r5,r8,r3
    3e2c:	3145883a 	add	r2,r6,r5
    3e30:	100b883a 	mov	r5,r2
    3e34:	2005883a 	mov	r2,r4
    3e38:	2807883a 	mov	r3,r5
    3e3c:	1008d77a 	srli	r4,r2,29
    3e40:	180a90fa 	slli	r5,r3,3
    3e44:	e17fe915 	stw	r5,-92(fp)
    3e48:	e1bfe917 	ldw	r6,-92(fp)
    3e4c:	2188b03a 	or	r4,r4,r6
    3e50:	e13fe915 	stw	r4,-92(fp)
    3e54:	100e90fa 	slli	r7,r2,3
    3e58:	e1ffe815 	stw	r7,-96(fp)
    3e5c:	e0bfe817 	ldw	r2,-96(fp)
    3e60:	e0bfc315 	stw	r2,-244(fp)
    3e64:	e13fe917 	ldw	r4,-92(fp)
    3e68:	e13fc415 	stw	r4,-240(fp)
		min_sqrt_term_1e3;
	do_div(&tmp, 100000000UL);
    3e6c:	e0bfc304 	addi	r2,fp,-244
    3e70:	1009883a 	mov	r4,r2
    3e74:	01417db4 	movhi	r5,1526
    3e78:	29784004 	addi	r5,r5,-7936
    3e7c:	000d883a 	mov	r6,zero
    3e80:	001c76c0 	call	1c76c <do_div>
	data[7] = min_t(uint64_t, 124U, tmp);
    3e84:	e13fc317 	ldw	r4,-244(fp)
    3e88:	e17fc417 	ldw	r5,-240(fp)
    3e8c:	2005883a 	mov	r2,r4
    3e90:	2807883a 	mov	r3,r5
    3e94:	1800031e 	bne	r3,zero,3ea4 <ad9361_rx_adc_setup+0x690>
    3e98:	1800041e 	bne	r3,zero,3eac <ad9361_rx_adc_setup+0x698>
    3e9c:	11001f68 	cmpgeui	r4,r2,125
    3ea0:	20000226 	beq	r4,zero,3eac <ad9361_rx_adc_setup+0x698>
    3ea4:	00801f04 	movi	r2,124
    3ea8:	0007883a 	mov	r3,zero
    3eac:	e0bfc8c5 	stb	r2,-221(fp)

	tmp = (invrc_tconst_1e6 >> 1) + 20 * inv_scaled_adc_clk_1e3 *
    3eb0:	e0bfc517 	ldw	r2,-236(fp)
    3eb4:	e0ffc617 	ldw	r3,-232(fp)
    3eb8:	180897fa 	slli	r4,r3,31
    3ebc:	102cd07a 	srli	r22,r2,1
    3ec0:	25acb03a 	or	r22,r4,r22
    3ec4:	182ed07a 	srli	r23,r3,1
		data[7] / 80 * 1000ULL;
    3ec8:	e0bfc8c3 	ldbu	r2,-221(fp)
	tmp = -50000000 + 8ULL * scale_snr_1e3 * sqrt_inv_rc_tconst_1e3 *
		min_sqrt_term_1e3;
	do_div(&tmp, 100000000UL);
	data[7] = min_t(uint64_t, 124U, tmp);

	tmp = (invrc_tconst_1e6 >> 1) + 20 * inv_scaled_adc_clk_1e3 *
    3ecc:	10c03fcc 	andi	r3,r2,255
    3ed0:	e0bfbe17 	ldw	r2,-264(fp)
    3ed4:	1885383a 	mul	r2,r3,r2
    3ed8:	10800524 	muli	r2,r2,20
		data[7] / 80 * 1000ULL;
    3edc:	1009883a 	mov	r4,r2
    3ee0:	01401404 	movi	r5,80
    3ee4:	001d7a40 	call	1d7a4 <__udivsi3>
    3ee8:	e0bfea15 	stw	r2,-88(fp)
    3eec:	e03feb15 	stw	zero,-84(fp)
    3ef0:	0080fa04 	movi	r2,1000
    3ef4:	0007883a 	mov	r3,zero
    3ef8:	e13fea17 	ldw	r4,-88(fp)
    3efc:	e17feb17 	ldw	r5,-84(fp)
    3f00:	100d883a 	mov	r6,r2
    3f04:	180f883a 	mov	r7,r3
    3f08:	001c9940 	call	1c994 <__muldi3>
    3f0c:	100d883a 	mov	r6,r2
    3f10:	180f883a 	mov	r7,r3
    3f14:	3009883a 	mov	r4,r6
    3f18:	380b883a 	mov	r5,r7
	tmp = -50000000 + 8ULL * scale_snr_1e3 * sqrt_inv_rc_tconst_1e3 *
		min_sqrt_term_1e3;
	do_div(&tmp, 100000000UL);
	data[7] = min_t(uint64_t, 124U, tmp);

	tmp = (invrc_tconst_1e6 >> 1) + 20 * inv_scaled_adc_clk_1e3 *
    3f1c:	b105883a 	add	r2,r22,r4
    3f20:	158d803a 	cmpltu	r6,r2,r22
    3f24:	b947883a 	add	r3,r23,r5
    3f28:	30c9883a 	add	r4,r6,r3
    3f2c:	2007883a 	mov	r3,r4
    3f30:	1009883a 	mov	r4,r2
    3f34:	180b883a 	mov	r5,r3
    3f38:	e13fc315 	stw	r4,-244(fp)
    3f3c:	e17fc415 	stw	r5,-240(fp)
		data[7] / 80 * 1000ULL;
	do_div(&tmp, invrc_tconst_1e6);
    3f40:	e0bfc517 	ldw	r2,-236(fp)
    3f44:	e0ffc617 	ldw	r3,-232(fp)
    3f48:	e13fc304 	addi	r4,fp,-244
    3f4c:	100b883a 	mov	r5,r2
    3f50:	180d883a 	mov	r6,r3
    3f54:	001c76c0 	call	1c76c <do_div>
	data[8] = min_t(uint64_t, 255U, tmp);
    3f58:	e13fc317 	ldw	r4,-244(fp)
    3f5c:	e17fc417 	ldw	r5,-240(fp)
    3f60:	2005883a 	mov	r2,r4
    3f64:	2807883a 	mov	r3,r5
    3f68:	1800031e 	bne	r3,zero,3f78 <ad9361_rx_adc_setup+0x764>
    3f6c:	1800041e 	bne	r3,zero,3f80 <ad9361_rx_adc_setup+0x76c>
    3f70:	11004028 	cmpgeui	r4,r2,256
    3f74:	20000226 	beq	r4,zero,3f80 <ad9361_rx_adc_setup+0x76c>
    3f78:	00803fc4 	movi	r2,255
    3f7c:	0007883a 	mov	r3,zero
    3f80:	e0bfc905 	stb	r2,-220(fp)

	tmp = (-500000 + 77ULL * sqrt_inv_rc_tconst_1e3 * min_sqrt_term_1e3);
    3f84:	e0bfbb17 	ldw	r2,-276(fp)
    3f88:	e0bfec15 	stw	r2,-80(fp)
    3f8c:	e03fed15 	stw	zero,-76(fp)
    3f90:	e0bfc117 	ldw	r2,-252(fp)
    3f94:	e0bfee15 	stw	r2,-72(fp)
    3f98:	e03fef15 	stw	zero,-68(fp)
    3f9c:	e13fec17 	ldw	r4,-80(fp)
    3fa0:	e17fed17 	ldw	r5,-76(fp)
    3fa4:	e1bfee17 	ldw	r6,-72(fp)
    3fa8:	e1ffef17 	ldw	r7,-68(fp)
    3fac:	001c9940 	call	1c994 <__muldi3>
    3fb0:	100f883a 	mov	r7,r2
    3fb4:	1811883a 	mov	r8,r3
    3fb8:	380b883a 	mov	r5,r7
    3fbc:	400d883a 	mov	r6,r8
    3fc0:	00801344 	movi	r2,77
    3fc4:	0007883a 	mov	r3,zero
    3fc8:	2809883a 	mov	r4,r5
    3fcc:	300b883a 	mov	r5,r6
    3fd0:	100d883a 	mov	r6,r2
    3fd4:	180f883a 	mov	r7,r3
    3fd8:	001c9940 	call	1c994 <__muldi3>
    3fdc:	1009883a 	mov	r4,r2
    3fe0:	180b883a 	mov	r5,r3
    3fe4:	200d883a 	mov	r6,r4
    3fe8:	280f883a 	mov	r7,r5
    3fec:	013ffe34 	movhi	r4,65528
    3ff0:	2117b804 	addi	r4,r4,24288
    3ff4:	017fffc4 	movi	r5,-1
    3ff8:	3105883a 	add	r2,r6,r4
    3ffc:	1191803a 	cmpltu	r8,r2,r6
    4000:	3947883a 	add	r3,r7,r5
    4004:	40c9883a 	add	r4,r8,r3
    4008:	2007883a 	mov	r3,r4
    400c:	1009883a 	mov	r4,r2
    4010:	180b883a 	mov	r5,r3
    4014:	e13fc315 	stw	r4,-244(fp)
    4018:	e17fc415 	stw	r5,-240(fp)
	do_div(&tmp, 1000000UL);
    401c:	e0bfc304 	addi	r2,fp,-244
    4020:	1009883a 	mov	r4,r2
    4024:	014003f4 	movhi	r5,15
    4028:	29509004 	addi	r5,r5,16960
    402c:	000d883a 	mov	r6,zero
    4030:	001c76c0 	call	1c76c <do_div>
	data[10] = min_t(uint64_t, 127U, tmp);
    4034:	e13fc317 	ldw	r4,-244(fp)
    4038:	e17fc417 	ldw	r5,-240(fp)
    403c:	2005883a 	mov	r2,r4
    4040:	2807883a 	mov	r3,r5
    4044:	1800031e 	bne	r3,zero,4054 <ad9361_rx_adc_setup+0x840>
    4048:	1800041e 	bne	r3,zero,405c <ad9361_rx_adc_setup+0x848>
    404c:	11002028 	cmpgeui	r4,r2,128
    4050:	20000226 	beq	r4,zero,405c <ad9361_rx_adc_setup+0x848>
    4054:	00801fc4 	movi	r2,127
    4058:	0007883a 	mov	r3,zero
    405c:	e0bfc985 	stb	r2,-218(fp)

	data[9] = min_t(uint32_t, 127U, ((800 * data[10]) / 1000));
    4060:	e0bfc983 	ldbu	r2,-218(fp)
    4064:	10803fcc 	andi	r2,r2,255
    4068:	1080c824 	muli	r2,r2,800
    406c:	1009883a 	mov	r4,r2
    4070:	0140fa04 	movi	r5,1000
    4074:	001d6e40 	call	1d6e4 <__divsi3>
    4078:	10c02030 	cmpltui	r3,r2,128
    407c:	1800011e 	bne	r3,zero,4084 <ad9361_rx_adc_setup+0x870>
    4080:	00801fc4 	movi	r2,127
    4084:	e0bfc945 	stb	r2,-219(fp)
	tmp = ((invrc_tconst_1e6 >> 1) + (20 * inv_scaled_adc_clk_1e3 *
    4088:	e0bfc517 	ldw	r2,-236(fp)
    408c:	e0ffc617 	ldw	r3,-232(fp)
    4090:	180897fa 	slli	r4,r3,31
    4094:	1028d07a 	srli	r20,r2,1
    4098:	2528b03a 	or	r20,r4,r20
    409c:	182ad07a 	srli	r21,r3,1
		data[10] * 1000ULL));
    40a0:	e0bfc983 	ldbu	r2,-218(fp)
	tmp = (-500000 + 77ULL * sqrt_inv_rc_tconst_1e3 * min_sqrt_term_1e3);
	do_div(&tmp, 1000000UL);
	data[10] = min_t(uint64_t, 127U, tmp);

	data[9] = min_t(uint32_t, 127U, ((800 * data[10]) / 1000));
	tmp = ((invrc_tconst_1e6 >> 1) + (20 * inv_scaled_adc_clk_1e3 *
    40a4:	10c03fcc 	andi	r3,r2,255
    40a8:	e0bfbe17 	ldw	r2,-264(fp)
    40ac:	1885383a 	mul	r2,r3,r2
    40b0:	10800524 	muli	r2,r2,20
		data[10] * 1000ULL));
    40b4:	e0bff015 	stw	r2,-64(fp)
    40b8:	e03ff115 	stw	zero,-60(fp)
    40bc:	0080fa04 	movi	r2,1000
    40c0:	0007883a 	mov	r3,zero
    40c4:	e13ff017 	ldw	r4,-64(fp)
    40c8:	e17ff117 	ldw	r5,-60(fp)
    40cc:	100d883a 	mov	r6,r2
    40d0:	180f883a 	mov	r7,r3
    40d4:	001c9940 	call	1c994 <__muldi3>
    40d8:	100d883a 	mov	r6,r2
    40dc:	180f883a 	mov	r7,r3
    40e0:	3009883a 	mov	r4,r6
    40e4:	380b883a 	mov	r5,r7
	tmp = (-500000 + 77ULL * sqrt_inv_rc_tconst_1e3 * min_sqrt_term_1e3);
	do_div(&tmp, 1000000UL);
	data[10] = min_t(uint64_t, 127U, tmp);

	data[9] = min_t(uint32_t, 127U, ((800 * data[10]) / 1000));
	tmp = ((invrc_tconst_1e6 >> 1) + (20 * inv_scaled_adc_clk_1e3 *
    40e8:	a105883a 	add	r2,r20,r4
    40ec:	150d803a 	cmpltu	r6,r2,r20
    40f0:	a947883a 	add	r3,r21,r5
    40f4:	30c9883a 	add	r4,r6,r3
    40f8:	2007883a 	mov	r3,r4
    40fc:	1009883a 	mov	r4,r2
    4100:	180b883a 	mov	r5,r3
    4104:	e13fc315 	stw	r4,-244(fp)
    4108:	e17fc415 	stw	r5,-240(fp)
		data[10] * 1000ULL));
	do_div(&tmp, invrc_tconst_1e6 * 77);
    410c:	e0bfc517 	ldw	r2,-236(fp)
    4110:	e0ffc617 	ldw	r3,-232(fp)
    4114:	01c01344 	movi	r7,77
    4118:	0011883a 	mov	r8,zero
    411c:	1009883a 	mov	r4,r2
    4120:	180b883a 	mov	r5,r3
    4124:	380d883a 	mov	r6,r7
    4128:	400f883a 	mov	r7,r8
    412c:	001c9940 	call	1c994 <__muldi3>
    4130:	1009883a 	mov	r4,r2
    4134:	180b883a 	mov	r5,r3
    4138:	2005883a 	mov	r2,r4
    413c:	2807883a 	mov	r3,r5
    4140:	e13fc304 	addi	r4,fp,-244
    4144:	100b883a 	mov	r5,r2
    4148:	180d883a 	mov	r6,r3
    414c:	001c76c0 	call	1c76c <do_div>
	data[11] = min_t(uint64_t, 255U, tmp);
    4150:	e13fc317 	ldw	r4,-244(fp)
    4154:	e17fc417 	ldw	r5,-240(fp)
    4158:	2005883a 	mov	r2,r4
    415c:	2807883a 	mov	r3,r5
    4160:	1800031e 	bne	r3,zero,4170 <ad9361_rx_adc_setup+0x95c>
    4164:	1800041e 	bne	r3,zero,4178 <ad9361_rx_adc_setup+0x964>
    4168:	11004028 	cmpgeui	r4,r2,256
    416c:	20000226 	beq	r4,zero,4178 <ad9361_rx_adc_setup+0x964>
    4170:	00803fc4 	movi	r2,255
    4174:	0007883a 	mov	r3,zero
    4178:	e0bfc9c5 	stb	r2,-217(fp)
	data[12] = min_t(uint32_t, 127U, (-500000 + 80 * sqrt_inv_rc_tconst_1e3 *
    417c:	e0ffbb17 	ldw	r3,-276(fp)
    4180:	e0bfc117 	ldw	r2,-252(fp)
    4184:	1885383a 	mul	r2,r3,r2
    4188:	10c01424 	muli	r3,r2,80
    418c:	00bffe34 	movhi	r2,65528
    4190:	1097b804 	addi	r2,r2,24288
    4194:	1887883a 	add	r3,r3,r2
    4198:	0081e874 	movhi	r2,1953
    419c:	1087ffc4 	addi	r2,r2,8191
    41a0:	10c00c36 	bltu	r2,r3,41d4 <ad9361_rx_adc_setup+0x9c0>
    41a4:	e0ffbb17 	ldw	r3,-276(fp)
    41a8:	e0bfc117 	ldw	r2,-252(fp)
    41ac:	1885383a 	mul	r2,r3,r2
    41b0:	10c01424 	muli	r3,r2,80
    41b4:	00bffe34 	movhi	r2,65528
    41b8:	1097b804 	addi	r2,r2,24288
    41bc:	1885883a 	add	r2,r3,r2
    41c0:	1009883a 	mov	r4,r2
    41c4:	014003f4 	movhi	r5,15
    41c8:	29509004 	addi	r5,r5,16960
    41cc:	001d7a40 	call	1d7a4 <__udivsi3>
    41d0:	00000106 	br	41d8 <ad9361_rx_adc_setup+0x9c4>
    41d4:	00801fc4 	movi	r2,127
    41d8:	e0bfca05 	stb	r2,-216(fp)
		min_sqrt_term_1e3) / 1000000UL);

	tmp = -3 * (long)(invrc_tconst_1e6 >> 1) + inv_scaled_adc_clk_1e3 *
    41dc:	e0bfc517 	ldw	r2,-236(fp)
    41e0:	e0ffc617 	ldw	r3,-232(fp)
    41e4:	180897fa 	slli	r4,r3,31
    41e8:	100ad07a 	srli	r5,r2,1
    41ec:	e17ff215 	stw	r5,-56(fp)
    41f0:	e1bff217 	ldw	r6,-56(fp)
    41f4:	2188b03a 	or	r4,r4,r6
    41f8:	e13ff215 	stw	r4,-56(fp)
    41fc:	180ed07a 	srli	r7,r3,1
    4200:	e1fff315 	stw	r7,-52(fp)
    4204:	e0bff217 	ldw	r2,-56(fp)
    4208:	10bfff64 	muli	r2,r2,-3
    420c:	e0bff415 	stw	r2,-48(fp)
    4210:	1005d7fa 	srai	r2,r2,31
    4214:	e0bff515 	stw	r2,-44(fp)
		data[12] * (1000ULL * 20 / 80);
    4218:	e0bfca03 	ldbu	r2,-216(fp)
	do_div(&tmp, invrc_tconst_1e6 * 77);
	data[11] = min_t(uint64_t, 255U, tmp);
	data[12] = min_t(uint32_t, 127U, (-500000 + 80 * sqrt_inv_rc_tconst_1e3 *
		min_sqrt_term_1e3) / 1000000UL);

	tmp = -3 * (long)(invrc_tconst_1e6 >> 1) + inv_scaled_adc_clk_1e3 *
    421c:	10c03fcc 	andi	r3,r2,255
    4220:	e0bfbe17 	ldw	r2,-264(fp)
    4224:	1885383a 	mul	r2,r3,r2
		data[12] * (1000ULL * 20 / 80);
    4228:	e0bff615 	stw	r2,-40(fp)
    422c:	e03ff715 	stw	zero,-36(fp)
    4230:	00803e84 	movi	r2,250
    4234:	0007883a 	mov	r3,zero
    4238:	e13ff617 	ldw	r4,-40(fp)
    423c:	e17ff717 	ldw	r5,-36(fp)
    4240:	100d883a 	mov	r6,r2
    4244:	180f883a 	mov	r7,r3
    4248:	001c9940 	call	1c994 <__muldi3>
    424c:	100d883a 	mov	r6,r2
    4250:	180f883a 	mov	r7,r3
    4254:	3009883a 	mov	r4,r6
    4258:	380b883a 	mov	r5,r7
	do_div(&tmp, invrc_tconst_1e6 * 77);
	data[11] = min_t(uint64_t, 255U, tmp);
	data[12] = min_t(uint32_t, 127U, (-500000 + 80 * sqrt_inv_rc_tconst_1e3 *
		min_sqrt_term_1e3) / 1000000UL);

	tmp = -3 * (long)(invrc_tconst_1e6 >> 1) + inv_scaled_adc_clk_1e3 *
    425c:	e1bff417 	ldw	r6,-48(fp)
    4260:	3105883a 	add	r2,r6,r4
    4264:	e1fff417 	ldw	r7,-48(fp)
    4268:	11cd803a 	cmpltu	r6,r2,r7
    426c:	e1fff517 	ldw	r7,-44(fp)
    4270:	3947883a 	add	r3,r7,r5
    4274:	30c9883a 	add	r4,r6,r3
    4278:	2007883a 	mov	r3,r4
    427c:	1009883a 	mov	r4,r2
    4280:	180b883a 	mov	r5,r3
    4284:	e13fc315 	stw	r4,-244(fp)
    4288:	e17fc415 	stw	r5,-240(fp)
		data[12] * (1000ULL * 20 / 80);
	do_div(&tmp, invrc_tconst_1e6);
    428c:	e0bfc517 	ldw	r2,-236(fp)
    4290:	e0ffc617 	ldw	r3,-232(fp)
    4294:	e13fc304 	addi	r4,fp,-244
    4298:	100b883a 	mov	r5,r2
    429c:	180d883a 	mov	r6,r3
    42a0:	001c76c0 	call	1c76c <do_div>
	data[13] = min_t(uint64_t, 255, tmp);
    42a4:	e13fc317 	ldw	r4,-244(fp)
    42a8:	e17fc417 	ldw	r5,-240(fp)
    42ac:	2005883a 	mov	r2,r4
    42b0:	2807883a 	mov	r3,r5
    42b4:	1800031e 	bne	r3,zero,42c4 <ad9361_rx_adc_setup+0xab0>
    42b8:	1800041e 	bne	r3,zero,42cc <ad9361_rx_adc_setup+0xab8>
    42bc:	11004028 	cmpgeui	r4,r2,256
    42c0:	20000226 	beq	r4,zero,42cc <ad9361_rx_adc_setup+0xab8>
    42c4:	00803fc4 	movi	r2,255
    42c8:	0007883a 	mov	r3,zero
    42cc:	e0bfca45 	stb	r2,-215(fp)

	data[14] = 21 * (inv_scaled_adc_clk_1e3 / 10000);
    42d0:	e0bfbe17 	ldw	r2,-264(fp)
    42d4:	1009883a 	mov	r4,r2
    42d8:	0149c404 	movi	r5,10000
    42dc:	001d7a40 	call	1d7a4 <__udivsi3>
    42e0:	10800564 	muli	r2,r2,21
    42e4:	e0bfca85 	stb	r2,-214(fp)
	data[15] = min_t(uint32_t, 127U, (500 + 1025 * data[7]) / 1000);
    42e8:	e0bfc8c3 	ldbu	r2,-221(fp)
    42ec:	10803fcc 	andi	r2,r2,255
    42f0:	10810064 	muli	r2,r2,1025
    42f4:	10807d04 	addi	r2,r2,500
    42f8:	1009883a 	mov	r4,r2
    42fc:	0140fa04 	movi	r5,1000
    4300:	001d6e40 	call	1d6e4 <__divsi3>
    4304:	10c02030 	cmpltui	r3,r2,128
    4308:	1800011e 	bne	r3,zero,4310 <ad9361_rx_adc_setup+0xafc>
    430c:	00801fc4 	movi	r2,127
    4310:	e0bfcac5 	stb	r2,-213(fp)
	data[16] = min_t(uint32_t, 127U, (data[15] * tmp_1e3) / 1000);
    4314:	e0bfcac3 	ldbu	r2,-213(fp)
    4318:	10c03fcc 	andi	r3,r2,255
    431c:	e0bfbf17 	ldw	r2,-260(fp)
    4320:	1887383a 	mul	r3,r3,r2
    4324:	008000b4 	movhi	r2,2
    4328:	10bcffc4 	addi	r2,r2,-3073
    432c:	10c00836 	bltu	r2,r3,4350 <ad9361_rx_adc_setup+0xb3c>
    4330:	e0bfcac3 	ldbu	r2,-213(fp)
    4334:	10c03fcc 	andi	r3,r2,255
    4338:	e0bfbf17 	ldw	r2,-260(fp)
    433c:	1885383a 	mul	r2,r3,r2
    4340:	1009883a 	mov	r4,r2
    4344:	0140fa04 	movi	r5,1000
    4348:	001d7a40 	call	1d7a4 <__udivsi3>
    434c:	00000106 	br	4354 <ad9361_rx_adc_setup+0xb40>
    4350:	00801fc4 	movi	r2,127
    4354:	e0bfcb05 	stb	r2,-212(fp)
	data[17] = data[15];
    4358:	e0bfcac3 	ldbu	r2,-213(fp)
    435c:	e0bfcb45 	stb	r2,-211(fp)
	data[18] = min_t(uint32_t, 127U, (500 + 975 * data[10]) / 1000);
    4360:	e0bfc983 	ldbu	r2,-218(fp)
    4364:	10803fcc 	andi	r2,r2,255
    4368:	1080f3e4 	muli	r2,r2,975
    436c:	10807d04 	addi	r2,r2,500
    4370:	1009883a 	mov	r4,r2
    4374:	0140fa04 	movi	r5,1000
    4378:	001d6e40 	call	1d6e4 <__divsi3>
    437c:	10c02030 	cmpltui	r3,r2,128
    4380:	1800011e 	bne	r3,zero,4388 <ad9361_rx_adc_setup+0xb74>
    4384:	00801fc4 	movi	r2,127
    4388:	e0bfcb85 	stb	r2,-210(fp)
	data[19] = min_t(uint32_t, 127U, (data[18] * tmp_1e3) / 1000);
    438c:	e0bfcb83 	ldbu	r2,-210(fp)
    4390:	10c03fcc 	andi	r3,r2,255
    4394:	e0bfbf17 	ldw	r2,-260(fp)
    4398:	1887383a 	mul	r3,r3,r2
    439c:	008000b4 	movhi	r2,2
    43a0:	10bcffc4 	addi	r2,r2,-3073
    43a4:	10c00836 	bltu	r2,r3,43c8 <ad9361_rx_adc_setup+0xbb4>
    43a8:	e0bfcb83 	ldbu	r2,-210(fp)
    43ac:	10c03fcc 	andi	r3,r2,255
    43b0:	e0bfbf17 	ldw	r2,-260(fp)
    43b4:	1885383a 	mul	r2,r3,r2
    43b8:	1009883a 	mov	r4,r2
    43bc:	0140fa04 	movi	r5,1000
    43c0:	001d7a40 	call	1d7a4 <__udivsi3>
    43c4:	00000106 	br	43cc <ad9361_rx_adc_setup+0xbb8>
    43c8:	00801fc4 	movi	r2,127
    43cc:	e0bfcbc5 	stb	r2,-209(fp)
	data[20] = data[18];
    43d0:	e0bfcb83 	ldbu	r2,-210(fp)
    43d4:	e0bfcc05 	stb	r2,-208(fp)
	data[21] = min_t(uint32_t, 127U, (500 + 975 * data[12]) / 1000);
    43d8:	e0bfca03 	ldbu	r2,-216(fp)
    43dc:	10803fcc 	andi	r2,r2,255
    43e0:	1080f3e4 	muli	r2,r2,975
    43e4:	10807d04 	addi	r2,r2,500
    43e8:	1009883a 	mov	r4,r2
    43ec:	0140fa04 	movi	r5,1000
    43f0:	001d6e40 	call	1d6e4 <__divsi3>
    43f4:	10c02030 	cmpltui	r3,r2,128
    43f8:	1800011e 	bne	r3,zero,4400 <ad9361_rx_adc_setup+0xbec>
    43fc:	00801fc4 	movi	r2,127
    4400:	e0bfcc45 	stb	r2,-207(fp)
	data[22] = min_t(uint32_t, 127, (data[21] * tmp_1e3) / 1000);
    4404:	e0bfcc43 	ldbu	r2,-207(fp)
    4408:	10c03fcc 	andi	r3,r2,255
    440c:	e0bfbf17 	ldw	r2,-260(fp)
    4410:	1887383a 	mul	r3,r3,r2
    4414:	008000b4 	movhi	r2,2
    4418:	10bcffc4 	addi	r2,r2,-3073
    441c:	10c00836 	bltu	r2,r3,4440 <ad9361_rx_adc_setup+0xc2c>
    4420:	e0bfcc43 	ldbu	r2,-207(fp)
    4424:	10c03fcc 	andi	r3,r2,255
    4428:	e0bfbf17 	ldw	r2,-260(fp)
    442c:	1885383a 	mul	r2,r3,r2
    4430:	1009883a 	mov	r4,r2
    4434:	0140fa04 	movi	r5,1000
    4438:	001d7a40 	call	1d7a4 <__udivsi3>
    443c:	00000106 	br	4444 <ad9361_rx_adc_setup+0xc30>
    4440:	00801fc4 	movi	r2,127
    4444:	e0bfcc85 	stb	r2,-206(fp)
	data[23] = data[21];
    4448:	e0bfcc43 	ldbu	r2,-207(fp)
    444c:	e0bfccc5 	stb	r2,-205(fp)
	data[24] = 0x2E;
    4450:	00800b84 	movi	r2,46
    4454:	e0bfcd05 	stb	r2,-204(fp)
	data[25] = (128 + min_t(uint32_t, 63000U, DIV_ROUND_CLOSEST(63 *
    4458:	e0bfbd17 	ldw	r2,-268(fp)
    445c:	10800fe4 	muli	r2,r2,63
    4460:	10c07d04 	addi	r3,r2,500
    4464:	0080f074 	movhi	r2,961
    4468:	109469c4 	addi	r2,r2,20903
    446c:	10c00936 	bltu	r2,r3,4494 <ad9361_rx_adc_setup+0xc80>
    4470:	e0bfbd17 	ldw	r2,-268(fp)
    4474:	10800fe4 	muli	r2,r2,63
    4478:	10807d04 	addi	r2,r2,500
    447c:	1009883a 	mov	r4,r2
    4480:	014003f4 	movhi	r5,15
    4484:	29509004 	addi	r5,r5,16960
    4488:	001d7a40 	call	1d7a4 <__udivsi3>
    448c:	10bfe004 	addi	r2,r2,-128
    4490:	00000106 	br	4498 <ad9361_rx_adc_setup+0xc84>
    4494:	00bfefc4 	movi	r2,-65
    4498:	e0bfcd45 	stb	r2,-203(fp)
		scaled_adc_clk_1e6, 1000)) / 1000);
	data[26] = min_t(uint32_t, 63U, 63 * scaled_adc_clk_1e6 / 1000000 *
    449c:	e0bfbd17 	ldw	r2,-268(fp)
    44a0:	10800fe4 	muli	r2,r2,63
    44a4:	1009883a 	mov	r4,r2
    44a8:	014003f4 	movhi	r5,15
    44ac:	29509004 	addi	r5,r5,16960
    44b0:	001d7a40 	call	1d7a4 <__udivsi3>
    44b4:	1021883a 	mov	r16,r2
    44b8:	e0bfbe17 	ldw	r2,-264(fp)
    44bc:	10801424 	muli	r2,r2,80
    44c0:	1009883a 	mov	r4,r2
    44c4:	0140fa04 	movi	r5,1000
    44c8:	001d7a40 	call	1d7a4 <__udivsi3>
    44cc:	1080e604 	addi	r2,r2,920
    44d0:	8085383a 	mul	r2,r16,r2
    44d4:	10be8028 	cmpgeui	r2,r2,64000
    44d8:	1000121e 	bne	r2,zero,4524 <ad9361_rx_adc_setup+0xd10>
    44dc:	e0bfbd17 	ldw	r2,-268(fp)
    44e0:	10800fe4 	muli	r2,r2,63
    44e4:	1009883a 	mov	r4,r2
    44e8:	014003f4 	movhi	r5,15
    44ec:	29509004 	addi	r5,r5,16960
    44f0:	001d7a40 	call	1d7a4 <__udivsi3>
    44f4:	1021883a 	mov	r16,r2
    44f8:	e0bfbe17 	ldw	r2,-264(fp)
    44fc:	10801424 	muli	r2,r2,80
    4500:	1009883a 	mov	r4,r2
    4504:	0140fa04 	movi	r5,1000
    4508:	001d7a40 	call	1d7a4 <__udivsi3>
    450c:	1080e604 	addi	r2,r2,920
    4510:	8085383a 	mul	r2,r16,r2
    4514:	1009883a 	mov	r4,r2
    4518:	0140fa04 	movi	r5,1000
    451c:	001d7a40 	call	1d7a4 <__udivsi3>
    4520:	00000106 	br	4528 <ad9361_rx_adc_setup+0xd14>
    4524:	00800fc4 	movi	r2,63
    4528:	e0bfcd85 	stb	r2,-202(fp)
		(920 + 80 * inv_scaled_adc_clk_1e3 / 1000) / 1000);
	data[27] = min_t(uint32_t, 63, (32 * sqrt_term_1e3) / 1000);
    452c:	e0bfc017 	ldw	r2,-256(fp)
    4530:	1004917a 	slli	r2,r2,5
    4534:	10be8028 	cmpgeui	r2,r2,64000
    4538:	1000061e 	bne	r2,zero,4554 <ad9361_rx_adc_setup+0xd40>
    453c:	e0bfc017 	ldw	r2,-256(fp)
    4540:	1004917a 	slli	r2,r2,5
    4544:	1009883a 	mov	r4,r2
    4548:	0140fa04 	movi	r5,1000
    454c:	001d7a40 	call	1d7a4 <__udivsi3>
    4550:	00000106 	br	4558 <ad9361_rx_adc_setup+0xd44>
    4554:	00800fc4 	movi	r2,63
    4558:	e0bfcdc5 	stb	r2,-201(fp)
	data[28] = data[25];
    455c:	e0bfcd43 	ldbu	r2,-203(fp)
    4560:	e0bfce05 	stb	r2,-200(fp)
	data[29] = data[26];
    4564:	e0bfcd83 	ldbu	r2,-202(fp)
    4568:	e0bfce45 	stb	r2,-199(fp)
	data[30] = data[27];
    456c:	e0bfcdc3 	ldbu	r2,-201(fp)
    4570:	e0bfce85 	stb	r2,-198(fp)
	data[31] = data[25];
    4574:	e0bfcd43 	ldbu	r2,-203(fp)
    4578:	e0bfcec5 	stb	r2,-197(fp)
	data[32] = data[26];
    457c:	e0bfcd83 	ldbu	r2,-202(fp)
    4580:	e0bfcf05 	stb	r2,-196(fp)
	data[33] = min_t(uint32_t, 63U, 63 * sqrt_term_1e3 / 1000);
    4584:	e0bfc017 	ldw	r2,-256(fp)
    4588:	10800fe4 	muli	r2,r2,63
    458c:	10be8028 	cmpgeui	r2,r2,64000
    4590:	1000061e 	bne	r2,zero,45ac <ad9361_rx_adc_setup+0xd98>
    4594:	e0bfc017 	ldw	r2,-256(fp)
    4598:	10800fe4 	muli	r2,r2,63
    459c:	1009883a 	mov	r4,r2
    45a0:	0140fa04 	movi	r5,1000
    45a4:	001d7a40 	call	1d7a4 <__udivsi3>
    45a8:	00000106 	br	45b0 <ad9361_rx_adc_setup+0xd9c>
    45ac:	00800fc4 	movi	r2,63
    45b0:	e0bfcf45 	stb	r2,-195(fp)
	data[34] = min_t(uint32_t, 127U, 64 * sqrt_term_1e3 / 1000);
    45b4:	e0bfc017 	ldw	r2,-256(fp)
    45b8:	100691ba 	slli	r3,r2,6
    45bc:	008000b4 	movhi	r2,2
    45c0:	10bcffc4 	addi	r2,r2,-3073
    45c4:	10c00636 	bltu	r2,r3,45e0 <ad9361_rx_adc_setup+0xdcc>
    45c8:	e0bfc017 	ldw	r2,-256(fp)
    45cc:	100491ba 	slli	r2,r2,6
    45d0:	1009883a 	mov	r4,r2
    45d4:	0140fa04 	movi	r5,1000
    45d8:	001d7a40 	call	1d7a4 <__udivsi3>
    45dc:	00000106 	br	45e4 <ad9361_rx_adc_setup+0xdd0>
    45e0:	00801fc4 	movi	r2,127
    45e4:	e0bfcf85 	stb	r2,-194(fp)
	data[35] = 0x40;
    45e8:	00801004 	movi	r2,64
    45ec:	e0bfcfc5 	stb	r2,-193(fp)
	data[36] = 0x40;
    45f0:	00801004 	movi	r2,64
    45f4:	e0bfd005 	stb	r2,-192(fp)
	data[37] = 0x2C;
    45f8:	00800b04 	movi	r2,44
    45fc:	e0bfd045 	stb	r2,-191(fp)
	data[38] = 0x00;
    4600:	e03fd085 	stb	zero,-190(fp)
	data[39] = 0x00;
    4604:	e03fd0c5 	stb	zero,-189(fp)

	for (i = 0; i < 40; i++) {
    4608:	e03fb815 	stw	zero,-288(fp)
    460c:	00001306 	br	465c <ad9361_rx_adc_setup+0xe48>
		ret = ad9361_spi_write(phy->spi, 0x200 + i, data[i]);
    4610:	e0bfd117 	ldw	r2,-188(fp)
    4614:	11000117 	ldw	r4,4(r2)
    4618:	e0bfb817 	ldw	r2,-288(fp)
    461c:	11408004 	addi	r5,r2,512
    4620:	e0ffc704 	addi	r3,fp,-228
    4624:	e0bfb817 	ldw	r2,-288(fp)
    4628:	1885883a 	add	r2,r3,r2
    462c:	10800003 	ldbu	r2,0(r2)
    4630:	10803fcc 	andi	r2,r2,255
    4634:	100d883a 	mov	r6,r2
    4638:	00002600 	call	260 <ad9361_spi_write>
    463c:	e0bfc215 	stw	r2,-248(fp)
		if (ret < 0)
    4640:	e0bfc217 	ldw	r2,-248(fp)
    4644:	1000020e 	bge	r2,zero,4650 <ad9361_rx_adc_setup+0xe3c>
			return ret;
    4648:	e0bfc217 	ldw	r2,-248(fp)
    464c:	00000706 	br	466c <ad9361_rx_adc_setup+0xe58>
	data[36] = 0x40;
	data[37] = 0x2C;
	data[38] = 0x00;
	data[39] = 0x00;

	for (i = 0; i < 40; i++) {
    4650:	e0bfb817 	ldw	r2,-288(fp)
    4654:	10800044 	addi	r2,r2,1
    4658:	e0bfb815 	stw	r2,-288(fp)
    465c:	e0bfb817 	ldw	r2,-288(fp)
    4660:	10800a30 	cmpltui	r2,r2,40
    4664:	103fea1e 	bne	r2,zero,4610 <_gp+0xfffd24f0>
		ret = ad9361_spi_write(phy->spi, 0x200 + i, data[i]);
		if (ret < 0)
			return ret;
	}

	return 0;
    4668:	0005883a 	mov	r2,zero
}
    466c:	e6fff804 	addi	sp,fp,-32
    4670:	dfc00917 	ldw	ra,36(sp)
    4674:	df000817 	ldw	fp,32(sp)
    4678:	ddc00717 	ldw	r23,28(sp)
    467c:	dd800617 	ldw	r22,24(sp)
    4680:	dd400517 	ldw	r21,20(sp)
    4684:	dd000417 	ldw	r20,16(sp)
    4688:	dcc00317 	ldw	r19,12(sp)
    468c:	dc800217 	ldw	r18,8(sp)
    4690:	dc400117 	ldw	r17,4(sp)
    4694:	dc000017 	ldw	r16,0(sp)
    4698:	dec00a04 	addi	sp,sp,40
    469c:	f800283a 	ret

000046a0 <ad9361_rx_tia_calib>:
 * @param phy The AD9361 state structure.
 * @param bb_bw_Hz The baseband bandwidth [Hz].
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_rx_tia_calib(struct ad9361_rf_phy *phy, uint32_t bb_bw_Hz)
{
    46a0:	defff304 	addi	sp,sp,-52
    46a4:	de00012e 	bgeu	sp,et,46ac <ad9361_rx_tia_calib+0xc>
    46a8:	003b68fa 	trap	3
    46ac:	dfc00c15 	stw	ra,48(sp)
    46b0:	df000b15 	stw	fp,44(sp)
    46b4:	dc400a15 	stw	r17,40(sp)
    46b8:	dc000915 	stw	r16,36(sp)
    46bc:	df000b04 	addi	fp,sp,44
    46c0:	e13ffc15 	stw	r4,-16(fp)
    46c4:	e17ffd15 	stw	r5,-12(fp)
	uint32_t Cbbf, R2346;
	uint64_t CTIA_fF;

	uint8_t reg1EB = ad9361_spi_read(phy->spi, REG_RX_BBF_C3_MSB);
    46c8:	e0bffc17 	ldw	r2,-16(fp)
    46cc:	10800117 	ldw	r2,4(r2)
    46d0:	1009883a 	mov	r4,r2
    46d4:	01407ac4 	movi	r5,491
    46d8:	00001500 	call	150 <ad9361_spi_read>
    46dc:	e0bff645 	stb	r2,-39(fp)
	uint8_t reg1EC = ad9361_spi_read(phy->spi, REG_RX_BBF_C3_LSB);
    46e0:	e0bffc17 	ldw	r2,-16(fp)
    46e4:	10800117 	ldw	r2,4(r2)
    46e8:	1009883a 	mov	r4,r2
    46ec:	01407b04 	movi	r5,492
    46f0:	00001500 	call	150 <ad9361_spi_read>
    46f4:	e0bff685 	stb	r2,-38(fp)
	uint8_t reg1E6 = ad9361_spi_read(phy->spi, REG_RX_BBF_R2346);
    46f8:	e0bffc17 	ldw	r2,-16(fp)
    46fc:	10800117 	ldw	r2,4(r2)
    4700:	1009883a 	mov	r4,r2
    4704:	01407984 	movi	r5,486
    4708:	00001500 	call	150 <ad9361_spi_read>
    470c:	e0bff6c5 	stb	r2,-37(fp)
	uint8_t reg1DB, reg1DF, reg1DD, reg1DC, reg1DE, temp;

	dev_dbg(&phy->spi->dev, "%s : bb_bw_Hz %"PRIu32,
    4710:	010000b4 	movhi	r4,2
    4714:	211bf104 	addi	r4,r4,28612
    4718:	014000b4 	movhi	r5,2
    471c:	295ea504 	addi	r5,r5,31380
    4720:	e1bffd17 	ldw	r6,-12(fp)
    4724:	001f8180 	call	1f818 <printf>
    4728:	010000b4 	movhi	r4,2
    472c:	211a7504 	addi	r4,r4,27092
    4730:	001f8180 	call	1f818 <printf>
		__func__, bb_bw_Hz);

	bb_bw_Hz = clamp(bb_bw_Hz, 200000UL, 20000000UL);
    4734:	e0fffd17 	ldw	r3,-12(fp)
    4738:	008000f4 	movhi	r2,3
    473c:	10835004 	addi	r2,r2,3392
    4740:	10c0072e 	bgeu	r2,r3,4760 <ad9361_rx_tia_calib+0xc0>
    4744:	e0bffd17 	ldw	r2,-12(fp)
    4748:	00c04c74 	movhi	r3,305
    474c:	18cb4004 	addi	r3,r3,11520
    4750:	1880052e 	bgeu	r3,r2,4768 <ad9361_rx_tia_calib+0xc8>
    4754:	00804c74 	movhi	r2,305
    4758:	108b4004 	addi	r2,r2,11520
    475c:	00000206 	br	4768 <ad9361_rx_tia_calib+0xc8>
    4760:	008000f4 	movhi	r2,3
    4764:	10835004 	addi	r2,r2,3392
    4768:	e0bffd15 	stw	r2,-12(fp)

	Cbbf = (reg1EB * 160) + (reg1EC * 10) + 140; /* fF */
    476c:	e0bff643 	ldbu	r2,-39(fp)
    4770:	10c02824 	muli	r3,r2,160
    4774:	e0bff683 	ldbu	r2,-38(fp)
    4778:	108002a4 	muli	r2,r2,10
    477c:	1885883a 	add	r2,r3,r2
    4780:	10802304 	addi	r2,r2,140
    4784:	e0bff715 	stw	r2,-36(fp)
	R2346 = 18300 * RX_BBF_R2346(reg1E6);
    4788:	e0bff6c3 	ldbu	r2,-37(fp)
    478c:	108001cc 	andi	r2,r2,7
    4790:	1091df24 	muli	r2,r2,18300
    4794:	e0bff815 	stw	r2,-32(fp)

	CTIA_fF = Cbbf * R2346 * 560ULL;
    4798:	e0fff717 	ldw	r3,-36(fp)
    479c:	e0bff817 	ldw	r2,-32(fp)
    47a0:	1885383a 	mul	r2,r3,r2
    47a4:	1021883a 	mov	r16,r2
    47a8:	0023883a 	mov	r17,zero
    47ac:	00808c04 	movi	r2,560
    47b0:	0007883a 	mov	r3,zero
    47b4:	8009883a 	mov	r4,r16
    47b8:	880b883a 	mov	r5,r17
    47bc:	100d883a 	mov	r6,r2
    47c0:	180f883a 	mov	r7,r3
    47c4:	001c9940 	call	1c994 <__muldi3>
    47c8:	1009883a 	mov	r4,r2
    47cc:	180b883a 	mov	r5,r3
    47d0:	2005883a 	mov	r2,r4
    47d4:	2807883a 	mov	r3,r5
    47d8:	e0bffa15 	stw	r2,-24(fp)
    47dc:	e0fffb15 	stw	r3,-20(fp)
	do_div(&CTIA_fF, 3500000UL);
    47e0:	e0bffa04 	addi	r2,fp,-24
    47e4:	1009883a 	mov	r4,r2
    47e8:	01400d74 	movhi	r5,53
    47ec:	2959f804 	addi	r5,r5,26592
    47f0:	000d883a 	mov	r6,zero
    47f4:	001c76c0 	call	1c76c <do_div>

	if (bb_bw_Hz <= 3000000UL)
    47f8:	e0fffd17 	ldw	r3,-12(fp)
    47fc:	00800bb4 	movhi	r2,46
    4800:	10b1b004 	addi	r2,r2,-14656
    4804:	10c00336 	bltu	r2,r3,4814 <ad9361_rx_tia_calib+0x174>
		reg1DB = 0xE0;
    4808:	00bff804 	movi	r2,-32
    480c:	e0bff505 	stb	r2,-44(fp)
    4810:	00000906 	br	4838 <ad9361_rx_tia_calib+0x198>
	else if (bb_bw_Hz <= 10000000UL)
    4814:	e0fffd17 	ldw	r3,-12(fp)
    4818:	00802674 	movhi	r2,153
    481c:	10a5a004 	addi	r2,r2,-27008
    4820:	10c00336 	bltu	r2,r3,4830 <ad9361_rx_tia_calib+0x190>
		reg1DB = 0x60;
    4824:	00801804 	movi	r2,96
    4828:	e0bff505 	stb	r2,-44(fp)
    482c:	00000206 	br	4838 <ad9361_rx_tia_calib+0x198>
	else
		reg1DB = 0x20;
    4830:	00800804 	movi	r2,32
    4834:	e0bff505 	stb	r2,-44(fp)

	if (CTIA_fF > 2920ULL) {
    4838:	e0bffa17 	ldw	r2,-24(fp)
    483c:	e0fffb17 	ldw	r3,-20(fp)
    4840:	1800031e 	bne	r3,zero,4850 <ad9361_rx_tia_calib+0x1b0>
    4844:	1800191e 	bne	r3,zero,48ac <ad9361_rx_tia_calib+0x20c>
    4848:	1082da68 	cmpgeui	r2,r2,2921
    484c:	10001726 	beq	r2,zero,48ac <ad9361_rx_tia_calib+0x20c>
		reg1DC = 0x40;
    4850:	00801004 	movi	r2,64
    4854:	e0bff5c5 	stb	r2,-41(fp)
		reg1DE = 0x40;
    4858:	00801004 	movi	r2,64
    485c:	e0bff605 	stb	r2,-40(fp)
		temp = min(127U, DIV_ROUND_CLOSEST((uint32_t)CTIA_fF - 400, 320U));
    4860:	e0bffa17 	ldw	r2,-24(fp)
    4864:	e0fffb17 	ldw	r3,-20(fp)
    4868:	10bfc404 	addi	r2,r2,-240
    486c:	10a80028 	cmpgeui	r2,r2,40960
    4870:	1000071e 	bne	r2,zero,4890 <ad9361_rx_tia_calib+0x1f0>
    4874:	e0bffa17 	ldw	r2,-24(fp)
    4878:	e0fffb17 	ldw	r3,-20(fp)
    487c:	10bfc404 	addi	r2,r2,-240
    4880:	1009883a 	mov	r4,r2
    4884:	01405004 	movi	r5,320
    4888:	001d7a40 	call	1d7a4 <__udivsi3>
    488c:	00000106 	br	4894 <ad9361_rx_tia_calib+0x1f4>
    4890:	00801fc4 	movi	r2,127
    4894:	e0bff905 	stb	r2,-28(fp)
		reg1DD = temp;
    4898:	e0bff903 	ldbu	r2,-28(fp)
    489c:	e0bff585 	stb	r2,-42(fp)
		reg1DF = temp;
    48a0:	e0bff903 	ldbu	r2,-28(fp)
    48a4:	e0bff545 	stb	r2,-43(fp)
    48a8:	00000e06 	br	48e4 <ad9361_rx_tia_calib+0x244>
	}
	else {
		temp = DIV_ROUND_CLOSEST((uint32_t)CTIA_fF - 400, 40U) + 0x40;
    48ac:	e0bffa17 	ldw	r2,-24(fp)
    48b0:	e0fffb17 	ldw	r3,-20(fp)
    48b4:	10bfa104 	addi	r2,r2,-380
    48b8:	1009883a 	mov	r4,r2
    48bc:	01400a04 	movi	r5,40
    48c0:	001d7a40 	call	1d7a4 <__udivsi3>
    48c4:	10801004 	addi	r2,r2,64
    48c8:	e0bff905 	stb	r2,-28(fp)
		reg1DC = temp;
    48cc:	e0bff903 	ldbu	r2,-28(fp)
    48d0:	e0bff5c5 	stb	r2,-41(fp)
		reg1DE = temp;
    48d4:	e0bff903 	ldbu	r2,-28(fp)
    48d8:	e0bff605 	stb	r2,-40(fp)
		reg1DD = 0;
    48dc:	e03ff585 	stb	zero,-42(fp)
		reg1DF = 0;
    48e0:	e03ff545 	stb	zero,-43(fp)
	}

	ad9361_spi_write(phy->spi, REG_RX_TIA_CONFIG, reg1DB);
    48e4:	e0bffc17 	ldw	r2,-16(fp)
    48e8:	10c00117 	ldw	r3,4(r2)
    48ec:	e0bff503 	ldbu	r2,-44(fp)
    48f0:	1809883a 	mov	r4,r3
    48f4:	014076c4 	movi	r5,475
    48f8:	100d883a 	mov	r6,r2
    48fc:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(phy->spi, REG_TIA1_C_LSB, reg1DC);
    4900:	e0bffc17 	ldw	r2,-16(fp)
    4904:	10c00117 	ldw	r3,4(r2)
    4908:	e0bff5c3 	ldbu	r2,-41(fp)
    490c:	1809883a 	mov	r4,r3
    4910:	01407704 	movi	r5,476
    4914:	100d883a 	mov	r6,r2
    4918:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(phy->spi, REG_TIA1_C_MSB, reg1DD);
    491c:	e0bffc17 	ldw	r2,-16(fp)
    4920:	10c00117 	ldw	r3,4(r2)
    4924:	e0bff583 	ldbu	r2,-42(fp)
    4928:	1809883a 	mov	r4,r3
    492c:	01407744 	movi	r5,477
    4930:	100d883a 	mov	r6,r2
    4934:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(phy->spi, REG_TIA2_C_LSB, reg1DE);
    4938:	e0bffc17 	ldw	r2,-16(fp)
    493c:	10c00117 	ldw	r3,4(r2)
    4940:	e0bff603 	ldbu	r2,-40(fp)
    4944:	1809883a 	mov	r4,r3
    4948:	01407784 	movi	r5,478
    494c:	100d883a 	mov	r6,r2
    4950:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(phy->spi, REG_TIA2_C_MSB, reg1DF);
    4954:	e0bffc17 	ldw	r2,-16(fp)
    4958:	10c00117 	ldw	r3,4(r2)
    495c:	e0bff543 	ldbu	r2,-43(fp)
    4960:	1809883a 	mov	r4,r3
    4964:	014077c4 	movi	r5,479
    4968:	100d883a 	mov	r6,r2
    496c:	00002600 	call	260 <ad9361_spi_write>

	return 0;
    4970:	0005883a 	mov	r2,zero
}
    4974:	e6fffe04 	addi	sp,fp,-8
    4978:	dfc00317 	ldw	ra,12(sp)
    497c:	df000217 	ldw	fp,8(sp)
    4980:	dc400117 	ldw	r17,4(sp)
    4984:	dc000017 	ldw	r16,0(sp)
    4988:	dec00404 	addi	sp,sp,16
    498c:	f800283a 	ret

00004990 <ad9361_rx_bb_analog_filter_calib>:
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_rx_bb_analog_filter_calib(struct ad9361_rf_phy *phy,
	uint32_t rx_bb_bw,
	uint32_t bbpll_freq)
{
    4990:	defff604 	addi	sp,sp,-40
    4994:	de00012e 	bgeu	sp,et,499c <ad9361_rx_bb_analog_filter_calib+0xc>
    4998:	003b68fa 	trap	3
    499c:	dfc00915 	stw	ra,36(sp)
    49a0:	df000815 	stw	fp,32(sp)
    49a4:	dc000715 	stw	r16,28(sp)
    49a8:	df000804 	addi	fp,sp,32
    49ac:	e13ffc15 	stw	r4,-16(fp)
    49b0:	e17ffd15 	stw	r5,-12(fp)
    49b4:	e1bffe15 	stw	r6,-8(fp)
	uint32_t target;
	uint8_t tmp;
	int32_t ret;

	dev_dbg(&phy->spi->dev, "%s : rx_bb_bw %"PRIu32" bbpll_freq %"PRIu32,
    49b8:	010000b4 	movhi	r4,2
    49bc:	211bf604 	addi	r4,r4,28632
    49c0:	014000b4 	movhi	r5,2
    49c4:	295eaa04 	addi	r5,r5,31400
    49c8:	e1bffd17 	ldw	r6,-12(fp)
    49cc:	e1fffe17 	ldw	r7,-8(fp)
    49d0:	001f8180 	call	1f818 <printf>
    49d4:	010000b4 	movhi	r4,2
    49d8:	211a7504 	addi	r4,r4,27092
    49dc:	001f8180 	call	1f818 <printf>
		__func__, rx_bb_bw, bbpll_freq);

	rx_bb_bw = clamp(rx_bb_bw, 200000UL, 28000000UL);
    49e0:	e0fffd17 	ldw	r3,-12(fp)
    49e4:	008000f4 	movhi	r2,3
    49e8:	10835004 	addi	r2,r2,3392
    49ec:	10c0072e 	bgeu	r2,r3,4a0c <ad9361_rx_bb_analog_filter_calib+0x7c>
    49f0:	e0bffd17 	ldw	r2,-12(fp)
    49f4:	00c06af4 	movhi	r3,427
    49f8:	18cfc004 	addi	r3,r3,16128
    49fc:	1880052e 	bgeu	r3,r2,4a14 <ad9361_rx_bb_analog_filter_calib+0x84>
    4a00:	00806af4 	movhi	r2,427
    4a04:	108fc004 	addi	r2,r2,16128
    4a08:	00000206 	br	4a14 <ad9361_rx_bb_analog_filter_calib+0x84>
    4a0c:	008000f4 	movhi	r2,3
    4a10:	10835004 	addi	r2,r2,3392
    4a14:	e0bffd15 	stw	r2,-12(fp)

	/* 1.4 * BBBW * 2PI / ln(2) */
	target = 126906UL * (rx_bb_bw / 10000UL);
    4a18:	e0bffd17 	ldw	r2,-12(fp)
    4a1c:	1009883a 	mov	r4,r2
    4a20:	0149c404 	movi	r5,10000
    4a24:	001d7a40 	call	1d7a4 <__udivsi3>
    4a28:	1007883a 	mov	r3,r2
    4a2c:	008000b4 	movhi	r2,2
    4a30:	10bbee84 	addi	r2,r2,-4166
    4a34:	1885383a 	mul	r2,r3,r2
    4a38:	e0bff915 	stw	r2,-28(fp)
	phy->rxbbf_div = min_t(uint32_t, 511UL, DIV_ROUND_UP(bbpll_freq, target));
    4a3c:	e0fffe17 	ldw	r3,-8(fp)
    4a40:	e0bff917 	ldw	r2,-28(fp)
    4a44:	1885883a 	add	r2,r3,r2
    4a48:	10bfffc4 	addi	r2,r2,-1
    4a4c:	1009883a 	mov	r4,r2
    4a50:	e17ff917 	ldw	r5,-28(fp)
    4a54:	001d7a40 	call	1d7a4 <__udivsi3>
    4a58:	10c08030 	cmpltui	r3,r2,512
    4a5c:	1800011e 	bne	r3,zero,4a64 <ad9361_rx_bb_analog_filter_calib+0xd4>
    4a60:	00807fc4 	movi	r2,511
    4a64:	e0fffc17 	ldw	r3,-16(fp)
    4a68:	18804d15 	stw	r2,308(r3)

	/* Set RX baseband filter divide value */
	ad9361_spi_write(phy->spi, REG_RX_BBF_TUNE_DIVIDE, phy->rxbbf_div);
    4a6c:	e0bffc17 	ldw	r2,-16(fp)
    4a70:	10c00117 	ldw	r3,4(r2)
    4a74:	e0bffc17 	ldw	r2,-16(fp)
    4a78:	10804d17 	ldw	r2,308(r2)
    4a7c:	1809883a 	mov	r4,r3
    4a80:	01407e04 	movi	r5,504
    4a84:	100d883a 	mov	r6,r2
    4a88:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_writef(phy->spi, REG_RX_BBF_TUNE_CONFIG, BIT(0), phy->rxbbf_div >> 8);
    4a8c:	e0bffc17 	ldw	r2,-16(fp)
    4a90:	14000117 	ldw	r16,4(r2)
    4a94:	01000044 	movi	r4,1
    4a98:	001c8300 	call	1c830 <find_first_bit>
    4a9c:	1007883a 	mov	r3,r2
    4aa0:	e0bffc17 	ldw	r2,-16(fp)
    4aa4:	10804d17 	ldw	r2,308(r2)
    4aa8:	1004d23a 	srli	r2,r2,8
    4aac:	d8800015 	stw	r2,0(sp)
    4ab0:	8009883a 	mov	r4,r16
    4ab4:	01407e44 	movi	r5,505
    4ab8:	01800044 	movi	r6,1
    4abc:	180f883a 	mov	r7,r3
    4ac0:	000031c0 	call	31c <__ad9361_spi_writef>

	/* Write the BBBW into registers 0x1FB and 0x1FC */
	ad9361_spi_write(phy->spi, REG_RX_BBBW_MHZ, rx_bb_bw / 1000000UL);
    4ac4:	e0bffc17 	ldw	r2,-16(fp)
    4ac8:	14000117 	ldw	r16,4(r2)
    4acc:	e0bffd17 	ldw	r2,-12(fp)
    4ad0:	1009883a 	mov	r4,r2
    4ad4:	014003f4 	movhi	r5,15
    4ad8:	29509004 	addi	r5,r5,16960
    4adc:	001d7a40 	call	1d7a4 <__udivsi3>
    4ae0:	8009883a 	mov	r4,r16
    4ae4:	01407ec4 	movi	r5,507
    4ae8:	100d883a 	mov	r6,r2
    4aec:	00002600 	call	260 <ad9361_spi_write>

	tmp = DIV_ROUND_CLOSEST((rx_bb_bw % 1000000UL) * 128, 1000000UL);
    4af0:	e0bffd17 	ldw	r2,-12(fp)
    4af4:	1009883a 	mov	r4,r2
    4af8:	014003f4 	movhi	r5,15
    4afc:	29509004 	addi	r5,r5,16960
    4b00:	001d7b40 	call	1d7b4 <__umodsi3>
    4b04:	100691fa 	slli	r3,r2,7
    4b08:	00800234 	movhi	r2,8
    4b0c:	10a84804 	addi	r2,r2,-24288
    4b10:	1885883a 	add	r2,r3,r2
    4b14:	1009883a 	mov	r4,r2
    4b18:	014003f4 	movhi	r5,15
    4b1c:	29509004 	addi	r5,r5,16960
    4b20:	001d7a40 	call	1d7a4 <__udivsi3>
    4b24:	e0bffa05 	stb	r2,-24(fp)
	ad9361_spi_write(phy->spi, REG_RX_BBBW_KHZ, min_t(uint8_t, 127, tmp));
    4b28:	e0bffc17 	ldw	r2,-16(fp)
    4b2c:	10c00117 	ldw	r3,4(r2)
    4b30:	e0bffa03 	ldbu	r2,-24(fp)
    4b34:	10803fcc 	andi	r2,r2,255
    4b38:	1080201c 	xori	r2,r2,128
    4b3c:	10bfe004 	addi	r2,r2,-128
    4b40:	10000216 	blt	r2,zero,4b4c <ad9361_rx_bb_analog_filter_calib+0x1bc>
    4b44:	e0bffa03 	ldbu	r2,-24(fp)
    4b48:	00000106 	br	4b50 <ad9361_rx_bb_analog_filter_calib+0x1c0>
    4b4c:	00801fc4 	movi	r2,127
    4b50:	1809883a 	mov	r4,r3
    4b54:	01407f04 	movi	r5,508
    4b58:	100d883a 	mov	r6,r2
    4b5c:	00002600 	call	260 <ad9361_spi_write>

	ad9361_spi_write(phy->spi, REG_RX_MIX_LO_CM, RX_MIX_LO_CM(0x3F)); /* Set Rx Mix LO CM */
    4b60:	e0bffc17 	ldw	r2,-16(fp)
    4b64:	10800117 	ldw	r2,4(r2)
    4b68:	1009883a 	mov	r4,r2
    4b6c:	01407544 	movi	r5,469
    4b70:	01800fc4 	movi	r6,63
    4b74:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(phy->spi, REG_RX_MIX_GM_CONFIG, RX_MIX_GM_PLOAD(3)); /* Set GM common mode */
    4b78:	e0bffc17 	ldw	r2,-16(fp)
    4b7c:	10800117 	ldw	r2,4(r2)
    4b80:	1009883a 	mov	r4,r2
    4b84:	01407004 	movi	r5,448
    4b88:	018000c4 	movi	r6,3
    4b8c:	00002600 	call	260 <ad9361_spi_write>

	/* Enable the RX BBF tune circuit by writing 0x1E2=0x02 and 0x1E3=0x02 */
	ad9361_spi_write(phy->spi, REG_RX1_TUNE_CTRL, RX1_TUNE_RESAMPLE);
    4b90:	e0bffc17 	ldw	r2,-16(fp)
    4b94:	10800117 	ldw	r2,4(r2)
    4b98:	1009883a 	mov	r4,r2
    4b9c:	01407884 	movi	r5,482
    4ba0:	01800084 	movi	r6,2
    4ba4:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(phy->spi, REG_RX2_TUNE_CTRL, RX2_TUNE_RESAMPLE);
    4ba8:	e0bffc17 	ldw	r2,-16(fp)
    4bac:	10800117 	ldw	r2,4(r2)
    4bb0:	1009883a 	mov	r4,r2
    4bb4:	014078c4 	movi	r5,483
    4bb8:	01800084 	movi	r6,2
    4bbc:	00002600 	call	260 <ad9361_spi_write>

	/* Start the RX Baseband Filter calibration in register 0x016[7] */
	/* Calibration is complete when register 0x016[7] self clears */
	ret = ad9361_run_calibration(phy, RX_BB_TUNE_CAL);
    4bc0:	e13ffc17 	ldw	r4,-16(fp)
    4bc4:	01402004 	movi	r5,128
    4bc8:	0000f900 	call	f90 <ad9361_run_calibration>
    4bcc:	e0bffb15 	stw	r2,-20(fp)

	/* Disable the RX baseband filter tune circuit, write 0x1E2=3, 0x1E3=3 */
	ad9361_spi_write(phy->spi, REG_RX1_TUNE_CTRL,
    4bd0:	e0bffc17 	ldw	r2,-16(fp)
    4bd4:	10800117 	ldw	r2,4(r2)
    4bd8:	1009883a 	mov	r4,r2
    4bdc:	01407884 	movi	r5,482
    4be0:	018000c4 	movi	r6,3
    4be4:	00002600 	call	260 <ad9361_spi_write>
		RX1_TUNE_RESAMPLE | RX1_PD_TUNE);
	ad9361_spi_write(phy->spi, REG_RX2_TUNE_CTRL,
    4be8:	e0bffc17 	ldw	r2,-16(fp)
    4bec:	10800117 	ldw	r2,4(r2)
    4bf0:	1009883a 	mov	r4,r2
    4bf4:	014078c4 	movi	r5,483
    4bf8:	018000c4 	movi	r6,3
    4bfc:	00002600 	call	260 <ad9361_spi_write>
		RX2_TUNE_RESAMPLE | RX2_PD_TUNE);

	return ret;
    4c00:	e0bffb17 	ldw	r2,-20(fp)
}
    4c04:	e6ffff04 	addi	sp,fp,-4
    4c08:	dfc00217 	ldw	ra,8(sp)
    4c0c:	df000117 	ldw	fp,4(sp)
    4c10:	dc000017 	ldw	r16,0(sp)
    4c14:	dec00304 	addi	sp,sp,12
    4c18:	f800283a 	ret

00004c1c <ad9361_tx_bb_analog_filter_calib>:
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_tx_bb_analog_filter_calib(struct ad9361_rf_phy *phy,
	uint32_t tx_bb_bw,
	uint32_t bbpll_freq)
{
    4c1c:	defff604 	addi	sp,sp,-40
    4c20:	de00012e 	bgeu	sp,et,4c28 <ad9361_tx_bb_analog_filter_calib+0xc>
    4c24:	003b68fa 	trap	3
    4c28:	dfc00915 	stw	ra,36(sp)
    4c2c:	df000815 	stw	fp,32(sp)
    4c30:	dc000715 	stw	r16,28(sp)
    4c34:	df000804 	addi	fp,sp,32
    4c38:	e13ffc15 	stw	r4,-16(fp)
    4c3c:	e17ffd15 	stw	r5,-12(fp)
    4c40:	e1bffe15 	stw	r6,-8(fp)
	uint32_t target, txbbf_div;
	int32_t ret;

	dev_dbg(&phy->spi->dev, "%s : tx_bb_bw %"PRIu32" bbpll_freq %"PRIu32,
    4c44:	010000b4 	movhi	r4,2
    4c48:	211bff04 	addi	r4,r4,28668
    4c4c:	014000b4 	movhi	r5,2
    4c50:	295eb304 	addi	r5,r5,31436
    4c54:	e1bffd17 	ldw	r6,-12(fp)
    4c58:	e1fffe17 	ldw	r7,-8(fp)
    4c5c:	001f8180 	call	1f818 <printf>
    4c60:	010000b4 	movhi	r4,2
    4c64:	211a7504 	addi	r4,r4,27092
    4c68:	001f8180 	call	1f818 <printf>
		__func__, tx_bb_bw, bbpll_freq);

	tx_bb_bw = clamp(tx_bb_bw, 625000UL, 20000000UL);
    4c6c:	e0fffd17 	ldw	r3,-12(fp)
    4c70:	008002b4 	movhi	r2,10
    4c74:	10a25a04 	addi	r2,r2,-30360
    4c78:	10c0072e 	bgeu	r2,r3,4c98 <ad9361_tx_bb_analog_filter_calib+0x7c>
    4c7c:	e0bffd17 	ldw	r2,-12(fp)
    4c80:	00c04c74 	movhi	r3,305
    4c84:	18cb4004 	addi	r3,r3,11520
    4c88:	1880052e 	bgeu	r3,r2,4ca0 <ad9361_tx_bb_analog_filter_calib+0x84>
    4c8c:	00804c74 	movhi	r2,305
    4c90:	108b4004 	addi	r2,r2,11520
    4c94:	00000206 	br	4ca0 <ad9361_tx_bb_analog_filter_calib+0x84>
    4c98:	008002b4 	movhi	r2,10
    4c9c:	10a25a04 	addi	r2,r2,-30360
    4ca0:	e0bffd15 	stw	r2,-12(fp)

	/* 1.6 * BBBW * 2PI / ln(2) */
	target = 145036 * (tx_bb_bw / 10000UL);
    4ca4:	e0bffd17 	ldw	r2,-12(fp)
    4ca8:	1009883a 	mov	r4,r2
    4cac:	0149c404 	movi	r5,10000
    4cb0:	001d7a40 	call	1d7a4 <__udivsi3>
    4cb4:	1007883a 	mov	r3,r2
    4cb8:	008000b4 	movhi	r2,2
    4cbc:	108da304 	addi	r2,r2,13964
    4cc0:	1885383a 	mul	r2,r3,r2
    4cc4:	e0bff915 	stw	r2,-28(fp)
	txbbf_div = min_t(uint32_t, 511UL, DIV_ROUND_UP(bbpll_freq, target));
    4cc8:	e0fffe17 	ldw	r3,-8(fp)
    4ccc:	e0bff917 	ldw	r2,-28(fp)
    4cd0:	1885883a 	add	r2,r3,r2
    4cd4:	10bfffc4 	addi	r2,r2,-1
    4cd8:	1009883a 	mov	r4,r2
    4cdc:	e17ff917 	ldw	r5,-28(fp)
    4ce0:	001d7a40 	call	1d7a4 <__udivsi3>
    4ce4:	10c08030 	cmpltui	r3,r2,512
    4ce8:	1800011e 	bne	r3,zero,4cf0 <ad9361_tx_bb_analog_filter_calib+0xd4>
    4cec:	00807fc4 	movi	r2,511
    4cf0:	e0bffa15 	stw	r2,-24(fp)

	/* Set TX baseband filter divide value */
	ad9361_spi_write(phy->spi, REG_TX_BBF_TUNE_DIVIDER, txbbf_div);
    4cf4:	e0bffc17 	ldw	r2,-16(fp)
    4cf8:	10800117 	ldw	r2,4(r2)
    4cfc:	1009883a 	mov	r4,r2
    4d00:	01403584 	movi	r5,214
    4d04:	e1bffa17 	ldw	r6,-24(fp)
    4d08:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_writef(phy->spi, REG_TX_BBF_TUNE_MODE,
    4d0c:	e0bffc17 	ldw	r2,-16(fp)
    4d10:	14000117 	ldw	r16,4(r2)
    4d14:	01000044 	movi	r4,1
    4d18:	001c8300 	call	1c830 <find_first_bit>
    4d1c:	1007883a 	mov	r3,r2
    4d20:	e0bffa17 	ldw	r2,-24(fp)
    4d24:	1004d23a 	srli	r2,r2,8
    4d28:	d8800015 	stw	r2,0(sp)
    4d2c:	8009883a 	mov	r4,r16
    4d30:	014035c4 	movi	r5,215
    4d34:	01800044 	movi	r6,1
    4d38:	180f883a 	mov	r7,r3
    4d3c:	000031c0 	call	31c <__ad9361_spi_writef>
		TX_BBF_TUNE_DIVIDER, txbbf_div >> 8);

	/* Enable the TX baseband filter tune circuit by setting 0x0CA=0x22. */
	ad9361_spi_write(phy->spi, REG_TX_TUNE_CTRL, TUNER_RESAMPLE | TUNE_CTRL(1));
    4d40:	e0bffc17 	ldw	r2,-16(fp)
    4d44:	10800117 	ldw	r2,4(r2)
    4d48:	1009883a 	mov	r4,r2
    4d4c:	01403284 	movi	r5,202
    4d50:	01800884 	movi	r6,34
    4d54:	00002600 	call	260 <ad9361_spi_write>

	/* Start the TX Baseband Filter calibration in register 0x016[6] */
	/* Calibration is complete when register 0x016[] self clears */
	ret = ad9361_run_calibration(phy, TX_BB_TUNE_CAL);
    4d58:	e13ffc17 	ldw	r4,-16(fp)
    4d5c:	01401004 	movi	r5,64
    4d60:	0000f900 	call	f90 <ad9361_run_calibration>
    4d64:	e0bffb15 	stw	r2,-20(fp)

	/* Disable the TX baseband filter tune circuit by writing 0x0CA=0x26. */
	ad9361_spi_write(phy->spi, REG_TX_TUNE_CTRL,
    4d68:	e0bffc17 	ldw	r2,-16(fp)
    4d6c:	10800117 	ldw	r2,4(r2)
    4d70:	1009883a 	mov	r4,r2
    4d74:	01403284 	movi	r5,202
    4d78:	01800984 	movi	r6,38
    4d7c:	00002600 	call	260 <ad9361_spi_write>
		TUNER_RESAMPLE | TUNE_CTRL(1) | PD_TUNE);

	return ret;
    4d80:	e0bffb17 	ldw	r2,-20(fp)
}
    4d84:	e6ffff04 	addi	sp,fp,-4
    4d88:	dfc00217 	ldw	ra,8(sp)
    4d8c:	df000117 	ldw	fp,4(sp)
    4d90:	dc000017 	ldw	r16,0(sp)
    4d94:	dec00304 	addi	sp,sp,12
    4d98:	f800283a 	ret

00004d9c <ad9361_tx_bb_second_filter_calib>:
 * @param tx_rf_bw The RF bandwidth [Hz].
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_tx_bb_second_filter_calib(struct ad9361_rf_phy *phy,
	uint32_t tx_bb_bw)
{
    4d9c:	deffef04 	addi	sp,sp,-68
    4da0:	de00012e 	bgeu	sp,et,4da8 <ad9361_tx_bb_second_filter_calib+0xc>
    4da4:	003b68fa 	trap	3
    4da8:	dfc01015 	stw	ra,64(sp)
    4dac:	df000f15 	stw	fp,60(sp)
    4db0:	dcc00e15 	stw	r19,56(sp)
    4db4:	dc800d15 	stw	r18,52(sp)
    4db8:	dc400c15 	stw	r17,48(sp)
    4dbc:	dc000b15 	stw	r16,44(sp)
    4dc0:	df000f04 	addi	fp,sp,60
    4dc4:	e13ffa15 	stw	r4,-24(fp)
    4dc8:	e17ffb15 	stw	r5,-20(fp)
	uint64_t cap;
	uint32_t corner, res, div;
	uint32_t reg_conf, reg_res;
	int32_t ret, i;

	dev_dbg(&phy->spi->dev, "%s : tx_bb_bw %"PRIu32,
    4dcc:	010000b4 	movhi	r4,2
    4dd0:	211c0804 	addi	r4,r4,28704
    4dd4:	014000b4 	movhi	r5,2
    4dd8:	295ebc04 	addi	r5,r5,31472
    4ddc:	e1bffb17 	ldw	r6,-20(fp)
    4de0:	001f8180 	call	1f818 <printf>
    4de4:	010000b4 	movhi	r4,2
    4de8:	211a7504 	addi	r4,r4,27092
    4dec:	001f8180 	call	1f818 <printf>
		__func__, tx_bb_bw);

	tx_bb_bw = clamp(tx_bb_bw, 530000UL, 20000000UL);
    4df0:	e0fffb17 	ldw	r3,-20(fp)
    4df4:	00800234 	movhi	r2,8
    4df8:	10859404 	addi	r2,r2,5712
    4dfc:	10c0072e 	bgeu	r2,r3,4e1c <ad9361_tx_bb_second_filter_calib+0x80>
    4e00:	e0bffb17 	ldw	r2,-20(fp)
    4e04:	00c04c74 	movhi	r3,305
    4e08:	18cb4004 	addi	r3,r3,11520
    4e0c:	1880052e 	bgeu	r3,r2,4e24 <ad9361_tx_bb_second_filter_calib+0x88>
    4e10:	00804c74 	movhi	r2,305
    4e14:	108b4004 	addi	r2,r2,11520
    4e18:	00000206 	br	4e24 <ad9361_tx_bb_second_filter_calib+0x88>
    4e1c:	00800234 	movhi	r2,8
    4e20:	10859404 	addi	r2,r2,5712
    4e24:	e0bffb15 	stw	r2,-20(fp)

	/* BBBW * 5PI */
	corner = 15708 * (tx_bb_bw / 10000UL);
    4e28:	e0bffb17 	ldw	r2,-20(fp)
    4e2c:	1009883a 	mov	r4,r2
    4e30:	0149c404 	movi	r5,10000
    4e34:	001d7a40 	call	1d7a4 <__udivsi3>
    4e38:	108f5724 	muli	r2,r2,15708
    4e3c:	e0bff515 	stw	r2,-44(fp)

	for (i = 0, res = 1; i < 4; i++) {
    4e40:	e03ff415 	stw	zero,-48(fp)
    4e44:	00800044 	movi	r2,1
    4e48:	e0bff115 	stw	r2,-60(fp)
    4e4c:	00003606 	br	4f28 <ad9361_tx_bb_second_filter_calib+0x18c>
		div = corner * res;
    4e50:	e0fff517 	ldw	r3,-44(fp)
    4e54:	e0bff117 	ldw	r2,-60(fp)
    4e58:	1885383a 	mul	r2,r3,r2
    4e5c:	e0bff615 	stw	r2,-40(fp)
		cap = (500000000ULL) + (div >> 1);
    4e60:	e0bff617 	ldw	r2,-40(fp)
    4e64:	1004d07a 	srli	r2,r2,1
    4e68:	1021883a 	mov	r16,r2
    4e6c:	0023883a 	mov	r17,zero
    4e70:	01077374 	movhi	r4,7629
    4e74:	21194004 	addi	r4,r4,25856
    4e78:	000b883a 	mov	r5,zero
    4e7c:	8105883a 	add	r2,r16,r4
    4e80:	140d803a 	cmpltu	r6,r2,r16
    4e84:	8947883a 	add	r3,r17,r5
    4e88:	30c9883a 	add	r4,r6,r3
    4e8c:	2007883a 	mov	r3,r4
    4e90:	1009883a 	mov	r4,r2
    4e94:	180b883a 	mov	r5,r3
    4e98:	e13ff815 	stw	r4,-32(fp)
    4e9c:	e17ff915 	stw	r5,-28(fp)
		do_div(&cap, div);
    4ea0:	e0bff617 	ldw	r2,-40(fp)
    4ea4:	1025883a 	mov	r18,r2
    4ea8:	0027883a 	mov	r19,zero
    4eac:	e0bff804 	addi	r2,fp,-32
    4eb0:	1009883a 	mov	r4,r2
    4eb4:	900b883a 	mov	r5,r18
    4eb8:	980d883a 	mov	r6,r19
    4ebc:	001c76c0 	call	1c76c <do_div>
		cap -= 12ULL;
    4ec0:	e13ff817 	ldw	r4,-32(fp)
    4ec4:	e17ff917 	ldw	r5,-28(fp)
    4ec8:	01bffd04 	movi	r6,-12
    4ecc:	01ffffc4 	movi	r7,-1
    4ed0:	2185883a 	add	r2,r4,r6
    4ed4:	1111803a 	cmpltu	r8,r2,r4
    4ed8:	29c7883a 	add	r3,r5,r7
    4edc:	40c9883a 	add	r4,r8,r3
    4ee0:	2007883a 	mov	r3,r4
    4ee4:	1009883a 	mov	r4,r2
    4ee8:	180b883a 	mov	r5,r3
    4eec:	e13ff815 	stw	r4,-32(fp)
    4ef0:	e17ff915 	stw	r5,-28(fp)
		if (cap < 64ULL)
    4ef4:	e0bff817 	ldw	r2,-32(fp)
    4ef8:	e0fff917 	ldw	r3,-28(fp)
    4efc:	1800041e 	bne	r3,zero,4f10 <ad9361_tx_bb_second_filter_calib+0x174>
    4f00:	1800021e 	bne	r3,zero,4f0c <ad9361_tx_bb_second_filter_calib+0x170>
    4f04:	10801028 	cmpgeui	r2,r2,64
    4f08:	1000011e 	bne	r2,zero,4f10 <ad9361_tx_bb_second_filter_calib+0x174>
			break;
    4f0c:	00000906 	br	4f34 <ad9361_tx_bb_second_filter_calib+0x198>

		res <<= 1;
    4f10:	e0bff117 	ldw	r2,-60(fp)
    4f14:	1085883a 	add	r2,r2,r2
    4f18:	e0bff115 	stw	r2,-60(fp)
	tx_bb_bw = clamp(tx_bb_bw, 530000UL, 20000000UL);

	/* BBBW * 5PI */
	corner = 15708 * (tx_bb_bw / 10000UL);

	for (i = 0, res = 1; i < 4; i++) {
    4f1c:	e0bff417 	ldw	r2,-48(fp)
    4f20:	10800044 	addi	r2,r2,1
    4f24:	e0bff415 	stw	r2,-48(fp)
    4f28:	e0bff417 	ldw	r2,-48(fp)
    4f2c:	10800110 	cmplti	r2,r2,4
    4f30:	103fc71e 	bne	r2,zero,4e50 <_gp+0xfffd2d30>
			break;

		res <<= 1;
	}

	if (cap > 63ULL)
    4f34:	e0bff817 	ldw	r2,-32(fp)
    4f38:	e0fff917 	ldw	r3,-28(fp)
    4f3c:	1800031e 	bne	r3,zero,4f4c <ad9361_tx_bb_second_filter_calib+0x1b0>
    4f40:	1800051e 	bne	r3,zero,4f58 <ad9361_tx_bb_second_filter_calib+0x1bc>
    4f44:	10801028 	cmpgeui	r2,r2,64
    4f48:	10000326 	beq	r2,zero,4f58 <ad9361_tx_bb_second_filter_calib+0x1bc>
		cap = 63ULL;
    4f4c:	00800fc4 	movi	r2,63
    4f50:	e0bff815 	stw	r2,-32(fp)
    4f54:	e03ff915 	stw	zero,-28(fp)

	if (tx_bb_bw <= 4500000UL)
    4f58:	e0fffb17 	ldw	r3,-20(fp)
    4f5c:	00801174 	movhi	r2,69
    4f60:	10aa8804 	addi	r2,r2,-21984
    4f64:	10c00336 	bltu	r2,r3,4f74 <ad9361_tx_bb_second_filter_calib+0x1d8>
		reg_conf = 0x59;
    4f68:	00801644 	movi	r2,89
    4f6c:	e0bff215 	stw	r2,-56(fp)
    4f70:	00000906 	br	4f98 <ad9361_tx_bb_second_filter_calib+0x1fc>
	else if (tx_bb_bw <= 12000000UL)
    4f74:	e0fffb17 	ldw	r3,-20(fp)
    4f78:	00802df4 	movhi	r2,183
    4f7c:	1086c004 	addi	r2,r2,6912
    4f80:	10c00336 	bltu	r2,r3,4f90 <ad9361_tx_bb_second_filter_calib+0x1f4>
		reg_conf = 0x56;
    4f84:	00801584 	movi	r2,86
    4f88:	e0bff215 	stw	r2,-56(fp)
    4f8c:	00000206 	br	4f98 <ad9361_tx_bb_second_filter_calib+0x1fc>
	else
		reg_conf = 0x57;
    4f90:	008015c4 	movi	r2,87
    4f94:	e0bff215 	stw	r2,-56(fp)

	switch (res) {
    4f98:	e0bff117 	ldw	r2,-60(fp)
    4f9c:	10c000a0 	cmpeqi	r3,r2,2
    4fa0:	18000d1e 	bne	r3,zero,4fd8 <ad9361_tx_bb_second_filter_calib+0x23c>
    4fa4:	10c000e8 	cmpgeui	r3,r2,3
    4fa8:	1800031e 	bne	r3,zero,4fb8 <ad9361_tx_bb_second_filter_calib+0x21c>
    4fac:	10800060 	cmpeqi	r2,r2,1
    4fb0:	1000061e 	bne	r2,zero,4fcc <ad9361_tx_bb_second_filter_calib+0x230>
    4fb4:	00001106 	br	4ffc <ad9361_tx_bb_second_filter_calib+0x260>
    4fb8:	10c00120 	cmpeqi	r3,r2,4
    4fbc:	1800091e 	bne	r3,zero,4fe4 <ad9361_tx_bb_second_filter_calib+0x248>
    4fc0:	10800220 	cmpeqi	r2,r2,8
    4fc4:	10000a1e 	bne	r2,zero,4ff0 <ad9361_tx_bb_second_filter_calib+0x254>
    4fc8:	00000c06 	br	4ffc <ad9361_tx_bb_second_filter_calib+0x260>
	case 1:
		reg_res = 0x0C;
    4fcc:	00800304 	movi	r2,12
    4fd0:	e0bff315 	stw	r2,-52(fp)
		break;
    4fd4:	00000b06 	br	5004 <ad9361_tx_bb_second_filter_calib+0x268>
	case 2:
		reg_res = 0x04;
    4fd8:	00800104 	movi	r2,4
    4fdc:	e0bff315 	stw	r2,-52(fp)
		break;
    4fe0:	00000806 	br	5004 <ad9361_tx_bb_second_filter_calib+0x268>
	case 4:
		reg_res = 0x03;
    4fe4:	008000c4 	movi	r2,3
    4fe8:	e0bff315 	stw	r2,-52(fp)
		break;
    4fec:	00000506 	br	5004 <ad9361_tx_bb_second_filter_calib+0x268>
	case 8:
		reg_res = 0x01;
    4ff0:	00800044 	movi	r2,1
    4ff4:	e0bff315 	stw	r2,-52(fp)
		break;
    4ff8:	00000206 	br	5004 <ad9361_tx_bb_second_filter_calib+0x268>
	default:
		reg_res = 0x01;
    4ffc:	00800044 	movi	r2,1
    5000:	e0bff315 	stw	r2,-52(fp)
	}

	ret = ad9361_spi_write(phy->spi, REG_CONFIG0, reg_conf);
    5004:	e0bffa17 	ldw	r2,-24(fp)
    5008:	10800117 	ldw	r2,4(r2)
    500c:	1009883a 	mov	r4,r2
    5010:	01403404 	movi	r5,208
    5014:	e1bff217 	ldw	r6,-56(fp)
    5018:	00002600 	call	260 <ad9361_spi_write>
    501c:	e0bff715 	stw	r2,-36(fp)
	ret |= ad9361_spi_write(phy->spi, REG_RESISTOR, reg_res);
    5020:	e0bffa17 	ldw	r2,-24(fp)
    5024:	10800117 	ldw	r2,4(r2)
    5028:	1009883a 	mov	r4,r2
    502c:	01403444 	movi	r5,209
    5030:	e1bff317 	ldw	r6,-52(fp)
    5034:	00002600 	call	260 <ad9361_spi_write>
    5038:	1007883a 	mov	r3,r2
    503c:	e0bff717 	ldw	r2,-36(fp)
    5040:	10c4b03a 	or	r2,r2,r3
    5044:	e0bff715 	stw	r2,-36(fp)
	ret |= ad9361_spi_write(phy->spi, REG_CAPACITOR, (uint8_t)cap);
    5048:	e0bffa17 	ldw	r2,-24(fp)
    504c:	11000117 	ldw	r4,4(r2)
    5050:	e0bff817 	ldw	r2,-32(fp)
    5054:	e0fff917 	ldw	r3,-28(fp)
    5058:	10803fcc 	andi	r2,r2,255
    505c:	01403484 	movi	r5,210
    5060:	100d883a 	mov	r6,r2
    5064:	00002600 	call	260 <ad9361_spi_write>
    5068:	1007883a 	mov	r3,r2
    506c:	e0bff717 	ldw	r2,-36(fp)
    5070:	10c4b03a 	or	r2,r2,r3
    5074:	e0bff715 	stw	r2,-36(fp)

	return ret;
    5078:	e0bff717 	ldw	r2,-36(fp)
}
    507c:	e6fffc04 	addi	sp,fp,-16
    5080:	dfc00517 	ldw	ra,20(sp)
    5084:	df000417 	ldw	fp,16(sp)
    5088:	dcc00317 	ldw	r19,12(sp)
    508c:	dc800217 	ldw	r18,8(sp)
    5090:	dc400117 	ldw	r17,4(sp)
    5094:	dc000017 	ldw	r16,0(sp)
    5098:	dec00604 	addi	sp,sp,24
    509c:	f800283a 	ret

000050a0 <ad9361_txrx_synth_cp_calib>:
 * @param tx The Synthesizer TX = 1, RX = 0.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_txrx_synth_cp_calib(struct ad9361_rf_phy *phy,
	uint32_t ref_clk_hz, bool tx)
{
    50a0:	defff704 	addi	sp,sp,-36
    50a4:	de00012e 	bgeu	sp,et,50ac <ad9361_txrx_synth_cp_calib+0xc>
    50a8:	003b68fa 	trap	3
    50ac:	dfc00815 	stw	ra,32(sp)
    50b0:	df000715 	stw	fp,28(sp)
    50b4:	dc000615 	stw	r16,24(sp)
    50b8:	df000704 	addi	fp,sp,28
    50bc:	e13ffc15 	stw	r4,-16(fp)
    50c0:	e17ffd15 	stw	r5,-12(fp)
    50c4:	3005883a 	mov	r2,r6
    50c8:	e0bffe05 	stb	r2,-8(fp)
	uint32_t offs = tx ? 0x40 : 0;
    50cc:	e0bffe03 	ldbu	r2,-8(fp)
    50d0:	10000226 	beq	r2,zero,50dc <ad9361_txrx_synth_cp_calib+0x3c>
    50d4:	00801004 	movi	r2,64
    50d8:	00000106 	br	50e0 <ad9361_txrx_synth_cp_calib+0x40>
    50dc:	0005883a 	mov	r2,zero
    50e0:	e0bffb15 	stw	r2,-20(fp)
	uint32_t vco_cal_cnt;
	dev_dbg(&phy->spi->dev, "%s : ref_clk_hz %"PRIu32" : is_tx %d",
    50e4:	e0bffe03 	ldbu	r2,-8(fp)
    50e8:	010000b4 	movhi	r4,2
    50ec:	211c0d04 	addi	r4,r4,28724
    50f0:	014000b4 	movhi	r5,2
    50f4:	295ec504 	addi	r5,r5,31508
    50f8:	e1bffd17 	ldw	r6,-12(fp)
    50fc:	100f883a 	mov	r7,r2
    5100:	001f8180 	call	1f818 <printf>
    5104:	010000b4 	movhi	r4,2
    5108:	211a7504 	addi	r4,r4,27092
    510c:	001f8180 	call	1f818 <printf>
		__func__, ref_clk_hz, tx);

	/* REVIST: */
	ad9361_spi_write(phy->spi, REG_RX_CP_LEVEL_DETECT + offs, 0x17);
    5110:	e0bffc17 	ldw	r2,-16(fp)
    5114:	10c00117 	ldw	r3,4(r2)
    5118:	e0bffb17 	ldw	r2,-20(fp)
    511c:	108092c4 	addi	r2,r2,587
    5120:	1809883a 	mov	r4,r3
    5124:	100b883a 	mov	r5,r2
    5128:	018005c4 	movi	r6,23
    512c:	00002600 	call	260 <ad9361_spi_write>

	ad9361_spi_write(phy->spi, REG_RX_DSM_SETUP_1 + offs, 0x0);
    5130:	e0bffc17 	ldw	r2,-16(fp)
    5134:	10c00117 	ldw	r3,4(r2)
    5138:	e0bffb17 	ldw	r2,-20(fp)
    513c:	10809344 	addi	r2,r2,589
    5140:	1809883a 	mov	r4,r3
    5144:	100b883a 	mov	r5,r2
    5148:	000d883a 	mov	r6,zero
    514c:	00002600 	call	260 <ad9361_spi_write>

	ad9361_spi_write(phy->spi, REG_RX_LO_GEN_POWER_MODE + offs, 0x00);
    5150:	e0bffc17 	ldw	r2,-16(fp)
    5154:	10c00117 	ldw	r3,4(r2)
    5158:	e0bffb17 	ldw	r2,-20(fp)
    515c:	10809844 	addi	r2,r2,609
    5160:	1809883a 	mov	r4,r3
    5164:	100b883a 	mov	r5,r2
    5168:	000d883a 	mov	r6,zero
    516c:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(phy->spi, REG_RX_VCO_LDO + offs, 0x0B);
    5170:	e0bffc17 	ldw	r2,-16(fp)
    5174:	10c00117 	ldw	r3,4(r2)
    5178:	e0bffb17 	ldw	r2,-20(fp)
    517c:	10809204 	addi	r2,r2,584
    5180:	1809883a 	mov	r4,r3
    5184:	100b883a 	mov	r5,r2
    5188:	018002c4 	movi	r6,11
    518c:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(phy->spi, REG_RX_VCO_PD_OVERRIDES + offs, 0x02);
    5190:	e0bffc17 	ldw	r2,-16(fp)
    5194:	10c00117 	ldw	r3,4(r2)
    5198:	e0bffb17 	ldw	r2,-20(fp)
    519c:	10809184 	addi	r2,r2,582
    51a0:	1809883a 	mov	r4,r3
    51a4:	100b883a 	mov	r5,r2
    51a8:	01800084 	movi	r6,2
    51ac:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(phy->spi, REG_RX_CP_CURRENT + offs, 0x80);
    51b0:	e0bffc17 	ldw	r2,-16(fp)
    51b4:	10c00117 	ldw	r3,4(r2)
    51b8:	e0bffb17 	ldw	r2,-20(fp)
    51bc:	10808ec4 	addi	r2,r2,571
    51c0:	1809883a 	mov	r4,r3
    51c4:	100b883a 	mov	r5,r2
    51c8:	01802004 	movi	r6,128
    51cc:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(phy->spi, REG_RX_CP_CONFIG + offs, 0x00);
    51d0:	e0bffc17 	ldw	r2,-16(fp)
    51d4:	10c00117 	ldw	r3,4(r2)
    51d8:	e0bffb17 	ldw	r2,-20(fp)
    51dc:	10808f44 	addi	r2,r2,573
    51e0:	1809883a 	mov	r4,r3
    51e4:	100b883a 	mov	r5,r2
    51e8:	000d883a 	mov	r6,zero
    51ec:	00002600 	call	260 <ad9361_spi_write>

	/* see Table 70 Example Calibration Times for RF VCO Cal */
	if (phy->pdata->fdd || phy->pdata->tdd_use_fdd_tables) {
    51f0:	e0bffc17 	ldw	r2,-16(fp)
    51f4:	10803017 	ldw	r2,192(r2)
    51f8:	10800043 	ldbu	r2,1(r2)
    51fc:	10803fcc 	andi	r2,r2,255
    5200:	1000051e 	bne	r2,zero,5218 <ad9361_txrx_synth_cp_calib+0x178>
    5204:	e0bffc17 	ldw	r2,-16(fp)
    5208:	10803017 	ldw	r2,192(r2)
    520c:	10800203 	ldbu	r2,8(r2)
    5210:	10803fcc 	andi	r2,r2,255
    5214:	10000326 	beq	r2,zero,5224 <ad9361_txrx_synth_cp_calib+0x184>
		vco_cal_cnt = VCO_CAL_EN | VCO_CAL_COUNT(3) | FB_CLOCK_ADV(2);
    5218:	00802384 	movi	r2,142
    521c:	e0bffa15 	stw	r2,-24(fp)
    5220:	00000906 	br	5248 <ad9361_txrx_synth_cp_calib+0x1a8>
	}
	else {
		if (ref_clk_hz > 40000000UL)
    5224:	e0fffd17 	ldw	r3,-12(fp)
    5228:	008098b4 	movhi	r2,610
    522c:	10968004 	addi	r2,r2,23040
    5230:	10c0032e 	bgeu	r2,r3,5240 <ad9361_txrx_synth_cp_calib+0x1a0>
			vco_cal_cnt = VCO_CAL_EN | VCO_CAL_COUNT(1) |
    5234:	00802184 	movi	r2,134
    5238:	e0bffa15 	stw	r2,-24(fp)
    523c:	00000206 	br	5248 <ad9361_txrx_synth_cp_calib+0x1a8>
			FB_CLOCK_ADV(2);
		else
			vco_cal_cnt = VCO_CAL_EN | VCO_CAL_COUNT(0) |
    5240:	00802084 	movi	r2,130
    5244:	e0bffa15 	stw	r2,-24(fp)
			FB_CLOCK_ADV(2);
	}

	ad9361_spi_write(phy->spi, REG_RX_VCO_CAL + offs, vco_cal_cnt);
    5248:	e0bffc17 	ldw	r2,-16(fp)
    524c:	10c00117 	ldw	r3,4(r2)
    5250:	e0bffb17 	ldw	r2,-20(fp)
    5254:	10809244 	addi	r2,r2,585
    5258:	1809883a 	mov	r4,r3
    525c:	100b883a 	mov	r5,r2
    5260:	e1bffa17 	ldw	r6,-24(fp)
    5264:	00002600 	call	260 <ad9361_spi_write>

	/* Enable FDD mode during calibrations */

	if (!phy->pdata->fdd) {
    5268:	e0bffc17 	ldw	r2,-16(fp)
    526c:	10803017 	ldw	r2,192(r2)
    5270:	10800043 	ldbu	r2,1(r2)
    5274:	1080005c 	xori	r2,r2,1
    5278:	10803fcc 	andi	r2,r2,255
    527c:	10000a26 	beq	r2,zero,52a8 <ad9361_txrx_synth_cp_calib+0x208>
		ad9361_spi_writef(phy->spi, REG_PARALLEL_PORT_CONF_3,
    5280:	e0bffc17 	ldw	r2,-16(fp)
    5284:	14000117 	ldw	r16,4(r2)
    5288:	01000204 	movi	r4,8
    528c:	001c8300 	call	1c830 <find_first_bit>
    5290:	d8000015 	stw	zero,0(sp)
    5294:	8009883a 	mov	r4,r16
    5298:	01400484 	movi	r5,18
    529c:	01800204 	movi	r6,8
    52a0:	100f883a 	mov	r7,r2
    52a4:	000031c0 	call	31c <__ad9361_spi_writef>
				  HALF_DUPLEX_MODE, 0);
	}

	ad9361_spi_write(phy->spi, REG_ENSM_CONFIG_2, DUAL_SYNTH_MODE);
    52a8:	e0bffc17 	ldw	r2,-16(fp)
    52ac:	10800117 	ldw	r2,4(r2)
    52b0:	1009883a 	mov	r4,r2
    52b4:	01400544 	movi	r5,21
    52b8:	01800104 	movi	r6,4
    52bc:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(phy->spi, REG_ENSM_CONFIG_1,
    52c0:	e0bffc17 	ldw	r2,-16(fp)
    52c4:	10800117 	ldw	r2,4(r2)
    52c8:	1009883a 	mov	r4,r2
    52cc:	01400504 	movi	r5,20
    52d0:	01800144 	movi	r6,5
    52d4:	00002600 	call	260 <ad9361_spi_write>
		FORCE_ALERT_STATE |
		TO_ALERT);
	ad9361_spi_write(phy->spi, REG_ENSM_MODE, FDD_MODE);
    52d8:	e0bffc17 	ldw	r2,-16(fp)
    52dc:	10800117 	ldw	r2,4(r2)
    52e0:	1009883a 	mov	r4,r2
    52e4:	014004c4 	movi	r5,19
    52e8:	01800044 	movi	r6,1
    52ec:	00002600 	call	260 <ad9361_spi_write>

	ad9361_spi_write(phy->spi, REG_RX_CP_CONFIG + offs, CP_CAL_ENABLE);
    52f0:	e0bffc17 	ldw	r2,-16(fp)
    52f4:	10c00117 	ldw	r3,4(r2)
    52f8:	e0bffb17 	ldw	r2,-20(fp)
    52fc:	10808f44 	addi	r2,r2,573
    5300:	1809883a 	mov	r4,r3
    5304:	100b883a 	mov	r5,r2
    5308:	01800104 	movi	r6,4
    530c:	00002600 	call	260 <ad9361_spi_write>

	return ad9361_check_cal_done(phy, REG_RX_CAL_STATUS + offs,
    5310:	e0bffb17 	ldw	r2,-20(fp)
    5314:	10809104 	addi	r2,r2,580
    5318:	e13ffc17 	ldw	r4,-16(fp)
    531c:	100b883a 	mov	r5,r2
    5320:	01802004 	movi	r6,128
    5324:	01c00044 	movi	r7,1
    5328:	0000eb00 	call	eb0 <ad9361_check_cal_done>
		CP_CAL_VALID, 1);
}
    532c:	e6ffff04 	addi	sp,fp,-4
    5330:	dfc00217 	ldw	ra,8(sp)
    5334:	df000117 	ldw	fp,4(sp)
    5338:	dc000017 	ldw	r16,0(sp)
    533c:	dec00304 	addi	sp,sp,12
    5340:	f800283a 	ret

00005344 <ad9361_bb_dc_offset_calib>:
 * Perform a baseband DC offset calibration.
 * @param phy The AD9361 state structure.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_bb_dc_offset_calib(struct ad9361_rf_phy *phy)
{
    5344:	defffd04 	addi	sp,sp,-12
    5348:	de00012e 	bgeu	sp,et,5350 <ad9361_bb_dc_offset_calib+0xc>
    534c:	003b68fa 	trap	3
    5350:	dfc00215 	stw	ra,8(sp)
    5354:	df000115 	stw	fp,4(sp)
    5358:	df000104 	addi	fp,sp,4
    535c:	e13fff15 	stw	r4,-4(fp)
	dev_dbg(&phy->spi->dev, "%s", __func__);
    5360:	010000b4 	movhi	r4,2
    5364:	211aac04 	addi	r4,r4,27312
    5368:	014000b4 	movhi	r5,2
    536c:	295ecc04 	addi	r5,r5,31536
    5370:	001f8180 	call	1f818 <printf>
    5374:	010000b4 	movhi	r4,2
    5378:	211a7504 	addi	r4,r4,27092
    537c:	001f8180 	call	1f818 <printf>

	ad9361_spi_write(phy->spi, REG_BB_DC_OFFSET_COUNT, 0x3F);
    5380:	e0bfff17 	ldw	r2,-4(fp)
    5384:	10800117 	ldw	r2,4(r2)
    5388:	1009883a 	mov	r4,r2
    538c:	014064c4 	movi	r5,403
    5390:	01800fc4 	movi	r6,63
    5394:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(phy->spi, REG_BB_DC_OFFSET_SHIFT, BB_DC_M_SHIFT(0xF));
    5398:	e0bfff17 	ldw	r2,-4(fp)
    539c:	10800117 	ldw	r2,4(r2)
    53a0:	1009883a 	mov	r4,r2
    53a4:	01406404 	movi	r5,400
    53a8:	018003c4 	movi	r6,15
    53ac:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(phy->spi, REG_BB_DC_OFFSET_ATTEN, BB_DC_OFFSET_ATTEN(1));
    53b0:	e0bfff17 	ldw	r2,-4(fp)
    53b4:	10800117 	ldw	r2,4(r2)
    53b8:	1009883a 	mov	r4,r2
    53bc:	01406504 	movi	r5,404
    53c0:	01800044 	movi	r6,1
    53c4:	00002600 	call	260 <ad9361_spi_write>

	return ad9361_run_calibration(phy, BBDC_CAL);
    53c8:	e13fff17 	ldw	r4,-4(fp)
    53cc:	01400044 	movi	r5,1
    53d0:	0000f900 	call	f90 <ad9361_run_calibration>
}
    53d4:	e037883a 	mov	sp,fp
    53d8:	dfc00117 	ldw	ra,4(sp)
    53dc:	df000017 	ldw	fp,0(sp)
    53e0:	dec00204 	addi	sp,sp,8
    53e4:	f800283a 	ret

000053e8 <ad9361_rf_dc_offset_calib>:
 * @param ref_clk_hz The RX LO frequency [Hz].
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_rf_dc_offset_calib(struct ad9361_rf_phy *phy,
	uint64_t rx_freq)
{
    53e8:	defffa04 	addi	sp,sp,-24
    53ec:	de00012e 	bgeu	sp,et,53f4 <ad9361_rf_dc_offset_calib+0xc>
    53f0:	003b68fa 	trap	3
    53f4:	dfc00515 	stw	ra,20(sp)
    53f8:	df000415 	stw	fp,16(sp)
    53fc:	df000404 	addi	fp,sp,16
    5400:	e13ffd15 	stw	r4,-12(fp)
    5404:	e17ffe15 	stw	r5,-8(fp)
    5408:	e1bfff15 	stw	r6,-4(fp)
	struct spi_device *spi = phy->spi;
    540c:	e0bffd17 	ldw	r2,-12(fp)
    5410:	10800117 	ldw	r2,4(r2)
    5414:	e0bffc15 	stw	r2,-16(fp)

	dev_dbg(&phy->spi->dev, "%s : rx_freq %"PRIu64,
    5418:	010000b4 	movhi	r4,2
    541c:	211c1504 	addi	r4,r4,28756
    5420:	014000b4 	movhi	r5,2
    5424:	295ed304 	addi	r5,r5,31564
    5428:	e1bffe17 	ldw	r6,-8(fp)
    542c:	e1ffff17 	ldw	r7,-4(fp)
    5430:	001f8180 	call	1f818 <printf>
    5434:	010000b4 	movhi	r4,2
    5438:	211a7504 	addi	r4,r4,27092
    543c:	001f8180 	call	1f818 <printf>
		__func__, rx_freq);

	ad9361_spi_write(spi, REG_WAIT_COUNT, 0x20);
    5440:	e13ffc17 	ldw	r4,-16(fp)
    5444:	01406144 	movi	r5,389
    5448:	01800804 	movi	r6,32
    544c:	00002600 	call	260 <ad9361_spi_write>

	if (rx_freq <= 4000000000ULL) {
    5450:	e0bfff17 	ldw	r2,-4(fp)
    5454:	10001c1e 	bne	r2,zero,54c8 <ad9361_rf_dc_offset_calib+0xe0>
    5458:	e0bfff17 	ldw	r2,-4(fp)
    545c:	1000041e 	bne	r2,zero,5470 <ad9361_rf_dc_offset_calib+0x88>
    5460:	e0fffe17 	ldw	r3,-8(fp)
    5464:	00bb9af4 	movhi	r2,61035
    5468:	108a0004 	addi	r2,r2,10240
    546c:	10c01636 	bltu	r2,r3,54c8 <ad9361_rf_dc_offset_calib+0xe0>
		ad9361_spi_write(spi, REG_RF_DC_OFFSET_COUNT,
			phy->pdata->rf_dc_offset_count_low);
    5470:	e0bffd17 	ldw	r2,-12(fp)
    5474:	10803017 	ldw	r2,192(r2)
    5478:	108004c3 	ldbu	r2,19(r2)
		__func__, rx_freq);

	ad9361_spi_write(spi, REG_WAIT_COUNT, 0x20);

	if (rx_freq <= 4000000000ULL) {
		ad9361_spi_write(spi, REG_RF_DC_OFFSET_COUNT,
    547c:	10803fcc 	andi	r2,r2,255
    5480:	e13ffc17 	ldw	r4,-16(fp)
    5484:	01406184 	movi	r5,390
    5488:	100d883a 	mov	r6,r2
    548c:	00002600 	call	260 <ad9361_spi_write>
			phy->pdata->rf_dc_offset_count_low);
		ad9361_spi_write(spi, REG_RF_DC_OFFSET_CONFIG_1,
    5490:	e13ffc17 	ldw	r4,-16(fp)
    5494:	014061c4 	movi	r5,391
    5498:	01800904 	movi	r6,36
    549c:	00002600 	call	260 <ad9361_spi_write>
			RF_DC_CALIBRATION_COUNT(4) | DAC_FS(2));
		ad9361_spi_write(spi, REG_RF_DC_OFFSET_ATTEN,
			RF_DC_OFFSET_ATTEN(
    54a0:	e0bffd17 	ldw	r2,-12(fp)
    54a4:	10803017 	ldw	r2,192(r2)
    54a8:	10800443 	ldbu	r2,17(r2)
	if (rx_freq <= 4000000000ULL) {
		ad9361_spi_write(spi, REG_RF_DC_OFFSET_COUNT,
			phy->pdata->rf_dc_offset_count_low);
		ad9361_spi_write(spi, REG_RF_DC_OFFSET_CONFIG_1,
			RF_DC_CALIBRATION_COUNT(4) | DAC_FS(2));
		ad9361_spi_write(spi, REG_RF_DC_OFFSET_ATTEN,
    54ac:	10803fcc 	andi	r2,r2,255
    54b0:	108007cc 	andi	r2,r2,31
    54b4:	e13ffc17 	ldw	r4,-16(fp)
    54b8:	01406204 	movi	r5,392
    54bc:	100d883a 	mov	r6,r2
    54c0:	00002600 	call	260 <ad9361_spi_write>
    54c4:	00001506 	br	551c <ad9361_rf_dc_offset_calib+0x134>
			RF_DC_OFFSET_ATTEN(
			phy->pdata->dc_offset_attenuation_low));
	}
	else {
		ad9361_spi_write(spi, REG_RF_DC_OFFSET_COUNT,
			phy->pdata->rf_dc_offset_count_high);
    54c8:	e0bffd17 	ldw	r2,-12(fp)
    54cc:	10803017 	ldw	r2,192(r2)
    54d0:	10800483 	ldbu	r2,18(r2)
		ad9361_spi_write(spi, REG_RF_DC_OFFSET_ATTEN,
			RF_DC_OFFSET_ATTEN(
			phy->pdata->dc_offset_attenuation_low));
	}
	else {
		ad9361_spi_write(spi, REG_RF_DC_OFFSET_COUNT,
    54d4:	10803fcc 	andi	r2,r2,255
    54d8:	e13ffc17 	ldw	r4,-16(fp)
    54dc:	01406184 	movi	r5,390
    54e0:	100d883a 	mov	r6,r2
    54e4:	00002600 	call	260 <ad9361_spi_write>
			phy->pdata->rf_dc_offset_count_high);
		ad9361_spi_write(spi, REG_RF_DC_OFFSET_CONFIG_1,
    54e8:	e13ffc17 	ldw	r4,-16(fp)
    54ec:	014061c4 	movi	r5,391
    54f0:	01800d04 	movi	r6,52
    54f4:	00002600 	call	260 <ad9361_spi_write>
			RF_DC_CALIBRATION_COUNT(4) | DAC_FS(3));
		ad9361_spi_write(spi, REG_RF_DC_OFFSET_ATTEN,
			RF_DC_OFFSET_ATTEN(
    54f8:	e0bffd17 	ldw	r2,-12(fp)
    54fc:	10803017 	ldw	r2,192(r2)
    5500:	10800403 	ldbu	r2,16(r2)
	else {
		ad9361_spi_write(spi, REG_RF_DC_OFFSET_COUNT,
			phy->pdata->rf_dc_offset_count_high);
		ad9361_spi_write(spi, REG_RF_DC_OFFSET_CONFIG_1,
			RF_DC_CALIBRATION_COUNT(4) | DAC_FS(3));
		ad9361_spi_write(spi, REG_RF_DC_OFFSET_ATTEN,
    5504:	10803fcc 	andi	r2,r2,255
    5508:	108007cc 	andi	r2,r2,31
    550c:	e13ffc17 	ldw	r4,-16(fp)
    5510:	01406204 	movi	r5,392
    5514:	100d883a 	mov	r6,r2
    5518:	00002600 	call	260 <ad9361_spi_write>
			RF_DC_OFFSET_ATTEN(
			phy->pdata->dc_offset_attenuation_high));
	}

	ad9361_spi_write(spi, REG_DC_OFFSET_CONFIG2,
    551c:	e13ffc17 	ldw	r4,-16(fp)
    5520:	014062c4 	movi	r5,395
    5524:	018020c4 	movi	r6,131
    5528:	00002600 	call	260 <ad9361_spi_write>
		USE_WAIT_COUNTER_FOR_RF_DC_INIT_CAL |
		DC_OFFSET_UPDATE(3));

	if (phy->pdata->rx1rx2_phase_inversion_en ||
    552c:	e0bffd17 	ldw	r2,-12(fp)
    5530:	10803017 	ldw	r2,192(r2)
    5534:	10800343 	ldbu	r2,13(r2)
    5538:	10803fcc 	andi	r2,r2,255
    553c:	1000061e 	bne	r2,zero,5558 <ad9361_rf_dc_offset_calib+0x170>
		(phy->pdata->port_ctrl.pp_conf[1] & INVERT_RX2)) {
    5540:	e0bffd17 	ldw	r2,-12(fp)
    5544:	10803017 	ldw	r2,192(r2)
    5548:	10804343 	ldbu	r2,269(r2)
    554c:	10803fcc 	andi	r2,r2,255
    5550:	1080080c 	andi	r2,r2,32

	ad9361_spi_write(spi, REG_DC_OFFSET_CONFIG2,
		USE_WAIT_COUNTER_FOR_RF_DC_INIT_CAL |
		DC_OFFSET_UPDATE(3));

	if (phy->pdata->rx1rx2_phase_inversion_en ||
    5554:	10000526 	beq	r2,zero,556c <ad9361_rf_dc_offset_calib+0x184>
		(phy->pdata->port_ctrl.pp_conf[1] & INVERT_RX2)) {
		ad9361_spi_write(spi, REG_INVERT_BITS,
    5558:	e13ffc17 	ldw	r4,-16(fp)
    555c:	01406244 	movi	r5,393
    5560:	01800404 	movi	r6,16
    5564:	00002600 	call	260 <ad9361_spi_write>
    5568:	00000406 	br	557c <ad9361_rf_dc_offset_calib+0x194>
				INVERT_RX1_RF_DC_CGOUT_WORD);
	} else {
		ad9361_spi_write(spi, REG_INVERT_BITS,
    556c:	e13ffc17 	ldw	r4,-16(fp)
    5570:	01406244 	movi	r5,393
    5574:	01800c04 	movi	r6,48
    5578:	00002600 	call	260 <ad9361_spi_write>
				INVERT_RX1_RF_DC_CGOUT_WORD |
				INVERT_RX2_RF_DC_CGOUT_WORD);
	}

	return ad9361_run_calibration(phy, RFDC_CAL);
    557c:	e13ffd17 	ldw	r4,-12(fp)
    5580:	01400084 	movi	r5,2
    5584:	0000f900 	call	f90 <ad9361_run_calibration>
}
    5588:	e037883a 	mov	sp,fp
    558c:	dfc00117 	ldw	ra,4(sp)
    5590:	df000017 	ldw	fp,0(sp)
    5594:	dec00204 	addi	sp,sp,8
    5598:	f800283a 	ret

0000559c <__ad9361_update_rf_bandwidth>:
 * @param rf_tx_bw RF TX bandwidth [Hz].
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t __ad9361_update_rf_bandwidth(struct ad9361_rf_phy *phy,
		uint32_t rf_rx_bw, uint32_t rf_tx_bw)
{
    559c:	defff704 	addi	sp,sp,-36
    55a0:	de00012e 	bgeu	sp,et,55a8 <__ad9361_update_rf_bandwidth+0xc>
    55a4:	003b68fa 	trap	3
    55a8:	dfc00815 	stw	ra,32(sp)
    55ac:	df000715 	stw	fp,28(sp)
    55b0:	df000704 	addi	fp,sp,28
    55b4:	e13ffd15 	stw	r4,-12(fp)
    55b8:	e17ffe15 	stw	r5,-8(fp)
    55bc:	e1bfff15 	stw	r6,-4(fp)
	uint32_t real_rx_bandwidth = rf_rx_bw / 2;
    55c0:	e0bffe17 	ldw	r2,-8(fp)
    55c4:	1004d07a 	srli	r2,r2,1
    55c8:	e0bff915 	stw	r2,-28(fp)
	uint32_t real_tx_bandwidth = rf_tx_bw / 2;
    55cc:	e0bfff17 	ldw	r2,-4(fp)
    55d0:	1004d07a 	srli	r2,r2,1
    55d4:	e0bffa15 	stw	r2,-24(fp)
	uint32_t bbpll_freq;
	int32_t ret;

	dev_dbg(&phy->spi->dev, "%s: %"PRIu32" %"PRIu32,
    55d8:	010000b4 	movhi	r4,2
    55dc:	211c1a04 	addi	r4,r4,28776
    55e0:	014000b4 	movhi	r5,2
    55e4:	295eda04 	addi	r5,r5,31592
    55e8:	e1bffe17 	ldw	r6,-8(fp)
    55ec:	e1ffff17 	ldw	r7,-4(fp)
    55f0:	001f8180 	call	1f818 <printf>
    55f4:	010000b4 	movhi	r4,2
    55f8:	211a7504 	addi	r4,r4,27092
    55fc:	001f8180 	call	1f818 <printf>
		__func__, rf_rx_bw, rf_tx_bw);

	bbpll_freq = clk_get_rate(phy, phy->ref_clk_scale[BBPLL_CLK]);
    5600:	e0bffd17 	ldw	r2,-12(fp)
    5604:	10801a17 	ldw	r2,104(r2)
    5608:	e13ffd17 	ldw	r4,-12(fp)
    560c:	100b883a 	mov	r5,r2
    5610:	001bc900 	call	1bc90 <clk_get_rate>
    5614:	e0bffb15 	stw	r2,-20(fp)

	ret = ad9361_rx_bb_analog_filter_calib(phy,
    5618:	e13ffd17 	ldw	r4,-12(fp)
    561c:	e17ff917 	ldw	r5,-28(fp)
    5620:	e1bffb17 	ldw	r6,-20(fp)
    5624:	00049900 	call	4990 <ad9361_rx_bb_analog_filter_calib>
    5628:	e0bffc15 	stw	r2,-16(fp)
				real_rx_bandwidth,
				bbpll_freq);
	if (ret < 0)
    562c:	e0bffc17 	ldw	r2,-16(fp)
    5630:	1000020e 	bge	r2,zero,563c <__ad9361_update_rf_bandwidth+0xa0>
		return ret;
    5634:	e0bffc17 	ldw	r2,-16(fp)
    5638:	00002806 	br	56dc <__ad9361_update_rf_bandwidth+0x140>

	ret = ad9361_tx_bb_analog_filter_calib(phy,
    563c:	e13ffd17 	ldw	r4,-12(fp)
    5640:	e17ffa17 	ldw	r5,-24(fp)
    5644:	e1bffb17 	ldw	r6,-20(fp)
    5648:	0004c1c0 	call	4c1c <ad9361_tx_bb_analog_filter_calib>
    564c:	e0bffc15 	stw	r2,-16(fp)
				real_tx_bandwidth,
				bbpll_freq);
	if (ret < 0)
    5650:	e0bffc17 	ldw	r2,-16(fp)
    5654:	1000020e 	bge	r2,zero,5660 <__ad9361_update_rf_bandwidth+0xc4>
		return ret;
    5658:	e0bffc17 	ldw	r2,-16(fp)
    565c:	00001f06 	br	56dc <__ad9361_update_rf_bandwidth+0x140>

	ret = ad9361_rx_tia_calib(phy, real_rx_bandwidth);
    5660:	e13ffd17 	ldw	r4,-12(fp)
    5664:	e17ff917 	ldw	r5,-28(fp)
    5668:	00046a00 	call	46a0 <ad9361_rx_tia_calib>
    566c:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    5670:	e0bffc17 	ldw	r2,-16(fp)
    5674:	1000020e 	bge	r2,zero,5680 <__ad9361_update_rf_bandwidth+0xe4>
		return ret;
    5678:	e0bffc17 	ldw	r2,-16(fp)
    567c:	00001706 	br	56dc <__ad9361_update_rf_bandwidth+0x140>

	ret = ad9361_tx_bb_second_filter_calib(phy, real_tx_bandwidth);
    5680:	e13ffd17 	ldw	r4,-12(fp)
    5684:	e17ffa17 	ldw	r5,-24(fp)
    5688:	0004d9c0 	call	4d9c <ad9361_tx_bb_second_filter_calib>
    568c:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    5690:	e0bffc17 	ldw	r2,-16(fp)
    5694:	1000020e 	bge	r2,zero,56a0 <__ad9361_update_rf_bandwidth+0x104>
		return ret;
    5698:	e0bffc17 	ldw	r2,-16(fp)
    569c:	00000f06 	br	56dc <__ad9361_update_rf_bandwidth+0x140>

	ret = ad9361_rx_adc_setup(phy,
    56a0:	e0bffd17 	ldw	r2,-12(fp)
    56a4:	10801b17 	ldw	r2,108(r2)
    56a8:	e13ffd17 	ldw	r4,-12(fp)
    56ac:	100b883a 	mov	r5,r2
    56b0:	001bc900 	call	1bc90 <clk_get_rate>
    56b4:	e13ffd17 	ldw	r4,-12(fp)
    56b8:	e17ffb17 	ldw	r5,-20(fp)
    56bc:	100d883a 	mov	r6,r2
    56c0:	00038140 	call	3814 <ad9361_rx_adc_setup>
    56c4:	e0bffc15 	stw	r2,-16(fp)
				bbpll_freq,
				clk_get_rate(phy, phy->ref_clk_scale[ADC_CLK]));
	if (ret < 0)
    56c8:	e0bffc17 	ldw	r2,-16(fp)
    56cc:	1000020e 	bge	r2,zero,56d8 <__ad9361_update_rf_bandwidth+0x13c>
		return ret;
    56d0:	e0bffc17 	ldw	r2,-16(fp)
    56d4:	00000106 	br	56dc <__ad9361_update_rf_bandwidth+0x140>

	return 0;
    56d8:	0005883a 	mov	r2,zero
}
    56dc:	e037883a 	mov	sp,fp
    56e0:	dfc00117 	ldw	ra,4(sp)
    56e4:	df000017 	ldw	fp,0(sp)
    56e8:	dec00204 	addi	sp,sp,8
    56ec:	f800283a 	ret

000056f0 <__ad9361_tx_quad_calib>:
 * @param res res
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t __ad9361_tx_quad_calib(struct ad9361_rf_phy *phy, uint32_t phase,
				  uint32_t rxnco_word, uint32_t decim, uint8_t *res)
{
    56f0:	defff904 	addi	sp,sp,-28
    56f4:	de00012e 	bgeu	sp,et,56fc <__ad9361_tx_quad_calib+0xc>
    56f8:	003b68fa 	trap	3
    56fc:	dfc00615 	stw	ra,24(sp)
    5700:	df000515 	stw	fp,20(sp)
    5704:	df000504 	addi	fp,sp,20
    5708:	e13ffc15 	stw	r4,-16(fp)
    570c:	e17ffd15 	stw	r5,-12(fp)
    5710:	e1bffe15 	stw	r6,-8(fp)
    5714:	e1ffff15 	stw	r7,-4(fp)
	int32_t ret;

	ad9361_spi_write(phy->spi, REG_QUAD_CAL_NCO_FREQ_PHASE_OFFSET,
    5718:	e0bffc17 	ldw	r2,-16(fp)
    571c:	11000117 	ldw	r4,4(r2)
		RX_NCO_FREQ(rxnco_word) | RX_NCO_PHASE_OFFSET(phase));
    5720:	e0bffe17 	ldw	r2,-8(fp)
    5724:	108000cc 	andi	r2,r2,3
    5728:	1006917a 	slli	r3,r2,5
    572c:	e0bffd17 	ldw	r2,-12(fp)
    5730:	108007cc 	andi	r2,r2,31
static int32_t __ad9361_tx_quad_calib(struct ad9361_rf_phy *phy, uint32_t phase,
				  uint32_t rxnco_word, uint32_t decim, uint8_t *res)
{
	int32_t ret;

	ad9361_spi_write(phy->spi, REG_QUAD_CAL_NCO_FREQ_PHASE_OFFSET,
    5734:	1884b03a 	or	r2,r3,r2
    5738:	01402804 	movi	r5,160
    573c:	100d883a 	mov	r6,r2
    5740:	00002600 	call	260 <ad9361_spi_write>
		RX_NCO_FREQ(rxnco_word) | RX_NCO_PHASE_OFFSET(phase));
	ad9361_spi_write(phy->spi, REG_QUAD_CAL_CTRL,
    5744:	e0bffc17 	ldw	r2,-16(fp)
    5748:	10c00117 	ldw	r3,4(r2)
			SETTLE_MAIN_ENABLE | DC_OFFSET_ENABLE | QUAD_CAL_SOFT_RESET |
			GAIN_ENABLE | PHASE_ENABLE | M_DECIM(decim));
    574c:	e0bfff17 	ldw	r2,-4(fp)
    5750:	108000cc 	andi	r2,r2,3
{
	int32_t ret;

	ad9361_spi_write(phy->spi, REG_QUAD_CAL_NCO_FREQ_PHASE_OFFSET,
		RX_NCO_FREQ(rxnco_word) | RX_NCO_PHASE_OFFSET(phase));
	ad9361_spi_write(phy->spi, REG_QUAD_CAL_CTRL,
    5754:	10801f14 	ori	r2,r2,124
    5758:	1809883a 	mov	r4,r3
    575c:	01402844 	movi	r5,161
    5760:	100d883a 	mov	r6,r2
    5764:	00002600 	call	260 <ad9361_spi_write>
			SETTLE_MAIN_ENABLE | DC_OFFSET_ENABLE | QUAD_CAL_SOFT_RESET |
			GAIN_ENABLE | PHASE_ENABLE | M_DECIM(decim));
	ad9361_spi_write(phy->spi, REG_QUAD_CAL_CTRL,
    5768:	e0bffc17 	ldw	r2,-16(fp)
    576c:	10c00117 	ldw	r3,4(r2)
			SETTLE_MAIN_ENABLE | DC_OFFSET_ENABLE |
			GAIN_ENABLE | PHASE_ENABLE | M_DECIM(decim));
    5770:	e0bfff17 	ldw	r2,-4(fp)
    5774:	108000cc 	andi	r2,r2,3
	ad9361_spi_write(phy->spi, REG_QUAD_CAL_NCO_FREQ_PHASE_OFFSET,
		RX_NCO_FREQ(rxnco_word) | RX_NCO_PHASE_OFFSET(phase));
	ad9361_spi_write(phy->spi, REG_QUAD_CAL_CTRL,
			SETTLE_MAIN_ENABLE | DC_OFFSET_ENABLE | QUAD_CAL_SOFT_RESET |
			GAIN_ENABLE | PHASE_ENABLE | M_DECIM(decim));
	ad9361_spi_write(phy->spi, REG_QUAD_CAL_CTRL,
    5778:	10801e14 	ori	r2,r2,120
    577c:	1809883a 	mov	r4,r3
    5780:	01402844 	movi	r5,161
    5784:	100d883a 	mov	r6,r2
    5788:	00002600 	call	260 <ad9361_spi_write>
			SETTLE_MAIN_ENABLE | DC_OFFSET_ENABLE |
			GAIN_ENABLE | PHASE_ENABLE | M_DECIM(decim));

	ret =  ad9361_run_calibration(phy, TX_QUAD_CAL);
    578c:	e13ffc17 	ldw	r4,-16(fp)
    5790:	01400404 	movi	r5,16
    5794:	0000f900 	call	f90 <ad9361_run_calibration>
    5798:	e0bffb15 	stw	r2,-20(fp)
	if (ret < 0)
    579c:	e0bffb17 	ldw	r2,-20(fp)
    57a0:	1000020e 	bge	r2,zero,57ac <__ad9361_tx_quad_calib+0xbc>
		return ret;
    57a4:	e0bffb17 	ldw	r2,-20(fp)
    57a8:	00001406 	br	57fc <__ad9361_tx_quad_calib+0x10c>

	if (res)
    57ac:	e0800217 	ldw	r2,8(fp)
    57b0:	10001126 	beq	r2,zero,57f8 <__ad9361_tx_quad_calib+0x108>
		*res = ad9361_spi_read(phy->spi,
    57b4:	e0bffc17 	ldw	r2,-16(fp)
    57b8:	10c00117 	ldw	r3,4(r2)
				(phy->pdata->rx1tx1_mode_use_tx_num == 2) ?
    57bc:	e0bffc17 	ldw	r2,-16(fp)
    57c0:	10803017 	ldw	r2,192(r2)
    57c4:	10800b17 	ldw	r2,44(r2)
	ret =  ad9361_run_calibration(phy, TX_QUAD_CAL);
	if (ret < 0)
		return ret;

	if (res)
		*res = ad9361_spi_read(phy->spi,
    57c8:	10800098 	cmpnei	r2,r2,2
    57cc:	1000021e 	bne	r2,zero,57d8 <__ad9361_tx_quad_calib+0xe8>
    57d0:	00802a04 	movi	r2,168
    57d4:	00000106 	br	57dc <__ad9361_tx_quad_calib+0xec>
    57d8:	008029c4 	movi	r2,167
    57dc:	1809883a 	mov	r4,r3
    57e0:	100b883a 	mov	r5,r2
    57e4:	00001500 	call	150 <ad9361_spi_read>
    57e8:	108000cc 	andi	r2,r2,3
    57ec:	1007883a 	mov	r3,r2
    57f0:	e0800217 	ldw	r2,8(fp)
    57f4:	10c00005 	stb	r3,0(r2)
				(phy->pdata->rx1tx1_mode_use_tx_num == 2) ?
				REG_QUAD_CAL_STATUS_TX2 : REG_QUAD_CAL_STATUS_TX1) &
				(TX1_LO_CONV | TX1_SSB_CONV);

	return 0;
    57f8:	0005883a 	mov	r2,zero
}
    57fc:	e037883a 	mov	sp,fp
    5800:	dfc00117 	ldw	ra,4(sp)
    5804:	df000017 	ldw	fp,0(sp)
    5808:	dec00204 	addi	sp,sp,8
    580c:	f800283a 	ret

00005810 <ad9361_tx_quad_phase_search>:
 * @param phy The AD9361 state structure.
 * @param rxnco_word Rx NCO word.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_tx_quad_phase_search(struct ad9361_rf_phy *phy, uint32_t rxnco_word, uint8_t decim)
{
    5810:	deffe604 	addi	sp,sp,-104
    5814:	de00012e 	bgeu	sp,et,581c <ad9361_tx_quad_phase_search+0xc>
    5818:	003b68fa 	trap	3
    581c:	dfc01915 	stw	ra,100(sp)
    5820:	df001815 	stw	fp,96(sp)
    5824:	df001804 	addi	fp,sp,96
    5828:	e13ffd15 	stw	r4,-12(fp)
    582c:	e17ffe15 	stw	r5,-8(fp)
    5830:	3005883a 	mov	r2,r6
    5834:	e0bfff05 	stb	r2,-4(fp)
	int32_t i, ret;
	uint8_t field[64], val;
	uint32_t start;

	dev_dbg(&phy->spi->dev, "%s", __func__);
    5838:	010000b4 	movhi	r4,2
    583c:	211aac04 	addi	r4,r4,27312
    5840:	014000b4 	movhi	r5,2
    5844:	295ee204 	addi	r5,r5,31624
    5848:	001f8180 	call	1f818 <printf>
    584c:	010000b4 	movhi	r4,2
    5850:	211a7504 	addi	r4,r4,27092
    5854:	001f8180 	call	1f818 <printf>

	for (i = 0; i < (int64_t)(ARRAY_SIZE(field) / 2); i++) {
    5858:	e03fe915 	stw	zero,-92(fp)
    585c:	00002806 	br	5900 <ad9361_tx_quad_phase_search+0xf0>
		ret =  __ad9361_tx_quad_calib(phy, i, rxnco_word, decim, &val);
    5860:	e17fe917 	ldw	r5,-92(fp)
    5864:	e0ffff03 	ldbu	r3,-4(fp)
    5868:	e0bffb04 	addi	r2,fp,-20
    586c:	d8800015 	stw	r2,0(sp)
    5870:	e13ffd17 	ldw	r4,-12(fp)
    5874:	e1bffe17 	ldw	r6,-8(fp)
    5878:	180f883a 	mov	r7,r3
    587c:	00056f00 	call	56f0 <__ad9361_tx_quad_calib>
    5880:	e0bfea15 	stw	r2,-88(fp)
		if (ret < 0)
    5884:	e0bfea17 	ldw	r2,-88(fp)
    5888:	1000020e 	bge	r2,zero,5894 <ad9361_tx_quad_phase_search+0x84>
			return ret;
    588c:	e0bfea17 	ldw	r2,-88(fp)
    5890:	00003e06 	br	598c <ad9361_tx_quad_phase_search+0x17c>

		/* Handle 360/0 wrap around */
		field[i] = field[i + 32] = !((val & TX1_LO_CONV) && (val & TX1_SSB_CONV));
    5894:	e0bfe917 	ldw	r2,-92(fp)
    5898:	10800804 	addi	r2,r2,32
    589c:	e0fffb03 	ldbu	r3,-20(fp)
    58a0:	18c03fcc 	andi	r3,r3,255
    58a4:	18c0008c 	andi	r3,r3,2
    58a8:	18000426 	beq	r3,zero,58bc <ad9361_tx_quad_phase_search+0xac>
    58ac:	e0fffb03 	ldbu	r3,-20(fp)
    58b0:	18c03fcc 	andi	r3,r3,255
    58b4:	18c0004c 	andi	r3,r3,1
    58b8:	1800021e 	bne	r3,zero,58c4 <ad9361_tx_quad_phase_search+0xb4>
    58bc:	00c00044 	movi	r3,1
    58c0:	00000106 	br	58c8 <ad9361_tx_quad_phase_search+0xb8>
    58c4:	0007883a 	mov	r3,zero
    58c8:	1809883a 	mov	r4,r3
    58cc:	e0ffeb04 	addi	r3,fp,-84
    58d0:	1887883a 	add	r3,r3,r2
    58d4:	19000005 	stb	r4,0(r3)
    58d8:	e0ffeb04 	addi	r3,fp,-84
    58dc:	1885883a 	add	r2,r3,r2
    58e0:	10c00003 	ldbu	r3,0(r2)
    58e4:	e13feb04 	addi	r4,fp,-84
    58e8:	e0bfe917 	ldw	r2,-92(fp)
    58ec:	2085883a 	add	r2,r4,r2
    58f0:	10c00005 	stb	r3,0(r2)
	uint8_t field[64], val;
	uint32_t start;

	dev_dbg(&phy->spi->dev, "%s", __func__);

	for (i = 0; i < (int64_t)(ARRAY_SIZE(field) / 2); i++) {
    58f4:	e0bfe917 	ldw	r2,-92(fp)
    58f8:	10800044 	addi	r2,r2,1
    58fc:	e0bfe915 	stw	r2,-92(fp)
    5900:	e0bfe917 	ldw	r2,-92(fp)
    5904:	10800810 	cmplti	r2,r2,32
    5908:	103fd51e 	bne	r2,zero,5860 <_gp+0xfffd3740>

		/* Handle 360/0 wrap around */
		field[i] = field[i + 32] = !((val & TX1_LO_CONV) && (val & TX1_SSB_CONV));
	}

	ret = ad9361_find_opt(field, ARRAY_SIZE(field), &start);
    590c:	e0ffeb04 	addi	r3,fp,-84
    5910:	e0bffc04 	addi	r2,fp,-16
    5914:	1809883a 	mov	r4,r3
    5918:	01401004 	movi	r5,64
    591c:	100d883a 	mov	r6,r2
    5920:	00004f00 	call	4f0 <ad9361_find_opt>
    5924:	e0bfea15 	stw	r2,-88(fp)

	phy->last_tx_quad_cal_phase = (start + ret / 2) & 0x1F;
    5928:	e0bfea17 	ldw	r2,-88(fp)
    592c:	1006d7fa 	srli	r3,r2,31
    5930:	1885883a 	add	r2,r3,r2
    5934:	1005d07a 	srai	r2,r2,1
    5938:	1007883a 	mov	r3,r2
    593c:	e0bffc17 	ldw	r2,-16(fp)
    5940:	1885883a 	add	r2,r3,r2
    5944:	10c007cc 	andi	r3,r2,31
    5948:	e0bffd17 	ldw	r2,-12(fp)
    594c:	10c04815 	stw	r3,288(r2)
	printk(" RX_NCO_PHASE_OFFSET(%"PRIu32", 0x%"PRIX32") \n", phy->last_tx_quad_cal_phase,
	       phy->last_tx_quad_cal_phase);
#endif
#endif

	ret = __ad9361_tx_quad_calib(phy, phy->last_tx_quad_cal_phase, rxnco_word, decim, NULL);
    5950:	e0bffd17 	ldw	r2,-12(fp)
    5954:	10c04817 	ldw	r3,288(r2)
    5958:	e0bfff03 	ldbu	r2,-4(fp)
    595c:	d8000015 	stw	zero,0(sp)
    5960:	e13ffd17 	ldw	r4,-12(fp)
    5964:	180b883a 	mov	r5,r3
    5968:	e1bffe17 	ldw	r6,-8(fp)
    596c:	100f883a 	mov	r7,r2
    5970:	00056f00 	call	56f0 <__ad9361_tx_quad_calib>
    5974:	e0bfea15 	stw	r2,-88(fp)
	if (ret < 0)
    5978:	e0bfea17 	ldw	r2,-88(fp)
    597c:	1000020e 	bge	r2,zero,5988 <ad9361_tx_quad_phase_search+0x178>
		return ret;
    5980:	e0bfea17 	ldw	r2,-88(fp)
    5984:	00000106 	br	598c <ad9361_tx_quad_phase_search+0x17c>

	return 0;
    5988:	0005883a 	mov	r2,zero
}
    598c:	e037883a 	mov	sp,fp
    5990:	dfc00117 	ldw	ra,4(sp)
    5994:	df000017 	ldw	fp,0(sp)
    5998:	dec00204 	addi	sp,sp,8
    599c:	f800283a 	ret

000059a0 <ad9361_tx_quad_calib>:
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_tx_quad_calib(struct ad9361_rf_phy *phy,
	uint32_t bw_rx, uint32_t bw_tx,
	int32_t rx_phase)
{
    59a0:	deffdc04 	addi	sp,sp,-144
    59a4:	de00012e 	bgeu	sp,et,59ac <ad9361_tx_quad_calib+0xc>
    59a8:	003b68fa 	trap	3
    59ac:	dfc02315 	stw	ra,140(sp)
    59b0:	df002215 	stw	fp,136(sp)
    59b4:	ddc02115 	stw	r23,132(sp)
    59b8:	dd802015 	stw	r22,128(sp)
    59bc:	dd401f15 	stw	r21,124(sp)
    59c0:	dd001e15 	stw	r20,120(sp)
    59c4:	dcc01d15 	stw	r19,116(sp)
    59c8:	dc801c15 	stw	r18,112(sp)
    59cc:	dc401b15 	stw	r17,108(sp)
    59d0:	dc001a15 	stw	r16,104(sp)
    59d4:	df002204 	addi	fp,sp,136
    59d8:	e13fec15 	stw	r4,-80(fp)
    59dc:	e17fed15 	stw	r5,-76(fp)
    59e0:	e1bfee15 	stw	r6,-72(fp)
    59e4:	e1ffef15 	stw	r7,-68(fp)
	struct spi_device *spi = phy->spi;
    59e8:	e0bfec17 	ldw	r2,-80(fp)
    59ec:	10800117 	ldw	r2,4(r2)
    59f0:	e0bfe715 	stw	r2,-100(fp)
	uint32_t clktf, clkrf;
	int32_t txnco_word, rxnco_word, txnco_freq, ret;
	uint8_t __rx_phase = 0, reg_inv_bits = 0, val, decim;
    59f4:	e03fe205 	stb	zero,-120(fp)
    59f8:	e03fe245 	stb	zero,-119(fp)
	* BW / 4 = Rx NCO freq = Tx NCO freq:
	* Rx NCO = ClkRF * (rxNCO <1:0> + 1) / 32
	* Tx NCO = ClkTF * (txNCO <1:0> + 1) / 32
	*/

	clkrf = clk_get_rate(phy, phy->ref_clk_scale[CLKRF_CLK]);
    59fc:	e0bfec17 	ldw	r2,-80(fp)
    5a00:	10801e17 	ldw	r2,120(r2)
    5a04:	e13fec17 	ldw	r4,-80(fp)
    5a08:	100b883a 	mov	r5,r2
    5a0c:	001bc900 	call	1bc90 <clk_get_rate>
    5a10:	e0bfe815 	stw	r2,-96(fp)
	clktf = clk_get_rate(phy, phy->ref_clk_scale[CLKTF_CLK]);
    5a14:	e0bfec17 	ldw	r2,-80(fp)
    5a18:	10802317 	ldw	r2,140(r2)
    5a1c:	e13fec17 	ldw	r4,-80(fp)
    5a20:	100b883a 	mov	r5,r2
    5a24:	001bc900 	call	1bc90 <clk_get_rate>
    5a28:	e0bfe915 	stw	r2,-92(fp)

	dev_dbg(&phy->spi->dev, "%s : bw_tx %"PRIu32" clkrf %"PRIu32" clktf %"PRIu32,
    5a2c:	e0bfe917 	ldw	r2,-92(fp)
    5a30:	d8800015 	stw	r2,0(sp)
    5a34:	010000b4 	movhi	r4,2
    5a38:	211c1d04 	addi	r4,r4,28788
    5a3c:	014000b4 	movhi	r5,2
    5a40:	295ee904 	addi	r5,r5,31652
    5a44:	e1bfee17 	ldw	r6,-72(fp)
    5a48:	e1ffe817 	ldw	r7,-96(fp)
    5a4c:	001f8180 	call	1f818 <printf>
    5a50:	010000b4 	movhi	r4,2
    5a54:	211a7504 	addi	r4,r4,27092
    5a58:	001f8180 	call	1f818 <printf>
		__func__, bw_tx, clkrf, clktf);

	txnco_word = DIV_ROUND_CLOSEST(bw_tx * 8, clktf) - 1;
    5a5c:	e0bfee17 	ldw	r2,-72(fp)
    5a60:	100690fa 	slli	r3,r2,3
    5a64:	e0bfe917 	ldw	r2,-92(fp)
    5a68:	1004d07a 	srli	r2,r2,1
    5a6c:	1885883a 	add	r2,r3,r2
    5a70:	1009883a 	mov	r4,r2
    5a74:	e17fe917 	ldw	r5,-92(fp)
    5a78:	001d7a40 	call	1d7a4 <__udivsi3>
    5a7c:	10bfffc4 	addi	r2,r2,-1
    5a80:	e0bfdf15 	stw	r2,-132(fp)
	txnco_word = clamp_t(int, txnco_word, 0, 3);
    5a84:	e0bfdf17 	ldw	r2,-132(fp)
    5a88:	0080050e 	bge	zero,r2,5aa0 <ad9361_tx_quad_calib+0x100>
    5a8c:	e0bfdf17 	ldw	r2,-132(fp)
    5a90:	10c00110 	cmplti	r3,r2,4
    5a94:	1800031e 	bne	r3,zero,5aa4 <ad9361_tx_quad_calib+0x104>
    5a98:	008000c4 	movi	r2,3
    5a9c:	00000106 	br	5aa4 <ad9361_tx_quad_calib+0x104>
    5aa0:	0005883a 	mov	r2,zero
    5aa4:	e0bfdf15 	stw	r2,-132(fp)
	rxnco_word = txnco_word;
    5aa8:	e0bfdf17 	ldw	r2,-132(fp)
    5aac:	e0bfe015 	stw	r2,-128(fp)

	dev_dbg(dev, "Tx NCO frequency: %"PRIu32" (BW/4: %"PRIu32") txnco_word %"PRId32,
    5ab0:	e0bfdf17 	ldw	r2,-132(fp)
    5ab4:	10800044 	addi	r2,r2,1
    5ab8:	1007883a 	mov	r3,r2
    5abc:	e0bfe917 	ldw	r2,-92(fp)
    5ac0:	1885383a 	mul	r2,r3,r2
    5ac4:	1006d17a 	srli	r3,r2,5
    5ac8:	e0bfee17 	ldw	r2,-72(fp)
    5acc:	1004d0ba 	srli	r2,r2,2
    5ad0:	010000b4 	movhi	r4,2
    5ad4:	211c2604 	addi	r4,r4,28824
    5ad8:	180b883a 	mov	r5,r3
    5adc:	100d883a 	mov	r6,r2
    5ae0:	e1ffdf17 	ldw	r7,-132(fp)
    5ae4:	001f8180 	call	1f818 <printf>
    5ae8:	010000b4 	movhi	r4,2
    5aec:	211a7504 	addi	r4,r4,27092
    5af0:	001f8180 	call	1f818 <printf>
			clktf * (txnco_word + 1) / 32, bw_tx / 4, txnco_word);

	if (clktf <= 4000000UL)
    5af4:	e0ffe917 	ldw	r3,-92(fp)
    5af8:	00800f74 	movhi	r2,61
    5afc:	10824004 	addi	r2,r2,2304
    5b00:	10c00336 	bltu	r2,r3,5b10 <ad9361_tx_quad_calib+0x170>
		decim = 2;
    5b04:	00800084 	movi	r2,2
    5b08:	e0bfe285 	stb	r2,-118(fp)
    5b0c:	00000206 	br	5b18 <ad9361_tx_quad_calib+0x178>
	else
		decim = 3;
    5b10:	008000c4 	movi	r2,3
    5b14:	e0bfe285 	stb	r2,-118(fp)

	if (clkrf == (2 * clktf)) {
    5b18:	e0bfe917 	ldw	r2,-92(fp)
    5b1c:	1085883a 	add	r2,r2,r2
    5b20:	1007883a 	mov	r3,r2
    5b24:	e0bfe817 	ldw	r2,-96(fp)
    5b28:	1880241e 	bne	r3,r2,5bbc <ad9361_tx_quad_calib+0x21c>
		__rx_phase = 0x0E;
    5b2c:	00800384 	movi	r2,14
    5b30:	e0bfe205 	stb	r2,-120(fp)
		switch (txnco_word) {
    5b34:	e0bfdf17 	ldw	r2,-132(fp)
    5b38:	10c00060 	cmpeqi	r3,r2,1
    5b3c:	18000d1e 	bne	r3,zero,5b74 <ad9361_tx_quad_calib+0x1d4>
    5b40:	10c00088 	cmpgei	r3,r2,2
    5b44:	1800021e 	bne	r3,zero,5b50 <ad9361_tx_quad_calib+0x1b0>
    5b48:	10000626 	beq	r2,zero,5b64 <ad9361_tx_quad_calib+0x1c4>
    5b4c:	00004c06 	br	5c80 <ad9361_tx_quad_calib+0x2e0>
    5b50:	10c000a0 	cmpeqi	r3,r2,2
    5b54:	18000b1e 	bne	r3,zero,5b84 <ad9361_tx_quad_calib+0x1e4>
    5b58:	108000e0 	cmpeqi	r2,r2,3
    5b5c:	1000101e 	bne	r2,zero,5ba0 <ad9361_tx_quad_calib+0x200>
    5b60:	00004706 	br	5c80 <ad9361_tx_quad_calib+0x2e0>
		case 0:
			txnco_word++;
    5b64:	e0bfdf17 	ldw	r2,-132(fp)
    5b68:	10800044 	addi	r2,r2,1
    5b6c:	e0bfdf15 	stw	r2,-132(fp)
			break;
    5b70:	00001106 	br	5bb8 <ad9361_tx_quad_calib+0x218>
		case 1:
			rxnco_word--;
    5b74:	e0bfe017 	ldw	r2,-128(fp)
    5b78:	10bfffc4 	addi	r2,r2,-1
    5b7c:	e0bfe015 	stw	r2,-128(fp)
			break;
    5b80:	00000d06 	br	5bb8 <ad9361_tx_quad_calib+0x218>
		case 2:
			rxnco_word -= 2;
    5b84:	e0bfe017 	ldw	r2,-128(fp)
    5b88:	10bfff84 	addi	r2,r2,-2
    5b8c:	e0bfe015 	stw	r2,-128(fp)
			txnco_word--;
    5b90:	e0bfdf17 	ldw	r2,-132(fp)
    5b94:	10bfffc4 	addi	r2,r2,-1
    5b98:	e0bfdf15 	stw	r2,-132(fp)
			break;
    5b9c:	00000606 	br	5bb8 <ad9361_tx_quad_calib+0x218>
		case 3:
			rxnco_word -= 2;	/* REVISIT */
    5ba0:	e0bfe017 	ldw	r2,-128(fp)
    5ba4:	10bfff84 	addi	r2,r2,-2
    5ba8:	e0bfe015 	stw	r2,-128(fp)
			__rx_phase = 0x08;
    5bac:	00800204 	movi	r2,8
    5bb0:	e0bfe205 	stb	r2,-120(fp)
			break;
    5bb4:	0001883a 	nop
    5bb8:	00003106 	br	5c80 <ad9361_tx_quad_calib+0x2e0>
		}
	}
	else if (clkrf == clktf) {
    5bbc:	e0ffe817 	ldw	r3,-96(fp)
    5bc0:	e0bfe917 	ldw	r2,-92(fp)
    5bc4:	1880221e 	bne	r3,r2,5c50 <ad9361_tx_quad_calib+0x2b0>
		switch (txnco_word) {
    5bc8:	e0bfdf17 	ldw	r2,-132(fp)
    5bcc:	10c00060 	cmpeqi	r3,r2,1
    5bd0:	18000f1e 	bne	r3,zero,5c10 <ad9361_tx_quad_calib+0x270>
    5bd4:	10c00088 	cmpgei	r3,r2,2
    5bd8:	1800021e 	bne	r3,zero,5be4 <ad9361_tx_quad_calib+0x244>
    5bdc:	10000626 	beq	r2,zero,5bf8 <ad9361_tx_quad_calib+0x258>
    5be0:	00002706 	br	5c80 <ad9361_tx_quad_calib+0x2e0>
    5be4:	10c000a0 	cmpeqi	r3,r2,2
    5be8:	1800061e 	bne	r3,zero,5c04 <ad9361_tx_quad_calib+0x264>
    5bec:	108000e0 	cmpeqi	r2,r2,3
    5bf0:	1000011e 	bne	r2,zero,5bf8 <ad9361_tx_quad_calib+0x258>
    5bf4:	00002206 	br	5c80 <ad9361_tx_quad_calib+0x2e0>
		case 0:
		case 3:
			__rx_phase = 0x15;
    5bf8:	00800544 	movi	r2,21
    5bfc:	e0bfe205 	stb	r2,-120(fp)
			break;
    5c00:	00001206 	br	5c4c <ad9361_tx_quad_calib+0x2ac>
		case 2:
			__rx_phase = 0x1F;
    5c04:	008007c4 	movi	r2,31
    5c08:	e0bfe205 	stb	r2,-120(fp)
			break;
    5c0c:	00000f06 	br	5c4c <ad9361_tx_quad_calib+0x2ac>
		case 1:
			if (ad9361_spi_readf(spi,
    5c10:	01000fc4 	movi	r4,63
    5c14:	001c8300 	call	1c830 <find_first_bit>
    5c18:	e13fe717 	ldw	r4,-100(fp)
    5c1c:	01400084 	movi	r5,2
    5c20:	01800fc4 	movi	r6,63
    5c24:	100f883a 	mov	r7,r2
    5c28:	00001b80 	call	1b8 <__ad9361_spi_readf>
    5c2c:	10800898 	cmpnei	r2,r2,34
    5c30:	1000031e 	bne	r2,zero,5c40 <ad9361_tx_quad_calib+0x2a0>
				REG_TX_ENABLE_FILTER_CTRL, 0x3F) == 0x22)
				__rx_phase = 0x15; 	/* REVISIT */
    5c34:	00800544 	movi	r2,21
    5c38:	e0bfe205 	stb	r2,-120(fp)
			else
				__rx_phase = 0x1A;
			break;
    5c3c:	00000206 	br	5c48 <ad9361_tx_quad_calib+0x2a8>
		case 1:
			if (ad9361_spi_readf(spi,
				REG_TX_ENABLE_FILTER_CTRL, 0x3F) == 0x22)
				__rx_phase = 0x15; 	/* REVISIT */
			else
				__rx_phase = 0x1A;
    5c40:	00800684 	movi	r2,26
    5c44:	e0bfe205 	stb	r2,-120(fp)
			break;
    5c48:	0001883a 	nop
    5c4c:	00000c06 	br	5c80 <ad9361_tx_quad_calib+0x2e0>
		}
	}
	else
		dev_err(dev, "Unhandled case in %s line %d clkrf %"PRIu32" clktf %"PRIu32,
    5c50:	e0bfe917 	ldw	r2,-92(fp)
    5c54:	d8800015 	stw	r2,0(sp)
    5c58:	010000b4 	movhi	r4,2
    5c5c:	211c3304 	addi	r4,r4,28876
    5c60:	014000b4 	movhi	r5,2
    5c64:	295ee904 	addi	r5,r5,31652
    5c68:	0182d1c4 	movi	r6,2887
    5c6c:	e1ffe817 	ldw	r7,-96(fp)
    5c70:	001f8180 	call	1f818 <printf>
    5c74:	010000b4 	movhi	r4,2
    5c78:	211a7504 	addi	r4,r4,27092
    5c7c:	001f8180 	call	1f818 <printf>
		__func__, __LINE__, clkrf, clktf);


	if (rx_phase >= 0)
    5c80:	e0bfef17 	ldw	r2,-68(fp)
    5c84:	10000216 	blt	r2,zero,5c90 <ad9361_tx_quad_calib+0x2f0>
		__rx_phase = rx_phase;
    5c88:	e0bfef17 	ldw	r2,-68(fp)
    5c8c:	e0bfe205 	stb	r2,-120(fp)

	txnco_freq = clktf * (txnco_word + 1) / 32;
    5c90:	e0bfdf17 	ldw	r2,-132(fp)
    5c94:	10800044 	addi	r2,r2,1
    5c98:	1007883a 	mov	r3,r2
    5c9c:	e0bfe917 	ldw	r2,-92(fp)
    5ca0:	1885383a 	mul	r2,r3,r2
    5ca4:	1004d17a 	srli	r2,r2,5
    5ca8:	e0bfea15 	stw	r2,-88(fp)

	if (txnco_freq > (int64_t)(bw_rx / 4) || txnco_freq > (int64_t)(bw_tx / 4)) {
    5cac:	e0bfea17 	ldw	r2,-88(fp)
    5cb0:	e0bff015 	stw	r2,-64(fp)
    5cb4:	1005d7fa 	srai	r2,r2,31
    5cb8:	e0bff115 	stw	r2,-60(fp)
    5cbc:	e0bfed17 	ldw	r2,-76(fp)
    5cc0:	1004d0ba 	srli	r2,r2,2
    5cc4:	e0bff215 	stw	r2,-56(fp)
    5cc8:	e03ff315 	stw	zero,-52(fp)
    5ccc:	e0bff317 	ldw	r2,-52(fp)
    5cd0:	e0fff117 	ldw	r3,-60(fp)
    5cd4:	10c01716 	blt	r2,r3,5d34 <ad9361_tx_quad_calib+0x394>
    5cd8:	e0bff117 	ldw	r2,-60(fp)
    5cdc:	e0fff317 	ldw	r3,-52(fp)
    5ce0:	10c0031e 	bne	r2,r3,5cf0 <ad9361_tx_quad_calib+0x350>
    5ce4:	e0bff217 	ldw	r2,-56(fp)
    5ce8:	e0fff017 	ldw	r3,-64(fp)
    5cec:	10c01136 	bltu	r2,r3,5d34 <ad9361_tx_quad_calib+0x394>
    5cf0:	e0bfea17 	ldw	r2,-88(fp)
    5cf4:	e0bff415 	stw	r2,-48(fp)
    5cf8:	1005d7fa 	srai	r2,r2,31
    5cfc:	e0bff515 	stw	r2,-44(fp)
    5d00:	e0bfee17 	ldw	r2,-72(fp)
    5d04:	1004d0ba 	srli	r2,r2,2
    5d08:	e0bff615 	stw	r2,-40(fp)
    5d0c:	e03ff715 	stw	zero,-36(fp)
    5d10:	e0bff717 	ldw	r2,-36(fp)
    5d14:	e0fff517 	ldw	r3,-44(fp)
    5d18:	10c00616 	blt	r2,r3,5d34 <ad9361_tx_quad_calib+0x394>
    5d1c:	e0bff517 	ldw	r2,-44(fp)
    5d20:	e0fff717 	ldw	r3,-36(fp)
    5d24:	10c0111e 	bne	r2,r3,5d6c <ad9361_tx_quad_calib+0x3cc>
    5d28:	e0bff617 	ldw	r2,-40(fp)
    5d2c:	e0fff417 	ldw	r3,-48(fp)
    5d30:	10c00e2e 	bgeu	r2,r3,5d6c <ad9361_tx_quad_calib+0x3cc>
		/* Make sure the BW during calibration is wide enough */
		ret = __ad9361_update_rf_bandwidth(phy, txnco_freq * 8, txnco_freq * 8);
    5d34:	e0bfea17 	ldw	r2,-88(fp)
    5d38:	100490fa 	slli	r2,r2,3
    5d3c:	1007883a 	mov	r3,r2
    5d40:	e0bfea17 	ldw	r2,-88(fp)
    5d44:	100490fa 	slli	r2,r2,3
    5d48:	e13fec17 	ldw	r4,-80(fp)
    5d4c:	180b883a 	mov	r5,r3
    5d50:	100d883a 	mov	r6,r2
    5d54:	000559c0 	call	559c <__ad9361_update_rf_bandwidth>
    5d58:	e0bfe115 	stw	r2,-124(fp)
		if (ret < 0)
    5d5c:	e0bfe117 	ldw	r2,-124(fp)
    5d60:	1000020e 	bge	r2,zero,5d6c <ad9361_tx_quad_calib+0x3cc>
			return ret;
    5d64:	e0bfe117 	ldw	r2,-124(fp)
    5d68:	00010e06 	br	61a4 <ad9361_tx_quad_calib+0x804>
	}

	if (phy->pdata->rx1rx2_phase_inversion_en ||
    5d6c:	e0bfec17 	ldw	r2,-80(fp)
    5d70:	10803017 	ldw	r2,192(r2)
    5d74:	10800343 	ldbu	r2,13(r2)
    5d78:	10803fcc 	andi	r2,r2,255
    5d7c:	1000061e 	bne	r2,zero,5d98 <ad9361_tx_quad_calib+0x3f8>
		(phy->pdata->port_ctrl.pp_conf[1] & INVERT_RX2)) {
    5d80:	e0bfec17 	ldw	r2,-80(fp)
    5d84:	10803017 	ldw	r2,192(r2)
    5d88:	10804343 	ldbu	r2,269(r2)
    5d8c:	10803fcc 	andi	r2,r2,255
    5d90:	1080080c 	andi	r2,r2,32
		ret = __ad9361_update_rf_bandwidth(phy, txnco_freq * 8, txnco_freq * 8);
		if (ret < 0)
			return ret;
	}

	if (phy->pdata->rx1rx2_phase_inversion_en ||
    5d94:	10001026 	beq	r2,zero,5dd8 <ad9361_tx_quad_calib+0x438>
		(phy->pdata->port_ctrl.pp_conf[1] & INVERT_RX2)) {

		ad9361_spi_writef(spi, REG_PARALLEL_PORT_CONF_2, INVERT_RX2, 0);
    5d98:	01000804 	movi	r4,32
    5d9c:	001c8300 	call	1c830 <find_first_bit>
    5da0:	d8000015 	stw	zero,0(sp)
    5da4:	e13fe717 	ldw	r4,-100(fp)
    5da8:	01400444 	movi	r5,17
    5dac:	01800804 	movi	r6,32
    5db0:	100f883a 	mov	r7,r2
    5db4:	000031c0 	call	31c <__ad9361_spi_writef>

		reg_inv_bits = ad9361_spi_read(spi, REG_INVERT_BITS);
    5db8:	e13fe717 	ldw	r4,-100(fp)
    5dbc:	01406244 	movi	r5,393
    5dc0:	00001500 	call	150 <ad9361_spi_read>
    5dc4:	e0bfe245 	stb	r2,-119(fp)

		ad9361_spi_write(spi, REG_INVERT_BITS,
    5dc8:	e13fe717 	ldw	r4,-100(fp)
    5dcc:	01406244 	movi	r5,393
    5dd0:	01800c04 	movi	r6,48
    5dd4:	00002600 	call	260 <ad9361_spi_write>
					INVERT_RX1_RF_DC_CGOUT_WORD |
					INVERT_RX2_RF_DC_CGOUT_WORD);
	}

	ad9361_spi_writef(spi, REG_KEXP_2, TX_NCO_FREQ(~0), txnco_word);
    5dd8:	01003004 	movi	r4,192
    5ddc:	001c8300 	call	1c830 <find_first_bit>
    5de0:	1007883a 	mov	r3,r2
    5de4:	e0bfdf17 	ldw	r2,-132(fp)
    5de8:	d8800015 	stw	r2,0(sp)
    5dec:	e13fe717 	ldw	r4,-100(fp)
    5df0:	014028c4 	movi	r5,163
    5df4:	01803004 	movi	r6,192
    5df8:	180f883a 	mov	r7,r3
    5dfc:	000031c0 	call	31c <__ad9361_spi_writef>
	ad9361_spi_write(spi, REG_QUAD_CAL_COUNT, 0xFF);
    5e00:	e13fe717 	ldw	r4,-100(fp)
    5e04:	01402a44 	movi	r5,169
    5e08:	01803fc4 	movi	r6,255
    5e0c:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_KEXP_1, KEXP_TX(1) | KEXP_TX_COMP(3) |
    5e10:	e13fe717 	ldw	r4,-100(fp)
    5e14:	01402884 	movi	r5,162
    5e18:	01801fc4 	movi	r6,127
    5e1c:	00002600 	call	260 <ad9361_spi_write>
		KEXP_DC_I(3) | KEXP_DC_Q(3));
	ad9361_spi_write(spi, REG_MAG_FTEST_THRESH, 0x01);
    5e20:	e13fe717 	ldw	r4,-100(fp)
    5e24:	01402944 	movi	r5,165
    5e28:	01800044 	movi	r6,1
    5e2c:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_MAG_FTEST_THRESH_2, 0x01);
    5e30:	e13fe717 	ldw	r4,-100(fp)
    5e34:	01402984 	movi	r5,166
    5e38:	01800044 	movi	r6,1
    5e3c:	00002600 	call	260 <ad9361_spi_write>

	if (has_split_gt && phy->pdata->split_gt) {
    5e40:	00800044 	movi	r2,1
    5e44:	10803fcc 	andi	r2,r2,255
    5e48:	10001126 	beq	r2,zero,5e90 <ad9361_tx_quad_calib+0x4f0>
    5e4c:	e0bfec17 	ldw	r2,-80(fp)
    5e50:	10803017 	ldw	r2,192(r2)
    5e54:	108000c3 	ldbu	r2,3(r2)
    5e58:	10803fcc 	andi	r2,r2,255
    5e5c:	10000c26 	beq	r2,zero,5e90 <ad9361_tx_quad_calib+0x4f0>
		tab = &split_gain_table[phy->current_table][0];
    5e60:	e0bfec17 	ldw	r2,-80(fp)
    5e64:	10804417 	ldw	r2,272(r2)
    5e68:	10c01ee4 	muli	r3,r2,123
    5e6c:	008000b4 	movhi	r2,2
    5e70:	1099d844 	addi	r2,r2,26465
    5e74:	1885883a 	add	r2,r3,r2
    5e78:	e0bfe315 	stw	r2,-116(fp)
		index_max = SIZE_SPLIT_TABLE;
    5e7c:	00800a44 	movi	r2,41
    5e80:	e0bfe415 	stw	r2,-112(fp)
		lpf_tia_mask = 0x20;
    5e84:	00800804 	movi	r2,32
    5e88:	e0bfe615 	stw	r2,-104(fp)
    5e8c:	00000b06 	br	5ebc <ad9361_tx_quad_calib+0x51c>
	}
	else {
		tab = &full_gain_table[phy->current_table][0];
    5e90:	e0bfec17 	ldw	r2,-80(fp)
    5e94:	10804417 	ldw	r2,272(r2)
    5e98:	10c039e4 	muli	r3,r2,231
    5e9c:	008000b4 	movhi	r2,2
    5ea0:	10992b04 	addi	r2,r2,25772
    5ea4:	1885883a 	add	r2,r3,r2
    5ea8:	e0bfe315 	stw	r2,-116(fp)
		index_max = SIZE_FULL_TABLE;
    5eac:	00801344 	movi	r2,77
    5eb0:	e0bfe415 	stw	r2,-112(fp)
		lpf_tia_mask = 0x3F;
    5eb4:	00800fc4 	movi	r2,63
    5eb8:	e0bfe615 	stw	r2,-104(fp)
	}

	for (i = 0; i < index_max; i++)
    5ebc:	e03fe515 	stw	zero,-108(fp)
    5ec0:	00001406 	br	5f14 <ad9361_tx_quad_calib+0x574>
	if ((tab[i][1] & lpf_tia_mask) == 0x20) {
    5ec4:	e0ffe517 	ldw	r3,-108(fp)
    5ec8:	1805883a 	mov	r2,r3
    5ecc:	1085883a 	add	r2,r2,r2
    5ed0:	10c5883a 	add	r2,r2,r3
    5ed4:	e0ffe317 	ldw	r3,-116(fp)
    5ed8:	1885883a 	add	r2,r3,r2
    5edc:	10800043 	ldbu	r2,1(r2)
    5ee0:	10c03fcc 	andi	r3,r2,255
    5ee4:	e0bfe617 	ldw	r2,-104(fp)
    5ee8:	1884703a 	and	r2,r3,r2
    5eec:	10800818 	cmpnei	r2,r2,32
    5ef0:	1000051e 	bne	r2,zero,5f08 <ad9361_tx_quad_calib+0x568>
		ad9361_spi_write(spi, REG_TX_QUAD_FULL_LMT_GAIN, i);
    5ef4:	e13fe717 	ldw	r4,-100(fp)
    5ef8:	01402a84 	movi	r5,170
    5efc:	e1bfe517 	ldw	r6,-108(fp)
    5f00:	00002600 	call	260 <ad9361_spi_write>
		break;
    5f04:	00000606 	br	5f20 <ad9361_tx_quad_calib+0x580>
		tab = &full_gain_table[phy->current_table][0];
		index_max = SIZE_FULL_TABLE;
		lpf_tia_mask = 0x3F;
	}

	for (i = 0; i < index_max; i++)
    5f08:	e0bfe517 	ldw	r2,-108(fp)
    5f0c:	10800044 	addi	r2,r2,1
    5f10:	e0bfe515 	stw	r2,-108(fp)
    5f14:	e0ffe517 	ldw	r3,-108(fp)
    5f18:	e0bfe417 	ldw	r2,-112(fp)
    5f1c:	18bfe936 	bltu	r3,r2,5ec4 <_gp+0xfffd3da4>
	if ((tab[i][1] & lpf_tia_mask) == 0x20) {
		ad9361_spi_write(spi, REG_TX_QUAD_FULL_LMT_GAIN, i);
		break;
	}

	if (i >= index_max)
    5f20:	e0ffe517 	ldw	r3,-108(fp)
    5f24:	e0bfe417 	ldw	r2,-112(fp)
    5f28:	18800636 	bltu	r3,r2,5f44 <ad9361_tx_quad_calib+0x5a4>
		dev_err(dev, "failed to find suitable LPF TIA value in gain table");
    5f2c:	010000b4 	movhi	r4,2
    5f30:	211c4004 	addi	r4,r4,28928
    5f34:	001f8180 	call	1f818 <printf>
    5f38:	010000b4 	movhi	r4,2
    5f3c:	211a7504 	addi	r4,r4,27092
    5f40:	001f8180 	call	1f818 <printf>

	ad9361_spi_write(spi, REG_QUAD_SETTLE_COUNT, 0xF0);
    5f44:	e13fe717 	ldw	r4,-100(fp)
    5f48:	01402904 	movi	r5,164
    5f4c:	01803c04 	movi	r6,240
    5f50:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_TX_QUAD_LPF_GAIN, 0x00);
    5f54:	e13fe717 	ldw	r4,-100(fp)
    5f58:	01402b84 	movi	r5,174
    5f5c:	000d883a 	mov	r6,zero
    5f60:	00002600 	call	260 <ad9361_spi_write>

	ret = __ad9361_tx_quad_calib(phy, __rx_phase, rxnco_word, decim, &val);
    5f64:	e17fe203 	ldbu	r5,-120(fp)
    5f68:	e1bfe017 	ldw	r6,-128(fp)
    5f6c:	e0ffe283 	ldbu	r3,-118(fp)
    5f70:	e0bfeb04 	addi	r2,fp,-84
    5f74:	d8800015 	stw	r2,0(sp)
    5f78:	e13fec17 	ldw	r4,-80(fp)
    5f7c:	180f883a 	mov	r7,r3
    5f80:	00056f00 	call	56f0 <__ad9361_tx_quad_calib>
    5f84:	e0bfe115 	stw	r2,-124(fp)

	dev_dbg(dev, "LO leakage: %d Quadrature Calibration: %d : rx_phase %d",
    5f88:	e0bfeb03 	ldbu	r2,-84(fp)
    5f8c:	10803fcc 	andi	r2,r2,255
    5f90:	1080008c 	andi	r2,r2,2
    5f94:	1004c03a 	cmpne	r2,r2,zero
    5f98:	11403fcc 	andi	r5,r2,255
    5f9c:	e0bfeb03 	ldbu	r2,-84(fp)
    5fa0:	10803fcc 	andi	r2,r2,255
    5fa4:	1080004c 	andi	r2,r2,1
    5fa8:	1004c03a 	cmpne	r2,r2,zero
    5fac:	10c03fcc 	andi	r3,r2,255
    5fb0:	e0bfe203 	ldbu	r2,-120(fp)
    5fb4:	010000b4 	movhi	r4,2
    5fb8:	211c4d04 	addi	r4,r4,28980
    5fbc:	180d883a 	mov	r6,r3
    5fc0:	100f883a 	mov	r7,r2
    5fc4:	001f8180 	call	1f818 <printf>
    5fc8:	010000b4 	movhi	r4,2
    5fcc:	211a7504 	addi	r4,r4,27092
    5fd0:	001f8180 	call	1f818 <printf>
		!!(val & TX1_LO_CONV), !!(val & TX1_SSB_CONV), __rx_phase);

	/* Calibration failed -> try last phase offset */
	if (val != (TX1_LO_CONV | TX1_SSB_CONV)) {
    5fd4:	e0bfeb03 	ldbu	r2,-84(fp)
    5fd8:	10803fcc 	andi	r2,r2,255
    5fdc:	108000e0 	cmpeqi	r2,r2,3
    5fe0:	10000f1e 	bne	r2,zero,6020 <ad9361_tx_quad_calib+0x680>
		if (phy->last_tx_quad_cal_phase < 31)
    5fe4:	e0bfec17 	ldw	r2,-80(fp)
    5fe8:	10804817 	ldw	r2,288(r2)
    5fec:	108007e8 	cmpgeui	r2,r2,31
    5ff0:	10000e1e 	bne	r2,zero,602c <ad9361_tx_quad_calib+0x68c>
			ret = __ad9361_tx_quad_calib(phy, phy->last_tx_quad_cal_phase,
    5ff4:	e0bfec17 	ldw	r2,-80(fp)
    5ff8:	11404817 	ldw	r5,288(r2)
    5ffc:	e1bfe017 	ldw	r6,-128(fp)
    6000:	e0ffe283 	ldbu	r3,-118(fp)
    6004:	e0bfeb04 	addi	r2,fp,-84
    6008:	d8800015 	stw	r2,0(sp)
    600c:	e13fec17 	ldw	r4,-80(fp)
    6010:	180f883a 	mov	r7,r3
    6014:	00056f00 	call	56f0 <__ad9361_tx_quad_calib>
    6018:	e0bfe115 	stw	r2,-124(fp)
    601c:	00000306 	br	602c <ad9361_tx_quad_calib+0x68c>
						     rxnco_word, decim, &val);
	} else {
		phy->last_tx_quad_cal_phase = __rx_phase;
    6020:	e0ffe203 	ldbu	r3,-120(fp)
    6024:	e0bfec17 	ldw	r2,-80(fp)
    6028:	10c04815 	stw	r3,288(r2)
	}

	/* Calibration failed -> loop through all 32 phase offsets */
	if (val != (TX1_LO_CONV | TX1_SSB_CONV))
    602c:	e0bfeb03 	ldbu	r2,-84(fp)
    6030:	10803fcc 	andi	r2,r2,255
    6034:	108000e0 	cmpeqi	r2,r2,3
    6038:	1000071e 	bne	r2,zero,6058 <ad9361_tx_quad_calib+0x6b8>
		ret = ad9361_tx_quad_phase_search(phy, rxnco_word, decim);
    603c:	e0ffe017 	ldw	r3,-128(fp)
    6040:	e0bfe283 	ldbu	r2,-118(fp)
    6044:	e13fec17 	ldw	r4,-80(fp)
    6048:	180b883a 	mov	r5,r3
    604c:	100d883a 	mov	r6,r2
    6050:	00058100 	call	5810 <ad9361_tx_quad_phase_search>
    6054:	e0bfe115 	stw	r2,-124(fp)

	if (phy->pdata->rx1rx2_phase_inversion_en ||
    6058:	e0bfec17 	ldw	r2,-80(fp)
    605c:	10803017 	ldw	r2,192(r2)
    6060:	10800343 	ldbu	r2,13(r2)
    6064:	10803fcc 	andi	r2,r2,255
    6068:	1000061e 	bne	r2,zero,6084 <ad9361_tx_quad_calib+0x6e4>
		(phy->pdata->port_ctrl.pp_conf[1] & INVERT_RX2)) {
    606c:	e0bfec17 	ldw	r2,-80(fp)
    6070:	10803017 	ldw	r2,192(r2)
    6074:	10804343 	ldbu	r2,269(r2)
    6078:	10803fcc 	andi	r2,r2,255
    607c:	1080080c 	andi	r2,r2,32

	/* Calibration failed -> loop through all 32 phase offsets */
	if (val != (TX1_LO_CONV | TX1_SSB_CONV))
		ret = ad9361_tx_quad_phase_search(phy, rxnco_word, decim);

	if (phy->pdata->rx1rx2_phase_inversion_en ||
    6080:	10000f26 	beq	r2,zero,60c0 <ad9361_tx_quad_calib+0x720>
		(phy->pdata->port_ctrl.pp_conf[1] & INVERT_RX2)) {
		ad9361_spi_writef(spi, REG_PARALLEL_PORT_CONF_2, INVERT_RX2, 1);
    6084:	01000804 	movi	r4,32
    6088:	001c8300 	call	1c830 <find_first_bit>
    608c:	1007883a 	mov	r3,r2
    6090:	00800044 	movi	r2,1
    6094:	d8800015 	stw	r2,0(sp)
    6098:	e13fe717 	ldw	r4,-100(fp)
    609c:	01400444 	movi	r5,17
    60a0:	01800804 	movi	r6,32
    60a4:	180f883a 	mov	r7,r3
    60a8:	000031c0 	call	31c <__ad9361_spi_writef>
		ad9361_spi_write(spi, REG_INVERT_BITS, reg_inv_bits);
    60ac:	e0bfe243 	ldbu	r2,-119(fp)
    60b0:	e13fe717 	ldw	r4,-100(fp)
    60b4:	01406244 	movi	r5,393
    60b8:	100d883a 	mov	r6,r2
    60bc:	00002600 	call	260 <ad9361_spi_write>
	}

	if (phy->pdata->rx1rx2_phase_inversion_en ||
    60c0:	e0bfec17 	ldw	r2,-80(fp)
    60c4:	10803017 	ldw	r2,192(r2)
    60c8:	10800343 	ldbu	r2,13(r2)
    60cc:	10803fcc 	andi	r2,r2,255
    60d0:	1000061e 	bne	r2,zero,60ec <ad9361_tx_quad_calib+0x74c>
		(phy->pdata->port_ctrl.pp_conf[1] & INVERT_RX2)) {
    60d4:	e0bfec17 	ldw	r2,-80(fp)
    60d8:	10803017 	ldw	r2,192(r2)
    60dc:	10804343 	ldbu	r2,269(r2)
    60e0:	10803fcc 	andi	r2,r2,255
    60e4:	1080080c 	andi	r2,r2,32
		(phy->pdata->port_ctrl.pp_conf[1] & INVERT_RX2)) {
		ad9361_spi_writef(spi, REG_PARALLEL_PORT_CONF_2, INVERT_RX2, 1);
		ad9361_spi_write(spi, REG_INVERT_BITS, reg_inv_bits);
	}

	if (phy->pdata->rx1rx2_phase_inversion_en ||
    60e8:	10000f26 	beq	r2,zero,6128 <ad9361_tx_quad_calib+0x788>
		(phy->pdata->port_ctrl.pp_conf[1] & INVERT_RX2)) {
		ad9361_spi_writef(spi, REG_PARALLEL_PORT_CONF_2, INVERT_RX2, 1);
    60ec:	01000804 	movi	r4,32
    60f0:	001c8300 	call	1c830 <find_first_bit>
    60f4:	1007883a 	mov	r3,r2
    60f8:	00800044 	movi	r2,1
    60fc:	d8800015 	stw	r2,0(sp)
    6100:	e13fe717 	ldw	r4,-100(fp)
    6104:	01400444 	movi	r5,17
    6108:	01800804 	movi	r6,32
    610c:	180f883a 	mov	r7,r3
    6110:	000031c0 	call	31c <__ad9361_spi_writef>
		ad9361_spi_write(spi, REG_INVERT_BITS, reg_inv_bits);
    6114:	e0bfe243 	ldbu	r2,-119(fp)
    6118:	e13fe717 	ldw	r4,-100(fp)
    611c:	01406244 	movi	r5,393
    6120:	100d883a 	mov	r6,r2
    6124:	00002600 	call	260 <ad9361_spi_write>
	}

	if (txnco_freq > (int64_t)(bw_rx / 4) || txnco_freq > (int64_t)(bw_tx / 4)) {
    6128:	e0bfea17 	ldw	r2,-88(fp)
    612c:	1029883a 	mov	r20,r2
    6130:	1005d7fa 	srai	r2,r2,31
    6134:	102b883a 	mov	r21,r2
    6138:	e0bfed17 	ldw	r2,-76(fp)
    613c:	1004d0ba 	srli	r2,r2,2
    6140:	102d883a 	mov	r22,r2
    6144:	002f883a 	mov	r23,zero
    6148:	bd400d16 	blt	r23,r21,6180 <ad9361_tx_quad_calib+0x7e0>
    614c:	adc0011e 	bne	r21,r23,6154 <ad9361_tx_quad_calib+0x7b4>
    6150:	b5000b36 	bltu	r22,r20,6180 <ad9361_tx_quad_calib+0x7e0>
    6154:	e0bfea17 	ldw	r2,-88(fp)
    6158:	1021883a 	mov	r16,r2
    615c:	1005d7fa 	srai	r2,r2,31
    6160:	1023883a 	mov	r17,r2
    6164:	e0bfee17 	ldw	r2,-72(fp)
    6168:	1004d0ba 	srli	r2,r2,2
    616c:	1025883a 	mov	r18,r2
    6170:	0027883a 	mov	r19,zero
    6174:	9c400216 	blt	r19,r17,6180 <ad9361_tx_quad_calib+0x7e0>
    6178:	8cc0091e 	bne	r17,r19,61a0 <ad9361_tx_quad_calib+0x800>
    617c:	9400082e 	bgeu	r18,r16,61a0 <ad9361_tx_quad_calib+0x800>
		__ad9361_update_rf_bandwidth(phy,
    6180:	e0bfec17 	ldw	r2,-80(fp)
    6184:	10c04b17 	ldw	r3,300(r2)
    6188:	e0bfec17 	ldw	r2,-80(fp)
    618c:	10804c17 	ldw	r2,304(r2)
    6190:	e13fec17 	ldw	r4,-80(fp)
    6194:	180b883a 	mov	r5,r3
    6198:	100d883a 	mov	r6,r2
    619c:	000559c0 	call	559c <__ad9361_update_rf_bandwidth>
			phy->current_rx_bw_Hz,
			phy->current_tx_bw_Hz);
	}

	return ret;
    61a0:	e0bfe117 	ldw	r2,-124(fp)
}
    61a4:	e6fff804 	addi	sp,fp,-32
    61a8:	dfc00917 	ldw	ra,36(sp)
    61ac:	df000817 	ldw	fp,32(sp)
    61b0:	ddc00717 	ldw	r23,28(sp)
    61b4:	dd800617 	ldw	r22,24(sp)
    61b8:	dd400517 	ldw	r21,20(sp)
    61bc:	dd000417 	ldw	r20,16(sp)
    61c0:	dcc00317 	ldw	r19,12(sp)
    61c4:	dc800217 	ldw	r18,8(sp)
    61c8:	dc400117 	ldw	r17,4(sp)
    61cc:	dc000017 	ldw	r16,0(sp)
    61d0:	dec00a04 	addi	sp,sp,40
    61d4:	f800283a 	ret

000061d8 <ad9361_tracking_control>:
 * @param rxquad_track Set true, will enable the RXQUAD tracking.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_tracking_control(struct ad9361_rf_phy *phy, bool bbdc_track,
	bool rfdc_track, bool rxquad_track)
{
    61d8:	defff704 	addi	sp,sp,-36
    61dc:	de00012e 	bgeu	sp,et,61e4 <ad9361_tracking_control+0xc>
    61e0:	003b68fa 	trap	3
    61e4:	dfc00815 	stw	ra,32(sp)
    61e8:	df000715 	stw	fp,28(sp)
    61ec:	df000704 	addi	fp,sp,28
    61f0:	e13ffc15 	stw	r4,-16(fp)
    61f4:	2809883a 	mov	r4,r5
    61f8:	3007883a 	mov	r3,r6
    61fc:	3805883a 	mov	r2,r7
    6200:	e13ffd05 	stb	r4,-12(fp)
    6204:	e0fffe05 	stb	r3,-8(fp)
    6208:	e0bfff05 	stb	r2,-4(fp)
	struct spi_device *spi = phy->spi;
    620c:	e0bffc17 	ldw	r2,-16(fp)
    6210:	10800117 	ldw	r2,4(r2)
    6214:	e0bffb15 	stw	r2,-20(fp)
	uint32_t qtrack = 0;
    6218:	e03ffa15 	stw	zero,-24(fp)

	dev_dbg(&spi->dev, "%s : bbdc_track=%d, rfdc_track=%d, rxquad_track=%d",
    621c:	e1bffd03 	ldbu	r6,-12(fp)
    6220:	e0fffe03 	ldbu	r3,-8(fp)
    6224:	e0bfff03 	ldbu	r2,-4(fp)
    6228:	d8800015 	stw	r2,0(sp)
    622c:	010000b4 	movhi	r4,2
    6230:	211c5b04 	addi	r4,r4,29036
    6234:	014000b4 	movhi	r5,2
    6238:	295eef04 	addi	r5,r5,31676
    623c:	180f883a 	mov	r7,r3
    6240:	001f8180 	call	1f818 <printf>
    6244:	010000b4 	movhi	r4,2
    6248:	211a7504 	addi	r4,r4,27092
    624c:	001f8180 	call	1f818 <printf>
		__func__, bbdc_track, rfdc_track, rxquad_track);

	ad9361_spi_write(spi, REG_CALIBRATION_CONFIG_2,
    6250:	e13ffb17 	ldw	r4,-20(fp)
    6254:	01405a84 	movi	r5,362
    6258:	01801d44 	movi	r6,117
    625c:	00002600 	call	260 <ad9361_spi_write>
		CALIBRATION_CONFIG2_DFLT | K_EXP_PHASE(0x15));
	ad9361_spi_write(spi, REG_CALIBRATION_CONFIG_3,
    6260:	e13ffb17 	ldw	r4,-20(fp)
    6264:	01405ac4 	movi	r5,363
    6268:	01802544 	movi	r6,149
    626c:	00002600 	call	260 <ad9361_spi_write>
		PREVENT_POS_LOOP_GAIN | K_EXP_AMPLITUDE(0x15));

	ad9361_spi_write(spi, REG_DC_OFFSET_CONFIG2,
		USE_WAIT_COUNTER_FOR_RF_DC_INIT_CAL |
		DC_OFFSET_UPDATE(phy->pdata->dc_offset_update_events) |
    6270:	e0bffc17 	ldw	r2,-16(fp)
    6274:	10803017 	ldw	r2,192(r2)
    6278:	108003c3 	ldbu	r2,15(r2)
    627c:	10803fcc 	andi	r2,r2,255
    6280:	108001cc 	andi	r2,r2,7
		CALIBRATION_CONFIG2_DFLT | K_EXP_PHASE(0x15));
	ad9361_spi_write(spi, REG_CALIBRATION_CONFIG_3,
		PREVENT_POS_LOOP_GAIN | K_EXP_AMPLITUDE(0x15));

	ad9361_spi_write(spi, REG_DC_OFFSET_CONFIG2,
		USE_WAIT_COUNTER_FOR_RF_DC_INIT_CAL |
    6284:	10c02014 	ori	r3,r2,128
		DC_OFFSET_UPDATE(phy->pdata->dc_offset_update_events) |
		(bbdc_track ? ENABLE_BB_DC_OFFSET_TRACKING : 0) |
    6288:	e0bffd03 	ldbu	r2,-12(fp)
    628c:	10000226 	beq	r2,zero,6298 <ad9361_tracking_control+0xc0>
    6290:	00800804 	movi	r2,32
    6294:	00000106 	br	629c <ad9361_tracking_control+0xc4>
    6298:	0005883a 	mov	r2,zero
	ad9361_spi_write(spi, REG_CALIBRATION_CONFIG_3,
		PREVENT_POS_LOOP_GAIN | K_EXP_AMPLITUDE(0x15));

	ad9361_spi_write(spi, REG_DC_OFFSET_CONFIG2,
		USE_WAIT_COUNTER_FOR_RF_DC_INIT_CAL |
		DC_OFFSET_UPDATE(phy->pdata->dc_offset_update_events) |
    629c:	1886b03a 	or	r3,r3,r2
		(bbdc_track ? ENABLE_BB_DC_OFFSET_TRACKING : 0) |
		(rfdc_track ? ENABLE_RF_OFFSET_TRACKING : 0));
    62a0:	e0bffe03 	ldbu	r2,-8(fp)
    62a4:	10000226 	beq	r2,zero,62b0 <ad9361_tracking_control+0xd8>
    62a8:	00800204 	movi	r2,8
    62ac:	00000106 	br	62b4 <ad9361_tracking_control+0xdc>
    62b0:	0005883a 	mov	r2,zero
		PREVENT_POS_LOOP_GAIN | K_EXP_AMPLITUDE(0x15));

	ad9361_spi_write(spi, REG_DC_OFFSET_CONFIG2,
		USE_WAIT_COUNTER_FOR_RF_DC_INIT_CAL |
		DC_OFFSET_UPDATE(phy->pdata->dc_offset_update_events) |
		(bbdc_track ? ENABLE_BB_DC_OFFSET_TRACKING : 0) |
    62b4:	1884b03a 	or	r2,r3,r2
	ad9361_spi_write(spi, REG_CALIBRATION_CONFIG_2,
		CALIBRATION_CONFIG2_DFLT | K_EXP_PHASE(0x15));
	ad9361_spi_write(spi, REG_CALIBRATION_CONFIG_3,
		PREVENT_POS_LOOP_GAIN | K_EXP_AMPLITUDE(0x15));

	ad9361_spi_write(spi, REG_DC_OFFSET_CONFIG2,
    62b8:	e13ffb17 	ldw	r4,-20(fp)
    62bc:	014062c4 	movi	r5,395
    62c0:	100d883a 	mov	r6,r2
    62c4:	00002600 	call	260 <ad9361_spi_write>
		USE_WAIT_COUNTER_FOR_RF_DC_INIT_CAL |
		DC_OFFSET_UPDATE(phy->pdata->dc_offset_update_events) |
		(bbdc_track ? ENABLE_BB_DC_OFFSET_TRACKING : 0) |
		(rfdc_track ? ENABLE_RF_OFFSET_TRACKING : 0));

	ad9361_spi_writef(spi, REG_RX_QUAD_GAIN2,
    62c8:	01003804 	movi	r4,224
    62cc:	001c8300 	call	1c830 <find_first_bit>
    62d0:	1007883a 	mov	r3,r2
    62d4:	e0bffc17 	ldw	r2,-16(fp)
    62d8:	10803017 	ldw	r2,192(r2)
    62dc:	10800383 	ldbu	r2,14(r2)
    62e0:	10803fcc 	andi	r2,r2,255
    62e4:	10000226 	beq	r2,zero,62f0 <ad9361_tracking_control+0x118>
    62e8:	00800104 	movi	r2,4
    62ec:	00000106 	br	62f4 <ad9361_tracking_control+0x11c>
    62f0:	0005883a 	mov	r2,zero
    62f4:	d8800015 	stw	r2,0(sp)
    62f8:	e13ffb17 	ldw	r4,-20(fp)
    62fc:	01405bc4 	movi	r5,367
    6300:	01803804 	movi	r6,224
    6304:	180f883a 	mov	r7,r3
    6308:	000031c0 	call	31c <__ad9361_spi_writef>
			 CORRECTION_WORD_DECIMATION_M(~0),
			 phy->pdata->qec_tracking_slow_mode_en ? 4 : 0);

	if (rxquad_track) {
    630c:	e0bfff03 	ldbu	r2,-4(fp)
    6310:	10001126 	beq	r2,zero,6358 <ad9361_tracking_control+0x180>
		if (phy->pdata->rx2tx2)
    6314:	e0bffc17 	ldw	r2,-16(fp)
    6318:	10803017 	ldw	r2,192(r2)
    631c:	10800003 	ldbu	r2,0(r2)
    6320:	10803fcc 	andi	r2,r2,255
    6324:	10000326 	beq	r2,zero,6334 <ad9361_tracking_control+0x15c>
			qtrack = ENABLE_TRACKING_MODE_CH1 | ENABLE_TRACKING_MODE_CH2;
    6328:	008000c4 	movi	r2,3
    632c:	e0bffa15 	stw	r2,-24(fp)
    6330:	00000906 	br	6358 <ad9361_tracking_control+0x180>
		else
			qtrack = (phy->pdata->rx1tx1_mode_use_rx_num == 1) ?
    6334:	e0bffc17 	ldw	r2,-16(fp)
    6338:	10803017 	ldw	r2,192(r2)
    633c:	10800a17 	ldw	r2,40(r2)
    6340:	10800058 	cmpnei	r2,r2,1
    6344:	1000021e 	bne	r2,zero,6350 <ad9361_tracking_control+0x178>
    6348:	00800044 	movi	r2,1
    634c:	00000106 	br	6354 <ad9361_tracking_control+0x17c>
    6350:	00800084 	movi	r2,2
    6354:	e0bffa15 	stw	r2,-24(fp)
				ENABLE_TRACKING_MODE_CH1 : ENABLE_TRACKING_MODE_CH2;
	}

	ad9361_spi_write(spi, REG_CALIBRATION_CONFIG_1,
    6358:	e0bffa17 	ldw	r2,-24(fp)
    635c:	10803314 	ori	r2,r2,204
    6360:	e13ffb17 	ldw	r4,-20(fp)
    6364:	01405a44 	movi	r5,361
    6368:	100d883a 	mov	r6,r2
    636c:	00002600 	call	260 <ad9361_spi_write>
		ENABLE_PHASE_CORR | ENABLE_GAIN_CORR |
		FREE_RUN_MODE | ENABLE_CORR_WORD_DECIMATION |
		qtrack);

	return 0;
    6370:	0005883a 	mov	r2,zero
}
    6374:	e037883a 	mov	sp,fp
    6378:	dfc00117 	ldw	ra,4(sp)
    637c:	df000017 	ldw	fp,0(sp)
    6380:	dec00204 	addi	sp,sp,8
    6384:	f800283a 	ret

00006388 <ad9361_trx_vco_cal_control>:
 * @param enable Set true to enable.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_trx_vco_cal_control(struct ad9361_rf_phy *phy,
	bool tx, bool enable)
{
    6388:	defff804 	addi	sp,sp,-32
    638c:	de00012e 	bgeu	sp,et,6394 <ad9361_trx_vco_cal_control+0xc>
    6390:	003b68fa 	trap	3
    6394:	dfc00715 	stw	ra,28(sp)
    6398:	df000615 	stw	fp,24(sp)
    639c:	dc400515 	stw	r17,20(sp)
    63a0:	dc000415 	stw	r16,16(sp)
    63a4:	df000604 	addi	fp,sp,24
    63a8:	e13ffb15 	stw	r4,-20(fp)
    63ac:	2807883a 	mov	r3,r5
    63b0:	3005883a 	mov	r2,r6
    63b4:	e0fffc05 	stb	r3,-16(fp)
    63b8:	e0bffd05 	stb	r2,-12(fp)
	dev_dbg(&phy->spi->dev, "%s : state %d",
    63bc:	e0bffd03 	ldbu	r2,-12(fp)
    63c0:	010000b4 	movhi	r4,2
    63c4:	211c6804 	addi	r4,r4,29088
    63c8:	014000b4 	movhi	r5,2
    63cc:	295ef504 	addi	r5,r5,31700
    63d0:	100d883a 	mov	r6,r2
    63d4:	001f8180 	call	1f818 <printf>
    63d8:	010000b4 	movhi	r4,2
    63dc:	211a7504 	addi	r4,r4,27092
    63e0:	001f8180 	call	1f818 <printf>
		__func__, enable);

	return ad9361_spi_writef(phy->spi,
    63e4:	e0bffb17 	ldw	r2,-20(fp)
    63e8:	14400117 	ldw	r17,4(r2)
    63ec:	e0bffc03 	ldbu	r2,-16(fp)
    63f0:	10000226 	beq	r2,zero,63fc <ad9361_trx_vco_cal_control+0x74>
    63f4:	04009c04 	movi	r16,624
    63f8:	00000106 	br	6400 <ad9361_trx_vco_cal_control+0x78>
    63fc:	04008c04 	movi	r16,560
    6400:	01000044 	movi	r4,1
    6404:	001c8300 	call	1c830 <find_first_bit>
    6408:	1007883a 	mov	r3,r2
    640c:	e0bffd03 	ldbu	r2,-12(fp)
    6410:	1080005c 	xori	r2,r2,1
    6414:	10803fcc 	andi	r2,r2,255
    6418:	d8800015 	stw	r2,0(sp)
    641c:	8809883a 	mov	r4,r17
    6420:	800b883a 	mov	r5,r16
    6424:	01800044 	movi	r6,1
    6428:	180f883a 	mov	r7,r3
    642c:	000031c0 	call	31c <__ad9361_spi_writef>
		tx ? REG_TX_PFD_CONFIG : REG_RX_PFD_CONFIG,
		BYPASS_LD_SYNTH, !enable);
}
    6430:	e6fffe04 	addi	sp,fp,-8
    6434:	dfc00317 	ldw	ra,12(sp)
    6438:	df000217 	ldw	fp,8(sp)
    643c:	dc400117 	ldw	r17,4(sp)
    6440:	dc000017 	ldw	r16,0(sp)
    6444:	dec00404 	addi	sp,sp,16
    6448:	f800283a 	ret

0000644c <ad9361_trx_ext_lo_control>:
 * @param enable Set true to enable.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_trx_ext_lo_control(struct ad9361_rf_phy *phy,
	bool tx, bool enable)
{
    644c:	defff604 	addi	sp,sp,-40
    6450:	de00012e 	bgeu	sp,et,6458 <ad9361_trx_ext_lo_control+0xc>
    6454:	003b68fa 	trap	3
    6458:	dfc00915 	stw	ra,36(sp)
    645c:	df000815 	stw	fp,32(sp)
    6460:	dc000715 	stw	r16,28(sp)
    6464:	df000804 	addi	fp,sp,32
    6468:	e13ffc15 	stw	r4,-16(fp)
    646c:	2807883a 	mov	r3,r5
    6470:	3005883a 	mov	r2,r6
    6474:	e0fffd05 	stb	r3,-12(fp)
    6478:	e0bffe05 	stb	r2,-8(fp)
	int32_t val = enable ? ~0 : 0;
    647c:	e0bffe03 	ldbu	r2,-8(fp)
    6480:	10000226 	beq	r2,zero,648c <ad9361_trx_ext_lo_control+0x40>
    6484:	00bfffc4 	movi	r2,-1
    6488:	00000106 	br	6490 <ad9361_trx_ext_lo_control+0x44>
    648c:	0005883a 	mov	r2,zero
    6490:	e0bffa15 	stw	r2,-24(fp)

	/* REVIST:
	 * POWER_DOWN_TRX_SYNTH and MCS_RF_ENABLE somehow conflict
	 */

	bool mcs_rf_enable = ad9361_spi_readf(phy->spi,
    6494:	e0bffc17 	ldw	r2,-16(fp)
    6498:	14000117 	ldw	r16,4(r2)
    649c:	01000204 	movi	r4,8
    64a0:	001c8300 	call	1c830 <find_first_bit>
    64a4:	8009883a 	mov	r4,r16
    64a8:	01400044 	movi	r5,1
    64ac:	01800204 	movi	r6,8
    64b0:	100f883a 	mov	r7,r2
    64b4:	00001b80 	call	1b8 <__ad9361_spi_readf>
    64b8:	1004c03a 	cmpne	r2,r2,zero
    64bc:	e0bffb05 	stb	r2,-20(fp)
		REG_MULTICHIP_SYNC_AND_TX_MON_CTRL, MCS_RF_ENABLE);

	dev_dbg(&phy->spi->dev, "%s : %s state %d",
    64c0:	e0bffd03 	ldbu	r2,-12(fp)
    64c4:	10000326 	beq	r2,zero,64d4 <ad9361_trx_ext_lo_control+0x88>
    64c8:	008000b4 	movhi	r2,2
    64cc:	109c6c04 	addi	r2,r2,29104
    64d0:	00000206 	br	64dc <ad9361_trx_ext_lo_control+0x90>
    64d4:	008000b4 	movhi	r2,2
    64d8:	109c6d04 	addi	r2,r2,29108
    64dc:	e0fffe03 	ldbu	r3,-8(fp)
    64e0:	010000b4 	movhi	r4,2
    64e4:	211c6e04 	addi	r4,r4,29112
    64e8:	014000b4 	movhi	r5,2
    64ec:	295efc04 	addi	r5,r5,31728
    64f0:	100d883a 	mov	r6,r2
    64f4:	180f883a 	mov	r7,r3
    64f8:	001f8180 	call	1f818 <printf>
    64fc:	010000b4 	movhi	r4,2
    6500:	211a7504 	addi	r4,r4,27092
    6504:	001f8180 	call	1f818 <printf>
		__func__, tx ? "TX" : "RX", enable);

	if (tx) {
    6508:	e0bffd03 	ldbu	r2,-12(fp)
    650c:	10005626 	beq	r2,zero,6668 <ad9361_trx_ext_lo_control+0x21c>
		ret = ad9361_spi_writef(phy->spi, REG_ENSM_CONFIG_2,
    6510:	e0bffc17 	ldw	r2,-16(fp)
    6514:	14000117 	ldw	r16,4(r2)
    6518:	01000804 	movi	r4,32
    651c:	001c8300 	call	1c830 <find_first_bit>
    6520:	1007883a 	mov	r3,r2
    6524:	e0bffb03 	ldbu	r2,-20(fp)
    6528:	10000226 	beq	r2,zero,6534 <ad9361_trx_ext_lo_control+0xe8>
    652c:	0005883a 	mov	r2,zero
    6530:	00000106 	br	6538 <ad9361_trx_ext_lo_control+0xec>
    6534:	e0bffe03 	ldbu	r2,-8(fp)
    6538:	d8800015 	stw	r2,0(sp)
    653c:	8009883a 	mov	r4,r16
    6540:	01400544 	movi	r5,21
    6544:	01800804 	movi	r6,32
    6548:	180f883a 	mov	r7,r3
    654c:	000031c0 	call	31c <__ad9361_spi_writef>
    6550:	e0bff915 	stw	r2,-28(fp)
				POWER_DOWN_TX_SYNTH, mcs_rf_enable ? 0 : enable);

		ret |= ad9361_spi_writef(phy->spi, REG_RFPLL_DIVIDERS,
    6554:	e0bffc17 	ldw	r2,-16(fp)
    6558:	14000117 	ldw	r16,4(r2)
    655c:	01003c04 	movi	r4,240
    6560:	001c8300 	call	1c830 <find_first_bit>
    6564:	1007883a 	mov	r3,r2
    6568:	e0bffe03 	ldbu	r2,-8(fp)
    656c:	10000226 	beq	r2,zero,6578 <ad9361_trx_ext_lo_control+0x12c>
    6570:	008001c4 	movi	r2,7
    6574:	00000306 	br	6584 <ad9361_trx_ext_lo_control+0x138>
    6578:	e0bffc17 	ldw	r2,-16(fp)
    657c:	108031c3 	ldbu	r2,199(r2)
    6580:	10803fcc 	andi	r2,r2,255
    6584:	d8800015 	stw	r2,0(sp)
    6588:	8009883a 	mov	r4,r16
    658c:	01400144 	movi	r5,5
    6590:	01803c04 	movi	r6,240
    6594:	180f883a 	mov	r7,r3
    6598:	000031c0 	call	31c <__ad9361_spi_writef>
    659c:	1007883a 	mov	r3,r2
    65a0:	e0bff917 	ldw	r2,-28(fp)
    65a4:	10c4b03a 	or	r2,r2,r3
    65a8:	e0bff915 	stw	r2,-28(fp)
				TX_VCO_DIVIDER(~0), enable ? 7 :
				phy->cached_tx_rfpll_div);

		ret |= ad9361_spi_write(phy->spi, REG_TX_SYNTH_POWER_DOWN_OVERRIDE,
    65ac:	e0bffc17 	ldw	r2,-16(fp)
    65b0:	10c00117 	ldw	r3,4(r2)
    65b4:	e0bffe03 	ldbu	r2,-8(fp)
    65b8:	10000226 	beq	r2,zero,65c4 <ad9361_trx_ext_lo_control+0x178>
    65bc:	00800384 	movi	r2,14
    65c0:	00000106 	br	65c8 <ad9361_trx_ext_lo_control+0x17c>
    65c4:	0005883a 	mov	r2,zero
    65c8:	1809883a 	mov	r4,r3
    65cc:	01401444 	movi	r5,81
    65d0:	100d883a 	mov	r6,r2
    65d4:	00002600 	call	260 <ad9361_spi_write>
    65d8:	1007883a 	mov	r3,r2
    65dc:	e0bff917 	ldw	r2,-28(fp)
    65e0:	10c4b03a 	or	r2,r2,r3
    65e4:	e0bff915 	stw	r2,-28(fp)
				enable ? TX_SYNTH_VCO_ALC_POWER_DOWN |
				TX_SYNTH_PTAT_POWER_DOWN |
				TX_SYNTH_VCO_POWER_DOWN : 0);

		ret |= ad9361_spi_writef(phy->spi, REG_ANALOG_POWER_DOWN_OVERRIDE,
    65e8:	e0bffc17 	ldw	r2,-16(fp)
    65ec:	14000117 	ldw	r16,4(r2)
    65f0:	01000404 	movi	r4,16
    65f4:	001c8300 	call	1c830 <find_first_bit>
    65f8:	1007883a 	mov	r3,r2
    65fc:	e0bffe03 	ldbu	r2,-8(fp)
    6600:	1080005c 	xori	r2,r2,1
    6604:	10803fcc 	andi	r2,r2,255
    6608:	d8800015 	stw	r2,0(sp)
    660c:	8009883a 	mov	r4,r16
    6610:	014015c4 	movi	r5,87
    6614:	01800404 	movi	r6,16
    6618:	180f883a 	mov	r7,r3
    661c:	000031c0 	call	31c <__ad9361_spi_writef>
    6620:	1007883a 	mov	r3,r2
    6624:	e0bff917 	ldw	r2,-28(fp)
    6628:	10c4b03a 	or	r2,r2,r3
    662c:	e0bff915 	stw	r2,-28(fp)
				TX_EXT_VCO_BUFFER_POWER_DOWN, !enable);

		ret |= ad9361_spi_write(phy->spi, REG_TX_LO_GEN_POWER_MODE,
    6630:	e0bffc17 	ldw	r2,-16(fp)
    6634:	10c00117 	ldw	r3,4(r2)
				TX_LO_GEN_POWER_MODE(val));
    6638:	e0bffa17 	ldw	r2,-24(fp)
    663c:	1004913a 	slli	r2,r2,4
				TX_SYNTH_VCO_POWER_DOWN : 0);

		ret |= ad9361_spi_writef(phy->spi, REG_ANALOG_POWER_DOWN_OVERRIDE,
				TX_EXT_VCO_BUFFER_POWER_DOWN, !enable);

		ret |= ad9361_spi_write(phy->spi, REG_TX_LO_GEN_POWER_MODE,
    6640:	10803fcc 	andi	r2,r2,255
    6644:	1809883a 	mov	r4,r3
    6648:	0140a844 	movi	r5,673
    664c:	100d883a 	mov	r6,r2
    6650:	00002600 	call	260 <ad9361_spi_write>
    6654:	1007883a 	mov	r3,r2
    6658:	e0bff917 	ldw	r2,-28(fp)
    665c:	10c4b03a 	or	r2,r2,r3
    6660:	e0bff915 	stw	r2,-28(fp)
    6664:	00005506 	br	67bc <ad9361_trx_ext_lo_control+0x370>
				TX_LO_GEN_POWER_MODE(val));
	}
	else {
		ret = ad9361_spi_writef(phy->spi, REG_ENSM_CONFIG_2,
    6668:	e0bffc17 	ldw	r2,-16(fp)
    666c:	14000117 	ldw	r16,4(r2)
    6670:	01001004 	movi	r4,64
    6674:	001c8300 	call	1c830 <find_first_bit>
    6678:	1007883a 	mov	r3,r2
    667c:	e0bffb03 	ldbu	r2,-20(fp)
    6680:	10000226 	beq	r2,zero,668c <ad9361_trx_ext_lo_control+0x240>
    6684:	0005883a 	mov	r2,zero
    6688:	00000106 	br	6690 <ad9361_trx_ext_lo_control+0x244>
    668c:	e0bffe03 	ldbu	r2,-8(fp)
    6690:	d8800015 	stw	r2,0(sp)
    6694:	8009883a 	mov	r4,r16
    6698:	01400544 	movi	r5,21
    669c:	01801004 	movi	r6,64
    66a0:	180f883a 	mov	r7,r3
    66a4:	000031c0 	call	31c <__ad9361_spi_writef>
    66a8:	e0bff915 	stw	r2,-28(fp)
				POWER_DOWN_RX_SYNTH, mcs_rf_enable ? 0 : enable);

		ret |= ad9361_spi_writef(phy->spi, REG_RFPLL_DIVIDERS,
    66ac:	e0bffc17 	ldw	r2,-16(fp)
    66b0:	14000117 	ldw	r16,4(r2)
    66b4:	010003c4 	movi	r4,15
    66b8:	001c8300 	call	1c830 <find_first_bit>
    66bc:	1007883a 	mov	r3,r2
    66c0:	e0bffe03 	ldbu	r2,-8(fp)
    66c4:	10000226 	beq	r2,zero,66d0 <ad9361_trx_ext_lo_control+0x284>
    66c8:	008001c4 	movi	r2,7
    66cc:	00000306 	br	66dc <ad9361_trx_ext_lo_control+0x290>
    66d0:	e0bffc17 	ldw	r2,-16(fp)
    66d4:	10803183 	ldbu	r2,198(r2)
    66d8:	10803fcc 	andi	r2,r2,255
    66dc:	d8800015 	stw	r2,0(sp)
    66e0:	8009883a 	mov	r4,r16
    66e4:	01400144 	movi	r5,5
    66e8:	018003c4 	movi	r6,15
    66ec:	180f883a 	mov	r7,r3
    66f0:	000031c0 	call	31c <__ad9361_spi_writef>
    66f4:	1007883a 	mov	r3,r2
    66f8:	e0bff917 	ldw	r2,-28(fp)
    66fc:	10c4b03a 	or	r2,r2,r3
    6700:	e0bff915 	stw	r2,-28(fp)
				RX_VCO_DIVIDER(~0), enable ? 7 :
				phy->cached_rx_rfpll_div);

		ret |= ad9361_spi_write(phy->spi, REG_RX_SYNTH_POWER_DOWN_OVERRIDE,
    6704:	e0bffc17 	ldw	r2,-16(fp)
    6708:	10c00117 	ldw	r3,4(r2)
    670c:	e0bffe03 	ldbu	r2,-8(fp)
    6710:	10000226 	beq	r2,zero,671c <ad9361_trx_ext_lo_control+0x2d0>
    6714:	00800384 	movi	r2,14
    6718:	00000106 	br	6720 <ad9361_trx_ext_lo_control+0x2d4>
    671c:	0005883a 	mov	r2,zero
    6720:	1809883a 	mov	r4,r3
    6724:	01401404 	movi	r5,80
    6728:	100d883a 	mov	r6,r2
    672c:	00002600 	call	260 <ad9361_spi_write>
    6730:	1007883a 	mov	r3,r2
    6734:	e0bff917 	ldw	r2,-28(fp)
    6738:	10c4b03a 	or	r2,r2,r3
    673c:	e0bff915 	stw	r2,-28(fp)
				enable ? RX_SYNTH_VCO_ALC_POWER_DOWN |
				RX_SYNTH_PTAT_POWER_DOWN |
				RX_SYNTH_VCO_POWER_DOWN : 0);

		ret |= ad9361_spi_writef(phy->spi, REG_ANALOG_POWER_DOWN_OVERRIDE,
    6740:	e0bffc17 	ldw	r2,-16(fp)
    6744:	14000117 	ldw	r16,4(r2)
    6748:	01000804 	movi	r4,32
    674c:	001c8300 	call	1c830 <find_first_bit>
    6750:	1007883a 	mov	r3,r2
    6754:	e0bffe03 	ldbu	r2,-8(fp)
    6758:	1080005c 	xori	r2,r2,1
    675c:	10803fcc 	andi	r2,r2,255
    6760:	d8800015 	stw	r2,0(sp)
    6764:	8009883a 	mov	r4,r16
    6768:	014015c4 	movi	r5,87
    676c:	01800804 	movi	r6,32
    6770:	180f883a 	mov	r7,r3
    6774:	000031c0 	call	31c <__ad9361_spi_writef>
    6778:	1007883a 	mov	r3,r2
    677c:	e0bff917 	ldw	r2,-28(fp)
    6780:	10c4b03a 	or	r2,r2,r3
    6784:	e0bff915 	stw	r2,-28(fp)
				RX_EXT_VCO_BUFFER_POWER_DOWN, !enable);

		ret |= ad9361_spi_write(phy->spi, REG_RX_LO_GEN_POWER_MODE,
    6788:	e0bffc17 	ldw	r2,-16(fp)
    678c:	10c00117 	ldw	r3,4(r2)
				RX_LO_GEN_POWER_MODE(val));
    6790:	e0bffa17 	ldw	r2,-24(fp)
    6794:	108000cc 	andi	r2,r2,3
    6798:	1004913a 	slli	r2,r2,4
				RX_SYNTH_VCO_POWER_DOWN : 0);

		ret |= ad9361_spi_writef(phy->spi, REG_ANALOG_POWER_DOWN_OVERRIDE,
				RX_EXT_VCO_BUFFER_POWER_DOWN, !enable);

		ret |= ad9361_spi_write(phy->spi, REG_RX_LO_GEN_POWER_MODE,
    679c:	1809883a 	mov	r4,r3
    67a0:	01409844 	movi	r5,609
    67a4:	100d883a 	mov	r6,r2
    67a8:	00002600 	call	260 <ad9361_spi_write>
    67ac:	1007883a 	mov	r3,r2
    67b0:	e0bff917 	ldw	r2,-28(fp)
    67b4:	10c4b03a 	or	r2,r2,r3
    67b8:	e0bff915 	stw	r2,-28(fp)
				RX_LO_GEN_POWER_MODE(val));
	}

	return ret;
    67bc:	e0bff917 	ldw	r2,-28(fp)
}
    67c0:	e6ffff04 	addi	sp,fp,-4
    67c4:	dfc00217 	ldw	ra,8(sp)
    67c8:	df000117 	ldw	fp,4(sp)
    67cc:	dc000017 	ldw	r16,0(sp)
    67d0:	dec00304 	addi	sp,sp,12
    67d4:	f800283a 	ret

000067d8 <ad9361_set_ref_clk_cycles>:
 * @param ref_clk_hz The reference clock frequency [Hz].
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_set_ref_clk_cycles(struct ad9361_rf_phy *phy,
	uint32_t ref_clk_hz)
{
    67d8:	defffb04 	addi	sp,sp,-20
    67dc:	de00012e 	bgeu	sp,et,67e4 <ad9361_set_ref_clk_cycles+0xc>
    67e0:	003b68fa 	trap	3
    67e4:	dfc00415 	stw	ra,16(sp)
    67e8:	df000315 	stw	fp,12(sp)
    67ec:	dc000215 	stw	r16,8(sp)
    67f0:	df000304 	addi	fp,sp,12
    67f4:	e13ffd15 	stw	r4,-12(fp)
    67f8:	e17ffe15 	stw	r5,-8(fp)
	dev_dbg(&phy->spi->dev, "%s : ref_clk_hz %"PRIu32,
    67fc:	010000b4 	movhi	r4,2
    6800:	211c7304 	addi	r4,r4,29132
    6804:	014000b4 	movhi	r5,2
    6808:	295f0304 	addi	r5,r5,31756
    680c:	e1bffe17 	ldw	r6,-8(fp)
    6810:	001f8180 	call	1f818 <printf>
    6814:	010000b4 	movhi	r4,2
    6818:	211a7504 	addi	r4,r4,27092
    681c:	001f8180 	call	1f818 <printf>
		__func__, ref_clk_hz);

	return ad9361_spi_write(phy->spi, REG_REFERENCE_CLOCK_CYCLES,
    6820:	e0bffd17 	ldw	r2,-12(fp)
    6824:	14000117 	ldw	r16,4(r2)
		REFERENCE_CLOCK_CYCLES_PER_US((ref_clk_hz / 1000000UL) - 1));
    6828:	e0bffe17 	ldw	r2,-8(fp)
    682c:	1009883a 	mov	r4,r2
    6830:	014003f4 	movhi	r5,15
    6834:	29509004 	addi	r5,r5,16960
    6838:	001d7a40 	call	1d7a4 <__udivsi3>
    683c:	10bfffc4 	addi	r2,r2,-1
	uint32_t ref_clk_hz)
{
	dev_dbg(&phy->spi->dev, "%s : ref_clk_hz %"PRIu32,
		__func__, ref_clk_hz);

	return ad9361_spi_write(phy->spi, REG_REFERENCE_CLOCK_CYCLES,
    6840:	10801fcc 	andi	r2,r2,127
    6844:	8009883a 	mov	r4,r16
    6848:	01400e84 	movi	r5,58
    684c:	100d883a 	mov	r6,r2
    6850:	00002600 	call	260 <ad9361_spi_write>
		REFERENCE_CLOCK_CYCLES_PER_US((ref_clk_hz / 1000000UL) - 1));
}
    6854:	e6ffff04 	addi	sp,fp,-4
    6858:	dfc00217 	ldw	ra,8(sp)
    685c:	df000117 	ldw	fp,4(sp)
    6860:	dc000017 	ldw	r16,0(sp)
    6864:	dec00304 	addi	sp,sp,12
    6868:	f800283a 	ret

0000686c <ad9361_set_dcxo_tune>:
 * @param fine The DCXO tune fine.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_set_dcxo_tune(struct ad9361_rf_phy *phy,
	uint32_t coarse, uint32_t fine)
{
    686c:	defffb04 	addi	sp,sp,-20
    6870:	de00012e 	bgeu	sp,et,6878 <ad9361_set_dcxo_tune+0xc>
    6874:	003b68fa 	trap	3
    6878:	dfc00415 	stw	ra,16(sp)
    687c:	df000315 	stw	fp,12(sp)
    6880:	df000304 	addi	fp,sp,12
    6884:	e13ffd15 	stw	r4,-12(fp)
    6888:	e17ffe15 	stw	r5,-8(fp)
    688c:	e1bfff15 	stw	r6,-4(fp)
	dev_dbg(&phy->spi->dev, "%s : coarse %"PRIu32" fine %"PRIu32,
    6890:	010000b4 	movhi	r4,2
    6894:	211c7804 	addi	r4,r4,29152
    6898:	014000b4 	movhi	r5,2
    689c:	295f0a04 	addi	r5,r5,31784
    68a0:	e1bffe17 	ldw	r6,-8(fp)
    68a4:	e1ffff17 	ldw	r7,-4(fp)
    68a8:	001f8180 	call	1f818 <printf>
    68ac:	010000b4 	movhi	r4,2
    68b0:	211a7504 	addi	r4,r4,27092
    68b4:	001f8180 	call	1f818 <printf>
		__func__, coarse, fine);

	ad9361_spi_write(phy->spi, REG_DCXO_COARSE_TUNE,
    68b8:	e0bffd17 	ldw	r2,-12(fp)
    68bc:	10c00117 	ldw	r3,4(r2)
    68c0:	e0bffe17 	ldw	r2,-8(fp)
    68c4:	10800fcc 	andi	r2,r2,63
    68c8:	1809883a 	mov	r4,r3
    68cc:	0140a484 	movi	r5,658
    68d0:	100d883a 	mov	r6,r2
    68d4:	00002600 	call	260 <ad9361_spi_write>
		DCXO_TUNE_COARSE(coarse));
	ad9361_spi_write(phy->spi, REG_DCXO_FINE_TUNE_LOW,
    68d8:	e0bffd17 	ldw	r2,-12(fp)
    68dc:	10c00117 	ldw	r3,4(r2)
		DCXO_TUNE_FINE_LOW(fine));
    68e0:	e0bfff17 	ldw	r2,-4(fp)
    68e4:	100490fa 	slli	r2,r2,3
	dev_dbg(&phy->spi->dev, "%s : coarse %"PRIu32" fine %"PRIu32,
		__func__, coarse, fine);

	ad9361_spi_write(phy->spi, REG_DCXO_COARSE_TUNE,
		DCXO_TUNE_COARSE(coarse));
	ad9361_spi_write(phy->spi, REG_DCXO_FINE_TUNE_LOW,
    68e8:	10803fcc 	andi	r2,r2,255
    68ec:	1809883a 	mov	r4,r3
    68f0:	0140a504 	movi	r5,660
    68f4:	100d883a 	mov	r6,r2
    68f8:	00002600 	call	260 <ad9361_spi_write>
		DCXO_TUNE_FINE_LOW(fine));
	return ad9361_spi_write(phy->spi, REG_DCXO_FINE_TUNE_HIGH,
    68fc:	e0bffd17 	ldw	r2,-12(fp)
    6900:	10c00117 	ldw	r3,4(r2)
    6904:	e0bfff17 	ldw	r2,-4(fp)
    6908:	1004d17a 	srli	r2,r2,5
    690c:	1809883a 	mov	r4,r3
    6910:	0140a4c4 	movi	r5,659
    6914:	100d883a 	mov	r6,r2
    6918:	00002600 	call	260 <ad9361_spi_write>
		DCXO_TUNE_FINE_HIGH(fine));
}
    691c:	e037883a 	mov	sp,fp
    6920:	dfc00117 	ldw	ra,4(sp)
    6924:	df000017 	ldw	fp,0(sp)
    6928:	dec00204 	addi	sp,sp,8
    692c:	f800283a 	ret

00006930 <ad9361_txmon_setup>:
 * @param ctrl The TXMON settings.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_txmon_setup(struct ad9361_rf_phy *phy,
			       struct tx_monitor_control *ctrl)
{
    6930:	defffa04 	addi	sp,sp,-24
    6934:	de00012e 	bgeu	sp,et,693c <ad9361_txmon_setup+0xc>
    6938:	003b68fa 	trap	3
    693c:	dfc00515 	stw	ra,20(sp)
    6940:	df000415 	stw	fp,16(sp)
    6944:	dc000315 	stw	r16,12(sp)
    6948:	df000404 	addi	fp,sp,16
    694c:	e13ffd15 	stw	r4,-12(fp)
    6950:	e17ffe15 	stw	r5,-8(fp)
	struct spi_device *spi = phy->spi;
    6954:	e0bffd17 	ldw	r2,-12(fp)
    6958:	10800117 	ldw	r2,4(r2)
    695c:	e0bffc15 	stw	r2,-16(fp)

	dev_dbg(&phy->spi->dev, "%s", __func__);
    6960:	010000b4 	movhi	r4,2
    6964:	211aac04 	addi	r4,r4,27312
    6968:	014000b4 	movhi	r5,2
    696c:	295f1004 	addi	r5,r5,31808
    6970:	001f8180 	call	1f818 <printf>
    6974:	010000b4 	movhi	r4,2
    6978:	211a7504 	addi	r4,r4,27092
    697c:	001f8180 	call	1f818 <printf>

	ad9361_spi_write(spi, REG_TPM_MODE_ENABLE,
			 (ctrl->one_shot_mode_en ? ONE_SHOT_MODE : 0) |
    6980:	e0bffe17 	ldw	r2,-8(fp)
    6984:	10800043 	ldbu	r2,1(r2)
    6988:	10803fcc 	andi	r2,r2,255
    698c:	10000226 	beq	r2,zero,6998 <ad9361_txmon_setup+0x68>
    6990:	04001004 	movi	r16,64
    6994:	00000106 	br	699c <ad9361_txmon_setup+0x6c>
    6998:	0021883a 	mov	r16,zero
			 TX_MON_DURATION(ilog2(ctrl->tx_mon_duration / 16)));
    699c:	e0bffe17 	ldw	r2,-8(fp)
    69a0:	1080030b 	ldhu	r2,12(r2)
    69a4:	10bfffcc 	andi	r2,r2,65535
    69a8:	1004d13a 	srli	r2,r2,4
    69ac:	10bfffcc 	andi	r2,r2,65535
    69b0:	1009883a 	mov	r4,r2
    69b4:	001c5b40 	call	1c5b4 <ilog2>
    69b8:	108003cc 	andi	r2,r2,15
	struct spi_device *spi = phy->spi;

	dev_dbg(&phy->spi->dev, "%s", __func__);

	ad9361_spi_write(spi, REG_TPM_MODE_ENABLE,
			 (ctrl->one_shot_mode_en ? ONE_SHOT_MODE : 0) |
    69bc:	8084b03a 	or	r2,r16,r2
{
	struct spi_device *spi = phy->spi;

	dev_dbg(&phy->spi->dev, "%s", __func__);

	ad9361_spi_write(spi, REG_TPM_MODE_ENABLE,
    69c0:	e13ffc17 	ldw	r4,-16(fp)
    69c4:	01401b84 	movi	r5,110
    69c8:	100d883a 	mov	r6,r2
    69cc:	00002600 	call	260 <ad9361_spi_write>
			 (ctrl->one_shot_mode_en ? ONE_SHOT_MODE : 0) |
			 TX_MON_DURATION(ilog2(ctrl->tx_mon_duration / 16)));

	ad9361_spi_write(spi, REG_TX_MON_DELAY, ctrl->tx_mon_delay);
    69d0:	e0bffe17 	ldw	r2,-8(fp)
    69d4:	1080028b 	ldhu	r2,10(r2)
    69d8:	10bfffcc 	andi	r2,r2,65535
    69dc:	e13ffc17 	ldw	r4,-16(fp)
    69e0:	01401a44 	movi	r5,105
    69e4:	100d883a 	mov	r6,r2
    69e8:	00002600 	call	260 <ad9361_spi_write>

	ad9361_spi_write(spi, REG_TX_MON_1_CONFIG,
			 TX_MON_1_LO_CM(ctrl->tx1_mon_lo_cm) |
    69ec:	e0bffe17 	ldw	r2,-8(fp)
    69f0:	10800403 	ldbu	r2,16(r2)
    69f4:	10803fcc 	andi	r2,r2,255
    69f8:	1085883a 	add	r2,r2,r2
    69fc:	1085883a 	add	r2,r2,r2
    6a00:	10c03fcc 	andi	r3,r2,255
			 TX_MON_1_GAIN(ctrl->tx1_mon_front_end_gain));
    6a04:	e0bffe17 	ldw	r2,-8(fp)
    6a08:	10800383 	ldbu	r2,14(r2)
    6a0c:	10803fcc 	andi	r2,r2,255
    6a10:	108000cc 	andi	r2,r2,3
			 TX_MON_DURATION(ilog2(ctrl->tx_mon_duration / 16)));

	ad9361_spi_write(spi, REG_TX_MON_DELAY, ctrl->tx_mon_delay);

	ad9361_spi_write(spi, REG_TX_MON_1_CONFIG,
			 TX_MON_1_LO_CM(ctrl->tx1_mon_lo_cm) |
    6a14:	1884b03a 	or	r2,r3,r2
			 (ctrl->one_shot_mode_en ? ONE_SHOT_MODE : 0) |
			 TX_MON_DURATION(ilog2(ctrl->tx_mon_duration / 16)));

	ad9361_spi_write(spi, REG_TX_MON_DELAY, ctrl->tx_mon_delay);

	ad9361_spi_write(spi, REG_TX_MON_1_CONFIG,
    6a18:	e13ffc17 	ldw	r4,-16(fp)
    6a1c:	01401c04 	movi	r5,112
    6a20:	100d883a 	mov	r6,r2
    6a24:	00002600 	call	260 <ad9361_spi_write>
			 TX_MON_1_LO_CM(ctrl->tx1_mon_lo_cm) |
			 TX_MON_1_GAIN(ctrl->tx1_mon_front_end_gain));
	ad9361_spi_write(spi, REG_TX_MON_2_CONFIG,
			 TX_MON_2_LO_CM(ctrl->tx2_mon_lo_cm) |
    6a28:	e0bffe17 	ldw	r2,-8(fp)
    6a2c:	10800443 	ldbu	r2,17(r2)
    6a30:	10803fcc 	andi	r2,r2,255
    6a34:	1085883a 	add	r2,r2,r2
    6a38:	1085883a 	add	r2,r2,r2
    6a3c:	10c03fcc 	andi	r3,r2,255
			 TX_MON_2_GAIN(ctrl->tx2_mon_front_end_gain));
    6a40:	e0bffe17 	ldw	r2,-8(fp)
    6a44:	108003c3 	ldbu	r2,15(r2)
    6a48:	10803fcc 	andi	r2,r2,255
    6a4c:	108000cc 	andi	r2,r2,3

	ad9361_spi_write(spi, REG_TX_MON_1_CONFIG,
			 TX_MON_1_LO_CM(ctrl->tx1_mon_lo_cm) |
			 TX_MON_1_GAIN(ctrl->tx1_mon_front_end_gain));
	ad9361_spi_write(spi, REG_TX_MON_2_CONFIG,
			 TX_MON_2_LO_CM(ctrl->tx2_mon_lo_cm) |
    6a50:	1884b03a 	or	r2,r3,r2
	ad9361_spi_write(spi, REG_TX_MON_DELAY, ctrl->tx_mon_delay);

	ad9361_spi_write(spi, REG_TX_MON_1_CONFIG,
			 TX_MON_1_LO_CM(ctrl->tx1_mon_lo_cm) |
			 TX_MON_1_GAIN(ctrl->tx1_mon_front_end_gain));
	ad9361_spi_write(spi, REG_TX_MON_2_CONFIG,
    6a54:	e13ffc17 	ldw	r4,-16(fp)
    6a58:	01401c44 	movi	r5,113
    6a5c:	100d883a 	mov	r6,r2
    6a60:	00002600 	call	260 <ad9361_spi_write>
			 TX_MON_2_LO_CM(ctrl->tx2_mon_lo_cm) |
			 TX_MON_2_GAIN(ctrl->tx2_mon_front_end_gain));

	ad9361_spi_write(spi, REG_TX_ATTEN_THRESH,
			 ctrl->low_high_gain_threshold_mdB / 250);
    6a64:	e0bffe17 	ldw	r2,-8(fp)
    6a68:	10800117 	ldw	r2,4(r2)
			 TX_MON_1_GAIN(ctrl->tx1_mon_front_end_gain));
	ad9361_spi_write(spi, REG_TX_MON_2_CONFIG,
			 TX_MON_2_LO_CM(ctrl->tx2_mon_lo_cm) |
			 TX_MON_2_GAIN(ctrl->tx2_mon_front_end_gain));

	ad9361_spi_write(spi, REG_TX_ATTEN_THRESH,
    6a6c:	1009883a 	mov	r4,r2
    6a70:	01403e84 	movi	r5,250
    6a74:	001d7a40 	call	1d7a4 <__udivsi3>
    6a78:	e13ffc17 	ldw	r4,-16(fp)
    6a7c:	01401e04 	movi	r5,120
    6a80:	100d883a 	mov	r6,r2
    6a84:	00002600 	call	260 <ad9361_spi_write>
			 ctrl->low_high_gain_threshold_mdB / 250);

	ad9361_spi_write(spi, REG_TX_MON_HIGH_GAIN,
			 TX_MON_HIGH_GAIN(ctrl->high_gain_dB));
    6a88:	e0bffe17 	ldw	r2,-8(fp)
    6a8c:	10800243 	ldbu	r2,9(r2)
			 TX_MON_2_GAIN(ctrl->tx2_mon_front_end_gain));

	ad9361_spi_write(spi, REG_TX_ATTEN_THRESH,
			 ctrl->low_high_gain_threshold_mdB / 250);

	ad9361_spi_write(spi, REG_TX_MON_HIGH_GAIN,
    6a90:	10803fcc 	andi	r2,r2,255
    6a94:	108007cc 	andi	r2,r2,31
    6a98:	e13ffc17 	ldw	r4,-16(fp)
    6a9c:	01401a04 	movi	r5,104
    6aa0:	100d883a 	mov	r6,r2
    6aa4:	00002600 	call	260 <ad9361_spi_write>
			 TX_MON_HIGH_GAIN(ctrl->high_gain_dB));

	ad9361_spi_write(spi, REG_TX_MON_LOW_GAIN,
			 (ctrl->tx_mon_track_en ? TX_MON_TRACK : 0) |
    6aa8:	e0bffe17 	ldw	r2,-8(fp)
    6aac:	10800003 	ldbu	r2,0(r2)
    6ab0:	10803fcc 	andi	r2,r2,255
    6ab4:	10000226 	beq	r2,zero,6ac0 <ad9361_txmon_setup+0x190>
    6ab8:	00800804 	movi	r2,32
    6abc:	00000106 	br	6ac4 <ad9361_txmon_setup+0x194>
    6ac0:	0005883a 	mov	r2,zero
			 TX_MON_LOW_GAIN(ctrl->low_gain_dB));
    6ac4:	e0fffe17 	ldw	r3,-8(fp)
    6ac8:	18c00203 	ldbu	r3,8(r3)
    6acc:	18c03fcc 	andi	r3,r3,255
    6ad0:	18c007cc 	andi	r3,r3,31

	ad9361_spi_write(spi, REG_TX_MON_HIGH_GAIN,
			 TX_MON_HIGH_GAIN(ctrl->high_gain_dB));

	ad9361_spi_write(spi, REG_TX_MON_LOW_GAIN,
			 (ctrl->tx_mon_track_en ? TX_MON_TRACK : 0) |
    6ad4:	10c4b03a 	or	r2,r2,r3
			 ctrl->low_high_gain_threshold_mdB / 250);

	ad9361_spi_write(spi, REG_TX_MON_HIGH_GAIN,
			 TX_MON_HIGH_GAIN(ctrl->high_gain_dB));

	ad9361_spi_write(spi, REG_TX_MON_LOW_GAIN,
    6ad8:	e13ffc17 	ldw	r4,-16(fp)
    6adc:	014019c4 	movi	r5,103
    6ae0:	100d883a 	mov	r6,r2
    6ae4:	00002600 	call	260 <ad9361_spi_write>
			 (ctrl->tx_mon_track_en ? TX_MON_TRACK : 0) |
			 TX_MON_LOW_GAIN(ctrl->low_gain_dB));

	return 0;
    6ae8:	0005883a 	mov	r2,zero
}
    6aec:	e6ffff04 	addi	sp,fp,-4
    6af0:	dfc00217 	ldw	ra,8(sp)
    6af4:	df000117 	ldw	fp,4(sp)
    6af8:	dc000017 	ldw	r16,0(sp)
    6afc:	dec00304 	addi	sp,sp,12
    6b00:	f800283a 	ret

00006b04 <ad9361_txmon_control>:
 * @param en_mask The enable mask.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_txmon_control(struct ad9361_rf_phy *phy,
				int32_t en_mask)
{
    6b04:	defffa04 	addi	sp,sp,-24
    6b08:	de00012e 	bgeu	sp,et,6b10 <ad9361_txmon_control+0xc>
    6b0c:	003b68fa 	trap	3
    6b10:	dfc00515 	stw	ra,20(sp)
    6b14:	df000415 	stw	fp,16(sp)
    6b18:	dc000315 	stw	r16,12(sp)
    6b1c:	df000404 	addi	fp,sp,16
    6b20:	e13ffd15 	stw	r4,-12(fp)
    6b24:	e17ffe15 	stw	r5,-8(fp)
	dev_dbg(&phy->spi->dev, "%s: mask 0x%"PRIx32, __func__, en_mask);
    6b28:	010000b4 	movhi	r4,2
    6b2c:	211c7f04 	addi	r4,r4,29180
    6b30:	014000b4 	movhi	r5,2
    6b34:	295f1504 	addi	r5,r5,31828
    6b38:	e1bffe17 	ldw	r6,-8(fp)
    6b3c:	001f8180 	call	1f818 <printf>
    6b40:	010000b4 	movhi	r4,2
    6b44:	211a7504 	addi	r4,r4,27092
    6b48:	001f8180 	call	1f818 <printf>
				ENABLE_RX_DATA_PORT_FOR_CAL, 0);
		phy->txmon_tdd_en = false;
	}
#endif

	ad9361_spi_writef(phy->spi, REG_ANALOG_POWER_DOWN_OVERRIDE,
    6b4c:	e0bffd17 	ldw	r2,-12(fp)
    6b50:	14000117 	ldw	r16,4(r2)
    6b54:	01000304 	movi	r4,12
    6b58:	001c8300 	call	1c830 <find_first_bit>
    6b5c:	1007883a 	mov	r3,r2
    6b60:	e0bffe17 	ldw	r2,-8(fp)
    6b64:	0084303a 	nor	r2,zero,r2
    6b68:	d8800015 	stw	r2,0(sp)
    6b6c:	8009883a 	mov	r4,r16
    6b70:	014015c4 	movi	r5,87
    6b74:	01800304 	movi	r6,12
    6b78:	180f883a 	mov	r7,r3
    6b7c:	000031c0 	call	31c <__ad9361_spi_writef>
			TX_MONITOR_POWER_DOWN(~0), ~en_mask);

	ad9361_spi_writef(phy->spi, REG_TPM_MODE_ENABLE,
    6b80:	e0bffd17 	ldw	r2,-12(fp)
    6b84:	14000117 	ldw	r16,4(r2)
    6b88:	01000804 	movi	r4,32
    6b8c:	001c8300 	call	1c830 <find_first_bit>
    6b90:	1007883a 	mov	r3,r2
    6b94:	e0bffe17 	ldw	r2,-8(fp)
    6b98:	1080004c 	andi	r2,r2,1
    6b9c:	1004c03a 	cmpne	r2,r2,zero
    6ba0:	10803fcc 	andi	r2,r2,255
    6ba4:	d8800015 	stw	r2,0(sp)
    6ba8:	8009883a 	mov	r4,r16
    6bac:	01401b84 	movi	r5,110
    6bb0:	01800804 	movi	r6,32
    6bb4:	180f883a 	mov	r7,r3
    6bb8:	000031c0 	call	31c <__ad9361_spi_writef>
			TX1_MON_ENABLE, !!(en_mask & TX_1));

	return ad9361_spi_writef(phy->spi, REG_TPM_MODE_ENABLE,
    6bbc:	e0bffd17 	ldw	r2,-12(fp)
    6bc0:	14000117 	ldw	r16,4(r2)
    6bc4:	01002004 	movi	r4,128
    6bc8:	001c8300 	call	1c830 <find_first_bit>
    6bcc:	1007883a 	mov	r3,r2
    6bd0:	e0bffe17 	ldw	r2,-8(fp)
    6bd4:	1080008c 	andi	r2,r2,2
    6bd8:	1004c03a 	cmpne	r2,r2,zero
    6bdc:	10803fcc 	andi	r2,r2,255
    6be0:	d8800015 	stw	r2,0(sp)
    6be4:	8009883a 	mov	r4,r16
    6be8:	01401b84 	movi	r5,110
    6bec:	01802004 	movi	r6,128
    6bf0:	180f883a 	mov	r7,r3
    6bf4:	000031c0 	call	31c <__ad9361_spi_writef>
			TX2_MON_ENABLE, !!(en_mask & TX_2));
}
    6bf8:	e6ffff04 	addi	sp,fp,-4
    6bfc:	dfc00217 	ldw	ra,8(sp)
    6c00:	df000117 	ldw	fp,4(sp)
    6c04:	dc000017 	ldw	r16,0(sp)
    6c08:	dec00304 	addi	sp,sp,12
    6c0c:	f800283a 	ret

00006c10 <ad9361_rf_port_setup>:
* @param txb TX output option identifier
* @return 0 in case of success, negative error code otherwise.
*/
int32_t ad9361_rf_port_setup(struct ad9361_rf_phy *phy, bool is_out,
				    uint32_t rx_inputs, uint32_t txb)
{
    6c10:	defff904 	addi	sp,sp,-28
    6c14:	de00012e 	bgeu	sp,et,6c1c <ad9361_rf_port_setup+0xc>
    6c18:	003b68fa 	trap	3
    6c1c:	dfc00615 	stw	ra,24(sp)
    6c20:	df000515 	stw	fp,20(sp)
    6c24:	df000504 	addi	fp,sp,20
    6c28:	e13ffc15 	stw	r4,-16(fp)
    6c2c:	2805883a 	mov	r2,r5
    6c30:	e1bffe15 	stw	r6,-8(fp)
    6c34:	e1ffff15 	stw	r7,-4(fp)
    6c38:	e0bffd05 	stb	r2,-12(fp)
	uint32_t val;

	if (rx_inputs > 11)
    6c3c:	e0bffe17 	ldw	r2,-8(fp)
    6c40:	10800330 	cmpltui	r2,r2,12
    6c44:	1000021e 	bne	r2,zero,6c50 <ad9361_rf_port_setup+0x40>
		return -EINVAL;
    6c48:	00bffa84 	movi	r2,-22
    6c4c:	00003406 	br	6d20 <ad9361_rf_port_setup+0x110>

	if (!is_out) {
    6c50:	e0bffd03 	ldbu	r2,-12(fp)
    6c54:	1080005c 	xori	r2,r2,1
    6c58:	10803fcc 	andi	r2,r2,255
    6c5c:	10000c26 	beq	r2,zero,6c90 <ad9361_rf_port_setup+0x80>
		if (rx_inputs > 8)
    6c60:	e0bffe17 	ldw	r2,-8(fp)
    6c64:	10800270 	cmpltui	r2,r2,9
    6c68:	1000061e 	bne	r2,zero,6c84 <ad9361_rf_port_setup+0x74>
			return ad9361_txmon_control(phy, rx_inputs & (TX_1 | TX_2));
    6c6c:	e0bffe17 	ldw	r2,-8(fp)
    6c70:	108000cc 	andi	r2,r2,3
    6c74:	e13ffc17 	ldw	r4,-16(fp)
    6c78:	100b883a 	mov	r5,r2
    6c7c:	0006b040 	call	6b04 <ad9361_txmon_control>
    6c80:	00002706 	br	6d20 <ad9361_rf_port_setup+0x110>
		else
			ad9361_txmon_control(phy, 0);
    6c84:	e13ffc17 	ldw	r4,-16(fp)
    6c88:	000b883a 	mov	r5,zero
    6c8c:	0006b040 	call	6b04 <ad9361_txmon_control>
	}

	if (rx_inputs < 3)
    6c90:	e0bffe17 	ldw	r2,-8(fp)
    6c94:	108000e8 	cmpgeui	r2,r2,3
    6c98:	1000071e 	bne	r2,zero,6cb8 <ad9361_rf_port_setup+0xa8>
		val = 3 << (rx_inputs * 2);
    6c9c:	e0bffe17 	ldw	r2,-8(fp)
    6ca0:	1085883a 	add	r2,r2,r2
    6ca4:	1007883a 	mov	r3,r2
    6ca8:	008000c4 	movi	r2,3
    6cac:	10c4983a 	sll	r2,r2,r3
    6cb0:	e0bffb15 	stw	r2,-20(fp)
    6cb4:	00000606 	br	6cd0 <ad9361_rf_port_setup+0xc0>
	else
		val = 1 << (rx_inputs - 3);
    6cb8:	e0bffe17 	ldw	r2,-8(fp)
    6cbc:	10bfff44 	addi	r2,r2,-3
    6cc0:	1007883a 	mov	r3,r2
    6cc4:	00800044 	movi	r2,1
    6cc8:	10c4983a 	sll	r2,r2,r3
    6ccc:	e0bffb15 	stw	r2,-20(fp)

	if (txb)
    6cd0:	e0bfff17 	ldw	r2,-4(fp)
    6cd4:	10000326 	beq	r2,zero,6ce4 <ad9361_rf_port_setup+0xd4>
		val |= TX_OUTPUT; /* Select TX1B, TX2B */
    6cd8:	e0bffb17 	ldw	r2,-20(fp)
    6cdc:	10801014 	ori	r2,r2,64
    6ce0:	e0bffb15 	stw	r2,-20(fp)

	dev_dbg(&phy->spi->dev, "%s : INPUT_SELECT 0x%"PRIx32,
    6ce4:	010000b4 	movhi	r4,2
    6ce8:	211c8304 	addi	r4,r4,29196
    6cec:	014000b4 	movhi	r5,2
    6cf0:	295f1b04 	addi	r5,r5,31852
    6cf4:	e1bffb17 	ldw	r6,-20(fp)
    6cf8:	001f8180 	call	1f818 <printf>
    6cfc:	010000b4 	movhi	r4,2
    6d00:	211a7504 	addi	r4,r4,27092
    6d04:	001f8180 	call	1f818 <printf>
		__func__, val);

	return ad9361_spi_write(phy->spi, REG_INPUT_SELECT, val);
    6d08:	e0bffc17 	ldw	r2,-16(fp)
    6d0c:	10800117 	ldw	r2,4(r2)
    6d10:	1009883a 	mov	r4,r2
    6d14:	01400104 	movi	r5,4
    6d18:	e1bffb17 	ldw	r6,-20(fp)
    6d1c:	00002600 	call	260 <ad9361_spi_write>
}
    6d20:	e037883a 	mov	sp,fp
    6d24:	dfc00117 	ldw	ra,4(sp)
    6d28:	df000017 	ldw	fp,0(sp)
    6d2c:	dec00204 	addi	sp,sp,8
    6d30:	f800283a 	ret

00006d34 <ad9361_pp_port_setup>:
 * @param restore_c3 Set true, will restore the Parallel Port Configuration 3
 *                   register.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_pp_port_setup(struct ad9361_rf_phy *phy, bool restore_c3)
{
    6d34:	defff904 	addi	sp,sp,-28
    6d38:	de00012e 	bgeu	sp,et,6d40 <ad9361_pp_port_setup+0xc>
    6d3c:	003b68fa 	trap	3
    6d40:	dfc00615 	stw	ra,24(sp)
    6d44:	df000515 	stw	fp,20(sp)
    6d48:	df000504 	addi	fp,sp,20
    6d4c:	e13ffe15 	stw	r4,-8(fp)
    6d50:	2805883a 	mov	r2,r5
    6d54:	e0bfff05 	stb	r2,-4(fp)
	struct spi_device *spi = phy->spi;
    6d58:	e0bffe17 	ldw	r2,-8(fp)
    6d5c:	10800117 	ldw	r2,4(r2)
    6d60:	e0bffc15 	stw	r2,-16(fp)
	struct ad9361_phy_platform_data *pd = phy->pdata;
    6d64:	e0bffe17 	ldw	r2,-8(fp)
    6d68:	10803017 	ldw	r2,192(r2)
    6d6c:	e0bffd15 	stw	r2,-12(fp)

	dev_dbg(&phy->spi->dev, "%s", __func__);
    6d70:	010000b4 	movhi	r4,2
    6d74:	211aac04 	addi	r4,r4,27312
    6d78:	014000b4 	movhi	r5,2
    6d7c:	295f2104 	addi	r5,r5,31876
    6d80:	001f8180 	call	1f818 <printf>
    6d84:	010000b4 	movhi	r4,2
    6d88:	211a7504 	addi	r4,r4,27092
    6d8c:	001f8180 	call	1f818 <printf>

	if (restore_c3) {
    6d90:	e0bfff03 	ldbu	r2,-4(fp)
    6d94:	10000826 	beq	r2,zero,6db8 <ad9361_pp_port_setup+0x84>
		return ad9361_spi_write(spi, REG_PARALLEL_PORT_CONF_3,
			pd->port_ctrl.pp_conf[2]);
    6d98:	e0bffd17 	ldw	r2,-12(fp)
    6d9c:	10804383 	ldbu	r2,270(r2)
	struct ad9361_phy_platform_data *pd = phy->pdata;

	dev_dbg(&phy->spi->dev, "%s", __func__);

	if (restore_c3) {
		return ad9361_spi_write(spi, REG_PARALLEL_PORT_CONF_3,
    6da0:	10803fcc 	andi	r2,r2,255
    6da4:	e13ffc17 	ldw	r4,-16(fp)
    6da8:	01400484 	movi	r5,18
    6dac:	100d883a 	mov	r6,r2
    6db0:	00002600 	call	260 <ad9361_spi_write>
    6db4:	00006c06 	br	6f68 <ad9361_pp_port_setup+0x234>
			pd->port_ctrl.pp_conf[2]);
	}

	/* Sanity check */
	if (pd->port_ctrl.pp_conf[2] & LVDS_MODE)
    6db8:	e0bffd17 	ldw	r2,-12(fp)
    6dbc:	10804383 	ldbu	r2,270(r2)
    6dc0:	10803fcc 	andi	r2,r2,255
    6dc4:	1080040c 	andi	r2,r2,16
    6dc8:	10000726 	beq	r2,zero,6de8 <ad9361_pp_port_setup+0xb4>
		pd->port_ctrl.pp_conf[2] &=
    6dcc:	e0bffd17 	ldw	r2,-12(fp)
    6dd0:	10c04383 	ldbu	r3,270(r2)
    6dd4:	00bff4c4 	movi	r2,-45
    6dd8:	1884703a 	and	r2,r3,r2
    6ddc:	1007883a 	mov	r3,r2
    6de0:	e0bffd17 	ldw	r2,-12(fp)
    6de4:	10c04385 	stb	r3,270(r2)
		~(HALF_DUPLEX_MODE | SINGLE_DATA_RATE | SINGLE_PORT_MODE);

	if (pd->port_ctrl.pp_conf[2] & FULL_PORT)
    6de8:	e0bffd17 	ldw	r2,-12(fp)
    6dec:	10804383 	ldbu	r2,270(r2)
    6df0:	10803fcc 	andi	r2,r2,255
    6df4:	1080008c 	andi	r2,r2,2
    6df8:	10000726 	beq	r2,zero,6e18 <ad9361_pp_port_setup+0xe4>
		pd->port_ctrl.pp_conf[2] &= ~(HALF_DUPLEX_MODE | SINGLE_PORT_MODE);
    6dfc:	e0bffd17 	ldw	r2,-12(fp)
    6e00:	10c04383 	ldbu	r3,270(r2)
    6e04:	00bffcc4 	movi	r2,-13
    6e08:	1884703a 	and	r2,r3,r2
    6e0c:	1007883a 	mov	r3,r2
    6e10:	e0bffd17 	ldw	r2,-12(fp)
    6e14:	10c04385 	stb	r3,270(r2)

	ad9361_spi_write(spi, REG_PARALLEL_PORT_CONF_1, pd->port_ctrl.pp_conf[0]);
    6e18:	e0bffd17 	ldw	r2,-12(fp)
    6e1c:	10804303 	ldbu	r2,268(r2)
    6e20:	10803fcc 	andi	r2,r2,255
    6e24:	e13ffc17 	ldw	r4,-16(fp)
    6e28:	01400404 	movi	r5,16
    6e2c:	100d883a 	mov	r6,r2
    6e30:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_PARALLEL_PORT_CONF_2, pd->port_ctrl.pp_conf[1]);
    6e34:	e0bffd17 	ldw	r2,-12(fp)
    6e38:	10804343 	ldbu	r2,269(r2)
    6e3c:	10803fcc 	andi	r2,r2,255
    6e40:	e13ffc17 	ldw	r4,-16(fp)
    6e44:	01400444 	movi	r5,17
    6e48:	100d883a 	mov	r6,r2
    6e4c:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_PARALLEL_PORT_CONF_3, pd->port_ctrl.pp_conf[2]);
    6e50:	e0bffd17 	ldw	r2,-12(fp)
    6e54:	10804383 	ldbu	r2,270(r2)
    6e58:	10803fcc 	andi	r2,r2,255
    6e5c:	e13ffc17 	ldw	r4,-16(fp)
    6e60:	01400484 	movi	r5,18
    6e64:	100d883a 	mov	r6,r2
    6e68:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_RX_CLOCK_DATA_DELAY, pd->port_ctrl.rx_clk_data_delay);
    6e6c:	e0bffd17 	ldw	r2,-12(fp)
    6e70:	108043c3 	ldbu	r2,271(r2)
    6e74:	10803fcc 	andi	r2,r2,255
    6e78:	e13ffc17 	ldw	r4,-16(fp)
    6e7c:	01400184 	movi	r5,6
    6e80:	100d883a 	mov	r6,r2
    6e84:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_TX_CLOCK_DATA_DELAY, pd->port_ctrl.tx_clk_data_delay);
    6e88:	e0bffd17 	ldw	r2,-12(fp)
    6e8c:	10804403 	ldbu	r2,272(r2)
    6e90:	10803fcc 	andi	r2,r2,255
    6e94:	e13ffc17 	ldw	r4,-16(fp)
    6e98:	014001c4 	movi	r5,7
    6e9c:	100d883a 	mov	r6,r2
    6ea0:	00002600 	call	260 <ad9361_spi_write>

	ad9361_spi_write(spi, REG_LVDS_BIAS_CTRL, pd->port_ctrl.lvds_bias_ctrl);
    6ea4:	e0bffd17 	ldw	r2,-12(fp)
    6ea8:	10804483 	ldbu	r2,274(r2)
    6eac:	10803fcc 	andi	r2,r2,255
    6eb0:	e13ffc17 	ldw	r4,-16(fp)
    6eb4:	01400f04 	movi	r5,60
    6eb8:	100d883a 	mov	r6,r2
    6ebc:	00002600 	call	260 <ad9361_spi_write>
	//	ad9361_spi_write(spi, REG_DIGITAL_IO_CTRL, pd->port_ctrl.digital_io_ctrl);
	ad9361_spi_write(spi, REG_LVDS_INVERT_CTRL1, pd->port_ctrl.lvds_invert[0]);
    6ec0:	e0bffd17 	ldw	r2,-12(fp)
    6ec4:	108044c3 	ldbu	r2,275(r2)
    6ec8:	10803fcc 	andi	r2,r2,255
    6ecc:	e13ffc17 	ldw	r4,-16(fp)
    6ed0:	01400f44 	movi	r5,61
    6ed4:	100d883a 	mov	r6,r2
    6ed8:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_LVDS_INVERT_CTRL2, pd->port_ctrl.lvds_invert[1]);
    6edc:	e0bffd17 	ldw	r2,-12(fp)
    6ee0:	10804503 	ldbu	r2,276(r2)
    6ee4:	10803fcc 	andi	r2,r2,255
    6ee8:	e13ffc17 	ldw	r4,-16(fp)
    6eec:	01400f84 	movi	r5,62
    6ef0:	100d883a 	mov	r6,r2
    6ef4:	00002600 	call	260 <ad9361_spi_write>

	if (pd->rx1rx2_phase_inversion_en ||
    6ef8:	e0bffd17 	ldw	r2,-12(fp)
    6efc:	10800343 	ldbu	r2,13(r2)
    6f00:	10803fcc 	andi	r2,r2,255
    6f04:	1000051e 	bne	r2,zero,6f1c <ad9361_pp_port_setup+0x1e8>
		(pd->port_ctrl.pp_conf[1] & INVERT_RX2)) {
    6f08:	e0bffd17 	ldw	r2,-12(fp)
    6f0c:	10804343 	ldbu	r2,269(r2)
    6f10:	10803fcc 	andi	r2,r2,255
    6f14:	1080080c 	andi	r2,r2,32
	ad9361_spi_write(spi, REG_LVDS_BIAS_CTRL, pd->port_ctrl.lvds_bias_ctrl);
	//	ad9361_spi_write(spi, REG_DIGITAL_IO_CTRL, pd->port_ctrl.digital_io_ctrl);
	ad9361_spi_write(spi, REG_LVDS_INVERT_CTRL1, pd->port_ctrl.lvds_invert[0]);
	ad9361_spi_write(spi, REG_LVDS_INVERT_CTRL2, pd->port_ctrl.lvds_invert[1]);

	if (pd->rx1rx2_phase_inversion_en ||
    6f18:	10001226 	beq	r2,zero,6f64 <ad9361_pp_port_setup+0x230>
		(pd->port_ctrl.pp_conf[1] & INVERT_RX2)) {

		ad9361_spi_writef(spi, REG_PARALLEL_PORT_CONF_2, INVERT_RX2, 1);
    6f1c:	01000804 	movi	r4,32
    6f20:	001c8300 	call	1c830 <find_first_bit>
    6f24:	1007883a 	mov	r3,r2
    6f28:	00800044 	movi	r2,1
    6f2c:	d8800015 	stw	r2,0(sp)
    6f30:	e13ffc17 	ldw	r4,-16(fp)
    6f34:	01400444 	movi	r5,17
    6f38:	01800804 	movi	r6,32
    6f3c:	180f883a 	mov	r7,r3
    6f40:	000031c0 	call	31c <__ad9361_spi_writef>
		ad9361_spi_writef(spi, REG_INVERT_BITS,
    6f44:	01000804 	movi	r4,32
    6f48:	001c8300 	call	1c830 <find_first_bit>
    6f4c:	d8000015 	stw	zero,0(sp)
    6f50:	e13ffc17 	ldw	r4,-16(fp)
    6f54:	01406244 	movi	r5,393
    6f58:	01800804 	movi	r6,32
    6f5c:	100f883a 	mov	r7,r2
    6f60:	000031c0 	call	31c <__ad9361_spi_writef>
				  INVERT_RX2_RF_DC_CGOUT_WORD, 0);
	}

	return 0;
    6f64:	0005883a 	mov	r2,zero
}
    6f68:	e037883a 	mov	sp,fp
    6f6c:	dfc00117 	ldw	ra,4(sp)
    6f70:	df000017 	ldw	fp,0(sp)
    6f74:	dec00204 	addi	sp,sp,8
    6f78:	f800283a 	ret

00006f7c <ad9361_gc_setup>:
 * @param phy The AD9361 state structure.
 * @param ctrl The gain control settings.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_gc_setup(struct ad9361_rf_phy *phy, struct gain_control *ctrl)
{
    6f7c:	defff704 	addi	sp,sp,-36
    6f80:	de00012e 	bgeu	sp,et,6f88 <ad9361_gc_setup+0xc>
    6f84:	003b68fa 	trap	3
    6f88:	dfc00815 	stw	ra,32(sp)
    6f8c:	df000715 	stw	fp,28(sp)
    6f90:	df000704 	addi	fp,sp,28
    6f94:	e13ffe15 	stw	r4,-8(fp)
    6f98:	e17fff15 	stw	r5,-4(fp)
	struct spi_device *spi = phy->spi;
    6f9c:	e0bffe17 	ldw	r2,-8(fp)
    6fa0:	10800117 	ldw	r2,4(r2)
    6fa4:	e0bffb15 	stw	r2,-20(fp)
	uint32_t reg, tmp1, tmp2;

	dev_dbg(&phy->spi->dev, "%s", __func__);
    6fa8:	010000b4 	movhi	r4,2
    6fac:	211aac04 	addi	r4,r4,27312
    6fb0:	014000b4 	movhi	r5,2
    6fb4:	295f2704 	addi	r5,r5,31900
    6fb8:	001f8180 	call	1f818 <printf>
    6fbc:	010000b4 	movhi	r4,2
    6fc0:	211a7504 	addi	r4,r4,27092
    6fc4:	001f8180 	call	1f818 <printf>

	reg = DEC_PWR_FOR_GAIN_LOCK_EXIT | DEC_PWR_FOR_LOCK_LEVEL |
    6fc8:	00803804 	movi	r2,224
    6fcc:	e0bffa15 	stw	r2,-24(fp)
		DEC_PWR_FOR_LOW_PWR;

	if (ctrl->rx1_mode == RF_GAIN_HYBRID_AGC ||
    6fd0:	e0bfff17 	ldw	r2,-4(fp)
    6fd4:	10800017 	ldw	r2,0(r2)
    6fd8:	108000e0 	cmpeqi	r2,r2,3
    6fdc:	1000041e 	bne	r2,zero,6ff0 <ad9361_gc_setup+0x74>
		ctrl->rx2_mode == RF_GAIN_HYBRID_AGC)
    6fe0:	e0bfff17 	ldw	r2,-4(fp)
    6fe4:	10800117 	ldw	r2,4(r2)
	dev_dbg(&phy->spi->dev, "%s", __func__);

	reg = DEC_PWR_FOR_GAIN_LOCK_EXIT | DEC_PWR_FOR_LOCK_LEVEL |
		DEC_PWR_FOR_LOW_PWR;

	if (ctrl->rx1_mode == RF_GAIN_HYBRID_AGC ||
    6fe8:	108000d8 	cmpnei	r2,r2,3
    6fec:	1000031e 	bne	r2,zero,6ffc <ad9361_gc_setup+0x80>
		ctrl->rx2_mode == RF_GAIN_HYBRID_AGC)
		reg |= SLOW_ATTACK_HYBRID_MODE;
    6ff0:	e0bffa17 	ldw	r2,-24(fp)
    6ff4:	10800414 	ori	r2,r2,16
    6ff8:	e0bffa15 	stw	r2,-24(fp)

	reg |= RX1_GAIN_CTRL_SETUP(ctrl->rx1_mode) |
    6ffc:	e0bfff17 	ldw	r2,-4(fp)
    7000:	10800017 	ldw	r2,0(r2)
    7004:	10c000cc 	andi	r3,r2,3
		RX2_GAIN_CTRL_SETUP(ctrl->rx2_mode);
    7008:	e0bfff17 	ldw	r2,-4(fp)
    700c:	10800117 	ldw	r2,4(r2)
    7010:	108000cc 	andi	r2,r2,3
    7014:	1085883a 	add	r2,r2,r2
    7018:	1085883a 	add	r2,r2,r2

	if (ctrl->rx1_mode == RF_GAIN_HYBRID_AGC ||
		ctrl->rx2_mode == RF_GAIN_HYBRID_AGC)
		reg |= SLOW_ATTACK_HYBRID_MODE;

	reg |= RX1_GAIN_CTRL_SETUP(ctrl->rx1_mode) |
    701c:	1884b03a 	or	r2,r3,r2
    7020:	e0fffa17 	ldw	r3,-24(fp)
    7024:	1884b03a 	or	r2,r3,r2
    7028:	e0bffa15 	stw	r2,-24(fp)
		RX2_GAIN_CTRL_SETUP(ctrl->rx2_mode);

	phy->agc_mode[0] = ctrl->rx1_mode;
    702c:	e0bfff17 	ldw	r2,-4(fp)
    7030:	10800017 	ldw	r2,0(r2)
    7034:	1007883a 	mov	r3,r2
    7038:	e0bffe17 	ldw	r2,-8(fp)
    703c:	10c05f05 	stb	r3,380(r2)
	phy->agc_mode[1] = ctrl->rx2_mode;
    7040:	e0bfff17 	ldw	r2,-4(fp)
    7044:	10800117 	ldw	r2,4(r2)
    7048:	1007883a 	mov	r3,r2
    704c:	e0bffe17 	ldw	r2,-8(fp)
    7050:	10c05f45 	stb	r3,381(r2)

	ad9361_spi_write(spi, REG_AGC_CONFIG_1, reg); // Gain Control Mode Select
    7054:	e13ffb17 	ldw	r4,-20(fp)
    7058:	01403e84 	movi	r5,250
    705c:	e1bffa17 	ldw	r6,-24(fp)
    7060:	00002600 	call	260 <ad9361_spi_write>

	/* AGC_USE_FULL_GAIN_TABLE handled in ad9361_load_gt() */
	ad9361_spi_writef(spi, REG_AGC_CONFIG_2, MAN_GAIN_CTRL_RX1,
    7064:	01000044 	movi	r4,1
    7068:	001c8300 	call	1c830 <find_first_bit>
    706c:	1007883a 	mov	r3,r2
    7070:	e0bfff17 	ldw	r2,-4(fp)
    7074:	10800543 	ldbu	r2,21(r2)
    7078:	10803fcc 	andi	r2,r2,255
    707c:	d8800015 	stw	r2,0(sp)
    7080:	e13ffb17 	ldw	r4,-20(fp)
    7084:	01403ec4 	movi	r5,251
    7088:	01800044 	movi	r6,1
    708c:	180f883a 	mov	r7,r3
    7090:	000031c0 	call	31c <__ad9361_spi_writef>
		ctrl->mgc_rx1_ctrl_inp_en);
	ad9361_spi_writef(spi, REG_AGC_CONFIG_2, MAN_GAIN_CTRL_RX2,
    7094:	01000084 	movi	r4,2
    7098:	001c8300 	call	1c830 <find_first_bit>
    709c:	1007883a 	mov	r3,r2
    70a0:	e0bfff17 	ldw	r2,-4(fp)
    70a4:	10800583 	ldbu	r2,22(r2)
    70a8:	10803fcc 	andi	r2,r2,255
    70ac:	d8800015 	stw	r2,0(sp)
    70b0:	e13ffb17 	ldw	r4,-20(fp)
    70b4:	01403ec4 	movi	r5,251
    70b8:	01800084 	movi	r6,2
    70bc:	180f883a 	mov	r7,r3
    70c0:	000031c0 	call	31c <__ad9361_spi_writef>
		ctrl->mgc_rx2_ctrl_inp_en);
	ad9361_spi_writef(spi, REG_AGC_CONFIG_2, DIG_GAIN_EN,
    70c4:	01000104 	movi	r4,4
    70c8:	001c8300 	call	1c830 <find_first_bit>
    70cc:	1007883a 	mov	r3,r2
    70d0:	e0bfff17 	ldw	r2,-4(fp)
    70d4:	108004c3 	ldbu	r2,19(r2)
    70d8:	10803fcc 	andi	r2,r2,255
    70dc:	d8800015 	stw	r2,0(sp)
    70e0:	e13ffb17 	ldw	r4,-20(fp)
    70e4:	01403ec4 	movi	r5,251
    70e8:	01800104 	movi	r6,4
    70ec:	180f883a 	mov	r7,r3
    70f0:	000031c0 	call	31c <__ad9361_spi_writef>
		ctrl->dig_gain_en);

	ctrl->adc_ovr_sample_size = clamp_t(uint8_t, ctrl->adc_ovr_sample_size, 1U, 8U);
    70f4:	e0bfff17 	ldw	r2,-4(fp)
    70f8:	10800203 	ldbu	r2,8(r2)
    70fc:	10803fcc 	andi	r2,r2,255
    7100:	10800228 	cmpgeui	r2,r2,8
    7104:	1000051e 	bne	r2,zero,711c <ad9361_gc_setup+0x1a0>
    7108:	e0bfff17 	ldw	r2,-4(fp)
    710c:	10800203 	ldbu	r2,8(r2)
    7110:	10803fcc 	andi	r2,r2,255
    7114:	10800090 	cmplti	r2,r2,2
    7118:	1000071e 	bne	r2,zero,7138 <ad9361_gc_setup+0x1bc>
    711c:	e0bfff17 	ldw	r2,-4(fp)
    7120:	10800203 	ldbu	r2,8(r2)
    7124:	10c03fcc 	andi	r3,r2,255
    7128:	18c00270 	cmpltui	r3,r3,9
    712c:	1800031e 	bne	r3,zero,713c <ad9361_gc_setup+0x1c0>
    7130:	00800204 	movi	r2,8
    7134:	00000106 	br	713c <ad9361_gc_setup+0x1c0>
    7138:	00800044 	movi	r2,1
    713c:	e0ffff17 	ldw	r3,-4(fp)
    7140:	18800205 	stb	r2,8(r3)
	reg = ADC_OVERRANGE_SAMPLE_SIZE(ctrl->adc_ovr_sample_size - 1);
    7144:	e0bfff17 	ldw	r2,-4(fp)
    7148:	10800203 	ldbu	r2,8(r2)
    714c:	10803fcc 	andi	r2,r2,255
    7150:	10bfffc4 	addi	r2,r2,-1
    7154:	108001cc 	andi	r2,r2,7
    7158:	e0bffa15 	stw	r2,-24(fp)

	if (has_split_gt && phy->pdata->split_gt &&
    715c:	00800044 	movi	r2,1
    7160:	10803fcc 	andi	r2,r2,255
    7164:	10002226 	beq	r2,zero,71f0 <ad9361_gc_setup+0x274>
    7168:	e0bffe17 	ldw	r2,-8(fp)
    716c:	10803017 	ldw	r2,192(r2)
    7170:	108000c3 	ldbu	r2,3(r2)
    7174:	10803fcc 	andi	r2,r2,255
    7178:	10001d26 	beq	r2,zero,71f0 <ad9361_gc_setup+0x274>
		(ctrl->mgc_rx1_ctrl_inp_en || ctrl->mgc_rx2_ctrl_inp_en)) {
    717c:	e0bfff17 	ldw	r2,-4(fp)
    7180:	10800543 	ldbu	r2,21(r2)
		ctrl->dig_gain_en);

	ctrl->adc_ovr_sample_size = clamp_t(uint8_t, ctrl->adc_ovr_sample_size, 1U, 8U);
	reg = ADC_OVERRANGE_SAMPLE_SIZE(ctrl->adc_ovr_sample_size - 1);

	if (has_split_gt && phy->pdata->split_gt &&
    7184:	10803fcc 	andi	r2,r2,255
    7188:	1000041e 	bne	r2,zero,719c <ad9361_gc_setup+0x220>
		(ctrl->mgc_rx1_ctrl_inp_en || ctrl->mgc_rx2_ctrl_inp_en)) {
    718c:	e0bfff17 	ldw	r2,-4(fp)
    7190:	10800583 	ldbu	r2,22(r2)
    7194:	10803fcc 	andi	r2,r2,255
    7198:	10001526 	beq	r2,zero,71f0 <ad9361_gc_setup+0x274>
		switch (ctrl->mgc_split_table_ctrl_inp_gain_mode) {
    719c:	e0bfff17 	ldw	r2,-4(fp)
    71a0:	10800643 	ldbu	r2,25(r2)
    71a4:	10803fcc 	andi	r2,r2,255
    71a8:	10c00060 	cmpeqi	r3,r2,1
    71ac:	1800031e 	bne	r3,zero,71bc <ad9361_gc_setup+0x240>
    71b0:	108000a0 	cmpeqi	r2,r2,2
    71b4:	1000061e 	bne	r2,zero,71d0 <ad9361_gc_setup+0x254>
    71b8:	00000906 	br	71e0 <ad9361_gc_setup+0x264>
		case 1:
			reg &= ~INCDEC_LMT_GAIN;
    71bc:	e0fffa17 	ldw	r3,-24(fp)
    71c0:	00bffbc4 	movi	r2,-17
    71c4:	1884703a 	and	r2,r3,r2
    71c8:	e0bffa15 	stw	r2,-24(fp)
			break;
    71cc:	00000806 	br	71f0 <ad9361_gc_setup+0x274>
		case 2:
			reg |= INCDEC_LMT_GAIN;
    71d0:	e0bffa17 	ldw	r2,-24(fp)
    71d4:	10800414 	ori	r2,r2,16
    71d8:	e0bffa15 	stw	r2,-24(fp)
			break;
    71dc:	00000406 	br	71f0 <ad9361_gc_setup+0x274>
		default:
		case 0:
			reg |= USE_AGC_FOR_LMTLPF_GAIN;
    71e0:	e0bffa17 	ldw	r2,-24(fp)
    71e4:	10800214 	ori	r2,r2,8
    71e8:	e0bffa15 	stw	r2,-24(fp)
			break;
    71ec:	0001883a 	nop
		}
	}

	ctrl->mgc_inc_gain_step = clamp_t(uint8_t, ctrl->mgc_inc_gain_step, 1U, 8U);
    71f0:	e0bfff17 	ldw	r2,-4(fp)
    71f4:	108005c3 	ldbu	r2,23(r2)
    71f8:	10803fcc 	andi	r2,r2,255
    71fc:	10800228 	cmpgeui	r2,r2,8
    7200:	1000051e 	bne	r2,zero,7218 <ad9361_gc_setup+0x29c>
    7204:	e0bfff17 	ldw	r2,-4(fp)
    7208:	108005c3 	ldbu	r2,23(r2)
    720c:	10803fcc 	andi	r2,r2,255
    7210:	10800090 	cmplti	r2,r2,2
    7214:	1000071e 	bne	r2,zero,7234 <ad9361_gc_setup+0x2b8>
    7218:	e0bfff17 	ldw	r2,-4(fp)
    721c:	108005c3 	ldbu	r2,23(r2)
    7220:	10c03fcc 	andi	r3,r2,255
    7224:	18c00270 	cmpltui	r3,r3,9
    7228:	1800031e 	bne	r3,zero,7238 <ad9361_gc_setup+0x2bc>
    722c:	00800204 	movi	r2,8
    7230:	00000106 	br	7238 <ad9361_gc_setup+0x2bc>
    7234:	00800044 	movi	r2,1
    7238:	e0ffff17 	ldw	r3,-4(fp)
    723c:	188005c5 	stb	r2,23(r3)
	reg |= MANUAL_INCR_STEP_SIZE(ctrl->mgc_inc_gain_step - 1);
    7240:	e0bfff17 	ldw	r2,-4(fp)
    7244:	108005c3 	ldbu	r2,23(r2)
    7248:	10803fcc 	andi	r2,r2,255
    724c:	10bfffc4 	addi	r2,r2,-1
    7250:	1004917a 	slli	r2,r2,5
    7254:	10803fcc 	andi	r2,r2,255
    7258:	e0fffa17 	ldw	r3,-24(fp)
    725c:	1884b03a 	or	r2,r3,r2
    7260:	e0bffa15 	stw	r2,-24(fp)
	ad9361_spi_write(spi, REG_AGC_CONFIG_3, reg); // Incr Step Size, ADC Overrange Size
    7264:	e13ffb17 	ldw	r4,-20(fp)
    7268:	01403f04 	movi	r5,252
    726c:	e1bffa17 	ldw	r6,-24(fp)
    7270:	00002600 	call	260 <ad9361_spi_write>

	if (has_split_gt && phy->pdata->split_gt) {
    7274:	00800044 	movi	r2,1
    7278:	10803fcc 	andi	r2,r2,255
    727c:	10000826 	beq	r2,zero,72a0 <ad9361_gc_setup+0x324>
    7280:	e0bffe17 	ldw	r2,-8(fp)
    7284:	10803017 	ldw	r2,192(r2)
    7288:	108000c3 	ldbu	r2,3(r2)
    728c:	10803fcc 	andi	r2,r2,255
    7290:	10000326 	beq	r2,zero,72a0 <ad9361_gc_setup+0x324>
		reg = SIZE_SPLIT_TABLE - 1;
    7294:	00800a04 	movi	r2,40
    7298:	e0bffa15 	stw	r2,-24(fp)
    729c:	00000206 	br	72a8 <ad9361_gc_setup+0x32c>
	}
	else {
		reg = SIZE_FULL_TABLE - 1;
    72a0:	00801304 	movi	r2,76
    72a4:	e0bffa15 	stw	r2,-24(fp)
	}
	ad9361_spi_write(spi, REG_MAX_LMT_FULL_GAIN, reg); // Max Full/LMT Gain Table Index
    72a8:	e13ffb17 	ldw	r4,-20(fp)
    72ac:	01403f44 	movi	r5,253
    72b0:	e1bffa17 	ldw	r6,-24(fp)
    72b4:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_RX1_MANUAL_LMT_FULL_GAIN, reg); // Rx1 Full/LMT Gain Index
    72b8:	e13ffb17 	ldw	r4,-20(fp)
    72bc:	01404244 	movi	r5,265
    72c0:	e1bffa17 	ldw	r6,-24(fp)
    72c4:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_RX2_MANUAL_LMT_FULL_GAIN, reg); // Rx2 Full/LMT Gain Index
    72c8:	e13ffb17 	ldw	r4,-20(fp)
    72cc:	01404304 	movi	r5,268
    72d0:	e1bffa17 	ldw	r6,-24(fp)
    72d4:	00002600 	call	260 <ad9361_spi_write>

	ctrl->mgc_dec_gain_step = clamp_t(uint8_t, ctrl->mgc_dec_gain_step, 1U, 8U);
    72d8:	e0bfff17 	ldw	r2,-4(fp)
    72dc:	10800603 	ldbu	r2,24(r2)
    72e0:	10803fcc 	andi	r2,r2,255
    72e4:	10800228 	cmpgeui	r2,r2,8
    72e8:	1000051e 	bne	r2,zero,7300 <ad9361_gc_setup+0x384>
    72ec:	e0bfff17 	ldw	r2,-4(fp)
    72f0:	10800603 	ldbu	r2,24(r2)
    72f4:	10803fcc 	andi	r2,r2,255
    72f8:	10800090 	cmplti	r2,r2,2
    72fc:	1000071e 	bne	r2,zero,731c <ad9361_gc_setup+0x3a0>
    7300:	e0bfff17 	ldw	r2,-4(fp)
    7304:	10800603 	ldbu	r2,24(r2)
    7308:	10c03fcc 	andi	r3,r2,255
    730c:	18c00270 	cmpltui	r3,r3,9
    7310:	1800031e 	bne	r3,zero,7320 <ad9361_gc_setup+0x3a4>
    7314:	00800204 	movi	r2,8
    7318:	00000106 	br	7320 <ad9361_gc_setup+0x3a4>
    731c:	00800044 	movi	r2,1
    7320:	e0ffff17 	ldw	r3,-4(fp)
    7324:	18800605 	stb	r2,24(r3)
	reg = MANUAL_CTRL_IN_DECR_GAIN_STP_SIZE(ctrl->mgc_dec_gain_step);
    7328:	e0bfff17 	ldw	r2,-4(fp)
    732c:	10800603 	ldbu	r2,24(r2)
    7330:	10803fcc 	andi	r2,r2,255
    7334:	1004917a 	slli	r2,r2,5
    7338:	10803fcc 	andi	r2,r2,255
    733c:	e0bffa15 	stw	r2,-24(fp)
	ad9361_spi_write(spi, REG_PEAK_WAIT_TIME, reg); // Decr Step Size, Peak Overload Time
    7340:	e13ffb17 	ldw	r4,-20(fp)
    7344:	01403f84 	movi	r5,254
    7348:	e1bffa17 	ldw	r6,-24(fp)
    734c:	00002600 	call	260 <ad9361_spi_write>

	if (ctrl->dig_gain_en)
    7350:	e0bfff17 	ldw	r2,-4(fp)
    7354:	108004c3 	ldbu	r2,19(r2)
    7358:	10803fcc 	andi	r2,r2,255
    735c:	10000e26 	beq	r2,zero,7398 <ad9361_gc_setup+0x41c>
		ad9361_spi_write(spi, REG_DIGITAL_GAIN,
		MAXIMUM_DIGITAL_GAIN(ctrl->max_dig_gain) |
    7360:	e0bfff17 	ldw	r2,-4(fp)
    7364:	10800503 	ldbu	r2,20(r2)
    7368:	10803fcc 	andi	r2,r2,255
    736c:	10c007cc 	andi	r3,r2,31
		DIG_GAIN_STP_SIZE(ctrl->dig_gain_step_size));
    7370:	e0bfff17 	ldw	r2,-4(fp)
    7374:	10800ac3 	ldbu	r2,43(r2)
    7378:	10803fcc 	andi	r2,r2,255
    737c:	1004917a 	slli	r2,r2,5
    7380:	10803fcc 	andi	r2,r2,255
	reg = MANUAL_CTRL_IN_DECR_GAIN_STP_SIZE(ctrl->mgc_dec_gain_step);
	ad9361_spi_write(spi, REG_PEAK_WAIT_TIME, reg); // Decr Step Size, Peak Overload Time

	if (ctrl->dig_gain_en)
		ad9361_spi_write(spi, REG_DIGITAL_GAIN,
		MAXIMUM_DIGITAL_GAIN(ctrl->max_dig_gain) |
    7384:	1884b03a 	or	r2,r3,r2
	ctrl->mgc_dec_gain_step = clamp_t(uint8_t, ctrl->mgc_dec_gain_step, 1U, 8U);
	reg = MANUAL_CTRL_IN_DECR_GAIN_STP_SIZE(ctrl->mgc_dec_gain_step);
	ad9361_spi_write(spi, REG_PEAK_WAIT_TIME, reg); // Decr Step Size, Peak Overload Time

	if (ctrl->dig_gain_en)
		ad9361_spi_write(spi, REG_DIGITAL_GAIN,
    7388:	e13ffb17 	ldw	r4,-20(fp)
    738c:	01404004 	movi	r5,256
    7390:	100d883a 	mov	r6,r2
    7394:	00002600 	call	260 <ad9361_spi_write>
		MAXIMUM_DIGITAL_GAIN(ctrl->max_dig_gain) |
		DIG_GAIN_STP_SIZE(ctrl->dig_gain_step_size));

	if (ctrl->adc_large_overload_thresh >= ctrl->adc_small_overload_thresh) {
    7398:	e0bfff17 	ldw	r2,-4(fp)
    739c:	10c00283 	ldbu	r3,10(r2)
    73a0:	e0bfff17 	ldw	r2,-4(fp)
    73a4:	10800243 	ldbu	r2,9(r2)
    73a8:	18c03fcc 	andi	r3,r3,255
    73ac:	10803fcc 	andi	r2,r2,255
    73b0:	18800f36 	bltu	r3,r2,73f0 <ad9361_gc_setup+0x474>
		ad9361_spi_write(spi, REG_ADC_SMALL_OVERLOAD_THRESH,
			ctrl->adc_small_overload_thresh); // ADC Small Overload Threshold
    73b4:	e0bfff17 	ldw	r2,-4(fp)
    73b8:	10800243 	ldbu	r2,9(r2)
		ad9361_spi_write(spi, REG_DIGITAL_GAIN,
		MAXIMUM_DIGITAL_GAIN(ctrl->max_dig_gain) |
		DIG_GAIN_STP_SIZE(ctrl->dig_gain_step_size));

	if (ctrl->adc_large_overload_thresh >= ctrl->adc_small_overload_thresh) {
		ad9361_spi_write(spi, REG_ADC_SMALL_OVERLOAD_THRESH,
    73bc:	10803fcc 	andi	r2,r2,255
    73c0:	e13ffb17 	ldw	r4,-20(fp)
    73c4:	01404104 	movi	r5,260
    73c8:	100d883a 	mov	r6,r2
    73cc:	00002600 	call	260 <ad9361_spi_write>
			ctrl->adc_small_overload_thresh); // ADC Small Overload Threshold
		ad9361_spi_write(spi, REG_ADC_LARGE_OVERLOAD_THRESH,
			ctrl->adc_large_overload_thresh); // ADC Large Overload Threshold
    73d0:	e0bfff17 	ldw	r2,-4(fp)
    73d4:	10800283 	ldbu	r2,10(r2)
		DIG_GAIN_STP_SIZE(ctrl->dig_gain_step_size));

	if (ctrl->adc_large_overload_thresh >= ctrl->adc_small_overload_thresh) {
		ad9361_spi_write(spi, REG_ADC_SMALL_OVERLOAD_THRESH,
			ctrl->adc_small_overload_thresh); // ADC Small Overload Threshold
		ad9361_spi_write(spi, REG_ADC_LARGE_OVERLOAD_THRESH,
    73d8:	10803fcc 	andi	r2,r2,255
    73dc:	e13ffb17 	ldw	r4,-20(fp)
    73e0:	01404144 	movi	r5,261
    73e4:	100d883a 	mov	r6,r2
    73e8:	00002600 	call	260 <ad9361_spi_write>
    73ec:	00000e06 	br	7428 <ad9361_gc_setup+0x4ac>
			ctrl->adc_large_overload_thresh); // ADC Large Overload Threshold
	}
	else {
		ad9361_spi_write(spi, REG_ADC_SMALL_OVERLOAD_THRESH,
			ctrl->adc_large_overload_thresh); // ADC Small Overload Threshold
    73f0:	e0bfff17 	ldw	r2,-4(fp)
    73f4:	10800283 	ldbu	r2,10(r2)
			ctrl->adc_small_overload_thresh); // ADC Small Overload Threshold
		ad9361_spi_write(spi, REG_ADC_LARGE_OVERLOAD_THRESH,
			ctrl->adc_large_overload_thresh); // ADC Large Overload Threshold
	}
	else {
		ad9361_spi_write(spi, REG_ADC_SMALL_OVERLOAD_THRESH,
    73f8:	10803fcc 	andi	r2,r2,255
    73fc:	e13ffb17 	ldw	r4,-20(fp)
    7400:	01404104 	movi	r5,260
    7404:	100d883a 	mov	r6,r2
    7408:	00002600 	call	260 <ad9361_spi_write>
			ctrl->adc_large_overload_thresh); // ADC Small Overload Threshold
		ad9361_spi_write(spi, REG_ADC_LARGE_OVERLOAD_THRESH,
			ctrl->adc_small_overload_thresh); // ADC Large Overload Threshold
    740c:	e0bfff17 	ldw	r2,-4(fp)
    7410:	10800243 	ldbu	r2,9(r2)
			ctrl->adc_large_overload_thresh); // ADC Large Overload Threshold
	}
	else {
		ad9361_spi_write(spi, REG_ADC_SMALL_OVERLOAD_THRESH,
			ctrl->adc_large_overload_thresh); // ADC Small Overload Threshold
		ad9361_spi_write(spi, REG_ADC_LARGE_OVERLOAD_THRESH,
    7414:	10803fcc 	andi	r2,r2,255
    7418:	e13ffb17 	ldw	r4,-20(fp)
    741c:	01404144 	movi	r5,261
    7420:	100d883a 	mov	r6,r2
    7424:	00002600 	call	260 <ad9361_spi_write>
			ctrl->adc_small_overload_thresh); // ADC Large Overload Threshold
	}

	reg = (ctrl->lmt_overload_high_thresh / 16) - 1;
    7428:	e0bfff17 	ldw	r2,-4(fp)
    742c:	1080030b 	ldhu	r2,12(r2)
    7430:	10bfffcc 	andi	r2,r2,65535
    7434:	1004d13a 	srli	r2,r2,4
    7438:	10bfffcc 	andi	r2,r2,65535
    743c:	10bfffc4 	addi	r2,r2,-1
    7440:	e0bffa15 	stw	r2,-24(fp)
	reg = clamp(reg, 0U, 63U);
    7444:	e0bffa17 	ldw	r2,-24(fp)
    7448:	10000526 	beq	r2,zero,7460 <ad9361_gc_setup+0x4e4>
    744c:	e0bffa17 	ldw	r2,-24(fp)
    7450:	10c01030 	cmpltui	r3,r2,64
    7454:	1800031e 	bne	r3,zero,7464 <ad9361_gc_setup+0x4e8>
    7458:	00800fc4 	movi	r2,63
    745c:	00000106 	br	7464 <ad9361_gc_setup+0x4e8>
    7460:	0005883a 	mov	r2,zero
    7464:	e0bffa15 	stw	r2,-24(fp)
	ad9361_spi_write(spi, REG_LARGE_LMT_OVERLOAD_THRESH, reg);
    7468:	e13ffb17 	ldw	r4,-20(fp)
    746c:	01404204 	movi	r5,264
    7470:	e1bffa17 	ldw	r6,-24(fp)
    7474:	00002600 	call	260 <ad9361_spi_write>
	reg = (ctrl->lmt_overload_low_thresh / 16) - 1;
    7478:	e0bfff17 	ldw	r2,-4(fp)
    747c:	1080038b 	ldhu	r2,14(r2)
    7480:	10bfffcc 	andi	r2,r2,65535
    7484:	1004d13a 	srli	r2,r2,4
    7488:	10bfffcc 	andi	r2,r2,65535
    748c:	10bfffc4 	addi	r2,r2,-1
    7490:	e0bffa15 	stw	r2,-24(fp)
	reg = clamp(reg, 0U, 63U);
    7494:	e0bffa17 	ldw	r2,-24(fp)
    7498:	10000526 	beq	r2,zero,74b0 <ad9361_gc_setup+0x534>
    749c:	e0bffa17 	ldw	r2,-24(fp)
    74a0:	10c01030 	cmpltui	r3,r2,64
    74a4:	1800031e 	bne	r3,zero,74b4 <ad9361_gc_setup+0x538>
    74a8:	00800fc4 	movi	r2,63
    74ac:	00000106 	br	74b4 <ad9361_gc_setup+0x538>
    74b0:	0005883a 	mov	r2,zero
    74b4:	e0bffa15 	stw	r2,-24(fp)
	ad9361_spi_writef(spi, REG_SMALL_LMT_OVERLOAD_THRESH,
    74b8:	01000fc4 	movi	r4,63
    74bc:	001c8300 	call	1c830 <find_first_bit>
    74c0:	1007883a 	mov	r3,r2
    74c4:	e0bffa17 	ldw	r2,-24(fp)
    74c8:	d8800015 	stw	r2,0(sp)
    74cc:	e13ffb17 	ldw	r4,-20(fp)
    74d0:	014041c4 	movi	r5,263
    74d4:	01800fc4 	movi	r6,63
    74d8:	180f883a 	mov	r7,r3
    74dc:	000031c0 	call	31c <__ad9361_spi_writef>
		SMALL_LMT_OVERLOAD_THRESH(~0), reg);

	if (has_split_gt && phy->pdata->split_gt) {
    74e0:	00800044 	movi	r2,1
    74e4:	10803fcc 	andi	r2,r2,255
    74e8:	10001126 	beq	r2,zero,7530 <ad9361_gc_setup+0x5b4>
    74ec:	e0bffe17 	ldw	r2,-8(fp)
    74f0:	10803017 	ldw	r2,192(r2)
    74f4:	108000c3 	ldbu	r2,3(r2)
    74f8:	10803fcc 	andi	r2,r2,255
    74fc:	10000c26 	beq	r2,zero,7530 <ad9361_gc_setup+0x5b4>
		/* REVIST */
		ad9361_spi_write(spi, REG_RX1_MANUAL_LPF_GAIN, 0x58); // Rx1 LPF Gain Index
    7500:	e13ffb17 	ldw	r4,-20(fp)
    7504:	01404284 	movi	r5,266
    7508:	01801604 	movi	r6,88
    750c:	00002600 	call	260 <ad9361_spi_write>
		ad9361_spi_write(spi, REG_RX2_MANUAL_LPF_GAIN, 0x18); // Rx2 LPF Gain Index
    7510:	e13ffb17 	ldw	r4,-20(fp)
    7514:	01404344 	movi	r5,269
    7518:	01800604 	movi	r6,24
    751c:	00002600 	call	260 <ad9361_spi_write>
		ad9361_spi_write(spi, REG_FAST_INITIAL_LMT_GAIN_LIMIT, 0x27); // Initial LMT Gain Limit
    7520:	e13ffb17 	ldw	r4,-20(fp)
    7524:	01404684 	movi	r5,282
    7528:	018009c4 	movi	r6,39
    752c:	00002600 	call	260 <ad9361_spi_write>
	}

	ad9361_spi_write(spi, REG_RX1_MANUAL_DIGITALFORCED_GAIN, 0x00); // Rx1 Digital Gain Index
    7530:	e13ffb17 	ldw	r4,-20(fp)
    7534:	014042c4 	movi	r5,267
    7538:	000d883a 	mov	r6,zero
    753c:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_RX2_MANUAL_DIGITALFORCED_GAIN, 0x00); // Rx2 Digital Gain Index
    7540:	e13ffb17 	ldw	r4,-20(fp)
    7544:	01404384 	movi	r5,270
    7548:	000d883a 	mov	r6,zero
    754c:	00002600 	call	260 <ad9361_spi_write>

	reg = clamp_t(uint8_t, ctrl->low_power_thresh, 0U, 64U) * 2;
    7550:	e0bfff17 	ldw	r2,-4(fp)
    7554:	10800483 	ldbu	r2,18(r2)
    7558:	10803fcc 	andi	r2,r2,255
    755c:	10801028 	cmpgeui	r2,r2,64
    7560:	1000041e 	bne	r2,zero,7574 <ad9361_gc_setup+0x5f8>
    7564:	e0bfff17 	ldw	r2,-4(fp)
    7568:	10800483 	ldbu	r2,18(r2)
    756c:	10803fcc 	andi	r2,r2,255
    7570:	00800c0e 	bge	zero,r2,75a4 <ad9361_gc_setup+0x628>
    7574:	e0bfff17 	ldw	r2,-4(fp)
    7578:	10800483 	ldbu	r2,18(r2)
    757c:	10803fcc 	andi	r2,r2,255
    7580:	10801028 	cmpgeui	r2,r2,64
    7584:	1000051e 	bne	r2,zero,759c <ad9361_gc_setup+0x620>
    7588:	e0bfff17 	ldw	r2,-4(fp)
    758c:	10800483 	ldbu	r2,18(r2)
    7590:	10803fcc 	andi	r2,r2,255
    7594:	1085883a 	add	r2,r2,r2
    7598:	00000306 	br	75a8 <ad9361_gc_setup+0x62c>
    759c:	00802004 	movi	r2,128
    75a0:	00000106 	br	75a8 <ad9361_gc_setup+0x62c>
    75a4:	0005883a 	mov	r2,zero
    75a8:	e0bffa15 	stw	r2,-24(fp)
	ad9361_spi_write(spi, REG_FAST_LOW_POWER_THRESH, reg); // Low Power Threshold
    75ac:	e13ffb17 	ldw	r4,-20(fp)
    75b0:	01404504 	movi	r5,276
    75b4:	e1bffa17 	ldw	r6,-24(fp)
    75b8:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_TX_SYMBOL_ATTEN_CONFIG, 0x00); // Tx Symbol Gain Control
    75bc:	e13ffb17 	ldw	r4,-20(fp)
    75c0:	01402044 	movi	r5,129
    75c4:	000d883a 	mov	r6,zero
    75c8:	00002600 	call	260 <ad9361_spi_write>

	ad9361_spi_writef(spi, REG_DEC_POWER_MEASURE_DURATION_0,
    75cc:	01001004 	movi	r4,64
    75d0:	001c8300 	call	1c830 <find_first_bit>
    75d4:	1007883a 	mov	r3,r2
    75d8:	00800044 	movi	r2,1
    75dc:	d8800015 	stw	r2,0(sp)
    75e0:	e13ffb17 	ldw	r4,-20(fp)
    75e4:	01405704 	movi	r5,348
    75e8:	01801004 	movi	r6,64
    75ec:	180f883a 	mov	r7,r3
    75f0:	000031c0 	call	31c <__ad9361_spi_writef>
		USE_HB1_OUT_FOR_DEC_PWR_MEAS, 1); // Power Measurement Duration

	ad9361_spi_writef(spi, REG_DEC_POWER_MEASURE_DURATION_0,
    75f4:	01000804 	movi	r4,32
    75f8:	001c8300 	call	1c830 <find_first_bit>
    75fc:	1007883a 	mov	r3,r2
    7600:	00800044 	movi	r2,1
    7604:	d8800015 	stw	r2,0(sp)
    7608:	e13ffb17 	ldw	r4,-20(fp)
    760c:	01405704 	movi	r5,348
    7610:	01800804 	movi	r6,32
    7614:	180f883a 	mov	r7,r3
    7618:	000031c0 	call	31c <__ad9361_spi_writef>
		ENABLE_DEC_PWR_MEAS, 1); // Power Measurement Duration

	if (ctrl->rx1_mode == RF_GAIN_FASTATTACK_AGC ||
    761c:	e0bfff17 	ldw	r2,-4(fp)
    7620:	10800017 	ldw	r2,0(r2)
    7624:	10800060 	cmpeqi	r2,r2,1
    7628:	1000041e 	bne	r2,zero,763c <ad9361_gc_setup+0x6c0>
		ctrl->rx2_mode == RF_GAIN_FASTATTACK_AGC)
    762c:	e0bfff17 	ldw	r2,-4(fp)
    7630:	10800117 	ldw	r2,4(r2)
		USE_HB1_OUT_FOR_DEC_PWR_MEAS, 1); // Power Measurement Duration

	ad9361_spi_writef(spi, REG_DEC_POWER_MEASURE_DURATION_0,
		ENABLE_DEC_PWR_MEAS, 1); // Power Measurement Duration

	if (ctrl->rx1_mode == RF_GAIN_FASTATTACK_AGC ||
    7634:	10800058 	cmpnei	r2,r2,1
    7638:	1000071e 	bne	r2,zero,7658 <ad9361_gc_setup+0x6dc>
		ctrl->rx2_mode == RF_GAIN_FASTATTACK_AGC)
		reg = ilog2(ctrl->f_agc_dec_pow_measuremnt_duration / 16);
    763c:	e0bfff17 	ldw	r2,-4(fp)
    7640:	10800e17 	ldw	r2,56(r2)
    7644:	1004d13a 	srli	r2,r2,4
    7648:	1009883a 	mov	r4,r2
    764c:	001c5b40 	call	1c5b4 <ilog2>
    7650:	e0bffa15 	stw	r2,-24(fp)
    7654:	00000806 	br	7678 <ad9361_gc_setup+0x6fc>
	else
		reg = ilog2(ctrl->dec_pow_measuremnt_duration / 16);
    7658:	e0bfff17 	ldw	r2,-4(fp)
    765c:	1080040b 	ldhu	r2,16(r2)
    7660:	10bfffcc 	andi	r2,r2,65535
    7664:	1004d13a 	srli	r2,r2,4
    7668:	10bfffcc 	andi	r2,r2,65535
    766c:	1009883a 	mov	r4,r2
    7670:	001c5b40 	call	1c5b4 <ilog2>
    7674:	e0bffa15 	stw	r2,-24(fp)

	ad9361_spi_writef(spi, REG_DEC_POWER_MEASURE_DURATION_0,
    7678:	010003c4 	movi	r4,15
    767c:	001c8300 	call	1c830 <find_first_bit>
    7680:	1007883a 	mov	r3,r2
    7684:	e0bffa17 	ldw	r2,-24(fp)
    7688:	d8800015 	stw	r2,0(sp)
    768c:	e13ffb17 	ldw	r4,-20(fp)
    7690:	01405704 	movi	r5,348
    7694:	018003c4 	movi	r6,15
    7698:	180f883a 	mov	r7,r3
    769c:	000031c0 	call	31c <__ad9361_spi_writef>
		DEC_POWER_MEASUREMENT_DURATION(~0), reg); // Power Measurement Duration

	/* AGC */

	tmp1 = reg = clamp_t(uint8_t, ctrl->agc_inner_thresh_high, 0U, 127U);
    76a0:	e0bfff17 	ldw	r2,-4(fp)
    76a4:	10800743 	ldbu	r2,29(r2)
    76a8:	10803fcc 	andi	r2,r2,255
    76ac:	10801fe8 	cmpgeui	r2,r2,127
    76b0:	1000041e 	bne	r2,zero,76c4 <ad9361_gc_setup+0x748>
    76b4:	e0bfff17 	ldw	r2,-4(fp)
    76b8:	10800743 	ldbu	r2,29(r2)
    76bc:	10803fcc 	andi	r2,r2,255
    76c0:	0080080e 	bge	zero,r2,76e4 <ad9361_gc_setup+0x768>
    76c4:	e0bfff17 	ldw	r2,-4(fp)
    76c8:	10800743 	ldbu	r2,29(r2)
    76cc:	10c03fcc 	andi	r3,r2,255
    76d0:	18c02030 	cmpltui	r3,r3,128
    76d4:	1800011e 	bne	r3,zero,76dc <ad9361_gc_setup+0x760>
    76d8:	00801fc4 	movi	r2,127
    76dc:	10803fcc 	andi	r2,r2,255
    76e0:	00000106 	br	76e8 <ad9361_gc_setup+0x76c>
    76e4:	0005883a 	mov	r2,zero
    76e8:	e0bffa15 	stw	r2,-24(fp)
    76ec:	e0bffa17 	ldw	r2,-24(fp)
    76f0:	e0bffc15 	stw	r2,-16(fp)
	ad9361_spi_writef(spi, REG_AGC_LOCK_LEVEL,
    76f4:	01001fc4 	movi	r4,127
    76f8:	001c8300 	call	1c830 <find_first_bit>
    76fc:	1007883a 	mov	r3,r2
    7700:	e0bffa17 	ldw	r2,-24(fp)
    7704:	d8800015 	stw	r2,0(sp)
    7708:	e13ffb17 	ldw	r4,-20(fp)
    770c:	01404044 	movi	r5,257
    7710:	01801fc4 	movi	r6,127
    7714:	180f883a 	mov	r7,r3
    7718:	000031c0 	call	31c <__ad9361_spi_writef>
		AGC_LOCK_LEVEL_FAST_AGC_INNER_HIGH_THRESH_SLOW(~0),
		reg);

	tmp2 = reg = clamp_t(uint8_t, ctrl->agc_inner_thresh_low, 0U, 127U);
    771c:	e0bfff17 	ldw	r2,-4(fp)
    7720:	108007c3 	ldbu	r2,31(r2)
    7724:	10803fcc 	andi	r2,r2,255
    7728:	10801fe8 	cmpgeui	r2,r2,127
    772c:	1000041e 	bne	r2,zero,7740 <ad9361_gc_setup+0x7c4>
    7730:	e0bfff17 	ldw	r2,-4(fp)
    7734:	108007c3 	ldbu	r2,31(r2)
    7738:	10803fcc 	andi	r2,r2,255
    773c:	0080080e 	bge	zero,r2,7760 <ad9361_gc_setup+0x7e4>
    7740:	e0bfff17 	ldw	r2,-4(fp)
    7744:	108007c3 	ldbu	r2,31(r2)
    7748:	10c03fcc 	andi	r3,r2,255
    774c:	18c02030 	cmpltui	r3,r3,128
    7750:	1800011e 	bne	r3,zero,7758 <ad9361_gc_setup+0x7dc>
    7754:	00801fc4 	movi	r2,127
    7758:	10803fcc 	andi	r2,r2,255
    775c:	00000106 	br	7764 <ad9361_gc_setup+0x7e8>
    7760:	0005883a 	mov	r2,zero
    7764:	e0bffa15 	stw	r2,-24(fp)
    7768:	e0bffa17 	ldw	r2,-24(fp)
    776c:	e0bffd15 	stw	r2,-12(fp)
	reg |= (ctrl->adc_lmt_small_overload_prevent_gain_inc ?
    7770:	e0bfff17 	ldw	r2,-4(fp)
    7774:	10800983 	ldbu	r2,38(r2)
    7778:	10803fcc 	andi	r2,r2,255
    777c:	10000226 	beq	r2,zero,7788 <ad9361_gc_setup+0x80c>
    7780:	00802004 	movi	r2,128
    7784:	00000106 	br	778c <ad9361_gc_setup+0x810>
    7788:	0005883a 	mov	r2,zero
    778c:	e0fffa17 	ldw	r3,-24(fp)
    7790:	1884b03a 	or	r2,r3,r2
    7794:	e0bffa15 	stw	r2,-24(fp)
	PREVENT_GAIN_INC : 0);
	ad9361_spi_write(spi, REG_AGC_INNER_LOW_THRESH, reg);
    7798:	e13ffb17 	ldw	r4,-20(fp)
    779c:	01404804 	movi	r5,288
    77a0:	e1bffa17 	ldw	r6,-24(fp)
    77a4:	00002600 	call	260 <ad9361_spi_write>

	reg = AGC_OUTER_HIGH_THRESH(tmp1 - ctrl->agc_outer_thresh_high) |
    77a8:	e0bfff17 	ldw	r2,-4(fp)
    77ac:	108006c3 	ldbu	r2,27(r2)
    77b0:	10803fcc 	andi	r2,r2,255
    77b4:	e0fffc17 	ldw	r3,-16(fp)
    77b8:	1885c83a 	sub	r2,r3,r2
    77bc:	1004913a 	slli	r2,r2,4
    77c0:	10c03fcc 	andi	r3,r2,255
		AGC_OUTER_LOW_THRESH(ctrl->agc_outer_thresh_low - tmp2);
    77c4:	e0bfff17 	ldw	r2,-4(fp)
    77c8:	10800843 	ldbu	r2,33(r2)
    77cc:	11003fcc 	andi	r4,r2,255
    77d0:	e0bffd17 	ldw	r2,-12(fp)
    77d4:	2085c83a 	sub	r2,r4,r2
    77d8:	108003cc 	andi	r2,r2,15
	tmp2 = reg = clamp_t(uint8_t, ctrl->agc_inner_thresh_low, 0U, 127U);
	reg |= (ctrl->adc_lmt_small_overload_prevent_gain_inc ?
	PREVENT_GAIN_INC : 0);
	ad9361_spi_write(spi, REG_AGC_INNER_LOW_THRESH, reg);

	reg = AGC_OUTER_HIGH_THRESH(tmp1 - ctrl->agc_outer_thresh_high) |
    77dc:	1884b03a 	or	r2,r3,r2
    77e0:	e0bffa15 	stw	r2,-24(fp)
		AGC_OUTER_LOW_THRESH(ctrl->agc_outer_thresh_low - tmp2);
	ad9361_spi_write(spi, REG_OUTER_POWER_THRESHS, reg);
    77e4:	e13ffb17 	ldw	r4,-20(fp)
    77e8:	01404a44 	movi	r5,297
    77ec:	e1bffa17 	ldw	r6,-24(fp)
    77f0:	00002600 	call	260 <ad9361_spi_write>

	reg = AGC_OUTER_HIGH_THRESH_EXED_STP_SIZE(ctrl->agc_outer_thresh_high_dec_steps) |
    77f4:	e0bfff17 	ldw	r2,-4(fp)
    77f8:	10800703 	ldbu	r2,28(r2)
    77fc:	10803fcc 	andi	r2,r2,255
    7800:	1004913a 	slli	r2,r2,4
    7804:	10c03fcc 	andi	r3,r2,255
		AGC_OUTER_LOW_THRESH_EXED_STP_SIZE(ctrl->agc_outer_thresh_low_inc_steps);
    7808:	e0bfff17 	ldw	r2,-4(fp)
    780c:	10800883 	ldbu	r2,34(r2)
    7810:	10803fcc 	andi	r2,r2,255
    7814:	108003cc 	andi	r2,r2,15

	reg = AGC_OUTER_HIGH_THRESH(tmp1 - ctrl->agc_outer_thresh_high) |
		AGC_OUTER_LOW_THRESH(ctrl->agc_outer_thresh_low - tmp2);
	ad9361_spi_write(spi, REG_OUTER_POWER_THRESHS, reg);

	reg = AGC_OUTER_HIGH_THRESH_EXED_STP_SIZE(ctrl->agc_outer_thresh_high_dec_steps) |
    7818:	1884b03a 	or	r2,r3,r2
    781c:	e0bffa15 	stw	r2,-24(fp)
		AGC_OUTER_LOW_THRESH_EXED_STP_SIZE(ctrl->agc_outer_thresh_low_inc_steps);
	ad9361_spi_write(spi, REG_GAIN_STP_2, reg);
    7820:	e13ffb17 	ldw	r4,-20(fp)
    7824:	01404a84 	movi	r5,298
    7828:	e1bffa17 	ldw	r6,-24(fp)
    782c:	00002600 	call	260 <ad9361_spi_write>

	reg = ((ctrl->immed_gain_change_if_large_adc_overload) ?
    7830:	e0bfff17 	ldw	r2,-4(fp)
    7834:	10800d03 	ldbu	r2,52(r2)
	IMMED_GAIN_CHANGE_IF_LG_ADC_OVERLOAD : 0) |
    7838:	10803fcc 	andi	r2,r2,255
    783c:	10000226 	beq	r2,zero,7848 <ad9361_gc_setup+0x8cc>
    7840:	00c00204 	movi	r3,8
    7844:	00000106 	br	784c <ad9361_gc_setup+0x8d0>
    7848:	0007883a 	mov	r3,zero
										   ((ctrl->immed_gain_change_if_large_lmt_overload) ?
    784c:	e0bfff17 	ldw	r2,-4(fp)
    7850:	10800d43 	ldbu	r2,53(r2)
									   IMMED_GAIN_CHANGE_IF_LG_LMT_OVERLOAD : 0) |
    7854:	10803fcc 	andi	r2,r2,255
    7858:	10000226 	beq	r2,zero,7864 <ad9361_gc_setup+0x8e8>
    785c:	00802004 	movi	r2,128
    7860:	00000106 	br	7868 <ad9361_gc_setup+0x8ec>
    7864:	0005883a 	mov	r2,zero
	reg = AGC_OUTER_HIGH_THRESH_EXED_STP_SIZE(ctrl->agc_outer_thresh_high_dec_steps) |
		AGC_OUTER_LOW_THRESH_EXED_STP_SIZE(ctrl->agc_outer_thresh_low_inc_steps);
	ad9361_spi_write(spi, REG_GAIN_STP_2, reg);

	reg = ((ctrl->immed_gain_change_if_large_adc_overload) ?
	IMMED_GAIN_CHANGE_IF_LG_ADC_OVERLOAD : 0) |
    7868:	1886b03a 	or	r3,r3,r2
										   ((ctrl->immed_gain_change_if_large_lmt_overload) ?
									   IMMED_GAIN_CHANGE_IF_LG_LMT_OVERLOAD : 0) |
																			  AGC_INNER_HIGH_THRESH_EXED_STP_SIZE(ctrl->agc_inner_thresh_high_dec_steps) |
    786c:	e0bfff17 	ldw	r2,-4(fp)
    7870:	10800783 	ldbu	r2,30(r2)
    7874:	10803fcc 	andi	r2,r2,255
    7878:	108001cc 	andi	r2,r2,7
    787c:	1004913a 	slli	r2,r2,4
	ad9361_spi_write(spi, REG_GAIN_STP_2, reg);

	reg = ((ctrl->immed_gain_change_if_large_adc_overload) ?
	IMMED_GAIN_CHANGE_IF_LG_ADC_OVERLOAD : 0) |
										   ((ctrl->immed_gain_change_if_large_lmt_overload) ?
									   IMMED_GAIN_CHANGE_IF_LG_LMT_OVERLOAD : 0) |
    7880:	1886b03a 	or	r3,r3,r2
																			  AGC_INNER_HIGH_THRESH_EXED_STP_SIZE(ctrl->agc_inner_thresh_high_dec_steps) |
																			  AGC_INNER_LOW_THRESH_EXED_STP_SIZE(ctrl->agc_inner_thresh_low_inc_steps);
    7884:	e0bfff17 	ldw	r2,-4(fp)
    7888:	10800803 	ldbu	r2,32(r2)
    788c:	10803fcc 	andi	r2,r2,255
    7890:	108001cc 	andi	r2,r2,7

	reg = ((ctrl->immed_gain_change_if_large_adc_overload) ?
	IMMED_GAIN_CHANGE_IF_LG_ADC_OVERLOAD : 0) |
										   ((ctrl->immed_gain_change_if_large_lmt_overload) ?
									   IMMED_GAIN_CHANGE_IF_LG_LMT_OVERLOAD : 0) |
																			  AGC_INNER_HIGH_THRESH_EXED_STP_SIZE(ctrl->agc_inner_thresh_high_dec_steps) |
    7894:	1884b03a 	or	r2,r3,r2

	reg = AGC_OUTER_HIGH_THRESH_EXED_STP_SIZE(ctrl->agc_outer_thresh_high_dec_steps) |
		AGC_OUTER_LOW_THRESH_EXED_STP_SIZE(ctrl->agc_outer_thresh_low_inc_steps);
	ad9361_spi_write(spi, REG_GAIN_STP_2, reg);

	reg = ((ctrl->immed_gain_change_if_large_adc_overload) ?
    7898:	e0bffa15 	stw	r2,-24(fp)
	IMMED_GAIN_CHANGE_IF_LG_ADC_OVERLOAD : 0) |
										   ((ctrl->immed_gain_change_if_large_lmt_overload) ?
									   IMMED_GAIN_CHANGE_IF_LG_LMT_OVERLOAD : 0) |
																			  AGC_INNER_HIGH_THRESH_EXED_STP_SIZE(ctrl->agc_inner_thresh_high_dec_steps) |
																			  AGC_INNER_LOW_THRESH_EXED_STP_SIZE(ctrl->agc_inner_thresh_low_inc_steps);
	ad9361_spi_write(spi, REG_GAIN_STP1, reg);
    789c:	e13ffb17 	ldw	r4,-20(fp)
    78a0:	014048c4 	movi	r5,291
    78a4:	e1bffa17 	ldw	r6,-24(fp)
    78a8:	00002600 	call	260 <ad9361_spi_write>

	reg = LARGE_ADC_OVERLOAD_EXED_COUNTER(ctrl->adc_large_overload_exceed_counter) |
    78ac:	e0bfff17 	ldw	r2,-4(fp)
    78b0:	10800903 	ldbu	r2,36(r2)
    78b4:	10803fcc 	andi	r2,r2,255
    78b8:	1004913a 	slli	r2,r2,4
    78bc:	10c03fcc 	andi	r3,r2,255
		SMALL_ADC_OVERLOAD_EXED_COUNTER(ctrl->adc_small_overload_exceed_counter);
    78c0:	e0bfff17 	ldw	r2,-4(fp)
    78c4:	108008c3 	ldbu	r2,35(r2)
    78c8:	10803fcc 	andi	r2,r2,255
    78cc:	108003cc 	andi	r2,r2,15
									   IMMED_GAIN_CHANGE_IF_LG_LMT_OVERLOAD : 0) |
																			  AGC_INNER_HIGH_THRESH_EXED_STP_SIZE(ctrl->agc_inner_thresh_high_dec_steps) |
																			  AGC_INNER_LOW_THRESH_EXED_STP_SIZE(ctrl->agc_inner_thresh_low_inc_steps);
	ad9361_spi_write(spi, REG_GAIN_STP1, reg);

	reg = LARGE_ADC_OVERLOAD_EXED_COUNTER(ctrl->adc_large_overload_exceed_counter) |
    78d0:	1884b03a 	or	r2,r3,r2
    78d4:	e0bffa15 	stw	r2,-24(fp)
		SMALL_ADC_OVERLOAD_EXED_COUNTER(ctrl->adc_small_overload_exceed_counter);
	ad9361_spi_write(spi, REG_ADC_OVERLOAD_COUNTERS, reg);
    78d8:	e13ffb17 	ldw	r4,-20(fp)
    78dc:	01404884 	movi	r5,290
    78e0:	e1bffa17 	ldw	r6,-24(fp)
    78e4:	00002600 	call	260 <ad9361_spi_write>

	ad9361_spi_writef(spi, REG_GAIN_STP_CONFIG_2, LARGE_LPF_GAIN_STEP(~0),
    78e8:	010003c4 	movi	r4,15
    78ec:	001c8300 	call	1c830 <find_first_bit>
    78f0:	1007883a 	mov	r3,r2
    78f4:	e0bfff17 	ldw	r2,-4(fp)
    78f8:	10800943 	ldbu	r2,37(r2)
    78fc:	10803fcc 	andi	r2,r2,255
    7900:	108003cc 	andi	r2,r2,15
    7904:	d8800015 	stw	r2,0(sp)
    7908:	e13ffb17 	ldw	r4,-20(fp)
    790c:	01404184 	movi	r5,262
    7910:	018003c4 	movi	r6,15
    7914:	180f883a 	mov	r7,r3
    7918:	000031c0 	call	31c <__ad9361_spi_writef>
		LARGE_LPF_GAIN_STEP(ctrl->adc_large_overload_inc_steps));

	reg = LARGE_LMT_OVERLOAD_EXED_COUNTER(ctrl->lmt_overload_large_exceed_counter) |
    791c:	e0bfff17 	ldw	r2,-4(fp)
    7920:	108009c3 	ldbu	r2,39(r2)
    7924:	10803fcc 	andi	r2,r2,255
    7928:	1004913a 	slli	r2,r2,4
    792c:	10c03fcc 	andi	r3,r2,255
		SMALL_LMT_OVERLOAD_EXED_COUNTER(ctrl->lmt_overload_small_exceed_counter);
    7930:	e0bfff17 	ldw	r2,-4(fp)
    7934:	10800a03 	ldbu	r2,40(r2)
    7938:	10803fcc 	andi	r2,r2,255
    793c:	108003cc 	andi	r2,r2,15
	ad9361_spi_write(spi, REG_ADC_OVERLOAD_COUNTERS, reg);

	ad9361_spi_writef(spi, REG_GAIN_STP_CONFIG_2, LARGE_LPF_GAIN_STEP(~0),
		LARGE_LPF_GAIN_STEP(ctrl->adc_large_overload_inc_steps));

	reg = LARGE_LMT_OVERLOAD_EXED_COUNTER(ctrl->lmt_overload_large_exceed_counter) |
    7940:	1884b03a 	or	r2,r3,r2
    7944:	e0bffa15 	stw	r2,-24(fp)
		SMALL_LMT_OVERLOAD_EXED_COUNTER(ctrl->lmt_overload_small_exceed_counter);
	ad9361_spi_write(spi, REG_LMT_OVERLOAD_COUNTERS, reg);
    7948:	e13ffb17 	ldw	r4,-20(fp)
    794c:	01404844 	movi	r5,289
    7950:	e1bffa17 	ldw	r6,-24(fp)
    7954:	00002600 	call	260 <ad9361_spi_write>

	ad9361_spi_writef(spi, REG_GAIN_STP_CONFIG1,
    7958:	01000704 	movi	r4,28
    795c:	001c8300 	call	1c830 <find_first_bit>
    7960:	1007883a 	mov	r3,r2
    7964:	e0bfff17 	ldw	r2,-4(fp)
    7968:	10800a43 	ldbu	r2,41(r2)
    796c:	10803fcc 	andi	r2,r2,255
    7970:	d8800015 	stw	r2,0(sp)
    7974:	e13ffb17 	ldw	r4,-20(fp)
    7978:	014040c4 	movi	r5,259
    797c:	01800704 	movi	r6,28
    7980:	180f883a 	mov	r7,r3
    7984:	000031c0 	call	31c <__ad9361_spi_writef>
		DEC_STP_SIZE_FOR_LARGE_LMT_OVERLOAD(~0),
		ctrl->lmt_overload_large_inc_steps);

	reg = DIG_SATURATION_EXED_COUNTER(ctrl->dig_saturation_exceed_counter) |
    7988:	e0bfff17 	ldw	r2,-4(fp)
    798c:	10800a83 	ldbu	r2,42(r2)
    7990:	10803fcc 	andi	r2,r2,255
    7994:	10c003cc 	andi	r3,r2,15
		(ctrl->sync_for_gain_counter_en ?
    7998:	e0bfff17 	ldw	r2,-4(fp)
    799c:	10800b03 	ldbu	r2,44(r2)
	ENABLE_SYNC_FOR_GAIN_COUNTER : 0);
    79a0:	10803fcc 	andi	r2,r2,255
    79a4:	10000226 	beq	r2,zero,79b0 <ad9361_gc_setup+0xa34>
    79a8:	00800404 	movi	r2,16
    79ac:	00000106 	br	79b4 <ad9361_gc_setup+0xa38>
    79b0:	0005883a 	mov	r2,zero

	ad9361_spi_writef(spi, REG_GAIN_STP_CONFIG1,
		DEC_STP_SIZE_FOR_LARGE_LMT_OVERLOAD(~0),
		ctrl->lmt_overload_large_inc_steps);

	reg = DIG_SATURATION_EXED_COUNTER(ctrl->dig_saturation_exceed_counter) |
    79b4:	1884b03a 	or	r2,r3,r2
    79b8:	e0bffa15 	stw	r2,-24(fp)
		(ctrl->sync_for_gain_counter_en ?
	ENABLE_SYNC_FOR_GAIN_COUNTER : 0);
	ad9361_spi_write(spi, REG_DIGITAL_SAT_COUNTER, reg);
    79bc:	e13ffb17 	ldw	r4,-20(fp)
    79c0:	01404a04 	movi	r5,296
    79c4:	e1bffa17 	ldw	r6,-24(fp)
    79c8:	00002600 	call	260 <ad9361_spi_write>
	/*
	* Fast AGC
	*/

	/* Fast AGC - Low Power */
	ad9361_spi_writef(spi, REG_FAST_CONFIG_1,
    79cc:	01000044 	movi	r4,1
    79d0:	001c8300 	call	1c830 <find_first_bit>
    79d4:	1007883a 	mov	r3,r2
    79d8:	e0bfff17 	ldw	r2,-4(fp)
    79dc:	10801003 	ldbu	r2,64(r2)
    79e0:	10803fcc 	andi	r2,r2,255
    79e4:	d8800015 	stw	r2,0(sp)
    79e8:	e13ffb17 	ldw	r4,-20(fp)
    79ec:	01404404 	movi	r5,272
    79f0:	01800044 	movi	r6,1
    79f4:	180f883a 	mov	r7,r3
    79f8:	000031c0 	call	31c <__ad9361_spi_writef>
		ENABLE_INCR_GAIN,
		ctrl->f_agc_allow_agc_gain_increase);

	ad9361_spi_write(spi, REG_FAST_INCREMENT_TIME,
		ctrl->f_agc_lp_thresh_increment_time);
    79fc:	e0bfff17 	ldw	r2,-4(fp)
    7a00:	10801043 	ldbu	r2,65(r2)
	/* Fast AGC - Low Power */
	ad9361_spi_writef(spi, REG_FAST_CONFIG_1,
		ENABLE_INCR_GAIN,
		ctrl->f_agc_allow_agc_gain_increase);

	ad9361_spi_write(spi, REG_FAST_INCREMENT_TIME,
    7a04:	10803fcc 	andi	r2,r2,255
    7a08:	e13ffb17 	ldw	r4,-20(fp)
    7a0c:	014046c4 	movi	r5,283
    7a10:	100d883a 	mov	r6,r2
    7a14:	00002600 	call	260 <ad9361_spi_write>
		ctrl->f_agc_lp_thresh_increment_time);

	reg = ctrl->f_agc_lp_thresh_increment_steps - 1;
    7a18:	e0bfff17 	ldw	r2,-4(fp)
    7a1c:	10801083 	ldbu	r2,66(r2)
    7a20:	10803fcc 	andi	r2,r2,255
    7a24:	10bfffc4 	addi	r2,r2,-1
    7a28:	e0bffa15 	stw	r2,-24(fp)
	reg = clamp_t(uint32_t, reg, 0U, 7U);
    7a2c:	e0bffa17 	ldw	r2,-24(fp)
    7a30:	10000526 	beq	r2,zero,7a48 <ad9361_gc_setup+0xacc>
    7a34:	e0bffa17 	ldw	r2,-24(fp)
    7a38:	10c00230 	cmpltui	r3,r2,8
    7a3c:	1800031e 	bne	r3,zero,7a4c <ad9361_gc_setup+0xad0>
    7a40:	008001c4 	movi	r2,7
    7a44:	00000106 	br	7a4c <ad9361_gc_setup+0xad0>
    7a48:	0005883a 	mov	r2,zero
    7a4c:	e0bffa15 	stw	r2,-24(fp)
	ad9361_spi_writef(spi, REG_FAST_ENERGY_DETECT_COUNT,
    7a50:	01003804 	movi	r4,224
    7a54:	001c8300 	call	1c830 <find_first_bit>
    7a58:	1007883a 	mov	r3,r2
    7a5c:	e0bffa17 	ldw	r2,-24(fp)
    7a60:	d8800015 	stw	r2,0(sp)
    7a64:	e13ffb17 	ldw	r4,-20(fp)
    7a68:	014045c4 	movi	r5,279
    7a6c:	01803804 	movi	r6,224
    7a70:	180f883a 	mov	r7,r3
    7a74:	000031c0 	call	31c <__ad9361_spi_writef>
		INCREMENT_GAIN_STP_LPFLMT(~0), reg);

	/* Fast AGC - Lock Level */
	/* Dual use see also agc_inner_thresh_high */
	ad9361_spi_writef(spi, REG_FAST_CONFIG_2_SETTLING_DELAY,
    7a78:	01001004 	movi	r4,64
    7a7c:	001c8300 	call	1c830 <find_first_bit>
    7a80:	1007883a 	mov	r3,r2
    7a84:	e0bfff17 	ldw	r2,-4(fp)
    7a88:	10801103 	ldbu	r2,68(r2)
    7a8c:	10803fcc 	andi	r2,r2,255
    7a90:	d8800015 	stw	r2,0(sp)
    7a94:	e13ffb17 	ldw	r4,-20(fp)
    7a98:	01404444 	movi	r5,273
    7a9c:	01801004 	movi	r6,64
    7aa0:	180f883a 	mov	r7,r3
    7aa4:	000031c0 	call	31c <__ad9361_spi_writef>
		ENABLE_LMT_GAIN_INC_FOR_LOCK_LEVEL,
		ctrl->f_agc_lock_level_lmt_gain_increase_en);

	reg = ctrl->f_agc_lock_level_gain_increase_upper_limit;
    7aa8:	e0bfff17 	ldw	r2,-4(fp)
    7aac:	10801143 	ldbu	r2,69(r2)
    7ab0:	10803fcc 	andi	r2,r2,255
    7ab4:	e0bffa15 	stw	r2,-24(fp)
	reg = clamp_t(uint32_t, reg, 0U, 63U);
    7ab8:	e0bffa17 	ldw	r2,-24(fp)
    7abc:	10000526 	beq	r2,zero,7ad4 <ad9361_gc_setup+0xb58>
    7ac0:	e0bffa17 	ldw	r2,-24(fp)
    7ac4:	10c01030 	cmpltui	r3,r2,64
    7ac8:	1800031e 	bne	r3,zero,7ad8 <ad9361_gc_setup+0xb5c>
    7acc:	00800fc4 	movi	r2,63
    7ad0:	00000106 	br	7ad8 <ad9361_gc_setup+0xb5c>
    7ad4:	0005883a 	mov	r2,zero
    7ad8:	e0bffa15 	stw	r2,-24(fp)
	ad9361_spi_writef(spi, REG_FAST_AGCLL_UPPER_LIMIT,
    7adc:	01000fc4 	movi	r4,63
    7ae0:	001c8300 	call	1c830 <find_first_bit>
    7ae4:	1007883a 	mov	r3,r2
    7ae8:	e0bffa17 	ldw	r2,-24(fp)
    7aec:	d8800015 	stw	r2,0(sp)
    7af0:	e13ffb17 	ldw	r4,-20(fp)
    7af4:	01404604 	movi	r5,280
    7af8:	01800fc4 	movi	r6,63
    7afc:	180f883a 	mov	r7,r3
    7b00:	000031c0 	call	31c <__ad9361_spi_writef>
		AGCLL_MAX_INCREASE(~0), reg);

	/* Fast AGC - Peak Detectors and Final Settling */
	reg = ctrl->f_agc_lpf_final_settling_steps;
    7b04:	e0bfff17 	ldw	r2,-4(fp)
    7b08:	10801183 	ldbu	r2,70(r2)
    7b0c:	10803fcc 	andi	r2,r2,255
    7b10:	e0bffa15 	stw	r2,-24(fp)
	reg = clamp_t(uint32_t, reg, 0U, 3U);
    7b14:	e0bffa17 	ldw	r2,-24(fp)
    7b18:	10000526 	beq	r2,zero,7b30 <ad9361_gc_setup+0xbb4>
    7b1c:	e0bffa17 	ldw	r2,-24(fp)
    7b20:	10c00130 	cmpltui	r3,r2,4
    7b24:	1800031e 	bne	r3,zero,7b34 <ad9361_gc_setup+0xbb8>
    7b28:	008000c4 	movi	r2,3
    7b2c:	00000106 	br	7b34 <ad9361_gc_setup+0xbb8>
    7b30:	0005883a 	mov	r2,zero
    7b34:	e0bffa15 	stw	r2,-24(fp)
	ad9361_spi_writef(spi, REG_FAST_ENERGY_LOST_THRESH,
    7b38:	01003004 	movi	r4,192
    7b3c:	001c8300 	call	1c830 <find_first_bit>
    7b40:	1007883a 	mov	r3,r2
    7b44:	e0bffa17 	ldw	r2,-24(fp)
    7b48:	d8800015 	stw	r2,0(sp)
    7b4c:	e13ffb17 	ldw	r4,-20(fp)
    7b50:	01404484 	movi	r5,274
    7b54:	01803004 	movi	r6,192
    7b58:	180f883a 	mov	r7,r3
    7b5c:	000031c0 	call	31c <__ad9361_spi_writef>
		POST_LOCK_LEVEL_STP_SIZE_FOR_LPF_TABLE_FULL_TABLE(~0),
		reg);

	reg = ctrl->f_agc_lmt_final_settling_steps;
    7b60:	e0bfff17 	ldw	r2,-4(fp)
    7b64:	108011c3 	ldbu	r2,71(r2)
    7b68:	10803fcc 	andi	r2,r2,255
    7b6c:	e0bffa15 	stw	r2,-24(fp)
	reg = clamp_t(uint32_t, reg, 0U, 3U);
    7b70:	e0bffa17 	ldw	r2,-24(fp)
    7b74:	10000526 	beq	r2,zero,7b8c <ad9361_gc_setup+0xc10>
    7b78:	e0bffa17 	ldw	r2,-24(fp)
    7b7c:	10c00130 	cmpltui	r3,r2,4
    7b80:	1800031e 	bne	r3,zero,7b90 <ad9361_gc_setup+0xc14>
    7b84:	008000c4 	movi	r2,3
    7b88:	00000106 	br	7b90 <ad9361_gc_setup+0xc14>
    7b8c:	0005883a 	mov	r2,zero
    7b90:	e0bffa15 	stw	r2,-24(fp)
	ad9361_spi_writef(spi, REG_FAST_STRONGER_SIGNAL_THRESH,
    7b94:	01003004 	movi	r4,192
    7b98:	001c8300 	call	1c830 <find_first_bit>
    7b9c:	1007883a 	mov	r3,r2
    7ba0:	e0bffa17 	ldw	r2,-24(fp)
    7ba4:	d8800015 	stw	r2,0(sp)
    7ba8:	e13ffb17 	ldw	r4,-20(fp)
    7bac:	014044c4 	movi	r5,275
    7bb0:	01803004 	movi	r6,192
    7bb4:	180f883a 	mov	r7,r3
    7bb8:	000031c0 	call	31c <__ad9361_spi_writef>
		POST_LOCK_LEVEL_STP_FOR_LMT_TABLE(~0), reg);

	reg = ctrl->f_agc_final_overrange_count;
    7bbc:	e0bfff17 	ldw	r2,-4(fp)
    7bc0:	10801203 	ldbu	r2,72(r2)
    7bc4:	10803fcc 	andi	r2,r2,255
    7bc8:	e0bffa15 	stw	r2,-24(fp)
	reg = clamp_t(uint32_t, reg, 0U, 7U);
    7bcc:	e0bffa17 	ldw	r2,-24(fp)
    7bd0:	10000526 	beq	r2,zero,7be8 <ad9361_gc_setup+0xc6c>
    7bd4:	e0bffa17 	ldw	r2,-24(fp)
    7bd8:	10c00230 	cmpltui	r3,r2,8
    7bdc:	1800031e 	bne	r3,zero,7bec <ad9361_gc_setup+0xc70>
    7be0:	008001c4 	movi	r2,7
    7be4:	00000106 	br	7bec <ad9361_gc_setup+0xc70>
    7be8:	0005883a 	mov	r2,zero
    7bec:	e0bffa15 	stw	r2,-24(fp)
	ad9361_spi_writef(spi, REG_FAST_FINAL_OVER_RANGE_AND_OPT_GAIN,
    7bf0:	01003804 	movi	r4,224
    7bf4:	001c8300 	call	1c830 <find_first_bit>
    7bf8:	1007883a 	mov	r3,r2
    7bfc:	e0bffa17 	ldw	r2,-24(fp)
    7c00:	d8800015 	stw	r2,0(sp)
    7c04:	e13ffb17 	ldw	r4,-20(fp)
    7c08:	01404584 	movi	r5,278
    7c0c:	01803804 	movi	r6,224
    7c10:	180f883a 	mov	r7,r3
    7c14:	000031c0 	call	31c <__ad9361_spi_writef>
		FINAL_OVER_RANGE_COUNT(~0), reg);

	/* Fast AGC - Final Power Test */
	ad9361_spi_writef(spi, REG_FAST_CONFIG_1,
    7c18:	01002004 	movi	r4,128
    7c1c:	001c8300 	call	1c830 <find_first_bit>
    7c20:	1007883a 	mov	r3,r2
    7c24:	e0bfff17 	ldw	r2,-4(fp)
    7c28:	10801243 	ldbu	r2,73(r2)
    7c2c:	10803fcc 	andi	r2,r2,255
    7c30:	d8800015 	stw	r2,0(sp)
    7c34:	e13ffb17 	ldw	r4,-20(fp)
    7c38:	01404404 	movi	r5,272
    7c3c:	01802004 	movi	r6,128
    7c40:	180f883a 	mov	r7,r3
    7c44:	000031c0 	call	31c <__ad9361_spi_writef>
		ctrl->f_agc_gain_increase_after_gain_lock_en);

	/* Fast AGC - Unlocking the Gain */
	/* 0 = MAX Gain, 1 = Optimized Gain, 2 = Set Gain */

	reg = ctrl->f_agc_gain_index_type_after_exit_rx_mode;
    7c48:	e0bfff17 	ldw	r2,-4(fp)
    7c4c:	10801317 	ldw	r2,76(r2)
    7c50:	e0bffa15 	stw	r2,-24(fp)
	ad9361_spi_writef(spi, REG_FAST_CONFIG_1,
    7c54:	01000404 	movi	r4,16
    7c58:	001c8300 	call	1c830 <find_first_bit>
    7c5c:	1007883a 	mov	r3,r2
    7c60:	e0bffa17 	ldw	r2,-24(fp)
    7c64:	10800060 	cmpeqi	r2,r2,1
    7c68:	10803fcc 	andi	r2,r2,255
    7c6c:	d8800015 	stw	r2,0(sp)
    7c70:	e13ffb17 	ldw	r4,-20(fp)
    7c74:	01404404 	movi	r5,272
    7c78:	01800404 	movi	r6,16
    7c7c:	180f883a 	mov	r7,r3
    7c80:	000031c0 	call	31c <__ad9361_spi_writef>
		GOTO_SET_GAIN_IF_EXIT_RX_STATE, reg == SET_GAIN);
	ad9361_spi_writef(spi, REG_FAST_CONFIG_1,
    7c84:	01000104 	movi	r4,4
    7c88:	001c8300 	call	1c830 <find_first_bit>
    7c8c:	1007883a 	mov	r3,r2
    7c90:	e0bffa17 	ldw	r2,-24(fp)
    7c94:	108000a0 	cmpeqi	r2,r2,2
    7c98:	10803fcc 	andi	r2,r2,255
    7c9c:	d8800015 	stw	r2,0(sp)
    7ca0:	e13ffb17 	ldw	r4,-20(fp)
    7ca4:	01404404 	movi	r5,272
    7ca8:	01800104 	movi	r6,4
    7cac:	180f883a 	mov	r7,r3
    7cb0:	000031c0 	call	31c <__ad9361_spi_writef>
		GOTO_OPTIMIZED_GAIN_IF_EXIT_RX_STATE,
		reg == OPTIMIZED_GAIN);

	ad9361_spi_writef(spi, REG_FAST_CONFIG_2_SETTLING_DELAY,
    7cb4:	01002004 	movi	r4,128
    7cb8:	001c8300 	call	1c830 <find_first_bit>
    7cbc:	1007883a 	mov	r3,r2
    7cc0:	e0bfff17 	ldw	r2,-4(fp)
    7cc4:	10801403 	ldbu	r2,80(r2)
    7cc8:	10803fcc 	andi	r2,r2,255
    7ccc:	d8800015 	stw	r2,0(sp)
    7cd0:	e13ffb17 	ldw	r4,-20(fp)
    7cd4:	01404444 	movi	r5,273
    7cd8:	01802004 	movi	r6,128
    7cdc:	180f883a 	mov	r7,r3
    7ce0:	000031c0 	call	31c <__ad9361_spi_writef>
		USE_LAST_LOCK_LEVEL_FOR_SET_GAIN,
		ctrl->f_agc_use_last_lock_level_for_set_gain_en);

	reg = ctrl->f_agc_optimized_gain_offset;
    7ce4:	e0bfff17 	ldw	r2,-4(fp)
    7ce8:	10801443 	ldbu	r2,81(r2)
    7cec:	10803fcc 	andi	r2,r2,255
    7cf0:	e0bffa15 	stw	r2,-24(fp)
	reg = clamp_t(uint32_t, reg, 0U, 15U);
    7cf4:	e0bffa17 	ldw	r2,-24(fp)
    7cf8:	10000526 	beq	r2,zero,7d10 <ad9361_gc_setup+0xd94>
    7cfc:	e0bffa17 	ldw	r2,-24(fp)
    7d00:	10c00430 	cmpltui	r3,r2,16
    7d04:	1800031e 	bne	r3,zero,7d14 <ad9361_gc_setup+0xd98>
    7d08:	008003c4 	movi	r2,15
    7d0c:	00000106 	br	7d14 <ad9361_gc_setup+0xd98>
    7d10:	0005883a 	mov	r2,zero
    7d14:	e0bffa15 	stw	r2,-24(fp)
	ad9361_spi_writef(spi, REG_FAST_FINAL_OVER_RANGE_AND_OPT_GAIN,
    7d18:	010003c4 	movi	r4,15
    7d1c:	001c8300 	call	1c830 <find_first_bit>
    7d20:	1007883a 	mov	r3,r2
    7d24:	e0bffa17 	ldw	r2,-24(fp)
    7d28:	d8800015 	stw	r2,0(sp)
    7d2c:	e13ffb17 	ldw	r4,-20(fp)
    7d30:	01404584 	movi	r5,278
    7d34:	018003c4 	movi	r6,15
    7d38:	180f883a 	mov	r7,r3
    7d3c:	000031c0 	call	31c <__ad9361_spi_writef>
		OPTIMIZE_GAIN_OFFSET(~0), reg);

	tmp1 = !ctrl->f_agc_rst_gla_stronger_sig_thresh_exceeded_en ||
    7d40:	e0bfff17 	ldw	r2,-4(fp)
    7d44:	10801483 	ldbu	r2,82(r2)
    7d48:	1080005c 	xori	r2,r2,1
		!ctrl->f_agc_rst_gla_engergy_lost_sig_thresh_exceeded_en ||
		!ctrl->f_agc_rst_gla_large_adc_overload_en ||
		!ctrl->f_agc_rst_gla_large_lmt_overload_en ||
    7d4c:	10803fcc 	andi	r2,r2,255
    7d50:	1000131e 	bne	r2,zero,7da0 <ad9361_gc_setup+0xe24>
	reg = clamp_t(uint32_t, reg, 0U, 15U);
	ad9361_spi_writef(spi, REG_FAST_FINAL_OVER_RANGE_AND_OPT_GAIN,
		OPTIMIZE_GAIN_OFFSET(~0), reg);

	tmp1 = !ctrl->f_agc_rst_gla_stronger_sig_thresh_exceeded_en ||
		!ctrl->f_agc_rst_gla_engergy_lost_sig_thresh_exceeded_en ||
    7d54:	e0bfff17 	ldw	r2,-4(fp)
    7d58:	10801503 	ldbu	r2,84(r2)
    7d5c:	1080005c 	xori	r2,r2,1
	reg = ctrl->f_agc_optimized_gain_offset;
	reg = clamp_t(uint32_t, reg, 0U, 15U);
	ad9361_spi_writef(spi, REG_FAST_FINAL_OVER_RANGE_AND_OPT_GAIN,
		OPTIMIZE_GAIN_OFFSET(~0), reg);

	tmp1 = !ctrl->f_agc_rst_gla_stronger_sig_thresh_exceeded_en ||
    7d60:	10803fcc 	andi	r2,r2,255
    7d64:	10000e1e 	bne	r2,zero,7da0 <ad9361_gc_setup+0xe24>
		!ctrl->f_agc_rst_gla_engergy_lost_sig_thresh_exceeded_en ||
		!ctrl->f_agc_rst_gla_large_adc_overload_en ||
    7d68:	e0bfff17 	ldw	r2,-4(fp)
    7d6c:	10801603 	ldbu	r2,88(r2)
    7d70:	1080005c 	xori	r2,r2,1
	reg = clamp_t(uint32_t, reg, 0U, 15U);
	ad9361_spi_writef(spi, REG_FAST_FINAL_OVER_RANGE_AND_OPT_GAIN,
		OPTIMIZE_GAIN_OFFSET(~0), reg);

	tmp1 = !ctrl->f_agc_rst_gla_stronger_sig_thresh_exceeded_en ||
		!ctrl->f_agc_rst_gla_engergy_lost_sig_thresh_exceeded_en ||
    7d74:	10803fcc 	andi	r2,r2,255
    7d78:	1000091e 	bne	r2,zero,7da0 <ad9361_gc_setup+0xe24>
		!ctrl->f_agc_rst_gla_large_adc_overload_en ||
		!ctrl->f_agc_rst_gla_large_lmt_overload_en ||
    7d7c:	e0bfff17 	ldw	r2,-4(fp)
    7d80:	10801643 	ldbu	r2,89(r2)
    7d84:	1080005c 	xori	r2,r2,1
	ad9361_spi_writef(spi, REG_FAST_FINAL_OVER_RANGE_AND_OPT_GAIN,
		OPTIMIZE_GAIN_OFFSET(~0), reg);

	tmp1 = !ctrl->f_agc_rst_gla_stronger_sig_thresh_exceeded_en ||
		!ctrl->f_agc_rst_gla_engergy_lost_sig_thresh_exceeded_en ||
		!ctrl->f_agc_rst_gla_large_adc_overload_en ||
    7d88:	10803fcc 	andi	r2,r2,255
    7d8c:	1000041e 	bne	r2,zero,7da0 <ad9361_gc_setup+0xe24>
		!ctrl->f_agc_rst_gla_large_lmt_overload_en ||
		ctrl->f_agc_rst_gla_en_agc_pulled_high_en;
    7d90:	e0bfff17 	ldw	r2,-4(fp)
    7d94:	10801683 	ldbu	r2,90(r2)
		OPTIMIZE_GAIN_OFFSET(~0), reg);

	tmp1 = !ctrl->f_agc_rst_gla_stronger_sig_thresh_exceeded_en ||
		!ctrl->f_agc_rst_gla_engergy_lost_sig_thresh_exceeded_en ||
		!ctrl->f_agc_rst_gla_large_adc_overload_en ||
		!ctrl->f_agc_rst_gla_large_lmt_overload_en ||
    7d98:	10803fcc 	andi	r2,r2,255
    7d9c:	10000226 	beq	r2,zero,7da8 <ad9361_gc_setup+0xe2c>
    7da0:	00800044 	movi	r2,1
    7da4:	00000106 	br	7dac <ad9361_gc_setup+0xe30>
    7da8:	0005883a 	mov	r2,zero
	reg = ctrl->f_agc_optimized_gain_offset;
	reg = clamp_t(uint32_t, reg, 0U, 15U);
	ad9361_spi_writef(spi, REG_FAST_FINAL_OVER_RANGE_AND_OPT_GAIN,
		OPTIMIZE_GAIN_OFFSET(~0), reg);

	tmp1 = !ctrl->f_agc_rst_gla_stronger_sig_thresh_exceeded_en ||
    7dac:	e0bffc15 	stw	r2,-16(fp)
		!ctrl->f_agc_rst_gla_engergy_lost_sig_thresh_exceeded_en ||
		!ctrl->f_agc_rst_gla_large_adc_overload_en ||
		!ctrl->f_agc_rst_gla_large_lmt_overload_en ||
		ctrl->f_agc_rst_gla_en_agc_pulled_high_en;

	ad9361_spi_writef(spi, REG_AGC_CONFIG_2,
    7db0:	01001004 	movi	r4,64
    7db4:	001c8300 	call	1c830 <find_first_bit>
    7db8:	1007883a 	mov	r3,r2
    7dbc:	e0bffc17 	ldw	r2,-16(fp)
    7dc0:	d8800015 	stw	r2,0(sp)
    7dc4:	e13ffb17 	ldw	r4,-20(fp)
    7dc8:	01403ec4 	movi	r5,251
    7dcc:	01801004 	movi	r6,64
    7dd0:	180f883a 	mov	r7,r3
    7dd4:	000031c0 	call	31c <__ad9361_spi_writef>
		AGC_GAIN_UNLOCK_CTRL, tmp1);

	reg = !ctrl->f_agc_rst_gla_stronger_sig_thresh_exceeded_en;
    7dd8:	e0bfff17 	ldw	r2,-4(fp)
    7ddc:	10801483 	ldbu	r2,82(r2)
    7de0:	1080005c 	xori	r2,r2,1
    7de4:	10803fcc 	andi	r2,r2,255
    7de8:	e0bffa15 	stw	r2,-24(fp)
	ad9361_spi_writef(spi, REG_FAST_STRONG_SIGNAL_FREEZE,
    7dec:	01002004 	movi	r4,128
    7df0:	001c8300 	call	1c830 <find_first_bit>
    7df4:	1007883a 	mov	r3,r2
    7df8:	e0bffa17 	ldw	r2,-24(fp)
    7dfc:	d8800015 	stw	r2,0(sp)
    7e00:	e13ffb17 	ldw	r4,-20(fp)
    7e04:	01404544 	movi	r5,277
    7e08:	01802004 	movi	r6,128
    7e0c:	180f883a 	mov	r7,r3
    7e10:	000031c0 	call	31c <__ad9361_spi_writef>
		DONT_UNLOCK_GAIN_IF_STRONGER_SIGNAL, reg);

	reg = ctrl->f_agc_rst_gla_stronger_sig_thresh_above_ll;
    7e14:	e0bfff17 	ldw	r2,-4(fp)
    7e18:	108014c3 	ldbu	r2,83(r2)
    7e1c:	10803fcc 	andi	r2,r2,255
    7e20:	e0bffa15 	stw	r2,-24(fp)
	reg = clamp_t(uint32_t, reg, 0U, 63U);
    7e24:	e0bffa17 	ldw	r2,-24(fp)
    7e28:	10000526 	beq	r2,zero,7e40 <ad9361_gc_setup+0xec4>
    7e2c:	e0bffa17 	ldw	r2,-24(fp)
    7e30:	10c01030 	cmpltui	r3,r2,64
    7e34:	1800031e 	bne	r3,zero,7e44 <ad9361_gc_setup+0xec8>
    7e38:	00800fc4 	movi	r2,63
    7e3c:	00000106 	br	7e44 <ad9361_gc_setup+0xec8>
    7e40:	0005883a 	mov	r2,zero
    7e44:	e0bffa15 	stw	r2,-24(fp)
	ad9361_spi_writef(spi, REG_FAST_STRONGER_SIGNAL_THRESH,
    7e48:	01000fc4 	movi	r4,63
    7e4c:	001c8300 	call	1c830 <find_first_bit>
    7e50:	1007883a 	mov	r3,r2
    7e54:	e0bffa17 	ldw	r2,-24(fp)
    7e58:	d8800015 	stw	r2,0(sp)
    7e5c:	e13ffb17 	ldw	r4,-20(fp)
    7e60:	014044c4 	movi	r5,275
    7e64:	01800fc4 	movi	r6,63
    7e68:	180f883a 	mov	r7,r3
    7e6c:	000031c0 	call	31c <__ad9361_spi_writef>
		STRONGER_SIGNAL_THRESH(~0), reg);

	reg = ctrl->f_agc_rst_gla_engergy_lost_sig_thresh_below_ll;
    7e70:	e0bfff17 	ldw	r2,-4(fp)
    7e74:	10801583 	ldbu	r2,86(r2)
    7e78:	10803fcc 	andi	r2,r2,255
    7e7c:	e0bffa15 	stw	r2,-24(fp)
	reg = clamp_t(uint32_t, reg, 0U, 63U);
    7e80:	e0bffa17 	ldw	r2,-24(fp)
    7e84:	10000526 	beq	r2,zero,7e9c <ad9361_gc_setup+0xf20>
    7e88:	e0bffa17 	ldw	r2,-24(fp)
    7e8c:	10c01030 	cmpltui	r3,r2,64
    7e90:	1800031e 	bne	r3,zero,7ea0 <ad9361_gc_setup+0xf24>
    7e94:	00800fc4 	movi	r2,63
    7e98:	00000106 	br	7ea0 <ad9361_gc_setup+0xf24>
    7e9c:	0005883a 	mov	r2,zero
    7ea0:	e0bffa15 	stw	r2,-24(fp)
	ad9361_spi_writef(spi, REG_FAST_ENERGY_LOST_THRESH,
    7ea4:	01000fc4 	movi	r4,63
    7ea8:	001c8300 	call	1c830 <find_first_bit>
    7eac:	1007883a 	mov	r3,r2
    7eb0:	e0bffa17 	ldw	r2,-24(fp)
    7eb4:	d8800015 	stw	r2,0(sp)
    7eb8:	e13ffb17 	ldw	r4,-20(fp)
    7ebc:	01404484 	movi	r5,274
    7ec0:	01800fc4 	movi	r6,63
    7ec4:	180f883a 	mov	r7,r3
    7ec8:	000031c0 	call	31c <__ad9361_spi_writef>
			  ENERGY_LOST_THRESH(~0),  reg);

	reg = ctrl->f_agc_rst_gla_engergy_lost_goto_optim_gain_en;
    7ecc:	e0bfff17 	ldw	r2,-4(fp)
    7ed0:	10801543 	ldbu	r2,85(r2)
    7ed4:	10803fcc 	andi	r2,r2,255
    7ed8:	e0bffa15 	stw	r2,-24(fp)
	ad9361_spi_writef(spi, REG_FAST_CONFIG_1,
    7edc:	01001004 	movi	r4,64
    7ee0:	001c8300 	call	1c830 <find_first_bit>
    7ee4:	1007883a 	mov	r3,r2
    7ee8:	e0bffa17 	ldw	r2,-24(fp)
    7eec:	d8800015 	stw	r2,0(sp)
    7ef0:	e13ffb17 	ldw	r4,-20(fp)
    7ef4:	01404404 	movi	r5,272
    7ef8:	01801004 	movi	r6,64
    7efc:	180f883a 	mov	r7,r3
    7f00:	000031c0 	call	31c <__ad9361_spi_writef>
		GOTO_OPT_GAIN_IF_ENERGY_LOST_OR_EN_AGC_HIGH, reg);

	reg = !ctrl->f_agc_rst_gla_engergy_lost_sig_thresh_exceeded_en;
    7f04:	e0bfff17 	ldw	r2,-4(fp)
    7f08:	10801503 	ldbu	r2,84(r2)
    7f0c:	1080005c 	xori	r2,r2,1
    7f10:	10803fcc 	andi	r2,r2,255
    7f14:	e0bffa15 	stw	r2,-24(fp)
	ad9361_spi_writef(spi, REG_FAST_CONFIG_1,
    7f18:	01000204 	movi	r4,8
    7f1c:	001c8300 	call	1c830 <find_first_bit>
    7f20:	1007883a 	mov	r3,r2
    7f24:	e0bffa17 	ldw	r2,-24(fp)
    7f28:	d8800015 	stw	r2,0(sp)
    7f2c:	e13ffb17 	ldw	r4,-20(fp)
    7f30:	01404404 	movi	r5,272
    7f34:	01800204 	movi	r6,8
    7f38:	180f883a 	mov	r7,r3
    7f3c:	000031c0 	call	31c <__ad9361_spi_writef>
		DONT_UNLOCK_GAIN_IF_ENERGY_LOST, reg);

	reg = ctrl->f_agc_energy_lost_stronger_sig_gain_lock_exit_cnt;
    7f40:	e0bfff17 	ldw	r2,-4(fp)
    7f44:	108015c3 	ldbu	r2,87(r2)
    7f48:	10803fcc 	andi	r2,r2,255
    7f4c:	e0bffa15 	stw	r2,-24(fp)
	reg = clamp_t(uint32_t, reg, 0U, 63U);
    7f50:	e0bffa17 	ldw	r2,-24(fp)
    7f54:	10000526 	beq	r2,zero,7f6c <ad9361_gc_setup+0xff0>
    7f58:	e0bffa17 	ldw	r2,-24(fp)
    7f5c:	10c01030 	cmpltui	r3,r2,64
    7f60:	1800031e 	bne	r3,zero,7f70 <ad9361_gc_setup+0xff4>
    7f64:	00800fc4 	movi	r2,63
    7f68:	00000106 	br	7f70 <ad9361_gc_setup+0xff4>
    7f6c:	0005883a 	mov	r2,zero
    7f70:	e0bffa15 	stw	r2,-24(fp)
	ad9361_spi_writef(spi, REG_FAST_GAIN_LOCK_EXIT_COUNT,
    7f74:	01000fc4 	movi	r4,63
    7f78:	001c8300 	call	1c830 <find_first_bit>
    7f7c:	1007883a 	mov	r3,r2
    7f80:	e0bffa17 	ldw	r2,-24(fp)
    7f84:	d8800015 	stw	r2,0(sp)
    7f88:	e13ffb17 	ldw	r4,-20(fp)
    7f8c:	01404644 	movi	r5,281
    7f90:	01800fc4 	movi	r6,63
    7f94:	180f883a 	mov	r7,r3
    7f98:	000031c0 	call	31c <__ad9361_spi_writef>
		GAIN_LOCK_EXIT_COUNT(~0), reg);

	reg = !ctrl->f_agc_rst_gla_large_adc_overload_en ||
    7f9c:	e0bfff17 	ldw	r2,-4(fp)
    7fa0:	10801603 	ldbu	r2,88(r2)
    7fa4:	1080005c 	xori	r2,r2,1
    7fa8:	10803fcc 	andi	r2,r2,255
    7fac:	1000051e 	bne	r2,zero,7fc4 <ad9361_gc_setup+0x1048>
		!ctrl->f_agc_rst_gla_large_lmt_overload_en;
    7fb0:	e0bfff17 	ldw	r2,-4(fp)
    7fb4:	10801643 	ldbu	r2,89(r2)
    7fb8:	1080005c 	xori	r2,r2,1
	reg = ctrl->f_agc_energy_lost_stronger_sig_gain_lock_exit_cnt;
	reg = clamp_t(uint32_t, reg, 0U, 63U);
	ad9361_spi_writef(spi, REG_FAST_GAIN_LOCK_EXIT_COUNT,
		GAIN_LOCK_EXIT_COUNT(~0), reg);

	reg = !ctrl->f_agc_rst_gla_large_adc_overload_en ||
    7fbc:	10803fcc 	andi	r2,r2,255
    7fc0:	10000226 	beq	r2,zero,7fcc <ad9361_gc_setup+0x1050>
    7fc4:	00800044 	movi	r2,1
    7fc8:	00000106 	br	7fd0 <ad9361_gc_setup+0x1054>
    7fcc:	0005883a 	mov	r2,zero
    7fd0:	e0bffa15 	stw	r2,-24(fp)
		!ctrl->f_agc_rst_gla_large_lmt_overload_en;
	ad9361_spi_writef(spi, REG_FAST_CONFIG_1,
    7fd4:	01000084 	movi	r4,2
    7fd8:	001c8300 	call	1c830 <find_first_bit>
    7fdc:	1007883a 	mov	r3,r2
    7fe0:	e0bffa17 	ldw	r2,-24(fp)
    7fe4:	d8800015 	stw	r2,0(sp)
    7fe8:	e13ffb17 	ldw	r4,-20(fp)
    7fec:	01404404 	movi	r5,272
    7ff0:	01800084 	movi	r6,2
    7ff4:	180f883a 	mov	r7,r3
    7ff8:	000031c0 	call	31c <__ad9361_spi_writef>
		DONT_UNLOCK_GAIN_IF_LG_ADC_OR_LMT_OVRG, reg);

	reg = !ctrl->f_agc_rst_gla_large_adc_overload_en;
    7ffc:	e0bfff17 	ldw	r2,-4(fp)
    8000:	10801603 	ldbu	r2,88(r2)
    8004:	1080005c 	xori	r2,r2,1
    8008:	10803fcc 	andi	r2,r2,255
    800c:	e0bffa15 	stw	r2,-24(fp)
	ad9361_spi_writef(spi, REG_FAST_LOW_POWER_THRESH,
    8010:	01002004 	movi	r4,128
    8014:	001c8300 	call	1c830 <find_first_bit>
    8018:	1007883a 	mov	r3,r2
    801c:	e0bffa17 	ldw	r2,-24(fp)
    8020:	d8800015 	stw	r2,0(sp)
    8024:	e13ffb17 	ldw	r4,-20(fp)
    8028:	01404504 	movi	r5,276
    802c:	01802004 	movi	r6,128
    8030:	180f883a 	mov	r7,r3
    8034:	000031c0 	call	31c <__ad9361_spi_writef>
		DONT_UNLOCK_GAIN_IF_ADC_OVRG, reg);

	/* 0 = Max Gain, 1 = Set Gain, 2 = Optimized Gain, 3 = No Gain Change */

	if (ctrl->f_agc_rst_gla_en_agc_pulled_high_en) {
    8038:	e0bfff17 	ldw	r2,-4(fp)
    803c:	10801683 	ldbu	r2,90(r2)
    8040:	10803fcc 	andi	r2,r2,255
    8044:	10006726 	beq	r2,zero,81e4 <ad9361_gc_setup+0x1268>
		switch (ctrl->f_agc_rst_gla_if_en_agc_pulled_high_mode) {
    8048:	e0bfff17 	ldw	r2,-4(fp)
    804c:	10801717 	ldw	r2,92(r2)
    8050:	10c00060 	cmpeqi	r3,r2,1
    8054:	1800211e 	bne	r3,zero,80dc <ad9361_gc_setup+0x1160>
    8058:	0080052e 	bgeu	zero,r2,8070 <ad9361_gc_setup+0x10f4>
    805c:	10c000a0 	cmpeqi	r3,r2,2
    8060:	1800311e 	bne	r3,zero,8128 <ad9361_gc_setup+0x11ac>
    8064:	108000e0 	cmpeqi	r2,r2,3
    8068:	10004c1e 	bne	r2,zero,819c <ad9361_gc_setup+0x1220>
    806c:	00006d06 	br	8224 <ad9361_gc_setup+0x12a8>
		case MAX_GAIN:
			ad9361_spi_writef(spi, REG_FAST_CONFIG_2_SETTLING_DELAY,
    8070:	01000804 	movi	r4,32
    8074:	001c8300 	call	1c830 <find_first_bit>
    8078:	1007883a 	mov	r3,r2
    807c:	00800044 	movi	r2,1
    8080:	d8800015 	stw	r2,0(sp)
    8084:	e13ffb17 	ldw	r4,-20(fp)
    8088:	01404444 	movi	r5,273
    808c:	01800804 	movi	r6,32
    8090:	180f883a 	mov	r7,r3
    8094:	000031c0 	call	31c <__ad9361_spi_writef>
				GOTO_MAX_GAIN_OR_OPT_GAIN_IF_EN_AGC_HIGH, 1);

			ad9361_spi_writef(spi, REG_FAST_CONFIG_1,
    8098:	01000804 	movi	r4,32
    809c:	001c8300 	call	1c830 <find_first_bit>
    80a0:	d8000015 	stw	zero,0(sp)
    80a4:	e13ffb17 	ldw	r4,-20(fp)
    80a8:	01404404 	movi	r5,272
    80ac:	01800804 	movi	r6,32
    80b0:	100f883a 	mov	r7,r2
    80b4:	000031c0 	call	31c <__ad9361_spi_writef>
				GOTO_SET_GAIN_IF_EN_AGC_HIGH, 0);

			ad9361_spi_writef(spi, REG_FAST_CONFIG_1,
    80b8:	01001004 	movi	r4,64
    80bc:	001c8300 	call	1c830 <find_first_bit>
    80c0:	d8000015 	stw	zero,0(sp)
    80c4:	e13ffb17 	ldw	r4,-20(fp)
    80c8:	01404404 	movi	r5,272
    80cc:	01801004 	movi	r6,64
    80d0:	100f883a 	mov	r7,r2
    80d4:	000031c0 	call	31c <__ad9361_spi_writef>
				GOTO_OPT_GAIN_IF_ENERGY_LOST_OR_EN_AGC_HIGH, 0);
			break;
    80d8:	00004106 	br	81e0 <ad9361_gc_setup+0x1264>
		case SET_GAIN:
			ad9361_spi_writef(spi, REG_FAST_CONFIG_2_SETTLING_DELAY,
    80dc:	01000804 	movi	r4,32
    80e0:	001c8300 	call	1c830 <find_first_bit>
    80e4:	d8000015 	stw	zero,0(sp)
    80e8:	e13ffb17 	ldw	r4,-20(fp)
    80ec:	01404444 	movi	r5,273
    80f0:	01800804 	movi	r6,32
    80f4:	100f883a 	mov	r7,r2
    80f8:	000031c0 	call	31c <__ad9361_spi_writef>
				GOTO_MAX_GAIN_OR_OPT_GAIN_IF_EN_AGC_HIGH, 0);

			ad9361_spi_writef(spi, REG_FAST_CONFIG_1,
    80fc:	01000804 	movi	r4,32
    8100:	001c8300 	call	1c830 <find_first_bit>
    8104:	1007883a 	mov	r3,r2
    8108:	00800044 	movi	r2,1
    810c:	d8800015 	stw	r2,0(sp)
    8110:	e13ffb17 	ldw	r4,-20(fp)
    8114:	01404404 	movi	r5,272
    8118:	01800804 	movi	r6,32
    811c:	180f883a 	mov	r7,r3
    8120:	000031c0 	call	31c <__ad9361_spi_writef>
				GOTO_SET_GAIN_IF_EN_AGC_HIGH, 1);
			break;
    8124:	00002e06 	br	81e0 <ad9361_gc_setup+0x1264>
		case OPTIMIZED_GAIN:
			ad9361_spi_writef(spi, REG_FAST_CONFIG_2_SETTLING_DELAY,
    8128:	01000804 	movi	r4,32
    812c:	001c8300 	call	1c830 <find_first_bit>
    8130:	1007883a 	mov	r3,r2
    8134:	00800044 	movi	r2,1
    8138:	d8800015 	stw	r2,0(sp)
    813c:	e13ffb17 	ldw	r4,-20(fp)
    8140:	01404444 	movi	r5,273
    8144:	01800804 	movi	r6,32
    8148:	180f883a 	mov	r7,r3
    814c:	000031c0 	call	31c <__ad9361_spi_writef>
				GOTO_MAX_GAIN_OR_OPT_GAIN_IF_EN_AGC_HIGH, 1);

			ad9361_spi_writef(spi, REG_FAST_CONFIG_1,
    8150:	01000804 	movi	r4,32
    8154:	001c8300 	call	1c830 <find_first_bit>
    8158:	d8000015 	stw	zero,0(sp)
    815c:	e13ffb17 	ldw	r4,-20(fp)
    8160:	01404404 	movi	r5,272
    8164:	01800804 	movi	r6,32
    8168:	100f883a 	mov	r7,r2
    816c:	000031c0 	call	31c <__ad9361_spi_writef>
				GOTO_SET_GAIN_IF_EN_AGC_HIGH, 0);

			ad9361_spi_writef(spi, REG_FAST_CONFIG_1,
    8170:	01001004 	movi	r4,64
    8174:	001c8300 	call	1c830 <find_first_bit>
    8178:	1007883a 	mov	r3,r2
    817c:	00800044 	movi	r2,1
    8180:	d8800015 	stw	r2,0(sp)
    8184:	e13ffb17 	ldw	r4,-20(fp)
    8188:	01404404 	movi	r5,272
    818c:	01801004 	movi	r6,64
    8190:	180f883a 	mov	r7,r3
    8194:	000031c0 	call	31c <__ad9361_spi_writef>
				GOTO_OPT_GAIN_IF_ENERGY_LOST_OR_EN_AGC_HIGH, 1);
			break;
    8198:	00001106 	br	81e0 <ad9361_gc_setup+0x1264>
		case NO_GAIN_CHANGE:
			ad9361_spi_writef(spi, REG_FAST_CONFIG_1,
    819c:	01000804 	movi	r4,32
    81a0:	001c8300 	call	1c830 <find_first_bit>
    81a4:	d8000015 	stw	zero,0(sp)
    81a8:	e13ffb17 	ldw	r4,-20(fp)
    81ac:	01404404 	movi	r5,272
    81b0:	01800804 	movi	r6,32
    81b4:	100f883a 	mov	r7,r2
    81b8:	000031c0 	call	31c <__ad9361_spi_writef>
				GOTO_SET_GAIN_IF_EN_AGC_HIGH, 0);
			ad9361_spi_writef(spi, REG_FAST_CONFIG_2_SETTLING_DELAY,
    81bc:	01000804 	movi	r4,32
    81c0:	001c8300 	call	1c830 <find_first_bit>
    81c4:	d8000015 	stw	zero,0(sp)
    81c8:	e13ffb17 	ldw	r4,-20(fp)
    81cc:	01404444 	movi	r5,273
    81d0:	01800804 	movi	r6,32
    81d4:	100f883a 	mov	r7,r2
    81d8:	000031c0 	call	31c <__ad9361_spi_writef>
				GOTO_MAX_GAIN_OR_OPT_GAIN_IF_EN_AGC_HIGH, 0);
			break;
    81dc:	0001883a 	nop
    81e0:	00001006 	br	8224 <ad9361_gc_setup+0x12a8>
		}
	}
	else {
		ad9361_spi_writef(spi, REG_FAST_CONFIG_1,
    81e4:	01000804 	movi	r4,32
    81e8:	001c8300 	call	1c830 <find_first_bit>
    81ec:	d8000015 	stw	zero,0(sp)
    81f0:	e13ffb17 	ldw	r4,-20(fp)
    81f4:	01404404 	movi	r5,272
    81f8:	01800804 	movi	r6,32
    81fc:	100f883a 	mov	r7,r2
    8200:	000031c0 	call	31c <__ad9361_spi_writef>
			GOTO_SET_GAIN_IF_EN_AGC_HIGH, 0);
		ad9361_spi_writef(spi, REG_FAST_CONFIG_2_SETTLING_DELAY,
    8204:	01000804 	movi	r4,32
    8208:	001c8300 	call	1c830 <find_first_bit>
    820c:	d8000015 	stw	zero,0(sp)
    8210:	e13ffb17 	ldw	r4,-20(fp)
    8214:	01404444 	movi	r5,273
    8218:	01800804 	movi	r6,32
    821c:	100f883a 	mov	r7,r2
    8220:	000031c0 	call	31c <__ad9361_spi_writef>
			GOTO_MAX_GAIN_OR_OPT_GAIN_IF_EN_AGC_HIGH, 0);
	}

	reg = ilog2(ctrl->f_agc_power_measurement_duration_in_state5 / 16);
    8224:	e0bfff17 	ldw	r2,-4(fp)
    8228:	10801803 	ldbu	r2,96(r2)
    822c:	10803fcc 	andi	r2,r2,255
    8230:	1004d13a 	srli	r2,r2,4
    8234:	10803fcc 	andi	r2,r2,255
    8238:	1009883a 	mov	r4,r2
    823c:	001c5b40 	call	1c5b4 <ilog2>
    8240:	e0bffa15 	stw	r2,-24(fp)
	reg = clamp_t(uint32_t, reg, 0U, 15U);
    8244:	e0bffa17 	ldw	r2,-24(fp)
    8248:	10000526 	beq	r2,zero,8260 <ad9361_gc_setup+0x12e4>
    824c:	e0bffa17 	ldw	r2,-24(fp)
    8250:	10c00430 	cmpltui	r3,r2,16
    8254:	1800031e 	bne	r3,zero,8264 <ad9361_gc_setup+0x12e8>
    8258:	008003c4 	movi	r2,15
    825c:	00000106 	br	8264 <ad9361_gc_setup+0x12e8>
    8260:	0005883a 	mov	r2,zero
    8264:	e0bffa15 	stw	r2,-24(fp)
	ad9361_spi_writef(spi, REG_RX1_MANUAL_LPF_GAIN,
    8268:	01003804 	movi	r4,224
    826c:	001c8300 	call	1c830 <find_first_bit>
    8270:	1007883a 	mov	r3,r2
    8274:	e0bffa17 	ldw	r2,-24(fp)
    8278:	d8800015 	stw	r2,0(sp)
    827c:	e13ffb17 	ldw	r4,-20(fp)
    8280:	01404284 	movi	r5,266
    8284:	01803804 	movi	r6,224
    8288:	180f883a 	mov	r7,r3
    828c:	000031c0 	call	31c <__ad9361_spi_writef>
		POWER_MEAS_IN_STATE_5(~0), reg);
	ad9361_spi_writef(spi, REG_RX1_MANUAL_LMT_FULL_GAIN,
    8290:	01002004 	movi	r4,128
    8294:	001c8300 	call	1c830 <find_first_bit>
    8298:	1007883a 	mov	r3,r2
    829c:	e0bffa17 	ldw	r2,-24(fp)
    82a0:	1004d0fa 	srli	r2,r2,3
    82a4:	d8800015 	stw	r2,0(sp)
    82a8:	e13ffb17 	ldw	r4,-20(fp)
    82ac:	01404244 	movi	r5,265
    82b0:	01802004 	movi	r6,128
    82b4:	180f883a 	mov	r7,r3
    82b8:	000031c0 	call	31c <__ad9361_spi_writef>
		POWER_MEAS_IN_STATE_5_MSB, reg >> 3);

	return ad9361_gc_update(phy);
    82bc:	e13ffe17 	ldw	r4,-8(fp)
    82c0:	0002eb40 	call	2eb4 <ad9361_gc_update>
}
    82c4:	e037883a 	mov	sp,fp
    82c8:	dfc00117 	ldw	ra,4(sp)
    82cc:	df000017 	ldw	fp,0(sp)
    82d0:	dec00204 	addi	sp,sp,8
    82d4:	f800283a 	ret

000082d8 <ad9361_auxdac_set>:
 * @param val_mV The value.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_auxdac_set(struct ad9361_rf_phy *phy, int32_t dac,
	int32_t val_mV)
{
    82d8:	defff604 	addi	sp,sp,-40
    82dc:	de00012e 	bgeu	sp,et,82e4 <ad9361_auxdac_set+0xc>
    82e0:	003b68fa 	trap	3
    82e4:	dfc00915 	stw	ra,36(sp)
    82e8:	df000815 	stw	fp,32(sp)
    82ec:	dc000715 	stw	r16,28(sp)
    82f0:	df000804 	addi	fp,sp,32
    82f4:	e13ffc15 	stw	r4,-16(fp)
    82f8:	e17ffd15 	stw	r5,-12(fp)
    82fc:	e1bffe15 	stw	r6,-8(fp)
	struct spi_device *spi = phy->spi;
    8300:	e0bffc17 	ldw	r2,-16(fp)
    8304:	10800117 	ldw	r2,4(r2)
    8308:	e0bffb15 	stw	r2,-20(fp)
	uint32_t val, tmp;

	dev_dbg(&phy->spi->dev, "%s DAC%"PRId32" = %"PRId32" mV", __func__, dac, val_mV);
    830c:	010000b4 	movhi	r4,2
    8310:	211c8904 	addi	r4,r4,29220
    8314:	014000b4 	movhi	r5,2
    8318:	295f2b04 	addi	r5,r5,31916
    831c:	e1bffd17 	ldw	r6,-12(fp)
    8320:	e1fffe17 	ldw	r7,-8(fp)
    8324:	001f8180 	call	1f818 <printf>
    8328:	010000b4 	movhi	r4,2
    832c:	211a7504 	addi	r4,r4,27092
    8330:	001f8180 	call	1f818 <printf>

	/* Disable DAC if val == 0, Ignored in ENSM Auto Mode */
	ad9361_spi_writef(spi, REG_AUXDAC_ENABLE_CTRL,
    8334:	e0bffd17 	ldw	r2,-12(fp)
    8338:	100491ba 	slli	r2,r2,6
    833c:	14003fcc 	andi	r16,r2,255
    8340:	e0bffd17 	ldw	r2,-12(fp)
    8344:	100491ba 	slli	r2,r2,6
    8348:	10803fcc 	andi	r2,r2,255
    834c:	1009883a 	mov	r4,r2
    8350:	001c8300 	call	1c830 <find_first_bit>
    8354:	1007883a 	mov	r3,r2
    8358:	e0bffe17 	ldw	r2,-8(fp)
    835c:	1005003a 	cmpeq	r2,r2,zero
    8360:	10803fcc 	andi	r2,r2,255
    8364:	d8800015 	stw	r2,0(sp)
    8368:	e13ffb17 	ldw	r4,-20(fp)
    836c:	014008c4 	movi	r5,35
    8370:	800d883a 	mov	r6,r16
    8374:	180f883a 	mov	r7,r3
    8378:	000031c0 	call	31c <__ad9361_spi_writef>
		AUXDAC_MANUAL_BAR(dac), val_mV ? 0 : 1);

	if (val_mV < 306)
    837c:	e0bffe17 	ldw	r2,-8(fp)
    8380:	10804c88 	cmpgei	r2,r2,306
    8384:	1000021e 	bne	r2,zero,8390 <ad9361_auxdac_set+0xb8>
		val_mV = 306;
    8388:	00804c84 	movi	r2,306
    838c:	e0bffe15 	stw	r2,-8(fp)

	if (val_mV < 1888) {
    8390:	e0bffe17 	ldw	r2,-8(fp)
    8394:	1081d808 	cmpgei	r2,r2,1888
    8398:	1000091e 	bne	r2,zero,83c0 <ad9361_auxdac_set+0xe8>
		val = ((val_mV - 306) * 1000) / 1404; /* Vref = 1V, Step = 2 */
    839c:	e0bffe17 	ldw	r2,-8(fp)
    83a0:	10bfb384 	addi	r2,r2,-306
    83a4:	1080fa24 	muli	r2,r2,1000
    83a8:	1009883a 	mov	r4,r2
    83ac:	01415f04 	movi	r5,1404
    83b0:	001d6e40 	call	1d6e4 <__divsi3>
    83b4:	e0bff915 	stw	r2,-28(fp)
		tmp = AUXDAC_1_VREF(0);
    83b8:	e03ffa15 	stw	zero,-24(fp)
    83bc:	00000906 	br	83e4 <ad9361_auxdac_set+0x10c>
	}
	else {
		val = ((val_mV - 1761) * 1000) / 1836; /* Vref = 2.5V, Step = 2 */
    83c0:	e0bffe17 	ldw	r2,-8(fp)
    83c4:	10be47c4 	addi	r2,r2,-1761
    83c8:	1080fa24 	muli	r2,r2,1000
    83cc:	1009883a 	mov	r4,r2
    83d0:	0141cb04 	movi	r5,1836
    83d4:	001d6e40 	call	1d6e4 <__divsi3>
    83d8:	e0bff915 	stw	r2,-28(fp)
		tmp = AUXDAC_1_VREF(3);
    83dc:	00800304 	movi	r2,12
    83e0:	e0bffa15 	stw	r2,-24(fp)
	}

	val = clamp_t(uint32_t, val, 0, 1023);
    83e4:	e0bff917 	ldw	r2,-28(fp)
    83e8:	10000526 	beq	r2,zero,8400 <ad9361_auxdac_set+0x128>
    83ec:	e0bff917 	ldw	r2,-28(fp)
    83f0:	10c10030 	cmpltui	r3,r2,1024
    83f4:	1800031e 	bne	r3,zero,8404 <ad9361_auxdac_set+0x12c>
    83f8:	0080ffc4 	movi	r2,1023
    83fc:	00000106 	br	8404 <ad9361_auxdac_set+0x12c>
    8400:	0005883a 	mov	r2,zero
    8404:	e0bff915 	stw	r2,-28(fp)

	switch (dac) {
    8408:	e0bffd17 	ldw	r2,-12(fp)
    840c:	10c00060 	cmpeqi	r3,r2,1
    8410:	1800031e 	bne	r3,zero,8420 <ad9361_auxdac_set+0x148>
    8414:	108000a0 	cmpeqi	r2,r2,2
    8418:	1000141e 	bne	r2,zero,846c <ad9361_auxdac_set+0x194>
    841c:	00002606 	br	84b8 <ad9361_auxdac_set+0x1e0>
	case 1:
		ad9361_spi_write(spi, REG_AUXDAC_1_WORD, val >> 2);
    8420:	e0bff917 	ldw	r2,-28(fp)
    8424:	1004d0ba 	srli	r2,r2,2
    8428:	e13ffb17 	ldw	r4,-20(fp)
    842c:	01400604 	movi	r5,24
    8430:	100d883a 	mov	r6,r2
    8434:	00002600 	call	260 <ad9361_spi_write>
		ad9361_spi_write(spi, REG_AUXDAC_1_CONFIG, AUXDAC_1_WORD_LSB(val) | tmp);
    8438:	e0bff917 	ldw	r2,-28(fp)
    843c:	10c000cc 	andi	r3,r2,3
    8440:	e0bffa17 	ldw	r2,-24(fp)
    8444:	1884b03a 	or	r2,r3,r2
    8448:	e13ffb17 	ldw	r4,-20(fp)
    844c:	01400684 	movi	r5,26
    8450:	100d883a 	mov	r6,r2
    8454:	00002600 	call	260 <ad9361_spi_write>
		phy->auxdac1_value = val_mV;
    8458:	e0bffe17 	ldw	r2,-8(fp)
    845c:	1007883a 	mov	r3,r2
    8460:	e0bffc17 	ldw	r2,-16(fp)
    8464:	10c0608d 	sth	r3,386(r2)
		break;
    8468:	00001506 	br	84c0 <ad9361_auxdac_set+0x1e8>
	case 2:
		ad9361_spi_write(spi, REG_AUXDAC_2_WORD, val >> 2);
    846c:	e0bff917 	ldw	r2,-28(fp)
    8470:	1004d0ba 	srli	r2,r2,2
    8474:	e13ffb17 	ldw	r4,-20(fp)
    8478:	01400644 	movi	r5,25
    847c:	100d883a 	mov	r6,r2
    8480:	00002600 	call	260 <ad9361_spi_write>
		ad9361_spi_write(spi, REG_AUXDAC_2_CONFIG, AUXDAC_2_WORD_LSB(val) | tmp);
    8484:	e0bff917 	ldw	r2,-28(fp)
    8488:	10c000cc 	andi	r3,r2,3
    848c:	e0bffa17 	ldw	r2,-24(fp)
    8490:	1884b03a 	or	r2,r3,r2
    8494:	e13ffb17 	ldw	r4,-20(fp)
    8498:	014006c4 	movi	r5,27
    849c:	100d883a 	mov	r6,r2
    84a0:	00002600 	call	260 <ad9361_spi_write>
		phy->auxdac2_value = val_mV;
    84a4:	e0bffe17 	ldw	r2,-8(fp)
    84a8:	1007883a 	mov	r3,r2
    84ac:	e0bffc17 	ldw	r2,-16(fp)
    84b0:	10c0610d 	sth	r3,388(r2)
		break;
    84b4:	00000206 	br	84c0 <ad9361_auxdac_set+0x1e8>
	default:
		return -EINVAL;
    84b8:	00bffa84 	movi	r2,-22
    84bc:	00000106 	br	84c4 <ad9361_auxdac_set+0x1ec>
	}

	return 0;
    84c0:	0005883a 	mov	r2,zero
}
    84c4:	e6ffff04 	addi	sp,fp,-4
    84c8:	dfc00217 	ldw	ra,8(sp)
    84cc:	df000117 	ldw	fp,4(sp)
    84d0:	dc000017 	ldw	r16,0(sp)
    84d4:	dec00304 	addi	sp,sp,12
    84d8:	f800283a 	ret

000084dc <ad9361_auxdac_get>:
 * @param phy The AD9361 state structure.
 * @param dac The DAC.
 * @return The value in case of success, negative error code otherwise.
 */
int32_t ad9361_auxdac_get(struct ad9361_rf_phy *phy, int32_t dac)
{
    84dc:	defffd04 	addi	sp,sp,-12
    84e0:	de00012e 	bgeu	sp,et,84e8 <ad9361_auxdac_get+0xc>
    84e4:	003b68fa 	trap	3
    84e8:	df000215 	stw	fp,8(sp)
    84ec:	df000204 	addi	fp,sp,8
    84f0:	e13ffe15 	stw	r4,-8(fp)
    84f4:	e17fff15 	stw	r5,-4(fp)

	switch (dac) {
    84f8:	e0bfff17 	ldw	r2,-4(fp)
    84fc:	10c00060 	cmpeqi	r3,r2,1
    8500:	1800031e 	bne	r3,zero,8510 <ad9361_auxdac_get+0x34>
    8504:	108000a0 	cmpeqi	r2,r2,2
    8508:	1000051e 	bne	r2,zero,8520 <ad9361_auxdac_get+0x44>
    850c:	00000806 	br	8530 <ad9361_auxdac_get+0x54>
	case 1:
		return phy->auxdac1_value;
    8510:	e0bffe17 	ldw	r2,-8(fp)
    8514:	1080608b 	ldhu	r2,386(r2)
    8518:	10bfffcc 	andi	r2,r2,65535
    851c:	00000506 	br	8534 <ad9361_auxdac_get+0x58>
	case 2:
		return phy->auxdac2_value;
    8520:	e0bffe17 	ldw	r2,-8(fp)
    8524:	1080610b 	ldhu	r2,388(r2)
    8528:	10bfffcc 	andi	r2,r2,65535
    852c:	00000106 	br	8534 <ad9361_auxdac_get+0x58>
	default:
		return -EINVAL;
    8530:	00bffa84 	movi	r2,-22
	}

	return 0;
}
    8534:	e037883a 	mov	sp,fp
    8538:	df000017 	ldw	fp,0(sp)
    853c:	dec00104 	addi	sp,sp,4
    8540:	f800283a 	ret

00008544 <ad9361_auxdac_setup>:
 * @param ctrl Pointer to auxdac_control structure.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_auxdac_setup(struct ad9361_rf_phy *phy,
struct auxdac_control *ctrl)
{
    8544:	defff904 	addi	sp,sp,-28
    8548:	de00012e 	bgeu	sp,et,8550 <ad9361_auxdac_setup+0xc>
    854c:	003b68fa 	trap	3
    8550:	dfc00615 	stw	ra,24(sp)
    8554:	df000515 	stw	fp,20(sp)
    8558:	df000504 	addi	fp,sp,20
    855c:	e13ffe15 	stw	r4,-8(fp)
    8560:	e17fff15 	stw	r5,-4(fp)
	struct spi_device *spi = phy->spi;
    8564:	e0bffe17 	ldw	r2,-8(fp)
    8568:	10800117 	ldw	r2,4(r2)
    856c:	e0bffc15 	stw	r2,-16(fp)
	uint8_t tmp;

	dev_dbg(&phy->spi->dev, "%s", __func__);
    8570:	010000b4 	movhi	r4,2
    8574:	211aac04 	addi	r4,r4,27312
    8578:	014000b4 	movhi	r5,2
    857c:	295f3004 	addi	r5,r5,31936
    8580:	001f8180 	call	1f818 <printf>
    8584:	010000b4 	movhi	r4,2
    8588:	211a7504 	addi	r4,r4,27092
    858c:	001f8180 	call	1f818 <printf>

	ad9361_auxdac_set(phy, 1, ctrl->dac1_default_value);
    8590:	e0bfff17 	ldw	r2,-4(fp)
    8594:	1080000b 	ldhu	r2,0(r2)
    8598:	10bfffcc 	andi	r2,r2,65535
    859c:	e13ffe17 	ldw	r4,-8(fp)
    85a0:	01400044 	movi	r5,1
    85a4:	100d883a 	mov	r6,r2
    85a8:	00082d80 	call	82d8 <ad9361_auxdac_set>
	ad9361_auxdac_set(phy, 2, ctrl->dac2_default_value);
    85ac:	e0bfff17 	ldw	r2,-4(fp)
    85b0:	1080008b 	ldhu	r2,2(r2)
    85b4:	10bfffcc 	andi	r2,r2,65535
    85b8:	e13ffe17 	ldw	r4,-8(fp)
    85bc:	01400084 	movi	r5,2
    85c0:	100d883a 	mov	r6,r2
    85c4:	00082d80 	call	82d8 <ad9361_auxdac_set>

	tmp = ~(AUXDAC_AUTO_TX_BAR(ctrl->dac2_in_tx_en << 1 | ctrl->dac1_in_tx_en) |
    85c8:	e0bfff17 	ldw	r2,-4(fp)
    85cc:	10800243 	ldbu	r2,9(r2)
    85d0:	10803fcc 	andi	r2,r2,255
    85d4:	1085883a 	add	r2,r2,r2
    85d8:	1007883a 	mov	r3,r2
    85dc:	e0bfff17 	ldw	r2,-4(fp)
    85e0:	10800183 	ldbu	r2,6(r2)
    85e4:	10803fcc 	andi	r2,r2,255
    85e8:	1884b03a 	or	r2,r3,r2
    85ec:	108000cc 	andi	r2,r2,3
    85f0:	1004913a 	slli	r2,r2,4
    85f4:	1007883a 	mov	r3,r2
		AUXDAC_AUTO_RX_BAR(ctrl->dac2_in_rx_en << 1 | ctrl->dac1_in_rx_en) |
    85f8:	e0bfff17 	ldw	r2,-4(fp)
    85fc:	10800203 	ldbu	r2,8(r2)
    8600:	10803fcc 	andi	r2,r2,255
    8604:	1085883a 	add	r2,r2,r2
    8608:	1009883a 	mov	r4,r2
    860c:	e0bfff17 	ldw	r2,-4(fp)
    8610:	10800143 	ldbu	r2,5(r2)
    8614:	10803fcc 	andi	r2,r2,255
    8618:	2084b03a 	or	r2,r4,r2
    861c:	108000cc 	andi	r2,r2,3
    8620:	1085883a 	add	r2,r2,r2
    8624:	1085883a 	add	r2,r2,r2
	dev_dbg(&phy->spi->dev, "%s", __func__);

	ad9361_auxdac_set(phy, 1, ctrl->dac1_default_value);
	ad9361_auxdac_set(phy, 2, ctrl->dac2_default_value);

	tmp = ~(AUXDAC_AUTO_TX_BAR(ctrl->dac2_in_tx_en << 1 | ctrl->dac1_in_tx_en) |
    8628:	1884b03a 	or	r2,r3,r2
    862c:	1007883a 	mov	r3,r2
		AUXDAC_AUTO_RX_BAR(ctrl->dac2_in_rx_en << 1 | ctrl->dac1_in_rx_en) |
		AUXDAC_INIT_BAR(ctrl->dac2_in_alert_en << 1 | ctrl->dac1_in_alert_en));
    8630:	e0bfff17 	ldw	r2,-4(fp)
    8634:	10800283 	ldbu	r2,10(r2)
    8638:	10803fcc 	andi	r2,r2,255
    863c:	1085883a 	add	r2,r2,r2
	dev_dbg(&phy->spi->dev, "%s", __func__);

	ad9361_auxdac_set(phy, 1, ctrl->dac1_default_value);
	ad9361_auxdac_set(phy, 2, ctrl->dac2_default_value);

	tmp = ~(AUXDAC_AUTO_TX_BAR(ctrl->dac2_in_tx_en << 1 | ctrl->dac1_in_tx_en) |
    8640:	1009883a 	mov	r4,r2
		AUXDAC_AUTO_RX_BAR(ctrl->dac2_in_rx_en << 1 | ctrl->dac1_in_rx_en) |
		AUXDAC_INIT_BAR(ctrl->dac2_in_alert_en << 1 | ctrl->dac1_in_alert_en));
    8644:	e0bfff17 	ldw	r2,-4(fp)
    8648:	108001c3 	ldbu	r2,7(r2)
	dev_dbg(&phy->spi->dev, "%s", __func__);

	ad9361_auxdac_set(phy, 1, ctrl->dac1_default_value);
	ad9361_auxdac_set(phy, 2, ctrl->dac2_default_value);

	tmp = ~(AUXDAC_AUTO_TX_BAR(ctrl->dac2_in_tx_en << 1 | ctrl->dac1_in_tx_en) |
    864c:	2084b03a 	or	r2,r4,r2
    8650:	108000cc 	andi	r2,r2,3
    8654:	1884b03a 	or	r2,r3,r2
    8658:	0084303a 	nor	r2,zero,r2
    865c:	e0bffd05 	stb	r2,-12(fp)
		AUXDAC_AUTO_RX_BAR(ctrl->dac2_in_rx_en << 1 | ctrl->dac1_in_rx_en) |
		AUXDAC_INIT_BAR(ctrl->dac2_in_alert_en << 1 | ctrl->dac1_in_alert_en));

	ad9361_spi_writef(spi, REG_AUXDAC_ENABLE_CTRL,
    8660:	01000fc4 	movi	r4,63
    8664:	001c8300 	call	1c830 <find_first_bit>
    8668:	1007883a 	mov	r3,r2
    866c:	e0bffd03 	ldbu	r2,-12(fp)
    8670:	d8800015 	stw	r2,0(sp)
    8674:	e13ffc17 	ldw	r4,-16(fp)
    8678:	014008c4 	movi	r5,35
    867c:	01800fc4 	movi	r6,63
    8680:	180f883a 	mov	r7,r3
    8684:	000031c0 	call	31c <__ad9361_spi_writef>
		AUXDAC_AUTO_TX_BAR(~0) |
		AUXDAC_AUTO_RX_BAR(~0) |
		AUXDAC_INIT_BAR(~0),
		tmp); /* Auto Control */

	ad9361_spi_writef(spi, REG_EXTERNAL_LNA_CTRL,
    8688:	01002004 	movi	r4,128
    868c:	001c8300 	call	1c830 <find_first_bit>
    8690:	1007883a 	mov	r3,r2
    8694:	e0bfff17 	ldw	r2,-4(fp)
    8698:	10800103 	ldbu	r2,4(r2)
    869c:	10803fcc 	andi	r2,r2,255
    86a0:	d8800015 	stw	r2,0(sp)
    86a4:	e13ffc17 	ldw	r4,-16(fp)
    86a8:	01400984 	movi	r5,38
    86ac:	01802004 	movi	r6,128
    86b0:	180f883a 	mov	r7,r3
    86b4:	000031c0 	call	31c <__ad9361_spi_writef>
		AUXDAC_MANUAL_SELECT, ctrl->auxdac_manual_mode_en);
	ad9361_spi_write(spi, REG_AUXDAC1_RX_DELAY, ctrl->dac1_rx_delay_us);
    86b8:	e0bfff17 	ldw	r2,-4(fp)
    86bc:	108002c3 	ldbu	r2,11(r2)
    86c0:	10803fcc 	andi	r2,r2,255
    86c4:	e13ffc17 	ldw	r4,-16(fp)
    86c8:	01400c04 	movi	r5,48
    86cc:	100d883a 	mov	r6,r2
    86d0:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_AUXDAC1_TX_DELAY, ctrl->dac1_tx_delay_us);
    86d4:	e0bfff17 	ldw	r2,-4(fp)
    86d8:	10800303 	ldbu	r2,12(r2)
    86dc:	10803fcc 	andi	r2,r2,255
    86e0:	e13ffc17 	ldw	r4,-16(fp)
    86e4:	01400c44 	movi	r5,49
    86e8:	100d883a 	mov	r6,r2
    86ec:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_AUXDAC2_RX_DELAY, ctrl->dac2_rx_delay_us);
    86f0:	e0bfff17 	ldw	r2,-4(fp)
    86f4:	10800343 	ldbu	r2,13(r2)
    86f8:	10803fcc 	andi	r2,r2,255
    86fc:	e13ffc17 	ldw	r4,-16(fp)
    8700:	01400c84 	movi	r5,50
    8704:	100d883a 	mov	r6,r2
    8708:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_AUXDAC2_TX_DELAY, ctrl->dac2_tx_delay_us);
    870c:	e0bfff17 	ldw	r2,-4(fp)
    8710:	10800383 	ldbu	r2,14(r2)
    8714:	10803fcc 	andi	r2,r2,255
    8718:	e13ffc17 	ldw	r4,-16(fp)
    871c:	01400cc4 	movi	r5,51
    8720:	100d883a 	mov	r6,r2
    8724:	00002600 	call	260 <ad9361_spi_write>

	return 0;
    8728:	0005883a 	mov	r2,zero
}
    872c:	e037883a 	mov	sp,fp
    8730:	dfc00117 	ldw	ra,4(sp)
    8734:	df000017 	ldw	fp,0(sp)
    8738:	dec00204 	addi	sp,sp,8
    873c:	f800283a 	ret

00008740 <ad9361_auxadc_setup>:
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_auxadc_setup(struct ad9361_rf_phy *phy,
struct auxadc_control *ctrl,
	uint32_t bbpll_freq)
{
    8740:	defff804 	addi	sp,sp,-32
    8744:	de00012e 	bgeu	sp,et,874c <ad9361_auxadc_setup+0xc>
    8748:	003b68fa 	trap	3
    874c:	dfc00715 	stw	ra,28(sp)
    8750:	df000615 	stw	fp,24(sp)
    8754:	dc000515 	stw	r16,20(sp)
    8758:	df000604 	addi	fp,sp,24
    875c:	e13ffc15 	stw	r4,-16(fp)
    8760:	e17ffd15 	stw	r5,-12(fp)
    8764:	e1bffe15 	stw	r6,-8(fp)
	struct spi_device *spi = phy->spi;
    8768:	e0bffc17 	ldw	r2,-16(fp)
    876c:	10800117 	ldw	r2,4(r2)
    8770:	e0bffa15 	stw	r2,-24(fp)
	uint32_t val;

	dev_dbg(&phy->spi->dev, "%s", __func__);
    8774:	010000b4 	movhi	r4,2
    8778:	211aac04 	addi	r4,r4,27312
    877c:	014000b4 	movhi	r5,2
    8780:	295f3504 	addi	r5,r5,31956
    8784:	001f8180 	call	1f818 <printf>
    8788:	010000b4 	movhi	r4,2
    878c:	211a7504 	addi	r4,r4,27092
    8790:	001f8180 	call	1f818 <printf>

	val = DIV_ROUND_CLOSEST(ctrl->temp_time_inteval_ms *
    8794:	e0bffd17 	ldw	r2,-12(fp)
    8798:	14000117 	ldw	r16,4(r2)
    879c:	e0bffe17 	ldw	r2,-8(fp)
    87a0:	1009883a 	mov	r4,r2
    87a4:	0140fa04 	movi	r5,1000
    87a8:	001d7a40 	call	1d7a4 <__udivsi3>
    87ac:	8087383a 	mul	r3,r16,r2
    87b0:	00840034 	movhi	r2,4096
    87b4:	1885883a 	add	r2,r3,r2
    87b8:	1004d77a 	srli	r2,r2,29
    87bc:	e0bffb15 	stw	r2,-20(fp)
		(bbpll_freq / 1000UL), (1 << 29));

	ad9361_spi_write(spi, REG_TEMP_OFFSET, ctrl->offset);
    87c0:	e0bffd17 	ldw	r2,-12(fp)
    87c4:	10800003 	ldbu	r2,0(r2)
    87c8:	10803fcc 	andi	r2,r2,255
    87cc:	1080201c 	xori	r2,r2,128
    87d0:	10bfe004 	addi	r2,r2,-128
    87d4:	e13ffa17 	ldw	r4,-24(fp)
    87d8:	014002c4 	movi	r5,11
    87dc:	100d883a 	mov	r6,r2
    87e0:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_START_TEMP_READING, 0x00);
    87e4:	e13ffa17 	ldw	r4,-24(fp)
    87e8:	01400304 	movi	r5,12
    87ec:	000d883a 	mov	r6,zero
    87f0:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_TEMP_SENSE2,
		MEASUREMENT_TIME_INTERVAL(val) |
    87f4:	e0bffb17 	ldw	r2,-20(fp)
    87f8:	1085883a 	add	r2,r2,r2
    87fc:	10c03fcc 	andi	r3,r2,255
		(ctrl->periodic_temp_measuremnt ?
    8800:	e0bffd17 	ldw	r2,-12(fp)
    8804:	10800303 	ldbu	r2,12(r2)
	val = DIV_ROUND_CLOSEST(ctrl->temp_time_inteval_ms *
		(bbpll_freq / 1000UL), (1 << 29));

	ad9361_spi_write(spi, REG_TEMP_OFFSET, ctrl->offset);
	ad9361_spi_write(spi, REG_START_TEMP_READING, 0x00);
	ad9361_spi_write(spi, REG_TEMP_SENSE2,
    8808:	10803fcc 	andi	r2,r2,255
    880c:	10000226 	beq	r2,zero,8818 <ad9361_auxadc_setup+0xd8>
    8810:	00800044 	movi	r2,1
    8814:	00000106 	br	881c <ad9361_auxadc_setup+0xdc>
    8818:	0005883a 	mov	r2,zero
    881c:	1884b03a 	or	r2,r3,r2
    8820:	e13ffa17 	ldw	r4,-24(fp)
    8824:	01400344 	movi	r5,13
    8828:	100d883a 	mov	r6,r2
    882c:	00002600 	call	260 <ad9361_spi_write>
		MEASUREMENT_TIME_INTERVAL(val) |
		(ctrl->periodic_temp_measuremnt ?
	TEMP_SENSE_PERIODIC_ENABLE : 0));
	ad9361_spi_write(spi, REG_TEMP_SENSOR_CONFIG,
		TEMP_SENSOR_DECIMATION(
    8830:	e0bffd17 	ldw	r2,-12(fp)
    8834:	10800217 	ldw	r2,8(r2)
    8838:	1009883a 	mov	r4,r2
    883c:	001c5b40 	call	1c5b4 <ilog2>
	ad9361_spi_write(spi, REG_START_TEMP_READING, 0x00);
	ad9361_spi_write(spi, REG_TEMP_SENSE2,
		MEASUREMENT_TIME_INTERVAL(val) |
		(ctrl->periodic_temp_measuremnt ?
	TEMP_SENSE_PERIODIC_ENABLE : 0));
	ad9361_spi_write(spi, REG_TEMP_SENSOR_CONFIG,
    8840:	108001cc 	andi	r2,r2,7
    8844:	e13ffa17 	ldw	r4,-24(fp)
    8848:	014003c4 	movi	r5,15
    884c:	100d883a 	mov	r6,r2
    8850:	00002600 	call	260 <ad9361_spi_write>
		TEMP_SENSOR_DECIMATION(
		ilog2(ctrl->temp_sensor_decimation) - 8));
	ad9361_spi_write(spi, REG_AUXADC_CLOCK_DIVIDER,
		bbpll_freq / ctrl->auxadc_clock_rate);
    8854:	e0bffd17 	ldw	r2,-12(fp)
    8858:	10800417 	ldw	r2,16(r2)
		(ctrl->periodic_temp_measuremnt ?
	TEMP_SENSE_PERIODIC_ENABLE : 0));
	ad9361_spi_write(spi, REG_TEMP_SENSOR_CONFIG,
		TEMP_SENSOR_DECIMATION(
		ilog2(ctrl->temp_sensor_decimation) - 8));
	ad9361_spi_write(spi, REG_AUXADC_CLOCK_DIVIDER,
    885c:	e13ffe17 	ldw	r4,-8(fp)
    8860:	100b883a 	mov	r5,r2
    8864:	001d7a40 	call	1d7a4 <__udivsi3>
    8868:	e13ffa17 	ldw	r4,-24(fp)
    886c:	01400704 	movi	r5,28
    8870:	100d883a 	mov	r6,r2
    8874:	00002600 	call	260 <ad9361_spi_write>
		bbpll_freq / ctrl->auxadc_clock_rate);
	ad9361_spi_write(spi, REG_AUXADC_CONFIG,
		AUX_ADC_DECIMATION(
    8878:	e0bffd17 	ldw	r2,-12(fp)
    887c:	10800517 	ldw	r2,20(r2)
    8880:	1009883a 	mov	r4,r2
    8884:	001c5b40 	call	1c5b4 <ilog2>
    8888:	108001cc 	andi	r2,r2,7
    888c:	1085883a 	add	r2,r2,r2
	ad9361_spi_write(spi, REG_TEMP_SENSOR_CONFIG,
		TEMP_SENSOR_DECIMATION(
		ilog2(ctrl->temp_sensor_decimation) - 8));
	ad9361_spi_write(spi, REG_AUXADC_CLOCK_DIVIDER,
		bbpll_freq / ctrl->auxadc_clock_rate);
	ad9361_spi_write(spi, REG_AUXADC_CONFIG,
    8890:	e13ffa17 	ldw	r4,-24(fp)
    8894:	01400744 	movi	r5,29
    8898:	100d883a 	mov	r6,r2
    889c:	00002600 	call	260 <ad9361_spi_write>
		AUX_ADC_DECIMATION(
		ilog2(ctrl->auxadc_decimation) - 8));

	return 0;
    88a0:	0005883a 	mov	r2,zero
}
    88a4:	e6ffff04 	addi	sp,fp,-4
    88a8:	dfc00217 	ldw	ra,8(sp)
    88ac:	df000117 	ldw	fp,4(sp)
    88b0:	dc000017 	ldw	r16,0(sp)
    88b4:	dec00304 	addi	sp,sp,12
    88b8:	f800283a 	ret

000088bc <ad9361_get_temp>:
 * Get the measured temperature of the device.
 * @param phy The AD9361 state structure.
 * @return The measured temperature of the device.
 */
int32_t ad9361_get_temp(struct ad9361_rf_phy *phy)
{
    88bc:	defffa04 	addi	sp,sp,-24
    88c0:	de00012e 	bgeu	sp,et,88c8 <ad9361_get_temp+0xc>
    88c4:	003b68fa 	trap	3
    88c8:	dfc00515 	stw	ra,20(sp)
    88cc:	df000415 	stw	fp,16(sp)
    88d0:	dc000315 	stw	r16,12(sp)
    88d4:	df000404 	addi	fp,sp,16
    88d8:	e13ffe15 	stw	r4,-8(fp)
	uint32_t val;

	ad9361_spi_writef(phy->spi, REG_AUXADC_CONFIG, AUXADC_POWER_DOWN, 1);
    88dc:	e0bffe17 	ldw	r2,-8(fp)
    88e0:	14000117 	ldw	r16,4(r2)
    88e4:	01000044 	movi	r4,1
    88e8:	001c8300 	call	1c830 <find_first_bit>
    88ec:	1007883a 	mov	r3,r2
    88f0:	00800044 	movi	r2,1
    88f4:	d8800015 	stw	r2,0(sp)
    88f8:	8009883a 	mov	r4,r16
    88fc:	01400744 	movi	r5,29
    8900:	01800044 	movi	r6,1
    8904:	180f883a 	mov	r7,r3
    8908:	000031c0 	call	31c <__ad9361_spi_writef>
	val = ad9361_spi_read(phy->spi, REG_TEMPERATURE);
    890c:	e0bffe17 	ldw	r2,-8(fp)
    8910:	10800117 	ldw	r2,4(r2)
    8914:	1009883a 	mov	r4,r2
    8918:	01400384 	movi	r5,14
    891c:	00001500 	call	150 <ad9361_spi_read>
    8920:	e0bffd15 	stw	r2,-12(fp)
	ad9361_spi_writef(phy->spi, REG_AUXADC_CONFIG, AUXADC_POWER_DOWN, 0);
    8924:	e0bffe17 	ldw	r2,-8(fp)
    8928:	14000117 	ldw	r16,4(r2)
    892c:	01000044 	movi	r4,1
    8930:	001c8300 	call	1c830 <find_first_bit>
    8934:	d8000015 	stw	zero,0(sp)
    8938:	8009883a 	mov	r4,r16
    893c:	01400744 	movi	r5,29
    8940:	01800044 	movi	r6,1
    8944:	100f883a 	mov	r7,r2
    8948:	000031c0 	call	31c <__ad9361_spi_writef>

	return DIV_ROUND_CLOSEST(val * 1000000, 1140);
    894c:	e0fffd17 	ldw	r3,-12(fp)
    8950:	008003f4 	movhi	r2,15
    8954:	10909004 	addi	r2,r2,16960
    8958:	1885383a 	mul	r2,r3,r2
    895c:	10808e84 	addi	r2,r2,570
    8960:	1009883a 	mov	r4,r2
    8964:	01411d04 	movi	r5,1140
    8968:	001d7a40 	call	1d7a4 <__udivsi3>
}
    896c:	e6ffff04 	addi	sp,fp,-4
    8970:	dfc00217 	ldw	ra,8(sp)
    8974:	df000117 	ldw	fp,4(sp)
    8978:	dc000017 	ldw	r16,0(sp)
    897c:	dec00304 	addi	sp,sp,12
    8980:	f800283a 	ret

00008984 <ad9361_get_auxadc>:
 * Get the Aux ADC value.
 * @param phy The AD9361 state structure.
 * @return The value in case of success, negative error code otherwise.
 */
int32_t ad9361_get_auxadc(struct ad9361_rf_phy *phy)
{
    8984:	defffa04 	addi	sp,sp,-24
    8988:	de00012e 	bgeu	sp,et,8990 <ad9361_get_auxadc+0xc>
    898c:	003b68fa 	trap	3
    8990:	dfc00515 	stw	ra,20(sp)
    8994:	df000415 	stw	fp,16(sp)
    8998:	dc000315 	stw	r16,12(sp)
    899c:	df000404 	addi	fp,sp,16
    89a0:	e13ffe15 	stw	r4,-8(fp)
	uint8_t buf[2];

	ad9361_spi_writef(phy->spi, REG_AUXADC_CONFIG, AUXADC_POWER_DOWN, 1);
    89a4:	e0bffe17 	ldw	r2,-8(fp)
    89a8:	14000117 	ldw	r16,4(r2)
    89ac:	01000044 	movi	r4,1
    89b0:	001c8300 	call	1c830 <find_first_bit>
    89b4:	1007883a 	mov	r3,r2
    89b8:	00800044 	movi	r2,1
    89bc:	d8800015 	stw	r2,0(sp)
    89c0:	8009883a 	mov	r4,r16
    89c4:	01400744 	movi	r5,29
    89c8:	01800044 	movi	r6,1
    89cc:	180f883a 	mov	r7,r3
    89d0:	000031c0 	call	31c <__ad9361_spi_writef>
	ad9361_spi_readm(phy->spi, REG_AUXADC_LSB, buf, 2);
    89d4:	e0bffe17 	ldw	r2,-8(fp)
    89d8:	10800117 	ldw	r2,4(r2)
    89dc:	1009883a 	mov	r4,r2
    89e0:	014007c4 	movi	r5,31
    89e4:	e1bffd04 	addi	r6,fp,-12
    89e8:	01c00084 	movi	r7,2
    89ec:	00000740 	call	74 <ad9361_spi_readm>
	ad9361_spi_writef(phy->spi, REG_AUXADC_CONFIG, AUXADC_POWER_DOWN, 0);
    89f0:	e0bffe17 	ldw	r2,-8(fp)
    89f4:	14000117 	ldw	r16,4(r2)
    89f8:	01000044 	movi	r4,1
    89fc:	001c8300 	call	1c830 <find_first_bit>
    8a00:	d8000015 	stw	zero,0(sp)
    8a04:	8009883a 	mov	r4,r16
    8a08:	01400744 	movi	r5,29
    8a0c:	01800044 	movi	r6,1
    8a10:	100f883a 	mov	r7,r2
    8a14:	000031c0 	call	31c <__ad9361_spi_writef>

	return (buf[1] << 4) | AUXADC_WORD_LSB(buf[0]);
    8a18:	e0bffd43 	ldbu	r2,-11(fp)
    8a1c:	10803fcc 	andi	r2,r2,255
    8a20:	1006913a 	slli	r3,r2,4
    8a24:	e0bffd03 	ldbu	r2,-12(fp)
    8a28:	10803fcc 	andi	r2,r2,255
    8a2c:	108003cc 	andi	r2,r2,15
    8a30:	1884b03a 	or	r2,r3,r2
}
    8a34:	e6ffff04 	addi	sp,fp,-4
    8a38:	dfc00217 	ldw	ra,8(sp)
    8a3c:	df000117 	ldw	fp,4(sp)
    8a40:	dc000017 	ldw	r16,0(sp)
    8a44:	dec00304 	addi	sp,sp,12
    8a48:	f800283a 	ret

00008a4c <ad9361_ctrl_outs_setup>:
 * @param ctrl The Control Output pins settings.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_ctrl_outs_setup(struct ad9361_rf_phy *phy,
struct ctrl_outs_control *ctrl)
{
    8a4c:	defffb04 	addi	sp,sp,-20
    8a50:	de00012e 	bgeu	sp,et,8a58 <ad9361_ctrl_outs_setup+0xc>
    8a54:	003b68fa 	trap	3
    8a58:	dfc00415 	stw	ra,16(sp)
    8a5c:	df000315 	stw	fp,12(sp)
    8a60:	df000304 	addi	fp,sp,12
    8a64:	e13ffe15 	stw	r4,-8(fp)
    8a68:	e17fff15 	stw	r5,-4(fp)
	struct spi_device *spi = phy->spi;
    8a6c:	e0bffe17 	ldw	r2,-8(fp)
    8a70:	10800117 	ldw	r2,4(r2)
    8a74:	e0bffd15 	stw	r2,-12(fp)

	dev_dbg(&phy->spi->dev, "%s", __func__);
    8a78:	010000b4 	movhi	r4,2
    8a7c:	211aac04 	addi	r4,r4,27312
    8a80:	014000b4 	movhi	r5,2
    8a84:	295f3a04 	addi	r5,r5,31976
    8a88:	001f8180 	call	1f818 <printf>
    8a8c:	010000b4 	movhi	r4,2
    8a90:	211a7504 	addi	r4,r4,27092
    8a94:	001f8180 	call	1f818 <printf>

	ad9361_spi_write(spi, REG_CTRL_OUTPUT_POINTER, ctrl->index); // Ctrl Out index
    8a98:	e0bfff17 	ldw	r2,-4(fp)
    8a9c:	10800003 	ldbu	r2,0(r2)
    8aa0:	10803fcc 	andi	r2,r2,255
    8aa4:	e13ffd17 	ldw	r4,-12(fp)
    8aa8:	01400d44 	movi	r5,53
    8aac:	100d883a 	mov	r6,r2
    8ab0:	00002600 	call	260 <ad9361_spi_write>
	return ad9361_spi_write(spi, REG_CTRL_OUTPUT_ENABLE, ctrl->en_mask); // Ctrl Out [7:0] output enable
    8ab4:	e0bfff17 	ldw	r2,-4(fp)
    8ab8:	10800043 	ldbu	r2,1(r2)
    8abc:	10803fcc 	andi	r2,r2,255
    8ac0:	e13ffd17 	ldw	r4,-12(fp)
    8ac4:	01400d84 	movi	r5,54
    8ac8:	100d883a 	mov	r6,r2
    8acc:	00002600 	call	260 <ad9361_spi_write>
}
    8ad0:	e037883a 	mov	sp,fp
    8ad4:	dfc00117 	ldw	ra,4(sp)
    8ad8:	df000017 	ldw	fp,0(sp)
    8adc:	dec00204 	addi	sp,sp,8
    8ae0:	f800283a 	ret

00008ae4 <ad9361_gpo_setup>:
 * Setup the GPO pins.
 * @param phy The AD9361 state structure.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_gpo_setup(struct ad9361_rf_phy *phy, struct gpo_control *ctrl)
{
    8ae4:	defffb04 	addi	sp,sp,-20
    8ae8:	de00012e 	bgeu	sp,et,8af0 <ad9361_gpo_setup+0xc>
    8aec:	003b68fa 	trap	3
    8af0:	dfc00415 	stw	ra,16(sp)
    8af4:	df000315 	stw	fp,12(sp)
    8af8:	df000304 	addi	fp,sp,12
    8afc:	e13ffe15 	stw	r4,-8(fp)
    8b00:	e17fff15 	stw	r5,-4(fp)
	struct spi_device *spi = phy->spi;
    8b04:	e0bffe17 	ldw	r2,-8(fp)
    8b08:	10800117 	ldw	r2,4(r2)
    8b0c:	e0bffd15 	stw	r2,-12(fp)

	dev_dbg(&phy->spi->dev, "%s", __func__);
    8b10:	010000b4 	movhi	r4,2
    8b14:	211aac04 	addi	r4,r4,27312
    8b18:	014000b4 	movhi	r5,2
    8b1c:	295f4004 	addi	r5,r5,32000
    8b20:	001f8180 	call	1f818 <printf>
    8b24:	010000b4 	movhi	r4,2
    8b28:	211a7504 	addi	r4,r4,27092
    8b2c:	001f8180 	call	1f818 <printf>

	ad9361_spi_write(spi, REG_AUTO_GPO,
			 GPO_ENABLE_AUTO_RX(ctrl->gpo0_slave_rx_en |
    8b30:	e0bfff17 	ldw	r2,-4(fp)
    8b34:	10800103 	ldbu	r2,4(r2)
    8b38:	10c03fcc 	andi	r3,r2,255
    8b3c:	e0bfff17 	ldw	r2,-4(fp)
    8b40:	10800183 	ldbu	r2,6(r2)
    8b44:	10803fcc 	andi	r2,r2,255
    8b48:	1085883a 	add	r2,r2,r2
    8b4c:	1886b03a 	or	r3,r3,r2
    8b50:	e0bfff17 	ldw	r2,-4(fp)
    8b54:	10800203 	ldbu	r2,8(r2)
    8b58:	10803fcc 	andi	r2,r2,255
    8b5c:	1085883a 	add	r2,r2,r2
    8b60:	1085883a 	add	r2,r2,r2
    8b64:	1886b03a 	or	r3,r3,r2
    8b68:	e0bfff17 	ldw	r2,-4(fp)
    8b6c:	10800283 	ldbu	r2,10(r2)
    8b70:	10803fcc 	andi	r2,r2,255
    8b74:	100490fa 	slli	r2,r2,3
    8b78:	1884b03a 	or	r2,r3,r2
    8b7c:	1004913a 	slli	r2,r2,4
    8b80:	10c03fcc 	andi	r3,r2,255
				(ctrl->gpo1_slave_rx_en << 1) |
				(ctrl->gpo2_slave_rx_en << 2) |
				(ctrl->gpo3_slave_rx_en << 3)) |
			 GPO_ENABLE_AUTO_TX(ctrl->gpo0_slave_tx_en |
    8b84:	e0bfff17 	ldw	r2,-4(fp)
    8b88:	10800143 	ldbu	r2,5(r2)
    8b8c:	11003fcc 	andi	r4,r2,255
    8b90:	e0bfff17 	ldw	r2,-4(fp)
    8b94:	108001c3 	ldbu	r2,7(r2)
    8b98:	10803fcc 	andi	r2,r2,255
    8b9c:	1085883a 	add	r2,r2,r2
    8ba0:	2088b03a 	or	r4,r4,r2
    8ba4:	e0bfff17 	ldw	r2,-4(fp)
    8ba8:	10800243 	ldbu	r2,9(r2)
    8bac:	10803fcc 	andi	r2,r2,255
    8bb0:	1085883a 	add	r2,r2,r2
    8bb4:	1085883a 	add	r2,r2,r2
    8bb8:	2088b03a 	or	r4,r4,r2
    8bbc:	e0bfff17 	ldw	r2,-4(fp)
    8bc0:	108002c3 	ldbu	r2,11(r2)
    8bc4:	10803fcc 	andi	r2,r2,255
    8bc8:	100490fa 	slli	r2,r2,3
    8bcc:	2084b03a 	or	r2,r4,r2
    8bd0:	108003cc 	andi	r2,r2,15

	ad9361_spi_write(spi, REG_AUTO_GPO,
			 GPO_ENABLE_AUTO_RX(ctrl->gpo0_slave_rx_en |
				(ctrl->gpo1_slave_rx_en << 1) |
				(ctrl->gpo2_slave_rx_en << 2) |
				(ctrl->gpo3_slave_rx_en << 3)) |
    8bd4:	1884b03a 	or	r2,r3,r2
{
	struct spi_device *spi = phy->spi;

	dev_dbg(&phy->spi->dev, "%s", __func__);

	ad9361_spi_write(spi, REG_AUTO_GPO,
    8bd8:	e13ffd17 	ldw	r4,-12(fp)
    8bdc:	01400804 	movi	r5,32
    8be0:	100d883a 	mov	r6,r2
    8be4:	00002600 	call	260 <ad9361_spi_write>
				(ctrl->gpo1_slave_tx_en << 1) |
				(ctrl->gpo2_slave_tx_en << 2) |
				(ctrl->gpo3_slave_tx_en << 3)));

	ad9361_spi_write(spi, REG_GPO_FORCE_AND_INIT,
			 GPO_INIT_STATE(ctrl->gpo0_inactive_state_high_en |
    8be8:	e0bfff17 	ldw	r2,-4(fp)
    8bec:	10800003 	ldbu	r2,0(r2)
    8bf0:	10c03fcc 	andi	r3,r2,255
    8bf4:	e0bfff17 	ldw	r2,-4(fp)
    8bf8:	10800043 	ldbu	r2,1(r2)
    8bfc:	10803fcc 	andi	r2,r2,255
    8c00:	1085883a 	add	r2,r2,r2
    8c04:	1886b03a 	or	r3,r3,r2
    8c08:	e0bfff17 	ldw	r2,-4(fp)
    8c0c:	10800083 	ldbu	r2,2(r2)
    8c10:	10803fcc 	andi	r2,r2,255
    8c14:	1085883a 	add	r2,r2,r2
    8c18:	1085883a 	add	r2,r2,r2
    8c1c:	1886b03a 	or	r3,r3,r2
    8c20:	e0bfff17 	ldw	r2,-4(fp)
    8c24:	108000c3 	ldbu	r2,3(r2)
    8c28:	10803fcc 	andi	r2,r2,255
    8c2c:	100490fa 	slli	r2,r2,3
    8c30:	1884b03a 	or	r2,r3,r2
			 GPO_ENABLE_AUTO_TX(ctrl->gpo0_slave_tx_en |
				(ctrl->gpo1_slave_tx_en << 1) |
				(ctrl->gpo2_slave_tx_en << 2) |
				(ctrl->gpo3_slave_tx_en << 3)));

	ad9361_spi_write(spi, REG_GPO_FORCE_AND_INIT,
    8c34:	108003cc 	andi	r2,r2,15
    8c38:	e13ffd17 	ldw	r4,-12(fp)
    8c3c:	014009c4 	movi	r5,39
    8c40:	100d883a 	mov	r6,r2
    8c44:	00002600 	call	260 <ad9361_spi_write>
			 GPO_INIT_STATE(ctrl->gpo0_inactive_state_high_en |
				(ctrl->gpo1_inactive_state_high_en << 1) |
				(ctrl->gpo2_inactive_state_high_en << 2) |
				(ctrl->gpo3_inactive_state_high_en << 3)));

	ad9361_spi_write(spi, REG_GPO0_RX_DELAY, ctrl->gpo0_rx_delay_us);
    8c48:	e0bfff17 	ldw	r2,-4(fp)
    8c4c:	10800303 	ldbu	r2,12(r2)
    8c50:	10803fcc 	andi	r2,r2,255
    8c54:	e13ffd17 	ldw	r4,-12(fp)
    8c58:	01400a04 	movi	r5,40
    8c5c:	100d883a 	mov	r6,r2
    8c60:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_GPO0_TX_DELAY, ctrl->gpo0_tx_delay_us);
    8c64:	e0bfff17 	ldw	r2,-4(fp)
    8c68:	10800343 	ldbu	r2,13(r2)
    8c6c:	10803fcc 	andi	r2,r2,255
    8c70:	e13ffd17 	ldw	r4,-12(fp)
    8c74:	01400b04 	movi	r5,44
    8c78:	100d883a 	mov	r6,r2
    8c7c:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_GPO1_RX_DELAY, ctrl->gpo1_rx_delay_us);
    8c80:	e0bfff17 	ldw	r2,-4(fp)
    8c84:	10800383 	ldbu	r2,14(r2)
    8c88:	10803fcc 	andi	r2,r2,255
    8c8c:	e13ffd17 	ldw	r4,-12(fp)
    8c90:	01400a44 	movi	r5,41
    8c94:	100d883a 	mov	r6,r2
    8c98:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_GPO1_TX_DELAY, ctrl->gpo1_tx_delay_us);
    8c9c:	e0bfff17 	ldw	r2,-4(fp)
    8ca0:	108003c3 	ldbu	r2,15(r2)
    8ca4:	10803fcc 	andi	r2,r2,255
    8ca8:	e13ffd17 	ldw	r4,-12(fp)
    8cac:	01400b44 	movi	r5,45
    8cb0:	100d883a 	mov	r6,r2
    8cb4:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_GPO2_RX_DELAY, ctrl->gpo2_rx_delay_us);
    8cb8:	e0bfff17 	ldw	r2,-4(fp)
    8cbc:	10800403 	ldbu	r2,16(r2)
    8cc0:	10803fcc 	andi	r2,r2,255
    8cc4:	e13ffd17 	ldw	r4,-12(fp)
    8cc8:	01400a84 	movi	r5,42
    8ccc:	100d883a 	mov	r6,r2
    8cd0:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_GPO2_TX_DELAY, ctrl->gpo2_tx_delay_us);
    8cd4:	e0bfff17 	ldw	r2,-4(fp)
    8cd8:	10800443 	ldbu	r2,17(r2)
    8cdc:	10803fcc 	andi	r2,r2,255
    8ce0:	e13ffd17 	ldw	r4,-12(fp)
    8ce4:	01400b84 	movi	r5,46
    8ce8:	100d883a 	mov	r6,r2
    8cec:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_GPO3_RX_DELAY, ctrl->gpo3_rx_delay_us);
    8cf0:	e0bfff17 	ldw	r2,-4(fp)
    8cf4:	10800483 	ldbu	r2,18(r2)
    8cf8:	10803fcc 	andi	r2,r2,255
    8cfc:	e13ffd17 	ldw	r4,-12(fp)
    8d00:	01400ac4 	movi	r5,43
    8d04:	100d883a 	mov	r6,r2
    8d08:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_GPO3_TX_DELAY, ctrl->gpo3_tx_delay_us);
    8d0c:	e0bfff17 	ldw	r2,-4(fp)
    8d10:	108004c3 	ldbu	r2,19(r2)
    8d14:	10803fcc 	andi	r2,r2,255
    8d18:	e13ffd17 	ldw	r4,-12(fp)
    8d1c:	01400bc4 	movi	r5,47
    8d20:	100d883a 	mov	r6,r2
    8d24:	00002600 	call	260 <ad9361_spi_write>

	return 0;
    8d28:	0005883a 	mov	r2,zero
}
    8d2c:	e037883a 	mov	sp,fp
    8d30:	dfc00117 	ldw	ra,4(sp)
    8d34:	df000017 	ldw	fp,0(sp)
    8d38:	dec00204 	addi	sp,sp,8
    8d3c:	f800283a 	ret

00008d40 <ad9361_rssi_setup>:
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_rssi_setup(struct ad9361_rf_phy *phy,
struct rssi_control *ctrl,
	bool is_update)
{
    8d40:	deffe604 	addi	sp,sp,-104
    8d44:	de00012e 	bgeu	sp,et,8d4c <ad9361_rssi_setup+0xc>
    8d48:	003b68fa 	trap	3
    8d4c:	dfc01915 	stw	ra,100(sp)
    8d50:	df001815 	stw	fp,96(sp)
    8d54:	dcc01715 	stw	r19,92(sp)
    8d58:	dc801615 	stw	r18,88(sp)
    8d5c:	dc401515 	stw	r17,84(sp)
    8d60:	dc001415 	stw	r16,80(sp)
    8d64:	df001804 	addi	fp,sp,96
    8d68:	e13ff915 	stw	r4,-28(fp)
    8d6c:	e17ffa15 	stw	r5,-24(fp)
    8d70:	3005883a 	mov	r2,r6
    8d74:	e0bffb05 	stb	r2,-20(fp)
	struct spi_device *spi = phy->spi;
    8d78:	e0bff917 	ldw	r2,-28(fp)
    8d7c:	10800117 	ldw	r2,4(r2)
    8d80:	e0bff015 	stw	r2,-64(fp)
	uint32_t total_weight, weight[4], total_dur = 0, temp;
    8d84:	e03fe915 	stw	zero,-92(fp)
	uint8_t dur_buf[4] = { 0 };
    8d88:	e03ff815 	stw	zero,-32(fp)
	int32_t val, ret, i, j = 0;
    8d8c:	e03fec15 	stw	zero,-80(fp)
	uint32_t rssi_delay;
	uint32_t rssi_wait;
	uint32_t rssi_duration;
	uint32_t rate;

	dev_dbg(&phy->spi->dev, "%s", __func__);
    8d90:	010000b4 	movhi	r4,2
    8d94:	211aac04 	addi	r4,r4,27312
    8d98:	014000b4 	movhi	r5,2
    8d9c:	295f4504 	addi	r5,r5,32020
    8da0:	001f8180 	call	1f818 <printf>
    8da4:	010000b4 	movhi	r4,2
    8da8:	211a7504 	addi	r4,r4,27092
    8dac:	001f8180 	call	1f818 <printf>

	if (ctrl->rssi_unit_is_rx_samples) {
    8db0:	e0bffa17 	ldw	r2,-24(fp)
    8db4:	10800103 	ldbu	r2,4(r2)
    8db8:	10803fcc 	andi	r2,r2,255
    8dbc:	10000e26 	beq	r2,zero,8df8 <ad9361_rssi_setup+0xb8>
		if (is_update)
    8dc0:	e0bffb03 	ldbu	r2,-20(fp)
    8dc4:	10000226 	beq	r2,zero,8dd0 <ad9361_rssi_setup+0x90>
			return 0; /* no update required */
    8dc8:	0005883a 	mov	r2,zero
    8dcc:	00010b06 	br	91fc <ad9361_rssi_setup+0x4bc>

		rssi_delay = ctrl->rssi_delay;
    8dd0:	e0bffa17 	ldw	r2,-24(fp)
    8dd4:	10800217 	ldw	r2,8(r2)
    8dd8:	e0bfed15 	stw	r2,-76(fp)
		rssi_wait = ctrl->rssi_wait;
    8ddc:	e0bffa17 	ldw	r2,-24(fp)
    8de0:	10800317 	ldw	r2,12(r2)
    8de4:	e0bfee15 	stw	r2,-72(fp)
		rssi_duration = ctrl->rssi_duration;
    8de8:	e0bffa17 	ldw	r2,-24(fp)
    8dec:	10800417 	ldw	r2,16(r2)
    8df0:	e0bfef15 	stw	r2,-68(fp)
    8df4:	00002506 	br	8e8c <ad9361_rssi_setup+0x14c>
	}
	else {
		/* update sample based on RX rate */
		rate = DIV_ROUND_CLOSEST(
    8df8:	e0bff917 	ldw	r2,-28(fp)
    8dfc:	10801f17 	ldw	r2,124(r2)
    8e00:	e13ff917 	ldw	r4,-28(fp)
    8e04:	100b883a 	mov	r5,r2
    8e08:	001bc900 	call	1bc90 <clk_get_rate>
    8e0c:	10807d04 	addi	r2,r2,500
    8e10:	1009883a 	mov	r4,r2
    8e14:	0140fa04 	movi	r5,1000
    8e18:	001d7a40 	call	1d7a4 <__udivsi3>
    8e1c:	e0bff115 	stw	r2,-60(fp)
			clk_get_rate(phy, phy->ref_clk_scale[RX_SAMPL_CLK]), 1000);
		/* units are in us */
		rssi_delay = DIV_ROUND_CLOSEST(ctrl->rssi_delay * rate, 1000);
    8e20:	e0bffa17 	ldw	r2,-24(fp)
    8e24:	10c00217 	ldw	r3,8(r2)
    8e28:	e0bff117 	ldw	r2,-60(fp)
    8e2c:	1885383a 	mul	r2,r3,r2
    8e30:	10807d04 	addi	r2,r2,500
    8e34:	1009883a 	mov	r4,r2
    8e38:	0140fa04 	movi	r5,1000
    8e3c:	001d7a40 	call	1d7a4 <__udivsi3>
    8e40:	e0bfed15 	stw	r2,-76(fp)
		rssi_wait = DIV_ROUND_CLOSEST(ctrl->rssi_wait * rate, 1000);
    8e44:	e0bffa17 	ldw	r2,-24(fp)
    8e48:	10c00317 	ldw	r3,12(r2)
    8e4c:	e0bff117 	ldw	r2,-60(fp)
    8e50:	1885383a 	mul	r2,r3,r2
    8e54:	10807d04 	addi	r2,r2,500
    8e58:	1009883a 	mov	r4,r2
    8e5c:	0140fa04 	movi	r5,1000
    8e60:	001d7a40 	call	1d7a4 <__udivsi3>
    8e64:	e0bfee15 	stw	r2,-72(fp)
		rssi_duration = DIV_ROUND_CLOSEST(
    8e68:	e0bffa17 	ldw	r2,-24(fp)
    8e6c:	10c00417 	ldw	r3,16(r2)
    8e70:	e0bff117 	ldw	r2,-60(fp)
    8e74:	1885383a 	mul	r2,r3,r2
    8e78:	10807d04 	addi	r2,r2,500
    8e7c:	1009883a 	mov	r4,r2
    8e80:	0140fa04 	movi	r5,1000
    8e84:	001d7a40 	call	1d7a4 <__udivsi3>
    8e88:	e0bfef15 	stw	r2,-68(fp)
			ctrl->rssi_duration * rate, 1000);
	}

	if (ctrl->restart_mode == EN_AGC_PIN_IS_PULLED_HIGH)
    8e8c:	e0bffa17 	ldw	r2,-24(fp)
    8e90:	10800017 	ldw	r2,0(r2)
    8e94:	10800058 	cmpnei	r2,r2,1
    8e98:	1000011e 	bne	r2,zero,8ea0 <ad9361_rssi_setup+0x160>
		rssi_delay = 0;
    8e9c:	e03fed15 	stw	zero,-76(fp)

	rssi_delay = clamp(rssi_delay / 8, 0U, 255U);
    8ea0:	e0bfed17 	ldw	r2,-76(fp)
    8ea4:	1081fe28 	cmpgeui	r2,r2,2040
    8ea8:	1000031e 	bne	r2,zero,8eb8 <ad9361_rssi_setup+0x178>
    8eac:	e0bfed17 	ldw	r2,-76(fp)
    8eb0:	10800230 	cmpltui	r2,r2,8
    8eb4:	1000081e 	bne	r2,zero,8ed8 <ad9361_rssi_setup+0x198>
    8eb8:	e0bfed17 	ldw	r2,-76(fp)
    8ebc:	1081fe28 	cmpgeui	r2,r2,2040
    8ec0:	1000031e 	bne	r2,zero,8ed0 <ad9361_rssi_setup+0x190>
    8ec4:	e0bfed17 	ldw	r2,-76(fp)
    8ec8:	1004d0fa 	srli	r2,r2,3
    8ecc:	00000306 	br	8edc <ad9361_rssi_setup+0x19c>
    8ed0:	00803fc4 	movi	r2,255
    8ed4:	00000106 	br	8edc <ad9361_rssi_setup+0x19c>
    8ed8:	0005883a 	mov	r2,zero
    8edc:	e0bfed15 	stw	r2,-76(fp)
	rssi_wait = clamp(rssi_wait / 4, 0U, 255U);
    8ee0:	e0bfee17 	ldw	r2,-72(fp)
    8ee4:	1080ff28 	cmpgeui	r2,r2,1020
    8ee8:	1000031e 	bne	r2,zero,8ef8 <ad9361_rssi_setup+0x1b8>
    8eec:	e0bfee17 	ldw	r2,-72(fp)
    8ef0:	10800130 	cmpltui	r2,r2,4
    8ef4:	1000081e 	bne	r2,zero,8f18 <ad9361_rssi_setup+0x1d8>
    8ef8:	e0bfee17 	ldw	r2,-72(fp)
    8efc:	1080ff28 	cmpgeui	r2,r2,1020
    8f00:	1000031e 	bne	r2,zero,8f10 <ad9361_rssi_setup+0x1d0>
    8f04:	e0bfee17 	ldw	r2,-72(fp)
    8f08:	1004d0ba 	srli	r2,r2,2
    8f0c:	00000306 	br	8f1c <ad9361_rssi_setup+0x1dc>
    8f10:	00803fc4 	movi	r2,255
    8f14:	00000106 	br	8f1c <ad9361_rssi_setup+0x1dc>
    8f18:	0005883a 	mov	r2,zero
    8f1c:	e0bfee15 	stw	r2,-72(fp)

	do {
		for (i = 14; rssi_duration > 0 && i >= 0; i--) {
    8f20:	00800384 	movi	r2,14
    8f24:	e0bfeb15 	stw	r2,-84(fp)
    8f28:	00002206 	br	8fb4 <ad9361_rssi_setup+0x274>
			val = 1 << i;
    8f2c:	00c00044 	movi	r3,1
    8f30:	e0bfeb17 	ldw	r2,-84(fp)
    8f34:	1884983a 	sll	r2,r3,r2
    8f38:	e0bff215 	stw	r2,-56(fp)
			if ((int64_t)rssi_duration >= val) {
    8f3c:	e0bfef17 	ldw	r2,-68(fp)
    8f40:	1021883a 	mov	r16,r2
    8f44:	0023883a 	mov	r17,zero
    8f48:	e0bff217 	ldw	r2,-56(fp)
    8f4c:	1025883a 	mov	r18,r2
    8f50:	1005d7fa 	srai	r2,r2,31
    8f54:	1027883a 	mov	r19,r2
    8f58:	8cc01316 	blt	r17,r19,8fa8 <ad9361_rssi_setup+0x268>
    8f5c:	9c40011e 	bne	r19,r17,8f64 <ad9361_rssi_setup+0x224>
    8f60:	84801136 	bltu	r16,r18,8fa8 <ad9361_rssi_setup+0x268>
				dur_buf[j++] = i;
    8f64:	e0bfec17 	ldw	r2,-80(fp)
    8f68:	10c00044 	addi	r3,r2,1
    8f6c:	e0ffec15 	stw	r3,-80(fp)
    8f70:	e0ffeb17 	ldw	r3,-84(fp)
    8f74:	1809883a 	mov	r4,r3
    8f78:	e0fff804 	addi	r3,fp,-32
    8f7c:	1885883a 	add	r2,r3,r2
    8f80:	11000005 	stb	r4,0(r2)
				total_dur += val;
    8f84:	e0bff217 	ldw	r2,-56(fp)
    8f88:	e0ffe917 	ldw	r3,-92(fp)
    8f8c:	1885883a 	add	r2,r3,r2
    8f90:	e0bfe915 	stw	r2,-92(fp)
				rssi_duration -= val;
    8f94:	e0bff217 	ldw	r2,-56(fp)
    8f98:	e0ffef17 	ldw	r3,-68(fp)
    8f9c:	1885c83a 	sub	r2,r3,r2
    8fa0:	e0bfef15 	stw	r2,-68(fp)
				break;
    8fa4:	00000706 	br	8fc4 <ad9361_rssi_setup+0x284>

	rssi_delay = clamp(rssi_delay / 8, 0U, 255U);
	rssi_wait = clamp(rssi_wait / 4, 0U, 255U);

	do {
		for (i = 14; rssi_duration > 0 && i >= 0; i--) {
    8fa8:	e0bfeb17 	ldw	r2,-84(fp)
    8fac:	10bfffc4 	addi	r2,r2,-1
    8fb0:	e0bfeb15 	stw	r2,-84(fp)
    8fb4:	e0bfef17 	ldw	r2,-68(fp)
    8fb8:	10000226 	beq	r2,zero,8fc4 <ad9361_rssi_setup+0x284>
    8fbc:	e0bfeb17 	ldw	r2,-84(fp)
    8fc0:	103fda0e 	bge	r2,zero,8f2c <_gp+0xfffd6e0c>
				rssi_duration -= val;
				break;
			}
		}

	} while (j < 4 && rssi_duration > 0);
    8fc4:	e0bfec17 	ldw	r2,-80(fp)
    8fc8:	10800108 	cmpgei	r2,r2,4
    8fcc:	1000021e 	bne	r2,zero,8fd8 <ad9361_rssi_setup+0x298>
    8fd0:	e0bfef17 	ldw	r2,-68(fp)
    8fd4:	103fd21e 	bne	r2,zero,8f20 <_gp+0xfffd6e00>

	for (i = 0, total_weight = 0; i < 4; i++)
    8fd8:	e03feb15 	stw	zero,-84(fp)
    8fdc:	e03fe815 	stw	zero,-96(fp)
    8fe0:	00002306 	br	9070 <ad9361_rssi_setup+0x330>
		total_weight += weight[i] =
		DIV_ROUND_CLOSEST(RSSI_MAX_WEIGHT *
    8fe4:	e0fff804 	addi	r3,fp,-32
    8fe8:	e0bfeb17 	ldw	r2,-84(fp)
    8fec:	1885883a 	add	r2,r3,r2
    8ff0:	10800003 	ldbu	r2,0(r2)
    8ff4:	10803fcc 	andi	r2,r2,255
    8ff8:	00c03fc4 	movi	r3,255
    8ffc:	1884983a 	sll	r2,r3,r2
    9000:	1007883a 	mov	r3,r2
    9004:	e0bfe917 	ldw	r2,-92(fp)
    9008:	1004d07a 	srli	r2,r2,1
    900c:	1885883a 	add	r2,r3,r2
    9010:	1009883a 	mov	r4,r2
    9014:	e17fe917 	ldw	r5,-92(fp)
    9018:	001d7a40 	call	1d7a4 <__udivsi3>
    901c:	1007883a 	mov	r3,r2
		}

	} while (j < 4 && rssi_duration > 0);

	for (i = 0, total_weight = 0; i < 4; i++)
		total_weight += weight[i] =
    9020:	e0bfeb17 	ldw	r2,-84(fp)
    9024:	1085883a 	add	r2,r2,r2
    9028:	1085883a 	add	r2,r2,r2
    902c:	e13fe804 	addi	r4,fp,-96
    9030:	2085883a 	add	r2,r4,r2
    9034:	10800c04 	addi	r2,r2,48
    9038:	10c00015 	stw	r3,0(r2)
    903c:	e0bfeb17 	ldw	r2,-84(fp)
    9040:	1085883a 	add	r2,r2,r2
    9044:	1085883a 	add	r2,r2,r2
    9048:	e0ffe804 	addi	r3,fp,-96
    904c:	1885883a 	add	r2,r3,r2
    9050:	10800c04 	addi	r2,r2,48
    9054:	10800017 	ldw	r2,0(r2)
    9058:	e0ffe817 	ldw	r3,-96(fp)
    905c:	1885883a 	add	r2,r3,r2
    9060:	e0bfe815 	stw	r2,-96(fp)
			}
		}

	} while (j < 4 && rssi_duration > 0);

	for (i = 0, total_weight = 0; i < 4; i++)
    9064:	e0bfeb17 	ldw	r2,-84(fp)
    9068:	10800044 	addi	r2,r2,1
    906c:	e0bfeb15 	stw	r2,-84(fp)
    9070:	e0bfeb17 	ldw	r2,-84(fp)
    9074:	10800110 	cmplti	r2,r2,4
    9078:	103fda1e 	bne	r2,zero,8fe4 <_gp+0xfffd6ec4>
		total_weight += weight[i] =
		DIV_ROUND_CLOSEST(RSSI_MAX_WEIGHT *
		(1 << dur_buf[i]), total_dur);

	/* total of all weights must be 0xFF */
	val = total_weight - 0xFF;
    907c:	e0bfe817 	ldw	r2,-96(fp)
    9080:	10bfc044 	addi	r2,r2,-255
    9084:	e0bff215 	stw	r2,-56(fp)
	weight[j - 1] -= val;
    9088:	e0bfec17 	ldw	r2,-80(fp)
    908c:	10bfffc4 	addi	r2,r2,-1
    9090:	e0ffec17 	ldw	r3,-80(fp)
    9094:	18ffffc4 	addi	r3,r3,-1
    9098:	18c7883a 	add	r3,r3,r3
    909c:	18c7883a 	add	r3,r3,r3
    90a0:	e13fe804 	addi	r4,fp,-96
    90a4:	20c7883a 	add	r3,r4,r3
    90a8:	18c00c04 	addi	r3,r3,48
    90ac:	19000017 	ldw	r4,0(r3)
    90b0:	e0fff217 	ldw	r3,-56(fp)
    90b4:	20c7c83a 	sub	r3,r4,r3
    90b8:	1085883a 	add	r2,r2,r2
    90bc:	1085883a 	add	r2,r2,r2
    90c0:	e13fe804 	addi	r4,fp,-96
    90c4:	2085883a 	add	r2,r4,r2
    90c8:	10800c04 	addi	r2,r2,48
    90cc:	10c00015 	stw	r3,0(r2)

	ad9361_spi_write(spi, REG_MEASURE_DURATION_01,
		(dur_buf[1] << 4) | dur_buf[0]); // RSSI Measurement Duration 0, 1
    90d0:	e0bff843 	ldbu	r2,-31(fp)
    90d4:	10803fcc 	andi	r2,r2,255
    90d8:	1006913a 	slli	r3,r2,4
    90dc:	e0bff803 	ldbu	r2,-32(fp)
    90e0:	10803fcc 	andi	r2,r2,255
    90e4:	1884b03a 	or	r2,r3,r2

	/* total of all weights must be 0xFF */
	val = total_weight - 0xFF;
	weight[j - 1] -= val;

	ad9361_spi_write(spi, REG_MEASURE_DURATION_01,
    90e8:	e13ff017 	ldw	r4,-64(fp)
    90ec:	01405404 	movi	r5,336
    90f0:	100d883a 	mov	r6,r2
    90f4:	00002600 	call	260 <ad9361_spi_write>
		(dur_buf[1] << 4) | dur_buf[0]); // RSSI Measurement Duration 0, 1
	ad9361_spi_write(spi, REG_MEASURE_DURATION_23,
		(dur_buf[3] << 4) | dur_buf[2]); // RSSI Measurement Duration 2, 3
    90f8:	e0bff8c3 	ldbu	r2,-29(fp)
    90fc:	10803fcc 	andi	r2,r2,255
    9100:	1006913a 	slli	r3,r2,4
    9104:	e0bff883 	ldbu	r2,-30(fp)
    9108:	10803fcc 	andi	r2,r2,255
    910c:	1884b03a 	or	r2,r3,r2
	val = total_weight - 0xFF;
	weight[j - 1] -= val;

	ad9361_spi_write(spi, REG_MEASURE_DURATION_01,
		(dur_buf[1] << 4) | dur_buf[0]); // RSSI Measurement Duration 0, 1
	ad9361_spi_write(spi, REG_MEASURE_DURATION_23,
    9110:	e13ff017 	ldw	r4,-64(fp)
    9114:	01405444 	movi	r5,337
    9118:	100d883a 	mov	r6,r2
    911c:	00002600 	call	260 <ad9361_spi_write>
		(dur_buf[3] << 4) | dur_buf[2]); // RSSI Measurement Duration 2, 3
	ad9361_spi_write(spi, REG_RSSI_WEIGHT_0, weight[0]); // RSSI Weighted Multiplier 0
    9120:	e0bff417 	ldw	r2,-48(fp)
    9124:	e13ff017 	ldw	r4,-64(fp)
    9128:	01405484 	movi	r5,338
    912c:	100d883a 	mov	r6,r2
    9130:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_RSSI_WEIGHT_1, weight[1]); // RSSI Weighted Multiplier 1
    9134:	e0bff517 	ldw	r2,-44(fp)
    9138:	e13ff017 	ldw	r4,-64(fp)
    913c:	014054c4 	movi	r5,339
    9140:	100d883a 	mov	r6,r2
    9144:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_RSSI_WEIGHT_2, weight[2]); // RSSI Weighted Multiplier 2
    9148:	e0bff617 	ldw	r2,-40(fp)
    914c:	e13ff017 	ldw	r4,-64(fp)
    9150:	01405504 	movi	r5,340
    9154:	100d883a 	mov	r6,r2
    9158:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_RSSI_WEIGHT_3, weight[3]); // RSSI Weighted Multiplier 3
    915c:	e0bff717 	ldw	r2,-36(fp)
    9160:	e13ff017 	ldw	r4,-64(fp)
    9164:	01405544 	movi	r5,341
    9168:	100d883a 	mov	r6,r2
    916c:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_RSSI_DELAY, rssi_delay); // RSSI Delay
    9170:	e13ff017 	ldw	r4,-64(fp)
    9174:	01405584 	movi	r5,342
    9178:	e1bfed17 	ldw	r6,-76(fp)
    917c:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_RSSI_WAIT_TIME, rssi_wait); // RSSI Wait
    9180:	e13ff017 	ldw	r4,-64(fp)
    9184:	014055c4 	movi	r5,343
    9188:	e1bfee17 	ldw	r6,-72(fp)
    918c:	00002600 	call	260 <ad9361_spi_write>

	temp = RSSI_MODE_SELECT(ctrl->restart_mode);
    9190:	e0bffa17 	ldw	r2,-24(fp)
    9194:	10800017 	ldw	r2,0(r2)
    9198:	108001cc 	andi	r2,r2,7
    919c:	1085883a 	add	r2,r2,r2
    91a0:	1085883a 	add	r2,r2,r2
    91a4:	e0bfea15 	stw	r2,-88(fp)
	if (ctrl->restart_mode == SPI_WRITE_TO_REGISTER)
    91a8:	e0bffa17 	ldw	r2,-24(fp)
    91ac:	10800017 	ldw	r2,0(r2)
    91b0:	10800118 	cmpnei	r2,r2,4
    91b4:	1000031e 	bne	r2,zero,91c4 <ad9361_rssi_setup+0x484>
		temp |= START_RSSI_MEAS;
    91b8:	e0bfea17 	ldw	r2,-88(fp)
    91bc:	10800814 	ori	r2,r2,32
    91c0:	e0bfea15 	stw	r2,-88(fp)

	ret = ad9361_spi_write(spi, REG_RSSI_CONFIG, temp); // RSSI Mode Select
    91c4:	e13ff017 	ldw	r4,-64(fp)
    91c8:	01405604 	movi	r5,344
    91cc:	e1bfea17 	ldw	r6,-88(fp)
    91d0:	00002600 	call	260 <ad9361_spi_write>
    91d4:	e0bff315 	stw	r2,-52(fp)

	if (ret < 0)
    91d8:	e0bff317 	ldw	r2,-52(fp)
    91dc:	1000060e 	bge	r2,zero,91f8 <ad9361_rssi_setup+0x4b8>
		dev_err(&phy->spi->dev, "Unable to write rssi config");
    91e0:	010000b4 	movhi	r4,2
    91e4:	211c8e04 	addi	r4,r4,29240
    91e8:	001f8180 	call	1f818 <printf>
    91ec:	010000b4 	movhi	r4,2
    91f0:	211a7504 	addi	r4,r4,27092
    91f4:	001f8180 	call	1f818 <printf>

	return 0;
    91f8:	0005883a 	mov	r2,zero
}
    91fc:	e6fffc04 	addi	sp,fp,-16
    9200:	dfc00517 	ldw	ra,20(sp)
    9204:	df000417 	ldw	fp,16(sp)
    9208:	dcc00317 	ldw	r19,12(sp)
    920c:	dc800217 	ldw	r18,8(sp)
    9210:	dc400117 	ldw	r17,4(sp)
    9214:	dc000017 	ldw	r16,0(sp)
    9218:	dec00604 	addi	sp,sp,24
    921c:	f800283a 	ret

00009220 <ad9361_bb_clk_change_handler>:
 * This function needs to be called whenever BBPLL changes.
 * @param phy The AD9361 state structure.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_bb_clk_change_handler(struct ad9361_rf_phy *phy)
{
    9220:	defffb04 	addi	sp,sp,-20
    9224:	de00012e 	bgeu	sp,et,922c <ad9361_bb_clk_change_handler+0xc>
    9228:	003b68fa 	trap	3
    922c:	dfc00415 	stw	ra,16(sp)
    9230:	df000315 	stw	fp,12(sp)
    9234:	dc000215 	stw	r16,8(sp)
    9238:	df000304 	addi	fp,sp,12
    923c:	e13ffe15 	stw	r4,-8(fp)
	int32_t ret;

	ret = ad9361_gc_update(phy);
    9240:	e13ffe17 	ldw	r4,-8(fp)
    9244:	0002eb40 	call	2eb4 <ad9361_gc_update>
    9248:	e0bffd15 	stw	r2,-12(fp)
	ret |= ad9361_rssi_setup(phy, &phy->pdata->rssi_ctrl, true);
    924c:	e0bffe17 	ldw	r2,-8(fp)
    9250:	10803017 	ldw	r2,192(r2)
    9254:	10803e04 	addi	r2,r2,248
    9258:	e13ffe17 	ldw	r4,-8(fp)
    925c:	100b883a 	mov	r5,r2
    9260:	01800044 	movi	r6,1
    9264:	0008d400 	call	8d40 <ad9361_rssi_setup>
    9268:	1007883a 	mov	r3,r2
    926c:	e0bffd17 	ldw	r2,-12(fp)
    9270:	10c4b03a 	or	r2,r2,r3
    9274:	e0bffd15 	stw	r2,-12(fp)
	ret |= ad9361_auxadc_setup(phy, &phy->pdata->auxadc_ctrl,
    9278:	e0bffe17 	ldw	r2,-8(fp)
    927c:	10803017 	ldw	r2,192(r2)
    9280:	14004904 	addi	r16,r2,292
    9284:	e0bffe17 	ldw	r2,-8(fp)
    9288:	10801a17 	ldw	r2,104(r2)
    928c:	e13ffe17 	ldw	r4,-8(fp)
    9290:	100b883a 	mov	r5,r2
    9294:	001bc900 	call	1bc90 <clk_get_rate>
    9298:	e13ffe17 	ldw	r4,-8(fp)
    929c:	800b883a 	mov	r5,r16
    92a0:	100d883a 	mov	r6,r2
    92a4:	00087400 	call	8740 <ad9361_auxadc_setup>
    92a8:	1007883a 	mov	r3,r2
    92ac:	e0bffd17 	ldw	r2,-12(fp)
    92b0:	10c4b03a 	or	r2,r2,r3
    92b4:	e0bffd15 	stw	r2,-12(fp)
		clk_get_rate(phy, phy->ref_clk_scale[BBPLL_CLK]));

	return ret;
    92b8:	e0bffd17 	ldw	r2,-12(fp)
}
    92bc:	e6ffff04 	addi	sp,fp,-4
    92c0:	dfc00217 	ldw	ra,8(sp)
    92c4:	df000117 	ldw	fp,4(sp)
    92c8:	dc000017 	ldw	r16,0(sp)
    92cc:	dec00304 	addi	sp,sp,12
    92d0:	f800283a 	ret

000092d4 <ad9361_ensm_set_state>:
 * @param pinctrl Set true, will enable the ENSM pin control.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_ensm_set_state(struct ad9361_rf_phy *phy, uint8_t ensm_state,
	bool pinctrl)
{
    92d4:	defff504 	addi	sp,sp,-44
    92d8:	de00012e 	bgeu	sp,et,92e0 <ad9361_ensm_set_state+0xc>
    92dc:	003b68fa 	trap	3
    92e0:	dfc00a15 	stw	ra,40(sp)
    92e4:	df000915 	stw	fp,36(sp)
    92e8:	dc000815 	stw	r16,32(sp)
    92ec:	df000904 	addi	fp,sp,36
    92f0:	e13ffc15 	stw	r4,-16(fp)
    92f4:	2807883a 	mov	r3,r5
    92f8:	3005883a 	mov	r2,r6
    92fc:	e0fffd05 	stb	r3,-12(fp)
    9300:	e0bffe05 	stb	r2,-8(fp)
	struct spi_device *spi = phy->spi;
    9304:	e0bffc17 	ldw	r2,-16(fp)
    9308:	10800117 	ldw	r2,4(r2)
    930c:	e0bffa15 	stw	r2,-24(fp)
	int32_t rc = 0;
    9310:	e03ff815 	stw	zero,-32(fp)
	uint32_t val;
	uint32_t tmp;

	dev_dbg(dev, "Device is in %x state, moving to %x", phy->curr_ensm_state,
    9314:	e0bffc17 	ldw	r2,-16(fp)
    9318:	10803143 	ldbu	r2,197(r2)
    931c:	10c03fcc 	andi	r3,r2,255
    9320:	e0bffd03 	ldbu	r2,-12(fp)
    9324:	010000b4 	movhi	r4,2
    9328:	211c9504 	addi	r4,r4,29268
    932c:	180b883a 	mov	r5,r3
    9330:	100d883a 	mov	r6,r2
    9334:	001f8180 	call	1f818 <printf>
    9338:	010000b4 	movhi	r4,2
    933c:	211a7504 	addi	r4,r4,27092
    9340:	001f8180 	call	1f818 <printf>
		ensm_state);


	if (phy->curr_ensm_state == ENSM_STATE_SLEEP) {
    9344:	e0bffc17 	ldw	r2,-16(fp)
    9348:	10803143 	ldbu	r2,197(r2)
    934c:	10803fcc 	andi	r2,r2,255
    9350:	10802018 	cmpnei	r2,r2,128
    9354:	10001a1e 	bne	r2,zero,93c0 <ad9361_ensm_set_state+0xec>
		ad9361_spi_write(spi, REG_CLOCK_ENABLE,
			DIGITAL_POWER_UP | CLOCK_ENABLE_DFLT | BBPLL_ENABLE |
			(phy->pdata->use_extclk ? XO_BYPASS : 0)); /* Enable Clocks */
    9358:	e0bffc17 	ldw	r2,-16(fp)
    935c:	10803017 	ldw	r2,192(r2)
    9360:	10800103 	ldbu	r2,4(r2)
	dev_dbg(dev, "Device is in %x state, moving to %x", phy->curr_ensm_state,
		ensm_state);


	if (phy->curr_ensm_state == ENSM_STATE_SLEEP) {
		ad9361_spi_write(spi, REG_CLOCK_ENABLE,
    9364:	10803fcc 	andi	r2,r2,255
    9368:	10000226 	beq	r2,zero,9374 <ad9361_ensm_set_state+0xa0>
    936c:	008005c4 	movi	r2,23
    9370:	00000106 	br	9378 <ad9361_ensm_set_state+0xa4>
    9374:	008001c4 	movi	r2,7
    9378:	e13ffa17 	ldw	r4,-24(fp)
    937c:	01400244 	movi	r5,9
    9380:	100d883a 	mov	r6,r2
    9384:	00002600 	call	260 <ad9361_spi_write>
			DIGITAL_POWER_UP | CLOCK_ENABLE_DFLT | BBPLL_ENABLE |
			(phy->pdata->use_extclk ? XO_BYPASS : 0)); /* Enable Clocks */
		udelay(20);
    9388:	01000504 	movi	r4,20
    938c:	001b8a40 	call	1b8a4 <udelay>
		ad9361_spi_write(spi, REG_ENSM_CONFIG_1, TO_ALERT | FORCE_ALERT_STATE);
    9390:	e13ffa17 	ldw	r4,-24(fp)
    9394:	01400504 	movi	r5,20
    9398:	01800144 	movi	r6,5
    939c:	00002600 	call	260 <ad9361_spi_write>
		ad9361_trx_vco_cal_control(phy, false, true); /* Enable VCO Cal */
    93a0:	e13ffc17 	ldw	r4,-16(fp)
    93a4:	000b883a 	mov	r5,zero
    93a8:	01800044 	movi	r6,1
    93ac:	00063880 	call	6388 <ad9361_trx_vco_cal_control>
		ad9361_trx_vco_cal_control(phy, true, true);
    93b0:	e13ffc17 	ldw	r4,-16(fp)
    93b4:	01400044 	movi	r5,1
    93b8:	01800044 	movi	r6,1
    93bc:	00063880 	call	6388 <ad9361_trx_vco_cal_control>
	}

	val = (phy->pdata->ensm_pin_pulse_mode ? 0 : LEVEL_MODE) |
    93c0:	e0bffc17 	ldw	r2,-16(fp)
    93c4:	10803017 	ldw	r2,192(r2)
    93c8:	10800143 	ldbu	r2,5(r2)
    93cc:	10803fcc 	andi	r2,r2,255
    93d0:	10000226 	beq	r2,zero,93dc <ad9361_ensm_set_state+0x108>
    93d4:	0007883a 	mov	r3,zero
    93d8:	00000106 	br	93e0 <ad9361_ensm_set_state+0x10c>
    93dc:	00c00204 	movi	r3,8
		(pinctrl ? ENABLE_ENSM_PIN_CTRL : 0) |
    93e0:	e0bffe03 	ldbu	r2,-8(fp)
    93e4:	10000226 	beq	r2,zero,93f0 <ad9361_ensm_set_state+0x11c>
    93e8:	00800404 	movi	r2,16
    93ec:	00000106 	br	93f4 <ad9361_ensm_set_state+0x120>
    93f0:	0005883a 	mov	r2,zero
		ad9361_spi_write(spi, REG_ENSM_CONFIG_1, TO_ALERT | FORCE_ALERT_STATE);
		ad9361_trx_vco_cal_control(phy, false, true); /* Enable VCO Cal */
		ad9361_trx_vco_cal_control(phy, true, true);
	}

	val = (phy->pdata->ensm_pin_pulse_mode ? 0 : LEVEL_MODE) |
    93f4:	1886b03a 	or	r3,r3,r2
		(pinctrl ? ENABLE_ENSM_PIN_CTRL : 0) |
		(phy->txmon_tdd_en ? ENABLE_RX_DATA_PORT_FOR_CAL : 0) |
    93f8:	e0bffc17 	ldw	r2,-16(fp)
    93fc:	10806043 	ldbu	r2,385(r2)
    9400:	10803fcc 	andi	r2,r2,255
    9404:	10000226 	beq	r2,zero,9410 <ad9361_ensm_set_state+0x13c>
    9408:	00802004 	movi	r2,128
    940c:	00000106 	br	9414 <ad9361_ensm_set_state+0x140>
    9410:	0005883a 	mov	r2,zero
		ad9361_trx_vco_cal_control(phy, false, true); /* Enable VCO Cal */
		ad9361_trx_vco_cal_control(phy, true, true);
	}

	val = (phy->pdata->ensm_pin_pulse_mode ? 0 : LEVEL_MODE) |
		(pinctrl ? ENABLE_ENSM_PIN_CTRL : 0) |
    9414:	1884b03a 	or	r2,r3,r2
		(phy->txmon_tdd_en ? ENABLE_RX_DATA_PORT_FOR_CAL : 0) |
    9418:	10800054 	ori	r2,r2,1
		ad9361_spi_write(spi, REG_ENSM_CONFIG_1, TO_ALERT | FORCE_ALERT_STATE);
		ad9361_trx_vco_cal_control(phy, false, true); /* Enable VCO Cal */
		ad9361_trx_vco_cal_control(phy, true, true);
	}

	val = (phy->pdata->ensm_pin_pulse_mode ? 0 : LEVEL_MODE) |
    941c:	e0bff915 	stw	r2,-28(fp)
		(pinctrl ? ENABLE_ENSM_PIN_CTRL : 0) |
		(phy->txmon_tdd_en ? ENABLE_RX_DATA_PORT_FOR_CAL : 0) |
		TO_ALERT;

	switch (ensm_state) {
    9420:	e0bffd03 	ldbu	r2,-12(fp)
    9424:	10c001a0 	cmpeqi	r3,r2,6
    9428:	18000d1e 	bne	r3,zero,9460 <ad9361_ensm_set_state+0x18c>
    942c:	10c001c8 	cmpgei	r3,r2,7
    9430:	1800041e 	bne	r3,zero,9444 <ad9361_ensm_set_state+0x170>
    9434:	10008a26 	beq	r2,zero,9660 <ad9361_ensm_set_state+0x38c>
    9438:	10800160 	cmpeqi	r2,r2,5
    943c:	10003d1e 	bne	r2,zero,9534 <ad9361_ensm_set_state+0x260>
    9440:	00007e06 	br	963c <ad9361_ensm_set_state+0x368>
    9444:	10c002a0 	cmpeqi	r3,r2,10
    9448:	18002d1e 	bne	r3,zero,9500 <ad9361_ensm_set_state+0x22c>
    944c:	10c02020 	cmpeqi	r3,r2,128
    9450:	1800401e 	bne	r3,zero,9554 <ad9361_ensm_set_state+0x280>
    9454:	10800220 	cmpeqi	r2,r2,8
    9458:	1000151e 	bne	r2,zero,94b0 <ad9361_ensm_set_state+0x1dc>
    945c:	00007706 	br	963c <ad9361_ensm_set_state+0x368>
	case ENSM_STATE_TX:
		val |= FORCE_TX_ON;
    9460:	e0bff917 	ldw	r2,-28(fp)
    9464:	10800814 	ori	r2,r2,32
    9468:	e0bff915 	stw	r2,-28(fp)
		if (phy->pdata->fdd)
    946c:	e0bffc17 	ldw	r2,-16(fp)
    9470:	10803017 	ldw	r2,192(r2)
    9474:	10800043 	ldbu	r2,1(r2)
    9478:	10803fcc 	andi	r2,r2,255
    947c:	10000326 	beq	r2,zero,948c <ad9361_ensm_set_state+0x1b8>
			rc = -EINVAL;
    9480:	00bffa84 	movi	r2,-22
    9484:	e0bff815 	stw	r2,-32(fp)
    9488:	00000806 	br	94ac <ad9361_ensm_set_state+0x1d8>
		else if (phy->curr_ensm_state != ENSM_STATE_ALERT)
    948c:	e0bffc17 	ldw	r2,-16(fp)
    9490:	10803143 	ldbu	r2,197(r2)
    9494:	10803fcc 	andi	r2,r2,255
    9498:	10800160 	cmpeqi	r2,r2,5
    949c:	1000031e 	bne	r2,zero,94ac <ad9361_ensm_set_state+0x1d8>
			rc = -EINVAL;
    94a0:	00bffa84 	movi	r2,-22
    94a4:	e0bff815 	stw	r2,-32(fp)
		break;
    94a8:	00006e06 	br	9664 <ad9361_ensm_set_state+0x390>
    94ac:	00006d06 	br	9664 <ad9361_ensm_set_state+0x390>
	case ENSM_STATE_RX:
		val |= FORCE_RX_ON;
    94b0:	e0bff917 	ldw	r2,-28(fp)
    94b4:	10801014 	ori	r2,r2,64
    94b8:	e0bff915 	stw	r2,-28(fp)
		if (phy->pdata->fdd)
    94bc:	e0bffc17 	ldw	r2,-16(fp)
    94c0:	10803017 	ldw	r2,192(r2)
    94c4:	10800043 	ldbu	r2,1(r2)
    94c8:	10803fcc 	andi	r2,r2,255
    94cc:	10000326 	beq	r2,zero,94dc <ad9361_ensm_set_state+0x208>
			rc = -EINVAL;
    94d0:	00bffa84 	movi	r2,-22
    94d4:	e0bff815 	stw	r2,-32(fp)
    94d8:	00000806 	br	94fc <ad9361_ensm_set_state+0x228>
		else if (phy->curr_ensm_state != ENSM_STATE_ALERT)
    94dc:	e0bffc17 	ldw	r2,-16(fp)
    94e0:	10803143 	ldbu	r2,197(r2)
    94e4:	10803fcc 	andi	r2,r2,255
    94e8:	10800160 	cmpeqi	r2,r2,5
    94ec:	1000031e 	bne	r2,zero,94fc <ad9361_ensm_set_state+0x228>
			rc = -EINVAL;
    94f0:	00bffa84 	movi	r2,-22
    94f4:	e0bff815 	stw	r2,-32(fp)
		break;
    94f8:	00005a06 	br	9664 <ad9361_ensm_set_state+0x390>
    94fc:	00005906 	br	9664 <ad9361_ensm_set_state+0x390>
	case ENSM_STATE_FDD:
		val |= FORCE_TX_ON;
    9500:	e0bff917 	ldw	r2,-28(fp)
    9504:	10800814 	ori	r2,r2,32
    9508:	e0bff915 	stw	r2,-28(fp)
		if (!phy->pdata->fdd)
    950c:	e0bffc17 	ldw	r2,-16(fp)
    9510:	10803017 	ldw	r2,192(r2)
    9514:	10800043 	ldbu	r2,1(r2)
    9518:	1080005c 	xori	r2,r2,1
    951c:	10803fcc 	andi	r2,r2,255
    9520:	10000326 	beq	r2,zero,9530 <ad9361_ensm_set_state+0x25c>
			rc = -EINVAL;
    9524:	00bffa84 	movi	r2,-22
    9528:	e0bff815 	stw	r2,-32(fp)
		break;
    952c:	00004d06 	br	9664 <ad9361_ensm_set_state+0x390>
    9530:	00004c06 	br	9664 <ad9361_ensm_set_state+0x390>
	case ENSM_STATE_ALERT:
		val &= ~(FORCE_TX_ON | FORCE_RX_ON);
    9534:	e0fff917 	ldw	r3,-28(fp)
    9538:	00bfe7c4 	movi	r2,-97
    953c:	1884703a 	and	r2,r3,r2
    9540:	e0bff915 	stw	r2,-28(fp)
		val |= TO_ALERT | FORCE_ALERT_STATE;
    9544:	e0bff917 	ldw	r2,-28(fp)
    9548:	10800154 	ori	r2,r2,5
    954c:	e0bff915 	stw	r2,-28(fp)
		break;
    9550:	00004406 	br	9664 <ad9361_ensm_set_state+0x390>
	case ENSM_STATE_SLEEP_WAIT:
		break;
	case ENSM_STATE_SLEEP:
		ad9361_trx_vco_cal_control(phy, false, false); /* Disable VCO Cal */
    9554:	e13ffc17 	ldw	r4,-16(fp)
    9558:	000b883a 	mov	r5,zero
    955c:	000d883a 	mov	r6,zero
    9560:	00063880 	call	6388 <ad9361_trx_vco_cal_control>
		ad9361_trx_vco_cal_control(phy, true, false);
    9564:	e13ffc17 	ldw	r4,-16(fp)
    9568:	01400044 	movi	r5,1
    956c:	000d883a 	mov	r6,zero
    9570:	00063880 	call	6388 <ad9361_trx_vco_cal_control>
		ad9361_spi_write(spi, REG_ENSM_CONFIG_1, 0); /* Clear To Alert */
    9574:	e13ffa17 	ldw	r4,-24(fp)
    9578:	01400504 	movi	r5,20
    957c:	000d883a 	mov	r6,zero
    9580:	00002600 	call	260 <ad9361_spi_write>
		ad9361_spi_write(spi, REG_ENSM_CONFIG_1,
			phy->pdata->fdd ? FORCE_TX_ON : FORCE_RX_ON);
    9584:	e0bffc17 	ldw	r2,-16(fp)
    9588:	10803017 	ldw	r2,192(r2)
    958c:	10800043 	ldbu	r2,1(r2)
		break;
	case ENSM_STATE_SLEEP:
		ad9361_trx_vco_cal_control(phy, false, false); /* Disable VCO Cal */
		ad9361_trx_vco_cal_control(phy, true, false);
		ad9361_spi_write(spi, REG_ENSM_CONFIG_1, 0); /* Clear To Alert */
		ad9361_spi_write(spi, REG_ENSM_CONFIG_1,
    9590:	10803fcc 	andi	r2,r2,255
    9594:	10000226 	beq	r2,zero,95a0 <ad9361_ensm_set_state+0x2cc>
    9598:	00800804 	movi	r2,32
    959c:	00000106 	br	95a4 <ad9361_ensm_set_state+0x2d0>
    95a0:	00801004 	movi	r2,64
    95a4:	e13ffa17 	ldw	r4,-24(fp)
    95a8:	01400504 	movi	r5,20
    95ac:	100d883a 	mov	r6,r2
    95b0:	00002600 	call	260 <ad9361_spi_write>
			phy->pdata->fdd ? FORCE_TX_ON : FORCE_RX_ON);
		/* Delay Flush Time 384 ADC clock cycles */
		udelay(384000000UL / clk_get_rate(phy, phy->ref_clk_scale[ADC_CLK]));
    95b4:	e0bffc17 	ldw	r2,-16(fp)
    95b8:	10801b17 	ldw	r2,108(r2)
    95bc:	e13ffc17 	ldw	r4,-16(fp)
    95c0:	100b883a 	mov	r5,r2
    95c4:	001bc900 	call	1bc90 <clk_get_rate>
    95c8:	0105b8f4 	movhi	r4,5859
    95cc:	21180004 	addi	r4,r4,24576
    95d0:	100b883a 	mov	r5,r2
    95d4:	001d7a40 	call	1d7a4 <__udivsi3>
    95d8:	1009883a 	mov	r4,r2
    95dc:	001b8a40 	call	1b8a4 <udelay>
		ad9361_spi_write(spi, REG_ENSM_CONFIG_1, 0); /* Move to Wait*/
    95e0:	e13ffa17 	ldw	r4,-24(fp)
    95e4:	01400504 	movi	r5,20
    95e8:	000d883a 	mov	r6,zero
    95ec:	00002600 	call	260 <ad9361_spi_write>
		udelay(1); /* Wait for ENSM settle */
    95f0:	01000044 	movi	r4,1
    95f4:	001b8a40 	call	1b8a4 <udelay>
		ad9361_spi_write(spi, REG_CLOCK_ENABLE,
				 (phy->pdata->use_extclk ? XO_BYPASS : 0)); /* Turn off all clocks */
    95f8:	e0bffc17 	ldw	r2,-16(fp)
    95fc:	10803017 	ldw	r2,192(r2)
    9600:	10800103 	ldbu	r2,4(r2)
			phy->pdata->fdd ? FORCE_TX_ON : FORCE_RX_ON);
		/* Delay Flush Time 384 ADC clock cycles */
		udelay(384000000UL / clk_get_rate(phy, phy->ref_clk_scale[ADC_CLK]));
		ad9361_spi_write(spi, REG_ENSM_CONFIG_1, 0); /* Move to Wait*/
		udelay(1); /* Wait for ENSM settle */
		ad9361_spi_write(spi, REG_CLOCK_ENABLE,
    9604:	10803fcc 	andi	r2,r2,255
    9608:	10000226 	beq	r2,zero,9614 <ad9361_ensm_set_state+0x340>
    960c:	00800404 	movi	r2,16
    9610:	00000106 	br	9618 <ad9361_ensm_set_state+0x344>
    9614:	0005883a 	mov	r2,zero
    9618:	e13ffa17 	ldw	r4,-24(fp)
    961c:	01400244 	movi	r5,9
    9620:	100d883a 	mov	r6,r2
    9624:	00002600 	call	260 <ad9361_spi_write>
				 (phy->pdata->use_extclk ? XO_BYPASS : 0)); /* Turn off all clocks */
		phy->curr_ensm_state = ensm_state;
    9628:	e0bffc17 	ldw	r2,-16(fp)
    962c:	e0fffd03 	ldbu	r3,-12(fp)
    9630:	10c03145 	stb	r3,197(r2)
		return 0;
    9634:	0005883a 	mov	r2,zero
    9638:	00007e06 	br	9834 <ad9361_ensm_set_state+0x560>

	default:
		dev_err(dev, "No handling for forcing %d ensm state",
    963c:	e0bffd03 	ldbu	r2,-12(fp)
    9640:	010000b4 	movhi	r4,2
    9644:	211af604 	addi	r4,r4,27608
    9648:	100b883a 	mov	r5,r2
    964c:	001f8180 	call	1f818 <printf>
    9650:	010000b4 	movhi	r4,2
    9654:	211a7504 	addi	r4,r4,27092
    9658:	001f8180 	call	1f818 <printf>
			ensm_state);
		goto out;
    965c:	00007406 	br	9830 <ad9361_ensm_set_state+0x55c>
	case ENSM_STATE_ALERT:
		val &= ~(FORCE_TX_ON | FORCE_RX_ON);
		val |= TO_ALERT | FORCE_ALERT_STATE;
		break;
	case ENSM_STATE_SLEEP_WAIT:
		break;
    9660:	0001883a 	nop
		dev_err(dev, "No handling for forcing %d ensm state",
			ensm_state);
		goto out;
	}

	if (rc) {
    9664:	e0bff817 	ldw	r2,-32(fp)
    9668:	10001226 	beq	r2,zero,96b4 <ad9361_ensm_set_state+0x3e0>
		dev_err(dev, "Invalid ENSM state transition in %s mode",
    966c:	e0bffc17 	ldw	r2,-16(fp)
    9670:	10803017 	ldw	r2,192(r2)
    9674:	10800043 	ldbu	r2,1(r2)
    9678:	10803fcc 	andi	r2,r2,255
    967c:	10000326 	beq	r2,zero,968c <ad9361_ensm_set_state+0x3b8>
    9680:	008000b4 	movhi	r2,2
    9684:	109c9e04 	addi	r2,r2,29304
    9688:	00000206 	br	9694 <ad9361_ensm_set_state+0x3c0>
    968c:	008000b4 	movhi	r2,2
    9690:	109c9f04 	addi	r2,r2,29308
    9694:	010000b4 	movhi	r4,2
    9698:	211ca004 	addi	r4,r4,29312
    969c:	100b883a 	mov	r5,r2
    96a0:	001f8180 	call	1f818 <printf>
    96a4:	010000b4 	movhi	r4,2
    96a8:	211a7504 	addi	r4,r4,27092
    96ac:	001f8180 	call	1f818 <printf>
			phy->pdata->fdd ? "FDD" : "TDD");
		goto out;
    96b0:	00005f06 	br	9830 <ad9361_ensm_set_state+0x55c>
	}

	if (!phy->pdata->fdd && !pinctrl && !phy->pdata->tdd_use_dual_synth &&
    96b4:	e0bffc17 	ldw	r2,-16(fp)
    96b8:	10803017 	ldw	r2,192(r2)
    96bc:	10800043 	ldbu	r2,1(r2)
    96c0:	1080005c 	xori	r2,r2,1
    96c4:	10803fcc 	andi	r2,r2,255
    96c8:	10001e26 	beq	r2,zero,9744 <ad9361_ensm_set_state+0x470>
    96cc:	e0bffe03 	ldbu	r2,-8(fp)
    96d0:	1080005c 	xori	r2,r2,1
    96d4:	10803fcc 	andi	r2,r2,255
    96d8:	10001a26 	beq	r2,zero,9744 <ad9361_ensm_set_state+0x470>
    96dc:	e0bffc17 	ldw	r2,-16(fp)
    96e0:	10803017 	ldw	r2,192(r2)
    96e4:	10800243 	ldbu	r2,9(r2)
    96e8:	1080005c 	xori	r2,r2,1
    96ec:	10803fcc 	andi	r2,r2,255
    96f0:	10001426 	beq	r2,zero,9744 <ad9361_ensm_set_state+0x470>
    96f4:	e0bffd03 	ldbu	r2,-12(fp)
    96f8:	108001a0 	cmpeqi	r2,r2,6
    96fc:	1000031e 	bne	r2,zero,970c <ad9361_ensm_set_state+0x438>
			(ensm_state == ENSM_STATE_TX || ensm_state == ENSM_STATE_RX))
    9700:	e0bffd03 	ldbu	r2,-12(fp)
    9704:	10800218 	cmpnei	r2,r2,8
    9708:	10000e1e 	bne	r2,zero,9744 <ad9361_ensm_set_state+0x470>
		ad9361_spi_writef(phy->spi, REG_ENSM_CONFIG_2,
    970c:	e0bffc17 	ldw	r2,-16(fp)
    9710:	14000117 	ldw	r16,4(r2)
    9714:	01000404 	movi	r4,16
    9718:	001c8300 	call	1c830 <find_first_bit>
    971c:	1007883a 	mov	r3,r2
    9720:	e0bffd03 	ldbu	r2,-12(fp)
    9724:	108001a0 	cmpeqi	r2,r2,6
    9728:	10803fcc 	andi	r2,r2,255
    972c:	d8800015 	stw	r2,0(sp)
    9730:	8009883a 	mov	r4,r16
    9734:	01400544 	movi	r5,21
    9738:	01800404 	movi	r6,16
    973c:	180f883a 	mov	r7,r3
    9740:	000031c0 	call	31c <__ad9361_spi_writef>
				TXNRX_SPI_CTRL, ensm_state == ENSM_STATE_TX);

	rc = ad9361_spi_write(spi, REG_ENSM_CONFIG_1, val);
    9744:	e13ffa17 	ldw	r4,-24(fp)
    9748:	01400504 	movi	r5,20
    974c:	e1bff917 	ldw	r6,-28(fp)
    9750:	00002600 	call	260 <ad9361_spi_write>
    9754:	e0bff815 	stw	r2,-32(fp)
	if (rc)
    9758:	e0bff817 	ldw	r2,-32(fp)
    975c:	10000626 	beq	r2,zero,9778 <ad9361_ensm_set_state+0x4a4>
		dev_err(dev, "Failed to restore state");
    9760:	010000b4 	movhi	r4,2
    9764:	211b0004 	addi	r4,r4,27648
    9768:	001f8180 	call	1f818 <printf>
    976c:	010000b4 	movhi	r4,2
    9770:	211a7504 	addi	r4,r4,27092
    9774:	001f8180 	call	1f818 <printf>

	if ((val & FORCE_RX_ON) &&
    9778:	e0bff917 	ldw	r2,-28(fp)
    977c:	1080100c 	andi	r2,r2,64
    9780:	10002826 	beq	r2,zero,9824 <ad9361_ensm_set_state+0x550>
		(phy->agc_mode[0] == RF_GAIN_MGC ||
    9784:	e0bffc17 	ldw	r2,-16(fp)
    9788:	10805f03 	ldbu	r2,380(r2)

	rc = ad9361_spi_write(spi, REG_ENSM_CONFIG_1, val);
	if (rc)
		dev_err(dev, "Failed to restore state");

	if ((val & FORCE_RX_ON) &&
    978c:	10803fcc 	andi	r2,r2,255
    9790:	10000426 	beq	r2,zero,97a4 <ad9361_ensm_set_state+0x4d0>
		(phy->agc_mode[0] == RF_GAIN_MGC ||
		 phy->agc_mode[1] == RF_GAIN_MGC)) {
    9794:	e0bffc17 	ldw	r2,-16(fp)
    9798:	10805f43 	ldbu	r2,381(r2)
	rc = ad9361_spi_write(spi, REG_ENSM_CONFIG_1, val);
	if (rc)
		dev_err(dev, "Failed to restore state");

	if ((val & FORCE_RX_ON) &&
		(phy->agc_mode[0] == RF_GAIN_MGC ||
    979c:	10803fcc 	andi	r2,r2,255
    97a0:	1000201e 	bne	r2,zero,9824 <ad9361_ensm_set_state+0x550>
		 phy->agc_mode[1] == RF_GAIN_MGC)) {
		tmp = ad9361_spi_read(spi, REG_SMALL_LMT_OVERLOAD_THRESH);
    97a4:	e13ffa17 	ldw	r4,-24(fp)
    97a8:	014041c4 	movi	r5,263
    97ac:	00001500 	call	150 <ad9361_spi_read>
    97b0:	e0bffb15 	stw	r2,-20(fp)
		ad9361_spi_write(spi, REG_SMALL_LMT_OVERLOAD_THRESH,
			(tmp & SMALL_LMT_OVERLOAD_THRESH(~0)) |
    97b4:	e0bffb17 	ldw	r2,-20(fp)
    97b8:	10c00fcc 	andi	r3,r2,63
			(phy->agc_mode[0] == RF_GAIN_MGC ? FORCE_PD_RESET_RX1 : 0) |
    97bc:	e0bffc17 	ldw	r2,-16(fp)
    97c0:	10805f03 	ldbu	r2,380(r2)
	if ((val & FORCE_RX_ON) &&
		(phy->agc_mode[0] == RF_GAIN_MGC ||
		 phy->agc_mode[1] == RF_GAIN_MGC)) {
		tmp = ad9361_spi_read(spi, REG_SMALL_LMT_OVERLOAD_THRESH);
		ad9361_spi_write(spi, REG_SMALL_LMT_OVERLOAD_THRESH,
			(tmp & SMALL_LMT_OVERLOAD_THRESH(~0)) |
    97c4:	10803fcc 	andi	r2,r2,255
    97c8:	1000021e 	bne	r2,zero,97d4 <ad9361_ensm_set_state+0x500>
    97cc:	00801004 	movi	r2,64
    97d0:	00000106 	br	97d8 <ad9361_ensm_set_state+0x504>
    97d4:	0005883a 	mov	r2,zero
    97d8:	1886b03a 	or	r3,r3,r2
			(phy->agc_mode[0] == RF_GAIN_MGC ? FORCE_PD_RESET_RX1 : 0) |
			(phy->agc_mode[1] == RF_GAIN_MGC ? FORCE_PD_RESET_RX2 : 0));
    97dc:	e0bffc17 	ldw	r2,-16(fp)
    97e0:	10805f43 	ldbu	r2,381(r2)

	if ((val & FORCE_RX_ON) &&
		(phy->agc_mode[0] == RF_GAIN_MGC ||
		 phy->agc_mode[1] == RF_GAIN_MGC)) {
		tmp = ad9361_spi_read(spi, REG_SMALL_LMT_OVERLOAD_THRESH);
		ad9361_spi_write(spi, REG_SMALL_LMT_OVERLOAD_THRESH,
    97e4:	10803fcc 	andi	r2,r2,255
    97e8:	1000021e 	bne	r2,zero,97f4 <ad9361_ensm_set_state+0x520>
    97ec:	00802004 	movi	r2,128
    97f0:	00000106 	br	97f8 <ad9361_ensm_set_state+0x524>
    97f4:	0005883a 	mov	r2,zero
    97f8:	1884b03a 	or	r2,r3,r2
    97fc:	e13ffa17 	ldw	r4,-24(fp)
    9800:	014041c4 	movi	r5,263
    9804:	100d883a 	mov	r6,r2
    9808:	00002600 	call	260 <ad9361_spi_write>
			(tmp & SMALL_LMT_OVERLOAD_THRESH(~0)) |
			(phy->agc_mode[0] == RF_GAIN_MGC ? FORCE_PD_RESET_RX1 : 0) |
			(phy->agc_mode[1] == RF_GAIN_MGC ? FORCE_PD_RESET_RX2 : 0));
		ad9361_spi_write(spi, REG_SMALL_LMT_OVERLOAD_THRESH,
    980c:	e0bffb17 	ldw	r2,-20(fp)
    9810:	10800fcc 	andi	r2,r2,63
    9814:	e13ffa17 	ldw	r4,-24(fp)
    9818:	014041c4 	movi	r5,263
    981c:	100d883a 	mov	r6,r2
    9820:	00002600 	call	260 <ad9361_spi_write>
				 tmp & SMALL_LMT_OVERLOAD_THRESH(~0));
	}

	phy->curr_ensm_state = ensm_state;
    9824:	e0bffc17 	ldw	r2,-16(fp)
    9828:	e0fffd03 	ldbu	r3,-12(fp)
    982c:	10c03145 	stb	r3,197(r2)

out:
	return rc;
    9830:	e0bff817 	ldw	r2,-32(fp)

}
    9834:	e6ffff04 	addi	sp,fp,-4
    9838:	dfc00217 	ldw	ra,8(sp)
    983c:	df000117 	ldw	fp,4(sp)
    9840:	dc000017 	ldw	r16,0(sp)
    9844:	dec00304 	addi	sp,sp,12
    9848:	f800283a 	ret

0000984c <ad9361_validate_trx_clock_chain>:
 * @param rx_path_clks RX path rates buffer.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_validate_trx_clock_chain(struct ad9361_rf_phy *phy,
		uint32_t *rx_path_clks)
{
    984c:	defffa04 	addi	sp,sp,-24
    9850:	de00012e 	bgeu	sp,et,9858 <ad9361_validate_trx_clock_chain+0xc>
    9854:	003b68fa 	trap	3
    9858:	dfc00515 	stw	ra,20(sp)
    985c:	df000415 	stw	fp,16(sp)
    9860:	df000404 	addi	fp,sp,16
    9864:	e13ffe15 	stw	r4,-8(fp)
    9868:	e17fff15 	stw	r5,-4(fp)
	int32_t i;
	uint32_t data_clk;

	data_clk = (phy->pdata->rx2tx2 ? 4 : 2) * rx_path_clks[RX_SAMPL_FREQ];
    986c:	e0bffe17 	ldw	r2,-8(fp)
    9870:	10803017 	ldw	r2,192(r2)
    9874:	10800003 	ldbu	r2,0(r2)
    9878:	10803fcc 	andi	r2,r2,255
    987c:	10000226 	beq	r2,zero,9888 <ad9361_validate_trx_clock_chain+0x3c>
    9880:	00800104 	movi	r2,4
    9884:	00000106 	br	988c <ad9361_validate_trx_clock_chain+0x40>
    9888:	00800084 	movi	r2,2
    988c:	e0ffff17 	ldw	r3,-4(fp)
    9890:	18c00504 	addi	r3,r3,20
    9894:	18c00017 	ldw	r3,0(r3)
    9898:	10c5383a 	mul	r2,r2,r3
    989c:	e0bffd15 	stw	r2,-12(fp)

	for (i = 1; i <= 3; i++) {
    98a0:	00800044 	movi	r2,1
    98a4:	e0bffc15 	stw	r2,-16(fp)
    98a8:	00001d06 	br	9920 <ad9361_validate_trx_clock_chain+0xd4>
		if (abs(rx_path_clks[ADC_FREQ] / i - data_clk) < 4)
    98ac:	e0bfff17 	ldw	r2,-4(fp)
    98b0:	10800104 	addi	r2,r2,4
    98b4:	10c00017 	ldw	r3,0(r2)
    98b8:	e0bffc17 	ldw	r2,-16(fp)
    98bc:	1809883a 	mov	r4,r3
    98c0:	100b883a 	mov	r5,r2
    98c4:	001d7a40 	call	1d7a4 <__udivsi3>
    98c8:	1007883a 	mov	r3,r2
    98cc:	e0bffd17 	ldw	r2,-12(fp)
    98d0:	1885c83a 	sub	r2,r3,r2
    98d4:	10bfff50 	cmplti	r2,r2,-3
    98d8:	10000e1e 	bne	r2,zero,9914 <ad9361_validate_trx_clock_chain+0xc8>
    98dc:	e0bfff17 	ldw	r2,-4(fp)
    98e0:	10800104 	addi	r2,r2,4
    98e4:	10c00017 	ldw	r3,0(r2)
    98e8:	e0bffc17 	ldw	r2,-16(fp)
    98ec:	1809883a 	mov	r4,r3
    98f0:	100b883a 	mov	r5,r2
    98f4:	001d7a40 	call	1d7a4 <__udivsi3>
    98f8:	1007883a 	mov	r3,r2
    98fc:	e0bffd17 	ldw	r2,-12(fp)
    9900:	1885c83a 	sub	r2,r3,r2
    9904:	10800108 	cmpgei	r2,r2,4
    9908:	1000021e 	bne	r2,zero,9914 <ad9361_validate_trx_clock_chain+0xc8>
			return 0;
    990c:	0005883a 	mov	r2,zero
    9910:	00002c06 	br	99c4 <ad9361_validate_trx_clock_chain+0x178>
	int32_t i;
	uint32_t data_clk;

	data_clk = (phy->pdata->rx2tx2 ? 4 : 2) * rx_path_clks[RX_SAMPL_FREQ];

	for (i = 1; i <= 3; i++) {
    9914:	e0bffc17 	ldw	r2,-16(fp)
    9918:	10800044 	addi	r2,r2,1
    991c:	e0bffc15 	stw	r2,-16(fp)
    9920:	e0bffc17 	ldw	r2,-16(fp)
    9924:	10800110 	cmplti	r2,r2,4
    9928:	103fe01e 	bne	r2,zero,98ac <_gp+0xfffd778c>
		if (abs(rx_path_clks[ADC_FREQ] / i - data_clk) < 4)
			return 0;
	}

	for (i = 1; i <= 4; i++) {
    992c:	00800044 	movi	r2,1
    9930:	e0bffc15 	stw	r2,-16(fp)
    9934:	00001706 	br	9994 <ad9361_validate_trx_clock_chain+0x148>
		if (abs((rx_path_clks[R2_FREQ] >> i) - data_clk) < 4)
    9938:	e0bfff17 	ldw	r2,-4(fp)
    993c:	10800204 	addi	r2,r2,8
    9940:	10c00017 	ldw	r3,0(r2)
    9944:	e0bffc17 	ldw	r2,-16(fp)
    9948:	1886d83a 	srl	r3,r3,r2
    994c:	e0bffd17 	ldw	r2,-12(fp)
    9950:	1885c83a 	sub	r2,r3,r2
    9954:	10bfff50 	cmplti	r2,r2,-3
    9958:	10000b1e 	bne	r2,zero,9988 <ad9361_validate_trx_clock_chain+0x13c>
    995c:	e0bfff17 	ldw	r2,-4(fp)
    9960:	10800204 	addi	r2,r2,8
    9964:	10c00017 	ldw	r3,0(r2)
    9968:	e0bffc17 	ldw	r2,-16(fp)
    996c:	1886d83a 	srl	r3,r3,r2
    9970:	e0bffd17 	ldw	r2,-12(fp)
    9974:	1885c83a 	sub	r2,r3,r2
    9978:	10800108 	cmpgei	r2,r2,4
    997c:	1000021e 	bne	r2,zero,9988 <ad9361_validate_trx_clock_chain+0x13c>
			return 0;
    9980:	0005883a 	mov	r2,zero
    9984:	00000f06 	br	99c4 <ad9361_validate_trx_clock_chain+0x178>
	for (i = 1; i <= 3; i++) {
		if (abs(rx_path_clks[ADC_FREQ] / i - data_clk) < 4)
			return 0;
	}

	for (i = 1; i <= 4; i++) {
    9988:	e0bffc17 	ldw	r2,-16(fp)
    998c:	10800044 	addi	r2,r2,1
    9990:	e0bffc15 	stw	r2,-16(fp)
    9994:	e0bffc17 	ldw	r2,-16(fp)
    9998:	10800150 	cmplti	r2,r2,5
    999c:	103fe61e 	bne	r2,zero,9938 <_gp+0xfffd7818>
		if (abs((rx_path_clks[R2_FREQ] >> i) - data_clk) < 4)
			return 0;
	}

	dev_err(&phy->spi->dev, "%s: Failed - at least one of the clock rates"
    99a0:	010000b4 	movhi	r4,2
    99a4:	211cab04 	addi	r4,r4,29356
    99a8:	014000b4 	movhi	r5,2
    99ac:	295f4a04 	addi	r5,r5,32040
    99b0:	001f8180 	call	1f818 <printf>
    99b4:	010000b4 	movhi	r4,2
    99b8:	211a7504 	addi	r4,r4,27092
    99bc:	001f8180 	call	1f818 <printf>
		" must be equal to the DATA_CLK (lvds) rate", __func__);

	return -EINVAL;
    99c0:	00bffa84 	movi	r2,-22
}
    99c4:	e037883a 	mov	sp,fp
    99c8:	dfc00117 	ldw	ra,4(sp)
    99cc:	df000017 	ldw	fp,0(sp)
    99d0:	dec00204 	addi	sp,sp,8
    99d4:	f800283a 	ret

000099d8 <ad9361_set_trx_clock_chain>:
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_set_trx_clock_chain(struct ad9361_rf_phy *phy,
	uint32_t *rx_path_clks,
	uint32_t *tx_path_clks)
{
    99d8:	defff204 	addi	sp,sp,-56
    99dc:	de00012e 	bgeu	sp,et,99e4 <ad9361_set_trx_clock_chain+0xc>
    99e0:	003b68fa 	trap	3
    99e4:	dfc00d15 	stw	ra,52(sp)
    99e8:	df000c15 	stw	fp,48(sp)
    99ec:	dc000b15 	stw	r16,44(sp)
    99f0:	df000c04 	addi	fp,sp,48
    99f4:	e13ffc15 	stw	r4,-16(fp)
    99f8:	e17ffd15 	stw	r5,-12(fp)
    99fc:	e1bffe15 	stw	r6,-8(fp)
	int32_t ret, i, j, n;

	dev_dbg(&phy->spi->dev, "%s", __func__);
    9a00:	010000b4 	movhi	r4,2
    9a04:	211aac04 	addi	r4,r4,27312
    9a08:	014000b4 	movhi	r5,2
    9a0c:	295f5204 	addi	r5,r5,32072
    9a10:	001f8180 	call	1f818 <printf>
    9a14:	010000b4 	movhi	r4,2
    9a18:	211a7504 	addi	r4,r4,27092
    9a1c:	001f8180 	call	1f818 <printf>

	if (!rx_path_clks || !tx_path_clks)
    9a20:	e0bffd17 	ldw	r2,-12(fp)
    9a24:	10000226 	beq	r2,zero,9a30 <ad9361_set_trx_clock_chain+0x58>
    9a28:	e0bffe17 	ldw	r2,-8(fp)
    9a2c:	1000021e 	bne	r2,zero,9a38 <ad9361_set_trx_clock_chain+0x60>
		return -EINVAL;
    9a30:	00bffa84 	movi	r2,-22
    9a34:	0000e406 	br	9dc8 <ad9361_set_trx_clock_chain+0x3f0>

	dev_dbg(&phy->spi->dev, "%s: %"PRIu32" %"PRIu32" %"PRIu32" %"PRIu32" %"PRIu32" %"PRIu32,
    9a38:	e0bffd17 	ldw	r2,-12(fp)
    9a3c:	11800017 	ldw	r6,0(r2)
    9a40:	e0bffd17 	ldw	r2,-12(fp)
    9a44:	10800104 	addi	r2,r2,4
    9a48:	11c00017 	ldw	r7,0(r2)
    9a4c:	e0bffd17 	ldw	r2,-12(fp)
    9a50:	10800204 	addi	r2,r2,8
    9a54:	11400017 	ldw	r5,0(r2)
    9a58:	e0bffd17 	ldw	r2,-12(fp)
    9a5c:	10800304 	addi	r2,r2,12
    9a60:	11000017 	ldw	r4,0(r2)
    9a64:	e0bffd17 	ldw	r2,-12(fp)
    9a68:	10800404 	addi	r2,r2,16
    9a6c:	10c00017 	ldw	r3,0(r2)
    9a70:	e0bffd17 	ldw	r2,-12(fp)
    9a74:	10800504 	addi	r2,r2,20
    9a78:	10800017 	ldw	r2,0(r2)
    9a7c:	d9400015 	stw	r5,0(sp)
    9a80:	d9000115 	stw	r4,4(sp)
    9a84:	d8c00215 	stw	r3,8(sp)
    9a88:	d8800315 	stw	r2,12(sp)
    9a8c:	010000b4 	movhi	r4,2
    9a90:	211cc104 	addi	r4,r4,29444
    9a94:	014000b4 	movhi	r5,2
    9a98:	295f5204 	addi	r5,r5,32072
    9a9c:	001f8180 	call	1f818 <printf>
    9aa0:	010000b4 	movhi	r4,2
    9aa4:	211a7504 	addi	r4,r4,27092
    9aa8:	001f8180 	call	1f818 <printf>
		__func__, rx_path_clks[BBPLL_FREQ], rx_path_clks[ADC_FREQ],
		rx_path_clks[R2_FREQ], rx_path_clks[R1_FREQ],
		rx_path_clks[CLKRF_FREQ], rx_path_clks[RX_SAMPL_FREQ]);

	dev_dbg(&phy->spi->dev, "%s: %"PRIu32" %"PRIu32" %"PRIu32" %"PRIu32" %"PRIu32" %"PRIu32,
    9aac:	e0bffe17 	ldw	r2,-8(fp)
    9ab0:	11800017 	ldw	r6,0(r2)
    9ab4:	e0bffe17 	ldw	r2,-8(fp)
    9ab8:	10800104 	addi	r2,r2,4
    9abc:	11c00017 	ldw	r7,0(r2)
    9ac0:	e0bffe17 	ldw	r2,-8(fp)
    9ac4:	10800204 	addi	r2,r2,8
    9ac8:	11400017 	ldw	r5,0(r2)
    9acc:	e0bffe17 	ldw	r2,-8(fp)
    9ad0:	10800304 	addi	r2,r2,12
    9ad4:	11000017 	ldw	r4,0(r2)
    9ad8:	e0bffe17 	ldw	r2,-8(fp)
    9adc:	10800404 	addi	r2,r2,16
    9ae0:	10c00017 	ldw	r3,0(r2)
    9ae4:	e0bffe17 	ldw	r2,-8(fp)
    9ae8:	10800504 	addi	r2,r2,20
    9aec:	10800017 	ldw	r2,0(r2)
    9af0:	d9400015 	stw	r5,0(sp)
    9af4:	d9000115 	stw	r4,4(sp)
    9af8:	d8c00215 	stw	r3,8(sp)
    9afc:	d8800315 	stw	r2,12(sp)
    9b00:	010000b4 	movhi	r4,2
    9b04:	211cc104 	addi	r4,r4,29444
    9b08:	014000b4 	movhi	r5,2
    9b0c:	295f5204 	addi	r5,r5,32072
    9b10:	001f8180 	call	1f818 <printf>
    9b14:	010000b4 	movhi	r4,2
    9b18:	211a7504 	addi	r4,r4,27092
    9b1c:	001f8180 	call	1f818 <printf>
		__func__, tx_path_clks[BBPLL_FREQ], tx_path_clks[ADC_FREQ],
		tx_path_clks[R2_FREQ], tx_path_clks[R1_FREQ],
		tx_path_clks[CLKRF_FREQ], tx_path_clks[RX_SAMPL_FREQ]);

	ret = ad9361_validate_trx_clock_chain(phy, rx_path_clks);
    9b20:	e13ffc17 	ldw	r4,-16(fp)
    9b24:	e17ffd17 	ldw	r5,-12(fp)
    9b28:	000984c0 	call	984c <ad9361_validate_trx_clock_chain>
    9b2c:	e0bffb15 	stw	r2,-20(fp)
	if (ret < 0)
    9b30:	e0bffb17 	ldw	r2,-20(fp)
    9b34:	1000020e 	bge	r2,zero,9b40 <ad9361_set_trx_clock_chain+0x168>
		return ret;
    9b38:	e0bffb17 	ldw	r2,-20(fp)
    9b3c:	0000a206 	br	9dc8 <ad9361_set_trx_clock_chain+0x3f0>

	ret = clk_set_rate(phy, phy->ref_clk_scale[BBPLL_CLK], rx_path_clks[BBPLL_FREQ]);
    9b40:	e0bffc17 	ldw	r2,-16(fp)
    9b44:	10c01a17 	ldw	r3,104(r2)
    9b48:	e0bffd17 	ldw	r2,-12(fp)
    9b4c:	10800017 	ldw	r2,0(r2)
    9b50:	e13ffc17 	ldw	r4,-16(fp)
    9b54:	180b883a 	mov	r5,r3
    9b58:	100d883a 	mov	r6,r2
    9b5c:	001be380 	call	1be38 <clk_set_rate>
    9b60:	e0bffb15 	stw	r2,-20(fp)
	if (ret < 0)
    9b64:	e0bffb17 	ldw	r2,-20(fp)
    9b68:	1000020e 	bge	r2,zero,9b74 <ad9361_set_trx_clock_chain+0x19c>
		return ret;
    9b6c:	e0bffb17 	ldw	r2,-20(fp)
    9b70:	00009506 	br	9dc8 <ad9361_set_trx_clock_chain+0x3f0>

	for (i = ADC_CLK, j = DAC_CLK, n = ADC_FREQ;
    9b74:	00800104 	movi	r2,4
    9b78:	e0bff815 	stw	r2,-32(fp)
    9b7c:	00800244 	movi	r2,9
    9b80:	e0bff915 	stw	r2,-28(fp)
    9b84:	00800044 	movi	r2,1
    9b88:	e0bffa15 	stw	r2,-24(fp)
    9b8c:	00004506 	br	9ca4 <ad9361_set_trx_clock_chain+0x2cc>
		i <= RX_SAMPL_CLK; i++, j++, n++) {
		ret = clk_set_rate(phy, phy->ref_clk_scale[i], rx_path_clks[n]);
    9b90:	e0fffc17 	ldw	r3,-16(fp)
    9b94:	e0bff817 	ldw	r2,-32(fp)
    9b98:	108005c4 	addi	r2,r2,23
    9b9c:	1085883a 	add	r2,r2,r2
    9ba0:	1085883a 	add	r2,r2,r2
    9ba4:	1885883a 	add	r2,r3,r2
    9ba8:	10c00017 	ldw	r3,0(r2)
    9bac:	e0bffa17 	ldw	r2,-24(fp)
    9bb0:	1085883a 	add	r2,r2,r2
    9bb4:	1085883a 	add	r2,r2,r2
    9bb8:	1009883a 	mov	r4,r2
    9bbc:	e0bffd17 	ldw	r2,-12(fp)
    9bc0:	1105883a 	add	r2,r2,r4
    9bc4:	10800017 	ldw	r2,0(r2)
    9bc8:	e13ffc17 	ldw	r4,-16(fp)
    9bcc:	180b883a 	mov	r5,r3
    9bd0:	100d883a 	mov	r6,r2
    9bd4:	001be380 	call	1be38 <clk_set_rate>
    9bd8:	e0bffb15 	stw	r2,-20(fp)
		if (ret < 0) {
    9bdc:	e0bffb17 	ldw	r2,-20(fp)
    9be0:	1000090e 	bge	r2,zero,9c08 <ad9361_set_trx_clock_chain+0x230>
			dev_err(dev, "Failed to set BB ref clock rate (%"PRId32")",
    9be4:	010000b4 	movhi	r4,2
    9be8:	211cc804 	addi	r4,r4,29472
    9bec:	e17ffb17 	ldw	r5,-20(fp)
    9bf0:	001f8180 	call	1f818 <printf>
    9bf4:	010000b4 	movhi	r4,2
    9bf8:	211a7504 	addi	r4,r4,27092
    9bfc:	001f8180 	call	1f818 <printf>
				ret);
			return ret;
    9c00:	e0bffb17 	ldw	r2,-20(fp)
    9c04:	00007006 	br	9dc8 <ad9361_set_trx_clock_chain+0x3f0>
		}
		ret = clk_set_rate(phy, phy->ref_clk_scale[j], tx_path_clks[n]);
    9c08:	e0fffc17 	ldw	r3,-16(fp)
    9c0c:	e0bff917 	ldw	r2,-28(fp)
    9c10:	108005c4 	addi	r2,r2,23
    9c14:	1085883a 	add	r2,r2,r2
    9c18:	1085883a 	add	r2,r2,r2
    9c1c:	1885883a 	add	r2,r3,r2
    9c20:	10c00017 	ldw	r3,0(r2)
    9c24:	e0bffa17 	ldw	r2,-24(fp)
    9c28:	1085883a 	add	r2,r2,r2
    9c2c:	1085883a 	add	r2,r2,r2
    9c30:	1009883a 	mov	r4,r2
    9c34:	e0bffe17 	ldw	r2,-8(fp)
    9c38:	1105883a 	add	r2,r2,r4
    9c3c:	10800017 	ldw	r2,0(r2)
    9c40:	e13ffc17 	ldw	r4,-16(fp)
    9c44:	180b883a 	mov	r5,r3
    9c48:	100d883a 	mov	r6,r2
    9c4c:	001be380 	call	1be38 <clk_set_rate>
    9c50:	e0bffb15 	stw	r2,-20(fp)
		if (ret < 0) {
    9c54:	e0bffb17 	ldw	r2,-20(fp)
    9c58:	1000090e 	bge	r2,zero,9c80 <ad9361_set_trx_clock_chain+0x2a8>
			dev_err(dev, "Failed to set BB ref clock rate (%"PRId32")",
    9c5c:	010000b4 	movhi	r4,2
    9c60:	211cc804 	addi	r4,r4,29472
    9c64:	e17ffb17 	ldw	r5,-20(fp)
    9c68:	001f8180 	call	1f818 <printf>
    9c6c:	010000b4 	movhi	r4,2
    9c70:	211a7504 	addi	r4,r4,27092
    9c74:	001f8180 	call	1f818 <printf>
				ret);
			return ret;
    9c78:	e0bffb17 	ldw	r2,-20(fp)
    9c7c:	00005206 	br	9dc8 <ad9361_set_trx_clock_chain+0x3f0>
	ret = clk_set_rate(phy, phy->ref_clk_scale[BBPLL_CLK], rx_path_clks[BBPLL_FREQ]);
	if (ret < 0)
		return ret;

	for (i = ADC_CLK, j = DAC_CLK, n = ADC_FREQ;
		i <= RX_SAMPL_CLK; i++, j++, n++) {
    9c80:	e0bff817 	ldw	r2,-32(fp)
    9c84:	10800044 	addi	r2,r2,1
    9c88:	e0bff815 	stw	r2,-32(fp)
    9c8c:	e0bff917 	ldw	r2,-28(fp)
    9c90:	10800044 	addi	r2,r2,1
    9c94:	e0bff915 	stw	r2,-28(fp)
    9c98:	e0bffa17 	ldw	r2,-24(fp)
    9c9c:	10800044 	addi	r2,r2,1
    9ca0:	e0bffa15 	stw	r2,-24(fp)

	ret = clk_set_rate(phy, phy->ref_clk_scale[BBPLL_CLK], rx_path_clks[BBPLL_FREQ]);
	if (ret < 0)
		return ret;

	for (i = ADC_CLK, j = DAC_CLK, n = ADC_FREQ;
    9ca4:	e0bff817 	ldw	r2,-32(fp)
    9ca8:	10800250 	cmplti	r2,r2,9
    9cac:	103fb81e 	bne	r2,zero,9b90 <_gp+0xfffd7a70>
	/*
	 * Workaround for clock framework since clocks don't change we
	 * manually need to enable the filter
	 */

	if (phy->rx_fir_dec == 1 || phy->bypass_rx_fir) {
    9cb0:	e0bffc17 	ldw	r2,-16(fp)
    9cb4:	10805e83 	ldbu	r2,378(r2)
    9cb8:	10803fcc 	andi	r2,r2,255
    9cbc:	10800060 	cmpeqi	r2,r2,1
    9cc0:	1000041e 	bne	r2,zero,9cd4 <ad9361_set_trx_clock_chain+0x2fc>
    9cc4:	e0bffc17 	ldw	r2,-16(fp)
    9cc8:	10804f03 	ldbu	r2,316(r2)
    9ccc:	10803fcc 	andi	r2,r2,255
    9cd0:	10000f26 	beq	r2,zero,9d10 <ad9361_set_trx_clock_chain+0x338>
		ad9361_spi_writef(phy->spi, REG_RX_ENABLE_FILTER_CTRL,
    9cd4:	e0bffc17 	ldw	r2,-16(fp)
    9cd8:	14000117 	ldw	r16,4(r2)
    9cdc:	010000c4 	movi	r4,3
    9ce0:	001c8300 	call	1c830 <find_first_bit>
    9ce4:	1007883a 	mov	r3,r2
    9ce8:	e0bffc17 	ldw	r2,-16(fp)
    9cec:	10804f03 	ldbu	r2,316(r2)
    9cf0:	1080005c 	xori	r2,r2,1
    9cf4:	10803fcc 	andi	r2,r2,255
    9cf8:	d8800015 	stw	r2,0(sp)
    9cfc:	8009883a 	mov	r4,r16
    9d00:	014000c4 	movi	r5,3
    9d04:	018000c4 	movi	r6,3
    9d08:	180f883a 	mov	r7,r3
    9d0c:	000031c0 	call	31c <__ad9361_spi_writef>
			RX_FIR_ENABLE_DECIMATION(~0), !phy->bypass_rx_fir);
	}

	if (phy->tx_fir_int == 1 || phy->bypass_tx_fir) {
    9d10:	e0bffc17 	ldw	r2,-16(fp)
    9d14:	10805e03 	ldbu	r2,376(r2)
    9d18:	10803fcc 	andi	r2,r2,255
    9d1c:	10800060 	cmpeqi	r2,r2,1
    9d20:	1000041e 	bne	r2,zero,9d34 <ad9361_set_trx_clock_chain+0x35c>
    9d24:	e0bffc17 	ldw	r2,-16(fp)
    9d28:	10804f43 	ldbu	r2,317(r2)
    9d2c:	10803fcc 	andi	r2,r2,255
    9d30:	10000f26 	beq	r2,zero,9d70 <ad9361_set_trx_clock_chain+0x398>
		ad9361_spi_writef(phy->spi, REG_TX_ENABLE_FILTER_CTRL,
    9d34:	e0bffc17 	ldw	r2,-16(fp)
    9d38:	14000117 	ldw	r16,4(r2)
    9d3c:	010000c4 	movi	r4,3
    9d40:	001c8300 	call	1c830 <find_first_bit>
    9d44:	1007883a 	mov	r3,r2
    9d48:	e0bffc17 	ldw	r2,-16(fp)
    9d4c:	10804f43 	ldbu	r2,317(r2)
    9d50:	1080005c 	xori	r2,r2,1
    9d54:	10803fcc 	andi	r2,r2,255
    9d58:	d8800015 	stw	r2,0(sp)
    9d5c:	8009883a 	mov	r4,r16
    9d60:	01400084 	movi	r5,2
    9d64:	018000c4 	movi	r6,3
    9d68:	180f883a 	mov	r7,r3
    9d6c:	000031c0 	call	31c <__ad9361_spi_writef>
	 * However at 61.44 MSPS it causes problems on some systems.
	 * So we always run the digital tune in case the filter is enabled.
	 * If it is disabled we restore the values from the initial calibration.
	 */

	if (!phy->pdata->dig_interface_tune_fir_disable &&
    9d70:	e0bffc17 	ldw	r2,-16(fp)
    9d74:	10803017 	ldw	r2,192(r2)
    9d78:	10800543 	ldbu	r2,21(r2)
    9d7c:	10803fcc 	andi	r2,r2,255
    9d80:	10000f1e 	bne	r2,zero,9dc0 <ad9361_set_trx_clock_chain+0x3e8>
		!(phy->bypass_tx_fir && phy->bypass_rx_fir))
    9d84:	e0bffc17 	ldw	r2,-16(fp)
    9d88:	10804f43 	ldbu	r2,317(r2)
    9d8c:	1080005c 	xori	r2,r2,1
	 * However at 61.44 MSPS it causes problems on some systems.
	 * So we always run the digital tune in case the filter is enabled.
	 * If it is disabled we restore the values from the initial calibration.
	 */

	if (!phy->pdata->dig_interface_tune_fir_disable &&
    9d90:	10803fcc 	andi	r2,r2,255
    9d94:	1000051e 	bne	r2,zero,9dac <ad9361_set_trx_clock_chain+0x3d4>
		!(phy->bypass_tx_fir && phy->bypass_rx_fir))
    9d98:	e0bffc17 	ldw	r2,-16(fp)
    9d9c:	10804f03 	ldbu	r2,316(r2)
    9da0:	1080005c 	xori	r2,r2,1
    9da4:	10803fcc 	andi	r2,r2,255
    9da8:	10000526 	beq	r2,zero,9dc0 <ad9361_set_trx_clock_chain+0x3e8>
		ret = ad9361_dig_tune(phy, 0, SKIP_STORE_RESULT);
    9dac:	e13ffc17 	ldw	r4,-16(fp)
    9db0:	000b883a 	mov	r5,zero
    9db4:	01800404 	movi	r6,16
    9db8:	00159980 	call	15998 <ad9361_dig_tune>
    9dbc:	e0bffb15 	stw	r2,-20(fp)

	return ad9361_bb_clk_change_handler(phy);
    9dc0:	e13ffc17 	ldw	r4,-16(fp)
    9dc4:	00092200 	call	9220 <ad9361_bb_clk_change_handler>
}
    9dc8:	e6ffff04 	addi	sp,fp,-4
    9dcc:	dfc00217 	ldw	ra,8(sp)
    9dd0:	df000117 	ldw	fp,4(sp)
    9dd4:	dc000017 	ldw	r16,0(sp)
    9dd8:	dec00304 	addi	sp,sp,12
    9ddc:	f800283a 	ret

00009de0 <ad9361_get_trx_clock_chain>:
 * @param tx_path_clks TX path rates buffer.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_get_trx_clock_chain(struct ad9361_rf_phy *phy, uint32_t *rx_path_clks,
	uint32_t *tx_path_clks)
{
    9de0:	defff604 	addi	sp,sp,-40
    9de4:	de00012e 	bgeu	sp,et,9dec <ad9361_get_trx_clock_chain+0xc>
    9de8:	003b68fa 	trap	3
    9dec:	dfc00915 	stw	ra,36(sp)
    9df0:	df000815 	stw	fp,32(sp)
    9df4:	dc000715 	stw	r16,28(sp)
    9df8:	df000804 	addi	fp,sp,32
    9dfc:	e13ffc15 	stw	r4,-16(fp)
    9e00:	e17ffd15 	stw	r5,-12(fp)
    9e04:	e1bffe15 	stw	r6,-8(fp)
	int32_t i, j, n;
	uint32_t bbpll_freq;

	if (!rx_path_clks && !tx_path_clks)
    9e08:	e0bffd17 	ldw	r2,-12(fp)
    9e0c:	1000041e 	bne	r2,zero,9e20 <ad9361_get_trx_clock_chain+0x40>
    9e10:	e0bffe17 	ldw	r2,-8(fp)
    9e14:	1000021e 	bne	r2,zero,9e20 <ad9361_get_trx_clock_chain+0x40>
		return -EINVAL;
    9e18:	00bffa84 	movi	r2,-22
    9e1c:	00004a06 	br	9f48 <ad9361_get_trx_clock_chain+0x168>

	bbpll_freq = clk_get_rate(phy, phy->ref_clk_scale[BBPLL_CLK]);
    9e20:	e0bffc17 	ldw	r2,-16(fp)
    9e24:	10801a17 	ldw	r2,104(r2)
    9e28:	e13ffc17 	ldw	r4,-16(fp)
    9e2c:	100b883a 	mov	r5,r2
    9e30:	001bc900 	call	1bc90 <clk_get_rate>
    9e34:	e0bffb15 	stw	r2,-20(fp)

	if (rx_path_clks)
    9e38:	e0bffd17 	ldw	r2,-12(fp)
    9e3c:	10000326 	beq	r2,zero,9e4c <ad9361_get_trx_clock_chain+0x6c>
		rx_path_clks[BBPLL_FREQ] = bbpll_freq;
    9e40:	e0bffd17 	ldw	r2,-12(fp)
    9e44:	e0fffb17 	ldw	r3,-20(fp)
    9e48:	10c00015 	stw	r3,0(r2)

	if (tx_path_clks)
    9e4c:	e0bffe17 	ldw	r2,-8(fp)
    9e50:	10000326 	beq	r2,zero,9e60 <ad9361_get_trx_clock_chain+0x80>
		tx_path_clks[BBPLL_FREQ] = bbpll_freq;
    9e54:	e0bffe17 	ldw	r2,-8(fp)
    9e58:	e0fffb17 	ldw	r3,-20(fp)
    9e5c:	10c00015 	stw	r3,0(r2)

	for (i = ADC_CLK, j = DAC_CLK, n = ADC_FREQ;
    9e60:	00800104 	movi	r2,4
    9e64:	e0bff815 	stw	r2,-32(fp)
    9e68:	00800244 	movi	r2,9
    9e6c:	e0bff915 	stw	r2,-28(fp)
    9e70:	00800044 	movi	r2,1
    9e74:	e0bffa15 	stw	r2,-24(fp)
    9e78:	00002f06 	br	9f38 <ad9361_get_trx_clock_chain+0x158>
		i <= RX_SAMPL_CLK; i++, j++, n++) {
		if (rx_path_clks)
    9e7c:	e0bffd17 	ldw	r2,-12(fp)
    9e80:	10001126 	beq	r2,zero,9ec8 <ad9361_get_trx_clock_chain+0xe8>
			rx_path_clks[n] = clk_get_rate(phy, phy->ref_clk_scale[i]);
    9e84:	e0bffa17 	ldw	r2,-24(fp)
    9e88:	1085883a 	add	r2,r2,r2
    9e8c:	1085883a 	add	r2,r2,r2
    9e90:	1007883a 	mov	r3,r2
    9e94:	e0bffd17 	ldw	r2,-12(fp)
    9e98:	10e1883a 	add	r16,r2,r3
    9e9c:	e0fffc17 	ldw	r3,-16(fp)
    9ea0:	e0bff817 	ldw	r2,-32(fp)
    9ea4:	108005c4 	addi	r2,r2,23
    9ea8:	1085883a 	add	r2,r2,r2
    9eac:	1085883a 	add	r2,r2,r2
    9eb0:	1885883a 	add	r2,r3,r2
    9eb4:	10800017 	ldw	r2,0(r2)
    9eb8:	e13ffc17 	ldw	r4,-16(fp)
    9ebc:	100b883a 	mov	r5,r2
    9ec0:	001bc900 	call	1bc90 <clk_get_rate>
    9ec4:	80800015 	stw	r2,0(r16)
		if (tx_path_clks)
    9ec8:	e0bffe17 	ldw	r2,-8(fp)
    9ecc:	10001126 	beq	r2,zero,9f14 <ad9361_get_trx_clock_chain+0x134>
			tx_path_clks[n] = clk_get_rate(phy, phy->ref_clk_scale[j]);
    9ed0:	e0bffa17 	ldw	r2,-24(fp)
    9ed4:	1085883a 	add	r2,r2,r2
    9ed8:	1085883a 	add	r2,r2,r2
    9edc:	1007883a 	mov	r3,r2
    9ee0:	e0bffe17 	ldw	r2,-8(fp)
    9ee4:	10e1883a 	add	r16,r2,r3
    9ee8:	e0fffc17 	ldw	r3,-16(fp)
    9eec:	e0bff917 	ldw	r2,-28(fp)
    9ef0:	108005c4 	addi	r2,r2,23
    9ef4:	1085883a 	add	r2,r2,r2
    9ef8:	1085883a 	add	r2,r2,r2
    9efc:	1885883a 	add	r2,r3,r2
    9f00:	10800017 	ldw	r2,0(r2)
    9f04:	e13ffc17 	ldw	r4,-16(fp)
    9f08:	100b883a 	mov	r5,r2
    9f0c:	001bc900 	call	1bc90 <clk_get_rate>
    9f10:	80800015 	stw	r2,0(r16)

	if (tx_path_clks)
		tx_path_clks[BBPLL_FREQ] = bbpll_freq;

	for (i = ADC_CLK, j = DAC_CLK, n = ADC_FREQ;
		i <= RX_SAMPL_CLK; i++, j++, n++) {
    9f14:	e0bff817 	ldw	r2,-32(fp)
    9f18:	10800044 	addi	r2,r2,1
    9f1c:	e0bff815 	stw	r2,-32(fp)
    9f20:	e0bff917 	ldw	r2,-28(fp)
    9f24:	10800044 	addi	r2,r2,1
    9f28:	e0bff915 	stw	r2,-28(fp)
    9f2c:	e0bffa17 	ldw	r2,-24(fp)
    9f30:	10800044 	addi	r2,r2,1
    9f34:	e0bffa15 	stw	r2,-24(fp)
		rx_path_clks[BBPLL_FREQ] = bbpll_freq;

	if (tx_path_clks)
		tx_path_clks[BBPLL_FREQ] = bbpll_freq;

	for (i = ADC_CLK, j = DAC_CLK, n = ADC_FREQ;
    9f38:	e0bff817 	ldw	r2,-32(fp)
    9f3c:	10800250 	cmplti	r2,r2,9
    9f40:	103fce1e 	bne	r2,zero,9e7c <_gp+0xfffd7d5c>
			rx_path_clks[n] = clk_get_rate(phy, phy->ref_clk_scale[i]);
		if (tx_path_clks)
			tx_path_clks[n] = clk_get_rate(phy, phy->ref_clk_scale[j]);
	}

	return 0;
    9f44:	0005883a 	mov	r2,zero
}
    9f48:	e6ffff04 	addi	sp,fp,-4
    9f4c:	dfc00217 	ldw	ra,8(sp)
    9f50:	df000117 	ldw	fp,4(sp)
    9f54:	dc000017 	ldw	r16,0(sp)
    9f58:	dec00304 	addi	sp,sp,12
    9f5c:	f800283a 	ret

00009f60 <ad9361_calculate_rf_clock_chain>:
int32_t ad9361_calculate_rf_clock_chain(struct ad9361_rf_phy *phy,
	uint32_t tx_sample_rate,
	uint32_t rate_gov,
	uint32_t *rx_path_clks,
	uint32_t *tx_path_clks)
{
    9f60:	deffdf04 	addi	sp,sp,-132
    9f64:	de00012e 	bgeu	sp,et,9f6c <ad9361_calculate_rf_clock_chain+0xc>
    9f68:	003b68fa 	trap	3
    9f6c:	dfc02015 	stw	ra,128(sp)
    9f70:	df001f15 	stw	fp,124(sp)
    9f74:	dcc01e15 	stw	r19,120(sp)
    9f78:	dc801d15 	stw	r18,116(sp)
    9f7c:	dc401c15 	stw	r17,112(sp)
    9f80:	dc001b15 	stw	r16,108(sp)
    9f84:	df001f04 	addi	fp,sp,124
    9f88:	e13ff815 	stw	r4,-32(fp)
    9f8c:	e17ff915 	stw	r5,-28(fp)
    9f90:	e1bffa15 	stw	r6,-24(fp)
    9f94:	e1fffb15 	stw	r7,-20(fp)
	uint32_t clktf, clkrf, adc_rate = 0, dac_rate = 0;
    9f98:	e03fe315 	stw	zero,-116(fp)
    9f9c:	e03fe415 	stw	zero,-112(fp)
	uint64_t bbpll_rate;
	int32_t i, index_rx = -1, index_tx = -1, tmp;
    9fa0:	00bfffc4 	movi	r2,-1
    9fa4:	e0bfe615 	stw	r2,-104(fp)
    9fa8:	00bfffc4 	movi	r2,-1
    9fac:	e0bfe715 	stw	r2,-100(fp)
	uint32_t div, tx_intdec, rx_intdec, recursion = 1;
    9fb0:	00800044 	movi	r2,1
    9fb4:	e0bfec15 	stw	r2,-80(fp)
	const int8_t clk_dividers[][4] = {
    9fb8:	008000b4 	movhi	r2,2
    9fbc:	109cfc44 	addi	r2,r2,29681
    9fc0:	e0fff104 	addi	r3,fp,-60
    9fc4:	100b883a 	mov	r5,r2
    9fc8:	00800704 	movi	r2,28
    9fcc:	1809883a 	mov	r4,r3
    9fd0:	100d883a 	mov	r6,r2
    9fd4:	001f52c0 	call	1f52c <memcpy>
		{ 3, 3, 1, 1 },
		{ 2, 2, 1, 1 },
		{ 1, 1, 1, 1 },
	};

	if (phy->bypass_rx_fir)
    9fd8:	e0bff817 	ldw	r2,-32(fp)
    9fdc:	10804f03 	ldbu	r2,316(r2)
    9fe0:	10803fcc 	andi	r2,r2,255
    9fe4:	10000326 	beq	r2,zero,9ff4 <ad9361_calculate_rf_clock_chain+0x94>
		rx_intdec = 1;
    9fe8:	00800044 	movi	r2,1
    9fec:	e0bfeb15 	stw	r2,-84(fp)
    9ff0:	00000406 	br	a004 <ad9361_calculate_rf_clock_chain+0xa4>
	else
		rx_intdec = phy->rx_fir_dec;
    9ff4:	e0bff817 	ldw	r2,-32(fp)
    9ff8:	10805e83 	ldbu	r2,378(r2)
    9ffc:	10803fcc 	andi	r2,r2,255
    a000:	e0bfeb15 	stw	r2,-84(fp)

	if (phy->bypass_tx_fir)
    a004:	e0bff817 	ldw	r2,-32(fp)
    a008:	10804f43 	ldbu	r2,317(r2)
    a00c:	10803fcc 	andi	r2,r2,255
    a010:	10000326 	beq	r2,zero,a020 <ad9361_calculate_rf_clock_chain+0xc0>
		tx_intdec = 1;
    a014:	00800044 	movi	r2,1
    a018:	e0bfea15 	stw	r2,-88(fp)
    a01c:	00000406 	br	a030 <ad9361_calculate_rf_clock_chain+0xd0>
	else
		tx_intdec = phy->tx_fir_int;
    a020:	e0bff817 	ldw	r2,-32(fp)
    a024:	10805e03 	ldbu	r2,376(r2)
    a028:	10803fcc 	andi	r2,r2,255
    a02c:	e0bfea15 	stw	r2,-88(fp)

	if ((rate_gov == 1) && ((rx_intdec * tx_sample_rate * 8) < MIN_ADC_CLK)) {
    a030:	e0bffa17 	ldw	r2,-24(fp)
    a034:	10800058 	cmpnei	r2,r2,1
    a038:	1000091e 	bne	r2,zero,a060 <ad9361_calculate_rf_clock_chain+0x100>
    a03c:	e0ffeb17 	ldw	r3,-84(fp)
    a040:	e0bff917 	ldw	r2,-28(fp)
    a044:	1885383a 	mul	r2,r3,r2
    a048:	100690fa 	slli	r3,r2,3
    a04c:	00802ab4 	movhi	r2,170
    a050:	109e0884 	addi	r2,r2,30754
    a054:	10c00236 	bltu	r2,r3,a060 <ad9361_calculate_rf_clock_chain+0x100>
		recursion = 0;
    a058:	e03fec15 	stw	zero,-80(fp)
		rate_gov = 0;
    a05c:	e03ffa15 	stw	zero,-24(fp)
	}

	dev_dbg(&phy->spi->dev, "%s: requested rate %"PRIu32" TXFIR int %"PRIu32" RXFIR dec %"PRIu32" mode %s",
    a060:	e0bffa17 	ldw	r2,-24(fp)
    a064:	10000326 	beq	r2,zero,a074 <ad9361_calculate_rf_clock_chain+0x114>
    a068:	008000b4 	movhi	r2,2
    a06c:	109cd204 	addi	r2,r2,29512
    a070:	00000206 	br	a07c <ad9361_calculate_rf_clock_chain+0x11c>
    a074:	008000b4 	movhi	r2,2
    a078:	109cd404 	addi	r2,r2,29520
    a07c:	e0ffeb17 	ldw	r3,-84(fp)
    a080:	d8c00015 	stw	r3,0(sp)
    a084:	d8800115 	stw	r2,4(sp)
    a088:	010000b4 	movhi	r4,2
    a08c:	211cd704 	addi	r4,r4,29532
    a090:	014000b4 	movhi	r5,2
    a094:	295f5904 	addi	r5,r5,32100
    a098:	e1bff917 	ldw	r6,-28(fp)
    a09c:	e1ffea17 	ldw	r7,-88(fp)
    a0a0:	001f8180 	call	1f818 <printf>
    a0a4:	010000b4 	movhi	r4,2
    a0a8:	211a7504 	addi	r4,r4,27092
    a0ac:	001f8180 	call	1f818 <printf>
		__func__, tx_sample_rate, tx_intdec, rx_intdec,
		rate_gov ? "Nominal" : "Highest OSR");

	if (tx_sample_rate > (phy->pdata->rx2tx2 ? 61440000UL : 122880000UL))
    a0b0:	e0bff817 	ldw	r2,-32(fp)
    a0b4:	10803017 	ldw	r2,192(r2)
    a0b8:	10800003 	ldbu	r2,0(r2)
    a0bc:	10803fcc 	andi	r2,r2,255
    a0c0:	10000326 	beq	r2,zero,a0d0 <ad9361_calculate_rf_clock_chain+0x170>
    a0c4:	0080eab4 	movhi	r2,938
    a0c8:	10a00004 	addi	r2,r2,-32768
    a0cc:	00000106 	br	a0d4 <ad9361_calculate_rf_clock_chain+0x174>
    a0d0:	0081d4f4 	movhi	r2,1875
    a0d4:	e0fff917 	ldw	r3,-28(fp)
    a0d8:	10c0022e 	bgeu	r2,r3,a0e4 <ad9361_calculate_rf_clock_chain+0x184>
		return -EINVAL;
    a0dc:	00bffa84 	movi	r2,-22
    a0e0:	00016406 	br	a674 <ad9361_calculate_rf_clock_chain+0x714>

	clktf = tx_sample_rate * tx_intdec;
    a0e4:	e0fff917 	ldw	r3,-28(fp)
    a0e8:	e0bfea17 	ldw	r2,-88(fp)
    a0ec:	1885383a 	mul	r2,r3,r2
    a0f0:	e0bfed15 	stw	r2,-76(fp)
	clkrf = tx_sample_rate * rx_intdec * (phy->rx_eq_2tx ? 2 : 1);
    a0f4:	e0fff917 	ldw	r3,-28(fp)
    a0f8:	e0bfeb17 	ldw	r2,-84(fp)
    a0fc:	1887383a 	mul	r3,r3,r2
    a100:	e0bff817 	ldw	r2,-32(fp)
    a104:	10804f83 	ldbu	r2,318(r2)
    a108:	10803fcc 	andi	r2,r2,255
    a10c:	10000226 	beq	r2,zero,a118 <ad9361_calculate_rf_clock_chain+0x1b8>
    a110:	00800084 	movi	r2,2
    a114:	00000106 	br	a11c <ad9361_calculate_rf_clock_chain+0x1bc>
    a118:	00800044 	movi	r2,1
    a11c:	1885383a 	mul	r2,r3,r2
    a120:	e0bfee15 	stw	r2,-72(fp)

	for (i = rate_gov; i < 7; i++) {
    a124:	e0bffa17 	ldw	r2,-24(fp)
    a128:	e0bfe515 	stw	r2,-108(fp)
    a12c:	00006406 	br	a2c0 <ad9361_calculate_rf_clock_chain+0x360>
		adc_rate = clkrf * clk_dividers[i][0];
    a130:	e0bfe517 	ldw	r2,-108(fp)
    a134:	1085883a 	add	r2,r2,r2
    a138:	1085883a 	add	r2,r2,r2
    a13c:	e0ffe304 	addi	r3,fp,-116
    a140:	1885883a 	add	r2,r3,r2
    a144:	10800e04 	addi	r2,r2,56
    a148:	10800003 	ldbu	r2,0(r2)
    a14c:	10c03fcc 	andi	r3,r2,255
    a150:	18c0201c 	xori	r3,r3,128
    a154:	18ffe004 	addi	r3,r3,-128
    a158:	e0bfee17 	ldw	r2,-72(fp)
    a15c:	1885383a 	mul	r2,r3,r2
    a160:	e0bfe315 	stw	r2,-116(fp)
		dac_rate = clktf * clk_dividers[i][0];
    a164:	e0bfe517 	ldw	r2,-108(fp)
    a168:	1085883a 	add	r2,r2,r2
    a16c:	1085883a 	add	r2,r2,r2
    a170:	e13fe304 	addi	r4,fp,-116
    a174:	2085883a 	add	r2,r4,r2
    a178:	10800e04 	addi	r2,r2,56
    a17c:	10800003 	ldbu	r2,0(r2)
    a180:	10c03fcc 	andi	r3,r2,255
    a184:	18c0201c 	xori	r3,r3,128
    a188:	18ffe004 	addi	r3,r3,-128
    a18c:	e0bfed17 	ldw	r2,-76(fp)
    a190:	1885383a 	mul	r2,r3,r2
    a194:	e0bfe415 	stw	r2,-112(fp)

		if ((adc_rate <= MAX_ADC_CLK) && (adc_rate >= MIN_ADC_CLK)) {
    a198:	e0ffe317 	ldw	r3,-116(fp)
    a19c:	008989b4 	movhi	r2,9766
    a1a0:	10a80004 	addi	r2,r2,-24576
    a1a4:	10c04336 	bltu	r2,r3,a2b4 <ad9361_calculate_rf_clock_chain+0x354>
    a1a8:	e0ffe317 	ldw	r3,-116(fp)
    a1ac:	00802ab4 	movhi	r2,170
    a1b0:	109e0884 	addi	r2,r2,30754
    a1b4:	10c03f2e 	bgeu	r2,r3,a2b4 <ad9361_calculate_rf_clock_chain+0x354>


			if (dac_rate > adc_rate)
    a1b8:	e0bfe417 	ldw	r2,-112(fp)
    a1bc:	e0ffe317 	ldw	r3,-116(fp)
    a1c0:	1880062e 	bgeu	r3,r2,a1dc <ad9361_calculate_rf_clock_chain+0x27c>
				tmp = (dac_rate / adc_rate) * -1;
    a1c4:	e13fe417 	ldw	r4,-112(fp)
    a1c8:	e17fe317 	ldw	r5,-116(fp)
    a1cc:	001d7a40 	call	1d7a4 <__udivsi3>
    a1d0:	0085c83a 	sub	r2,zero,r2
    a1d4:	e0bfe815 	stw	r2,-96(fp)
    a1d8:	00000406 	br	a1ec <ad9361_calculate_rf_clock_chain+0x28c>
			else
				tmp = adc_rate / dac_rate;
    a1dc:	e13fe317 	ldw	r4,-116(fp)
    a1e0:	e17fe417 	ldw	r5,-112(fp)
    a1e4:	001d7a40 	call	1d7a4 <__udivsi3>
    a1e8:	e0bfe815 	stw	r2,-96(fp)

			if (adc_rate <= MAX_DAC_CLK) {
    a1ec:	e0ffe317 	ldw	r3,-116(fp)
    a1f0:	0084c4f4 	movhi	r2,4883
    a1f4:	10b40004 	addi	r2,r2,-12288
    a1f8:	10c00e36 	bltu	r2,r3,a234 <ad9361_calculate_rf_clock_chain+0x2d4>
				index_rx = i;
    a1fc:	e0bfe517 	ldw	r2,-108(fp)
    a200:	e0bfe615 	stw	r2,-104(fp)
				index_tx = i - ((tmp == 1) ? 0 : tmp);
    a204:	e0bfe817 	ldw	r2,-96(fp)
    a208:	10800060 	cmpeqi	r2,r2,1
    a20c:	1000021e 	bne	r2,zero,a218 <ad9361_calculate_rf_clock_chain+0x2b8>
    a210:	e0bfe817 	ldw	r2,-96(fp)
    a214:	00000106 	br	a21c <ad9361_calculate_rf_clock_chain+0x2bc>
    a218:	0005883a 	mov	r2,zero
    a21c:	e0ffe517 	ldw	r3,-108(fp)
    a220:	1885c83a 	sub	r2,r3,r2
    a224:	e0bfe715 	stw	r2,-100(fp)
				dac_rate = adc_rate; /* ADC_CLK */
    a228:	e0bfe317 	ldw	r2,-116(fp)
    a22c:	e0bfe415 	stw	r2,-112(fp)
				break;
    a230:	00002606 	br	a2cc <ad9361_calculate_rf_clock_chain+0x36c>
			}
			else {
				dac_rate = adc_rate / 2;  /* ADC_CLK/2 */
    a234:	e0bfe317 	ldw	r2,-116(fp)
    a238:	1004d07a 	srli	r2,r2,1
    a23c:	e0bfe415 	stw	r2,-112(fp)
				index_rx = i;
    a240:	e0bfe517 	ldw	r2,-108(fp)
    a244:	e0bfe615 	stw	r2,-104(fp)

				if (i == 4 && tmp >= 0)
    a248:	e0bfe517 	ldw	r2,-108(fp)
    a24c:	10800118 	cmpnei	r2,r2,4
    a250:	1000051e 	bne	r2,zero,a268 <ad9361_calculate_rf_clock_chain+0x308>
    a254:	e0bfe817 	ldw	r2,-96(fp)
    a258:	10000316 	blt	r2,zero,a268 <ad9361_calculate_rf_clock_chain+0x308>
					index_tx = 7; /* STOP: 3/2 != 1 */
    a25c:	008001c4 	movi	r2,7
    a260:	e0bfe715 	stw	r2,-100(fp)
				else
					index_tx = i + ((i == 5 && tmp >= 0) ? 1 : 2) -
					((tmp == 1) ? 0 : tmp);

				break;
    a264:	00001906 	br	a2cc <ad9361_calculate_rf_clock_chain+0x36c>
				index_rx = i;

				if (i == 4 && tmp >= 0)
					index_tx = 7; /* STOP: 3/2 != 1 */
				else
					index_tx = i + ((i == 5 && tmp >= 0) ? 1 : 2) -
    a268:	e0bfe517 	ldw	r2,-108(fp)
    a26c:	10800158 	cmpnei	r2,r2,5
    a270:	1000041e 	bne	r2,zero,a284 <ad9361_calculate_rf_clock_chain+0x324>
    a274:	e0bfe817 	ldw	r2,-96(fp)
    a278:	10000216 	blt	r2,zero,a284 <ad9361_calculate_rf_clock_chain+0x324>
    a27c:	00800044 	movi	r2,1
    a280:	00000106 	br	a288 <ad9361_calculate_rf_clock_chain+0x328>
    a284:	00800084 	movi	r2,2
    a288:	e0ffe517 	ldw	r3,-108(fp)
    a28c:	10c7883a 	add	r3,r2,r3
					((tmp == 1) ? 0 : tmp);
    a290:	e0bfe817 	ldw	r2,-96(fp)
    a294:	10800060 	cmpeqi	r2,r2,1
    a298:	1000021e 	bne	r2,zero,a2a4 <ad9361_calculate_rf_clock_chain+0x344>
    a29c:	e0bfe817 	ldw	r2,-96(fp)
    a2a0:	00000106 	br	a2a8 <ad9361_calculate_rf_clock_chain+0x348>
    a2a4:	0005883a 	mov	r2,zero
				index_rx = i;

				if (i == 4 && tmp >= 0)
					index_tx = 7; /* STOP: 3/2 != 1 */
				else
					index_tx = i + ((i == 5 && tmp >= 0) ? 1 : 2) -
    a2a8:	1885c83a 	sub	r2,r3,r2
    a2ac:	e0bfe715 	stw	r2,-100(fp)
					((tmp == 1) ? 0 : tmp);

				break;
    a2b0:	00000606 	br	a2cc <ad9361_calculate_rf_clock_chain+0x36c>
		return -EINVAL;

	clktf = tx_sample_rate * tx_intdec;
	clkrf = tx_sample_rate * rx_intdec * (phy->rx_eq_2tx ? 2 : 1);

	for (i = rate_gov; i < 7; i++) {
    a2b4:	e0bfe517 	ldw	r2,-108(fp)
    a2b8:	10800044 	addi	r2,r2,1
    a2bc:	e0bfe515 	stw	r2,-108(fp)
    a2c0:	e0bfe517 	ldw	r2,-108(fp)
    a2c4:	108001d0 	cmplti	r2,r2,7
    a2c8:	103f991e 	bne	r2,zero,a130 <_gp+0xfffd8010>
				break;
			}
		}
	}

	if ((index_tx < 0 || index_tx > 6 || index_rx < 0 || index_rx > 6) && rate_gov < 7 && recursion) {
    a2cc:	e0bfe717 	ldw	r2,-100(fp)
    a2d0:	10000816 	blt	r2,zero,a2f4 <ad9361_calculate_rf_clock_chain+0x394>
    a2d4:	e0bfe717 	ldw	r2,-100(fp)
    a2d8:	108001c8 	cmpgei	r2,r2,7
    a2dc:	1000051e 	bne	r2,zero,a2f4 <ad9361_calculate_rf_clock_chain+0x394>
    a2e0:	e0bfe617 	ldw	r2,-104(fp)
    a2e4:	10000316 	blt	r2,zero,a2f4 <ad9361_calculate_rf_clock_chain+0x394>
    a2e8:	e0bfe617 	ldw	r2,-104(fp)
    a2ec:	108001d0 	cmplti	r2,r2,7
    a2f0:	1000101e 	bne	r2,zero,a334 <ad9361_calculate_rf_clock_chain+0x3d4>
    a2f4:	e0bffa17 	ldw	r2,-24(fp)
    a2f8:	108001e8 	cmpgeui	r2,r2,7
    a2fc:	10000d1e 	bne	r2,zero,a334 <ad9361_calculate_rf_clock_chain+0x3d4>
    a300:	e0bfec17 	ldw	r2,-80(fp)
    a304:	10000b26 	beq	r2,zero,a334 <ad9361_calculate_rf_clock_chain+0x3d4>
		return ad9361_calculate_rf_clock_chain(phy, tx_sample_rate,
    a308:	e0bffa17 	ldw	r2,-24(fp)
    a30c:	10800044 	addi	r2,r2,1
    a310:	e0bffa15 	stw	r2,-24(fp)
    a314:	e0800217 	ldw	r2,8(fp)
    a318:	d8800015 	stw	r2,0(sp)
    a31c:	e13ff817 	ldw	r4,-32(fp)
    a320:	e17ff917 	ldw	r5,-28(fp)
    a324:	e1bffa17 	ldw	r6,-24(fp)
    a328:	e1fffb17 	ldw	r7,-20(fp)
    a32c:	0009f600 	call	9f60 <ad9361_calculate_rf_clock_chain>
    a330:	0000d006 	br	a674 <ad9361_calculate_rf_clock_chain+0x714>
			++rate_gov, rx_path_clks, tx_path_clks);
	}
	else if ((index_tx < 0 || index_tx > 6 || index_rx < 0 || index_rx > 6)) {
    a334:	e0bfe717 	ldw	r2,-100(fp)
    a338:	10000816 	blt	r2,zero,a35c <ad9361_calculate_rf_clock_chain+0x3fc>
    a33c:	e0bfe717 	ldw	r2,-100(fp)
    a340:	108001c8 	cmpgei	r2,r2,7
    a344:	1000051e 	bne	r2,zero,a35c <ad9361_calculate_rf_clock_chain+0x3fc>
    a348:	e0bfe617 	ldw	r2,-104(fp)
    a34c:	10000316 	blt	r2,zero,a35c <ad9361_calculate_rf_clock_chain+0x3fc>
    a350:	e0bfe617 	ldw	r2,-104(fp)
    a354:	108001d0 	cmplti	r2,r2,7
    a358:	1000141e 	bne	r2,zero,a3ac <ad9361_calculate_rf_clock_chain+0x44c>
		dev_err(&phy->spi->dev, "%s: Failed to find suitable dividers: %s",
    a35c:	e0ffe317 	ldw	r3,-116(fp)
    a360:	00802ab4 	movhi	r2,170
    a364:	109e0884 	addi	r2,r2,30754
    a368:	10c00336 	bltu	r2,r3,a378 <ad9361_calculate_rf_clock_chain+0x418>
    a36c:	008000b4 	movhi	r2,2
    a370:	109ce604 	addi	r2,r2,29592
    a374:	00000206 	br	a380 <ad9361_calculate_rf_clock_chain+0x420>
    a378:	008000b4 	movhi	r2,2
    a37c:	109cec04 	addi	r2,r2,29616
    a380:	010000b4 	movhi	r4,2
    a384:	211cf204 	addi	r4,r4,29640
    a388:	014000b4 	movhi	r5,2
    a38c:	295f5904 	addi	r5,r5,32100
    a390:	100d883a 	mov	r6,r2
    a394:	001f8180 	call	1f818 <printf>
    a398:	010000b4 	movhi	r4,2
    a39c:	211a7504 	addi	r4,r4,27092
    a3a0:	001f8180 	call	1f818 <printf>
			__func__, (adc_rate < MIN_ADC_CLK) ? "ADC clock below limit" : "BBPLL rate above limit");

		return -EINVAL;
    a3a4:	00bffa84 	movi	r2,-22
    a3a8:	0000b206 	br	a674 <ad9361_calculate_rf_clock_chain+0x714>
	}

	/* Calculate target BBPLL rate */
	div = MAX_BBPLL_DIV;
    a3ac:	00801004 	movi	r2,64
    a3b0:	e0bfe915 	stw	r2,-92(fp)

	do {
		bbpll_rate = (uint64_t)adc_rate * div;
    a3b4:	e0bfe317 	ldw	r2,-116(fp)
    a3b8:	1021883a 	mov	r16,r2
    a3bc:	0023883a 	mov	r17,zero
    a3c0:	e0bfe917 	ldw	r2,-92(fp)
    a3c4:	1025883a 	mov	r18,r2
    a3c8:	0027883a 	mov	r19,zero
    a3cc:	8009883a 	mov	r4,r16
    a3d0:	880b883a 	mov	r5,r17
    a3d4:	900d883a 	mov	r6,r18
    a3d8:	980f883a 	mov	r7,r19
    a3dc:	001c9940 	call	1c994 <__muldi3>
    a3e0:	1009883a 	mov	r4,r2
    a3e4:	180b883a 	mov	r5,r3
    a3e8:	e13fef15 	stw	r4,-68(fp)
    a3ec:	e17ff015 	stw	r5,-64(fp)
		div >>= 1;
    a3f0:	e0bfe917 	ldw	r2,-92(fp)
    a3f4:	1004d07a 	srli	r2,r2,1
    a3f8:	e0bfe915 	stw	r2,-92(fp)

	} while ((bbpll_rate > MAX_BBPLL_FREQ) && (div >= MIN_BBPLL_DIV));
    a3fc:	e0bff017 	ldw	r2,-64(fp)
    a400:	1000061e 	bne	r2,zero,a41c <ad9361_calculate_rf_clock_chain+0x4bc>
    a404:	e0bff017 	ldw	r2,-64(fp)
    a408:	1000071e 	bne	r2,zero,a428 <ad9361_calculate_rf_clock_chain+0x4c8>
    a40c:	e0ffef17 	ldw	r3,-68(fp)
    a410:	00954f34 	movhi	r2,21820
    a414:	10846004 	addi	r2,r2,4480
    a418:	10c0032e 	bgeu	r2,r3,a428 <ad9361_calculate_rf_clock_chain+0x4c8>
    a41c:	e0bfe917 	ldw	r2,-92(fp)
    a420:	108000a8 	cmpgeui	r2,r2,2
    a424:	103fe31e 	bne	r2,zero,a3b4 <_gp+0xfffd8294>

	rx_path_clks[BBPLL_FREQ] = bbpll_rate;
    a428:	e0ffef17 	ldw	r3,-68(fp)
    a42c:	e0bffb17 	ldw	r2,-20(fp)
    a430:	10c00015 	stw	r3,0(r2)
	rx_path_clks[ADC_FREQ] = adc_rate;
    a434:	e0bffb17 	ldw	r2,-20(fp)
    a438:	10800104 	addi	r2,r2,4
    a43c:	e0ffe317 	ldw	r3,-116(fp)
    a440:	10c00015 	stw	r3,0(r2)
	rx_path_clks[R2_FREQ] = rx_path_clks[ADC_FREQ] / clk_dividers[index_rx][1];
    a444:	e0bffb17 	ldw	r2,-20(fp)
    a448:	14000204 	addi	r16,r2,8
    a44c:	e0bffb17 	ldw	r2,-20(fp)
    a450:	10800104 	addi	r2,r2,4
    a454:	10c00017 	ldw	r3,0(r2)
    a458:	e0bfe617 	ldw	r2,-104(fp)
    a45c:	1085883a 	add	r2,r2,r2
    a460:	1085883a 	add	r2,r2,r2
    a464:	e13fe304 	addi	r4,fp,-116
    a468:	2085883a 	add	r2,r4,r2
    a46c:	10800e44 	addi	r2,r2,57
    a470:	10800003 	ldbu	r2,0(r2)
    a474:	10803fcc 	andi	r2,r2,255
    a478:	1080201c 	xori	r2,r2,128
    a47c:	10bfe004 	addi	r2,r2,-128
    a480:	1809883a 	mov	r4,r3
    a484:	100b883a 	mov	r5,r2
    a488:	001d7a40 	call	1d7a4 <__udivsi3>
    a48c:	80800015 	stw	r2,0(r16)
	rx_path_clks[R1_FREQ] = rx_path_clks[R2_FREQ] / clk_dividers[index_rx][2];
    a490:	e0bffb17 	ldw	r2,-20(fp)
    a494:	14000304 	addi	r16,r2,12
    a498:	e0bffb17 	ldw	r2,-20(fp)
    a49c:	10800204 	addi	r2,r2,8
    a4a0:	10c00017 	ldw	r3,0(r2)
    a4a4:	e0bfe617 	ldw	r2,-104(fp)
    a4a8:	1085883a 	add	r2,r2,r2
    a4ac:	1085883a 	add	r2,r2,r2
    a4b0:	e13fe304 	addi	r4,fp,-116
    a4b4:	2085883a 	add	r2,r4,r2
    a4b8:	10800e84 	addi	r2,r2,58
    a4bc:	10800003 	ldbu	r2,0(r2)
    a4c0:	10803fcc 	andi	r2,r2,255
    a4c4:	1080201c 	xori	r2,r2,128
    a4c8:	10bfe004 	addi	r2,r2,-128
    a4cc:	1809883a 	mov	r4,r3
    a4d0:	100b883a 	mov	r5,r2
    a4d4:	001d7a40 	call	1d7a4 <__udivsi3>
    a4d8:	80800015 	stw	r2,0(r16)
	rx_path_clks[CLKRF_FREQ] = rx_path_clks[R1_FREQ] / clk_dividers[index_rx][3];
    a4dc:	e0bffb17 	ldw	r2,-20(fp)
    a4e0:	14000404 	addi	r16,r2,16
    a4e4:	e0bffb17 	ldw	r2,-20(fp)
    a4e8:	10800304 	addi	r2,r2,12
    a4ec:	10c00017 	ldw	r3,0(r2)
    a4f0:	e0bfe617 	ldw	r2,-104(fp)
    a4f4:	1085883a 	add	r2,r2,r2
    a4f8:	1085883a 	add	r2,r2,r2
    a4fc:	e13fe304 	addi	r4,fp,-116
    a500:	2085883a 	add	r2,r4,r2
    a504:	10800ec4 	addi	r2,r2,59
    a508:	10800003 	ldbu	r2,0(r2)
    a50c:	10803fcc 	andi	r2,r2,255
    a510:	1080201c 	xori	r2,r2,128
    a514:	10bfe004 	addi	r2,r2,-128
    a518:	1809883a 	mov	r4,r3
    a51c:	100b883a 	mov	r5,r2
    a520:	001d7a40 	call	1d7a4 <__udivsi3>
    a524:	80800015 	stw	r2,0(r16)
	rx_path_clks[RX_SAMPL_FREQ] = rx_path_clks[CLKRF_FREQ] / rx_intdec;
    a528:	e0bffb17 	ldw	r2,-20(fp)
    a52c:	14000504 	addi	r16,r2,20
    a530:	e0bffb17 	ldw	r2,-20(fp)
    a534:	10800404 	addi	r2,r2,16
    a538:	10800017 	ldw	r2,0(r2)
    a53c:	1009883a 	mov	r4,r2
    a540:	e17feb17 	ldw	r5,-84(fp)
    a544:	001d7a40 	call	1d7a4 <__udivsi3>
    a548:	80800015 	stw	r2,0(r16)

	tx_path_clks[BBPLL_FREQ] = bbpll_rate;
    a54c:	e0ffef17 	ldw	r3,-68(fp)
    a550:	e0800217 	ldw	r2,8(fp)
    a554:	10c00015 	stw	r3,0(r2)
	tx_path_clks[DAC_FREQ] = dac_rate;
    a558:	e0800217 	ldw	r2,8(fp)
    a55c:	10800104 	addi	r2,r2,4
    a560:	e0ffe417 	ldw	r3,-112(fp)
    a564:	10c00015 	stw	r3,0(r2)
	tx_path_clks[T2_FREQ] = tx_path_clks[DAC_FREQ] / clk_dividers[index_tx][1];
    a568:	e0800217 	ldw	r2,8(fp)
    a56c:	14000204 	addi	r16,r2,8
    a570:	e0800217 	ldw	r2,8(fp)
    a574:	10800104 	addi	r2,r2,4
    a578:	10c00017 	ldw	r3,0(r2)
    a57c:	e0bfe717 	ldw	r2,-100(fp)
    a580:	1085883a 	add	r2,r2,r2
    a584:	1085883a 	add	r2,r2,r2
    a588:	e13fe304 	addi	r4,fp,-116
    a58c:	2085883a 	add	r2,r4,r2
    a590:	10800e44 	addi	r2,r2,57
    a594:	10800003 	ldbu	r2,0(r2)
    a598:	10803fcc 	andi	r2,r2,255
    a59c:	1080201c 	xori	r2,r2,128
    a5a0:	10bfe004 	addi	r2,r2,-128
    a5a4:	1809883a 	mov	r4,r3
    a5a8:	100b883a 	mov	r5,r2
    a5ac:	001d7a40 	call	1d7a4 <__udivsi3>
    a5b0:	80800015 	stw	r2,0(r16)
	tx_path_clks[T1_FREQ] = tx_path_clks[T2_FREQ] / clk_dividers[index_tx][2];
    a5b4:	e0800217 	ldw	r2,8(fp)
    a5b8:	14000304 	addi	r16,r2,12
    a5bc:	e0800217 	ldw	r2,8(fp)
    a5c0:	10800204 	addi	r2,r2,8
    a5c4:	10c00017 	ldw	r3,0(r2)
    a5c8:	e0bfe717 	ldw	r2,-100(fp)
    a5cc:	1085883a 	add	r2,r2,r2
    a5d0:	1085883a 	add	r2,r2,r2
    a5d4:	e13fe304 	addi	r4,fp,-116
    a5d8:	2085883a 	add	r2,r4,r2
    a5dc:	10800e84 	addi	r2,r2,58
    a5e0:	10800003 	ldbu	r2,0(r2)
    a5e4:	10803fcc 	andi	r2,r2,255
    a5e8:	1080201c 	xori	r2,r2,128
    a5ec:	10bfe004 	addi	r2,r2,-128
    a5f0:	1809883a 	mov	r4,r3
    a5f4:	100b883a 	mov	r5,r2
    a5f8:	001d7a40 	call	1d7a4 <__udivsi3>
    a5fc:	80800015 	stw	r2,0(r16)
	tx_path_clks[CLKTF_FREQ] = tx_path_clks[T1_FREQ] / clk_dividers[index_tx][3];
    a600:	e0800217 	ldw	r2,8(fp)
    a604:	14000404 	addi	r16,r2,16
    a608:	e0800217 	ldw	r2,8(fp)
    a60c:	10800304 	addi	r2,r2,12
    a610:	10c00017 	ldw	r3,0(r2)
    a614:	e0bfe717 	ldw	r2,-100(fp)
    a618:	1085883a 	add	r2,r2,r2
    a61c:	1085883a 	add	r2,r2,r2
    a620:	e13fe304 	addi	r4,fp,-116
    a624:	2085883a 	add	r2,r4,r2
    a628:	10800ec4 	addi	r2,r2,59
    a62c:	10800003 	ldbu	r2,0(r2)
    a630:	10803fcc 	andi	r2,r2,255
    a634:	1080201c 	xori	r2,r2,128
    a638:	10bfe004 	addi	r2,r2,-128
    a63c:	1809883a 	mov	r4,r3
    a640:	100b883a 	mov	r5,r2
    a644:	001d7a40 	call	1d7a4 <__udivsi3>
    a648:	80800015 	stw	r2,0(r16)
	tx_path_clks[TX_SAMPL_FREQ] = tx_path_clks[CLKTF_FREQ] / tx_intdec;
    a64c:	e0800217 	ldw	r2,8(fp)
    a650:	14000504 	addi	r16,r2,20
    a654:	e0800217 	ldw	r2,8(fp)
    a658:	10800404 	addi	r2,r2,16
    a65c:	10800017 	ldw	r2,0(r2)
    a660:	1009883a 	mov	r4,r2
    a664:	e17fea17 	ldw	r5,-88(fp)
    a668:	001d7a40 	call	1d7a4 <__udivsi3>
    a66c:	80800015 	stw	r2,0(r16)

	return 0;
    a670:	0005883a 	mov	r2,zero
}
    a674:	e6fffc04 	addi	sp,fp,-16
    a678:	dfc00517 	ldw	ra,20(sp)
    a67c:	df000417 	ldw	fp,16(sp)
    a680:	dcc00317 	ldw	r19,12(sp)
    a684:	dc800217 	ldw	r18,8(sp)
    a688:	dc400117 	ldw	r17,4(sp)
    a68c:	dc000017 	ldw	r16,0(sp)
    a690:	dec00604 	addi	sp,sp,24
    a694:	f800283a 	ret

0000a698 <ad9361_set_trx_clock_chain_freq>:
 * @param freq The desired sample rate.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_set_trx_clock_chain_freq(struct ad9361_rf_phy *phy,
	uint32_t freq)
{
    a698:	deffee04 	addi	sp,sp,-72
    a69c:	de00012e 	bgeu	sp,et,a6a4 <ad9361_set_trx_clock_chain_freq+0xc>
    a6a0:	003b68fa 	trap	3
    a6a4:	dfc01115 	stw	ra,68(sp)
    a6a8:	df001015 	stw	fp,64(sp)
    a6ac:	df001004 	addi	fp,sp,64
    a6b0:	e13ffe15 	stw	r4,-8(fp)
    a6b4:	e17fff15 	stw	r5,-4(fp)
	uint32_t rx[6], tx[6];
	int32_t ret;

	ret = ad9361_calculate_rf_clock_chain(phy, freq,
    a6b8:	e0bffe17 	ldw	r2,-8(fp)
    a6bc:	11804e17 	ldw	r6,312(r2)
    a6c0:	e0fff204 	addi	r3,fp,-56
    a6c4:	e0bff804 	addi	r2,fp,-32
    a6c8:	d8800015 	stw	r2,0(sp)
    a6cc:	e13ffe17 	ldw	r4,-8(fp)
    a6d0:	e17fff17 	ldw	r5,-4(fp)
    a6d4:	180f883a 	mov	r7,r3
    a6d8:	0009f600 	call	9f60 <ad9361_calculate_rf_clock_chain>
    a6dc:	e0bff115 	stw	r2,-60(fp)
		phy->rate_governor, rx, tx);
	if (ret < 0)
    a6e0:	e0bff117 	ldw	r2,-60(fp)
    a6e4:	1000020e 	bge	r2,zero,a6f0 <ad9361_set_trx_clock_chain_freq+0x58>
		return ret;
    a6e8:	e0bff117 	ldw	r2,-60(fp)
    a6ec:	00000606 	br	a708 <ad9361_set_trx_clock_chain_freq+0x70>
	return ad9361_set_trx_clock_chain(phy, rx, tx);
    a6f0:	e0fff204 	addi	r3,fp,-56
    a6f4:	e0bff804 	addi	r2,fp,-32
    a6f8:	e13ffe17 	ldw	r4,-8(fp)
    a6fc:	180b883a 	mov	r5,r3
    a700:	100d883a 	mov	r6,r2
    a704:	00099d80 	call	99d8 <ad9361_set_trx_clock_chain>
}
    a708:	e037883a 	mov	sp,fp
    a70c:	dfc00117 	ldw	ra,4(sp)
    a710:	df000017 	ldw	fp,0(sp)
    a714:	dec00204 	addi	sp,sp,8
    a718:	f800283a 	ret

0000a71c <ad9361_set_ensm_mode>:
 * @param fdd
 * @param pinctrl
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_set_ensm_mode(struct ad9361_rf_phy *phy, bool fdd, bool pinctrl)
{
    a71c:	defff804 	addi	sp,sp,-32
    a720:	de00012e 	bgeu	sp,et,a728 <ad9361_set_ensm_mode+0xc>
    a724:	003b68fa 	trap	3
    a728:	dfc00715 	stw	ra,28(sp)
    a72c:	df000615 	stw	fp,24(sp)
    a730:	df000604 	addi	fp,sp,24
    a734:	e13ffd15 	stw	r4,-12(fp)
    a738:	2807883a 	mov	r3,r5
    a73c:	3005883a 	mov	r2,r6
    a740:	e0fffe05 	stb	r3,-8(fp)
    a744:	e0bfff05 	stb	r2,-4(fp)
	struct ad9361_phy_platform_data *pd = phy->pdata;
    a748:	e0bffd17 	ldw	r2,-12(fp)
    a74c:	10803017 	ldw	r2,192(r2)
    a750:	e0bffb15 	stw	r2,-20(fp)
	int32_t ret;
	uint32_t val = 0;
    a754:	e03ffc15 	stw	zero,-16(fp)

	ad9361_spi_write(phy->spi, REG_ENSM_MODE, fdd ? FDD_MODE : 0);
    a758:	e0bffd17 	ldw	r2,-12(fp)
    a75c:	10c00117 	ldw	r3,4(r2)
    a760:	e0bffe03 	ldbu	r2,-8(fp)
    a764:	1809883a 	mov	r4,r3
    a768:	014004c4 	movi	r5,19
    a76c:	100d883a 	mov	r6,r2
    a770:	00002600 	call	260 <ad9361_spi_write>

	val = ad9361_spi_read(phy->spi, REG_ENSM_CONFIG_2);
    a774:	e0bffd17 	ldw	r2,-12(fp)
    a778:	10800117 	ldw	r2,4(r2)
    a77c:	1009883a 	mov	r4,r2
    a780:	01400544 	movi	r5,21
    a784:	00001500 	call	150 <ad9361_spi_read>
    a788:	e0bffc15 	stw	r2,-16(fp)
	val &= POWER_DOWN_RX_SYNTH | POWER_DOWN_TX_SYNTH;
    a78c:	e0bffc17 	ldw	r2,-16(fp)
    a790:	1080180c 	andi	r2,r2,96
    a794:	e0bffc15 	stw	r2,-16(fp)

	if (fdd)
    a798:	e0bffe03 	ldbu	r2,-8(fp)
    a79c:	10001126 	beq	r2,zero,a7e4 <ad9361_set_ensm_mode+0xc8>
		ret = ad9361_spi_write(phy->spi, REG_ENSM_CONFIG_2,
    a7a0:	e0bffd17 	ldw	r2,-12(fp)
    a7a4:	11000117 	ldw	r4,4(r2)
				val | DUAL_SYNTH_MODE |
				(pd->fdd_independent_mode ? FDD_EXTERNAL_CTRL_ENABLE : 0));
    a7a8:	e0bffb17 	ldw	r2,-20(fp)
    a7ac:	10800083 	ldbu	r2,2(r2)
	val = ad9361_spi_read(phy->spi, REG_ENSM_CONFIG_2);
	val &= POWER_DOWN_RX_SYNTH | POWER_DOWN_TX_SYNTH;

	if (fdd)
		ret = ad9361_spi_write(phy->spi, REG_ENSM_CONFIG_2,
				val | DUAL_SYNTH_MODE |
    a7b0:	10803fcc 	andi	r2,r2,255
    a7b4:	10000226 	beq	r2,zero,a7c0 <ad9361_set_ensm_mode+0xa4>
    a7b8:	00802004 	movi	r2,128
    a7bc:	00000106 	br	a7c4 <ad9361_set_ensm_mode+0xa8>
    a7c0:	0005883a 	mov	r2,zero
    a7c4:	e0fffc17 	ldw	r3,-16(fp)
    a7c8:	10c4b03a 	or	r2,r2,r3

	val = ad9361_spi_read(phy->spi, REG_ENSM_CONFIG_2);
	val &= POWER_DOWN_RX_SYNTH | POWER_DOWN_TX_SYNTH;

	if (fdd)
		ret = ad9361_spi_write(phy->spi, REG_ENSM_CONFIG_2,
    a7cc:	10800114 	ori	r2,r2,4
    a7d0:	01400544 	movi	r5,21
    a7d4:	100d883a 	mov	r6,r2
    a7d8:	00002600 	call	260 <ad9361_spi_write>
    a7dc:	e0bffa15 	stw	r2,-24(fp)
    a7e0:	00001c06 	br	a854 <ad9361_set_ensm_mode+0x138>
				val | DUAL_SYNTH_MODE |
				(pd->fdd_independent_mode ? FDD_EXTERNAL_CTRL_ENABLE : 0));
	else
		ret = ad9361_spi_write(phy->spi, REG_ENSM_CONFIG_2, val |
    a7e4:	e0bffd17 	ldw	r2,-12(fp)
    a7e8:	11000117 	ldw	r4,4(r2)
				(pd->tdd_use_dual_synth ? DUAL_SYNTH_MODE : 0) |
    a7ec:	e0bffb17 	ldw	r2,-20(fp)
    a7f0:	10800243 	ldbu	r2,9(r2)
	if (fdd)
		ret = ad9361_spi_write(phy->spi, REG_ENSM_CONFIG_2,
				val | DUAL_SYNTH_MODE |
				(pd->fdd_independent_mode ? FDD_EXTERNAL_CTRL_ENABLE : 0));
	else
		ret = ad9361_spi_write(phy->spi, REG_ENSM_CONFIG_2, val |
    a7f4:	10803fcc 	andi	r2,r2,255
    a7f8:	10000226 	beq	r2,zero,a804 <ad9361_set_ensm_mode+0xe8>
    a7fc:	00800104 	movi	r2,4
    a800:	00000106 	br	a808 <ad9361_set_ensm_mode+0xec>
    a804:	0005883a 	mov	r2,zero
    a808:	e0fffc17 	ldw	r3,-16(fp)
    a80c:	10c6b03a 	or	r3,r2,r3
				(pd->tdd_use_dual_synth ? DUAL_SYNTH_MODE : 0) |
				(pd->tdd_use_dual_synth ? 0 :
    a810:	e0bffb17 	ldw	r2,-20(fp)
    a814:	10800243 	ldbu	r2,9(r2)
    a818:	1080005c 	xori	r2,r2,1
	if (fdd)
		ret = ad9361_spi_write(phy->spi, REG_ENSM_CONFIG_2,
				val | DUAL_SYNTH_MODE |
				(pd->fdd_independent_mode ? FDD_EXTERNAL_CTRL_ENABLE : 0));
	else
		ret = ad9361_spi_write(phy->spi, REG_ENSM_CONFIG_2, val |
    a81c:	10803fcc 	andi	r2,r2,255
    a820:	10000626 	beq	r2,zero,a83c <ad9361_set_ensm_mode+0x120>
    a824:	e0bfff03 	ldbu	r2,-4(fp)
    a828:	10000226 	beq	r2,zero,a834 <ad9361_set_ensm_mode+0x118>
    a82c:	00800204 	movi	r2,8
    a830:	00000306 	br	a840 <ad9361_set_ensm_mode+0x124>
    a834:	0005883a 	mov	r2,zero
    a838:	00000106 	br	a840 <ad9361_set_ensm_mode+0x124>
    a83c:	0005883a 	mov	r2,zero
    a840:	1884b03a 	or	r2,r3,r2
    a844:	01400544 	movi	r5,21
    a848:	100d883a 	mov	r6,r2
    a84c:	00002600 	call	260 <ad9361_spi_write>
    a850:	e0bffa15 	stw	r2,-24(fp)
				(pd->tdd_use_dual_synth ? DUAL_SYNTH_MODE : 0) |
				(pd->tdd_use_dual_synth ? 0 :
				(pinctrl ? SYNTH_ENABLE_PIN_CTRL_MODE : 0)));

	return ret;
    a854:	e0bffa17 	ldw	r2,-24(fp)
}
    a858:	e037883a 	mov	sp,fp
    a85c:	dfc00117 	ldw	ra,4(sp)
    a860:	df000017 	ldw	fp,0(sp)
    a864:	dec00204 	addi	sp,sp,8
    a868:	f800283a 	ret

0000a86c <ad9361_fastlock_readval>:
 * @param word
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_fastlock_readval(struct spi_device *spi, bool tx,
	uint32_t profile, uint32_t word)
{
    a86c:	defff904 	addi	sp,sp,-28
    a870:	de00012e 	bgeu	sp,et,a878 <ad9361_fastlock_readval+0xc>
    a874:	003b68fa 	trap	3
    a878:	dfc00615 	stw	ra,24(sp)
    a87c:	df000515 	stw	fp,20(sp)
    a880:	df000504 	addi	fp,sp,20
    a884:	e13ffc15 	stw	r4,-16(fp)
    a888:	2805883a 	mov	r2,r5
    a88c:	e1bffe15 	stw	r6,-8(fp)
    a890:	e1ffff15 	stw	r7,-4(fp)
    a894:	e0bffd05 	stb	r2,-12(fp)
	uint32_t offs = 0;
    a898:	e03ffb15 	stw	zero,-20(fp)

	if (tx)
    a89c:	e0bffd03 	ldbu	r2,-12(fp)
    a8a0:	10000226 	beq	r2,zero,a8ac <ad9361_fastlock_readval+0x40>
		offs = REG_TX_FAST_LOCK_SETUP - REG_RX_FAST_LOCK_SETUP;
    a8a4:	00801004 	movi	r2,64
    a8a8:	e0bffb15 	stw	r2,-20(fp)

	ad9361_spi_write(spi, REG_RX_FAST_LOCK_PROGRAM_ADDR + offs,
    a8ac:	e0bffb17 	ldw	r2,-20(fp)
    a8b0:	11409704 	addi	r5,r2,604
		RX_FAST_LOCK_PROFILE_ADDR(profile) |
    a8b4:	e0bffe17 	ldw	r2,-8(fp)
    a8b8:	108001cc 	andi	r2,r2,7
    a8bc:	1006913a 	slli	r3,r2,4
		RX_FAST_LOCK_PROFILE_WORD(word));
    a8c0:	e0bfff17 	ldw	r2,-4(fp)
    a8c4:	108003cc 	andi	r2,r2,15
	uint32_t offs = 0;

	if (tx)
		offs = REG_TX_FAST_LOCK_SETUP - REG_RX_FAST_LOCK_SETUP;

	ad9361_spi_write(spi, REG_RX_FAST_LOCK_PROGRAM_ADDR + offs,
    a8c8:	1884b03a 	or	r2,r3,r2
    a8cc:	e13ffc17 	ldw	r4,-16(fp)
    a8d0:	100d883a 	mov	r6,r2
    a8d4:	00002600 	call	260 <ad9361_spi_write>
		RX_FAST_LOCK_PROFILE_ADDR(profile) |
		RX_FAST_LOCK_PROFILE_WORD(word));

	return ad9361_spi_read(spi, REG_RX_FAST_LOCK_PROGRAM_READ + offs);
    a8d8:	e0bffb17 	ldw	r2,-20(fp)
    a8dc:	10809784 	addi	r2,r2,606
    a8e0:	e13ffc17 	ldw	r4,-16(fp)
    a8e4:	100b883a 	mov	r5,r2
    a8e8:	00001500 	call	150 <ad9361_spi_read>
}
    a8ec:	e037883a 	mov	sp,fp
    a8f0:	dfc00117 	ldw	ra,4(sp)
    a8f4:	df000017 	ldw	fp,0(sp)
    a8f8:	dec00204 	addi	sp,sp,8
    a8fc:	f800283a 	ret

0000a900 <ad9361_fastlock_writeval>:
 * @param last
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_fastlock_writeval(struct spi_device *spi, bool tx,
	uint32_t profile, uint32_t word, uint8_t val, bool last)
{
    a900:	defff604 	addi	sp,sp,-40
    a904:	de00012e 	bgeu	sp,et,a90c <ad9361_fastlock_writeval+0xc>
    a908:	003b68fa 	trap	3
    a90c:	dfc00915 	stw	ra,36(sp)
    a910:	df000815 	stw	fp,32(sp)
    a914:	df000804 	addi	fp,sp,32
    a918:	e13ffa15 	stw	r4,-24(fp)
    a91c:	2809883a 	mov	r4,r5
    a920:	e1bffc15 	stw	r6,-16(fp)
    a924:	e1fffd15 	stw	r7,-12(fp)
    a928:	e0c00217 	ldw	r3,8(fp)
    a92c:	e0800317 	ldw	r2,12(fp)
    a930:	e13ffb05 	stb	r4,-20(fp)
    a934:	e0fffe05 	stb	r3,-8(fp)
    a938:	e0bfff05 	stb	r2,-4(fp)
	uint32_t offs = 0;
    a93c:	e03ff815 	stw	zero,-32(fp)
	int32_t ret;

	if (tx)
    a940:	e0bffb03 	ldbu	r2,-20(fp)
    a944:	10000226 	beq	r2,zero,a950 <ad9361_fastlock_writeval+0x50>
		offs = REG_TX_FAST_LOCK_SETUP - REG_RX_FAST_LOCK_SETUP;
    a948:	00801004 	movi	r2,64
    a94c:	e0bff815 	stw	r2,-32(fp)

	ret = ad9361_spi_write(spi, REG_RX_FAST_LOCK_PROGRAM_ADDR + offs,
    a950:	e0bff817 	ldw	r2,-32(fp)
    a954:	11409704 	addi	r5,r2,604
		RX_FAST_LOCK_PROFILE_ADDR(profile) |
    a958:	e0bffc17 	ldw	r2,-16(fp)
    a95c:	108001cc 	andi	r2,r2,7
    a960:	1006913a 	slli	r3,r2,4
		RX_FAST_LOCK_PROFILE_WORD(word));
    a964:	e0bffd17 	ldw	r2,-12(fp)
    a968:	108003cc 	andi	r2,r2,15
	int32_t ret;

	if (tx)
		offs = REG_TX_FAST_LOCK_SETUP - REG_RX_FAST_LOCK_SETUP;

	ret = ad9361_spi_write(spi, REG_RX_FAST_LOCK_PROGRAM_ADDR + offs,
    a96c:	1884b03a 	or	r2,r3,r2
    a970:	e13ffa17 	ldw	r4,-24(fp)
    a974:	100d883a 	mov	r6,r2
    a978:	00002600 	call	260 <ad9361_spi_write>
    a97c:	e0bff915 	stw	r2,-28(fp)
		RX_FAST_LOCK_PROFILE_ADDR(profile) |
		RX_FAST_LOCK_PROFILE_WORD(word));
	ret |= ad9361_spi_write(spi, REG_RX_FAST_LOCK_PROGRAM_DATA + offs, val);
    a980:	e0bff817 	ldw	r2,-32(fp)
    a984:	10c09744 	addi	r3,r2,605
    a988:	e0bffe03 	ldbu	r2,-8(fp)
    a98c:	e13ffa17 	ldw	r4,-24(fp)
    a990:	180b883a 	mov	r5,r3
    a994:	100d883a 	mov	r6,r2
    a998:	00002600 	call	260 <ad9361_spi_write>
    a99c:	1007883a 	mov	r3,r2
    a9a0:	e0bff917 	ldw	r2,-28(fp)
    a9a4:	10c4b03a 	or	r2,r2,r3
    a9a8:	e0bff915 	stw	r2,-28(fp)
	ret |= ad9361_spi_write(spi, REG_RX_FAST_LOCK_PROGRAM_CTRL + offs,
    a9ac:	e0bff817 	ldw	r2,-32(fp)
    a9b0:	108097c4 	addi	r2,r2,607
    a9b4:	e13ffa17 	ldw	r4,-24(fp)
    a9b8:	100b883a 	mov	r5,r2
    a9bc:	018000c4 	movi	r6,3
    a9c0:	00002600 	call	260 <ad9361_spi_write>
    a9c4:	1007883a 	mov	r3,r2
    a9c8:	e0bff917 	ldw	r2,-28(fp)
    a9cc:	10c4b03a 	or	r2,r2,r3
    a9d0:	e0bff915 	stw	r2,-28(fp)
		RX_FAST_LOCK_PROGRAM_WRITE |
		RX_FAST_LOCK_PROGRAM_CLOCK_ENABLE);

	if (last) /* Stop Clocks */
    a9d4:	e0bfff03 	ldbu	r2,-4(fp)
    a9d8:	10000a26 	beq	r2,zero,aa04 <ad9361_fastlock_writeval+0x104>
		ret |= ad9361_spi_write(spi,
    a9dc:	e0bff817 	ldw	r2,-32(fp)
    a9e0:	108097c4 	addi	r2,r2,607
    a9e4:	e13ffa17 	ldw	r4,-24(fp)
    a9e8:	100b883a 	mov	r5,r2
    a9ec:	000d883a 	mov	r6,zero
    a9f0:	00002600 	call	260 <ad9361_spi_write>
    a9f4:	1007883a 	mov	r3,r2
    a9f8:	e0bff917 	ldw	r2,-28(fp)
    a9fc:	10c4b03a 	or	r2,r2,r3
    aa00:	e0bff915 	stw	r2,-28(fp)
		REG_RX_FAST_LOCK_PROGRAM_CTRL + offs, 0);

	return ret;
    aa04:	e0bff917 	ldw	r2,-28(fp)
}
    aa08:	e037883a 	mov	sp,fp
    aa0c:	dfc00117 	ldw	ra,4(sp)
    aa10:	df000017 	ldw	fp,0(sp)
    aa14:	dec00204 	addi	sp,sp,8
    aa18:	f800283a 	ret

0000aa1c <ad9361_fastlock_load>:
 * @param values
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_fastlock_load(struct ad9361_rf_phy *phy, bool tx,
	uint32_t profile, uint8_t *values)
{
    aa1c:	defff604 	addi	sp,sp,-40
    aa20:	de00012e 	bgeu	sp,et,aa28 <ad9361_fastlock_load+0xc>
    aa24:	003b68fa 	trap	3
    aa28:	dfc00915 	stw	ra,36(sp)
    aa2c:	df000815 	stw	fp,32(sp)
    aa30:	df000804 	addi	fp,sp,32
    aa34:	e13ffc15 	stw	r4,-16(fp)
    aa38:	2805883a 	mov	r2,r5
    aa3c:	e1bffe15 	stw	r6,-8(fp)
    aa40:	e1ffff15 	stw	r7,-4(fp)
    aa44:	e0bffd05 	stb	r2,-12(fp)
	uint32_t offs = 0;
    aa48:	e03ff815 	stw	zero,-32(fp)
	int32_t i, ret = 0;
    aa4c:	e03ffa15 	stw	zero,-24(fp)
	uint8_t buf[4];

	dev_dbg(&phy->spi->dev, "%s: %s Profile %"PRIu32":",
    aa50:	e0bffd03 	ldbu	r2,-12(fp)
    aa54:	10000326 	beq	r2,zero,aa64 <ad9361_fastlock_load+0x48>
    aa58:	008000b4 	movhi	r2,2
    aa5c:	109c6c04 	addi	r2,r2,29104
    aa60:	00000206 	br	aa6c <ad9361_fastlock_load+0x50>
    aa64:	008000b4 	movhi	r2,2
    aa68:	109c6d04 	addi	r2,r2,29108
    aa6c:	010000b4 	movhi	r4,2
    aa70:	211d0404 	addi	r4,r4,29712
    aa74:	014000b4 	movhi	r5,2
    aa78:	295f6104 	addi	r5,r5,32132
    aa7c:	100d883a 	mov	r6,r2
    aa80:	e1fffe17 	ldw	r7,-8(fp)
    aa84:	001f8180 	call	1f818 <printf>
    aa88:	010000b4 	movhi	r4,2
    aa8c:	211a7504 	addi	r4,r4,27092
    aa90:	001f8180 	call	1f818 <printf>
		__func__, tx ? "TX" : "RX", profile);

	if (tx)
    aa94:	e0bffd03 	ldbu	r2,-12(fp)
    aa98:	10000226 	beq	r2,zero,aaa4 <ad9361_fastlock_load+0x88>
		offs = REG_TX_FAST_LOCK_SETUP - REG_RX_FAST_LOCK_SETUP;
    aa9c:	00801004 	movi	r2,64
    aaa0:	e0bff815 	stw	r2,-32(fp)

	buf[0] = values[0];
    aaa4:	e0bfff17 	ldw	r2,-4(fp)
    aaa8:	10800003 	ldbu	r2,0(r2)
    aaac:	e0bffb05 	stb	r2,-20(fp)
	buf[1] = RX_FAST_LOCK_PROFILE_ADDR(profile) | RX_FAST_LOCK_PROFILE_WORD(0);
    aab0:	e0bffe17 	ldw	r2,-8(fp)
    aab4:	108001cc 	andi	r2,r2,7
    aab8:	1004913a 	slli	r2,r2,4
    aabc:	e0bffb45 	stb	r2,-19(fp)
	ad9361_spi_writem(phy->spi, REG_RX_FAST_LOCK_PROGRAM_DATA + offs, buf, 2);
    aac0:	e0bffc17 	ldw	r2,-16(fp)
    aac4:	11000117 	ldw	r4,4(r2)
    aac8:	e0bff817 	ldw	r2,-32(fp)
    aacc:	10c09744 	addi	r3,r2,605
    aad0:	e0bffb04 	addi	r2,fp,-20
    aad4:	180b883a 	mov	r5,r3
    aad8:	100d883a 	mov	r6,r2
    aadc:	01c00084 	movi	r7,2
    aae0:	00003ec0 	call	3ec <ad9361_spi_writem>

	for (i = 1; i < RX_FAST_LOCK_CONFIG_WORD_NUM; i++) {
    aae4:	00800044 	movi	r2,1
    aae8:	e0bff915 	stw	r2,-28(fp)
    aaec:	00001c06 	br	ab60 <ad9361_fastlock_load+0x144>
		buf[0] = RX_FAST_LOCK_PROGRAM_WRITE | RX_FAST_LOCK_PROGRAM_CLOCK_ENABLE;
    aaf0:	008000c4 	movi	r2,3
    aaf4:	e0bffb05 	stb	r2,-20(fp)
		buf[1] = 0;
    aaf8:	e03ffb45 	stb	zero,-19(fp)
		buf[2] = values[i];
    aafc:	e0bff917 	ldw	r2,-28(fp)
    ab00:	e0ffff17 	ldw	r3,-4(fp)
    ab04:	1885883a 	add	r2,r3,r2
    ab08:	10800003 	ldbu	r2,0(r2)
    ab0c:	e0bffb85 	stb	r2,-18(fp)
		buf[3] = RX_FAST_LOCK_PROFILE_ADDR(profile) | RX_FAST_LOCK_PROFILE_WORD(i);
    ab10:	e0bffe17 	ldw	r2,-8(fp)
    ab14:	108001cc 	andi	r2,r2,7
    ab18:	1004913a 	slli	r2,r2,4
    ab1c:	1007883a 	mov	r3,r2
    ab20:	e0bff917 	ldw	r2,-28(fp)
    ab24:	108003cc 	andi	r2,r2,15
    ab28:	1884b03a 	or	r2,r3,r2
    ab2c:	e0bffbc5 	stb	r2,-17(fp)
		ad9361_spi_writem(phy->spi, REG_RX_FAST_LOCK_PROGRAM_CTRL + offs, buf, 4);
    ab30:	e0bffc17 	ldw	r2,-16(fp)
    ab34:	11000117 	ldw	r4,4(r2)
    ab38:	e0bff817 	ldw	r2,-32(fp)
    ab3c:	10c097c4 	addi	r3,r2,607
    ab40:	e0bffb04 	addi	r2,fp,-20
    ab44:	180b883a 	mov	r5,r3
    ab48:	100d883a 	mov	r6,r2
    ab4c:	01c00104 	movi	r7,4
    ab50:	00003ec0 	call	3ec <ad9361_spi_writem>

	buf[0] = values[0];
	buf[1] = RX_FAST_LOCK_PROFILE_ADDR(profile) | RX_FAST_LOCK_PROFILE_WORD(0);
	ad9361_spi_writem(phy->spi, REG_RX_FAST_LOCK_PROGRAM_DATA + offs, buf, 2);

	for (i = 1; i < RX_FAST_LOCK_CONFIG_WORD_NUM; i++) {
    ab54:	e0bff917 	ldw	r2,-28(fp)
    ab58:	10800044 	addi	r2,r2,1
    ab5c:	e0bff915 	stw	r2,-28(fp)
    ab60:	e0bff917 	ldw	r2,-28(fp)
    ab64:	10800410 	cmplti	r2,r2,16
    ab68:	103fe11e 	bne	r2,zero,aaf0 <_gp+0xfffd89d0>
		buf[2] = values[i];
		buf[3] = RX_FAST_LOCK_PROFILE_ADDR(profile) | RX_FAST_LOCK_PROFILE_WORD(i);
		ad9361_spi_writem(phy->spi, REG_RX_FAST_LOCK_PROGRAM_CTRL + offs, buf, 4);
	}

	ad9361_spi_write(phy->spi, REG_RX_FAST_LOCK_PROGRAM_CTRL + offs,
    ab6c:	e0bffc17 	ldw	r2,-16(fp)
    ab70:	10c00117 	ldw	r3,4(r2)
    ab74:	e0bff817 	ldw	r2,-32(fp)
    ab78:	108097c4 	addi	r2,r2,607
    ab7c:	1809883a 	mov	r4,r3
    ab80:	100b883a 	mov	r5,r2
    ab84:	018000c4 	movi	r6,3
    ab88:	00002600 	call	260 <ad9361_spi_write>
			 RX_FAST_LOCK_PROGRAM_WRITE | RX_FAST_LOCK_PROGRAM_CLOCK_ENABLE);
	ad9361_spi_write(phy->spi, REG_RX_FAST_LOCK_PROGRAM_CTRL + offs, 0);
    ab8c:	e0bffc17 	ldw	r2,-16(fp)
    ab90:	10c00117 	ldw	r3,4(r2)
    ab94:	e0bff817 	ldw	r2,-32(fp)
    ab98:	108097c4 	addi	r2,r2,607
    ab9c:	1809883a 	mov	r4,r3
    aba0:	100b883a 	mov	r5,r2
    aba4:	000d883a 	mov	r6,zero
    aba8:	00002600 	call	260 <ad9361_spi_write>

	phy->fastlock.entry[tx][profile].flags = FASTLOOK_INIT;
    abac:	e17ffd03 	ldbu	r5,-12(fp)
    abb0:	e13ffc17 	ldw	r4,-16(fp)
    abb4:	e0fffe17 	ldw	r3,-8(fp)
    abb8:	1805883a 	mov	r2,r3
    abbc:	1085883a 	add	r2,r2,r2
    abc0:	10c5883a 	add	r2,r2,r3
    abc4:	28c00624 	muli	r3,r5,24
    abc8:	10c5883a 	add	r2,r2,r3
    abcc:	2085883a 	add	r2,r4,r2
    abd0:	10806104 	addi	r2,r2,388
    abd4:	00c00044 	movi	r3,1
    abd8:	10c00145 	stb	r3,5(r2)
	phy->fastlock.entry[tx][profile].alc_orig = values[15];
    abdc:	e1bffd03 	ldbu	r6,-12(fp)
    abe0:	e0bfff17 	ldw	r2,-4(fp)
    abe4:	110003c3 	ldbu	r4,15(r2)
    abe8:	e17ffc17 	ldw	r5,-16(fp)
    abec:	e0fffe17 	ldw	r3,-8(fp)
    abf0:	1805883a 	mov	r2,r3
    abf4:	1085883a 	add	r2,r2,r2
    abf8:	10c5883a 	add	r2,r2,r3
    abfc:	30c00624 	muli	r3,r6,24
    ac00:	10c5883a 	add	r2,r2,r3
    ac04:	2885883a 	add	r2,r5,r2
    ac08:	10806104 	addi	r2,r2,388
    ac0c:	11000185 	stb	r4,6(r2)
	phy->fastlock.entry[tx][profile].alc_written = values[15];
    ac10:	e1bffd03 	ldbu	r6,-12(fp)
    ac14:	e0bfff17 	ldw	r2,-4(fp)
    ac18:	110003c3 	ldbu	r4,15(r2)
    ac1c:	e17ffc17 	ldw	r5,-16(fp)
    ac20:	e0fffe17 	ldw	r3,-8(fp)
    ac24:	1805883a 	mov	r2,r3
    ac28:	1085883a 	add	r2,r2,r2
    ac2c:	10c5883a 	add	r2,r2,r3
    ac30:	30c00624 	muli	r3,r6,24
    ac34:	10c5883a 	add	r2,r2,r3
    ac38:	2885883a 	add	r2,r5,r2
    ac3c:	10806104 	addi	r2,r2,388
    ac40:	110001c5 	stb	r4,7(r2)

	return ret;
    ac44:	e0bffa17 	ldw	r2,-24(fp)
}
    ac48:	e037883a 	mov	sp,fp
    ac4c:	dfc00117 	ldw	ra,4(sp)
    ac50:	df000017 	ldw	fp,0(sp)
    ac54:	dec00204 	addi	sp,sp,8
    ac58:	f800283a 	ret

0000ac5c <ad9361_fastlock_store>:
 * @param tx
 * @param profile
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_fastlock_store(struct ad9361_rf_phy *phy, bool tx, uint32_t profile)
{
    ac5c:	defff204 	addi	sp,sp,-56
    ac60:	de00012e 	bgeu	sp,et,ac68 <ad9361_fastlock_store+0xc>
    ac64:	003b68fa 	trap	3
    ac68:	dfc00d15 	stw	ra,52(sp)
    ac6c:	df000c15 	stw	fp,48(sp)
    ac70:	dc000b15 	stw	r16,44(sp)
    ac74:	df000c04 	addi	fp,sp,48
    ac78:	e13ffc15 	stw	r4,-16(fp)
    ac7c:	2805883a 	mov	r2,r5
    ac80:	e1bffe15 	stw	r6,-8(fp)
    ac84:	e0bffd05 	stb	r2,-12(fp)
	struct spi_device *spi = phy->spi;
    ac88:	e0bffc17 	ldw	r2,-16(fp)
    ac8c:	10800117 	ldw	r2,4(r2)
    ac90:	e0bff515 	stw	r2,-44(fp)
	uint8_t val[16];
	uint32_t offs = 0, x, y;
    ac94:	e03ff415 	stw	zero,-48(fp)

	dev_dbg(&phy->spi->dev, "%s: %s Profile %"PRIu32":",
    ac98:	e0bffd03 	ldbu	r2,-12(fp)
    ac9c:	10000326 	beq	r2,zero,acac <ad9361_fastlock_store+0x50>
    aca0:	008000b4 	movhi	r2,2
    aca4:	109c6c04 	addi	r2,r2,29104
    aca8:	00000206 	br	acb4 <ad9361_fastlock_store+0x58>
    acac:	008000b4 	movhi	r2,2
    acb0:	109c6d04 	addi	r2,r2,29108
    acb4:	010000b4 	movhi	r4,2
    acb8:	211d0404 	addi	r4,r4,29712
    acbc:	014000b4 	movhi	r5,2
    acc0:	295f6704 	addi	r5,r5,32156
    acc4:	100d883a 	mov	r6,r2
    acc8:	e1fffe17 	ldw	r7,-8(fp)
    accc:	001f8180 	call	1f818 <printf>
    acd0:	010000b4 	movhi	r4,2
    acd4:	211a7504 	addi	r4,r4,27092
    acd8:	001f8180 	call	1f818 <printf>
		__func__, tx ? "TX" : "RX", profile);

	if (tx)
    acdc:	e0bffd03 	ldbu	r2,-12(fp)
    ace0:	10000226 	beq	r2,zero,acec <ad9361_fastlock_store+0x90>
		offs = REG_TX_FAST_LOCK_SETUP - REG_RX_FAST_LOCK_SETUP;
    ace4:	00801004 	movi	r2,64
    ace8:	e0bff415 	stw	r2,-48(fp)

	val[0] = ad9361_spi_read(spi, REG_RX_INTEGER_BYTE_0 + offs);
    acec:	e0bff417 	ldw	r2,-48(fp)
    acf0:	10808c44 	addi	r2,r2,561
    acf4:	e13ff517 	ldw	r4,-44(fp)
    acf8:	100b883a 	mov	r5,r2
    acfc:	00001500 	call	150 <ad9361_spi_read>
    ad00:	e0bff805 	stb	r2,-32(fp)
	val[1] = ad9361_spi_read(spi, REG_RX_INTEGER_BYTE_1 + offs);
    ad04:	e0bff417 	ldw	r2,-48(fp)
    ad08:	10808c84 	addi	r2,r2,562
    ad0c:	e13ff517 	ldw	r4,-44(fp)
    ad10:	100b883a 	mov	r5,r2
    ad14:	00001500 	call	150 <ad9361_spi_read>
    ad18:	e0bff845 	stb	r2,-31(fp)
	val[2] = ad9361_spi_read(spi, REG_RX_FRACT_BYTE_0 + offs);
    ad1c:	e0bff417 	ldw	r2,-48(fp)
    ad20:	10808cc4 	addi	r2,r2,563
    ad24:	e13ff517 	ldw	r4,-44(fp)
    ad28:	100b883a 	mov	r5,r2
    ad2c:	00001500 	call	150 <ad9361_spi_read>
    ad30:	e0bff885 	stb	r2,-30(fp)
	val[3] = ad9361_spi_read(spi, REG_RX_FRACT_BYTE_1 + offs);
    ad34:	e0bff417 	ldw	r2,-48(fp)
    ad38:	10808d04 	addi	r2,r2,564
    ad3c:	e13ff517 	ldw	r4,-44(fp)
    ad40:	100b883a 	mov	r5,r2
    ad44:	00001500 	call	150 <ad9361_spi_read>
    ad48:	e0bff8c5 	stb	r2,-29(fp)
	val[4] = ad9361_spi_read(spi, REG_RX_FRACT_BYTE_2 + offs);
    ad4c:	e0bff417 	ldw	r2,-48(fp)
    ad50:	10808d44 	addi	r2,r2,565
    ad54:	e13ff517 	ldw	r4,-44(fp)
    ad58:	100b883a 	mov	r5,r2
    ad5c:	00001500 	call	150 <ad9361_spi_read>
    ad60:	e0bff905 	stb	r2,-28(fp)

	x = ad9361_spi_readf(spi, REG_RX_VCO_BIAS_1 + offs, VCO_BIAS_REF(~0));
    ad64:	e0bff417 	ldw	r2,-48(fp)
    ad68:	14009084 	addi	r16,r2,578
    ad6c:	010001c4 	movi	r4,7
    ad70:	001c8300 	call	1c830 <find_first_bit>
    ad74:	e13ff517 	ldw	r4,-44(fp)
    ad78:	800b883a 	mov	r5,r16
    ad7c:	018001c4 	movi	r6,7
    ad80:	100f883a 	mov	r7,r2
    ad84:	00001b80 	call	1b8 <__ad9361_spi_readf>
    ad88:	e0bff615 	stw	r2,-40(fp)
	y = ad9361_spi_readf(spi, REG_RX_ALC_VARACTOR + offs, VCO_VARACTOR(~0));
    ad8c:	e0bff417 	ldw	r2,-48(fp)
    ad90:	14008e44 	addi	r16,r2,569
    ad94:	010003c4 	movi	r4,15
    ad98:	001c8300 	call	1c830 <find_first_bit>
    ad9c:	e13ff517 	ldw	r4,-44(fp)
    ada0:	800b883a 	mov	r5,r16
    ada4:	018003c4 	movi	r6,15
    ada8:	100f883a 	mov	r7,r2
    adac:	00001b80 	call	1b8 <__ad9361_spi_readf>
    adb0:	e0bff715 	stw	r2,-36(fp)
	val[5] = (x << 4) | y;
    adb4:	e0bff617 	ldw	r2,-40(fp)
    adb8:	1004913a 	slli	r2,r2,4
    adbc:	1007883a 	mov	r3,r2
    adc0:	e0bff717 	ldw	r2,-36(fp)
    adc4:	1884b03a 	or	r2,r3,r2
    adc8:	e0bff945 	stb	r2,-27(fp)

	x = ad9361_spi_readf(spi, REG_RX_VCO_BIAS_1 + offs, VCO_BIAS_TCF(~0));
    adcc:	e0bff417 	ldw	r2,-48(fp)
    add0:	14009084 	addi	r16,r2,578
    add4:	01000604 	movi	r4,24
    add8:	001c8300 	call	1c830 <find_first_bit>
    addc:	e13ff517 	ldw	r4,-44(fp)
    ade0:	800b883a 	mov	r5,r16
    ade4:	01800604 	movi	r6,24
    ade8:	100f883a 	mov	r7,r2
    adec:	00001b80 	call	1b8 <__ad9361_spi_readf>
    adf0:	e0bff615 	stw	r2,-40(fp)
	y = ad9361_spi_readf(spi, REG_RX_CP_CURRENT + offs, CHARGE_PUMP_CURRENT(~0));
    adf4:	e0bff417 	ldw	r2,-48(fp)
    adf8:	14008ec4 	addi	r16,r2,571
    adfc:	01000fc4 	movi	r4,63
    ae00:	001c8300 	call	1c830 <find_first_bit>
    ae04:	e13ff517 	ldw	r4,-44(fp)
    ae08:	800b883a 	mov	r5,r16
    ae0c:	01800fc4 	movi	r6,63
    ae10:	100f883a 	mov	r7,r2
    ae14:	00001b80 	call	1b8 <__ad9361_spi_readf>
    ae18:	e0bff715 	stw	r2,-36(fp)
	/* Wide BW option: N = 1
	* Set init and steady state values to the same - let user space handle it
	*/
	val[6] = (x << 3) | y;
    ae1c:	e0bff617 	ldw	r2,-40(fp)
    ae20:	100490fa 	slli	r2,r2,3
    ae24:	1007883a 	mov	r3,r2
    ae28:	e0bff717 	ldw	r2,-36(fp)
    ae2c:	1884b03a 	or	r2,r3,r2
    ae30:	e0bff985 	stb	r2,-26(fp)
	val[7] = y;
    ae34:	e0bff717 	ldw	r2,-36(fp)
    ae38:	e0bff9c5 	stb	r2,-25(fp)

	x = ad9361_spi_readf(spi, REG_RX_LOOP_FILTER_3 + offs, LOOP_FILTER_R3(~0));
    ae3c:	e0bff417 	ldw	r2,-48(fp)
    ae40:	14009004 	addi	r16,r2,576
    ae44:	010003c4 	movi	r4,15
    ae48:	001c8300 	call	1c830 <find_first_bit>
    ae4c:	e13ff517 	ldw	r4,-44(fp)
    ae50:	800b883a 	mov	r5,r16
    ae54:	018003c4 	movi	r6,15
    ae58:	100f883a 	mov	r7,r2
    ae5c:	00001b80 	call	1b8 <__ad9361_spi_readf>
    ae60:	e0bff615 	stw	r2,-40(fp)
	val[8] = (x << 4) | x;
    ae64:	e0bff617 	ldw	r2,-40(fp)
    ae68:	1004913a 	slli	r2,r2,4
    ae6c:	1007883a 	mov	r3,r2
    ae70:	e0bff617 	ldw	r2,-40(fp)
    ae74:	1884b03a 	or	r2,r3,r2
    ae78:	e0bffa05 	stb	r2,-24(fp)

	x = ad9361_spi_readf(spi, REG_RX_LOOP_FILTER_2 + offs, LOOP_FILTER_C3(~0));
    ae7c:	e0bff417 	ldw	r2,-48(fp)
    ae80:	14008fc4 	addi	r16,r2,575
    ae84:	010003c4 	movi	r4,15
    ae88:	001c8300 	call	1c830 <find_first_bit>
    ae8c:	e13ff517 	ldw	r4,-44(fp)
    ae90:	800b883a 	mov	r5,r16
    ae94:	018003c4 	movi	r6,15
    ae98:	100f883a 	mov	r7,r2
    ae9c:	00001b80 	call	1b8 <__ad9361_spi_readf>
    aea0:	e0bff615 	stw	r2,-40(fp)
	val[9] = (x << 4) | x;
    aea4:	e0bff617 	ldw	r2,-40(fp)
    aea8:	1004913a 	slli	r2,r2,4
    aeac:	1007883a 	mov	r3,r2
    aeb0:	e0bff617 	ldw	r2,-40(fp)
    aeb4:	1884b03a 	or	r2,r3,r2
    aeb8:	e0bffa45 	stb	r2,-23(fp)

	x = ad9361_spi_readf(spi, REG_RX_LOOP_FILTER_1 + offs, LOOP_FILTER_C1(~0));
    aebc:	e0bff417 	ldw	r2,-48(fp)
    aec0:	14008f84 	addi	r16,r2,574
    aec4:	010003c4 	movi	r4,15
    aec8:	001c8300 	call	1c830 <find_first_bit>
    aecc:	e13ff517 	ldw	r4,-44(fp)
    aed0:	800b883a 	mov	r5,r16
    aed4:	018003c4 	movi	r6,15
    aed8:	100f883a 	mov	r7,r2
    aedc:	00001b80 	call	1b8 <__ad9361_spi_readf>
    aee0:	e0bff615 	stw	r2,-40(fp)
	y = ad9361_spi_readf(spi, REG_RX_LOOP_FILTER_1 + offs, LOOP_FILTER_C2(~0));
    aee4:	e0bff417 	ldw	r2,-48(fp)
    aee8:	14008f84 	addi	r16,r2,574
    aeec:	01003c04 	movi	r4,240
    aef0:	001c8300 	call	1c830 <find_first_bit>
    aef4:	e13ff517 	ldw	r4,-44(fp)
    aef8:	800b883a 	mov	r5,r16
    aefc:	01803c04 	movi	r6,240
    af00:	100f883a 	mov	r7,r2
    af04:	00001b80 	call	1b8 <__ad9361_spi_readf>
    af08:	e0bff715 	stw	r2,-36(fp)
	val[10] = (x << 4) | y;
    af0c:	e0bff617 	ldw	r2,-40(fp)
    af10:	1004913a 	slli	r2,r2,4
    af14:	1007883a 	mov	r3,r2
    af18:	e0bff717 	ldw	r2,-36(fp)
    af1c:	1884b03a 	or	r2,r3,r2
    af20:	e0bffa85 	stb	r2,-22(fp)

	x = ad9361_spi_readf(spi, REG_RX_LOOP_FILTER_2 + offs, LOOP_FILTER_R1(~0));
    af24:	e0bff417 	ldw	r2,-48(fp)
    af28:	14008fc4 	addi	r16,r2,575
    af2c:	01003c04 	movi	r4,240
    af30:	001c8300 	call	1c830 <find_first_bit>
    af34:	e13ff517 	ldw	r4,-44(fp)
    af38:	800b883a 	mov	r5,r16
    af3c:	01803c04 	movi	r6,240
    af40:	100f883a 	mov	r7,r2
    af44:	00001b80 	call	1b8 <__ad9361_spi_readf>
    af48:	e0bff615 	stw	r2,-40(fp)
	val[11] = (x << 4) | x;
    af4c:	e0bff617 	ldw	r2,-40(fp)
    af50:	1004913a 	slli	r2,r2,4
    af54:	1007883a 	mov	r3,r2
    af58:	e0bff617 	ldw	r2,-40(fp)
    af5c:	1884b03a 	or	r2,r3,r2
    af60:	e0bffac5 	stb	r2,-21(fp)

	x = ad9361_spi_readf(spi, REG_RX_VCO_VARACTOR_CTRL_0 + offs,
    af64:	e0bff417 	ldw	r2,-48(fp)
    af68:	14009404 	addi	r16,r2,592
    af6c:	01001c04 	movi	r4,112
    af70:	001c8300 	call	1c830 <find_first_bit>
    af74:	e13ff517 	ldw	r4,-44(fp)
    af78:	800b883a 	mov	r5,r16
    af7c:	01801c04 	movi	r6,112
    af80:	100f883a 	mov	r7,r2
    af84:	00001b80 	call	1b8 <__ad9361_spi_readf>
    af88:	e0bff615 	stw	r2,-40(fp)
		VCO_VARACTOR_REFERENCE_TCF(~0));
	y = ad9361_spi_readf(spi, REG_RFPLL_DIVIDERS,
    af8c:	e0bffd03 	ldbu	r2,-12(fp)
    af90:	10000226 	beq	r2,zero,af9c <ad9361_fastlock_store+0x340>
    af94:	04003c04 	movi	r16,240
    af98:	00000106 	br	afa0 <ad9361_fastlock_store+0x344>
    af9c:	040003c4 	movi	r16,15
    afa0:	e0bffd03 	ldbu	r2,-12(fp)
    afa4:	10000226 	beq	r2,zero,afb0 <ad9361_fastlock_store+0x354>
    afa8:	00803c04 	movi	r2,240
    afac:	00000106 	br	afb4 <ad9361_fastlock_store+0x358>
    afb0:	008003c4 	movi	r2,15
    afb4:	1009883a 	mov	r4,r2
    afb8:	001c8300 	call	1c830 <find_first_bit>
    afbc:	e13ff517 	ldw	r4,-44(fp)
    afc0:	01400144 	movi	r5,5
    afc4:	800d883a 	mov	r6,r16
    afc8:	100f883a 	mov	r7,r2
    afcc:	00001b80 	call	1b8 <__ad9361_spi_readf>
    afd0:	e0bff715 	stw	r2,-36(fp)
		tx ? TX_VCO_DIVIDER(~0) : RX_VCO_DIVIDER(~0));
	val[12] = (x << 4) | y;
    afd4:	e0bff617 	ldw	r2,-40(fp)
    afd8:	1004913a 	slli	r2,r2,4
    afdc:	1007883a 	mov	r3,r2
    afe0:	e0bff717 	ldw	r2,-36(fp)
    afe4:	1884b03a 	or	r2,r3,r2
    afe8:	e0bffb05 	stb	r2,-20(fp)

	x = ad9361_spi_readf(spi, REG_RX_FORCE_VCO_TUNE_1 + offs, VCO_CAL_OFFSET(~0));
    afec:	e0bff417 	ldw	r2,-48(fp)
    aff0:	14008e04 	addi	r16,r2,568
    aff4:	01001e04 	movi	r4,120
    aff8:	001c8300 	call	1c830 <find_first_bit>
    affc:	e13ff517 	ldw	r4,-44(fp)
    b000:	800b883a 	mov	r5,r16
    b004:	01801e04 	movi	r6,120
    b008:	100f883a 	mov	r7,r2
    b00c:	00001b80 	call	1b8 <__ad9361_spi_readf>
    b010:	e0bff615 	stw	r2,-40(fp)
	y = ad9361_spi_readf(spi, REG_RX_VCO_VARACTOR_CTRL_1 + offs, VCO_VARACTOR_REFERENCE(~0));
    b014:	e0bff417 	ldw	r2,-48(fp)
    b018:	14009444 	addi	r16,r2,593
    b01c:	010003c4 	movi	r4,15
    b020:	001c8300 	call	1c830 <find_first_bit>
    b024:	e13ff517 	ldw	r4,-44(fp)
    b028:	800b883a 	mov	r5,r16
    b02c:	018003c4 	movi	r6,15
    b030:	100f883a 	mov	r7,r2
    b034:	00001b80 	call	1b8 <__ad9361_spi_readf>
    b038:	e0bff715 	stw	r2,-36(fp)
	val[13] = (x << 4) | y;
    b03c:	e0bff617 	ldw	r2,-40(fp)
    b040:	1004913a 	slli	r2,r2,4
    b044:	1007883a 	mov	r3,r2
    b048:	e0bff717 	ldw	r2,-36(fp)
    b04c:	1884b03a 	or	r2,r3,r2
    b050:	e0bffb45 	stb	r2,-19(fp)

	val[14] = ad9361_spi_read(spi, REG_RX_FORCE_VCO_TUNE_0 + offs);
    b054:	e0bff417 	ldw	r2,-48(fp)
    b058:	10808dc4 	addi	r2,r2,567
    b05c:	e13ff517 	ldw	r4,-44(fp)
    b060:	100b883a 	mov	r5,r2
    b064:	00001500 	call	150 <ad9361_spi_read>
    b068:	e0bffb85 	stb	r2,-18(fp)

	x = ad9361_spi_readf(spi, REG_RX_FORCE_ALC + offs, FORCE_ALC_WORD(~0));
    b06c:	e0bff417 	ldw	r2,-48(fp)
    b070:	14008d84 	addi	r16,r2,566
    b074:	01001fc4 	movi	r4,127
    b078:	001c8300 	call	1c830 <find_first_bit>
    b07c:	e13ff517 	ldw	r4,-44(fp)
    b080:	800b883a 	mov	r5,r16
    b084:	01801fc4 	movi	r6,127
    b088:	100f883a 	mov	r7,r2
    b08c:	00001b80 	call	1b8 <__ad9361_spi_readf>
    b090:	e0bff615 	stw	r2,-40(fp)
	y = ad9361_spi_readf(spi, REG_RX_FORCE_VCO_TUNE_1 + offs, FORCE_VCO_TUNE);
    b094:	e0bff417 	ldw	r2,-48(fp)
    b098:	14008e04 	addi	r16,r2,568
    b09c:	01000044 	movi	r4,1
    b0a0:	001c8300 	call	1c830 <find_first_bit>
    b0a4:	e13ff517 	ldw	r4,-44(fp)
    b0a8:	800b883a 	mov	r5,r16
    b0ac:	01800044 	movi	r6,1
    b0b0:	100f883a 	mov	r7,r2
    b0b4:	00001b80 	call	1b8 <__ad9361_spi_readf>
    b0b8:	e0bff715 	stw	r2,-36(fp)
	val[15] = (x << 1) | y;
    b0bc:	e0bff617 	ldw	r2,-40(fp)
    b0c0:	1085883a 	add	r2,r2,r2
    b0c4:	1007883a 	mov	r3,r2
    b0c8:	e0bff717 	ldw	r2,-36(fp)
    b0cc:	1884b03a 	or	r2,r3,r2
    b0d0:	e0bffbc5 	stb	r2,-17(fp)

	return ad9361_fastlock_load(phy, tx, profile, val);
    b0d4:	e0fffd03 	ldbu	r3,-12(fp)
    b0d8:	e0bff804 	addi	r2,fp,-32
    b0dc:	e13ffc17 	ldw	r4,-16(fp)
    b0e0:	180b883a 	mov	r5,r3
    b0e4:	e1bffe17 	ldw	r6,-8(fp)
    b0e8:	100f883a 	mov	r7,r2
    b0ec:	000aa1c0 	call	aa1c <ad9361_fastlock_load>
}
    b0f0:	e6ffff04 	addi	sp,fp,-4
    b0f4:	dfc00217 	ldw	ra,8(sp)
    b0f8:	df000117 	ldw	fp,4(sp)
    b0fc:	dc000017 	ldw	r16,0(sp)
    b100:	dec00304 	addi	sp,sp,12
    b104:	f800283a 	ret

0000b108 <ad9361_fastlock_prepare>:
 * @param prepare
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_fastlock_prepare(struct ad9361_rf_phy *phy, bool tx,
	uint32_t profile, bool prepare)
{
    b108:	defff404 	addi	sp,sp,-48
    b10c:	de00012e 	bgeu	sp,et,b114 <ad9361_fastlock_prepare+0xc>
    b110:	003b68fa 	trap	3
    b114:	dfc00b15 	stw	ra,44(sp)
    b118:	df000a15 	stw	fp,40(sp)
    b11c:	dc400915 	stw	r17,36(sp)
    b120:	dc000815 	stw	r16,32(sp)
    b124:	df000a04 	addi	fp,sp,40
    b128:	e13ffa15 	stw	r4,-24(fp)
    b12c:	2807883a 	mov	r3,r5
    b130:	e1bffc15 	stw	r6,-16(fp)
    b134:	3805883a 	mov	r2,r7
    b138:	e0fffb05 	stb	r3,-20(fp)
    b13c:	e0bffd05 	stb	r2,-12(fp)
	uint32_t offs, ready_mask;
	bool is_prepared;

	dev_dbg(&phy->spi->dev, "%s: %s Profile %"PRIu32": %s",
    b140:	e0bffb03 	ldbu	r2,-20(fp)
    b144:	10000326 	beq	r2,zero,b154 <ad9361_fastlock_prepare+0x4c>
    b148:	00c000b4 	movhi	r3,2
    b14c:	18dc6c04 	addi	r3,r3,29104
    b150:	00000206 	br	b15c <ad9361_fastlock_prepare+0x54>
    b154:	00c000b4 	movhi	r3,2
    b158:	18dc6d04 	addi	r3,r3,29108
    b15c:	e0bffd03 	ldbu	r2,-12(fp)
    b160:	10000326 	beq	r2,zero,b170 <ad9361_fastlock_prepare+0x68>
    b164:	008000b4 	movhi	r2,2
    b168:	109d0904 	addi	r2,r2,29732
    b16c:	00000206 	br	b178 <ad9361_fastlock_prepare+0x70>
    b170:	008000b4 	movhi	r2,2
    b174:	109d0b04 	addi	r2,r2,29740
    b178:	d8800015 	stw	r2,0(sp)
    b17c:	010000b4 	movhi	r4,2
    b180:	211d0e04 	addi	r4,r4,29752
    b184:	014000b4 	movhi	r5,2
    b188:	295f6d04 	addi	r5,r5,32180
    b18c:	180d883a 	mov	r6,r3
    b190:	e1fffc17 	ldw	r7,-16(fp)
    b194:	001f8180 	call	1f818 <printf>
    b198:	010000b4 	movhi	r4,2
    b19c:	211a7504 	addi	r4,r4,27092
    b1a0:	001f8180 	call	1f818 <printf>
		__func__, tx ? "TX" : "RX", profile,
		prepare ? "Prepare" : "Un-Prepare");

	if (tx) {
    b1a4:	e0bffb03 	ldbu	r2,-20(fp)
    b1a8:	10000526 	beq	r2,zero,b1c0 <ad9361_fastlock_prepare+0xb8>
		offs = REG_TX_FAST_LOCK_SETUP - REG_RX_FAST_LOCK_SETUP;
    b1ac:	00801004 	movi	r2,64
    b1b0:	e0bff715 	stw	r2,-36(fp)
		ready_mask = TX_SYNTH_READY_MASK;
    b1b4:	00800044 	movi	r2,1
    b1b8:	e0bff815 	stw	r2,-32(fp)
    b1bc:	00000306 	br	b1cc <ad9361_fastlock_prepare+0xc4>
	}
	else {
		offs = 0;
    b1c0:	e03ff715 	stw	zero,-36(fp)
		ready_mask = RX_SYNTH_READY_MASK;
    b1c4:	00800084 	movi	r2,2
    b1c8:	e0bff815 	stw	r2,-32(fp)
	}

	is_prepared = !!phy->fastlock.current_profile[tx];
    b1cc:	e0bffb03 	ldbu	r2,-20(fp)
    b1d0:	e0fffa17 	ldw	r3,-24(fp)
    b1d4:	1885883a 	add	r2,r3,r2
    b1d8:	10806104 	addi	r2,r2,388
    b1dc:	108000c3 	ldbu	r2,3(r2)
    b1e0:	10803fcc 	andi	r2,r2,255
    b1e4:	1004c03a 	cmpne	r2,r2,zero
    b1e8:	e0bff905 	stb	r2,-28(fp)

	if (prepare && !is_prepared) {
    b1ec:	e0bffd03 	ldbu	r2,-12(fp)
    b1f0:	10004026 	beq	r2,zero,b2f4 <ad9361_fastlock_prepare+0x1ec>
    b1f4:	e0bff903 	ldbu	r2,-28(fp)
    b1f8:	1080005c 	xori	r2,r2,1
    b1fc:	10803fcc 	andi	r2,r2,255
    b200:	10003c26 	beq	r2,zero,b2f4 <ad9361_fastlock_prepare+0x1ec>
		ad9361_spi_write(phy->spi,
    b204:	e0bffa17 	ldw	r2,-24(fp)
    b208:	14400117 	ldw	r17,4(r2)
    b20c:	e0bff717 	ldw	r2,-36(fp)
    b210:	140096c4 	addi	r16,r2,603
    b214:	e0bffb03 	ldbu	r2,-20(fp)
    b218:	10000726 	beq	r2,zero,b238 <ad9361_fastlock_prepare+0x130>
			REG_RX_FAST_LOCK_SETUP_INIT_DELAY + offs,
			(tx ? phy->pdata->tx_fastlock_delay_ns :
    b21c:	e0bffa17 	ldw	r2,-24(fp)
    b220:	10803017 	ldw	r2,192(r2)
    b224:	10802217 	ldw	r2,136(r2)
	}

	is_prepared = !!phy->fastlock.current_profile[tx];

	if (prepare && !is_prepared) {
		ad9361_spi_write(phy->spi,
    b228:	1009883a 	mov	r4,r2
    b22c:	01403e84 	movi	r5,250
    b230:	001d7a40 	call	1d7a4 <__udivsi3>
    b234:	00000606 	br	b250 <ad9361_fastlock_prepare+0x148>
			REG_RX_FAST_LOCK_SETUP_INIT_DELAY + offs,
			(tx ? phy->pdata->tx_fastlock_delay_ns :
			phy->pdata->rx_fastlock_delay_ns) / 250);
    b238:	e0bffa17 	ldw	r2,-24(fp)
    b23c:	10803017 	ldw	r2,192(r2)
    b240:	10802117 	ldw	r2,132(r2)
	}

	is_prepared = !!phy->fastlock.current_profile[tx];

	if (prepare && !is_prepared) {
		ad9361_spi_write(phy->spi,
    b244:	1009883a 	mov	r4,r2
    b248:	01403e84 	movi	r5,250
    b24c:	001d7a40 	call	1d7a4 <__udivsi3>
    b250:	8809883a 	mov	r4,r17
    b254:	800b883a 	mov	r5,r16
    b258:	100d883a 	mov	r6,r2
    b25c:	00002600 	call	260 <ad9361_spi_write>
			REG_RX_FAST_LOCK_SETUP_INIT_DELAY + offs,
			(tx ? phy->pdata->tx_fastlock_delay_ns :
			phy->pdata->rx_fastlock_delay_ns) / 250);
		ad9361_spi_write(phy->spi, REG_RX_FAST_LOCK_SETUP + offs,
    b260:	e0bffa17 	ldw	r2,-24(fp)
    b264:	11000117 	ldw	r4,4(r2)
    b268:	e0bff717 	ldw	r2,-36(fp)
    b26c:	10c09684 	addi	r3,r2,602
			RX_FAST_LOCK_PROFILE(profile) |
    b270:	e0bffc17 	ldw	r2,-16(fp)
    b274:	1004917a 	slli	r2,r2,5
    b278:	10803fcc 	andi	r2,r2,255
	if (prepare && !is_prepared) {
		ad9361_spi_write(phy->spi,
			REG_RX_FAST_LOCK_SETUP_INIT_DELAY + offs,
			(tx ? phy->pdata->tx_fastlock_delay_ns :
			phy->pdata->rx_fastlock_delay_ns) / 250);
		ad9361_spi_write(phy->spi, REG_RX_FAST_LOCK_SETUP + offs,
    b27c:	10800054 	ori	r2,r2,1
    b280:	180b883a 	mov	r5,r3
    b284:	100d883a 	mov	r6,r2
    b288:	00002600 	call	260 <ad9361_spi_write>
			RX_FAST_LOCK_PROFILE(profile) |
			RX_FAST_LOCK_MODE_ENABLE);
		ad9361_spi_write(phy->spi, REG_RX_FAST_LOCK_PROGRAM_CTRL + offs,
    b28c:	e0bffa17 	ldw	r2,-24(fp)
    b290:	10c00117 	ldw	r3,4(r2)
    b294:	e0bff717 	ldw	r2,-36(fp)
    b298:	108097c4 	addi	r2,r2,607
    b29c:	1809883a 	mov	r4,r3
    b2a0:	100b883a 	mov	r5,r2
    b2a4:	000d883a 	mov	r6,zero
    b2a8:	00002600 	call	260 <ad9361_spi_write>
			0);

		ad9361_spi_writef(phy->spi, REG_ENSM_CONFIG_2, ready_mask, 1);
    b2ac:	e0bffa17 	ldw	r2,-24(fp)
    b2b0:	14000117 	ldw	r16,4(r2)
    b2b4:	e13ff817 	ldw	r4,-32(fp)
    b2b8:	001c8300 	call	1c830 <find_first_bit>
    b2bc:	1007883a 	mov	r3,r2
    b2c0:	00800044 	movi	r2,1
    b2c4:	d8800015 	stw	r2,0(sp)
    b2c8:	8009883a 	mov	r4,r16
    b2cc:	01400544 	movi	r5,21
    b2d0:	e1bff817 	ldw	r6,-32(fp)
    b2d4:	180f883a 	mov	r7,r3
    b2d8:	000031c0 	call	31c <__ad9361_spi_writef>
		ad9361_trx_vco_cal_control(phy, tx, false);
    b2dc:	e0bffb03 	ldbu	r2,-20(fp)
    b2e0:	e13ffa17 	ldw	r4,-24(fp)
    b2e4:	100b883a 	mov	r5,r2
    b2e8:	000d883a 	mov	r6,zero
    b2ec:	00063880 	call	6388 <ad9361_trx_vco_cal_control>
    b2f0:	00005606 	br	b44c <ad9361_fastlock_prepare+0x344>
	}
	else if (!prepare && is_prepared) {
    b2f4:	e0bffd03 	ldbu	r2,-12(fp)
    b2f8:	1080005c 	xori	r2,r2,1
    b2fc:	10803fcc 	andi	r2,r2,255
    b300:	10005226 	beq	r2,zero,b44c <ad9361_fastlock_prepare+0x344>
    b304:	e0bff903 	ldbu	r2,-28(fp)
    b308:	10005026 	beq	r2,zero,b44c <ad9361_fastlock_prepare+0x344>
		ad9361_spi_write(phy->spi, REG_RX_FAST_LOCK_SETUP + offs, 0);
    b30c:	e0bffa17 	ldw	r2,-24(fp)
    b310:	10c00117 	ldw	r3,4(r2)
    b314:	e0bff717 	ldw	r2,-36(fp)
    b318:	10809684 	addi	r2,r2,602
    b31c:	1809883a 	mov	r4,r3
    b320:	100b883a 	mov	r5,r2
    b324:	000d883a 	mov	r6,zero
    b328:	00002600 	call	260 <ad9361_spi_write>

		/* Workaround: Exiting Fastlock Mode */
		ad9361_spi_writef(phy->spi, REG_RX_FORCE_ALC + offs, FORCE_ALC_ENABLE, 1);
    b32c:	e0bffa17 	ldw	r2,-24(fp)
    b330:	14400117 	ldw	r17,4(r2)
    b334:	e0bff717 	ldw	r2,-36(fp)
    b338:	14008d84 	addi	r16,r2,566
    b33c:	01002004 	movi	r4,128
    b340:	001c8300 	call	1c830 <find_first_bit>
    b344:	1007883a 	mov	r3,r2
    b348:	00800044 	movi	r2,1
    b34c:	d8800015 	stw	r2,0(sp)
    b350:	8809883a 	mov	r4,r17
    b354:	800b883a 	mov	r5,r16
    b358:	01802004 	movi	r6,128
    b35c:	180f883a 	mov	r7,r3
    b360:	000031c0 	call	31c <__ad9361_spi_writef>
		ad9361_spi_writef(phy->spi, REG_RX_FORCE_VCO_TUNE_1 + offs, FORCE_VCO_TUNE, 1);
    b364:	e0bffa17 	ldw	r2,-24(fp)
    b368:	14400117 	ldw	r17,4(r2)
    b36c:	e0bff717 	ldw	r2,-36(fp)
    b370:	14008e04 	addi	r16,r2,568
    b374:	01000044 	movi	r4,1
    b378:	001c8300 	call	1c830 <find_first_bit>
    b37c:	1007883a 	mov	r3,r2
    b380:	00800044 	movi	r2,1
    b384:	d8800015 	stw	r2,0(sp)
    b388:	8809883a 	mov	r4,r17
    b38c:	800b883a 	mov	r5,r16
    b390:	01800044 	movi	r6,1
    b394:	180f883a 	mov	r7,r3
    b398:	000031c0 	call	31c <__ad9361_spi_writef>
		ad9361_spi_writef(phy->spi, REG_RX_FORCE_ALC + offs, FORCE_ALC_ENABLE, 0);
    b39c:	e0bffa17 	ldw	r2,-24(fp)
    b3a0:	14400117 	ldw	r17,4(r2)
    b3a4:	e0bff717 	ldw	r2,-36(fp)
    b3a8:	14008d84 	addi	r16,r2,566
    b3ac:	01002004 	movi	r4,128
    b3b0:	001c8300 	call	1c830 <find_first_bit>
    b3b4:	d8000015 	stw	zero,0(sp)
    b3b8:	8809883a 	mov	r4,r17
    b3bc:	800b883a 	mov	r5,r16
    b3c0:	01802004 	movi	r6,128
    b3c4:	100f883a 	mov	r7,r2
    b3c8:	000031c0 	call	31c <__ad9361_spi_writef>
		ad9361_spi_writef(phy->spi, REG_RX_FORCE_VCO_TUNE_1 + offs, FORCE_VCO_TUNE, 0);
    b3cc:	e0bffa17 	ldw	r2,-24(fp)
    b3d0:	14400117 	ldw	r17,4(r2)
    b3d4:	e0bff717 	ldw	r2,-36(fp)
    b3d8:	14008e04 	addi	r16,r2,568
    b3dc:	01000044 	movi	r4,1
    b3e0:	001c8300 	call	1c830 <find_first_bit>
    b3e4:	d8000015 	stw	zero,0(sp)
    b3e8:	8809883a 	mov	r4,r17
    b3ec:	800b883a 	mov	r5,r16
    b3f0:	01800044 	movi	r6,1
    b3f4:	100f883a 	mov	r7,r2
    b3f8:	000031c0 	call	31c <__ad9361_spi_writef>

		ad9361_trx_vco_cal_control(phy, tx, true);
    b3fc:	e0bffb03 	ldbu	r2,-20(fp)
    b400:	e13ffa17 	ldw	r4,-24(fp)
    b404:	100b883a 	mov	r5,r2
    b408:	01800044 	movi	r6,1
    b40c:	00063880 	call	6388 <ad9361_trx_vco_cal_control>
		ad9361_spi_writef(phy->spi, REG_ENSM_CONFIG_2, ready_mask, 0);
    b410:	e0bffa17 	ldw	r2,-24(fp)
    b414:	14000117 	ldw	r16,4(r2)
    b418:	e13ff817 	ldw	r4,-32(fp)
    b41c:	001c8300 	call	1c830 <find_first_bit>
    b420:	d8000015 	stw	zero,0(sp)
    b424:	8009883a 	mov	r4,r16
    b428:	01400544 	movi	r5,21
    b42c:	e1bff817 	ldw	r6,-32(fp)
    b430:	100f883a 	mov	r7,r2
    b434:	000031c0 	call	31c <__ad9361_spi_writef>

		phy->fastlock.current_profile[tx] = 0;
    b438:	e0bffb03 	ldbu	r2,-20(fp)
    b43c:	e0fffa17 	ldw	r3,-24(fp)
    b440:	1885883a 	add	r2,r3,r2
    b444:	10806104 	addi	r2,r2,388
    b448:	100000c5 	stb	zero,3(r2)
	}

	return 0;
    b44c:	0005883a 	mov	r2,zero
}
    b450:	e6fffe04 	addi	sp,fp,-8
    b454:	dfc00317 	ldw	ra,12(sp)
    b458:	df000217 	ldw	fp,8(sp)
    b45c:	dc400117 	ldw	r17,4(sp)
    b460:	dc000017 	ldw	r16,0(sp)
    b464:	dec00404 	addi	sp,sp,16
    b468:	f800283a 	ret

0000b46c <ad9361_fastlock_recall>:
 * @param tx
 * @param profile
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_fastlock_recall(struct ad9361_rf_phy *phy, bool tx, uint32_t profile)
{
    b46c:	defff504 	addi	sp,sp,-44
    b470:	de00012e 	bgeu	sp,et,b478 <ad9361_fastlock_recall+0xc>
    b474:	003b68fa 	trap	3
    b478:	dfc00a15 	stw	ra,40(sp)
    b47c:	df000915 	stw	fp,36(sp)
    b480:	dc400815 	stw	r17,32(sp)
    b484:	dc000715 	stw	r16,28(sp)
    b488:	df000904 	addi	fp,sp,36
    b48c:	e13ffb15 	stw	r4,-20(fp)
    b490:	2805883a 	mov	r2,r5
    b494:	e1bffd15 	stw	r6,-12(fp)
    b498:	e0bffc05 	stb	r2,-16(fp)
	uint32_t offs = 0;
    b49c:	e03ff915 	stw	zero,-28(fp)
	uint8_t curr, _new, orig, current_profile;

	dev_dbg(&phy->spi->dev, "%s: %s Profile %"PRIu32":",
    b4a0:	e0bffc03 	ldbu	r2,-16(fp)
    b4a4:	10000326 	beq	r2,zero,b4b4 <ad9361_fastlock_recall+0x48>
    b4a8:	008000b4 	movhi	r2,2
    b4ac:	109c6c04 	addi	r2,r2,29104
    b4b0:	00000206 	br	b4bc <ad9361_fastlock_recall+0x50>
    b4b4:	008000b4 	movhi	r2,2
    b4b8:	109c6d04 	addi	r2,r2,29108
    b4bc:	010000b4 	movhi	r4,2
    b4c0:	211d0404 	addi	r4,r4,29712
    b4c4:	014000b4 	movhi	r5,2
    b4c8:	295f7304 	addi	r5,r5,32204
    b4cc:	100d883a 	mov	r6,r2
    b4d0:	e1fffd17 	ldw	r7,-12(fp)
    b4d4:	001f8180 	call	1f818 <printf>
    b4d8:	010000b4 	movhi	r4,2
    b4dc:	211a7504 	addi	r4,r4,27092
    b4e0:	001f8180 	call	1f818 <printf>
		__func__, tx ? "TX" : "RX", profile);

	if (tx)
    b4e4:	e0bffc03 	ldbu	r2,-16(fp)
    b4e8:	10000226 	beq	r2,zero,b4f4 <ad9361_fastlock_recall+0x88>
		offs = REG_TX_FAST_LOCK_SETUP - REG_RX_FAST_LOCK_SETUP;
    b4ec:	00801004 	movi	r2,64
    b4f0:	e0bff915 	stw	r2,-28(fp)

	if (phy->fastlock.entry[tx][profile].flags != FASTLOOK_INIT)
    b4f4:	e17ffc03 	ldbu	r5,-16(fp)
    b4f8:	e13ffb17 	ldw	r4,-20(fp)
    b4fc:	e0fffd17 	ldw	r3,-12(fp)
    b500:	1805883a 	mov	r2,r3
    b504:	1085883a 	add	r2,r2,r2
    b508:	10c5883a 	add	r2,r2,r3
    b50c:	28c00624 	muli	r3,r5,24
    b510:	10c5883a 	add	r2,r2,r3
    b514:	2085883a 	add	r2,r4,r2
    b518:	10806104 	addi	r2,r2,388
    b51c:	10800143 	ldbu	r2,5(r2)
    b520:	10803fcc 	andi	r2,r2,255
    b524:	10800060 	cmpeqi	r2,r2,1
    b528:	1000021e 	bne	r2,zero,b534 <ad9361_fastlock_recall+0xc8>
		return -EINVAL;
    b52c:	00bffa84 	movi	r2,-22
    b530:	0000ac06 	br	b7e4 <ad9361_fastlock_recall+0x378>

	/* Workaround: Lock problem with same ALC word */

	current_profile = phy->fastlock.current_profile[tx];
    b534:	e0bffc03 	ldbu	r2,-16(fp)
    b538:	e0fffb17 	ldw	r3,-20(fp)
    b53c:	1885883a 	add	r2,r3,r2
    b540:	10806104 	addi	r2,r2,388
    b544:	108000c3 	ldbu	r2,3(r2)
    b548:	e0bffa45 	stb	r2,-23(fp)
	_new = phy->fastlock.entry[tx][profile].alc_written;
    b54c:	e17ffc03 	ldbu	r5,-16(fp)
    b550:	e13ffb17 	ldw	r4,-20(fp)
    b554:	e0fffd17 	ldw	r3,-12(fp)
    b558:	1805883a 	mov	r2,r3
    b55c:	1085883a 	add	r2,r2,r2
    b560:	10c5883a 	add	r2,r2,r3
    b564:	28c00624 	muli	r3,r5,24
    b568:	10c5883a 	add	r2,r2,r3
    b56c:	2085883a 	add	r2,r4,r2
    b570:	10806104 	addi	r2,r2,388
    b574:	108001c3 	ldbu	r2,7(r2)
    b578:	e0bffa85 	stb	r2,-22(fp)

	if (current_profile == 0)
    b57c:	e0bffa43 	ldbu	r2,-23(fp)
    b580:	10000e1e 	bne	r2,zero,b5bc <ad9361_fastlock_recall+0x150>
		curr = ad9361_spi_readf(phy->spi, REG_RX_FORCE_ALC + offs,
    b584:	e0bffb17 	ldw	r2,-20(fp)
    b588:	14400117 	ldw	r17,4(r2)
    b58c:	e0bff917 	ldw	r2,-28(fp)
    b590:	14008d84 	addi	r16,r2,566
    b594:	01001fc4 	movi	r4,127
    b598:	001c8300 	call	1c830 <find_first_bit>
    b59c:	8809883a 	mov	r4,r17
    b5a0:	800b883a 	mov	r5,r16
    b5a4:	01801fc4 	movi	r6,127
    b5a8:	100f883a 	mov	r7,r2
    b5ac:	00001b80 	call	1b8 <__ad9361_spi_readf>
    b5b0:	1085883a 	add	r2,r2,r2
    b5b4:	e0bffa05 	stb	r2,-24(fp)
    b5b8:	00000d06 	br	b5f0 <ad9361_fastlock_recall+0x184>
		FORCE_ALC_WORD(~0)) << 1;
	else
		curr = phy->fastlock.entry[tx][current_profile - 1].alc_written;
    b5bc:	e17ffc03 	ldbu	r5,-16(fp)
    b5c0:	e0bffa43 	ldbu	r2,-23(fp)
    b5c4:	10ffffc4 	addi	r3,r2,-1
    b5c8:	e13ffb17 	ldw	r4,-20(fp)
    b5cc:	1805883a 	mov	r2,r3
    b5d0:	1085883a 	add	r2,r2,r2
    b5d4:	10c5883a 	add	r2,r2,r3
    b5d8:	28c00624 	muli	r3,r5,24
    b5dc:	10c5883a 	add	r2,r2,r3
    b5e0:	2085883a 	add	r2,r4,r2
    b5e4:	10806104 	addi	r2,r2,388
    b5e8:	108001c3 	ldbu	r2,7(r2)
    b5ec:	e0bffa05 	stb	r2,-24(fp)

	if ((curr >> 1) == (_new >> 1)) {
    b5f0:	e0bffa03 	ldbu	r2,-24(fp)
    b5f4:	1004d07a 	srli	r2,r2,1
    b5f8:	1007883a 	mov	r3,r2
    b5fc:	e0bffa83 	ldbu	r2,-22(fp)
    b600:	1004d07a 	srli	r2,r2,1
    b604:	18c03fcc 	andi	r3,r3,255
    b608:	10803fcc 	andi	r2,r2,255
    b60c:	1880501e 	bne	r3,r2,b750 <ad9361_fastlock_recall+0x2e4>
		orig = phy->fastlock.entry[tx][profile].alc_orig;
    b610:	e17ffc03 	ldbu	r5,-16(fp)
    b614:	e13ffb17 	ldw	r4,-20(fp)
    b618:	e0fffd17 	ldw	r3,-12(fp)
    b61c:	1805883a 	mov	r2,r3
    b620:	1085883a 	add	r2,r2,r2
    b624:	10c5883a 	add	r2,r2,r3
    b628:	28c00624 	muli	r3,r5,24
    b62c:	10c5883a 	add	r2,r2,r3
    b630:	2085883a 	add	r2,r4,r2
    b634:	10806104 	addi	r2,r2,388
    b638:	10800183 	ldbu	r2,6(r2)
    b63c:	e0bffac5 	stb	r2,-21(fp)

		if ((orig >> 1) == (_new >> 1))
    b640:	e0bffac3 	ldbu	r2,-21(fp)
    b644:	1004d07a 	srli	r2,r2,1
    b648:	1007883a 	mov	r3,r2
    b64c:	e0bffa83 	ldbu	r2,-22(fp)
    b650:	1004d07a 	srli	r2,r2,1
    b654:	18c03fcc 	andi	r3,r3,255
    b658:	10803fcc 	andi	r2,r2,255
    b65c:	1880191e 	bne	r3,r2,b6c4 <ad9361_fastlock_recall+0x258>
			phy->fastlock.entry[tx][profile].alc_written += 2;
    b660:	e17ffc03 	ldbu	r5,-16(fp)
    b664:	e1bffc03 	ldbu	r6,-16(fp)
    b668:	e13ffb17 	ldw	r4,-20(fp)
    b66c:	e0fffd17 	ldw	r3,-12(fp)
    b670:	1805883a 	mov	r2,r3
    b674:	1085883a 	add	r2,r2,r2
    b678:	10c5883a 	add	r2,r2,r3
    b67c:	30c00624 	muli	r3,r6,24
    b680:	10c5883a 	add	r2,r2,r3
    b684:	2085883a 	add	r2,r4,r2
    b688:	10806104 	addi	r2,r2,388
    b68c:	108001c3 	ldbu	r2,7(r2)
    b690:	10800084 	addi	r2,r2,2
    b694:	100d883a 	mov	r6,r2
    b698:	e13ffb17 	ldw	r4,-20(fp)
    b69c:	e0fffd17 	ldw	r3,-12(fp)
    b6a0:	1805883a 	mov	r2,r3
    b6a4:	1085883a 	add	r2,r2,r2
    b6a8:	10c5883a 	add	r2,r2,r3
    b6ac:	28c00624 	muli	r3,r5,24
    b6b0:	10c5883a 	add	r2,r2,r3
    b6b4:	2085883a 	add	r2,r4,r2
    b6b8:	10806104 	addi	r2,r2,388
    b6bc:	118001c5 	stb	r6,7(r2)
    b6c0:	00000c06 	br	b6f4 <ad9361_fastlock_recall+0x288>
		else
			phy->fastlock.entry[tx][profile].alc_written = orig;
    b6c4:	e17ffc03 	ldbu	r5,-16(fp)
    b6c8:	e13ffb17 	ldw	r4,-20(fp)
    b6cc:	e0fffd17 	ldw	r3,-12(fp)
    b6d0:	1805883a 	mov	r2,r3
    b6d4:	1085883a 	add	r2,r2,r2
    b6d8:	10c5883a 	add	r2,r2,r3
    b6dc:	28c00624 	muli	r3,r5,24
    b6e0:	10c5883a 	add	r2,r2,r3
    b6e4:	2085883a 	add	r2,r4,r2
    b6e8:	10806104 	addi	r2,r2,388
    b6ec:	e0fffac3 	ldbu	r3,-21(fp)
    b6f0:	10c001c5 	stb	r3,7(r2)

		ad9361_fastlock_writeval(phy->spi, tx, profile, 0xF,
    b6f4:	e0bffb17 	ldw	r2,-20(fp)
    b6f8:	11c00117 	ldw	r7,4(r2)
    b6fc:	e1bffc03 	ldbu	r6,-16(fp)
			phy->fastlock.entry[tx][profile].alc_written, true);
    b700:	e17ffc03 	ldbu	r5,-16(fp)
    b704:	e13ffb17 	ldw	r4,-20(fp)
    b708:	e0fffd17 	ldw	r3,-12(fp)
    b70c:	1805883a 	mov	r2,r3
    b710:	1085883a 	add	r2,r2,r2
    b714:	10c5883a 	add	r2,r2,r3
    b718:	28c00624 	muli	r3,r5,24
    b71c:	10c5883a 	add	r2,r2,r3
    b720:	2085883a 	add	r2,r4,r2
    b724:	10806104 	addi	r2,r2,388
    b728:	108001c3 	ldbu	r2,7(r2)
		if ((orig >> 1) == (_new >> 1))
			phy->fastlock.entry[tx][profile].alc_written += 2;
		else
			phy->fastlock.entry[tx][profile].alc_written = orig;

		ad9361_fastlock_writeval(phy->spi, tx, profile, 0xF,
    b72c:	10803fcc 	andi	r2,r2,255
    b730:	d8800015 	stw	r2,0(sp)
    b734:	00800044 	movi	r2,1
    b738:	d8800115 	stw	r2,4(sp)
    b73c:	3809883a 	mov	r4,r7
    b740:	300b883a 	mov	r5,r6
    b744:	e1bffd17 	ldw	r6,-12(fp)
    b748:	01c003c4 	movi	r7,15
    b74c:	000a9000 	call	a900 <ad9361_fastlock_writeval>
			phy->fastlock.entry[tx][profile].alc_written, true);
	}

	ad9361_fastlock_prepare(phy, tx, profile, true);
    b750:	e0bffc03 	ldbu	r2,-16(fp)
    b754:	e13ffb17 	ldw	r4,-20(fp)
    b758:	100b883a 	mov	r5,r2
    b75c:	e1bffd17 	ldw	r6,-12(fp)
    b760:	01c00044 	movi	r7,1
    b764:	000b1080 	call	b108 <ad9361_fastlock_prepare>
	phy->fastlock.current_profile[tx] = profile + 1;
    b768:	e0bffc03 	ldbu	r2,-16(fp)
    b76c:	e0fffd17 	ldw	r3,-12(fp)
    b770:	18c00044 	addi	r3,r3,1
    b774:	1809883a 	mov	r4,r3
    b778:	e0fffb17 	ldw	r3,-20(fp)
    b77c:	1885883a 	add	r2,r3,r2
    b780:	10806104 	addi	r2,r2,388
    b784:	110000c5 	stb	r4,3(r2)

	return ad9361_spi_write(phy->spi, REG_RX_FAST_LOCK_SETUP + offs,
    b788:	e0bffb17 	ldw	r2,-20(fp)
    b78c:	11800117 	ldw	r6,4(r2)
    b790:	e0bff917 	ldw	r2,-28(fp)
    b794:	11409684 	addi	r5,r2,602
		RX_FAST_LOCK_PROFILE(profile) |
    b798:	e0bffd17 	ldw	r2,-12(fp)
    b79c:	1004917a 	slli	r2,r2,5
    b7a0:	10c03fcc 	andi	r3,r2,255
		(phy->pdata->trx_fastlock_pinctrl_en[tx] ?
    b7a4:	e0bffb17 	ldw	r2,-20(fp)
    b7a8:	11003017 	ldw	r4,192(r2)
    b7ac:	e0bffc03 	ldbu	r2,-16(fp)
    b7b0:	2085883a 	add	r2,r4,r2
    b7b4:	10802304 	addi	r2,r2,140
    b7b8:	10800003 	ldbu	r2,0(r2)

	ad9361_fastlock_prepare(phy, tx, profile, true);
	phy->fastlock.current_profile[tx] = profile + 1;

	return ad9361_spi_write(phy->spi, REG_RX_FAST_LOCK_SETUP + offs,
		RX_FAST_LOCK_PROFILE(profile) |
    b7bc:	10803fcc 	andi	r2,r2,255
    b7c0:	10000226 	beq	r2,zero,b7cc <ad9361_fastlock_recall+0x360>
    b7c4:	00800084 	movi	r2,2
    b7c8:	00000106 	br	b7d0 <ad9361_fastlock_recall+0x364>
    b7cc:	0005883a 	mov	r2,zero
    b7d0:	1884b03a 	or	r2,r3,r2
	}

	ad9361_fastlock_prepare(phy, tx, profile, true);
	phy->fastlock.current_profile[tx] = profile + 1;

	return ad9361_spi_write(phy->spi, REG_RX_FAST_LOCK_SETUP + offs,
    b7d4:	10800054 	ori	r2,r2,1
    b7d8:	3009883a 	mov	r4,r6
    b7dc:	100d883a 	mov	r6,r2
    b7e0:	00002600 	call	260 <ad9361_spi_write>
		RX_FAST_LOCK_PROFILE(profile) |
		(phy->pdata->trx_fastlock_pinctrl_en[tx] ?
	RX_FAST_LOCK_PROFILE_PIN_SELECT : 0) |
									  RX_FAST_LOCK_MODE_ENABLE);
}
    b7e4:	e6fffe04 	addi	sp,fp,-8
    b7e8:	dfc00317 	ldw	ra,12(sp)
    b7ec:	df000217 	ldw	fp,8(sp)
    b7f0:	dc400117 	ldw	r17,4(sp)
    b7f4:	dc000017 	ldw	r16,0(sp)
    b7f8:	dec00404 	addi	sp,sp,16
    b7fc:	f800283a 	ret

0000b800 <ad9361_fastlock_save>:
 * @param values
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_fastlock_save(struct ad9361_rf_phy *phy, bool tx,
	uint32_t profile, uint8_t *values)
{
    b800:	defff804 	addi	sp,sp,-32
    b804:	de00012e 	bgeu	sp,et,b80c <ad9361_fastlock_save+0xc>
    b808:	003b68fa 	trap	3
    b80c:	dfc00715 	stw	ra,28(sp)
    b810:	df000615 	stw	fp,24(sp)
    b814:	dc000515 	stw	r16,20(sp)
    b818:	df000604 	addi	fp,sp,24
    b81c:	e13ffb15 	stw	r4,-20(fp)
    b820:	2805883a 	mov	r2,r5
    b824:	e1bffd15 	stw	r6,-12(fp)
    b828:	e1fffe15 	stw	r7,-8(fp)
    b82c:	e0bffc05 	stb	r2,-16(fp)
	int32_t i;

	dev_dbg(&phy->spi->dev, "%s: %s Profile %"PRIu32":",
    b830:	e0bffc03 	ldbu	r2,-16(fp)
    b834:	10000326 	beq	r2,zero,b844 <ad9361_fastlock_save+0x44>
    b838:	008000b4 	movhi	r2,2
    b83c:	109c6c04 	addi	r2,r2,29104
    b840:	00000206 	br	b84c <ad9361_fastlock_save+0x4c>
    b844:	008000b4 	movhi	r2,2
    b848:	109c6d04 	addi	r2,r2,29108
    b84c:	010000b4 	movhi	r4,2
    b850:	211d0404 	addi	r4,r4,29712
    b854:	014000b4 	movhi	r5,2
    b858:	295f7904 	addi	r5,r5,32228
    b85c:	100d883a 	mov	r6,r2
    b860:	e1fffd17 	ldw	r7,-12(fp)
    b864:	001f8180 	call	1f818 <printf>
    b868:	010000b4 	movhi	r4,2
    b86c:	211a7504 	addi	r4,r4,27092
    b870:	001f8180 	call	1f818 <printf>
		__func__, tx ? "TX" : "RX", profile);

	for (i = 0; i < RX_FAST_LOCK_CONFIG_WORD_NUM; i++)
    b874:	e03ffa15 	stw	zero,-24(fp)
    b878:	00000f06 	br	b8b8 <ad9361_fastlock_save+0xb8>
		values[i] = ad9361_fastlock_readval(phy->spi, tx, profile, i);
    b87c:	e0bffa17 	ldw	r2,-24(fp)
    b880:	e0fffe17 	ldw	r3,-8(fp)
    b884:	18a1883a 	add	r16,r3,r2
    b888:	e0bffb17 	ldw	r2,-20(fp)
    b88c:	11000117 	ldw	r4,4(r2)
    b890:	e0fffc03 	ldbu	r3,-16(fp)
    b894:	e0bffa17 	ldw	r2,-24(fp)
    b898:	180b883a 	mov	r5,r3
    b89c:	e1bffd17 	ldw	r6,-12(fp)
    b8a0:	100f883a 	mov	r7,r2
    b8a4:	000a86c0 	call	a86c <ad9361_fastlock_readval>
    b8a8:	80800005 	stb	r2,0(r16)
	int32_t i;

	dev_dbg(&phy->spi->dev, "%s: %s Profile %"PRIu32":",
		__func__, tx ? "TX" : "RX", profile);

	for (i = 0; i < RX_FAST_LOCK_CONFIG_WORD_NUM; i++)
    b8ac:	e0bffa17 	ldw	r2,-24(fp)
    b8b0:	10800044 	addi	r2,r2,1
    b8b4:	e0bffa15 	stw	r2,-24(fp)
    b8b8:	e0bffa17 	ldw	r2,-24(fp)
    b8bc:	10800410 	cmplti	r2,r2,16
    b8c0:	103fee1e 	bne	r2,zero,b87c <_gp+0xfffd975c>
		values[i] = ad9361_fastlock_readval(phy->spi, tx, profile, i);

	return 0;
    b8c4:	0005883a 	mov	r2,zero
}
    b8c8:	e6ffff04 	addi	sp,fp,-4
    b8cc:	dfc00217 	ldw	ra,8(sp)
    b8d0:	df000117 	ldw	fp,4(sp)
    b8d4:	dc000017 	ldw	r16,0(sp)
    b8d8:	dec00304 	addi	sp,sp,12
    b8dc:	f800283a 	ret

0000b8e0 <ad9361_mcs>:
 * @param phy The AD9361 state structure.
 * @param step MCS step.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_mcs(struct ad9361_rf_phy *phy, int32_t step)
{
    b8e0:	defff804 	addi	sp,sp,-32
    b8e4:	de00012e 	bgeu	sp,et,b8ec <ad9361_mcs+0xc>
    b8e8:	003b68fa 	trap	3
    b8ec:	dfc00715 	stw	ra,28(sp)
    b8f0:	df000615 	stw	fp,24(sp)
    b8f4:	dc400515 	stw	r17,20(sp)
    b8f8:	dc000415 	stw	r16,16(sp)
    b8fc:	df000604 	addi	fp,sp,24
    b900:	e13ffc15 	stw	r4,-16(fp)
    b904:	e17ffd15 	stw	r5,-12(fp)
	int32_t mcs_mask = MCS_RF_ENABLE | MCS_BBPLL_ENABLE |
    b908:	008003c4 	movi	r2,15
    b90c:	e0bffb15 	stw	r2,-20(fp)
			MCS_DIGITAL_CLK_ENABLE | MCS_BB_ENABLE;

	dev_dbg(&phy->spi->dev, "%s: MCS step %"PRId32, __func__, step);
    b910:	010000b4 	movhi	r4,2
    b914:	211d1404 	addi	r4,r4,29776
    b918:	014000b4 	movhi	r5,2
    b91c:	295f7f04 	addi	r5,r5,32252
    b920:	e1bffd17 	ldw	r6,-12(fp)
    b924:	001f8180 	call	1f818 <printf>
    b928:	010000b4 	movhi	r4,2
    b92c:	211a7504 	addi	r4,r4,27092
    b930:	001f8180 	call	1f818 <printf>

	switch (step) {
    b934:	e0bffd17 	ldw	r2,-12(fp)
    b938:	108001a8 	cmpgeui	r2,r2,6
    b93c:	1000861e 	bne	r2,zero,bb58 <ad9361_mcs+0x278>
    b940:	e0bffd17 	ldw	r2,-12(fp)
    b944:	100690ba 	slli	r3,r2,2
    b948:	00800074 	movhi	r2,1
    b94c:	10ae5704 	addi	r2,r2,-18084
    b950:	1885883a 	add	r2,r3,r2
    b954:	10800017 	ldw	r2,0(r2)
    b958:	1000683a 	jmp	r2
    b95c:	0000b974 	movhi	zero,741
    b960:	0000b99c 	xori	zero,zero,742
    b964:	0000ba30 	cmpltui	zero,zero,744
    b968:	0000ba88 	cmpgei	zero,zero,746
    b96c:	0000bac4 	movi	zero,747
    b970:	0000bb1c 	xori	zero,zero,748
	case 0:
	/* REVIST:
	 * POWER_DOWN_TRX_SYNTH and MCS_RF_ENABLE somehow conflict
	 */
	ad9361_spi_writef(phy->spi, REG_ENSM_CONFIG_2,
    b974:	e0bffc17 	ldw	r2,-16(fp)
    b978:	14000117 	ldw	r16,4(r2)
    b97c:	01001804 	movi	r4,96
    b980:	001c8300 	call	1c830 <find_first_bit>
    b984:	d8000015 	stw	zero,0(sp)
    b988:	8009883a 	mov	r4,r16
    b98c:	01400544 	movi	r5,21
    b990:	01801804 	movi	r6,96
    b994:	100f883a 	mov	r7,r2
    b998:	000031c0 	call	31c <__ad9361_spi_writef>
			POWER_DOWN_TX_SYNTH | POWER_DOWN_RX_SYNTH, 0);
	case 1:
		/* REVIST:
		* POWER_DOWN_TRX_SYNTH and MCS_RF_ENABLE somehow conflict
		*/
		ad9361_spi_writef(phy->spi, REG_ENSM_CONFIG_2,
    b99c:	e0bffc17 	ldw	r2,-16(fp)
    b9a0:	14000117 	ldw	r16,4(r2)
    b9a4:	01001804 	movi	r4,96
    b9a8:	001c8300 	call	1c830 <find_first_bit>
    b9ac:	d8000015 	stw	zero,0(sp)
    b9b0:	8009883a 	mov	r4,r16
    b9b4:	01400544 	movi	r5,21
    b9b8:	01801804 	movi	r6,96
    b9bc:	100f883a 	mov	r7,r2
    b9c0:	000031c0 	call	31c <__ad9361_spi_writef>
				POWER_DOWN_TX_SYNTH | POWER_DOWN_RX_SYNTH, 0);

		ad9361_spi_writef(phy->spi, REG_MULTICHIP_SYNC_AND_TX_MON_CTRL,
    b9c4:	e0bffc17 	ldw	r2,-16(fp)
    b9c8:	14400117 	ldw	r17,4(r2)
    b9cc:	e43ffb17 	ldw	r16,-20(fp)
    b9d0:	e0bffb17 	ldw	r2,-20(fp)
    b9d4:	1009883a 	mov	r4,r2
    b9d8:	001c8300 	call	1c830 <find_first_bit>
    b9dc:	1007883a 	mov	r3,r2
    b9e0:	00800344 	movi	r2,13
    b9e4:	d8800015 	stw	r2,0(sp)
    b9e8:	8809883a 	mov	r4,r17
    b9ec:	01400044 	movi	r5,1
    b9f0:	800d883a 	mov	r6,r16
    b9f4:	180f883a 	mov	r7,r3
    b9f8:	000031c0 	call	31c <__ad9361_spi_writef>
			mcs_mask, MCS_BB_ENABLE | MCS_BBPLL_ENABLE | MCS_RF_ENABLE);
		ad9361_spi_writef(phy->spi, REG_CP_BLEED_CURRENT,
    b9fc:	e0bffc17 	ldw	r2,-16(fp)
    ba00:	14000117 	ldw	r16,4(r2)
    ba04:	01002004 	movi	r4,128
    ba08:	001c8300 	call	1c830 <find_first_bit>
    ba0c:	1007883a 	mov	r3,r2
    ba10:	00800044 	movi	r2,1
    ba14:	d8800015 	stw	r2,0(sp)
    ba18:	8009883a 	mov	r4,r16
    ba1c:	014011c4 	movi	r5,71
    ba20:	01802004 	movi	r6,128
    ba24:	180f883a 	mov	r7,r3
    ba28:	000031c0 	call	31c <__ad9361_spi_writef>
			MCS_REFCLK_SCALE_EN, 1);
		break;
    ba2c:	00004a06 	br	bb58 <ad9361_mcs+0x278>
	case 2:
		if(!gpio_is_valid(phy->pdata->gpio_sync))
    ba30:	e0bffc17 	ldw	r2,-16(fp)
    ba34:	10803017 	ldw	r2,192(r2)
    ba38:	10805e17 	ldw	r2,376(r2)
    ba3c:	1009883a 	mov	r4,r2
    ba40:	001b7a00 	call	1b7a0 <gpio_is_valid>
    ba44:	1080005c 	xori	r2,r2,1
    ba48:	10803fcc 	andi	r2,r2,255
    ba4c:	10000126 	beq	r2,zero,ba54 <ad9361_mcs+0x174>
			break;
    ba50:	00004106 	br	bb58 <ad9361_mcs+0x278>
		/*
		 * NOTE: This is not a regular GPIO -
		 * HDL ensures Multi-chip Synchronization SYNC_IN Pulse Timing
		 * relative to rising and falling edge of REF_CLK
		 */
		gpio_set_value(phy->pdata->gpio_sync, 1);
    ba54:	e0bffc17 	ldw	r2,-16(fp)
    ba58:	10803017 	ldw	r2,192(r2)
    ba5c:	10805e17 	ldw	r2,376(r2)
    ba60:	1009883a 	mov	r4,r2
    ba64:	01400044 	movi	r5,1
    ba68:	001b8100 	call	1b810 <gpio_set_value>
		gpio_set_value(phy->pdata->gpio_sync, 0);
    ba6c:	e0bffc17 	ldw	r2,-16(fp)
    ba70:	10803017 	ldw	r2,192(r2)
    ba74:	10805e17 	ldw	r2,376(r2)
    ba78:	1009883a 	mov	r4,r2
    ba7c:	000b883a 	mov	r5,zero
    ba80:	001b8100 	call	1b810 <gpio_set_value>
		break;
    ba84:	00003406 	br	bb58 <ad9361_mcs+0x278>
	case 3:
		ad9361_spi_writef(phy->spi, REG_MULTICHIP_SYNC_AND_TX_MON_CTRL,
    ba88:	e0bffc17 	ldw	r2,-16(fp)
    ba8c:	14400117 	ldw	r17,4(r2)
    ba90:	e43ffb17 	ldw	r16,-20(fp)
    ba94:	e0bffb17 	ldw	r2,-20(fp)
    ba98:	1009883a 	mov	r4,r2
    ba9c:	001c8300 	call	1c830 <find_first_bit>
    baa0:	1007883a 	mov	r3,r2
    baa4:	008002c4 	movi	r2,11
    baa8:	d8800015 	stw	r2,0(sp)
    baac:	8809883a 	mov	r4,r17
    bab0:	01400044 	movi	r5,1
    bab4:	800d883a 	mov	r6,r16
    bab8:	180f883a 	mov	r7,r3
    babc:	000031c0 	call	31c <__ad9361_spi_writef>
			mcs_mask, MCS_BB_ENABLE | MCS_DIGITAL_CLK_ENABLE | MCS_RF_ENABLE);
		break;
    bac0:	00002506 	br	bb58 <ad9361_mcs+0x278>
	case 4:
		if(!gpio_is_valid(phy->pdata->gpio_sync))
    bac4:	e0bffc17 	ldw	r2,-16(fp)
    bac8:	10803017 	ldw	r2,192(r2)
    bacc:	10805e17 	ldw	r2,376(r2)
    bad0:	1009883a 	mov	r4,r2
    bad4:	001b7a00 	call	1b7a0 <gpio_is_valid>
    bad8:	1080005c 	xori	r2,r2,1
    badc:	10803fcc 	andi	r2,r2,255
    bae0:	10000126 	beq	r2,zero,bae8 <ad9361_mcs+0x208>
			break;
    bae4:	00001c06 	br	bb58 <ad9361_mcs+0x278>
		gpio_set_value(phy->pdata->gpio_sync, 1);
    bae8:	e0bffc17 	ldw	r2,-16(fp)
    baec:	10803017 	ldw	r2,192(r2)
    baf0:	10805e17 	ldw	r2,376(r2)
    baf4:	1009883a 	mov	r4,r2
    baf8:	01400044 	movi	r5,1
    bafc:	001b8100 	call	1b810 <gpio_set_value>
		gpio_set_value(phy->pdata->gpio_sync, 0);
    bb00:	e0bffc17 	ldw	r2,-16(fp)
    bb04:	10803017 	ldw	r2,192(r2)
    bb08:	10805e17 	ldw	r2,376(r2)
    bb0c:	1009883a 	mov	r4,r2
    bb10:	000b883a 	mov	r5,zero
    bb14:	001b8100 	call	1b810 <gpio_set_value>
		break;
    bb18:	00000f06 	br	bb58 <ad9361_mcs+0x278>
	case 5:
		ad9361_spi_writef(phy->spi, REG_MULTICHIP_SYNC_AND_TX_MON_CTRL,
    bb1c:	e0bffc17 	ldw	r2,-16(fp)
    bb20:	14400117 	ldw	r17,4(r2)
    bb24:	e43ffb17 	ldw	r16,-20(fp)
    bb28:	e0bffb17 	ldw	r2,-20(fp)
    bb2c:	1009883a 	mov	r4,r2
    bb30:	001c8300 	call	1c830 <find_first_bit>
    bb34:	1007883a 	mov	r3,r2
    bb38:	00800204 	movi	r2,8
    bb3c:	d8800015 	stw	r2,0(sp)
    bb40:	8809883a 	mov	r4,r17
    bb44:	01400044 	movi	r5,1
    bb48:	800d883a 	mov	r6,r16
    bb4c:	180f883a 	mov	r7,r3
    bb50:	000031c0 	call	31c <__ad9361_spi_writef>
			mcs_mask, MCS_RF_ENABLE);
		break;
    bb54:	0001883a 	nop
	}

	return 0;
    bb58:	0005883a 	mov	r2,zero
}
    bb5c:	e6fffe04 	addi	sp,fp,-8
    bb60:	dfc00317 	ldw	ra,12(sp)
    bb64:	df000217 	ldw	fp,8(sp)
    bb68:	dc400117 	ldw	r17,4(sp)
    bb6c:	dc000017 	ldw	r16,0(sp)
    bb70:	dec00404 	addi	sp,sp,16
    bb74:	f800283a 	ret

0000bb78 <ad9361_clear_state>:
 * Clear state.
 * @param phy The AD9361 state structure.
 * @return None.
 */
void ad9361_clear_state(struct ad9361_rf_phy *phy)
{
    bb78:	defffd04 	addi	sp,sp,-12
    bb7c:	de00012e 	bgeu	sp,et,bb84 <ad9361_clear_state+0xc>
    bb80:	003b68fa 	trap	3
    bb84:	dfc00215 	stw	ra,8(sp)
    bb88:	df000115 	stw	fp,4(sp)
    bb8c:	df000104 	addi	fp,sp,4
    bb90:	e13fff15 	stw	r4,-4(fp)
	phy->current_table = RXGAIN_TBLS_END;
    bb94:	e0bfff17 	ldw	r2,-4(fp)
    bb98:	00c000c4 	movi	r3,3
    bb9c:	10c04415 	stw	r3,272(r2)
	phy->bypass_tx_fir = true;
    bba0:	e0bfff17 	ldw	r2,-4(fp)
    bba4:	00c00044 	movi	r3,1
    bba8:	10c04f45 	stb	r3,317(r2)
	phy->bypass_rx_fir = true;
    bbac:	e0bfff17 	ldw	r2,-4(fp)
    bbb0:	00c00044 	movi	r3,1
    bbb4:	10c04f05 	stb	r3,316(r2)
	phy->rate_governor = 1;
    bbb8:	e0bfff17 	ldw	r2,-4(fp)
    bbbc:	00c00044 	movi	r3,1
    bbc0:	10c04e15 	stw	r3,312(r2)
	phy->rfdc_track_en = true;
    bbc4:	e0bfff17 	ldw	r2,-4(fp)
    bbc8:	00c00044 	movi	r3,1
    bbcc:	10c05f85 	stb	r3,382(r2)
	phy->bbdc_track_en = true;
    bbd0:	e0bfff17 	ldw	r2,-4(fp)
    bbd4:	00c00044 	movi	r3,1
    bbd8:	10c05fc5 	stb	r3,383(r2)
	phy->quad_track_en = true;
    bbdc:	e0bfff17 	ldw	r2,-4(fp)
    bbe0:	00c00044 	movi	r3,1
    bbe4:	10c06005 	stb	r3,384(r2)
	phy->prev_ensm_state = 0;
    bbe8:	e0bfff17 	ldw	r2,-4(fp)
    bbec:	10003105 	stb	zero,196(r2)
	phy->curr_ensm_state = 0;
    bbf0:	e0bfff17 	ldw	r2,-4(fp)
    bbf4:	10003145 	stb	zero,197(r2)
	phy->auto_cal_en = false;
    bbf8:	e0bfff17 	ldw	r2,-4(fp)
    bbfc:	10004545 	stb	zero,277(r2)
	phy->last_tx_quad_cal_freq = 0;
    bc00:	e0bfff17 	ldw	r2,-4(fp)
    bc04:	10004615 	stw	zero,280(r2)
    bc08:	10004715 	stw	zero,284(r2)
	phy->flags = 0;
    bc0c:	e0bfff17 	ldw	r2,-4(fp)
    bc10:	10004915 	stw	zero,292(r2)
	phy->current_rx_bw_Hz = 0;
    bc14:	e0bfff17 	ldw	r2,-4(fp)
    bc18:	10004b15 	stw	zero,300(r2)
	phy->current_tx_bw_Hz = 0;
    bc1c:	e0bfff17 	ldw	r2,-4(fp)
    bc20:	10004c15 	stw	zero,304(r2)
	phy->rxbbf_div = 0;
    bc24:	e0bfff17 	ldw	r2,-4(fp)
    bc28:	10004d15 	stw	zero,308(r2)
	phy->tx_fir_int = 0;
    bc2c:	e0bfff17 	ldw	r2,-4(fp)
    bc30:	10005e05 	stb	zero,376(r2)
	phy->tx_fir_ntaps = 0;
    bc34:	e0bfff17 	ldw	r2,-4(fp)
    bc38:	10005e45 	stb	zero,377(r2)
	phy->rx_fir_dec = 0;
    bc3c:	e0bfff17 	ldw	r2,-4(fp)
    bc40:	10005e85 	stb	zero,378(r2)
	phy->rx_fir_ntaps = 0;
    bc44:	e0bfff17 	ldw	r2,-4(fp)
    bc48:	10005ec5 	stb	zero,379(r2)
	phy->ensm_pin_ctl_en = false;
    bc4c:	e0bfff17 	ldw	r2,-4(fp)
    bc50:	10004505 	stb	zero,276(r2)
	phy->txmon_tdd_en = 0;
    bc54:	e0bfff17 	ldw	r2,-4(fp)
    bc58:	10006045 	stb	zero,385(r2)
	memset(&phy->fastlock, 0, sizeof(phy->fastlock));
    bc5c:	e0bfff17 	ldw	r2,-4(fp)
    bc60:	10806184 	addi	r2,r2,390
    bc64:	1009883a 	mov	r4,r2
    bc68:	000b883a 	mov	r5,zero
    bc6c:	01800cc4 	movi	r6,51
    bc70:	001f55c0 	call	1f55c <memset>
}
    bc74:	e037883a 	mov	sp,fp
    bc78:	dfc00117 	ldw	ra,4(sp)
    bc7c:	df000017 	ldw	fp,0(sp)
    bc80:	dec00204 	addi	sp,sp,8
    bc84:	f800283a 	ret

0000bc88 <ad9361_ref_div_sel>:
 * @param refin_Hz Maximum allowed frequency.
 * @param max Reference in frequency value.
 * @return Reference frequency value.
 */
static uint32_t ad9361_ref_div_sel(uint32_t refin_Hz, uint32_t max)
{
    bc88:	defffd04 	addi	sp,sp,-12
    bc8c:	de00012e 	bgeu	sp,et,bc94 <ad9361_ref_div_sel+0xc>
    bc90:	003b68fa 	trap	3
    bc94:	df000215 	stw	fp,8(sp)
    bc98:	df000204 	addi	fp,sp,8
    bc9c:	e13ffe15 	stw	r4,-8(fp)
    bca0:	e17fff15 	stw	r5,-4(fp)
	if (refin_Hz <= (max / 2))
    bca4:	e0bfff17 	ldw	r2,-4(fp)
    bca8:	1006d07a 	srli	r3,r2,1
    bcac:	e0bffe17 	ldw	r2,-8(fp)
    bcb0:	18800336 	bltu	r3,r2,bcc0 <ad9361_ref_div_sel+0x38>
		return 2 * refin_Hz;
    bcb4:	e0bffe17 	ldw	r2,-8(fp)
    bcb8:	1085883a 	add	r2,r2,r2
    bcbc:	00001706 	br	bd1c <ad9361_ref_div_sel+0x94>
	else if (refin_Hz <= max)
    bcc0:	e0bffe17 	ldw	r2,-8(fp)
    bcc4:	e0ffff17 	ldw	r3,-4(fp)
    bcc8:	18800236 	bltu	r3,r2,bcd4 <ad9361_ref_div_sel+0x4c>
		return refin_Hz;
    bccc:	e0bffe17 	ldw	r2,-8(fp)
    bcd0:	00001206 	br	bd1c <ad9361_ref_div_sel+0x94>
	else if (refin_Hz <= (max * 2))
    bcd4:	e0bfff17 	ldw	r2,-4(fp)
    bcd8:	1085883a 	add	r2,r2,r2
    bcdc:	1007883a 	mov	r3,r2
    bce0:	e0bffe17 	ldw	r2,-8(fp)
    bce4:	18800336 	bltu	r3,r2,bcf4 <ad9361_ref_div_sel+0x6c>
		return refin_Hz / 2;
    bce8:	e0bffe17 	ldw	r2,-8(fp)
    bcec:	1004d07a 	srli	r2,r2,1
    bcf0:	00000a06 	br	bd1c <ad9361_ref_div_sel+0x94>
	else if (refin_Hz <= (max * 4))
    bcf4:	e0bfff17 	ldw	r2,-4(fp)
    bcf8:	1085883a 	add	r2,r2,r2
    bcfc:	1085883a 	add	r2,r2,r2
    bd00:	1007883a 	mov	r3,r2
    bd04:	e0bffe17 	ldw	r2,-8(fp)
    bd08:	18800336 	bltu	r3,r2,bd18 <ad9361_ref_div_sel+0x90>
		return refin_Hz / 4;
    bd0c:	e0bffe17 	ldw	r2,-8(fp)
    bd10:	1004d0ba 	srli	r2,r2,2
    bd14:	00000106 	br	bd1c <ad9361_ref_div_sel+0x94>
	else
		return 0;
    bd18:	0005883a 	mov	r2,zero
}
    bd1c:	e037883a 	mov	sp,fp
    bd20:	df000017 	ldw	fp,0(sp)
    bd24:	dec00104 	addi	sp,sp,4
    bd28:	f800283a 	ret

0000bd2c <ad9361_setup>:
 * Setup the AD9361 device.
 * @param phy The AD9361 state structure.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_setup(struct ad9361_rf_phy *phy)
{
    bd2c:	defff304 	addi	sp,sp,-52
    bd30:	de00012e 	bgeu	sp,et,bd38 <ad9361_setup+0xc>
    bd34:	003b68fa 	trap	3
    bd38:	dfc00c15 	stw	ra,48(sp)
    bd3c:	df000b15 	stw	fp,44(sp)
    bd40:	dc000a15 	stw	r16,40(sp)
    bd44:	df000b04 	addi	fp,sp,44
    bd48:	e13ffe15 	stw	r4,-8(fp)
	uint32_t refin_Hz, ref_freq, bbpll_freq;
	struct spi_device *spi = phy->spi;
    bd4c:	e0bffe17 	ldw	r2,-8(fp)
    bd50:	10800117 	ldw	r2,4(r2)
    bd54:	e0bff615 	stw	r2,-40(fp)
	struct ad9361_phy_platform_data *pd = phy->pdata;
    bd58:	e0bffe17 	ldw	r2,-8(fp)
    bd5c:	10803017 	ldw	r2,192(r2)
    bd60:	e0bff715 	stw	r2,-36(fp)
	int32_t ret;
	uint32_t real_rx_bandwidth = pd->rf_rx_bandwidth_Hz / 2;
    bd64:	e0bff717 	ldw	r2,-36(fp)
    bd68:	10801d17 	ldw	r2,116(r2)
    bd6c:	1004d07a 	srli	r2,r2,1
    bd70:	e0bff815 	stw	r2,-32(fp)
	uint32_t real_tx_bandwidth = pd->rf_tx_bandwidth_Hz / 2;
    bd74:	e0bff717 	ldw	r2,-36(fp)
    bd78:	10801e17 	ldw	r2,120(r2)
    bd7c:	1004d07a 	srli	r2,r2,1
    bd80:	e0bff915 	stw	r2,-28(fp)

	dev_dbg(dev, "%s", __func__);
    bd84:	010000b4 	movhi	r4,2
    bd88:	211aac04 	addi	r4,r4,27312
    bd8c:	014000b4 	movhi	r5,2
    bd90:	295f8204 	addi	r5,r5,32264
    bd94:	001f8180 	call	1f818 <printf>
    bd98:	010000b4 	movhi	r4,2
    bd9c:	211a7504 	addi	r4,r4,27092
    bda0:	001f8180 	call	1f818 <printf>

	if (pd->fdd) {
    bda4:	e0bff717 	ldw	r2,-36(fp)
    bda8:	10800043 	ldbu	r2,1(r2)
    bdac:	10803fcc 	andi	r2,r2,255
    bdb0:	10001526 	beq	r2,zero,be08 <ad9361_setup+0xdc>
		pd->tdd_skip_vco_cal = false;
    bdb4:	e0bff717 	ldw	r2,-36(fp)
    bdb8:	10000285 	stb	zero,10(r2)
		if (pd->ensm_pin_ctrl && pd->fdd_independent_mode) {
    bdbc:	e0bff717 	ldw	r2,-36(fp)
    bdc0:	10800183 	ldbu	r2,6(r2)
    bdc4:	10803fcc 	andi	r2,r2,255
    bdc8:	10001a26 	beq	r2,zero,be34 <ad9361_setup+0x108>
    bdcc:	e0bff717 	ldw	r2,-36(fp)
    bdd0:	10800083 	ldbu	r2,2(r2)
    bdd4:	10803fcc 	andi	r2,r2,255
    bdd8:	10001626 	beq	r2,zero,be34 <ad9361_setup+0x108>
			dev_warn(dev,
    bddc:	010000b4 	movhi	r4,2
    bde0:	211d1904 	addi	r4,r4,29796
    bde4:	014000b4 	movhi	r5,2
    bde8:	295f8204 	addi	r5,r5,32264
    bdec:	001f8180 	call	1f818 <printf>
    bdf0:	010000b4 	movhi	r4,2
    bdf4:	211a7504 	addi	r4,r4,27092
    bdf8:	001f8180 	call	1f818 <printf>
				 "%s: Either set ENSM PINCTRL or FDD Independent Mode",
				__func__);
			pd->ensm_pin_ctrl = false;
    bdfc:	e0bff717 	ldw	r2,-36(fp)
    be00:	10000185 	stb	zero,6(r2)
    be04:	00000b06 	br	be34 <ad9361_setup+0x108>
		}
	} else { /* TDD Mode */
		if (pd->tdd_use_dual_synth || pd->tdd_skip_vco_cal)
    be08:	e0bff717 	ldw	r2,-36(fp)
    be0c:	10800243 	ldbu	r2,9(r2)
    be10:	10803fcc 	andi	r2,r2,255
    be14:	1000041e 	bne	r2,zero,be28 <ad9361_setup+0xfc>
    be18:	e0bff717 	ldw	r2,-36(fp)
    be1c:	10800283 	ldbu	r2,10(r2)
    be20:	10803fcc 	andi	r2,r2,255
    be24:	10000326 	beq	r2,zero,be34 <ad9361_setup+0x108>
			pd->tdd_use_fdd_tables = true;
    be28:	e0bff717 	ldw	r2,-36(fp)
    be2c:	00c00044 	movi	r3,1
    be30:	10c00205 	stb	r3,8(r2)
	}

	if (pd->port_ctrl.pp_conf[2] & FDD_RX_RATE_2TX_RATE)
    be34:	e0bff717 	ldw	r2,-36(fp)
    be38:	10804383 	ldbu	r2,270(r2)
    be3c:	10803fcc 	andi	r2,r2,255
    be40:	1080201c 	xori	r2,r2,128
    be44:	10bfe004 	addi	r2,r2,-128
    be48:	1000030e 	bge	r2,zero,be58 <ad9361_setup+0x12c>
		phy->rx_eq_2tx = true;
    be4c:	e0bffe17 	ldw	r2,-8(fp)
    be50:	00c00044 	movi	r3,1
    be54:	10c04f85 	stb	r3,318(r2)

	ad9361_spi_write(spi, REG_CTRL, CTRL_ENABLE);
    be58:	e13ff617 	ldw	r4,-40(fp)
    be5c:	0140f7c4 	movi	r5,991
    be60:	01800044 	movi	r6,1
    be64:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_BANDGAP_CONFIG0, MASTER_BIAS_TRIM(0x0E)); /* Enable Master Bias */
    be68:	e13ff617 	ldw	r4,-40(fp)
    be6c:	0140a984 	movi	r5,678
    be70:	01800384 	movi	r6,14
    be74:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_BANDGAP_CONFIG1, BANDGAP_TEMP_TRIM(0x0E)); /* Set Bandgap Trim */
    be78:	e13ff617 	ldw	r4,-40(fp)
    be7c:	0140aa04 	movi	r5,680
    be80:	01800384 	movi	r6,14
    be84:	00002600 	call	260 <ad9361_spi_write>

	ad9361_set_dcxo_tune(phy, pd->dcxo_coarse, pd->dcxo_fine);
    be88:	e0bff717 	ldw	r2,-36(fp)
    be8c:	10c00617 	ldw	r3,24(r2)
    be90:	e0bff717 	ldw	r2,-36(fp)
    be94:	10800717 	ldw	r2,28(r2)
    be98:	e13ffe17 	ldw	r4,-8(fp)
    be9c:	180b883a 	mov	r5,r3
    bea0:	100d883a 	mov	r6,r2
    bea4:	000686c0 	call	686c <ad9361_set_dcxo_tune>

	refin_Hz = phy->clk_refin->rate;
    bea8:	e0bffe17 	ldw	r2,-8(fp)
    beac:	10800217 	ldw	r2,8(r2)
    beb0:	10800117 	ldw	r2,4(r2)
    beb4:	e0bffa15 	stw	r2,-24(fp)

	ref_freq = ad9361_ref_div_sel(refin_Hz, MAX_BBPLL_FREF);
    beb8:	e13ffa17 	ldw	r4,-24(fp)
    bebc:	01410b34 	movhi	r5,1068
    bec0:	29476004 	addi	r5,r5,7552
    bec4:	000bc880 	call	bc88 <ad9361_ref_div_sel>
    bec8:	e0bffb15 	stw	r2,-20(fp)
	if (!ref_freq)
    becc:	e0bffb17 	ldw	r2,-20(fp)
    bed0:	1000021e 	bne	r2,zero,bedc <ad9361_setup+0x1b0>
		return -EINVAL;
    bed4:	00bffa84 	movi	r2,-22
    bed8:	0002d506 	br	ca30 <ad9361_setup+0xd04>

	ad9361_spi_writef(spi, REG_REF_DIVIDE_CONFIG_1, RX_REF_RESET_BAR, 1);
    bedc:	01000084 	movi	r4,2
    bee0:	001c8300 	call	1c830 <find_first_bit>
    bee4:	1007883a 	mov	r3,r2
    bee8:	00800044 	movi	r2,1
    beec:	d8800015 	stw	r2,0(sp)
    bef0:	e13ff617 	ldw	r4,-40(fp)
    bef4:	0140aac4 	movi	r5,683
    bef8:	01800084 	movi	r6,2
    befc:	180f883a 	mov	r7,r3
    bf00:	000031c0 	call	31c <__ad9361_spi_writef>
	ad9361_spi_writef(spi, REG_REF_DIVIDE_CONFIG_2, TX_REF_RESET_BAR, 1);
    bf04:	01000404 	movi	r4,16
    bf08:	001c8300 	call	1c830 <find_first_bit>
    bf0c:	1007883a 	mov	r3,r2
    bf10:	00800044 	movi	r2,1
    bf14:	d8800015 	stw	r2,0(sp)
    bf18:	e13ff617 	ldw	r4,-40(fp)
    bf1c:	0140ab04 	movi	r5,684
    bf20:	01800404 	movi	r6,16
    bf24:	180f883a 	mov	r7,r3
    bf28:	000031c0 	call	31c <__ad9361_spi_writef>
	ad9361_spi_writef(spi, REG_REF_DIVIDE_CONFIG_2,
    bf2c:	010000c4 	movi	r4,3
    bf30:	001c8300 	call	1c830 <find_first_bit>
    bf34:	1007883a 	mov	r3,r2
    bf38:	008000c4 	movi	r2,3
    bf3c:	d8800015 	stw	r2,0(sp)
    bf40:	e13ff617 	ldw	r4,-40(fp)
    bf44:	0140ab04 	movi	r5,684
    bf48:	018000c4 	movi	r6,3
    bf4c:	180f883a 	mov	r7,r3
    bf50:	000031c0 	call	31c <__ad9361_spi_writef>
		TX_REF_DOUBLER_FB_DELAY(~0), 3); /* FB DELAY */
	ad9361_spi_writef(spi, REG_REF_DIVIDE_CONFIG_2,
    bf54:	01001804 	movi	r4,96
    bf58:	001c8300 	call	1c830 <find_first_bit>
    bf5c:	1007883a 	mov	r3,r2
    bf60:	008000c4 	movi	r2,3
    bf64:	d8800015 	stw	r2,0(sp)
    bf68:	e13ff617 	ldw	r4,-40(fp)
    bf6c:	0140ab04 	movi	r5,684
    bf70:	01801804 	movi	r6,96
    bf74:	180f883a 	mov	r7,r3
    bf78:	000031c0 	call	31c <__ad9361_spi_writef>
		RX_REF_DOUBLER_FB_DELAY(~0), 3); /* FB DELAY */

	ad9361_spi_write(spi, REG_CLOCK_ENABLE,
		DIGITAL_POWER_UP | CLOCK_ENABLE_DFLT | BBPLL_ENABLE |
		(pd->use_extclk ? XO_BYPASS : 0)); /* Enable Clocks */
    bf7c:	e0bff717 	ldw	r2,-36(fp)
    bf80:	10800103 	ldbu	r2,4(r2)
	ad9361_spi_writef(spi, REG_REF_DIVIDE_CONFIG_2,
		TX_REF_DOUBLER_FB_DELAY(~0), 3); /* FB DELAY */
	ad9361_spi_writef(spi, REG_REF_DIVIDE_CONFIG_2,
		RX_REF_DOUBLER_FB_DELAY(~0), 3); /* FB DELAY */

	ad9361_spi_write(spi, REG_CLOCK_ENABLE,
    bf84:	10803fcc 	andi	r2,r2,255
    bf88:	10000226 	beq	r2,zero,bf94 <ad9361_setup+0x268>
    bf8c:	008005c4 	movi	r2,23
    bf90:	00000106 	br	bf98 <ad9361_setup+0x26c>
    bf94:	008001c4 	movi	r2,7
    bf98:	e13ff617 	ldw	r4,-40(fp)
    bf9c:	01400244 	movi	r5,9
    bfa0:	100d883a 	mov	r6,r2
    bfa4:	00002600 	call	260 <ad9361_spi_write>
		DIGITAL_POWER_UP | CLOCK_ENABLE_DFLT | BBPLL_ENABLE |
		(pd->use_extclk ? XO_BYPASS : 0)); /* Enable Clocks */

	ret = clk_set_rate(phy, phy->ref_clk_scale[BB_REFCLK], ref_freq);
    bfa8:	e0bffe17 	ldw	r2,-8(fp)
    bfac:	10801717 	ldw	r2,92(r2)
    bfb0:	e13ffe17 	ldw	r4,-8(fp)
    bfb4:	100b883a 	mov	r5,r2
    bfb8:	e1bffb17 	ldw	r6,-20(fp)
    bfbc:	001be380 	call	1be38 <clk_set_rate>
    bfc0:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0) {
    bfc4:	e0bffc17 	ldw	r2,-16(fp)
    bfc8:	1000090e 	bge	r2,zero,bff0 <ad9361_setup+0x2c4>
		dev_err(dev, "Failed to set BB ref clock rate (%"PRId32")",
    bfcc:	010000b4 	movhi	r4,2
    bfd0:	211cc804 	addi	r4,r4,29472
    bfd4:	e17ffc17 	ldw	r5,-16(fp)
    bfd8:	001f8180 	call	1f818 <printf>
    bfdc:	010000b4 	movhi	r4,2
    bfe0:	211a7504 	addi	r4,r4,27092
    bfe4:	001f8180 	call	1f818 <printf>
			ret);
		return ret;
    bfe8:	e0bffc17 	ldw	r2,-16(fp)
    bfec:	00029006 	br	ca30 <ad9361_setup+0xd04>
	}

	ret = ad9361_set_trx_clock_chain(phy, pd->rx_path_clks,
    bff0:	e0bff717 	ldw	r2,-36(fp)
    bff4:	10c00c04 	addi	r3,r2,48
		pd->tx_path_clks);
    bff8:	e0bff717 	ldw	r2,-36(fp)
    bffc:	10801204 	addi	r2,r2,72
		dev_err(dev, "Failed to set BB ref clock rate (%"PRId32")",
			ret);
		return ret;
	}

	ret = ad9361_set_trx_clock_chain(phy, pd->rx_path_clks,
    c000:	e13ffe17 	ldw	r4,-8(fp)
    c004:	180b883a 	mov	r5,r3
    c008:	100d883a 	mov	r6,r2
    c00c:	00099d80 	call	99d8 <ad9361_set_trx_clock_chain>
    c010:	e0bffc15 	stw	r2,-16(fp)
		pd->tx_path_clks);
	if (ret < 0)
    c014:	e0bffc17 	ldw	r2,-16(fp)
    c018:	1000020e 	bge	r2,zero,c024 <ad9361_setup+0x2f8>
		return ret;
    c01c:	e0bffc17 	ldw	r2,-16(fp)
    c020:	00028306 	br	ca30 <ad9361_setup+0xd04>

	ret = clk_prepare_enable(phy->clks[BB_REFCLK]);
    c024:	e0bffe17 	ldw	r2,-8(fp)
    c028:	10800317 	ldw	r2,12(r2)
    c02c:	1009883a 	mov	r4,r2
    c030:	001bc640 	call	1bc64 <clk_prepare_enable>
    c034:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0) {
    c038:	e0bffc17 	ldw	r2,-16(fp)
    c03c:	1000090e 	bge	r2,zero,c064 <ad9361_setup+0x338>
		dev_err(dev, "Failed to enable BB ref clock rate (%"PRId32")",
    c040:	010000b4 	movhi	r4,2
    c044:	211d2604 	addi	r4,r4,29848
    c048:	e17ffc17 	ldw	r5,-16(fp)
    c04c:	001f8180 	call	1f818 <printf>
    c050:	010000b4 	movhi	r4,2
    c054:	211a7504 	addi	r4,r4,27092
    c058:	001f8180 	call	1f818 <printf>
			ret);
		return ret;
    c05c:	e0bffc17 	ldw	r2,-16(fp)
    c060:	00027306 	br	ca30 <ad9361_setup+0xd04>
	}

	if (!pd->rx2tx2) {
    c064:	e0bff717 	ldw	r2,-36(fp)
    c068:	10800003 	ldbu	r2,0(r2)
    c06c:	1080005c 	xori	r2,r2,1
    c070:	10803fcc 	andi	r2,r2,255
    c074:	10002726 	beq	r2,zero,c114 <ad9361_setup+0x3e8>
		pd->rx1tx1_mode_use_tx_num =
			clamp_t(uint32_t, pd->rx1tx1_mode_use_tx_num, TX_1, TX_2);
    c078:	e0bff717 	ldw	r2,-36(fp)
    c07c:	10800b17 	ldw	r2,44(r2)
    c080:	108000b0 	cmpltui	r2,r2,2
    c084:	1000061e 	bne	r2,zero,c0a0 <ad9361_setup+0x374>
    c088:	e0bff717 	ldw	r2,-36(fp)
    c08c:	10800b17 	ldw	r2,44(r2)
    c090:	10c000f0 	cmpltui	r3,r2,3
    c094:	1800031e 	bne	r3,zero,c0a4 <ad9361_setup+0x378>
    c098:	00800084 	movi	r2,2
    c09c:	00000106 	br	c0a4 <ad9361_setup+0x378>
    c0a0:	00800044 	movi	r2,1
			ret);
		return ret;
	}

	if (!pd->rx2tx2) {
		pd->rx1tx1_mode_use_tx_num =
    c0a4:	e0fff717 	ldw	r3,-36(fp)
    c0a8:	18800b15 	stw	r2,44(r3)
			clamp_t(uint32_t, pd->rx1tx1_mode_use_tx_num, TX_1, TX_2);
		pd->rx1tx1_mode_use_rx_num =
			clamp_t(uint32_t, pd->rx1tx1_mode_use_rx_num, RX_1, RX_2);
    c0ac:	e0bff717 	ldw	r2,-36(fp)
    c0b0:	10800a17 	ldw	r2,40(r2)
    c0b4:	108000b0 	cmpltui	r2,r2,2
    c0b8:	1000061e 	bne	r2,zero,c0d4 <ad9361_setup+0x3a8>
    c0bc:	e0bff717 	ldw	r2,-36(fp)
    c0c0:	10800a17 	ldw	r2,40(r2)
    c0c4:	10c000f0 	cmpltui	r3,r2,3
    c0c8:	1800031e 	bne	r3,zero,c0d8 <ad9361_setup+0x3ac>
    c0cc:	00800084 	movi	r2,2
    c0d0:	00000106 	br	c0d8 <ad9361_setup+0x3ac>
    c0d4:	00800044 	movi	r2,1
	}

	if (!pd->rx2tx2) {
		pd->rx1tx1_mode_use_tx_num =
			clamp_t(uint32_t, pd->rx1tx1_mode_use_tx_num, TX_1, TX_2);
		pd->rx1tx1_mode_use_rx_num =
    c0d8:	e0fff717 	ldw	r3,-36(fp)
    c0dc:	18800a15 	stw	r2,40(r3)
			clamp_t(uint32_t, pd->rx1tx1_mode_use_rx_num, RX_1, RX_2);

		ad9361_en_dis_tx(phy, TX_1 | TX_2, pd->rx1tx1_mode_use_tx_num);
    c0e0:	e0bff717 	ldw	r2,-36(fp)
    c0e4:	10800b17 	ldw	r2,44(r2)
    c0e8:	e13ffe17 	ldw	r4,-8(fp)
    c0ec:	014000c4 	movi	r5,3
    c0f0:	100d883a 	mov	r6,r2
    c0f4:	00007a00 	call	7a0 <ad9361_en_dis_tx>
		ad9361_en_dis_rx(phy, TX_1 | TX_2, pd->rx1tx1_mode_use_rx_num);
    c0f8:	e0bff717 	ldw	r2,-36(fp)
    c0fc:	10800a17 	ldw	r2,40(r2)
    c100:	e13ffe17 	ldw	r4,-8(fp)
    c104:	014000c4 	movi	r5,3
    c108:	100d883a 	mov	r6,r2
    c10c:	00008300 	call	830 <ad9361_en_dis_rx>
    c110:	00000806 	br	c134 <ad9361_setup+0x408>
	} else {
		ad9361_en_dis_tx(phy, TX_1 | TX_2, TX_1 | TX_2);
    c114:	e13ffe17 	ldw	r4,-8(fp)
    c118:	014000c4 	movi	r5,3
    c11c:	018000c4 	movi	r6,3
    c120:	00007a00 	call	7a0 <ad9361_en_dis_tx>
		ad9361_en_dis_rx(phy, RX_1 | RX_2, RX_1 | RX_2);
    c124:	e13ffe17 	ldw	r4,-8(fp)
    c128:	014000c4 	movi	r5,3
    c12c:	018000c4 	movi	r6,3
    c130:	00008300 	call	830 <ad9361_en_dis_rx>
	}

	ret = ad9361_rf_port_setup(phy, true, pd->rf_rx_input_sel,
    c134:	e0bff717 	ldw	r2,-36(fp)
    c138:	10c00817 	ldw	r3,32(r2)
    c13c:	e0bff717 	ldw	r2,-36(fp)
    c140:	10800917 	ldw	r2,36(r2)
    c144:	e13ffe17 	ldw	r4,-8(fp)
    c148:	01400044 	movi	r5,1
    c14c:	180d883a 	mov	r6,r3
    c150:	100f883a 	mov	r7,r2
    c154:	0006c100 	call	6c10 <ad9361_rf_port_setup>
    c158:	e0bffc15 	stw	r2,-16(fp)
				   pd->rf_tx_output_sel);
	if (ret < 0)
    c15c:	e0bffc17 	ldw	r2,-16(fp)
    c160:	1000020e 	bge	r2,zero,c16c <ad9361_setup+0x440>
		return ret;
    c164:	e0bffc17 	ldw	r2,-16(fp)
    c168:	00023106 	br	ca30 <ad9361_setup+0xd04>

	ret = ad9361_pp_port_setup(phy, false);
    c16c:	e13ffe17 	ldw	r4,-8(fp)
    c170:	000b883a 	mov	r5,zero
    c174:	0006d340 	call	6d34 <ad9361_pp_port_setup>
    c178:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    c17c:	e0bffc17 	ldw	r2,-16(fp)
    c180:	1000020e 	bge	r2,zero,c18c <ad9361_setup+0x460>
		return ret;
    c184:	e0bffc17 	ldw	r2,-16(fp)
    c188:	00022906 	br	ca30 <ad9361_setup+0xd04>

	ret = ad9361_auxdac_setup(phy, &pd->auxdac_ctrl);
    c18c:	e0bff717 	ldw	r2,-36(fp)
    c190:	10804f04 	addi	r2,r2,316
    c194:	e13ffe17 	ldw	r4,-8(fp)
    c198:	100b883a 	mov	r5,r2
    c19c:	00085440 	call	8544 <ad9361_auxdac_setup>
    c1a0:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    c1a4:	e0bffc17 	ldw	r2,-16(fp)
    c1a8:	1000020e 	bge	r2,zero,c1b4 <ad9361_setup+0x488>
		return ret;
    c1ac:	e0bffc17 	ldw	r2,-16(fp)
    c1b0:	00021f06 	br	ca30 <ad9361_setup+0xd04>

	bbpll_freq = clk_get_rate(phy, phy->ref_clk_scale[BBPLL_CLK]);
    c1b4:	e0bffe17 	ldw	r2,-8(fp)
    c1b8:	10801a17 	ldw	r2,104(r2)
    c1bc:	e13ffe17 	ldw	r4,-8(fp)
    c1c0:	100b883a 	mov	r5,r2
    c1c4:	001bc900 	call	1bc90 <clk_get_rate>
    c1c8:	e0bffd15 	stw	r2,-12(fp)
	ret = ad9361_auxadc_setup(phy, &pd->auxadc_ctrl, bbpll_freq);
    c1cc:	e0bff717 	ldw	r2,-36(fp)
    c1d0:	10804904 	addi	r2,r2,292
    c1d4:	e13ffe17 	ldw	r4,-8(fp)
    c1d8:	100b883a 	mov	r5,r2
    c1dc:	e1bffd17 	ldw	r6,-12(fp)
    c1e0:	00087400 	call	8740 <ad9361_auxadc_setup>
    c1e4:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    c1e8:	e0bffc17 	ldw	r2,-16(fp)
    c1ec:	1000020e 	bge	r2,zero,c1f8 <ad9361_setup+0x4cc>
		return ret;
    c1f0:	e0bffc17 	ldw	r2,-16(fp)
    c1f4:	00020e06 	br	ca30 <ad9361_setup+0xd04>

	ret = ad9361_ctrl_outs_setup(phy, &pd->ctrl_outs_ctrl);
    c1f8:	e0bff717 	ldw	r2,-36(fp)
    c1fc:	10804544 	addi	r2,r2,277
    c200:	e13ffe17 	ldw	r4,-8(fp)
    c204:	100b883a 	mov	r5,r2
    c208:	0008a4c0 	call	8a4c <ad9361_ctrl_outs_setup>
    c20c:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    c210:	e0bffc17 	ldw	r2,-16(fp)
    c214:	1000020e 	bge	r2,zero,c220 <ad9361_setup+0x4f4>
		return ret;
    c218:	e0bffc17 	ldw	r2,-16(fp)
    c21c:	00020406 	br	ca30 <ad9361_setup+0xd04>

	ret = ad9361_gpo_setup(phy, &pd->gpo_ctrl);
    c220:	e0bff717 	ldw	r2,-36(fp)
    c224:	10805304 	addi	r2,r2,332
    c228:	e13ffe17 	ldw	r4,-8(fp)
    c22c:	100b883a 	mov	r5,r2
    c230:	0008ae40 	call	8ae4 <ad9361_gpo_setup>
    c234:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    c238:	e0bffc17 	ldw	r2,-16(fp)
    c23c:	1000020e 	bge	r2,zero,c248 <ad9361_setup+0x51c>
		return ret;
    c240:	e0bffc17 	ldw	r2,-16(fp)
    c244:	0001fa06 	br	ca30 <ad9361_setup+0xd04>

	ret = ad9361_set_ref_clk_cycles(phy, refin_Hz);
    c248:	e13ffe17 	ldw	r4,-8(fp)
    c24c:	e17ffa17 	ldw	r5,-24(fp)
    c250:	00067d80 	call	67d8 <ad9361_set_ref_clk_cycles>
    c254:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    c258:	e0bffc17 	ldw	r2,-16(fp)
    c25c:	1000020e 	bge	r2,zero,c268 <ad9361_setup+0x53c>
		return ret;
    c260:	e0bffc17 	ldw	r2,-16(fp)
    c264:	0001f206 	br	ca30 <ad9361_setup+0xd04>

	ret = ad9361_setup_ext_lna(phy, &pd->elna_ctrl);
    c268:	e0bff717 	ldw	r2,-36(fp)
    c26c:	10804604 	addi	r2,r2,280
    c270:	e13ffe17 	ldw	r4,-8(fp)
    c274:	100b883a 	mov	r5,r2
    c278:	00014600 	call	1460 <ad9361_setup_ext_lna>
    c27c:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    c280:	e0bffc17 	ldw	r2,-16(fp)
    c284:	1000020e 	bge	r2,zero,c290 <ad9361_setup+0x564>
		return ret;
    c288:	e0bffc17 	ldw	r2,-16(fp)
    c28c:	0001e806 	br	ca30 <ad9361_setup+0xd04>

	/*
	 * This allows forcing a lower F_REF window
	 * (worse phase noise, better fractional spurs)
	 */
	pd->trx_synth_max_fref = clamp_t(uint32_t, pd->trx_synth_max_fref,
    c290:	e0bff717 	ldw	r2,-36(fp)
    c294:	10c01817 	ldw	r3,96(r2)
    c298:	00802674 	movhi	r2,153
    c29c:	10a5a004 	addi	r2,r2,-27008
    c2a0:	10c0082e 	bgeu	r2,r3,c2c4 <ad9361_setup+0x598>
    c2a4:	e0bff717 	ldw	r2,-36(fp)
    c2a8:	10801817 	ldw	r2,96(r2)
    c2ac:	00c13174 	movhi	r3,1221
    c2b0:	18ed0004 	addi	r3,r3,-19456
    c2b4:	1880052e 	bgeu	r3,r2,c2cc <ad9361_setup+0x5a0>
    c2b8:	00813174 	movhi	r2,1221
    c2bc:	10ad0004 	addi	r2,r2,-19456
    c2c0:	00000206 	br	c2cc <ad9361_setup+0x5a0>
    c2c4:	00802674 	movhi	r2,153
    c2c8:	10a5a004 	addi	r2,r2,-27008
    c2cc:	e0fff717 	ldw	r3,-36(fp)
    c2d0:	18801815 	stw	r2,96(r3)
					 MIN_SYNTH_FREF, MAX_SYNTH_FREF);

	ref_freq = ad9361_ref_div_sel(refin_Hz, pd->trx_synth_max_fref);
    c2d4:	e0bff717 	ldw	r2,-36(fp)
    c2d8:	10801817 	ldw	r2,96(r2)
    c2dc:	e13ffa17 	ldw	r4,-24(fp)
    c2e0:	100b883a 	mov	r5,r2
    c2e4:	000bc880 	call	bc88 <ad9361_ref_div_sel>
    c2e8:	e0bffb15 	stw	r2,-20(fp)
	if (!ref_freq)
    c2ec:	e0bffb17 	ldw	r2,-20(fp)
    c2f0:	1000021e 	bne	r2,zero,c2fc <ad9361_setup+0x5d0>
		return -EINVAL;
    c2f4:	00bffa84 	movi	r2,-22
    c2f8:	0001cd06 	br	ca30 <ad9361_setup+0xd04>

	ret = clk_set_rate(phy, phy->ref_clk_scale[RX_REFCLK], ref_freq);
    c2fc:	e0bffe17 	ldw	r2,-8(fp)
    c300:	10801817 	ldw	r2,96(r2)
    c304:	e13ffe17 	ldw	r4,-8(fp)
    c308:	100b883a 	mov	r5,r2
    c30c:	e1bffb17 	ldw	r6,-20(fp)
    c310:	001be380 	call	1be38 <clk_set_rate>
    c314:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0) {
    c318:	e0bffc17 	ldw	r2,-16(fp)
    c31c:	1000090e 	bge	r2,zero,c344 <ad9361_setup+0x618>
		dev_err(dev, "Failed to set RX Synth ref clock rate (%"PRId32")", ret);
    c320:	010000b4 	movhi	r4,2
    c324:	211d3104 	addi	r4,r4,29892
    c328:	e17ffc17 	ldw	r5,-16(fp)
    c32c:	001f8180 	call	1f818 <printf>
    c330:	010000b4 	movhi	r4,2
    c334:	211a7504 	addi	r4,r4,27092
    c338:	001f8180 	call	1f818 <printf>
		return ret;
    c33c:	e0bffc17 	ldw	r2,-16(fp)
    c340:	0001bb06 	br	ca30 <ad9361_setup+0xd04>
	}

	ret = clk_set_rate(phy, phy->ref_clk_scale[TX_REFCLK], ref_freq);
    c344:	e0bffe17 	ldw	r2,-8(fp)
    c348:	10801917 	ldw	r2,100(r2)
    c34c:	e13ffe17 	ldw	r4,-8(fp)
    c350:	100b883a 	mov	r5,r2
    c354:	e1bffb17 	ldw	r6,-20(fp)
    c358:	001be380 	call	1be38 <clk_set_rate>
    c35c:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0) {
    c360:	e0bffc17 	ldw	r2,-16(fp)
    c364:	1000090e 	bge	r2,zero,c38c <ad9361_setup+0x660>
		dev_err(dev, "Failed to set TX Synth ref clock rate (%"PRId32")", ret);
    c368:	010000b4 	movhi	r4,2
    c36c:	211d3c04 	addi	r4,r4,29936
    c370:	e17ffc17 	ldw	r5,-16(fp)
    c374:	001f8180 	call	1f818 <printf>
    c378:	010000b4 	movhi	r4,2
    c37c:	211a7504 	addi	r4,r4,27092
    c380:	001f8180 	call	1f818 <printf>
		return ret;
    c384:	e0bffc17 	ldw	r2,-16(fp)
    c388:	0001a906 	br	ca30 <ad9361_setup+0xd04>
	}

	ret = ad9361_txrx_synth_cp_calib(phy, ref_freq, false); /* RXCP */
    c38c:	e13ffe17 	ldw	r4,-8(fp)
    c390:	e17ffb17 	ldw	r5,-20(fp)
    c394:	000d883a 	mov	r6,zero
    c398:	00050a00 	call	50a0 <ad9361_txrx_synth_cp_calib>
    c39c:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    c3a0:	e0bffc17 	ldw	r2,-16(fp)
    c3a4:	1000020e 	bge	r2,zero,c3b0 <ad9361_setup+0x684>
		return ret;
    c3a8:	e0bffc17 	ldw	r2,-16(fp)
    c3ac:	0001a006 	br	ca30 <ad9361_setup+0xd04>

	ret = ad9361_txrx_synth_cp_calib(phy, ref_freq, true); /* TXCP */
    c3b0:	e13ffe17 	ldw	r4,-8(fp)
    c3b4:	e17ffb17 	ldw	r5,-20(fp)
    c3b8:	01800044 	movi	r6,1
    c3bc:	00050a00 	call	50a0 <ad9361_txrx_synth_cp_calib>
    c3c0:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    c3c4:	e0bffc17 	ldw	r2,-16(fp)
    c3c8:	1000020e 	bge	r2,zero,c3d4 <ad9361_setup+0x6a8>
		return ret;
    c3cc:	e0bffc17 	ldw	r2,-16(fp)
    c3d0:	00019706 	br	ca30 <ad9361_setup+0xd04>

	ret = clk_set_rate(phy, phy->ref_clk_scale[RX_RFPLL], ad9361_to_clk(pd->rx_synth_freq));
    c3d4:	e0bffe17 	ldw	r2,-8(fp)
    c3d8:	14002917 	ldw	r16,164(r2)
    c3dc:	e13ff717 	ldw	r4,-36(fp)
    c3e0:	20801917 	ldw	r2,100(r4)
    c3e4:	20c01a17 	ldw	r3,104(r4)
    c3e8:	1009883a 	mov	r4,r2
    c3ec:	180b883a 	mov	r5,r3
    c3f0:	00010a80 	call	10a8 <ad9361_to_clk>
    c3f4:	e13ffe17 	ldw	r4,-8(fp)
    c3f8:	800b883a 	mov	r5,r16
    c3fc:	100d883a 	mov	r6,r2
    c400:	001be380 	call	1be38 <clk_set_rate>
    c404:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0) {
    c408:	e0bffc17 	ldw	r2,-16(fp)
    c40c:	1000090e 	bge	r2,zero,c434 <ad9361_setup+0x708>
		dev_err(dev, "Failed to set RX Synth rate (%"PRId32")",
    c410:	010000b4 	movhi	r4,2
    c414:	211d4704 	addi	r4,r4,29980
    c418:	e17ffc17 	ldw	r5,-16(fp)
    c41c:	001f8180 	call	1f818 <printf>
    c420:	010000b4 	movhi	r4,2
    c424:	211a7504 	addi	r4,r4,27092
    c428:	001f8180 	call	1f818 <printf>
			ret);
		return ret;
    c42c:	e0bffc17 	ldw	r2,-16(fp)
    c430:	00017f06 	br	ca30 <ad9361_setup+0xd04>
	}

	ret = clk_prepare_enable(phy->clks[RX_REFCLK]);
    c434:	e0bffe17 	ldw	r2,-8(fp)
    c438:	10800417 	ldw	r2,16(r2)
    c43c:	1009883a 	mov	r4,r2
    c440:	001bc640 	call	1bc64 <clk_prepare_enable>
    c444:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0) {
    c448:	e0bffc17 	ldw	r2,-16(fp)
    c44c:	1000090e 	bge	r2,zero,c474 <ad9361_setup+0x748>
		dev_err(dev, "Failed to enable RX Synth ref clock (%"PRId32")", ret);
    c450:	010000b4 	movhi	r4,2
    c454:	211d5004 	addi	r4,r4,30016
    c458:	e17ffc17 	ldw	r5,-16(fp)
    c45c:	001f8180 	call	1f818 <printf>
    c460:	010000b4 	movhi	r4,2
    c464:	211a7504 	addi	r4,r4,27092
    c468:	001f8180 	call	1f818 <printf>
		return ret;
    c46c:	e0bffc17 	ldw	r2,-16(fp)
    c470:	00016f06 	br	ca30 <ad9361_setup+0xd04>
	}

	ret = clk_prepare_enable(phy->clks[RX_RFPLL]);
    c474:	e0bffe17 	ldw	r2,-8(fp)
    c478:	10801517 	ldw	r2,84(r2)
    c47c:	1009883a 	mov	r4,r2
    c480:	001bc640 	call	1bc64 <clk_prepare_enable>
    c484:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    c488:	e0bffc17 	ldw	r2,-16(fp)
    c48c:	1000020e 	bge	r2,zero,c498 <ad9361_setup+0x76c>
		return ret;
    c490:	e0bffc17 	ldw	r2,-16(fp)
    c494:	00016606 	br	ca30 <ad9361_setup+0xd04>

	/* Skip quad cal here we do it later again */
	phy->last_tx_quad_cal_freq = pd->tx_synth_freq;
    c498:	e13ff717 	ldw	r4,-36(fp)
    c49c:	20801b17 	ldw	r2,108(r4)
    c4a0:	20c01c17 	ldw	r3,112(r4)
    c4a4:	e13ffe17 	ldw	r4,-8(fp)
    c4a8:	20804615 	stw	r2,280(r4)
    c4ac:	20c04715 	stw	r3,284(r4)
	ret = clk_set_rate(phy, phy->ref_clk_scale[TX_RFPLL], ad9361_to_clk(pd->tx_synth_freq));
    c4b0:	e0bffe17 	ldw	r2,-8(fp)
    c4b4:	14002a17 	ldw	r16,168(r2)
    c4b8:	e13ff717 	ldw	r4,-36(fp)
    c4bc:	20801b17 	ldw	r2,108(r4)
    c4c0:	20c01c17 	ldw	r3,112(r4)
    c4c4:	1009883a 	mov	r4,r2
    c4c8:	180b883a 	mov	r5,r3
    c4cc:	00010a80 	call	10a8 <ad9361_to_clk>
    c4d0:	e13ffe17 	ldw	r4,-8(fp)
    c4d4:	800b883a 	mov	r5,r16
    c4d8:	100d883a 	mov	r6,r2
    c4dc:	001be380 	call	1be38 <clk_set_rate>
    c4e0:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0) {
    c4e4:	e0bffc17 	ldw	r2,-16(fp)
    c4e8:	1000090e 	bge	r2,zero,c510 <ad9361_setup+0x7e4>
		dev_err(dev, "Failed to set TX Synth rate (%"PRId32")",
    c4ec:	010000b4 	movhi	r4,2
    c4f0:	211d5b04 	addi	r4,r4,30060
    c4f4:	e17ffc17 	ldw	r5,-16(fp)
    c4f8:	001f8180 	call	1f818 <printf>
    c4fc:	010000b4 	movhi	r4,2
    c500:	211a7504 	addi	r4,r4,27092
    c504:	001f8180 	call	1f818 <printf>
			ret);
		return ret;
    c508:	e0bffc17 	ldw	r2,-16(fp)
    c50c:	00014806 	br	ca30 <ad9361_setup+0xd04>
	}

	ret = clk_prepare_enable(phy->clks[TX_REFCLK]);
    c510:	e0bffe17 	ldw	r2,-8(fp)
    c514:	10800517 	ldw	r2,20(r2)
    c518:	1009883a 	mov	r4,r2
    c51c:	001bc640 	call	1bc64 <clk_prepare_enable>
    c520:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0) {
    c524:	e0bffc17 	ldw	r2,-16(fp)
    c528:	1000090e 	bge	r2,zero,c550 <ad9361_setup+0x824>
		dev_err(dev, "Failed to enable TX Synth ref clock (%"PRId32")", ret);
    c52c:	010000b4 	movhi	r4,2
    c530:	211d6404 	addi	r4,r4,30096
    c534:	e17ffc17 	ldw	r5,-16(fp)
    c538:	001f8180 	call	1f818 <printf>
    c53c:	010000b4 	movhi	r4,2
    c540:	211a7504 	addi	r4,r4,27092
    c544:	001f8180 	call	1f818 <printf>
		return ret;
    c548:	e0bffc17 	ldw	r2,-16(fp)
    c54c:	00013806 	br	ca30 <ad9361_setup+0xd04>
	}

	ret = clk_prepare_enable(phy->clks[TX_RFPLL]);
    c550:	e0bffe17 	ldw	r2,-8(fp)
    c554:	10801617 	ldw	r2,88(r2)
    c558:	1009883a 	mov	r4,r2
    c55c:	001bc640 	call	1bc64 <clk_prepare_enable>
    c560:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    c564:	e0bffc17 	ldw	r2,-16(fp)
    c568:	1000020e 	bge	r2,zero,c574 <ad9361_setup+0x848>
		return ret;
    c56c:	e0bffc17 	ldw	r2,-16(fp)
    c570:	00012f06 	br	ca30 <ad9361_setup+0xd04>

	ad9361_clk_mux_set_parent(phy->ref_clk_scale[RX_RFPLL],
    c574:	e0bffe17 	ldw	r2,-8(fp)
    c578:	10c02917 	ldw	r3,164(r2)
		pd->use_ext_rx_lo);
    c57c:	e0bff717 	ldw	r2,-36(fp)
    c580:	108002c3 	ldbu	r2,11(r2)

	ret = clk_prepare_enable(phy->clks[TX_RFPLL]);
	if (ret < 0)
		return ret;

	ad9361_clk_mux_set_parent(phy->ref_clk_scale[RX_RFPLL],
    c584:	10803fcc 	andi	r2,r2,255
    c588:	1809883a 	mov	r4,r3
    c58c:	100b883a 	mov	r5,r2
    c590:	00100380 	call	10038 <ad9361_clk_mux_set_parent>
		pd->use_ext_rx_lo);

	ad9361_clk_mux_set_parent(phy->ref_clk_scale[TX_RFPLL],
    c594:	e0bffe17 	ldw	r2,-8(fp)
    c598:	10c02a17 	ldw	r3,168(r2)
		pd->use_ext_tx_lo);
    c59c:	e0bff717 	ldw	r2,-36(fp)
    c5a0:	10800303 	ldbu	r2,12(r2)
		return ret;

	ad9361_clk_mux_set_parent(phy->ref_clk_scale[RX_RFPLL],
		pd->use_ext_rx_lo);

	ad9361_clk_mux_set_parent(phy->ref_clk_scale[TX_RFPLL],
    c5a4:	10803fcc 	andi	r2,r2,255
    c5a8:	1809883a 	mov	r4,r3
    c5ac:	100b883a 	mov	r5,r2
    c5b0:	00100380 	call	10038 <ad9361_clk_mux_set_parent>
		pd->use_ext_tx_lo);

	ret = ad9361_load_mixer_gm_subtable(phy);
    c5b4:	e13ffe17 	ldw	r4,-8(fp)
    c5b8:	00016280 	call	1628 <ad9361_load_mixer_gm_subtable>
    c5bc:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    c5c0:	e0bffc17 	ldw	r2,-16(fp)
    c5c4:	1000020e 	bge	r2,zero,c5d0 <ad9361_setup+0x8a4>
		return ret;
    c5c8:	e0bffc17 	ldw	r2,-16(fp)
    c5cc:	00011806 	br	ca30 <ad9361_setup+0xd04>

	ret = ad9361_gc_setup(phy, &pd->gain_ctrl);
    c5d0:	e0bff717 	ldw	r2,-36(fp)
    c5d4:	10802504 	addi	r2,r2,148
    c5d8:	e13ffe17 	ldw	r4,-8(fp)
    c5dc:	100b883a 	mov	r5,r2
    c5e0:	0006f7c0 	call	6f7c <ad9361_gc_setup>
    c5e4:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    c5e8:	e0bffc17 	ldw	r2,-16(fp)
    c5ec:	1000020e 	bge	r2,zero,c5f8 <ad9361_setup+0x8cc>
		return ret;
    c5f0:	e0bffc17 	ldw	r2,-16(fp)
    c5f4:	00010e06 	br	ca30 <ad9361_setup+0xd04>

	ret = ad9361_rx_bb_analog_filter_calib(phy,
    c5f8:	e13ffe17 	ldw	r4,-8(fp)
    c5fc:	e17ff817 	ldw	r5,-32(fp)
    c600:	e1bffd17 	ldw	r6,-12(fp)
    c604:	00049900 	call	4990 <ad9361_rx_bb_analog_filter_calib>
    c608:	e0bffc15 	stw	r2,-16(fp)
		real_rx_bandwidth,
		bbpll_freq);
	if (ret < 0)
    c60c:	e0bffc17 	ldw	r2,-16(fp)
    c610:	1000020e 	bge	r2,zero,c61c <ad9361_setup+0x8f0>
		return ret;
    c614:	e0bffc17 	ldw	r2,-16(fp)
    c618:	00010506 	br	ca30 <ad9361_setup+0xd04>

	ret = ad9361_tx_bb_analog_filter_calib(phy,
    c61c:	e13ffe17 	ldw	r4,-8(fp)
    c620:	e17ff917 	ldw	r5,-28(fp)
    c624:	e1bffd17 	ldw	r6,-12(fp)
    c628:	0004c1c0 	call	4c1c <ad9361_tx_bb_analog_filter_calib>
    c62c:	e0bffc15 	stw	r2,-16(fp)
		real_tx_bandwidth,
		bbpll_freq);
	if (ret < 0)
    c630:	e0bffc17 	ldw	r2,-16(fp)
    c634:	1000020e 	bge	r2,zero,c640 <ad9361_setup+0x914>
		return ret;
    c638:	e0bffc17 	ldw	r2,-16(fp)
    c63c:	0000fc06 	br	ca30 <ad9361_setup+0xd04>

	ret = ad9361_rx_tia_calib(phy, real_rx_bandwidth);
    c640:	e13ffe17 	ldw	r4,-8(fp)
    c644:	e17ff817 	ldw	r5,-32(fp)
    c648:	00046a00 	call	46a0 <ad9361_rx_tia_calib>
    c64c:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    c650:	e0bffc17 	ldw	r2,-16(fp)
    c654:	1000020e 	bge	r2,zero,c660 <ad9361_setup+0x934>
		return ret;
    c658:	e0bffc17 	ldw	r2,-16(fp)
    c65c:	0000f406 	br	ca30 <ad9361_setup+0xd04>

	ret = ad9361_tx_bb_second_filter_calib(phy, real_tx_bandwidth);
    c660:	e13ffe17 	ldw	r4,-8(fp)
    c664:	e17ff917 	ldw	r5,-28(fp)
    c668:	0004d9c0 	call	4d9c <ad9361_tx_bb_second_filter_calib>
    c66c:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    c670:	e0bffc17 	ldw	r2,-16(fp)
    c674:	1000020e 	bge	r2,zero,c680 <ad9361_setup+0x954>
		return ret;
    c678:	e0bffc17 	ldw	r2,-16(fp)
    c67c:	0000ec06 	br	ca30 <ad9361_setup+0xd04>

	ret = ad9361_rx_adc_setup(phy,
    c680:	e0bffe17 	ldw	r2,-8(fp)
    c684:	10801b17 	ldw	r2,108(r2)
    c688:	e13ffe17 	ldw	r4,-8(fp)
    c68c:	100b883a 	mov	r5,r2
    c690:	001bc900 	call	1bc90 <clk_get_rate>
    c694:	e13ffe17 	ldw	r4,-8(fp)
    c698:	e17ffd17 	ldw	r5,-12(fp)
    c69c:	100d883a 	mov	r6,r2
    c6a0:	00038140 	call	3814 <ad9361_rx_adc_setup>
    c6a4:	e0bffc15 	stw	r2,-16(fp)
		bbpll_freq,
		clk_get_rate(phy, phy->ref_clk_scale[ADC_CLK]));
	if (ret < 0)
    c6a8:	e0bffc17 	ldw	r2,-16(fp)
    c6ac:	1000020e 	bge	r2,zero,c6b8 <ad9361_setup+0x98c>
		return ret;
    c6b0:	e0bffc17 	ldw	r2,-16(fp)
    c6b4:	0000de06 	br	ca30 <ad9361_setup+0xd04>

	ret = ad9361_bb_dc_offset_calib(phy);
    c6b8:	e13ffe17 	ldw	r4,-8(fp)
    c6bc:	00053440 	call	5344 <ad9361_bb_dc_offset_calib>
    c6c0:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    c6c4:	e0bffc17 	ldw	r2,-16(fp)
    c6c8:	1000020e 	bge	r2,zero,c6d4 <ad9361_setup+0x9a8>
		return ret;
    c6cc:	e0bffc17 	ldw	r2,-16(fp)
    c6d0:	0000d706 	br	ca30 <ad9361_setup+0xd04>

	ret = ad9361_rf_dc_offset_calib(phy,
    c6d4:	e0bffe17 	ldw	r2,-8(fp)
    c6d8:	10802917 	ldw	r2,164(r2)
    c6dc:	e13ffe17 	ldw	r4,-8(fp)
    c6e0:	100b883a 	mov	r5,r2
    c6e4:	001bc900 	call	1bc90 <clk_get_rate>
    c6e8:	1009883a 	mov	r4,r2
    c6ec:	00010f00 	call	10f0 <ad9361_from_clk>
    c6f0:	100d883a 	mov	r6,r2
    c6f4:	180f883a 	mov	r7,r3
    c6f8:	e13ffe17 	ldw	r4,-8(fp)
    c6fc:	300b883a 	mov	r5,r6
    c700:	380d883a 	mov	r6,r7
    c704:	00053e80 	call	53e8 <ad9361_rf_dc_offset_calib>
    c708:	e0bffc15 	stw	r2,-16(fp)
		ad9361_from_clk(clk_get_rate(phy, phy->ref_clk_scale[RX_RFPLL])));
	if (ret < 0)
    c70c:	e0bffc17 	ldw	r2,-16(fp)
    c710:	1000020e 	bge	r2,zero,c71c <ad9361_setup+0x9f0>
		return ret;
    c714:	e0bffc17 	ldw	r2,-16(fp)
    c718:	0000c506 	br	ca30 <ad9361_setup+0xd04>

	phy->current_rx_bw_Hz = pd->rf_rx_bandwidth_Hz;
    c71c:	e0bff717 	ldw	r2,-36(fp)
    c720:	10c01d17 	ldw	r3,116(r2)
    c724:	e0bffe17 	ldw	r2,-8(fp)
    c728:	10c04b15 	stw	r3,300(r2)
	phy->current_tx_bw_Hz = pd->rf_tx_bandwidth_Hz;
    c72c:	e0bff717 	ldw	r2,-36(fp)
    c730:	10c01e17 	ldw	r3,120(r2)
    c734:	e0bffe17 	ldw	r2,-8(fp)
    c738:	10c04c15 	stw	r3,304(r2)
	phy->last_tx_quad_cal_phase = ~0;
    c73c:	e0bffe17 	ldw	r2,-8(fp)
    c740:	00ffffc4 	movi	r3,-1
    c744:	10c04815 	stw	r3,288(r2)
	ret = ad9361_tx_quad_calib(phy, real_rx_bandwidth, real_tx_bandwidth, -1);
    c748:	e13ffe17 	ldw	r4,-8(fp)
    c74c:	e17ff817 	ldw	r5,-32(fp)
    c750:	e1bff917 	ldw	r6,-28(fp)
    c754:	01ffffc4 	movi	r7,-1
    c758:	00059a00 	call	59a0 <ad9361_tx_quad_calib>
    c75c:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    c760:	e0bffc17 	ldw	r2,-16(fp)
    c764:	1000020e 	bge	r2,zero,c770 <ad9361_setup+0xa44>
		return ret;
    c768:	e0bffc17 	ldw	r2,-16(fp)
    c76c:	0000b006 	br	ca30 <ad9361_setup+0xd04>

	ret = ad9361_tracking_control(phy, phy->bbdc_track_en,
    c770:	e0bffe17 	ldw	r2,-8(fp)
    c774:	10805fc3 	ldbu	r2,383(r2)
    c778:	11403fcc 	andi	r5,r2,255
		phy->rfdc_track_en, phy->quad_track_en);
    c77c:	e0bffe17 	ldw	r2,-8(fp)
    c780:	10805f83 	ldbu	r2,382(r2)
	phy->last_tx_quad_cal_phase = ~0;
	ret = ad9361_tx_quad_calib(phy, real_rx_bandwidth, real_tx_bandwidth, -1);
	if (ret < 0)
		return ret;

	ret = ad9361_tracking_control(phy, phy->bbdc_track_en,
    c784:	10c03fcc 	andi	r3,r2,255
		phy->rfdc_track_en, phy->quad_track_en);
    c788:	e0bffe17 	ldw	r2,-8(fp)
    c78c:	10806003 	ldbu	r2,384(r2)
	phy->last_tx_quad_cal_phase = ~0;
	ret = ad9361_tx_quad_calib(phy, real_rx_bandwidth, real_tx_bandwidth, -1);
	if (ret < 0)
		return ret;

	ret = ad9361_tracking_control(phy, phy->bbdc_track_en,
    c790:	10803fcc 	andi	r2,r2,255
    c794:	e13ffe17 	ldw	r4,-8(fp)
    c798:	180d883a 	mov	r6,r3
    c79c:	100f883a 	mov	r7,r2
    c7a0:	00061d80 	call	61d8 <ad9361_tracking_control>
    c7a4:	e0bffc15 	stw	r2,-16(fp)
		phy->rfdc_track_en, phy->quad_track_en);
	if (ret < 0)
    c7a8:	e0bffc17 	ldw	r2,-16(fp)
    c7ac:	1000020e 	bge	r2,zero,c7b8 <ad9361_setup+0xa8c>
		return ret;
    c7b0:	e0bffc17 	ldw	r2,-16(fp)
    c7b4:	00009e06 	br	ca30 <ad9361_setup+0xd04>

	if (!pd->fdd)
    c7b8:	e0bff717 	ldw	r2,-36(fp)
    c7bc:	10800043 	ldbu	r2,1(r2)
    c7c0:	1080005c 	xori	r2,r2,1
    c7c4:	10803fcc 	andi	r2,r2,255
    c7c8:	10000326 	beq	r2,zero,c7d8 <ad9361_setup+0xaac>
		ad9361_run_calibration(phy, TXMON_CAL);
    c7cc:	e13ffe17 	ldw	r4,-8(fp)
    c7d0:	01400104 	movi	r5,4
    c7d4:	0000f900 	call	f90 <ad9361_run_calibration>

	ad9361_pp_port_setup(phy, true);
    c7d8:	e13ffe17 	ldw	r4,-8(fp)
    c7dc:	01400044 	movi	r5,1
    c7e0:	0006d340 	call	6d34 <ad9361_pp_port_setup>

	ret = ad9361_set_ensm_mode(phy, pd->fdd, pd->ensm_pin_ctrl);
    c7e4:	e0bff717 	ldw	r2,-36(fp)
    c7e8:	10800043 	ldbu	r2,1(r2)
    c7ec:	10c03fcc 	andi	r3,r2,255
    c7f0:	e0bff717 	ldw	r2,-36(fp)
    c7f4:	10800183 	ldbu	r2,6(r2)
    c7f8:	10803fcc 	andi	r2,r2,255
    c7fc:	e13ffe17 	ldw	r4,-8(fp)
    c800:	180b883a 	mov	r5,r3
    c804:	100d883a 	mov	r6,r2
    c808:	000a71c0 	call	a71c <ad9361_set_ensm_mode>
    c80c:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    c810:	e0bffc17 	ldw	r2,-16(fp)
    c814:	1000020e 	bge	r2,zero,c820 <ad9361_setup+0xaf4>
		return ret;
    c818:	e0bffc17 	ldw	r2,-16(fp)
    c81c:	00008406 	br	ca30 <ad9361_setup+0xd04>

	ad9361_spi_writef(phy->spi, REG_TX_ATTEN_OFFSET,
    c820:	e0bffe17 	ldw	r2,-8(fp)
    c824:	14000117 	ldw	r16,4(r2)
    c828:	01001004 	movi	r4,64
    c82c:	001c8300 	call	1c830 <find_first_bit>
    c830:	d8000015 	stw	zero,0(sp)
    c834:	8009883a 	mov	r4,r16
    c838:	01401dc4 	movi	r5,119
    c83c:	01801004 	movi	r6,64
    c840:	100f883a 	mov	r7,r2
    c844:	000031c0 	call	31c <__ad9361_spi_writef>
		MASK_CLR_ATTEN_UPDATE, 0);

	ret = ad9361_set_tx_atten(phy, pd->tx_atten,
    c848:	e0bff717 	ldw	r2,-36(fp)
    c84c:	10801f17 	ldw	r2,124(r2)
    c850:	100b883a 	mov	r5,r2
			pd->rx2tx2 ? true : pd->rx1tx1_mode_use_tx_num == 1,
    c854:	e0bff717 	ldw	r2,-36(fp)
    c858:	10800003 	ldbu	r2,0(r2)
		return ret;

	ad9361_spi_writef(phy->spi, REG_TX_ATTEN_OFFSET,
		MASK_CLR_ATTEN_UPDATE, 0);

	ret = ad9361_set_tx_atten(phy, pd->tx_atten,
    c85c:	10803fcc 	andi	r2,r2,255
    c860:	10000226 	beq	r2,zero,c86c <ad9361_setup+0xb40>
    c864:	00c00044 	movi	r3,1
    c868:	00000406 	br	c87c <ad9361_setup+0xb50>
			pd->rx2tx2 ? true : pd->rx1tx1_mode_use_tx_num == 1,
    c86c:	e0bff717 	ldw	r2,-36(fp)
    c870:	10800b17 	ldw	r2,44(r2)
    c874:	10800060 	cmpeqi	r2,r2,1
		return ret;

	ad9361_spi_writef(phy->spi, REG_TX_ATTEN_OFFSET,
		MASK_CLR_ATTEN_UPDATE, 0);

	ret = ad9361_set_tx_atten(phy, pd->tx_atten,
    c878:	10c03fcc 	andi	r3,r2,255
			pd->rx2tx2 ? true : pd->rx1tx1_mode_use_tx_num == 1,
			pd->rx2tx2 ? true : pd->rx1tx1_mode_use_tx_num == 2, true);
    c87c:	e0bff717 	ldw	r2,-36(fp)
    c880:	10800003 	ldbu	r2,0(r2)
		return ret;

	ad9361_spi_writef(phy->spi, REG_TX_ATTEN_OFFSET,
		MASK_CLR_ATTEN_UPDATE, 0);

	ret = ad9361_set_tx_atten(phy, pd->tx_atten,
    c884:	10803fcc 	andi	r2,r2,255
    c888:	10000226 	beq	r2,zero,c894 <ad9361_setup+0xb68>
    c88c:	00800044 	movi	r2,1
    c890:	00000406 	br	c8a4 <ad9361_setup+0xb78>
			pd->rx2tx2 ? true : pd->rx1tx1_mode_use_tx_num == 1,
			pd->rx2tx2 ? true : pd->rx1tx1_mode_use_tx_num == 2, true);
    c894:	e0bff717 	ldw	r2,-36(fp)
    c898:	10800b17 	ldw	r2,44(r2)
    c89c:	108000a0 	cmpeqi	r2,r2,2
		return ret;

	ad9361_spi_writef(phy->spi, REG_TX_ATTEN_OFFSET,
		MASK_CLR_ATTEN_UPDATE, 0);

	ret = ad9361_set_tx_atten(phy, pd->tx_atten,
    c8a0:	10803fcc 	andi	r2,r2,255
    c8a4:	01000044 	movi	r4,1
    c8a8:	d9000015 	stw	r4,0(sp)
    c8ac:	e13ffe17 	ldw	r4,-8(fp)
    c8b0:	180d883a 	mov	r6,r3
    c8b4:	100f883a 	mov	r7,r2
    c8b8:	00017fc0 	call	17fc <ad9361_set_tx_atten>
    c8bc:	e0bffc15 	stw	r2,-16(fp)
			pd->rx2tx2 ? true : pd->rx1tx1_mode_use_tx_num == 1,
			pd->rx2tx2 ? true : pd->rx1tx1_mode_use_tx_num == 2, true);
	if (ret < 0)
    c8c0:	e0bffc17 	ldw	r2,-16(fp)
    c8c4:	1000020e 	bge	r2,zero,c8d0 <ad9361_setup+0xba4>
		return ret;
    c8c8:	e0bffc17 	ldw	r2,-16(fp)
    c8cc:	00005806 	br	ca30 <ad9361_setup+0xd04>

	if (!pd->rx2tx2) {
    c8d0:	e0bff717 	ldw	r2,-36(fp)
    c8d4:	10800003 	ldbu	r2,0(r2)
    c8d8:	1080005c 	xori	r2,r2,1
    c8dc:	10803fcc 	andi	r2,r2,255
    c8e0:	10001426 	beq	r2,zero,c934 <ad9361_setup+0xc08>
		ret = ad9361_set_tx_atten(phy, 89750,
				pd->rx1tx1_mode_use_tx_num == 2,
    c8e4:	e0bff717 	ldw	r2,-36(fp)
    c8e8:	10800b17 	ldw	r2,44(r2)
			pd->rx2tx2 ? true : pd->rx1tx1_mode_use_tx_num == 2, true);
	if (ret < 0)
		return ret;

	if (!pd->rx2tx2) {
		ret = ad9361_set_tx_atten(phy, 89750,
    c8ec:	108000a0 	cmpeqi	r2,r2,2
    c8f0:	11803fcc 	andi	r6,r2,255
				pd->rx1tx1_mode_use_tx_num == 2,
				pd->rx1tx1_mode_use_tx_num == 1, true);
    c8f4:	e0bff717 	ldw	r2,-36(fp)
    c8f8:	10800b17 	ldw	r2,44(r2)
			pd->rx2tx2 ? true : pd->rx1tx1_mode_use_tx_num == 2, true);
	if (ret < 0)
		return ret;

	if (!pd->rx2tx2) {
		ret = ad9361_set_tx_atten(phy, 89750,
    c8fc:	10800060 	cmpeqi	r2,r2,1
    c900:	10c03fcc 	andi	r3,r2,255
    c904:	00800044 	movi	r2,1
    c908:	d8800015 	stw	r2,0(sp)
    c90c:	e13ffe17 	ldw	r4,-8(fp)
    c910:	01400074 	movhi	r5,1
    c914:	2957a584 	addi	r5,r5,24214
    c918:	180f883a 	mov	r7,r3
    c91c:	00017fc0 	call	17fc <ad9361_set_tx_atten>
    c920:	e0bffc15 	stw	r2,-16(fp)
				pd->rx1tx1_mode_use_tx_num == 2,
				pd->rx1tx1_mode_use_tx_num == 1, true);
		if (ret < 0)
    c924:	e0bffc17 	ldw	r2,-16(fp)
    c928:	1000020e 	bge	r2,zero,c934 <ad9361_setup+0xc08>
			return ret;
    c92c:	e0bffc17 	ldw	r2,-16(fp)
    c930:	00003f06 	br	ca30 <ad9361_setup+0xd04>
	}

	ret = ad9361_rssi_setup(phy, &pd->rssi_ctrl, false);
    c934:	e0bff717 	ldw	r2,-36(fp)
    c938:	10803e04 	addi	r2,r2,248
    c93c:	e13ffe17 	ldw	r4,-8(fp)
    c940:	100b883a 	mov	r5,r2
    c944:	000d883a 	mov	r6,zero
    c948:	0008d400 	call	8d40 <ad9361_rssi_setup>
    c94c:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    c950:	e0bffc17 	ldw	r2,-16(fp)
    c954:	1000020e 	bge	r2,zero,c960 <ad9361_setup+0xc34>
		return ret;
    c958:	e0bffc17 	ldw	r2,-16(fp)
    c95c:	00003406 	br	ca30 <ad9361_setup+0xd04>

	ret = ad9361_clkout_control(phy, pd->ad9361_clkout_mode);
    c960:	e0bff717 	ldw	r2,-36(fp)
    c964:	10802417 	ldw	r2,144(r2)
    c968:	e13ffe17 	ldw	r4,-8(fp)
    c96c:	100b883a 	mov	r5,r2
    c970:	000157c0 	call	157c <ad9361_clkout_control>
    c974:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    c978:	e0bffc17 	ldw	r2,-16(fp)
    c97c:	1000020e 	bge	r2,zero,c988 <ad9361_setup+0xc5c>
		return ret;
    c980:	e0bffc17 	ldw	r2,-16(fp)
    c984:	00002a06 	br	ca30 <ad9361_setup+0xd04>


	ret = ad9361_txmon_setup(phy, &pd->txmon_ctrl);
    c988:	e0bff717 	ldw	r2,-36(fp)
    c98c:	10805804 	addi	r2,r2,352
    c990:	e13ffe17 	ldw	r4,-8(fp)
    c994:	100b883a 	mov	r5,r2
    c998:	00069300 	call	6930 <ad9361_txmon_setup>
    c99c:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    c9a0:	e0bffc17 	ldw	r2,-16(fp)
    c9a4:	1000020e 	bge	r2,zero,c9b0 <ad9361_setup+0xc84>
		return ret;
    c9a8:	e0bffc17 	ldw	r2,-16(fp)
    c9ac:	00002006 	br	ca30 <ad9361_setup+0xd04>

	phy->curr_ensm_state = ad9361_spi_readf(spi, REG_STATE, ENSM_STATE(~0));
    c9b0:	010003c4 	movi	r4,15
    c9b4:	001c8300 	call	1c830 <find_first_bit>
    c9b8:	e13ff617 	ldw	r4,-40(fp)
    c9bc:	014005c4 	movi	r5,23
    c9c0:	018003c4 	movi	r6,15
    c9c4:	100f883a 	mov	r7,r2
    c9c8:	00001b80 	call	1b8 <__ad9361_spi_readf>
    c9cc:	1007883a 	mov	r3,r2
    c9d0:	e0bffe17 	ldw	r2,-8(fp)
    c9d4:	10c03145 	stb	r3,197(r2)
	ad9361_ensm_set_state(phy, pd->fdd ? ENSM_STATE_FDD : ENSM_STATE_RX,
    c9d8:	e0bff717 	ldw	r2,-36(fp)
    c9dc:	10800043 	ldbu	r2,1(r2)
    c9e0:	10803fcc 	andi	r2,r2,255
    c9e4:	10000226 	beq	r2,zero,c9f0 <ad9361_setup+0xcc4>
    c9e8:	00800284 	movi	r2,10
    c9ec:	00000106 	br	c9f4 <ad9361_setup+0xcc8>
    c9f0:	00800204 	movi	r2,8
		pd->ensm_pin_ctrl);
    c9f4:	e0fff717 	ldw	r3,-36(fp)
    c9f8:	18c00183 	ldbu	r3,6(r3)
	ret = ad9361_txmon_setup(phy, &pd->txmon_ctrl);
	if (ret < 0)
		return ret;

	phy->curr_ensm_state = ad9361_spi_readf(spi, REG_STATE, ENSM_STATE(~0));
	ad9361_ensm_set_state(phy, pd->fdd ? ENSM_STATE_FDD : ENSM_STATE_RX,
    c9fc:	18c03fcc 	andi	r3,r3,255
    ca00:	e13ffe17 	ldw	r4,-8(fp)
    ca04:	100b883a 	mov	r5,r2
    ca08:	180d883a 	mov	r6,r3
    ca0c:	00092d40 	call	92d4 <ad9361_ensm_set_state>
		pd->ensm_pin_ctrl);

	phy->auto_cal_en = true;
    ca10:	e0bffe17 	ldw	r2,-8(fp)
    ca14:	00c00044 	movi	r3,1
    ca18:	10c04545 	stb	r3,277(r2)
	phy->cal_threshold_freq = 100000000ULL; /* 100 MHz */
    ca1c:	e0fffe17 	ldw	r3,-8(fp)
    ca20:	00817db4 	movhi	r2,1526
    ca24:	10b84004 	addi	r2,r2,-7936
    ca28:	18804a15 	stw	r2,296(r3)

	return 0;
    ca2c:	0005883a 	mov	r2,zero

}
    ca30:	e6ffff04 	addi	sp,fp,-4
    ca34:	dfc00217 	ldw	ra,8(sp)
    ca38:	df000117 	ldw	fp,4(sp)
    ca3c:	dc000017 	ldw	r16,0(sp)
    ca40:	dec00304 	addi	sp,sp,12
    ca44:	f800283a 	ret

0000ca48 <ad9361_do_calib_run>:
 * @param cal The selected calibration.
 * @param arg The argument of the calibration.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_do_calib_run(struct ad9361_rf_phy *phy, uint32_t cal, int32_t arg)
{
    ca48:	defffa04 	addi	sp,sp,-24
    ca4c:	de00012e 	bgeu	sp,et,ca54 <ad9361_do_calib_run+0xc>
    ca50:	003b68fa 	trap	3
    ca54:	dfc00515 	stw	ra,20(sp)
    ca58:	df000415 	stw	fp,16(sp)
    ca5c:	df000404 	addi	fp,sp,16
    ca60:	e13ffd15 	stw	r4,-12(fp)
    ca64:	e17ffe15 	stw	r5,-8(fp)
    ca68:	e1bfff15 	stw	r6,-4(fp)
	int32_t ret;

	dev_dbg(&phy->spi->dev, "%s: CAL %"PRIu32" ARG %"PRId32, __func__, cal, arg);
    ca6c:	010000b4 	movhi	r4,2
    ca70:	211d6f04 	addi	r4,r4,30140
    ca74:	014000b4 	movhi	r5,2
    ca78:	295f8604 	addi	r5,r5,32280
    ca7c:	e1bffe17 	ldw	r6,-8(fp)
    ca80:	e1ffff17 	ldw	r7,-4(fp)
    ca84:	001f8180 	call	1f818 <printf>
    ca88:	010000b4 	movhi	r4,2
    ca8c:	211a7504 	addi	r4,r4,27092
    ca90:	001f8180 	call	1f818 <printf>

	ret = ad9361_tracking_control(phy, false, false, false);
    ca94:	e13ffd17 	ldw	r4,-12(fp)
    ca98:	000b883a 	mov	r5,zero
    ca9c:	000d883a 	mov	r6,zero
    caa0:	000f883a 	mov	r7,zero
    caa4:	00061d80 	call	61d8 <ad9361_tracking_control>
    caa8:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    caac:	e0bffc17 	ldw	r2,-16(fp)
    cab0:	1000020e 	bge	r2,zero,cabc <ad9361_do_calib_run+0x74>
		return ret;
    cab4:	e0bffc17 	ldw	r2,-16(fp)
    cab8:	00003806 	br	cb9c <ad9361_do_calib_run+0x154>

	ad9361_ensm_force_state(phy, ENSM_STATE_ALERT);
    cabc:	e13ffd17 	ldw	r4,-12(fp)
    cac0:	01400144 	movi	r5,5
    cac4:	00024740 	call	2474 <ad9361_ensm_force_state>

	switch (cal) {
    cac8:	e0bffe17 	ldw	r2,-8(fp)
    cacc:	10c000a0 	cmpeqi	r3,r2,2
    cad0:	18000f1e 	bne	r3,zero,cb10 <ad9361_do_calib_run+0xc8>
    cad4:	10800420 	cmpeqi	r2,r2,16
    cad8:	10001c26 	beq	r2,zero,cb4c <ad9361_do_calib_run+0x104>
	case TX_QUAD_CAL:
		ret = ad9361_tx_quad_calib(phy, phy->current_rx_bw_Hz / 2,
    cadc:	e0bffd17 	ldw	r2,-12(fp)
    cae0:	10804b17 	ldw	r2,300(r2)
    cae4:	1006d07a 	srli	r3,r2,1
					   phy->current_tx_bw_Hz / 2, arg);
    cae8:	e0bffd17 	ldw	r2,-12(fp)
    caec:	10804c17 	ldw	r2,304(r2)

	ad9361_ensm_force_state(phy, ENSM_STATE_ALERT);

	switch (cal) {
	case TX_QUAD_CAL:
		ret = ad9361_tx_quad_calib(phy, phy->current_rx_bw_Hz / 2,
    caf0:	1004d07a 	srli	r2,r2,1
    caf4:	e13ffd17 	ldw	r4,-12(fp)
    caf8:	180b883a 	mov	r5,r3
    cafc:	100d883a 	mov	r6,r2
    cb00:	e1ffff17 	ldw	r7,-4(fp)
    cb04:	00059a00 	call	59a0 <ad9361_tx_quad_calib>
    cb08:	e0bffc15 	stw	r2,-16(fp)
					   phy->current_tx_bw_Hz / 2, arg);
		break;
    cb0c:	00001206 	br	cb58 <ad9361_do_calib_run+0x110>
	case RFDC_CAL:
		ret = ad9361_rf_dc_offset_calib(phy,
    cb10:	e0bffd17 	ldw	r2,-12(fp)
    cb14:	10802917 	ldw	r2,164(r2)
    cb18:	e13ffd17 	ldw	r4,-12(fp)
    cb1c:	100b883a 	mov	r5,r2
    cb20:	001bc900 	call	1bc90 <clk_get_rate>
    cb24:	1009883a 	mov	r4,r2
    cb28:	00010f00 	call	10f0 <ad9361_from_clk>
    cb2c:	100d883a 	mov	r6,r2
    cb30:	180f883a 	mov	r7,r3
    cb34:	e13ffd17 	ldw	r4,-12(fp)
    cb38:	300b883a 	mov	r5,r6
    cb3c:	380d883a 	mov	r6,r7
    cb40:	00053e80 	call	53e8 <ad9361_rf_dc_offset_calib>
    cb44:	e0bffc15 	stw	r2,-16(fp)
			ad9361_from_clk(clk_get_rate(phy, phy->ref_clk_scale[RX_RFPLL])));
		break;
    cb48:	00000306 	br	cb58 <ad9361_do_calib_run+0x110>
	default:
		ret = -EINVAL;
    cb4c:	00bffa84 	movi	r2,-22
    cb50:	e0bffc15 	stw	r2,-16(fp)
		break;
    cb54:	0001883a 	nop
	}

	ret = ad9361_tracking_control(phy, phy->bbdc_track_en,
    cb58:	e0bffd17 	ldw	r2,-12(fp)
    cb5c:	10805fc3 	ldbu	r2,383(r2)
    cb60:	11403fcc 	andi	r5,r2,255
		phy->rfdc_track_en, phy->quad_track_en);
    cb64:	e0bffd17 	ldw	r2,-12(fp)
    cb68:	10805f83 	ldbu	r2,382(r2)
	default:
		ret = -EINVAL;
		break;
	}

	ret = ad9361_tracking_control(phy, phy->bbdc_track_en,
    cb6c:	10c03fcc 	andi	r3,r2,255
		phy->rfdc_track_en, phy->quad_track_en);
    cb70:	e0bffd17 	ldw	r2,-12(fp)
    cb74:	10806003 	ldbu	r2,384(r2)
	default:
		ret = -EINVAL;
		break;
	}

	ret = ad9361_tracking_control(phy, phy->bbdc_track_en,
    cb78:	10803fcc 	andi	r2,r2,255
    cb7c:	e13ffd17 	ldw	r4,-12(fp)
    cb80:	180d883a 	mov	r6,r3
    cb84:	100f883a 	mov	r7,r2
    cb88:	00061d80 	call	61d8 <ad9361_tracking_control>
    cb8c:	e0bffc15 	stw	r2,-16(fp)
		phy->rfdc_track_en, phy->quad_track_en);
	ad9361_ensm_restore_prev_state(phy);
    cb90:	e13ffd17 	ldw	r4,-12(fp)
    cb94:	00026740 	call	2674 <ad9361_ensm_restore_prev_state>

	return ret;
    cb98:	e0bffc17 	ldw	r2,-16(fp)
}
    cb9c:	e037883a 	mov	sp,fp
    cba0:	dfc00117 	ldw	ra,4(sp)
    cba4:	df000017 	ldw	fp,0(sp)
    cba8:	dec00204 	addi	sp,sp,8
    cbac:	f800283a 	ret

0000cbb0 <ad9361_update_rf_bandwidth>:
 * @param rf_tx_bw The desired TX bandwidth [Hz].
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_update_rf_bandwidth(struct ad9361_rf_phy *phy,
	uint32_t rf_rx_bw, uint32_t rf_tx_bw)
{
    cbb0:	defffa04 	addi	sp,sp,-24
    cbb4:	de00012e 	bgeu	sp,et,cbbc <ad9361_update_rf_bandwidth+0xc>
    cbb8:	003b68fa 	trap	3
    cbbc:	dfc00515 	stw	ra,20(sp)
    cbc0:	df000415 	stw	fp,16(sp)
    cbc4:	df000404 	addi	fp,sp,16
    cbc8:	e13ffd15 	stw	r4,-12(fp)
    cbcc:	e17ffe15 	stw	r5,-8(fp)
    cbd0:	e1bfff15 	stw	r6,-4(fp)
	int32_t ret;

	ret = ad9361_tracking_control(phy, false, false, false);
    cbd4:	e13ffd17 	ldw	r4,-12(fp)
    cbd8:	000b883a 	mov	r5,zero
    cbdc:	000d883a 	mov	r6,zero
    cbe0:	000f883a 	mov	r7,zero
    cbe4:	00061d80 	call	61d8 <ad9361_tracking_control>
    cbe8:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    cbec:	e0bffc17 	ldw	r2,-16(fp)
    cbf0:	1000020e 	bge	r2,zero,cbfc <ad9361_update_rf_bandwidth+0x4c>
		return ret;
    cbf4:	e0bffc17 	ldw	r2,-16(fp)
    cbf8:	00003506 	br	ccd0 <ad9361_update_rf_bandwidth+0x120>

	ad9361_ensm_force_state(phy, ENSM_STATE_ALERT);
    cbfc:	e13ffd17 	ldw	r4,-12(fp)
    cc00:	01400144 	movi	r5,5
    cc04:	00024740 	call	2474 <ad9361_ensm_force_state>

	ret = __ad9361_update_rf_bandwidth(phy, rf_rx_bw, rf_tx_bw);
    cc08:	e13ffd17 	ldw	r4,-12(fp)
    cc0c:	e17ffe17 	ldw	r5,-8(fp)
    cc10:	e1bfff17 	ldw	r6,-4(fp)
    cc14:	000559c0 	call	559c <__ad9361_update_rf_bandwidth>
    cc18:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    cc1c:	e0bffc17 	ldw	r2,-16(fp)
    cc20:	1000020e 	bge	r2,zero,cc2c <ad9361_update_rf_bandwidth+0x7c>
		return ret;
    cc24:	e0bffc17 	ldw	r2,-16(fp)
    cc28:	00002906 	br	ccd0 <ad9361_update_rf_bandwidth+0x120>

	phy->current_rx_bw_Hz = rf_rx_bw;
    cc2c:	e0bffd17 	ldw	r2,-12(fp)
    cc30:	e0fffe17 	ldw	r3,-8(fp)
    cc34:	10c04b15 	stw	r3,300(r2)
	phy->current_tx_bw_Hz = rf_tx_bw;
    cc38:	e0bffd17 	ldw	r2,-12(fp)
    cc3c:	e0ffff17 	ldw	r3,-4(fp)
    cc40:	10c04c15 	stw	r3,304(r2)

	ret = ad9361_tx_quad_calib(phy, rf_rx_bw / 2, rf_tx_bw / 2, -1);
    cc44:	e0bffe17 	ldw	r2,-8(fp)
    cc48:	1006d07a 	srli	r3,r2,1
    cc4c:	e0bfff17 	ldw	r2,-4(fp)
    cc50:	1004d07a 	srli	r2,r2,1
    cc54:	e13ffd17 	ldw	r4,-12(fp)
    cc58:	180b883a 	mov	r5,r3
    cc5c:	100d883a 	mov	r6,r2
    cc60:	01ffffc4 	movi	r7,-1
    cc64:	00059a00 	call	59a0 <ad9361_tx_quad_calib>
    cc68:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    cc6c:	e0bffc17 	ldw	r2,-16(fp)
    cc70:	1000020e 	bge	r2,zero,cc7c <ad9361_update_rf_bandwidth+0xcc>
		return ret;
    cc74:	e0bffc17 	ldw	r2,-16(fp)
    cc78:	00001506 	br	ccd0 <ad9361_update_rf_bandwidth+0x120>

	ret = ad9361_tracking_control(phy, phy->bbdc_track_en,
    cc7c:	e0bffd17 	ldw	r2,-12(fp)
    cc80:	10805fc3 	ldbu	r2,383(r2)
    cc84:	11403fcc 	andi	r5,r2,255
		phy->rfdc_track_en, phy->quad_track_en);
    cc88:	e0bffd17 	ldw	r2,-12(fp)
    cc8c:	10805f83 	ldbu	r2,382(r2)

	ret = ad9361_tx_quad_calib(phy, rf_rx_bw / 2, rf_tx_bw / 2, -1);
	if (ret < 0)
		return ret;

	ret = ad9361_tracking_control(phy, phy->bbdc_track_en,
    cc90:	10c03fcc 	andi	r3,r2,255
		phy->rfdc_track_en, phy->quad_track_en);
    cc94:	e0bffd17 	ldw	r2,-12(fp)
    cc98:	10806003 	ldbu	r2,384(r2)

	ret = ad9361_tx_quad_calib(phy, rf_rx_bw / 2, rf_tx_bw / 2, -1);
	if (ret < 0)
		return ret;

	ret = ad9361_tracking_control(phy, phy->bbdc_track_en,
    cc9c:	10803fcc 	andi	r2,r2,255
    cca0:	e13ffd17 	ldw	r4,-12(fp)
    cca4:	180d883a 	mov	r6,r3
    cca8:	100f883a 	mov	r7,r2
    ccac:	00061d80 	call	61d8 <ad9361_tracking_control>
    ccb0:	e0bffc15 	stw	r2,-16(fp)
		phy->rfdc_track_en, phy->quad_track_en);
	if (ret < 0)
    ccb4:	e0bffc17 	ldw	r2,-16(fp)
    ccb8:	1000020e 	bge	r2,zero,ccc4 <ad9361_update_rf_bandwidth+0x114>
		return ret;
    ccbc:	e0bffc17 	ldw	r2,-16(fp)
    ccc0:	00000306 	br	ccd0 <ad9361_update_rf_bandwidth+0x120>

	ad9361_ensm_restore_prev_state(phy);
    ccc4:	e13ffd17 	ldw	r4,-12(fp)
    ccc8:	00026740 	call	2674 <ad9361_ensm_restore_prev_state>

	return 0;
    cccc:	0005883a 	mov	r2,zero
}
    ccd0:	e037883a 	mov	sp,fp
    ccd4:	dfc00117 	ldw	ra,4(sp)
    ccd8:	df000017 	ldw	fp,0(sp)
    ccdc:	dec00204 	addi	sp,sp,8
    cce0:	f800283a 	ret

0000cce4 <ad9361_verify_fir_filter_coef>:
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_verify_fir_filter_coef(struct ad9361_rf_phy *phy,
		enum fir_dest dest,
		uint32_t ntaps, short *coef)
{
    cce4:	deffee04 	addi	sp,sp,-72
    cce8:	de00012e 	bgeu	sp,et,ccf0 <ad9361_verify_fir_filter_coef+0xc>
    ccec:	003b68fa 	trap	3
    ccf0:	dfc01115 	stw	ra,68(sp)
    ccf4:	df001015 	stw	fp,64(sp)
    ccf8:	dc000f15 	stw	r16,60(sp)
    ccfc:	df001004 	addi	fp,sp,64
    cd00:	e13ffb15 	stw	r4,-20(fp)
    cd04:	e17ffc15 	stw	r5,-16(fp)
    cd08:	e1bffd15 	stw	r6,-12(fp)
    cd0c:	e1fffe15 	stw	r7,-8(fp)
	struct spi_device *spi = phy->spi;
    cd10:	e0bffb17 	ldw	r2,-20(fp)
    cd14:	10800117 	ldw	r2,4(r2)
    cd18:	e0bff815 	stw	r2,-32(fp)
	uint32_t val, offs = 0, gain = 0, conf, sel, cnt;
    cd1c:	e03ff315 	stw	zero,-52(fp)
    cd20:	e03ff415 	stw	zero,-48(fp)
	int32_t ret = 0;
    cd24:	e03ff715 	stw	zero,-36(fp)

#ifndef DEBUG
	return 0;
#endif
	dev_dbg(&phy->spi->dev, "%s: TAPS %"PRIu32", dest %d",
    cd28:	010000b4 	movhi	r4,2
    cd2c:	211d7404 	addi	r4,r4,30160
    cd30:	014000b4 	movhi	r5,2
    cd34:	295f8b04 	addi	r5,r5,32300
    cd38:	e1bffd17 	ldw	r6,-12(fp)
    cd3c:	e1fffc17 	ldw	r7,-16(fp)
    cd40:	001f8180 	call	1f818 <printf>
    cd44:	010000b4 	movhi	r4,2
    cd48:	211a7504 	addi	r4,r4,27092
    cd4c:	001f8180 	call	1f818 <printf>
		__func__, ntaps, dest);

	if (dest & FIR_IS_RX) {
    cd50:	e0bffc17 	ldw	r2,-16(fp)
    cd54:	1080200c 	andi	r2,r2,128
    cd58:	10000a26 	beq	r2,zero,cd84 <ad9361_verify_fir_filter_coef+0xa0>
		gain = ad9361_spi_read(spi, REG_RX_FILTER_GAIN);
    cd5c:	e13ff817 	ldw	r4,-32(fp)
    cd60:	01403d84 	movi	r5,246
    cd64:	00001500 	call	150 <ad9361_spi_read>
    cd68:	e0bff415 	stw	r2,-48(fp)
		offs = REG_RX_FILTER_COEF_ADDR - REG_TX_FILTER_COEF_ADDR;
    cd6c:	00802404 	movi	r2,144
    cd70:	e0bff315 	stw	r2,-52(fp)
		ad9361_spi_write(spi, REG_RX_FILTER_GAIN, 0);
    cd74:	e13ff817 	ldw	r4,-32(fp)
    cd78:	01403d84 	movi	r5,246
    cd7c:	000d883a 	mov	r6,zero
    cd80:	00002600 	call	260 <ad9361_spi_write>
	}

	conf = ad9361_spi_read(spi, REG_TX_FILTER_CONF + offs);
    cd84:	e0bff317 	ldw	r2,-52(fp)
    cd88:	10801944 	addi	r2,r2,101
    cd8c:	e13ff817 	ldw	r4,-32(fp)
    cd90:	100b883a 	mov	r5,r2
    cd94:	00001500 	call	150 <ad9361_spi_read>
    cd98:	e0bff915 	stw	r2,-28(fp)

	if ((dest & 3) == 3) {
    cd9c:	e0bffc17 	ldw	r2,-16(fp)
    cda0:	108000cc 	andi	r2,r2,3
    cda4:	108000d8 	cmpnei	r2,r2,3
    cda8:	1000051e 	bne	r2,zero,cdc0 <ad9361_verify_fir_filter_coef+0xdc>
		sel = 1;
    cdac:	00800044 	movi	r2,1
    cdb0:	e0bff515 	stw	r2,-44(fp)
		cnt = 2;
    cdb4:	00800084 	movi	r2,2
    cdb8:	e0bff615 	stw	r2,-40(fp)
    cdbc:	00000506 	br	cdd4 <ad9361_verify_fir_filter_coef+0xf0>
	} else {
		sel = (dest & 3);
    cdc0:	e0bffc17 	ldw	r2,-16(fp)
    cdc4:	108000cc 	andi	r2,r2,3
    cdc8:	e0bff515 	stw	r2,-44(fp)
		cnt = 1;
    cdcc:	00800044 	movi	r2,1
    cdd0:	e0bff615 	stw	r2,-40(fp)
	}

	for (; cnt > 0; cnt--, sel++) {
    cdd4:	00005c06 	br	cf48 <ad9361_verify_fir_filter_coef+0x264>

		ad9361_spi_write(spi, REG_TX_FILTER_CONF + offs,
    cdd8:	e0bff317 	ldw	r2,-52(fp)
    cddc:	11401944 	addi	r5,r2,101
				 FIR_NUM_TAPS(ntaps / 16 - 1) |
    cde0:	e0bffd17 	ldw	r2,-12(fp)
    cde4:	1004d13a 	srli	r2,r2,4
    cde8:	10bfffc4 	addi	r2,r2,-1
    cdec:	1004917a 	slli	r2,r2,5
    cdf0:	10c03fcc 	andi	r3,r2,255
				 FIR_SELECT(sel) | FIR_START_CLK);
    cdf4:	e0bff517 	ldw	r2,-44(fp)
    cdf8:	108000cc 	andi	r2,r2,3
    cdfc:	100490fa 	slli	r2,r2,3
	}

	for (; cnt > 0; cnt--, sel++) {

		ad9361_spi_write(spi, REG_TX_FILTER_CONF + offs,
				 FIR_NUM_TAPS(ntaps / 16 - 1) |
    ce00:	1884b03a 	or	r2,r3,r2
		cnt = 1;
	}

	for (; cnt > 0; cnt--, sel++) {

		ad9361_spi_write(spi, REG_TX_FILTER_CONF + offs,
    ce04:	10800094 	ori	r2,r2,2
    ce08:	e13ff817 	ldw	r4,-32(fp)
    ce0c:	100d883a 	mov	r6,r2
    ce10:	00002600 	call	260 <ad9361_spi_write>
				 FIR_NUM_TAPS(ntaps / 16 - 1) |
				 FIR_SELECT(sel) | FIR_START_CLK);
		for (val = 0; val < ntaps; val++) {
    ce14:	e03ff215 	stw	zero,-56(fp)
    ce18:	00004206 	br	cf24 <ad9361_verify_fir_filter_coef+0x240>
			short tmp;
			ad9361_spi_write(spi, REG_TX_FILTER_COEF_ADDR + offs, val);
    ce1c:	e0bff317 	ldw	r2,-52(fp)
    ce20:	10801804 	addi	r2,r2,96
    ce24:	e13ff817 	ldw	r4,-32(fp)
    ce28:	100b883a 	mov	r5,r2
    ce2c:	e1bff217 	ldw	r6,-56(fp)
    ce30:	00002600 	call	260 <ad9361_spi_write>

			tmp = (ad9361_spi_read(spi, REG_TX_FILTER_COEF_READ_DATA_1 + offs) & 0xFF) |
    ce34:	e0bff317 	ldw	r2,-52(fp)
    ce38:	108018c4 	addi	r2,r2,99
    ce3c:	e13ff817 	ldw	r4,-32(fp)
    ce40:	100b883a 	mov	r5,r2
    ce44:	00001500 	call	150 <ad9361_spi_read>
    ce48:	10803fcc 	andi	r2,r2,255
    ce4c:	1021883a 	mov	r16,r2
			(ad9361_spi_read(spi, REG_TX_FILTER_COEF_READ_DATA_2 + offs) << 8);
    ce50:	e0bff317 	ldw	r2,-52(fp)
    ce54:	10801904 	addi	r2,r2,100
    ce58:	e13ff817 	ldw	r4,-32(fp)
    ce5c:	100b883a 	mov	r5,r2
    ce60:	00001500 	call	150 <ad9361_spi_read>
    ce64:	1004923a 	slli	r2,r2,8
				 FIR_SELECT(sel) | FIR_START_CLK);
		for (val = 0; val < ntaps; val++) {
			short tmp;
			ad9361_spi_write(spi, REG_TX_FILTER_COEF_ADDR + offs, val);

			tmp = (ad9361_spi_read(spi, REG_TX_FILTER_COEF_READ_DATA_1 + offs) & 0xFF) |
    ce68:	8084b03a 	or	r2,r16,r2
    ce6c:	e0bffa0d 	sth	r2,-24(fp)
			(ad9361_spi_read(spi, REG_TX_FILTER_COEF_READ_DATA_2 + offs) << 8);

			if (tmp != coef[val]) {
    ce70:	e0bff217 	ldw	r2,-56(fp)
    ce74:	1085883a 	add	r2,r2,r2
    ce78:	1007883a 	mov	r3,r2
    ce7c:	e0bffe17 	ldw	r2,-8(fp)
    ce80:	10c5883a 	add	r2,r2,r3
    ce84:	1080000b 	ldhu	r2,0(r2)
    ce88:	10ffffcc 	andi	r3,r2,65535
    ce8c:	18e0001c 	xori	r3,r3,32768
    ce90:	18e00004 	addi	r3,r3,-32768
    ce94:	e0bffa0f 	ldh	r2,-24(fp)
    ce98:	18801f26 	beq	r3,r2,cf18 <ad9361_verify_fir_filter_coef+0x234>
				dev_err(&phy->spi->dev,"%s%"PRIu32" read verify failed TAP%"PRIu32" %d =! %d",
    ce9c:	e0bffc17 	ldw	r2,-16(fp)
    cea0:	1080200c 	andi	r2,r2,128
    cea4:	10000326 	beq	r2,zero,ceb4 <ad9361_verify_fir_filter_coef+0x1d0>
    cea8:	008000b4 	movhi	r2,2
    ceac:	109c6d04 	addi	r2,r2,29108
    ceb0:	00000206 	br	cebc <ad9361_verify_fir_filter_coef+0x1d8>
    ceb4:	008000b4 	movhi	r2,2
    ceb8:	109c6c04 	addi	r2,r2,29104
    cebc:	e13ffa0f 	ldh	r4,-24(fp)
    cec0:	e0fff217 	ldw	r3,-56(fp)
    cec4:	18c7883a 	add	r3,r3,r3
    cec8:	180b883a 	mov	r5,r3
    cecc:	e0fffe17 	ldw	r3,-8(fp)
    ced0:	1947883a 	add	r3,r3,r5
    ced4:	18c0000b 	ldhu	r3,0(r3)
    ced8:	18ffffcc 	andi	r3,r3,65535
    cedc:	18e0001c 	xori	r3,r3,32768
    cee0:	18e00004 	addi	r3,r3,-32768
    cee4:	d9000015 	stw	r4,0(sp)
    cee8:	d8c00115 	stw	r3,4(sp)
    ceec:	010000b4 	movhi	r4,2
    cef0:	211d7a04 	addi	r4,r4,30184
    cef4:	100b883a 	mov	r5,r2
    cef8:	e1bff517 	ldw	r6,-44(fp)
    cefc:	e1fff217 	ldw	r7,-56(fp)
    cf00:	001f8180 	call	1f818 <printf>
    cf04:	010000b4 	movhi	r4,2
    cf08:	211a7504 	addi	r4,r4,27092
    cf0c:	001f8180 	call	1f818 <printf>
					(dest & FIR_IS_RX) ? "RX" : "TX", sel,
					val, tmp, coef[val]);
				ret = -EIO;
    cf10:	00bffec4 	movi	r2,-5
    cf14:	e0bff715 	stw	r2,-36(fp)
	for (; cnt > 0; cnt--, sel++) {

		ad9361_spi_write(spi, REG_TX_FILTER_CONF + offs,
				 FIR_NUM_TAPS(ntaps / 16 - 1) |
				 FIR_SELECT(sel) | FIR_START_CLK);
		for (val = 0; val < ntaps; val++) {
    cf18:	e0bff217 	ldw	r2,-56(fp)
    cf1c:	10800044 	addi	r2,r2,1
    cf20:	e0bff215 	stw	r2,-56(fp)
    cf24:	e0fff217 	ldw	r3,-56(fp)
    cf28:	e0bffd17 	ldw	r2,-12(fp)
    cf2c:	18bfbb36 	bltu	r3,r2,ce1c <_gp+0xfffdacfc>
	} else {
		sel = (dest & 3);
		cnt = 1;
	}

	for (; cnt > 0; cnt--, sel++) {
    cf30:	e0bff617 	ldw	r2,-40(fp)
    cf34:	10bfffc4 	addi	r2,r2,-1
    cf38:	e0bff615 	stw	r2,-40(fp)
    cf3c:	e0bff517 	ldw	r2,-44(fp)
    cf40:	10800044 	addi	r2,r2,1
    cf44:	e0bff515 	stw	r2,-44(fp)
    cf48:	e0bff617 	ldw	r2,-40(fp)
    cf4c:	103fa21e 	bne	r2,zero,cdd8 <_gp+0xfffdacb8>
				ret = -EIO;
			}
		}
	}

	if (dest & FIR_IS_RX) {
    cf50:	e0bffc17 	ldw	r2,-16(fp)
    cf54:	1080200c 	andi	r2,r2,128
    cf58:	10000426 	beq	r2,zero,cf6c <ad9361_verify_fir_filter_coef+0x288>
		ad9361_spi_write(spi, REG_RX_FILTER_GAIN, gain);
    cf5c:	e13ff817 	ldw	r4,-32(fp)
    cf60:	01403d84 	movi	r5,246
    cf64:	e1bff417 	ldw	r6,-48(fp)
    cf68:	00002600 	call	260 <ad9361_spi_write>
	}

	ad9361_spi_write(spi, REG_TX_FILTER_CONF + offs, conf);
    cf6c:	e0bff317 	ldw	r2,-52(fp)
    cf70:	10801944 	addi	r2,r2,101
    cf74:	e13ff817 	ldw	r4,-32(fp)
    cf78:	100b883a 	mov	r5,r2
    cf7c:	e1bff917 	ldw	r6,-28(fp)
    cf80:	00002600 	call	260 <ad9361_spi_write>

	return ret;
    cf84:	e0bff717 	ldw	r2,-36(fp)
}
    cf88:	e6ffff04 	addi	sp,fp,-4
    cf8c:	dfc00217 	ldw	ra,8(sp)
    cf90:	df000117 	ldw	fp,4(sp)
    cf94:	dc000017 	ldw	r16,0(sp)
    cf98:	dec00304 	addi	sp,sp,12
    cf9c:	f800283a 	ret

0000cfa0 <ad9361_load_fir_filter_coef>:
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_load_fir_filter_coef(struct ad9361_rf_phy *phy,
	enum fir_dest dest, int32_t gain_dB,
	uint32_t ntaps, int16_t *coef)
{
    cfa0:	defff304 	addi	sp,sp,-52
    cfa4:	de00012e 	bgeu	sp,et,cfac <ad9361_load_fir_filter_coef+0xc>
    cfa8:	003b68fa 	trap	3
    cfac:	dfc00c15 	stw	ra,48(sp)
    cfb0:	df000b15 	stw	fp,44(sp)
    cfb4:	dc000a15 	stw	r16,40(sp)
    cfb8:	df000b04 	addi	fp,sp,44
    cfbc:	e13ffb15 	stw	r4,-20(fp)
    cfc0:	e17ffc15 	stw	r5,-16(fp)
    cfc4:	e1bffd15 	stw	r6,-12(fp)
    cfc8:	e1fffe15 	stw	r7,-8(fp)
	struct spi_device *spi = phy->spi;
    cfcc:	e0bffb17 	ldw	r2,-20(fp)
    cfd0:	10800117 	ldw	r2,4(r2)
    cfd4:	e0bffa15 	stw	r2,-24(fp)
	uint32_t val, offs = 0, fir_conf = 0, fir_enable = 0;
    cfd8:	e03ff715 	stw	zero,-36(fp)
    cfdc:	e03ff815 	stw	zero,-32(fp)
    cfe0:	e03ff915 	stw	zero,-28(fp)

	dev_dbg(&phy->spi->dev, "%s: TAPS %"PRIu32", gain %"PRId32", dest %d",
    cfe4:	e0bffc17 	ldw	r2,-16(fp)
    cfe8:	d8800015 	stw	r2,0(sp)
    cfec:	010000b4 	movhi	r4,2
    cff0:	211d8504 	addi	r4,r4,30228
    cff4:	014000b4 	movhi	r5,2
    cff8:	295f9304 	addi	r5,r5,32332
    cffc:	e1bffe17 	ldw	r6,-8(fp)
    d000:	e1fffd17 	ldw	r7,-12(fp)
    d004:	001f8180 	call	1f818 <printf>
    d008:	010000b4 	movhi	r4,2
    d00c:	211a7504 	addi	r4,r4,27092
    d010:	001f8180 	call	1f818 <printf>
		__func__, ntaps, gain_dB, dest);

	if (coef == NULL || !ntaps || ntaps > 128 || ntaps % 16) {
    d014:	e0800217 	ldw	r2,8(fp)
    d018:	10000826 	beq	r2,zero,d03c <ad9361_load_fir_filter_coef+0x9c>
    d01c:	e0bffe17 	ldw	r2,-8(fp)
    d020:	10000626 	beq	r2,zero,d03c <ad9361_load_fir_filter_coef+0x9c>
    d024:	e0bffe17 	ldw	r2,-8(fp)
    d028:	10802068 	cmpgeui	r2,r2,129
    d02c:	1000031e 	bne	r2,zero,d03c <ad9361_load_fir_filter_coef+0x9c>
    d030:	e0bffe17 	ldw	r2,-8(fp)
    d034:	108003cc 	andi	r2,r2,15
    d038:	10000e26 	beq	r2,zero,d074 <ad9361_load_fir_filter_coef+0xd4>
		dev_err(&phy->spi->dev,
    d03c:	e0bffc17 	ldw	r2,-16(fp)
    d040:	d8800015 	stw	r2,0(sp)
    d044:	010000b4 	movhi	r4,2
    d048:	211d8d04 	addi	r4,r4,30260
    d04c:	014000b4 	movhi	r5,2
    d050:	295f9304 	addi	r5,r5,32332
    d054:	e1bffe17 	ldw	r6,-8(fp)
    d058:	e1fffd17 	ldw	r7,-12(fp)
    d05c:	001f8180 	call	1f818 <printf>
    d060:	010000b4 	movhi	r4,2
    d064:	211a7504 	addi	r4,r4,27092
    d068:	001f8180 	call	1f818 <printf>
			"%s: Invalid parameters: TAPS %"PRIu32", gain %"PRId32", dest 0x%X",
			__func__, ntaps, gain_dB, dest);

		return -EINVAL;
    d06c:	00bffa84 	movi	r2,-22
    d070:	0000ee06 	br	d42c <ad9361_load_fir_filter_coef+0x48c>
	}

	ad9361_ensm_force_state(phy, ENSM_STATE_ALERT);
    d074:	e13ffb17 	ldw	r4,-20(fp)
    d078:	01400144 	movi	r5,5
    d07c:	00024740 	call	2474 <ad9361_ensm_force_state>

	if (dest & FIR_IS_RX) {
    d080:	e0bffc17 	ldw	r2,-16(fp)
    d084:	1080200c 	andi	r2,r2,128
    d088:	10003526 	beq	r2,zero,d160 <ad9361_load_fir_filter_coef+0x1c0>
		val = 3 - (gain_dB + 12) / 6;
    d08c:	e0bffd17 	ldw	r2,-12(fp)
    d090:	10800304 	addi	r2,r2,12
    d094:	1009883a 	mov	r4,r2
    d098:	01400184 	movi	r5,6
    d09c:	001d6e40 	call	1d6e4 <__divsi3>
    d0a0:	1007883a 	mov	r3,r2
    d0a4:	008000c4 	movi	r2,3
    d0a8:	10c5c83a 	sub	r2,r2,r3
    d0ac:	e0bff615 	stw	r2,-40(fp)
		ad9361_spi_write(spi, REG_RX_FILTER_GAIN, val & 0x3);
    d0b0:	e0bff617 	ldw	r2,-40(fp)
    d0b4:	108000cc 	andi	r2,r2,3
    d0b8:	e13ffa17 	ldw	r4,-24(fp)
    d0bc:	01403d84 	movi	r5,246
    d0c0:	100d883a 	mov	r6,r2
    d0c4:	00002600 	call	260 <ad9361_spi_write>
		offs = REG_RX_FILTER_COEF_ADDR - REG_TX_FILTER_COEF_ADDR;
    d0c8:	00802404 	movi	r2,144
    d0cc:	e0bff715 	stw	r2,-36(fp)
		phy->rx_fir_ntaps = ntaps;
    d0d0:	e0bffe17 	ldw	r2,-8(fp)
    d0d4:	1007883a 	mov	r3,r2
    d0d8:	e0bffb17 	ldw	r2,-20(fp)
    d0dc:	10c05ec5 	stb	r3,379(r2)
		fir_enable = ad9361_spi_readf(phy->spi,
    d0e0:	e0bffb17 	ldw	r2,-20(fp)
    d0e4:	14000117 	ldw	r16,4(r2)
    d0e8:	010000c4 	movi	r4,3
    d0ec:	001c8300 	call	1c830 <find_first_bit>
    d0f0:	8009883a 	mov	r4,r16
    d0f4:	014000c4 	movi	r5,3
    d0f8:	018000c4 	movi	r6,3
    d0fc:	100f883a 	mov	r7,r2
    d100:	00001b80 	call	1b8 <__ad9361_spi_readf>
    d104:	e0bff915 	stw	r2,-28(fp)
			REG_RX_ENABLE_FILTER_CTRL, RX_FIR_ENABLE_DECIMATION(~0));
		ad9361_spi_writef(phy->spi, REG_RX_ENABLE_FILTER_CTRL,
    d108:	e0bffb17 	ldw	r2,-20(fp)
    d10c:	14000117 	ldw	r16,4(r2)
    d110:	010000c4 	movi	r4,3
    d114:	001c8300 	call	1c830 <find_first_bit>
    d118:	1007883a 	mov	r3,r2
    d11c:	e0bffb17 	ldw	r2,-20(fp)
    d120:	10805e83 	ldbu	r2,378(r2)
    d124:	10803fcc 	andi	r2,r2,255
    d128:	10800120 	cmpeqi	r2,r2,4
    d12c:	1000041e 	bne	r2,zero,d140 <ad9361_load_fir_filter_coef+0x1a0>
    d130:	e0bffb17 	ldw	r2,-20(fp)
    d134:	10805e83 	ldbu	r2,378(r2)
    d138:	10803fcc 	andi	r2,r2,255
    d13c:	00000106 	br	d144 <ad9361_load_fir_filter_coef+0x1a4>
    d140:	008000c4 	movi	r2,3
    d144:	d8800015 	stw	r2,0(sp)
    d148:	8009883a 	mov	r4,r16
    d14c:	014000c4 	movi	r5,3
    d150:	018000c4 	movi	r6,3
    d154:	180f883a 	mov	r7,r3
    d158:	000031c0 	call	31c <__ad9361_spi_writef>
    d15c:	00002806 	br	d200 <ad9361_load_fir_filter_coef+0x260>
			RX_FIR_ENABLE_DECIMATION(~0),
			(phy->rx_fir_dec == 4) ? 3 : phy->rx_fir_dec);
	}
	else {
		if (gain_dB == -6)
    d160:	e0bffd17 	ldw	r2,-12(fp)
    d164:	10bffe98 	cmpnei	r2,r2,-6
    d168:	1000021e 	bne	r2,zero,d174 <ad9361_load_fir_filter_coef+0x1d4>
			fir_conf = TX_FIR_GAIN_6DB;
    d16c:	00800044 	movi	r2,1
    d170:	e0bff815 	stw	r2,-32(fp)
		phy->tx_fir_ntaps = ntaps;
    d174:	e0bffe17 	ldw	r2,-8(fp)
    d178:	1007883a 	mov	r3,r2
    d17c:	e0bffb17 	ldw	r2,-20(fp)
    d180:	10c05e45 	stb	r3,377(r2)
		fir_enable = ad9361_spi_readf(phy->spi,
    d184:	e0bffb17 	ldw	r2,-20(fp)
    d188:	14000117 	ldw	r16,4(r2)
    d18c:	010000c4 	movi	r4,3
    d190:	001c8300 	call	1c830 <find_first_bit>
    d194:	8009883a 	mov	r4,r16
    d198:	01400084 	movi	r5,2
    d19c:	018000c4 	movi	r6,3
    d1a0:	100f883a 	mov	r7,r2
    d1a4:	00001b80 	call	1b8 <__ad9361_spi_readf>
    d1a8:	e0bff915 	stw	r2,-28(fp)
			REG_TX_ENABLE_FILTER_CTRL, TX_FIR_ENABLE_INTERPOLATION(~0));
		ad9361_spi_writef(phy->spi, REG_TX_ENABLE_FILTER_CTRL,
    d1ac:	e0bffb17 	ldw	r2,-20(fp)
    d1b0:	14000117 	ldw	r16,4(r2)
    d1b4:	010000c4 	movi	r4,3
    d1b8:	001c8300 	call	1c830 <find_first_bit>
    d1bc:	1007883a 	mov	r3,r2
    d1c0:	e0bffb17 	ldw	r2,-20(fp)
    d1c4:	10805e03 	ldbu	r2,376(r2)
    d1c8:	10803fcc 	andi	r2,r2,255
    d1cc:	10800120 	cmpeqi	r2,r2,4
    d1d0:	1000041e 	bne	r2,zero,d1e4 <ad9361_load_fir_filter_coef+0x244>
    d1d4:	e0bffb17 	ldw	r2,-20(fp)
    d1d8:	10805e03 	ldbu	r2,376(r2)
    d1dc:	10803fcc 	andi	r2,r2,255
    d1e0:	00000106 	br	d1e8 <ad9361_load_fir_filter_coef+0x248>
    d1e4:	008000c4 	movi	r2,3
    d1e8:	d8800015 	stw	r2,0(sp)
    d1ec:	8009883a 	mov	r4,r16
    d1f0:	01400084 	movi	r5,2
    d1f4:	018000c4 	movi	r6,3
    d1f8:	180f883a 	mov	r7,r3
    d1fc:	000031c0 	call	31c <__ad9361_spi_writef>
			TX_FIR_ENABLE_INTERPOLATION(~0),
			(phy->tx_fir_int == 4) ? 3 : phy->tx_fir_int);
	}

	val = ntaps / 16 - 1;
    d200:	e0bffe17 	ldw	r2,-8(fp)
    d204:	1004d13a 	srli	r2,r2,4
    d208:	10bfffc4 	addi	r2,r2,-1
    d20c:	e0bff615 	stw	r2,-40(fp)

	fir_conf |= FIR_NUM_TAPS(val) | FIR_SELECT(dest) | FIR_START_CLK;
    d210:	e0bff617 	ldw	r2,-40(fp)
    d214:	1004917a 	slli	r2,r2,5
    d218:	10c03fcc 	andi	r3,r2,255
    d21c:	e0bffc17 	ldw	r2,-16(fp)
    d220:	108000cc 	andi	r2,r2,3
    d224:	100490fa 	slli	r2,r2,3
    d228:	1886b03a 	or	r3,r3,r2
    d22c:	e0bff817 	ldw	r2,-32(fp)
    d230:	1884b03a 	or	r2,r3,r2
    d234:	10800094 	ori	r2,r2,2
    d238:	e0bff815 	stw	r2,-32(fp)

	ad9361_spi_write(spi, REG_TX_FILTER_CONF + offs, fir_conf);
    d23c:	e0bff717 	ldw	r2,-36(fp)
    d240:	10801944 	addi	r2,r2,101
    d244:	e13ffa17 	ldw	r4,-24(fp)
    d248:	100b883a 	mov	r5,r2
    d24c:	e1bff817 	ldw	r6,-32(fp)
    d250:	00002600 	call	260 <ad9361_spi_write>

	for (val = 0; val < ntaps; val++) {
    d254:	e03ff615 	stw	zero,-40(fp)
    d258:	00003e06 	br	d354 <ad9361_load_fir_filter_coef+0x3b4>
		ad9361_spi_write(spi, REG_TX_FILTER_COEF_ADDR + offs, val);
    d25c:	e0bff717 	ldw	r2,-36(fp)
    d260:	10801804 	addi	r2,r2,96
    d264:	e13ffa17 	ldw	r4,-24(fp)
    d268:	100b883a 	mov	r5,r2
    d26c:	e1bff617 	ldw	r6,-40(fp)
    d270:	00002600 	call	260 <ad9361_spi_write>
		ad9361_spi_write(spi, REG_TX_FILTER_COEF_WRITE_DATA_1 + offs,
    d274:	e0bff717 	ldw	r2,-36(fp)
    d278:	10c01844 	addi	r3,r2,97
			coef[val] & 0xFF);
    d27c:	e0bff617 	ldw	r2,-40(fp)
    d280:	1085883a 	add	r2,r2,r2
    d284:	1009883a 	mov	r4,r2
    d288:	e0800217 	ldw	r2,8(fp)
    d28c:	1105883a 	add	r2,r2,r4
    d290:	1080000b 	ldhu	r2,0(r2)

	ad9361_spi_write(spi, REG_TX_FILTER_CONF + offs, fir_conf);

	for (val = 0; val < ntaps; val++) {
		ad9361_spi_write(spi, REG_TX_FILTER_COEF_ADDR + offs, val);
		ad9361_spi_write(spi, REG_TX_FILTER_COEF_WRITE_DATA_1 + offs,
    d294:	10bfffcc 	andi	r2,r2,65535
    d298:	10803fcc 	andi	r2,r2,255
    d29c:	e13ffa17 	ldw	r4,-24(fp)
    d2a0:	180b883a 	mov	r5,r3
    d2a4:	100d883a 	mov	r6,r2
    d2a8:	00002600 	call	260 <ad9361_spi_write>
			coef[val] & 0xFF);
		ad9361_spi_write(spi, REG_TX_FILTER_COEF_WRITE_DATA_2 + offs,
    d2ac:	e0bff717 	ldw	r2,-36(fp)
    d2b0:	10c01884 	addi	r3,r2,98
			coef[val] >> 8);
    d2b4:	e0bff617 	ldw	r2,-40(fp)
    d2b8:	1085883a 	add	r2,r2,r2
    d2bc:	1009883a 	mov	r4,r2
    d2c0:	e0800217 	ldw	r2,8(fp)
    d2c4:	1105883a 	add	r2,r2,r4
    d2c8:	1080000b 	ldhu	r2,0(r2)

	for (val = 0; val < ntaps; val++) {
		ad9361_spi_write(spi, REG_TX_FILTER_COEF_ADDR + offs, val);
		ad9361_spi_write(spi, REG_TX_FILTER_COEF_WRITE_DATA_1 + offs,
			coef[val] & 0xFF);
		ad9361_spi_write(spi, REG_TX_FILTER_COEF_WRITE_DATA_2 + offs,
    d2cc:	10bfffcc 	andi	r2,r2,65535
    d2d0:	10a0001c 	xori	r2,r2,32768
    d2d4:	10a00004 	addi	r2,r2,-32768
    d2d8:	1005d23a 	srai	r2,r2,8
    d2dc:	10bfffcc 	andi	r2,r2,65535
    d2e0:	10a0001c 	xori	r2,r2,32768
    d2e4:	10a00004 	addi	r2,r2,-32768
    d2e8:	e13ffa17 	ldw	r4,-24(fp)
    d2ec:	180b883a 	mov	r5,r3
    d2f0:	100d883a 	mov	r6,r2
    d2f4:	00002600 	call	260 <ad9361_spi_write>
			coef[val] >> 8);
		ad9361_spi_write(spi, REG_TX_FILTER_CONF + offs,
    d2f8:	e0bff717 	ldw	r2,-36(fp)
    d2fc:	10c01944 	addi	r3,r2,101
    d300:	e0bff817 	ldw	r2,-32(fp)
    d304:	10800114 	ori	r2,r2,4
    d308:	e13ffa17 	ldw	r4,-24(fp)
    d30c:	180b883a 	mov	r5,r3
    d310:	100d883a 	mov	r6,r2
    d314:	00002600 	call	260 <ad9361_spi_write>
			fir_conf | FIR_WRITE);
		ad9361_spi_write(spi, REG_TX_FILTER_COEF_READ_DATA_2 + offs, 0);
    d318:	e0bff717 	ldw	r2,-36(fp)
    d31c:	10801904 	addi	r2,r2,100
    d320:	e13ffa17 	ldw	r4,-24(fp)
    d324:	100b883a 	mov	r5,r2
    d328:	000d883a 	mov	r6,zero
    d32c:	00002600 	call	260 <ad9361_spi_write>
		ad9361_spi_write(spi, REG_TX_FILTER_COEF_READ_DATA_2 + offs, 0);
    d330:	e0bff717 	ldw	r2,-36(fp)
    d334:	10801904 	addi	r2,r2,100
    d338:	e13ffa17 	ldw	r4,-24(fp)
    d33c:	100b883a 	mov	r5,r2
    d340:	000d883a 	mov	r6,zero
    d344:	00002600 	call	260 <ad9361_spi_write>

	fir_conf |= FIR_NUM_TAPS(val) | FIR_SELECT(dest) | FIR_START_CLK;

	ad9361_spi_write(spi, REG_TX_FILTER_CONF + offs, fir_conf);

	for (val = 0; val < ntaps; val++) {
    d348:	e0bff617 	ldw	r2,-40(fp)
    d34c:	10800044 	addi	r2,r2,1
    d350:	e0bff615 	stw	r2,-40(fp)
    d354:	e0fff617 	ldw	r3,-40(fp)
    d358:	e0bffe17 	ldw	r2,-8(fp)
    d35c:	18bfbf36 	bltu	r3,r2,d25c <_gp+0xfffdb13c>
			fir_conf | FIR_WRITE);
		ad9361_spi_write(spi, REG_TX_FILTER_COEF_READ_DATA_2 + offs, 0);
		ad9361_spi_write(spi, REG_TX_FILTER_COEF_READ_DATA_2 + offs, 0);
	}

	ad9361_spi_write(spi, REG_TX_FILTER_CONF + offs, fir_conf);
    d360:	e0bff717 	ldw	r2,-36(fp)
    d364:	10801944 	addi	r2,r2,101
    d368:	e13ffa17 	ldw	r4,-24(fp)
    d36c:	100b883a 	mov	r5,r2
    d370:	e1bff817 	ldw	r6,-32(fp)
    d374:	00002600 	call	260 <ad9361_spi_write>
	fir_conf &= ~FIR_START_CLK;
    d378:	e0fff817 	ldw	r3,-32(fp)
    d37c:	00bfff44 	movi	r2,-3
    d380:	1884703a 	and	r2,r3,r2
    d384:	e0bff815 	stw	r2,-32(fp)
	ad9361_spi_write(spi, REG_TX_FILTER_CONF + offs, fir_conf);
    d388:	e0bff717 	ldw	r2,-36(fp)
    d38c:	10801944 	addi	r2,r2,101
    d390:	e13ffa17 	ldw	r4,-24(fp)
    d394:	100b883a 	mov	r5,r2
    d398:	e1bff817 	ldw	r6,-32(fp)
    d39c:	00002600 	call	260 <ad9361_spi_write>

	if (dest & FIR_IS_RX)
    d3a0:	e0bffc17 	ldw	r2,-16(fp)
    d3a4:	1080200c 	andi	r2,r2,128
    d3a8:	10000d26 	beq	r2,zero,d3e0 <ad9361_load_fir_filter_coef+0x440>
		ad9361_spi_writef(phy->spi, REG_RX_ENABLE_FILTER_CTRL,
    d3ac:	e0bffb17 	ldw	r2,-20(fp)
    d3b0:	14000117 	ldw	r16,4(r2)
    d3b4:	010000c4 	movi	r4,3
    d3b8:	001c8300 	call	1c830 <find_first_bit>
    d3bc:	1007883a 	mov	r3,r2
    d3c0:	e0bff917 	ldw	r2,-28(fp)
    d3c4:	d8800015 	stw	r2,0(sp)
    d3c8:	8009883a 	mov	r4,r16
    d3cc:	014000c4 	movi	r5,3
    d3d0:	018000c4 	movi	r6,3
    d3d4:	180f883a 	mov	r7,r3
    d3d8:	000031c0 	call	31c <__ad9361_spi_writef>
    d3dc:	00000c06 	br	d410 <ad9361_load_fir_filter_coef+0x470>
			RX_FIR_ENABLE_DECIMATION(~0), fir_enable);
	else
		ad9361_spi_writef(phy->spi, REG_TX_ENABLE_FILTER_CTRL,
    d3e0:	e0bffb17 	ldw	r2,-20(fp)
    d3e4:	14000117 	ldw	r16,4(r2)
    d3e8:	010000c4 	movi	r4,3
    d3ec:	001c8300 	call	1c830 <find_first_bit>
    d3f0:	1007883a 	mov	r3,r2
    d3f4:	e0bff917 	ldw	r2,-28(fp)
    d3f8:	d8800015 	stw	r2,0(sp)
    d3fc:	8009883a 	mov	r4,r16
    d400:	01400084 	movi	r5,2
    d404:	018000c4 	movi	r6,3
    d408:	180f883a 	mov	r7,r3
    d40c:	000031c0 	call	31c <__ad9361_spi_writef>
			TX_FIR_ENABLE_INTERPOLATION(~0), fir_enable);

	ad9361_ensm_restore_prev_state(phy);
    d410:	e13ffb17 	ldw	r4,-20(fp)
    d414:	00026740 	call	2674 <ad9361_ensm_restore_prev_state>

	return ad9361_verify_fir_filter_coef(phy, dest, ntaps, coef);
    d418:	e13ffb17 	ldw	r4,-20(fp)
    d41c:	e17ffc17 	ldw	r5,-16(fp)
    d420:	e1bffe17 	ldw	r6,-8(fp)
    d424:	e1c00217 	ldw	r7,8(fp)
    d428:	000cce40 	call	cce4 <ad9361_verify_fir_filter_coef>
}
    d42c:	e6ffff04 	addi	sp,fp,-4
    d430:	dfc00217 	ldw	ra,8(sp)
    d434:	df000117 	ldw	fp,4(sp)
    d438:	dc000017 	ldw	r16,0(sp)
    d43c:	dec00304 	addi	sp,sp,12
    d440:	f800283a 	ret

0000d444 <ad9361_parse_fir>:
 * @param size Buffer size.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_parse_fir(struct ad9361_rf_phy *phy,
	char *data, uint32_t size)
{
    d444:	defffc04 	addi	sp,sp,-16
    d448:	de00012e 	bgeu	sp,et,d450 <ad9361_parse_fir+0xc>
    d44c:	003b68fa 	trap	3
    d450:	df000315 	stw	fp,12(sp)
    d454:	df000304 	addi	fp,sp,12
    d458:	e13ffd15 	stw	r4,-12(fp)
    d45c:	e17ffe15 	stw	r5,-8(fp)
    d460:	e1bfff15 	stw	r6,-4(fp)
//		return ret;
//
//	if (!(rrx | rtx))
//		phy->filt_valid = true;

	return size;
    d464:	e0bfff17 	ldw	r2,-4(fp)
}
    d468:	e037883a 	mov	sp,fp
    d46c:	df000017 	ldw	fp,0(sp)
    d470:	dec00104 	addi	sp,sp,4
    d474:	f800283a 	ret

0000d478 <ad9361_validate_enable_fir>:
 * Validate FIR filter configuration - on pass enable.
 * @param phy The AD9361 state structure.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_validate_enable_fir(struct ad9361_rf_phy *phy)
{
    d478:	deffe904 	addi	sp,sp,-92
    d47c:	de00012e 	bgeu	sp,et,d484 <ad9361_validate_enable_fir+0xc>
    d480:	003b68fa 	trap	3
    d484:	dfc01615 	stw	ra,88(sp)
    d488:	df001515 	stw	fp,84(sp)
    d48c:	df001504 	addi	fp,sp,84
    d490:	e13fff15 	stw	r4,-4(fp)
	int32_t ret;
	uint32_t rx[6], tx[6];
	uint32_t max, min, valid;

	dev_dbg(dev, "%s: TX FIR EN=%d/TAPS%d/INT%d, RX FIR EN=%d/TAPS%d/DEC%d",
    d494:	e0bfff17 	ldw	r2,-4(fp)
    d498:	10804f43 	ldbu	r2,317(r2)
    d49c:	1080005c 	xori	r2,r2,1
    d4a0:	11803fcc 	andi	r6,r2,255
    d4a4:	e0bfff17 	ldw	r2,-4(fp)
    d4a8:	10805e43 	ldbu	r2,377(r2)
    d4ac:	11c03fcc 	andi	r7,r2,255
    d4b0:	e0bfff17 	ldw	r2,-4(fp)
    d4b4:	10805e03 	ldbu	r2,376(r2)
    d4b8:	11403fcc 	andi	r5,r2,255
    d4bc:	e0bfff17 	ldw	r2,-4(fp)
    d4c0:	10804f03 	ldbu	r2,316(r2)
    d4c4:	1080005c 	xori	r2,r2,1
    d4c8:	11003fcc 	andi	r4,r2,255
    d4cc:	e0bfff17 	ldw	r2,-4(fp)
    d4d0:	10805ec3 	ldbu	r2,379(r2)
    d4d4:	10c03fcc 	andi	r3,r2,255
    d4d8:	e0bfff17 	ldw	r2,-4(fp)
    d4dc:	10805e83 	ldbu	r2,378(r2)
    d4e0:	10803fcc 	andi	r2,r2,255
    d4e4:	d9400015 	stw	r5,0(sp)
    d4e8:	d9000115 	stw	r4,4(sp)
    d4ec:	d8c00215 	stw	r3,8(sp)
    d4f0:	d8800315 	stw	r2,12(sp)
    d4f4:	010000b4 	movhi	r4,2
    d4f8:	211d9b04 	addi	r4,r4,30316
    d4fc:	014000b4 	movhi	r5,2
    d500:	295f9a04 	addi	r5,r5,32360
    d504:	001f8180 	call	1f818 <printf>
    d508:	010000b4 	movhi	r4,2
    d50c:	211a7504 	addi	r4,r4,27092
    d510:	001f8180 	call	1f818 <printf>
		__func__, !phy->bypass_tx_fir, phy->tx_fir_ntaps, phy->tx_fir_int,
		!phy->bypass_rx_fir, phy->rx_fir_ntaps, phy->rx_fir_dec);

	if (!phy->bypass_tx_fir) {
    d514:	e0bfff17 	ldw	r2,-4(fp)
    d518:	10804f43 	ldbu	r2,317(r2)
    d51c:	1080005c 	xori	r2,r2,1
    d520:	10803fcc 	andi	r2,r2,255
    d524:	10003126 	beq	r2,zero,d5ec <ad9361_validate_enable_fir+0x174>
		if (!(phy->tx_fir_int == 1 || phy->tx_fir_int == 2 ||
    d528:	e0bfff17 	ldw	r2,-4(fp)
    d52c:	10805e03 	ldbu	r2,376(r2)
    d530:	10803fcc 	andi	r2,r2,255
    d534:	10800060 	cmpeqi	r2,r2,1
    d538:	1000181e 	bne	r2,zero,d59c <ad9361_validate_enable_fir+0x124>
    d53c:	e0bfff17 	ldw	r2,-4(fp)
    d540:	10805e03 	ldbu	r2,376(r2)
    d544:	10803fcc 	andi	r2,r2,255
    d548:	108000a0 	cmpeqi	r2,r2,2
    d54c:	1000131e 	bne	r2,zero,d59c <ad9361_validate_enable_fir+0x124>
			phy->tx_fir_int == 4)) {
    d550:	e0bfff17 	ldw	r2,-4(fp)
    d554:	10805e03 	ldbu	r2,376(r2)
	dev_dbg(dev, "%s: TX FIR EN=%d/TAPS%d/INT%d, RX FIR EN=%d/TAPS%d/DEC%d",
		__func__, !phy->bypass_tx_fir, phy->tx_fir_ntaps, phy->tx_fir_int,
		!phy->bypass_rx_fir, phy->rx_fir_ntaps, phy->rx_fir_dec);

	if (!phy->bypass_tx_fir) {
		if (!(phy->tx_fir_int == 1 || phy->tx_fir_int == 2 ||
    d558:	10803fcc 	andi	r2,r2,255
    d55c:	10800120 	cmpeqi	r2,r2,4
    d560:	10000e1e 	bne	r2,zero,d59c <ad9361_validate_enable_fir+0x124>
			phy->tx_fir_int == 4)) {
			dev_err(dev,
    d564:	e0bfff17 	ldw	r2,-4(fp)
    d568:	10805e03 	ldbu	r2,376(r2)
    d56c:	10803fcc 	andi	r2,r2,255
    d570:	010000b4 	movhi	r4,2
    d574:	211daa04 	addi	r4,r4,30376
    d578:	014000b4 	movhi	r5,2
    d57c:	295f9a04 	addi	r5,r5,32360
    d580:	100d883a 	mov	r6,r2
    d584:	001f8180 	call	1f818 <printf>
    d588:	010000b4 	movhi	r4,2
    d58c:	211a7504 	addi	r4,r4,27092
    d590:	001f8180 	call	1f818 <printf>
				"%s: Invalid: Interpolation %d in filter config",
				__func__, phy->tx_fir_int);
			return -EINVAL;
    d594:	00bffa84 	movi	r2,-22
    d598:	0000f906 	br	d980 <ad9361_validate_enable_fir+0x508>
		}


		if (phy->tx_fir_int == 1 && phy->tx_fir_ntaps > 64) {
    d59c:	e0bfff17 	ldw	r2,-4(fp)
    d5a0:	10805e03 	ldbu	r2,376(r2)
    d5a4:	10803fcc 	andi	r2,r2,255
    d5a8:	10800058 	cmpnei	r2,r2,1
    d5ac:	10000f1e 	bne	r2,zero,d5ec <ad9361_validate_enable_fir+0x174>
    d5b0:	e0bfff17 	ldw	r2,-4(fp)
    d5b4:	10805e43 	ldbu	r2,377(r2)
    d5b8:	10803fcc 	andi	r2,r2,255
    d5bc:	10801070 	cmpltui	r2,r2,65
    d5c0:	10000a1e 	bne	r2,zero,d5ec <ad9361_validate_enable_fir+0x174>
			dev_err(dev,
    d5c4:	010000b4 	movhi	r4,2
    d5c8:	211db604 	addi	r4,r4,30424
    d5cc:	014000b4 	movhi	r5,2
    d5d0:	295f9a04 	addi	r5,r5,32360
    d5d4:	001f8180 	call	1f818 <printf>
    d5d8:	010000b4 	movhi	r4,2
    d5dc:	211a7504 	addi	r4,r4,27092
    d5e0:	001f8180 	call	1f818 <printf>
				"%s: Invalid: TAPS > 64 and Interpolation = 1",
				__func__);
			return -EINVAL;
    d5e4:	00bffa84 	movi	r2,-22
    d5e8:	0000e506 	br	d980 <ad9361_validate_enable_fir+0x508>
		}
	}

	if (!phy->bypass_rx_fir) {
    d5ec:	e0bfff17 	ldw	r2,-4(fp)
    d5f0:	10804f03 	ldbu	r2,316(r2)
    d5f4:	1080005c 	xori	r2,r2,1
    d5f8:	10803fcc 	andi	r2,r2,255
    d5fc:	10001d26 	beq	r2,zero,d674 <ad9361_validate_enable_fir+0x1fc>
		if (!(phy->rx_fir_dec == 1 || phy->rx_fir_dec == 2 ||
    d600:	e0bfff17 	ldw	r2,-4(fp)
    d604:	10805e83 	ldbu	r2,378(r2)
    d608:	10803fcc 	andi	r2,r2,255
    d60c:	10800060 	cmpeqi	r2,r2,1
    d610:	1000181e 	bne	r2,zero,d674 <ad9361_validate_enable_fir+0x1fc>
    d614:	e0bfff17 	ldw	r2,-4(fp)
    d618:	10805e83 	ldbu	r2,378(r2)
    d61c:	10803fcc 	andi	r2,r2,255
    d620:	108000a0 	cmpeqi	r2,r2,2
    d624:	1000131e 	bne	r2,zero,d674 <ad9361_validate_enable_fir+0x1fc>
			phy->rx_fir_dec == 4)) {
    d628:	e0bfff17 	ldw	r2,-4(fp)
    d62c:	10805e83 	ldbu	r2,378(r2)
			return -EINVAL;
		}
	}

	if (!phy->bypass_rx_fir) {
		if (!(phy->rx_fir_dec == 1 || phy->rx_fir_dec == 2 ||
    d630:	10803fcc 	andi	r2,r2,255
    d634:	10800120 	cmpeqi	r2,r2,4
    d638:	10000e1e 	bne	r2,zero,d674 <ad9361_validate_enable_fir+0x1fc>
			phy->rx_fir_dec == 4)) {
			dev_err(dev,
    d63c:	e0bfff17 	ldw	r2,-4(fp)
    d640:	10805e83 	ldbu	r2,378(r2)
    d644:	10803fcc 	andi	r2,r2,255
    d648:	010000b4 	movhi	r4,2
    d64c:	211dc204 	addi	r4,r4,30472
    d650:	014000b4 	movhi	r5,2
    d654:	295f9a04 	addi	r5,r5,32360
    d658:	100d883a 	mov	r6,r2
    d65c:	001f8180 	call	1f818 <printf>
    d660:	010000b4 	movhi	r4,2
    d664:	211a7504 	addi	r4,r4,27092
    d668:	001f8180 	call	1f818 <printf>
				"%s: Invalid: Decimation %d in filter config",
				__func__, phy->rx_fir_dec);

			return -EINVAL;
    d66c:	00bffa84 	movi	r2,-22
    d670:	0000c306 	br	d980 <ad9361_validate_enable_fir+0x508>
		}
	}

	if (!phy->filt_valid || phy->bypass_rx_fir || phy->bypass_tx_fir) {
    d674:	e0bfff17 	ldw	r2,-4(fp)
    d678:	10804fc3 	ldbu	r2,319(r2)
    d67c:	1080005c 	xori	r2,r2,1
    d680:	10803fcc 	andi	r2,r2,255
    d684:	1000081e 	bne	r2,zero,d6a8 <ad9361_validate_enable_fir+0x230>
    d688:	e0bfff17 	ldw	r2,-4(fp)
    d68c:	10804f03 	ldbu	r2,316(r2)
    d690:	10803fcc 	andi	r2,r2,255
    d694:	1000041e 	bne	r2,zero,d6a8 <ad9361_validate_enable_fir+0x230>
    d698:	e0bfff17 	ldw	r2,-4(fp)
    d69c:	10804f43 	ldbu	r2,317(r2)
    d6a0:	10803fcc 	andi	r2,r2,255
    d6a4:	10003326 	beq	r2,zero,d774 <ad9361_validate_enable_fir+0x2fc>
		ret = ad9361_calculate_rf_clock_chain(phy,
    d6a8:	e0bfff17 	ldw	r2,-4(fp)
    d6ac:	10802417 	ldw	r2,144(r2)
    d6b0:	e13fff17 	ldw	r4,-4(fp)
    d6b4:	100b883a 	mov	r5,r2
    d6b8:	001bc900 	call	1bc90 <clk_get_rate>
    d6bc:	100b883a 	mov	r5,r2
    d6c0:	e0bfff17 	ldw	r2,-4(fp)
    d6c4:	11804e17 	ldw	r6,312(r2)
    d6c8:	e0fff304 	addi	r3,fp,-52
    d6cc:	e0bff904 	addi	r2,fp,-28
    d6d0:	d8800015 	stw	r2,0(sp)
    d6d4:	e13fff17 	ldw	r4,-4(fp)
    d6d8:	180f883a 	mov	r7,r3
    d6dc:	0009f600 	call	9f60 <ad9361_calculate_rf_clock_chain>
    d6e0:	e0bff015 	stw	r2,-64(fp)
			clk_get_rate(phy, phy->ref_clk_scale[TX_SAMPL_CLK]),
			phy->rate_governor, rx, tx);
		if (ret < 0) {
    d6e4:	e0bff017 	ldw	r2,-64(fp)
    d6e8:	1000200e 	bge	r2,zero,d76c <ad9361_validate_enable_fir+0x2f4>
			min = phy->rate_governor ? 1500000U : 1000000U;
    d6ec:	e0bfff17 	ldw	r2,-4(fp)
    d6f0:	10804e17 	ldw	r2,312(r2)
    d6f4:	10000326 	beq	r2,zero,d704 <ad9361_validate_enable_fir+0x28c>
    d6f8:	008005f4 	movhi	r2,23
    d6fc:	10b8d804 	addi	r2,r2,-7328
    d700:	00000206 	br	d70c <ad9361_validate_enable_fir+0x294>
    d704:	008003f4 	movhi	r2,15
    d708:	10909004 	addi	r2,r2,16960
    d70c:	e0bff115 	stw	r2,-60(fp)
			dev_err(dev,
    d710:	010000b4 	movhi	r4,2
    d714:	211dcd04 	addi	r4,r4,30516
    d718:	014000b4 	movhi	r5,2
    d71c:	295f9a04 	addi	r5,r5,32360
    d720:	e1bff017 	ldw	r6,-64(fp)
    d724:	001f8180 	call	1f818 <printf>
    d728:	010000b4 	movhi	r4,2
    d72c:	211a7504 	addi	r4,r4,27092
    d730:	001f8180 	call	1f818 <printf>
				"%s: Calculating filter rates failed %"PRId32
				" using min frequency",__func__, ret);
				ret = ad9361_calculate_rf_clock_chain(phy, min,
    d734:	e0bfff17 	ldw	r2,-4(fp)
    d738:	11804e17 	ldw	r6,312(r2)
    d73c:	e0fff304 	addi	r3,fp,-52
    d740:	e0bff904 	addi	r2,fp,-28
    d744:	d8800015 	stw	r2,0(sp)
    d748:	e13fff17 	ldw	r4,-4(fp)
    d74c:	e17ff117 	ldw	r5,-60(fp)
    d750:	180f883a 	mov	r7,r3
    d754:	0009f600 	call	9f60 <ad9361_calculate_rf_clock_chain>
    d758:	e0bff015 	stw	r2,-64(fp)
					phy->rate_governor, rx, tx);
			if (ret < 0) {
    d75c:	e0bff017 	ldw	r2,-64(fp)
    d760:	1000020e 	bge	r2,zero,d76c <ad9361_validate_enable_fir+0x2f4>
				return ret;
    d764:	e0bff017 	ldw	r2,-64(fp)
    d768:	00008506 	br	d980 <ad9361_validate_enable_fir+0x508>
			}
		}
		valid = false;
    d76c:	e03fef15 	stw	zero,-68(fp)
    d770:	00001006 	br	d7b4 <ad9361_validate_enable_fir+0x33c>
	} else {
#ifndef ALTERA_PLATFORM
		memcpy(rx, phy->filt_rx_path_clks, sizeof(rx));
    d774:	e0bfff17 	ldw	r2,-4(fp)
    d778:	10805004 	addi	r2,r2,320
    d77c:	e0fff304 	addi	r3,fp,-52
    d780:	1809883a 	mov	r4,r3
    d784:	100b883a 	mov	r5,r2
    d788:	01800604 	movi	r6,24
    d78c:	001f52c0 	call	1f52c <memcpy>
		memcpy(tx, phy->filt_tx_path_clks, sizeof(tx));
    d790:	e0bfff17 	ldw	r2,-4(fp)
    d794:	10805604 	addi	r2,r2,344
    d798:	e0fff904 	addi	r3,fp,-28
    d79c:	1809883a 	mov	r4,r3
    d7a0:	100b883a 	mov	r5,r2
    d7a4:	01800604 	movi	r6,24
    d7a8:	001f52c0 	call	1f52c <memcpy>
			rx[i] = phy->filt_rx_path_clks[i];
		num = sizeof(tx);
		for (i = 0; i < num; i++)
			tx[i] = phy->filt_tx_path_clks[i];
#endif
		valid = true;
    d7ac:	00800044 	movi	r2,1
    d7b0:	e0bfef15 	stw	r2,-68(fp)
		__func__, tx[BBPLL_FREQ], tx[ADC_FREQ],
		tx[R2_FREQ], tx[R1_FREQ],
		tx[CLKRF_FREQ], tx[RX_SAMPL_FREQ]);
#endif

	if (!phy->bypass_tx_fir) {
    d7b4:	e0bfff17 	ldw	r2,-4(fp)
    d7b8:	10804f43 	ldbu	r2,317(r2)
    d7bc:	1080005c 	xori	r2,r2,1
    d7c0:	10803fcc 	andi	r2,r2,255
    d7c4:	10001b26 	beq	r2,zero,d834 <ad9361_validate_enable_fir+0x3bc>
		max = (tx[DAC_FREQ] / tx[TX_SAMPL_FREQ]) * 16;
    d7c8:	e0fffa17 	ldw	r3,-24(fp)
    d7cc:	e0bffe17 	ldw	r2,-8(fp)
    d7d0:	1809883a 	mov	r4,r3
    d7d4:	100b883a 	mov	r5,r2
    d7d8:	001d7a40 	call	1d7a4 <__udivsi3>
    d7dc:	1004913a 	slli	r2,r2,4
    d7e0:	e0bff215 	stw	r2,-56(fp)
		if (phy->tx_fir_ntaps > max) {
    d7e4:	e0bfff17 	ldw	r2,-4(fp)
    d7e8:	10805e43 	ldbu	r2,377(r2)
    d7ec:	10803fcc 	andi	r2,r2,255
    d7f0:	e0fff217 	ldw	r3,-56(fp)
    d7f4:	18800f2e 	bgeu	r3,r2,d834 <ad9361_validate_enable_fir+0x3bc>
			dev_err(dev,
    d7f8:	e0fff417 	ldw	r3,-48(fp)
    d7fc:	e0bffe17 	ldw	r2,-8(fp)
    d800:	d8800015 	stw	r2,0(sp)
    d804:	010000b4 	movhi	r4,2
    d808:	211ddc04 	addi	r4,r4,30576
    d80c:	014000b4 	movhi	r5,2
    d810:	295f9a04 	addi	r5,r5,32360
    d814:	e1bff217 	ldw	r6,-56(fp)
    d818:	180f883a 	mov	r7,r3
    d81c:	001f8180 	call	1f818 <printf>
    d820:	010000b4 	movhi	r4,2
    d824:	211a7504 	addi	r4,r4,27092
    d828:	001f8180 	call	1f818 <printf>
				"%s: Invalid: ratio ADC/2 / TX_SAMPL * 16 > TAPS"
				"(max %"PRIu32", adc %"PRIu32", tx %"PRIu32")",
				__func__, max, rx[ADC_FREQ], tx[TX_SAMPL_FREQ]);
			return -EINVAL;
    d82c:	00bffa84 	movi	r2,-22
    d830:	00005306 	br	d980 <ad9361_validate_enable_fir+0x508>
		}
	}

	if (!phy->bypass_rx_fir) {
    d834:	e0bfff17 	ldw	r2,-4(fp)
    d838:	10804f03 	ldbu	r2,316(r2)
    d83c:	1080005c 	xori	r2,r2,1
    d840:	10803fcc 	andi	r2,r2,255
    d844:	10002026 	beq	r2,zero,d8c8 <ad9361_validate_enable_fir+0x450>
		max = ((rx[ADC_FREQ] / ((rx[ADC_FREQ] == rx[R2_FREQ]) ? 1 : 2)) /
    d848:	e13ff417 	ldw	r4,-48(fp)
    d84c:	e0fff417 	ldw	r3,-48(fp)
    d850:	e0bff517 	ldw	r2,-44(fp)
    d854:	1880021e 	bne	r3,r2,d860 <ad9361_validate_enable_fir+0x3e8>
    d858:	00800044 	movi	r2,1
    d85c:	00000106 	br	d864 <ad9361_validate_enable_fir+0x3ec>
    d860:	00800084 	movi	r2,2
    d864:	100b883a 	mov	r5,r2
    d868:	001d7a40 	call	1d7a4 <__udivsi3>
    d86c:	1007883a 	mov	r3,r2
				rx[RX_SAMPL_FREQ]) * 16;
    d870:	e0bff817 	ldw	r2,-32(fp)
			return -EINVAL;
		}
	}

	if (!phy->bypass_rx_fir) {
		max = ((rx[ADC_FREQ] / ((rx[ADC_FREQ] == rx[R2_FREQ]) ? 1 : 2)) /
    d874:	1809883a 	mov	r4,r3
    d878:	100b883a 	mov	r5,r2
    d87c:	001d7a40 	call	1d7a4 <__udivsi3>
    d880:	1004913a 	slli	r2,r2,4
    d884:	e0bff215 	stw	r2,-56(fp)
				rx[RX_SAMPL_FREQ]) * 16;
		if (phy->rx_fir_ntaps > max) {
    d888:	e0bfff17 	ldw	r2,-4(fp)
    d88c:	10805ec3 	ldbu	r2,379(r2)
    d890:	10803fcc 	andi	r2,r2,255
    d894:	e0fff217 	ldw	r3,-56(fp)
    d898:	18800b2e 	bgeu	r3,r2,d8c8 <ad9361_validate_enable_fir+0x450>
			dev_err(dev,
    d89c:	010000b4 	movhi	r4,2
    d8a0:	211def04 	addi	r4,r4,30652
    d8a4:	014000b4 	movhi	r5,2
    d8a8:	295f9a04 	addi	r5,r5,32360
    d8ac:	e1bff217 	ldw	r6,-56(fp)
    d8b0:	001f8180 	call	1f818 <printf>
    d8b4:	010000b4 	movhi	r4,2
    d8b8:	211a7504 	addi	r4,r4,27092
    d8bc:	001f8180 	call	1f818 <printf>
				"%s: Invalid: ratio ADC/2 / RX_SAMPL * 16 > TAPS (max %"PRIu32")",
				__func__, max);
			return -EINVAL;
    d8c0:	00bffa84 	movi	r2,-22
    d8c4:	00002e06 	br	d980 <ad9361_validate_enable_fir+0x508>
		}
	}

	ret = ad9361_set_trx_clock_chain(phy, rx, tx);
    d8c8:	e0fff304 	addi	r3,fp,-52
    d8cc:	e0bff904 	addi	r2,fp,-28
    d8d0:	e13fff17 	ldw	r4,-4(fp)
    d8d4:	180b883a 	mov	r5,r3
    d8d8:	100d883a 	mov	r6,r2
    d8dc:	00099d80 	call	99d8 <ad9361_set_trx_clock_chain>
    d8e0:	e0bff015 	stw	r2,-64(fp)
	if (ret < 0)
    d8e4:	e0bff017 	ldw	r2,-64(fp)
    d8e8:	1000020e 	bge	r2,zero,d8f4 <ad9361_validate_enable_fir+0x47c>
		return ret;
    d8ec:	e0bff017 	ldw	r2,-64(fp)
    d8f0:	00002306 	br	d980 <ad9361_validate_enable_fir+0x508>

	/* See also: ad9361_set_trx_clock_chain() */
	if (!phy->pdata->dig_interface_tune_fir_disable &&
    d8f4:	e0bfff17 	ldw	r2,-4(fp)
    d8f8:	10803017 	ldw	r2,192(r2)
    d8fc:	10800543 	ldbu	r2,21(r2)
    d900:	10803fcc 	andi	r2,r2,255
    d904:	10000c1e 	bne	r2,zero,d938 <ad9361_validate_enable_fir+0x4c0>
		phy->bypass_tx_fir && phy->bypass_rx_fir)
    d908:	e0bfff17 	ldw	r2,-4(fp)
    d90c:	10804f43 	ldbu	r2,317(r2)
	ret = ad9361_set_trx_clock_chain(phy, rx, tx);
	if (ret < 0)
		return ret;

	/* See also: ad9361_set_trx_clock_chain() */
	if (!phy->pdata->dig_interface_tune_fir_disable &&
    d910:	10803fcc 	andi	r2,r2,255
    d914:	10000826 	beq	r2,zero,d938 <ad9361_validate_enable_fir+0x4c0>
		phy->bypass_tx_fir && phy->bypass_rx_fir)
    d918:	e0bfff17 	ldw	r2,-4(fp)
    d91c:	10804f03 	ldbu	r2,316(r2)
    d920:	10803fcc 	andi	r2,r2,255
    d924:	10000426 	beq	r2,zero,d938 <ad9361_validate_enable_fir+0x4c0>
		ad9361_dig_tune(phy, 0, RESTORE_DEFAULT);
    d928:	e13fff17 	ldw	r4,-4(fp)
    d92c:	000b883a 	mov	r5,zero
    d930:	01800804 	movi	r6,32
    d934:	00159980 	call	15998 <ad9361_dig_tune>

	return ad9361_update_rf_bandwidth(phy,
    d938:	e0bfef17 	ldw	r2,-68(fp)
    d93c:	10000326 	beq	r2,zero,d94c <ad9361_validate_enable_fir+0x4d4>
    d940:	e0bfff17 	ldw	r2,-4(fp)
    d944:	10c05c17 	ldw	r3,368(r2)
    d948:	00000206 	br	d954 <ad9361_validate_enable_fir+0x4dc>
    d94c:	e0bfff17 	ldw	r2,-4(fp)
    d950:	10c04b17 	ldw	r3,300(r2)
    d954:	e0bfef17 	ldw	r2,-68(fp)
    d958:	10000326 	beq	r2,zero,d968 <ad9361_validate_enable_fir+0x4f0>
    d95c:	e0bfff17 	ldw	r2,-4(fp)
    d960:	10805d17 	ldw	r2,372(r2)
    d964:	00000206 	br	d970 <ad9361_validate_enable_fir+0x4f8>
    d968:	e0bfff17 	ldw	r2,-4(fp)
    d96c:	10804c17 	ldw	r2,304(r2)
    d970:	e13fff17 	ldw	r4,-4(fp)
    d974:	180b883a 	mov	r5,r3
    d978:	100d883a 	mov	r6,r2
    d97c:	000cbb00 	call	cbb0 <ad9361_update_rf_bandwidth>
		valid ? phy->filt_rx_bw_Hz : phy->current_rx_bw_Hz,
		valid ? phy->filt_tx_bw_Hz : phy->current_tx_bw_Hz);
}
    d980:	e037883a 	mov	sp,fp
    d984:	dfc00117 	ldw	ra,4(sp)
    d988:	df000017 	ldw	fp,0(sp)
    d98c:	dec00204 	addi	sp,sp,8
    d990:	f800283a 	ret

0000d994 <ad9361_set_muldiv>:
* @param mul The multiplier value.
* @param div The divider value.
* @return 0 in case of success, negative error code otherwise.
*/
static inline int32_t ad9361_set_muldiv(struct refclk_scale *priv, uint32_t mul, uint32_t div)
{
    d994:	defffc04 	addi	sp,sp,-16
    d998:	de00012e 	bgeu	sp,et,d9a0 <ad9361_set_muldiv+0xc>
    d99c:	003b68fa 	trap	3
    d9a0:	df000315 	stw	fp,12(sp)
    d9a4:	df000304 	addi	fp,sp,12
    d9a8:	e13ffd15 	stw	r4,-12(fp)
    d9ac:	e17ffe15 	stw	r5,-8(fp)
    d9b0:	e1bfff15 	stw	r6,-4(fp)
	priv->mult = mul;
    d9b4:	e0bffd17 	ldw	r2,-12(fp)
    d9b8:	e0fffe17 	ldw	r3,-8(fp)
    d9bc:	10c00215 	stw	r3,8(r2)
	priv->div = div;
    d9c0:	e0bffd17 	ldw	r2,-12(fp)
    d9c4:	e0ffff17 	ldw	r3,-4(fp)
    d9c8:	10c00315 	stw	r3,12(r2)
	return 0;
    d9cc:	0005883a 	mov	r2,zero
}
    d9d0:	e037883a 	mov	sp,fp
    d9d4:	df000017 	ldw	fp,0(sp)
    d9d8:	dec00104 	addi	sp,sp,4
    d9dc:	f800283a 	ret

0000d9e0 <ad9361_get_clk_scaler>:
 * Get the clk scaler for the selected refclk_scale structure.
 * @param priv The selected refclk_scale structure.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_get_clk_scaler(struct refclk_scale *clk_priv)
{
    d9e0:	defffa04 	addi	sp,sp,-24
    d9e4:	de00012e 	bgeu	sp,et,d9ec <ad9361_get_clk_scaler+0xc>
    d9e8:	003b68fa 	trap	3
    d9ec:	dfc00515 	stw	ra,20(sp)
    d9f0:	df000415 	stw	fp,16(sp)
    d9f4:	df000404 	addi	fp,sp,16
    d9f8:	e13fff15 	stw	r4,-4(fp)
	struct spi_device *spi = clk_priv->spi;
    d9fc:	e0bfff17 	ldw	r2,-4(fp)
    da00:	10800017 	ldw	r2,0(r2)
    da04:	e0bffd15 	stw	r2,-12(fp)
	uint32_t tmp, tmp1;

	switch (clk_priv->source) {
    da08:	e0bfff17 	ldw	r2,-4(fp)
    da0c:	10800417 	ldw	r2,16(r2)
    da10:	10c003a8 	cmpgeui	r3,r2,14
    da14:	1800e21e 	bne	r3,zero,dda0 <ad9361_get_clk_scaler+0x3c0>
    da18:	100690ba 	slli	r3,r2,2
    da1c:	00800074 	movhi	r2,1
    da20:	10b68c04 	addi	r2,r2,-9680
    da24:	1885883a 	add	r2,r3,r2
    da28:	10800017 	ldw	r2,0(r2)
    da2c:	1000683a 	jmp	r2
    da30:	0000da68 	cmpgeui	zero,zero,873
    da34:	0000da88 	cmpgei	zero,zero,874
    da38:	0000dae4 	muli	zero,zero,875
    da3c:	0000dda0 	cmpeqi	zero,zero,886
    da40:	0000db08 	cmpgei	zero,zero,876
    da44:	0000db3c 	xorhi	zero,zero,876
    da48:	0000db78 	rdprs	zero,zero,877
    da4c:	0000dbb4 	movhi	zero,878
    da50:	0000dbf0 	cmpltui	zero,zero,879
    da54:	0000dc50 	cmplti	zero,zero,881
    da58:	0000dc8c 	andi	zero,zero,882
    da5c:	0000dcc8 	cmpgei	zero,zero,883
    da60:	0000dd04 	movi	zero,884
    da64:	0000dd40 	call	dd4 <ad9361_bist_tone+0x188>
	case BB_REFCLK:
		tmp = ad9361_spi_read(spi, REG_CLOCK_CTRL);
    da68:	e13ffd17 	ldw	r4,-12(fp)
    da6c:	01401144 	movi	r5,69
    da70:	00001500 	call	150 <ad9361_spi_read>
    da74:	e0bffc15 	stw	r2,-16(fp)
		tmp &= 0x3;
    da78:	e0bffc17 	ldw	r2,-16(fp)
    da7c:	108000cc 	andi	r2,r2,3
    da80:	e0bffc15 	stw	r2,-16(fp)
		break;
    da84:	0000c806 	br	dda8 <ad9361_get_clk_scaler+0x3c8>
	case RX_REFCLK:
		tmp = ad9361_spi_readf(spi, REG_REF_DIVIDE_CONFIG_1,
    da88:	01000044 	movi	r4,1
    da8c:	001c8300 	call	1c830 <find_first_bit>
    da90:	e13ffd17 	ldw	r4,-12(fp)
    da94:	0140aac4 	movi	r5,683
    da98:	01800044 	movi	r6,1
    da9c:	100f883a 	mov	r7,r2
    daa0:	00001b80 	call	1b8 <__ad9361_spi_readf>
    daa4:	e0bffc15 	stw	r2,-16(fp)
			RX_REF_DIVIDER_MSB);
		tmp1 = ad9361_spi_readf(spi, REG_REF_DIVIDE_CONFIG_2,
    daa8:	01002004 	movi	r4,128
    daac:	001c8300 	call	1c830 <find_first_bit>
    dab0:	e13ffd17 	ldw	r4,-12(fp)
    dab4:	0140ab04 	movi	r5,684
    dab8:	01802004 	movi	r6,128
    dabc:	100f883a 	mov	r7,r2
    dac0:	00001b80 	call	1b8 <__ad9361_spi_readf>
    dac4:	e0bffe15 	stw	r2,-8(fp)
			RX_REF_DIVIDER_LSB);
		tmp = (tmp << 1) | tmp1;
    dac8:	e0bffc17 	ldw	r2,-16(fp)
    dacc:	1085883a 	add	r2,r2,r2
    dad0:	1007883a 	mov	r3,r2
    dad4:	e0bffe17 	ldw	r2,-8(fp)
    dad8:	1884b03a 	or	r2,r3,r2
    dadc:	e0bffc15 	stw	r2,-16(fp)
		break;
    dae0:	0000b106 	br	dda8 <ad9361_get_clk_scaler+0x3c8>
	case TX_REFCLK:
		tmp = ad9361_spi_readf(spi, REG_REF_DIVIDE_CONFIG_2,
    dae4:	01000304 	movi	r4,12
    dae8:	001c8300 	call	1c830 <find_first_bit>
    daec:	e13ffd17 	ldw	r4,-12(fp)
    daf0:	0140ab04 	movi	r5,684
    daf4:	01800304 	movi	r6,12
    daf8:	100f883a 	mov	r7,r2
    dafc:	00001b80 	call	1b8 <__ad9361_spi_readf>
    db00:	e0bffc15 	stw	r2,-16(fp)
			TX_REF_DIVIDER(~0));
		break;
    db04:	0000a806 	br	dda8 <ad9361_get_clk_scaler+0x3c8>
	case ADC_CLK:
		tmp = ad9361_spi_read(spi, REG_BBPLL);
    db08:	e13ffd17 	ldw	r4,-12(fp)
    db0c:	01400284 	movi	r5,10
    db10:	00001500 	call	150 <ad9361_spi_read>
    db14:	e0bffc15 	stw	r2,-16(fp)
		return ad9361_set_muldiv(clk_priv, 1, 1 << (tmp & 0x7));
    db18:	e0bffc17 	ldw	r2,-16(fp)
    db1c:	108001cc 	andi	r2,r2,7
    db20:	00c00044 	movi	r3,1
    db24:	1884983a 	sll	r2,r3,r2
    db28:	e13fff17 	ldw	r4,-4(fp)
    db2c:	01400044 	movi	r5,1
    db30:	100d883a 	mov	r6,r2
    db34:	000d9940 	call	d994 <ad9361_set_muldiv>
    db38:	0000bb06 	br	de28 <ad9361_get_clk_scaler+0x448>
	case R2_CLK:
		tmp = ad9361_spi_readf(spi, REG_RX_ENABLE_FILTER_CTRL,
    db3c:	01000c04 	movi	r4,48
    db40:	001c8300 	call	1c830 <find_first_bit>
    db44:	e13ffd17 	ldw	r4,-12(fp)
    db48:	014000c4 	movi	r5,3
    db4c:	01800c04 	movi	r6,48
    db50:	100f883a 	mov	r7,r2
    db54:	00001b80 	call	1b8 <__ad9361_spi_readf>
    db58:	e0bffc15 	stw	r2,-16(fp)
			DEC3_ENABLE_DECIMATION(~0));
		return ad9361_set_muldiv(clk_priv, 1, tmp + 1);
    db5c:	e0bffc17 	ldw	r2,-16(fp)
    db60:	10800044 	addi	r2,r2,1
    db64:	e13fff17 	ldw	r4,-4(fp)
    db68:	01400044 	movi	r5,1
    db6c:	100d883a 	mov	r6,r2
    db70:	000d9940 	call	d994 <ad9361_set_muldiv>
    db74:	0000ac06 	br	de28 <ad9361_get_clk_scaler+0x448>
	case R1_CLK:
		tmp = ad9361_spi_readf(spi, REG_RX_ENABLE_FILTER_CTRL, RHB2_EN);
    db78:	01000204 	movi	r4,8
    db7c:	001c8300 	call	1c830 <find_first_bit>
    db80:	e13ffd17 	ldw	r4,-12(fp)
    db84:	014000c4 	movi	r5,3
    db88:	01800204 	movi	r6,8
    db8c:	100f883a 	mov	r7,r2
    db90:	00001b80 	call	1b8 <__ad9361_spi_readf>
    db94:	e0bffc15 	stw	r2,-16(fp)
		return ad9361_set_muldiv(clk_priv, 1, tmp + 1);
    db98:	e0bffc17 	ldw	r2,-16(fp)
    db9c:	10800044 	addi	r2,r2,1
    dba0:	e13fff17 	ldw	r4,-4(fp)
    dba4:	01400044 	movi	r5,1
    dba8:	100d883a 	mov	r6,r2
    dbac:	000d9940 	call	d994 <ad9361_set_muldiv>
    dbb0:	00009d06 	br	de28 <ad9361_get_clk_scaler+0x448>
	case CLKRF_CLK:
		tmp = ad9361_spi_readf(spi, REG_RX_ENABLE_FILTER_CTRL, RHB1_EN);
    dbb4:	01000104 	movi	r4,4
    dbb8:	001c8300 	call	1c830 <find_first_bit>
    dbbc:	e13ffd17 	ldw	r4,-12(fp)
    dbc0:	014000c4 	movi	r5,3
    dbc4:	01800104 	movi	r6,4
    dbc8:	100f883a 	mov	r7,r2
    dbcc:	00001b80 	call	1b8 <__ad9361_spi_readf>
    dbd0:	e0bffc15 	stw	r2,-16(fp)
		return ad9361_set_muldiv(clk_priv, 1, tmp + 1);
    dbd4:	e0bffc17 	ldw	r2,-16(fp)
    dbd8:	10800044 	addi	r2,r2,1
    dbdc:	e13fff17 	ldw	r4,-4(fp)
    dbe0:	01400044 	movi	r5,1
    dbe4:	100d883a 	mov	r6,r2
    dbe8:	000d9940 	call	d994 <ad9361_set_muldiv>
    dbec:	00008e06 	br	de28 <ad9361_get_clk_scaler+0x448>
	case RX_SAMPL_CLK:
		tmp = ad9361_spi_readf(spi, REG_RX_ENABLE_FILTER_CTRL,
    dbf0:	010000c4 	movi	r4,3
    dbf4:	001c8300 	call	1c830 <find_first_bit>
    dbf8:	e13ffd17 	ldw	r4,-12(fp)
    dbfc:	014000c4 	movi	r5,3
    dc00:	018000c4 	movi	r6,3
    dc04:	100f883a 	mov	r7,r2
    dc08:	00001b80 	call	1b8 <__ad9361_spi_readf>
    dc0c:	e0bffc15 	stw	r2,-16(fp)
			RX_FIR_ENABLE_DECIMATION(~0));

		if (!tmp)
    dc10:	e0bffc17 	ldw	r2,-16(fp)
    dc14:	1000031e 	bne	r2,zero,dc24 <ad9361_get_clk_scaler+0x244>
			tmp = 1; /* bypass filter */
    dc18:	00800044 	movi	r2,1
    dc1c:	e0bffc15 	stw	r2,-16(fp)
    dc20:	00000606 	br	dc3c <ad9361_get_clk_scaler+0x25c>
		else
			tmp = (1 << (tmp - 1));
    dc24:	e0bffc17 	ldw	r2,-16(fp)
    dc28:	10bfffc4 	addi	r2,r2,-1
    dc2c:	1007883a 	mov	r3,r2
    dc30:	00800044 	movi	r2,1
    dc34:	10c4983a 	sll	r2,r2,r3
    dc38:	e0bffc15 	stw	r2,-16(fp)

		return ad9361_set_muldiv(clk_priv, 1, tmp);
    dc3c:	e13fff17 	ldw	r4,-4(fp)
    dc40:	01400044 	movi	r5,1
    dc44:	e1bffc17 	ldw	r6,-16(fp)
    dc48:	000d9940 	call	d994 <ad9361_set_muldiv>
    dc4c:	00007606 	br	de28 <ad9361_get_clk_scaler+0x448>
	case DAC_CLK:
		tmp = ad9361_spi_readf(spi, REG_BBPLL, BIT(3));
    dc50:	01000204 	movi	r4,8
    dc54:	001c8300 	call	1c830 <find_first_bit>
    dc58:	e13ffd17 	ldw	r4,-12(fp)
    dc5c:	01400284 	movi	r5,10
    dc60:	01800204 	movi	r6,8
    dc64:	100f883a 	mov	r7,r2
    dc68:	00001b80 	call	1b8 <__ad9361_spi_readf>
    dc6c:	e0bffc15 	stw	r2,-16(fp)
		return ad9361_set_muldiv(clk_priv, 1, tmp + 1);
    dc70:	e0bffc17 	ldw	r2,-16(fp)
    dc74:	10800044 	addi	r2,r2,1
    dc78:	e13fff17 	ldw	r4,-4(fp)
    dc7c:	01400044 	movi	r5,1
    dc80:	100d883a 	mov	r6,r2
    dc84:	000d9940 	call	d994 <ad9361_set_muldiv>
    dc88:	00006706 	br	de28 <ad9361_get_clk_scaler+0x448>
	case T2_CLK:
		tmp = ad9361_spi_readf(spi, REG_TX_ENABLE_FILTER_CTRL,
    dc8c:	01000c04 	movi	r4,48
    dc90:	001c8300 	call	1c830 <find_first_bit>
    dc94:	e13ffd17 	ldw	r4,-12(fp)
    dc98:	01400084 	movi	r5,2
    dc9c:	01800c04 	movi	r6,48
    dca0:	100f883a 	mov	r7,r2
    dca4:	00001b80 	call	1b8 <__ad9361_spi_readf>
    dca8:	e0bffc15 	stw	r2,-16(fp)
			THB3_ENABLE_INTERP(~0));
		return ad9361_set_muldiv(clk_priv, 1, tmp + 1);
    dcac:	e0bffc17 	ldw	r2,-16(fp)
    dcb0:	10800044 	addi	r2,r2,1
    dcb4:	e13fff17 	ldw	r4,-4(fp)
    dcb8:	01400044 	movi	r5,1
    dcbc:	100d883a 	mov	r6,r2
    dcc0:	000d9940 	call	d994 <ad9361_set_muldiv>
    dcc4:	00005806 	br	de28 <ad9361_get_clk_scaler+0x448>
	case T1_CLK:
		tmp = ad9361_spi_readf(spi, REG_TX_ENABLE_FILTER_CTRL, THB2_EN);
    dcc8:	01000204 	movi	r4,8
    dccc:	001c8300 	call	1c830 <find_first_bit>
    dcd0:	e13ffd17 	ldw	r4,-12(fp)
    dcd4:	01400084 	movi	r5,2
    dcd8:	01800204 	movi	r6,8
    dcdc:	100f883a 	mov	r7,r2
    dce0:	00001b80 	call	1b8 <__ad9361_spi_readf>
    dce4:	e0bffc15 	stw	r2,-16(fp)
		return ad9361_set_muldiv(clk_priv, 1, tmp + 1);
    dce8:	e0bffc17 	ldw	r2,-16(fp)
    dcec:	10800044 	addi	r2,r2,1
    dcf0:	e13fff17 	ldw	r4,-4(fp)
    dcf4:	01400044 	movi	r5,1
    dcf8:	100d883a 	mov	r6,r2
    dcfc:	000d9940 	call	d994 <ad9361_set_muldiv>
    dd00:	00004906 	br	de28 <ad9361_get_clk_scaler+0x448>
	case CLKTF_CLK:
		tmp = ad9361_spi_readf(spi, REG_TX_ENABLE_FILTER_CTRL, THB1_EN);
    dd04:	01000104 	movi	r4,4
    dd08:	001c8300 	call	1c830 <find_first_bit>
    dd0c:	e13ffd17 	ldw	r4,-12(fp)
    dd10:	01400084 	movi	r5,2
    dd14:	01800104 	movi	r6,4
    dd18:	100f883a 	mov	r7,r2
    dd1c:	00001b80 	call	1b8 <__ad9361_spi_readf>
    dd20:	e0bffc15 	stw	r2,-16(fp)
		return ad9361_set_muldiv(clk_priv, 1, tmp + 1);
    dd24:	e0bffc17 	ldw	r2,-16(fp)
    dd28:	10800044 	addi	r2,r2,1
    dd2c:	e13fff17 	ldw	r4,-4(fp)
    dd30:	01400044 	movi	r5,1
    dd34:	100d883a 	mov	r6,r2
    dd38:	000d9940 	call	d994 <ad9361_set_muldiv>
    dd3c:	00003a06 	br	de28 <ad9361_get_clk_scaler+0x448>
	case TX_SAMPL_CLK:
		tmp = ad9361_spi_readf(spi, REG_TX_ENABLE_FILTER_CTRL,
    dd40:	010000c4 	movi	r4,3
    dd44:	001c8300 	call	1c830 <find_first_bit>
    dd48:	e13ffd17 	ldw	r4,-12(fp)
    dd4c:	01400084 	movi	r5,2
    dd50:	018000c4 	movi	r6,3
    dd54:	100f883a 	mov	r7,r2
    dd58:	00001b80 	call	1b8 <__ad9361_spi_readf>
    dd5c:	e0bffc15 	stw	r2,-16(fp)
			TX_FIR_ENABLE_INTERPOLATION(~0));

		if (!tmp)
    dd60:	e0bffc17 	ldw	r2,-16(fp)
    dd64:	1000031e 	bne	r2,zero,dd74 <ad9361_get_clk_scaler+0x394>
			tmp = 1; /* bypass filter */
    dd68:	00800044 	movi	r2,1
    dd6c:	e0bffc15 	stw	r2,-16(fp)
    dd70:	00000606 	br	dd8c <ad9361_get_clk_scaler+0x3ac>
		else
			tmp = (1 << (tmp - 1));
    dd74:	e0bffc17 	ldw	r2,-16(fp)
    dd78:	10bfffc4 	addi	r2,r2,-1
    dd7c:	1007883a 	mov	r3,r2
    dd80:	00800044 	movi	r2,1
    dd84:	10c4983a 	sll	r2,r2,r3
    dd88:	e0bffc15 	stw	r2,-16(fp)

		return ad9361_set_muldiv(clk_priv, 1, tmp);
    dd8c:	e13fff17 	ldw	r4,-4(fp)
    dd90:	01400044 	movi	r5,1
    dd94:	e1bffc17 	ldw	r6,-16(fp)
    dd98:	000d9940 	call	d994 <ad9361_set_muldiv>
    dd9c:	00002206 	br	de28 <ad9361_get_clk_scaler+0x448>
	default:
		return -EINVAL;
    dda0:	00bffa84 	movi	r2,-22
    dda4:	00002006 	br	de28 <ad9361_get_clk_scaler+0x448>
	}

	/* REFCLK Scaler */
	switch (tmp) {
    dda8:	e0bffc17 	ldw	r2,-16(fp)
    ddac:	10c00060 	cmpeqi	r3,r2,1
    ddb0:	18000b1e 	bne	r3,zero,dde0 <ad9361_get_clk_scaler+0x400>
    ddb4:	0080052e 	bgeu	zero,r2,ddcc <ad9361_get_clk_scaler+0x3ec>
    ddb8:	10c000a0 	cmpeqi	r3,r2,2
    ddbc:	18000d1e 	bne	r3,zero,ddf4 <ad9361_get_clk_scaler+0x414>
    ddc0:	108000e0 	cmpeqi	r2,r2,3
    ddc4:	1000101e 	bne	r2,zero,de08 <ad9361_get_clk_scaler+0x428>
    ddc8:	00001406 	br	de1c <ad9361_get_clk_scaler+0x43c>
	case 0:
		ad9361_set_muldiv(clk_priv, 1, 1);
    ddcc:	e13fff17 	ldw	r4,-4(fp)
    ddd0:	01400044 	movi	r5,1
    ddd4:	01800044 	movi	r6,1
    ddd8:	000d9940 	call	d994 <ad9361_set_muldiv>
		break;
    dddc:	00001106 	br	de24 <ad9361_get_clk_scaler+0x444>
	case 1:
		ad9361_set_muldiv(clk_priv, 1, 2);
    dde0:	e13fff17 	ldw	r4,-4(fp)
    dde4:	01400044 	movi	r5,1
    dde8:	01800084 	movi	r6,2
    ddec:	000d9940 	call	d994 <ad9361_set_muldiv>
		break;
    ddf0:	00000c06 	br	de24 <ad9361_get_clk_scaler+0x444>
	case 2:
		ad9361_set_muldiv(clk_priv, 1, 4);
    ddf4:	e13fff17 	ldw	r4,-4(fp)
    ddf8:	01400044 	movi	r5,1
    ddfc:	01800104 	movi	r6,4
    de00:	000d9940 	call	d994 <ad9361_set_muldiv>
		break;
    de04:	00000706 	br	de24 <ad9361_get_clk_scaler+0x444>
	case 3:
		ad9361_set_muldiv(clk_priv, 2, 1);
    de08:	e13fff17 	ldw	r4,-4(fp)
    de0c:	01400084 	movi	r5,2
    de10:	01800044 	movi	r6,1
    de14:	000d9940 	call	d994 <ad9361_set_muldiv>
		break;
    de18:	00000206 	br	de24 <ad9361_get_clk_scaler+0x444>
	default:
		return -EINVAL;
    de1c:	00bffa84 	movi	r2,-22
    de20:	00000106 	br	de28 <ad9361_get_clk_scaler+0x448>

	}

	return 0;
    de24:	0005883a 	mov	r2,zero
}
    de28:	e037883a 	mov	sp,fp
    de2c:	dfc00117 	ldw	ra,4(sp)
    de30:	df000017 	ldw	fp,0(sp)
    de34:	dec00204 	addi	sp,sp,8
    de38:	f800283a 	ret

0000de3c <ad9361_to_refclk_scaler>:
 * Note: REFCLK Scaler values - 00: x1; 01: x½; 10: x¼; 11: x2.
 * @param clk_priv The selected refclk_scale structure.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_to_refclk_scaler(struct refclk_scale *clk_priv)
{
    de3c:	defffe04 	addi	sp,sp,-8
    de40:	de00012e 	bgeu	sp,et,de48 <ad9361_to_refclk_scaler+0xc>
    de44:	003b68fa 	trap	3
    de48:	df000115 	stw	fp,4(sp)
    de4c:	df000104 	addi	fp,sp,4
    de50:	e13fff15 	stw	r4,-4(fp)
	/* REFCLK Scaler */
	switch (((clk_priv->mult & 0xF) << 4) | (clk_priv->div & 0xF)) {
    de54:	e0bfff17 	ldw	r2,-4(fp)
    de58:	10800217 	ldw	r2,8(r2)
    de5c:	1004913a 	slli	r2,r2,4
    de60:	10c03fcc 	andi	r3,r2,255
    de64:	e0bfff17 	ldw	r2,-4(fp)
    de68:	10800317 	ldw	r2,12(r2)
    de6c:	108003cc 	andi	r2,r2,15
    de70:	1884b03a 	or	r2,r3,r2
    de74:	10c004a0 	cmpeqi	r3,r2,18
    de78:	18000c1e 	bne	r3,zero,deac <ad9361_to_refclk_scaler+0x70>
    de7c:	10c004e8 	cmpgeui	r3,r2,19
    de80:	1800031e 	bne	r3,zero,de90 <ad9361_to_refclk_scaler+0x54>
    de84:	10800460 	cmpeqi	r2,r2,17
    de88:	1000061e 	bne	r2,zero,dea4 <ad9361_to_refclk_scaler+0x68>
    de8c:	00000d06 	br	dec4 <ad9361_to_refclk_scaler+0x88>
    de90:	10c00520 	cmpeqi	r3,r2,20
    de94:	1800071e 	bne	r3,zero,deb4 <ad9361_to_refclk_scaler+0x78>
    de98:	10800860 	cmpeqi	r2,r2,33
    de9c:	1000071e 	bne	r2,zero,debc <ad9361_to_refclk_scaler+0x80>
    dea0:	00000806 	br	dec4 <ad9361_to_refclk_scaler+0x88>
	case 0x11:
		return 0;
    dea4:	0005883a 	mov	r2,zero
    dea8:	00000706 	br	dec8 <ad9361_to_refclk_scaler+0x8c>
	case 0x12:
		return 1;
    deac:	00800044 	movi	r2,1
    deb0:	00000506 	br	dec8 <ad9361_to_refclk_scaler+0x8c>
	case 0x14:
		return 2;
    deb4:	00800084 	movi	r2,2
    deb8:	00000306 	br	dec8 <ad9361_to_refclk_scaler+0x8c>
	case 0x21:
		return 3;
    debc:	008000c4 	movi	r2,3
    dec0:	00000106 	br	dec8 <ad9361_to_refclk_scaler+0x8c>
	default:
		return -EINVAL;
    dec4:	00bffa84 	movi	r2,-22
	}
};
    dec8:	e037883a 	mov	sp,fp
    decc:	df000017 	ldw	fp,0(sp)
    ded0:	dec00104 	addi	sp,sp,4
    ded4:	f800283a 	ret

0000ded8 <ad9361_set_clk_scaler>:
 * @param set Set true, the reference clock frequency will be scaled before
 *            it enters the BBPLL.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_set_clk_scaler(struct refclk_scale *clk_priv, bool set)
{
    ded8:	defff804 	addi	sp,sp,-32
    dedc:	de00012e 	bgeu	sp,et,dee4 <ad9361_set_clk_scaler+0xc>
    dee0:	003b68fa 	trap	3
    dee4:	dfc00715 	stw	ra,28(sp)
    dee8:	df000615 	stw	fp,24(sp)
    deec:	df000604 	addi	fp,sp,24
    def0:	e13ffe15 	stw	r4,-8(fp)
    def4:	2805883a 	mov	r2,r5
    def8:	e0bfff05 	stb	r2,-4(fp)
	struct spi_device *spi = clk_priv->spi;
    defc:	e0bffe17 	ldw	r2,-8(fp)
    df00:	10800017 	ldw	r2,0(r2)
    df04:	e0bffc15 	stw	r2,-16(fp)
	uint32_t tmp;
	int32_t ret;

	switch (clk_priv->source) {
    df08:	e0bffe17 	ldw	r2,-8(fp)
    df0c:	10800417 	ldw	r2,16(r2)
    df10:	10c003a8 	cmpgeui	r3,r2,14
    df14:	1801a91e 	bne	r3,zero,e5bc <ad9361_set_clk_scaler+0x6e4>
    df18:	100690ba 	slli	r3,r2,2
    df1c:	00800074 	movhi	r2,1
    df20:	10b7cc04 	addi	r2,r2,-8400
    df24:	1885883a 	add	r2,r3,r2
    df28:	10800017 	ldw	r2,0(r2)
    df2c:	1000683a 	jmp	r2
    df30:	0000df68 	cmpgeui	zero,zero,893
    df34:	0000dfbc 	xorhi	zero,zero,894
    df38:	0000e060 	cmpeqi	zero,zero,897
    df3c:	0000e5bc 	xorhi	zero,zero,918
    df40:	0000e0b4 	movhi	zero,898
    df44:	0000e130 	cmpltui	zero,zero,900
    df48:	0000e1a4 	muli	zero,zero,902
    df4c:	0000e218 	cmpnei	zero,zero,904
    df50:	0000e28c 	andi	zero,zero,906
    df54:	0000e33c 	xorhi	zero,zero,908
    df58:	0000e3b0 	cmpltui	zero,zero,910
    df5c:	0000e424 	muli	zero,zero,912
    df60:	0000e498 	cmpnei	zero,zero,914
    df64:	0000e50c 	andi	zero,zero,916
	case BB_REFCLK:
		ret = ad9361_to_refclk_scaler(clk_priv);
    df68:	e13ffe17 	ldw	r4,-8(fp)
    df6c:	000de3c0 	call	de3c <ad9361_to_refclk_scaler>
    df70:	e0bffd15 	stw	r2,-12(fp)
		if (ret < 0)
    df74:	e0bffd17 	ldw	r2,-12(fp)
    df78:	1000020e 	bge	r2,zero,df84 <ad9361_set_clk_scaler+0xac>
			return ret;
    df7c:	e0bffd17 	ldw	r2,-12(fp)
    df80:	00019106 	br	e5c8 <ad9361_set_clk_scaler+0x6f0>
		if (set)
    df84:	e0bfff03 	ldbu	r2,-4(fp)
    df88:	10000b26 	beq	r2,zero,dfb8 <ad9361_set_clk_scaler+0xe0>
			return ad9361_spi_writef(spi, REG_CLOCK_CTRL,
    df8c:	010000c4 	movi	r4,3
    df90:	001c8300 	call	1c830 <find_first_bit>
    df94:	1007883a 	mov	r3,r2
    df98:	e0bffd17 	ldw	r2,-12(fp)
    df9c:	d8800015 	stw	r2,0(sp)
    dfa0:	e13ffc17 	ldw	r4,-16(fp)
    dfa4:	01401144 	movi	r5,69
    dfa8:	018000c4 	movi	r6,3
    dfac:	180f883a 	mov	r7,r3
    dfb0:	000031c0 	call	31c <__ad9361_spi_writef>
    dfb4:	00018406 	br	e5c8 <ad9361_set_clk_scaler+0x6f0>
						REF_FREQ_SCALER(~0), ret);
		break;
    dfb8:	00018206 	br	e5c4 <ad9361_set_clk_scaler+0x6ec>

	case RX_REFCLK:
		ret = ad9361_to_refclk_scaler(clk_priv);
    dfbc:	e13ffe17 	ldw	r4,-8(fp)
    dfc0:	000de3c0 	call	de3c <ad9361_to_refclk_scaler>
    dfc4:	e0bffd15 	stw	r2,-12(fp)
		if (ret < 0)
    dfc8:	e0bffd17 	ldw	r2,-12(fp)
    dfcc:	1000020e 	bge	r2,zero,dfd8 <ad9361_set_clk_scaler+0x100>
			return ret;
    dfd0:	e0bffd17 	ldw	r2,-12(fp)
    dfd4:	00017c06 	br	e5c8 <ad9361_set_clk_scaler+0x6f0>
		if (set) {
    dfd8:	e0bfff03 	ldbu	r2,-4(fp)
    dfdc:	10001f26 	beq	r2,zero,e05c <ad9361_set_clk_scaler+0x184>
			tmp = ret;
    dfe0:	e0bffd17 	ldw	r2,-12(fp)
    dfe4:	e0bffb15 	stw	r2,-20(fp)
			ret = ad9361_spi_writef(spi, REG_REF_DIVIDE_CONFIG_1,
    dfe8:	01000044 	movi	r4,1
    dfec:	001c8300 	call	1c830 <find_first_bit>
    dff0:	1007883a 	mov	r3,r2
    dff4:	e0bffb17 	ldw	r2,-20(fp)
    dff8:	1004d07a 	srli	r2,r2,1
    dffc:	d8800015 	stw	r2,0(sp)
    e000:	e13ffc17 	ldw	r4,-16(fp)
    e004:	0140aac4 	movi	r5,683
    e008:	01800044 	movi	r6,1
    e00c:	180f883a 	mov	r7,r3
    e010:	000031c0 	call	31c <__ad9361_spi_writef>
    e014:	e0bffd15 	stw	r2,-12(fp)
				RX_REF_DIVIDER_MSB, tmp >> 1);
			ret |= ad9361_spi_writef(spi, REG_REF_DIVIDE_CONFIG_2,
    e018:	01002004 	movi	r4,128
    e01c:	001c8300 	call	1c830 <find_first_bit>
    e020:	1007883a 	mov	r3,r2
    e024:	e0bffb17 	ldw	r2,-20(fp)
    e028:	1080004c 	andi	r2,r2,1
    e02c:	d8800015 	stw	r2,0(sp)
    e030:	e13ffc17 	ldw	r4,-16(fp)
    e034:	0140ab04 	movi	r5,684
    e038:	01802004 	movi	r6,128
    e03c:	180f883a 	mov	r7,r3
    e040:	000031c0 	call	31c <__ad9361_spi_writef>
    e044:	1007883a 	mov	r3,r2
    e048:	e0bffd17 	ldw	r2,-12(fp)
    e04c:	10c4b03a 	or	r2,r2,r3
    e050:	e0bffd15 	stw	r2,-12(fp)
				RX_REF_DIVIDER_LSB, tmp & 1);
			return ret;
    e054:	e0bffd17 	ldw	r2,-12(fp)
    e058:	00015b06 	br	e5c8 <ad9361_set_clk_scaler+0x6f0>
		}
		break;
    e05c:	00015906 	br	e5c4 <ad9361_set_clk_scaler+0x6ec>
	case TX_REFCLK:
		ret = ad9361_to_refclk_scaler(clk_priv);
    e060:	e13ffe17 	ldw	r4,-8(fp)
    e064:	000de3c0 	call	de3c <ad9361_to_refclk_scaler>
    e068:	e0bffd15 	stw	r2,-12(fp)
		if (ret < 0)
    e06c:	e0bffd17 	ldw	r2,-12(fp)
    e070:	1000020e 	bge	r2,zero,e07c <ad9361_set_clk_scaler+0x1a4>
			return ret;
    e074:	e0bffd17 	ldw	r2,-12(fp)
    e078:	00015306 	br	e5c8 <ad9361_set_clk_scaler+0x6f0>
		if (set)
    e07c:	e0bfff03 	ldbu	r2,-4(fp)
    e080:	10000b26 	beq	r2,zero,e0b0 <ad9361_set_clk_scaler+0x1d8>
			return ad9361_spi_writef(spi, REG_REF_DIVIDE_CONFIG_2,
    e084:	01000304 	movi	r4,12
    e088:	001c8300 	call	1c830 <find_first_bit>
    e08c:	1007883a 	mov	r3,r2
    e090:	e0bffd17 	ldw	r2,-12(fp)
    e094:	d8800015 	stw	r2,0(sp)
    e098:	e13ffc17 	ldw	r4,-16(fp)
    e09c:	0140ab04 	movi	r5,684
    e0a0:	01800304 	movi	r6,12
    e0a4:	180f883a 	mov	r7,r3
    e0a8:	000031c0 	call	31c <__ad9361_spi_writef>
    e0ac:	00014606 	br	e5c8 <ad9361_set_clk_scaler+0x6f0>
			TX_REF_DIVIDER(~0), ret);
		break;
    e0b0:	00014406 	br	e5c4 <ad9361_set_clk_scaler+0x6ec>
	case ADC_CLK:
		tmp = ilog2((uint8_t)clk_priv->div);
    e0b4:	e0bffe17 	ldw	r2,-8(fp)
    e0b8:	10800317 	ldw	r2,12(r2)
    e0bc:	10803fcc 	andi	r2,r2,255
    e0c0:	1009883a 	mov	r4,r2
    e0c4:	001c5b40 	call	1c5b4 <ilog2>
    e0c8:	e0bffb15 	stw	r2,-20(fp)
		if (clk_priv->mult != 1 || tmp > 6 || tmp < 1)
    e0cc:	e0bffe17 	ldw	r2,-8(fp)
    e0d0:	10800217 	ldw	r2,8(r2)
    e0d4:	10800058 	cmpnei	r2,r2,1
    e0d8:	1000051e 	bne	r2,zero,e0f0 <ad9361_set_clk_scaler+0x218>
    e0dc:	e0bffb17 	ldw	r2,-20(fp)
    e0e0:	108001e8 	cmpgeui	r2,r2,7
    e0e4:	1000021e 	bne	r2,zero,e0f0 <ad9361_set_clk_scaler+0x218>
    e0e8:	e0bffb17 	ldw	r2,-20(fp)
    e0ec:	1000021e 	bne	r2,zero,e0f8 <ad9361_set_clk_scaler+0x220>
			return -EINVAL;
    e0f0:	00bffa84 	movi	r2,-22
    e0f4:	00013406 	br	e5c8 <ad9361_set_clk_scaler+0x6f0>

		if (set)
    e0f8:	e0bfff03 	ldbu	r2,-4(fp)
    e0fc:	10000b26 	beq	r2,zero,e12c <ad9361_set_clk_scaler+0x254>
			return ad9361_spi_writef(spi, REG_BBPLL, 0x7, tmp);
    e100:	010001c4 	movi	r4,7
    e104:	001c8300 	call	1c830 <find_first_bit>
    e108:	1007883a 	mov	r3,r2
    e10c:	e0bffb17 	ldw	r2,-20(fp)
    e110:	d8800015 	stw	r2,0(sp)
    e114:	e13ffc17 	ldw	r4,-16(fp)
    e118:	01400284 	movi	r5,10
    e11c:	018001c4 	movi	r6,7
    e120:	180f883a 	mov	r7,r3
    e124:	000031c0 	call	31c <__ad9361_spi_writef>
    e128:	00012706 	br	e5c8 <ad9361_set_clk_scaler+0x6f0>
		break;
    e12c:	00012506 	br	e5c4 <ad9361_set_clk_scaler+0x6ec>
	case R2_CLK:
		if (clk_priv->mult != 1 || clk_priv->div > 3 || clk_priv->div < 1)
    e130:	e0bffe17 	ldw	r2,-8(fp)
    e134:	10800217 	ldw	r2,8(r2)
    e138:	10800058 	cmpnei	r2,r2,1
    e13c:	1000071e 	bne	r2,zero,e15c <ad9361_set_clk_scaler+0x284>
    e140:	e0bffe17 	ldw	r2,-8(fp)
    e144:	10800317 	ldw	r2,12(r2)
    e148:	10800128 	cmpgeui	r2,r2,4
    e14c:	1000031e 	bne	r2,zero,e15c <ad9361_set_clk_scaler+0x284>
    e150:	e0bffe17 	ldw	r2,-8(fp)
    e154:	10800317 	ldw	r2,12(r2)
    e158:	1000021e 	bne	r2,zero,e164 <ad9361_set_clk_scaler+0x28c>
			return -EINVAL;
    e15c:	00bffa84 	movi	r2,-22
    e160:	00011906 	br	e5c8 <ad9361_set_clk_scaler+0x6f0>
		if (set)
    e164:	e0bfff03 	ldbu	r2,-4(fp)
    e168:	10000d26 	beq	r2,zero,e1a0 <ad9361_set_clk_scaler+0x2c8>
			return ad9361_spi_writef(spi, REG_RX_ENABLE_FILTER_CTRL,
    e16c:	01000c04 	movi	r4,48
    e170:	001c8300 	call	1c830 <find_first_bit>
    e174:	1007883a 	mov	r3,r2
    e178:	e0bffe17 	ldw	r2,-8(fp)
    e17c:	10800317 	ldw	r2,12(r2)
    e180:	10bfffc4 	addi	r2,r2,-1
    e184:	d8800015 	stw	r2,0(sp)
    e188:	e13ffc17 	ldw	r4,-16(fp)
    e18c:	014000c4 	movi	r5,3
    e190:	01800c04 	movi	r6,48
    e194:	180f883a 	mov	r7,r3
    e198:	000031c0 	call	31c <__ad9361_spi_writef>
    e19c:	00010a06 	br	e5c8 <ad9361_set_clk_scaler+0x6f0>
			DEC3_ENABLE_DECIMATION(~0),
			clk_priv->div - 1);
		break;
    e1a0:	00010806 	br	e5c4 <ad9361_set_clk_scaler+0x6ec>
	case R1_CLK:
		if (clk_priv->mult != 1 || clk_priv->div > 2 || clk_priv->div < 1)
    e1a4:	e0bffe17 	ldw	r2,-8(fp)
    e1a8:	10800217 	ldw	r2,8(r2)
    e1ac:	10800058 	cmpnei	r2,r2,1
    e1b0:	1000071e 	bne	r2,zero,e1d0 <ad9361_set_clk_scaler+0x2f8>
    e1b4:	e0bffe17 	ldw	r2,-8(fp)
    e1b8:	10800317 	ldw	r2,12(r2)
    e1bc:	108000e8 	cmpgeui	r2,r2,3
    e1c0:	1000031e 	bne	r2,zero,e1d0 <ad9361_set_clk_scaler+0x2f8>
    e1c4:	e0bffe17 	ldw	r2,-8(fp)
    e1c8:	10800317 	ldw	r2,12(r2)
    e1cc:	1000021e 	bne	r2,zero,e1d8 <ad9361_set_clk_scaler+0x300>
			return -EINVAL;
    e1d0:	00bffa84 	movi	r2,-22
    e1d4:	0000fc06 	br	e5c8 <ad9361_set_clk_scaler+0x6f0>
		if (set)
    e1d8:	e0bfff03 	ldbu	r2,-4(fp)
    e1dc:	10000d26 	beq	r2,zero,e214 <ad9361_set_clk_scaler+0x33c>
			return ad9361_spi_writef(spi, REG_RX_ENABLE_FILTER_CTRL,
    e1e0:	01000204 	movi	r4,8
    e1e4:	001c8300 	call	1c830 <find_first_bit>
    e1e8:	1007883a 	mov	r3,r2
    e1ec:	e0bffe17 	ldw	r2,-8(fp)
    e1f0:	10800317 	ldw	r2,12(r2)
    e1f4:	10bfffc4 	addi	r2,r2,-1
    e1f8:	d8800015 	stw	r2,0(sp)
    e1fc:	e13ffc17 	ldw	r4,-16(fp)
    e200:	014000c4 	movi	r5,3
    e204:	01800204 	movi	r6,8
    e208:	180f883a 	mov	r7,r3
    e20c:	000031c0 	call	31c <__ad9361_spi_writef>
    e210:	0000ed06 	br	e5c8 <ad9361_set_clk_scaler+0x6f0>
			RHB2_EN, clk_priv->div - 1);
		break;
    e214:	0000eb06 	br	e5c4 <ad9361_set_clk_scaler+0x6ec>
	case CLKRF_CLK:
		if (clk_priv->mult != 1 || clk_priv->div > 2 || clk_priv->div < 1)
    e218:	e0bffe17 	ldw	r2,-8(fp)
    e21c:	10800217 	ldw	r2,8(r2)
    e220:	10800058 	cmpnei	r2,r2,1
    e224:	1000071e 	bne	r2,zero,e244 <ad9361_set_clk_scaler+0x36c>
    e228:	e0bffe17 	ldw	r2,-8(fp)
    e22c:	10800317 	ldw	r2,12(r2)
    e230:	108000e8 	cmpgeui	r2,r2,3
    e234:	1000031e 	bne	r2,zero,e244 <ad9361_set_clk_scaler+0x36c>
    e238:	e0bffe17 	ldw	r2,-8(fp)
    e23c:	10800317 	ldw	r2,12(r2)
    e240:	1000021e 	bne	r2,zero,e24c <ad9361_set_clk_scaler+0x374>
			return -EINVAL;
    e244:	00bffa84 	movi	r2,-22
    e248:	0000df06 	br	e5c8 <ad9361_set_clk_scaler+0x6f0>
		if (set)
    e24c:	e0bfff03 	ldbu	r2,-4(fp)
    e250:	10000d26 	beq	r2,zero,e288 <ad9361_set_clk_scaler+0x3b0>
			return ad9361_spi_writef(spi, REG_RX_ENABLE_FILTER_CTRL,
    e254:	01000104 	movi	r4,4
    e258:	001c8300 	call	1c830 <find_first_bit>
    e25c:	1007883a 	mov	r3,r2
    e260:	e0bffe17 	ldw	r2,-8(fp)
    e264:	10800317 	ldw	r2,12(r2)
    e268:	10bfffc4 	addi	r2,r2,-1
    e26c:	d8800015 	stw	r2,0(sp)
    e270:	e13ffc17 	ldw	r4,-16(fp)
    e274:	014000c4 	movi	r5,3
    e278:	01800104 	movi	r6,4
    e27c:	180f883a 	mov	r7,r3
    e280:	000031c0 	call	31c <__ad9361_spi_writef>
    e284:	0000d006 	br	e5c8 <ad9361_set_clk_scaler+0x6f0>
			RHB1_EN, clk_priv->div - 1);
		break;
    e288:	0000ce06 	br	e5c4 <ad9361_set_clk_scaler+0x6ec>
	case RX_SAMPL_CLK:
		if (clk_priv->mult != 1 || clk_priv->div > 4 ||
    e28c:	e0bffe17 	ldw	r2,-8(fp)
    e290:	10800217 	ldw	r2,8(r2)
    e294:	10800058 	cmpnei	r2,r2,1
    e298:	10000b1e 	bne	r2,zero,e2c8 <ad9361_set_clk_scaler+0x3f0>
    e29c:	e0bffe17 	ldw	r2,-8(fp)
    e2a0:	10800317 	ldw	r2,12(r2)
    e2a4:	10800168 	cmpgeui	r2,r2,5
    e2a8:	1000071e 	bne	r2,zero,e2c8 <ad9361_set_clk_scaler+0x3f0>
			clk_priv->div < 1 || clk_priv->div == 3)
    e2ac:	e0bffe17 	ldw	r2,-8(fp)
    e2b0:	10800317 	ldw	r2,12(r2)
		if (set)
			return ad9361_spi_writef(spi, REG_RX_ENABLE_FILTER_CTRL,
			RHB1_EN, clk_priv->div - 1);
		break;
	case RX_SAMPL_CLK:
		if (clk_priv->mult != 1 || clk_priv->div > 4 ||
    e2b4:	10000426 	beq	r2,zero,e2c8 <ad9361_set_clk_scaler+0x3f0>
			clk_priv->div < 1 || clk_priv->div == 3)
    e2b8:	e0bffe17 	ldw	r2,-8(fp)
    e2bc:	10800317 	ldw	r2,12(r2)
    e2c0:	108000d8 	cmpnei	r2,r2,3
    e2c4:	1000021e 	bne	r2,zero,e2d0 <ad9361_set_clk_scaler+0x3f8>
			return -EINVAL;
    e2c8:	00bffa84 	movi	r2,-22
    e2cc:	0000be06 	br	e5c8 <ad9361_set_clk_scaler+0x6f0>

		if (clk_priv->phy->bypass_rx_fir)
    e2d0:	e0bffe17 	ldw	r2,-8(fp)
    e2d4:	10800117 	ldw	r2,4(r2)
    e2d8:	10804f03 	ldbu	r2,316(r2)
    e2dc:	10803fcc 	andi	r2,r2,255
    e2e0:	10000226 	beq	r2,zero,e2ec <ad9361_set_clk_scaler+0x414>
			tmp = 0;
    e2e4:	e03ffb15 	stw	zero,-20(fp)
    e2e8:	00000606 	br	e304 <ad9361_set_clk_scaler+0x42c>
		else
			tmp = ilog2(clk_priv->div) + 1;
    e2ec:	e0bffe17 	ldw	r2,-8(fp)
    e2f0:	10800317 	ldw	r2,12(r2)
    e2f4:	1009883a 	mov	r4,r2
    e2f8:	001c5b40 	call	1c5b4 <ilog2>
    e2fc:	10800044 	addi	r2,r2,1
    e300:	e0bffb15 	stw	r2,-20(fp)

		if (set)
    e304:	e0bfff03 	ldbu	r2,-4(fp)
    e308:	10000b26 	beq	r2,zero,e338 <ad9361_set_clk_scaler+0x460>
			return ad9361_spi_writef(spi, REG_RX_ENABLE_FILTER_CTRL,
    e30c:	010000c4 	movi	r4,3
    e310:	001c8300 	call	1c830 <find_first_bit>
    e314:	1007883a 	mov	r3,r2
    e318:	e0bffb17 	ldw	r2,-20(fp)
    e31c:	d8800015 	stw	r2,0(sp)
    e320:	e13ffc17 	ldw	r4,-16(fp)
    e324:	014000c4 	movi	r5,3
    e328:	018000c4 	movi	r6,3
    e32c:	180f883a 	mov	r7,r3
    e330:	000031c0 	call	31c <__ad9361_spi_writef>
    e334:	0000a406 	br	e5c8 <ad9361_set_clk_scaler+0x6f0>
			RX_FIR_ENABLE_DECIMATION(~0), tmp);
		break;
    e338:	0000a206 	br	e5c4 <ad9361_set_clk_scaler+0x6ec>
	case DAC_CLK:
		if (clk_priv->mult != 1 || clk_priv->div > 2 || clk_priv->div < 1)
    e33c:	e0bffe17 	ldw	r2,-8(fp)
    e340:	10800217 	ldw	r2,8(r2)
    e344:	10800058 	cmpnei	r2,r2,1
    e348:	1000071e 	bne	r2,zero,e368 <ad9361_set_clk_scaler+0x490>
    e34c:	e0bffe17 	ldw	r2,-8(fp)
    e350:	10800317 	ldw	r2,12(r2)
    e354:	108000e8 	cmpgeui	r2,r2,3
    e358:	1000031e 	bne	r2,zero,e368 <ad9361_set_clk_scaler+0x490>
    e35c:	e0bffe17 	ldw	r2,-8(fp)
    e360:	10800317 	ldw	r2,12(r2)
    e364:	1000021e 	bne	r2,zero,e370 <ad9361_set_clk_scaler+0x498>
			return -EINVAL;
    e368:	00bffa84 	movi	r2,-22
    e36c:	00009606 	br	e5c8 <ad9361_set_clk_scaler+0x6f0>
		if (set)
    e370:	e0bfff03 	ldbu	r2,-4(fp)
    e374:	10000d26 	beq	r2,zero,e3ac <ad9361_set_clk_scaler+0x4d4>
			return ad9361_spi_writef(spi, REG_BBPLL,
    e378:	01000204 	movi	r4,8
    e37c:	001c8300 	call	1c830 <find_first_bit>
    e380:	1007883a 	mov	r3,r2
    e384:	e0bffe17 	ldw	r2,-8(fp)
    e388:	10800317 	ldw	r2,12(r2)
    e38c:	10bfffc4 	addi	r2,r2,-1
    e390:	d8800015 	stw	r2,0(sp)
    e394:	e13ffc17 	ldw	r4,-16(fp)
    e398:	01400284 	movi	r5,10
    e39c:	01800204 	movi	r6,8
    e3a0:	180f883a 	mov	r7,r3
    e3a4:	000031c0 	call	31c <__ad9361_spi_writef>
    e3a8:	00008706 	br	e5c8 <ad9361_set_clk_scaler+0x6f0>
			BIT(3), clk_priv->div - 1);
		break;
    e3ac:	00008506 	br	e5c4 <ad9361_set_clk_scaler+0x6ec>
	case T2_CLK:
		if (clk_priv->mult != 1 || clk_priv->div > 3 || clk_priv->div < 1)
    e3b0:	e0bffe17 	ldw	r2,-8(fp)
    e3b4:	10800217 	ldw	r2,8(r2)
    e3b8:	10800058 	cmpnei	r2,r2,1
    e3bc:	1000071e 	bne	r2,zero,e3dc <ad9361_set_clk_scaler+0x504>
    e3c0:	e0bffe17 	ldw	r2,-8(fp)
    e3c4:	10800317 	ldw	r2,12(r2)
    e3c8:	10800128 	cmpgeui	r2,r2,4
    e3cc:	1000031e 	bne	r2,zero,e3dc <ad9361_set_clk_scaler+0x504>
    e3d0:	e0bffe17 	ldw	r2,-8(fp)
    e3d4:	10800317 	ldw	r2,12(r2)
    e3d8:	1000021e 	bne	r2,zero,e3e4 <ad9361_set_clk_scaler+0x50c>
			return -EINVAL;
    e3dc:	00bffa84 	movi	r2,-22
    e3e0:	00007906 	br	e5c8 <ad9361_set_clk_scaler+0x6f0>
		if (set)
    e3e4:	e0bfff03 	ldbu	r2,-4(fp)
    e3e8:	10000d26 	beq	r2,zero,e420 <ad9361_set_clk_scaler+0x548>
			return ad9361_spi_writef(spi, REG_TX_ENABLE_FILTER_CTRL,
    e3ec:	01000c04 	movi	r4,48
    e3f0:	001c8300 	call	1c830 <find_first_bit>
    e3f4:	1007883a 	mov	r3,r2
    e3f8:	e0bffe17 	ldw	r2,-8(fp)
    e3fc:	10800317 	ldw	r2,12(r2)
    e400:	10bfffc4 	addi	r2,r2,-1
    e404:	d8800015 	stw	r2,0(sp)
    e408:	e13ffc17 	ldw	r4,-16(fp)
    e40c:	01400084 	movi	r5,2
    e410:	01800c04 	movi	r6,48
    e414:	180f883a 	mov	r7,r3
    e418:	000031c0 	call	31c <__ad9361_spi_writef>
    e41c:	00006a06 	br	e5c8 <ad9361_set_clk_scaler+0x6f0>
			THB3_ENABLE_INTERP(~0),
			clk_priv->div - 1);
		break;
    e420:	00006806 	br	e5c4 <ad9361_set_clk_scaler+0x6ec>
	case T1_CLK:
		if (clk_priv->mult != 1 || clk_priv->div > 2 || clk_priv->div < 1)
    e424:	e0bffe17 	ldw	r2,-8(fp)
    e428:	10800217 	ldw	r2,8(r2)
    e42c:	10800058 	cmpnei	r2,r2,1
    e430:	1000071e 	bne	r2,zero,e450 <ad9361_set_clk_scaler+0x578>
    e434:	e0bffe17 	ldw	r2,-8(fp)
    e438:	10800317 	ldw	r2,12(r2)
    e43c:	108000e8 	cmpgeui	r2,r2,3
    e440:	1000031e 	bne	r2,zero,e450 <ad9361_set_clk_scaler+0x578>
    e444:	e0bffe17 	ldw	r2,-8(fp)
    e448:	10800317 	ldw	r2,12(r2)
    e44c:	1000021e 	bne	r2,zero,e458 <ad9361_set_clk_scaler+0x580>
			return -EINVAL;
    e450:	00bffa84 	movi	r2,-22
    e454:	00005c06 	br	e5c8 <ad9361_set_clk_scaler+0x6f0>
		if (set)
    e458:	e0bfff03 	ldbu	r2,-4(fp)
    e45c:	10000d26 	beq	r2,zero,e494 <ad9361_set_clk_scaler+0x5bc>
			return ad9361_spi_writef(spi, REG_TX_ENABLE_FILTER_CTRL,
    e460:	01000204 	movi	r4,8
    e464:	001c8300 	call	1c830 <find_first_bit>
    e468:	1007883a 	mov	r3,r2
    e46c:	e0bffe17 	ldw	r2,-8(fp)
    e470:	10800317 	ldw	r2,12(r2)
    e474:	10bfffc4 	addi	r2,r2,-1
    e478:	d8800015 	stw	r2,0(sp)
    e47c:	e13ffc17 	ldw	r4,-16(fp)
    e480:	01400084 	movi	r5,2
    e484:	01800204 	movi	r6,8
    e488:	180f883a 	mov	r7,r3
    e48c:	000031c0 	call	31c <__ad9361_spi_writef>
    e490:	00004d06 	br	e5c8 <ad9361_set_clk_scaler+0x6f0>
			THB2_EN, clk_priv->div - 1);
		break;
    e494:	00004b06 	br	e5c4 <ad9361_set_clk_scaler+0x6ec>
	case CLKTF_CLK:
		if (clk_priv->mult != 1 || clk_priv->div > 2 || clk_priv->div < 1)
    e498:	e0bffe17 	ldw	r2,-8(fp)
    e49c:	10800217 	ldw	r2,8(r2)
    e4a0:	10800058 	cmpnei	r2,r2,1
    e4a4:	1000071e 	bne	r2,zero,e4c4 <ad9361_set_clk_scaler+0x5ec>
    e4a8:	e0bffe17 	ldw	r2,-8(fp)
    e4ac:	10800317 	ldw	r2,12(r2)
    e4b0:	108000e8 	cmpgeui	r2,r2,3
    e4b4:	1000031e 	bne	r2,zero,e4c4 <ad9361_set_clk_scaler+0x5ec>
    e4b8:	e0bffe17 	ldw	r2,-8(fp)
    e4bc:	10800317 	ldw	r2,12(r2)
    e4c0:	1000021e 	bne	r2,zero,e4cc <ad9361_set_clk_scaler+0x5f4>
			return -EINVAL;
    e4c4:	00bffa84 	movi	r2,-22
    e4c8:	00003f06 	br	e5c8 <ad9361_set_clk_scaler+0x6f0>
		if (set)
    e4cc:	e0bfff03 	ldbu	r2,-4(fp)
    e4d0:	10000d26 	beq	r2,zero,e508 <ad9361_set_clk_scaler+0x630>
			return ad9361_spi_writef(spi, REG_TX_ENABLE_FILTER_CTRL,
    e4d4:	01000104 	movi	r4,4
    e4d8:	001c8300 	call	1c830 <find_first_bit>
    e4dc:	1007883a 	mov	r3,r2
    e4e0:	e0bffe17 	ldw	r2,-8(fp)
    e4e4:	10800317 	ldw	r2,12(r2)
    e4e8:	10bfffc4 	addi	r2,r2,-1
    e4ec:	d8800015 	stw	r2,0(sp)
    e4f0:	e13ffc17 	ldw	r4,-16(fp)
    e4f4:	01400084 	movi	r5,2
    e4f8:	01800104 	movi	r6,4
    e4fc:	180f883a 	mov	r7,r3
    e500:	000031c0 	call	31c <__ad9361_spi_writef>
    e504:	00003006 	br	e5c8 <ad9361_set_clk_scaler+0x6f0>
			THB1_EN, clk_priv->div - 1);
		break;
    e508:	00002e06 	br	e5c4 <ad9361_set_clk_scaler+0x6ec>
	case TX_SAMPL_CLK:
		if (clk_priv->mult != 1 || clk_priv->div > 4 ||
    e50c:	e0bffe17 	ldw	r2,-8(fp)
    e510:	10800217 	ldw	r2,8(r2)
    e514:	10800058 	cmpnei	r2,r2,1
    e518:	10000b1e 	bne	r2,zero,e548 <ad9361_set_clk_scaler+0x670>
    e51c:	e0bffe17 	ldw	r2,-8(fp)
    e520:	10800317 	ldw	r2,12(r2)
    e524:	10800168 	cmpgeui	r2,r2,5
    e528:	1000071e 	bne	r2,zero,e548 <ad9361_set_clk_scaler+0x670>
			clk_priv->div < 1 || clk_priv->div == 3)
    e52c:	e0bffe17 	ldw	r2,-8(fp)
    e530:	10800317 	ldw	r2,12(r2)
		if (set)
			return ad9361_spi_writef(spi, REG_TX_ENABLE_FILTER_CTRL,
			THB1_EN, clk_priv->div - 1);
		break;
	case TX_SAMPL_CLK:
		if (clk_priv->mult != 1 || clk_priv->div > 4 ||
    e534:	10000426 	beq	r2,zero,e548 <ad9361_set_clk_scaler+0x670>
			clk_priv->div < 1 || clk_priv->div == 3)
    e538:	e0bffe17 	ldw	r2,-8(fp)
    e53c:	10800317 	ldw	r2,12(r2)
    e540:	108000d8 	cmpnei	r2,r2,3
    e544:	1000021e 	bne	r2,zero,e550 <ad9361_set_clk_scaler+0x678>
			return -EINVAL;
    e548:	00bffa84 	movi	r2,-22
    e54c:	00001e06 	br	e5c8 <ad9361_set_clk_scaler+0x6f0>

		if (clk_priv->phy->bypass_tx_fir)
    e550:	e0bffe17 	ldw	r2,-8(fp)
    e554:	10800117 	ldw	r2,4(r2)
    e558:	10804f43 	ldbu	r2,317(r2)
    e55c:	10803fcc 	andi	r2,r2,255
    e560:	10000226 	beq	r2,zero,e56c <ad9361_set_clk_scaler+0x694>
			tmp = 0;
    e564:	e03ffb15 	stw	zero,-20(fp)
    e568:	00000606 	br	e584 <ad9361_set_clk_scaler+0x6ac>
		else
			tmp = ilog2(clk_priv->div) + 1;
    e56c:	e0bffe17 	ldw	r2,-8(fp)
    e570:	10800317 	ldw	r2,12(r2)
    e574:	1009883a 	mov	r4,r2
    e578:	001c5b40 	call	1c5b4 <ilog2>
    e57c:	10800044 	addi	r2,r2,1
    e580:	e0bffb15 	stw	r2,-20(fp)

		if (set)
    e584:	e0bfff03 	ldbu	r2,-4(fp)
    e588:	10000b26 	beq	r2,zero,e5b8 <ad9361_set_clk_scaler+0x6e0>
			return ad9361_spi_writef(spi, REG_TX_ENABLE_FILTER_CTRL,
    e58c:	010000c4 	movi	r4,3
    e590:	001c8300 	call	1c830 <find_first_bit>
    e594:	1007883a 	mov	r3,r2
    e598:	e0bffb17 	ldw	r2,-20(fp)
    e59c:	d8800015 	stw	r2,0(sp)
    e5a0:	e13ffc17 	ldw	r4,-16(fp)
    e5a4:	01400084 	movi	r5,2
    e5a8:	018000c4 	movi	r6,3
    e5ac:	180f883a 	mov	r7,r3
    e5b0:	000031c0 	call	31c <__ad9361_spi_writef>
    e5b4:	00000406 	br	e5c8 <ad9361_set_clk_scaler+0x6f0>
			TX_FIR_ENABLE_INTERPOLATION(~0), tmp);
		break;
    e5b8:	00000206 	br	e5c4 <ad9361_set_clk_scaler+0x6ec>
	default:
		return -EINVAL;
    e5bc:	00bffa84 	movi	r2,-22
    e5c0:	00000106 	br	e5c8 <ad9361_set_clk_scaler+0x6f0>
	}

	return 0;
    e5c4:	0005883a 	mov	r2,zero
}
    e5c8:	e037883a 	mov	sp,fp
    e5cc:	dfc00117 	ldw	ra,4(sp)
    e5d0:	df000017 	ldw	fp,0(sp)
    e5d4:	dec00204 	addi	sp,sp,8
    e5d8:	f800283a 	ret

0000e5dc <ad9361_clk_factor_recalc_rate>:
 * @param parent_rate The parent clock rate.
 * @return The clock rate.
 */
uint32_t ad9361_clk_factor_recalc_rate(struct refclk_scale *clk_priv,
	uint32_t parent_rate)
{
    e5dc:	defffa04 	addi	sp,sp,-24
    e5e0:	de00012e 	bgeu	sp,et,e5e8 <ad9361_clk_factor_recalc_rate+0xc>
    e5e4:	003b68fa 	trap	3
    e5e8:	dfc00515 	stw	ra,20(sp)
    e5ec:	df000415 	stw	fp,16(sp)
    e5f0:	df000404 	addi	fp,sp,16
    e5f4:	e13ffe15 	stw	r4,-8(fp)
    e5f8:	e17fff15 	stw	r5,-4(fp)
	uint64_t rate;

	ad9361_get_clk_scaler(clk_priv);
    e5fc:	e13ffe17 	ldw	r4,-8(fp)
    e600:	000d9e00 	call	d9e0 <ad9361_get_clk_scaler>
	rate = (parent_rate * clk_priv->mult) / clk_priv->div;
    e604:	e0bffe17 	ldw	r2,-8(fp)
    e608:	10c00217 	ldw	r3,8(r2)
    e60c:	e0bfff17 	ldw	r2,-4(fp)
    e610:	1887383a 	mul	r3,r3,r2
    e614:	e0bffe17 	ldw	r2,-8(fp)
    e618:	10800317 	ldw	r2,12(r2)
    e61c:	1809883a 	mov	r4,r3
    e620:	100b883a 	mov	r5,r2
    e624:	001d7a40 	call	1d7a4 <__udivsi3>
    e628:	e0bffc15 	stw	r2,-16(fp)
    e62c:	e03ffd15 	stw	zero,-12(fp)

	return (uint32_t)rate;
    e630:	e0bffc17 	ldw	r2,-16(fp)
}
    e634:	e037883a 	mov	sp,fp
    e638:	dfc00117 	ldw	ra,4(sp)
    e63c:	df000017 	ldw	fp,0(sp)
    e640:	dec00204 	addi	sp,sp,8
    e644:	f800283a 	ret

0000e648 <ad9361_clk_factor_round_rate>:
 * @param parent_rate The parent clock rate.
 * @return The closest possible clock rate that can be set.
 */
int32_t ad9361_clk_factor_round_rate(struct refclk_scale *clk_priv, uint32_t rate,
	uint32_t *prate)
{
    e648:	defffa04 	addi	sp,sp,-24
    e64c:	de00012e 	bgeu	sp,et,e654 <ad9361_clk_factor_round_rate+0xc>
    e650:	003b68fa 	trap	3
    e654:	dfc00515 	stw	ra,20(sp)
    e658:	df000415 	stw	fp,16(sp)
    e65c:	df000404 	addi	fp,sp,16
    e660:	e13ffd15 	stw	r4,-12(fp)
    e664:	e17ffe15 	stw	r5,-8(fp)
    e668:	e1bfff15 	stw	r6,-4(fp)
	int32_t ret;

	if (rate >= *prate) {
    e66c:	e0bfff17 	ldw	r2,-4(fp)
    e670:	10800017 	ldw	r2,0(r2)
    e674:	e0fffe17 	ldw	r3,-8(fp)
    e678:	18801136 	bltu	r3,r2,e6c0 <ad9361_clk_factor_round_rate+0x78>
		clk_priv->mult = DIV_ROUND_CLOSEST(rate, *prate);
    e67c:	e0bfff17 	ldw	r2,-4(fp)
    e680:	10800017 	ldw	r2,0(r2)
    e684:	1006d07a 	srli	r3,r2,1
    e688:	e0bffe17 	ldw	r2,-8(fp)
    e68c:	1887883a 	add	r3,r3,r2
    e690:	e0bfff17 	ldw	r2,-4(fp)
    e694:	10800017 	ldw	r2,0(r2)
    e698:	1809883a 	mov	r4,r3
    e69c:	100b883a 	mov	r5,r2
    e6a0:	001d7a40 	call	1d7a4 <__udivsi3>
    e6a4:	1007883a 	mov	r3,r2
    e6a8:	e0bffd17 	ldw	r2,-12(fp)
    e6ac:	10c00215 	stw	r3,8(r2)
		clk_priv->div = 1;
    e6b0:	e0bffd17 	ldw	r2,-12(fp)
    e6b4:	00c00044 	movi	r3,1
    e6b8:	10c00315 	stw	r3,12(r2)
    e6bc:	00001c06 	br	e730 <ad9361_clk_factor_round_rate+0xe8>

	}
	else {
		clk_priv->div = DIV_ROUND_CLOSEST(*prate, rate);
    e6c0:	e0bfff17 	ldw	r2,-4(fp)
    e6c4:	10c00017 	ldw	r3,0(r2)
    e6c8:	e0bffe17 	ldw	r2,-8(fp)
    e6cc:	1004d07a 	srli	r2,r2,1
    e6d0:	1885883a 	add	r2,r3,r2
    e6d4:	1009883a 	mov	r4,r2
    e6d8:	e17ffe17 	ldw	r5,-8(fp)
    e6dc:	001d7a40 	call	1d7a4 <__udivsi3>
    e6e0:	1007883a 	mov	r3,r2
    e6e4:	e0bffd17 	ldw	r2,-12(fp)
    e6e8:	10c00315 	stw	r3,12(r2)
		clk_priv->mult = 1;
    e6ec:	e0bffd17 	ldw	r2,-12(fp)
    e6f0:	00c00044 	movi	r3,1
    e6f4:	10c00215 	stw	r3,8(r2)
		if (!clk_priv->div) {
    e6f8:	e0bffd17 	ldw	r2,-12(fp)
    e6fc:	10800317 	ldw	r2,12(r2)
    e700:	10000b1e 	bne	r2,zero,e730 <ad9361_clk_factor_round_rate+0xe8>
			dev_err(&clk_priv->spi->dev, "%s: divide by zero",
    e704:	010000b4 	movhi	r4,2
    e708:	211dfe04 	addi	r4,r4,30712
    e70c:	014000b4 	movhi	r5,2
    e710:	295fa104 	addi	r5,r5,32388
    e714:	001f8180 	call	1f818 <printf>
    e718:	010000b4 	movhi	r4,2
    e71c:	211a7504 	addi	r4,r4,27092
    e720:	001f8180 	call	1f818 <printf>
				__func__);
			clk_priv->div = 1;
    e724:	e0bffd17 	ldw	r2,-12(fp)
    e728:	00c00044 	movi	r3,1
    e72c:	10c00315 	stw	r3,12(r2)
		}
	}

	ret = ad9361_set_clk_scaler(clk_priv, false);
    e730:	e13ffd17 	ldw	r4,-12(fp)
    e734:	000b883a 	mov	r5,zero
    e738:	000ded80 	call	ded8 <ad9361_set_clk_scaler>
    e73c:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
    e740:	e0bffc17 	ldw	r2,-16(fp)
    e744:	1000020e 	bge	r2,zero,e750 <ad9361_clk_factor_round_rate+0x108>
		return ret;
    e748:	e0bffc17 	ldw	r2,-16(fp)
    e74c:	00000b06 	br	e77c <ad9361_clk_factor_round_rate+0x134>

	return (*prate / clk_priv->div) * clk_priv->mult;
    e750:	e0bfff17 	ldw	r2,-4(fp)
    e754:	10c00017 	ldw	r3,0(r2)
    e758:	e0bffd17 	ldw	r2,-12(fp)
    e75c:	10800317 	ldw	r2,12(r2)
    e760:	1809883a 	mov	r4,r3
    e764:	100b883a 	mov	r5,r2
    e768:	001d7a40 	call	1d7a4 <__udivsi3>
    e76c:	1007883a 	mov	r3,r2
    e770:	e0bffd17 	ldw	r2,-12(fp)
    e774:	10800217 	ldw	r2,8(r2)
    e778:	1885383a 	mul	r2,r3,r2
}
    e77c:	e037883a 	mov	sp,fp
    e780:	dfc00117 	ldw	ra,4(sp)
    e784:	df000017 	ldw	fp,0(sp)
    e788:	dec00204 	addi	sp,sp,8
    e78c:	f800283a 	ret

0000e790 <ad9361_clk_factor_set_rate>:
 * @param parent_rate The parent clock rate.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_clk_factor_set_rate(struct refclk_scale *clk_priv, uint32_t rate,
	uint32_t parent_rate)
{
    e790:	defffb04 	addi	sp,sp,-20
    e794:	de00012e 	bgeu	sp,et,e79c <ad9361_clk_factor_set_rate+0xc>
    e798:	003b68fa 	trap	3
    e79c:	dfc00415 	stw	ra,16(sp)
    e7a0:	df000315 	stw	fp,12(sp)
    e7a4:	df000304 	addi	fp,sp,12
    e7a8:	e13ffd15 	stw	r4,-12(fp)
    e7ac:	e17ffe15 	stw	r5,-8(fp)
    e7b0:	e1bfff15 	stw	r6,-4(fp)
	dev_dbg(&clk_priv->spi->dev, "%s: Rate %"PRIu32" Hz Parent Rate %"PRIu32" Hz",
    e7b4:	010000b4 	movhi	r4,2
    e7b8:	211e0304 	addi	r4,r4,30732
    e7bc:	014000b4 	movhi	r5,2
    e7c0:	295fa904 	addi	r5,r5,32420
    e7c4:	e1bffe17 	ldw	r6,-8(fp)
    e7c8:	e1ffff17 	ldw	r7,-4(fp)
    e7cc:	001f8180 	call	1f818 <printf>
    e7d0:	010000b4 	movhi	r4,2
    e7d4:	211a7504 	addi	r4,r4,27092
    e7d8:	001f8180 	call	1f818 <printf>
		__func__, rate, parent_rate);

	if (rate >= parent_rate) {
    e7dc:	e0fffe17 	ldw	r3,-8(fp)
    e7e0:	e0bfff17 	ldw	r2,-4(fp)
    e7e4:	18800e36 	bltu	r3,r2,e820 <ad9361_clk_factor_set_rate+0x90>
		clk_priv->mult = DIV_ROUND_CLOSEST(rate, parent_rate);
    e7e8:	e0bfff17 	ldw	r2,-4(fp)
    e7ec:	1006d07a 	srli	r3,r2,1
    e7f0:	e0bffe17 	ldw	r2,-8(fp)
    e7f4:	1885883a 	add	r2,r3,r2
    e7f8:	1009883a 	mov	r4,r2
    e7fc:	e17fff17 	ldw	r5,-4(fp)
    e800:	001d7a40 	call	1d7a4 <__udivsi3>
    e804:	1007883a 	mov	r3,r2
    e808:	e0bffd17 	ldw	r2,-12(fp)
    e80c:	10c00215 	stw	r3,8(r2)
		clk_priv->div = 1;
    e810:	e0bffd17 	ldw	r2,-12(fp)
    e814:	00c00044 	movi	r3,1
    e818:	10c00315 	stw	r3,12(r2)
    e81c:	00001b06 	br	e88c <ad9361_clk_factor_set_rate+0xfc>
	}
	else {
		clk_priv->div = DIV_ROUND_CLOSEST(parent_rate, rate);
    e820:	e0bffe17 	ldw	r2,-8(fp)
    e824:	1006d07a 	srli	r3,r2,1
    e828:	e0bfff17 	ldw	r2,-4(fp)
    e82c:	1885883a 	add	r2,r3,r2
    e830:	1009883a 	mov	r4,r2
    e834:	e17ffe17 	ldw	r5,-8(fp)
    e838:	001d7a40 	call	1d7a4 <__udivsi3>
    e83c:	1007883a 	mov	r3,r2
    e840:	e0bffd17 	ldw	r2,-12(fp)
    e844:	10c00315 	stw	r3,12(r2)
		clk_priv->mult = 1;
    e848:	e0bffd17 	ldw	r2,-12(fp)
    e84c:	00c00044 	movi	r3,1
    e850:	10c00215 	stw	r3,8(r2)
		if (!clk_priv->div) {
    e854:	e0bffd17 	ldw	r2,-12(fp)
    e858:	10800317 	ldw	r2,12(r2)
    e85c:	10000b1e 	bne	r2,zero,e88c <ad9361_clk_factor_set_rate+0xfc>
			dev_err(&clk_priv->spi->dev, "%s: divide by zero",
    e860:	010000b4 	movhi	r4,2
    e864:	211dfe04 	addi	r4,r4,30712
    e868:	014000b4 	movhi	r5,2
    e86c:	295fa904 	addi	r5,r5,32420
    e870:	001f8180 	call	1f818 <printf>
    e874:	010000b4 	movhi	r4,2
    e878:	211a7504 	addi	r4,r4,27092
    e87c:	001f8180 	call	1f818 <printf>
				__func__);
			clk_priv->div = 1;
    e880:	e0bffd17 	ldw	r2,-12(fp)
    e884:	00c00044 	movi	r3,1
    e888:	10c00315 	stw	r3,12(r2)
		}
	}

	return ad9361_set_clk_scaler(clk_priv, true);
    e88c:	e13ffd17 	ldw	r4,-12(fp)
    e890:	01400044 	movi	r5,1
    e894:	000ded80 	call	ded8 <ad9361_set_clk_scaler>
}
    e898:	e037883a 	mov	sp,fp
    e89c:	dfc00117 	ldw	ra,4(sp)
    e8a0:	df000017 	ldw	fp,0(sp)
    e8a4:	dec00204 	addi	sp,sp,8
    e8a8:	f800283a 	ret

0000e8ac <ad9361_bbpll_recalc_rate>:
 * @param parent_rate The parent clock rate.
 * @return The clock rate.
 */
uint32_t ad9361_bbpll_recalc_rate(struct refclk_scale *clk_priv,
	uint32_t parent_rate)
{
    e8ac:	deffef04 	addi	sp,sp,-68
    e8b0:	de00012e 	bgeu	sp,et,e8b8 <ad9361_bbpll_recalc_rate+0xc>
    e8b4:	003b68fa 	trap	3
    e8b8:	dfc01015 	stw	ra,64(sp)
    e8bc:	df000f15 	stw	fp,60(sp)
    e8c0:	ddc00e15 	stw	r23,56(sp)
    e8c4:	dd800d15 	stw	r22,52(sp)
    e8c8:	dd400c15 	stw	r21,48(sp)
    e8cc:	dd000b15 	stw	r20,44(sp)
    e8d0:	dcc00a15 	stw	r19,40(sp)
    e8d4:	dc800915 	stw	r18,36(sp)
    e8d8:	dc400815 	stw	r17,32(sp)
    e8dc:	dc000715 	stw	r16,28(sp)
    e8e0:	df000f04 	addi	fp,sp,60
    e8e4:	e13ff615 	stw	r4,-40(fp)
    e8e8:	e17ff715 	stw	r5,-36(fp)
	uint64_t rate;
	uint32_t fract, integer;
	uint8_t buf[4];

	ad9361_spi_readm(clk_priv->spi, REG_INTEGER_BB_FREQ_WORD, &buf[0],
    e8ec:	e0bff617 	ldw	r2,-40(fp)
    e8f0:	10c00017 	ldw	r3,0(r2)
    e8f4:	e0bff504 	addi	r2,fp,-44
    e8f8:	1809883a 	mov	r4,r3
    e8fc:	01401104 	movi	r5,68
    e900:	100d883a 	mov	r6,r2
    e904:	01c00104 	movi	r7,4
    e908:	00000740 	call	74 <ad9361_spi_readm>
		REG_INTEGER_BB_FREQ_WORD - REG_FRACT_BB_FREQ_WORD_1 + 1);

	fract = (buf[3] << 16) | (buf[2] << 8) | buf[1];
    e90c:	e0bff5c3 	ldbu	r2,-41(fp)
    e910:	10803fcc 	andi	r2,r2,255
    e914:	1006943a 	slli	r3,r2,16
    e918:	e0bff583 	ldbu	r2,-42(fp)
    e91c:	10803fcc 	andi	r2,r2,255
    e920:	1004923a 	slli	r2,r2,8
    e924:	1886b03a 	or	r3,r3,r2
    e928:	e0bff543 	ldbu	r2,-43(fp)
    e92c:	10803fcc 	andi	r2,r2,255
    e930:	1884b03a 	or	r2,r3,r2
    e934:	e0bff115 	stw	r2,-60(fp)
	integer = buf[0];
    e938:	e0bff503 	ldbu	r2,-44(fp)
    e93c:	10803fcc 	andi	r2,r2,255
    e940:	e0bff215 	stw	r2,-56(fp)

	rate = ((uint64_t)parent_rate * fract);
    e944:	e0bff717 	ldw	r2,-36(fp)
    e948:	102d883a 	mov	r22,r2
    e94c:	002f883a 	mov	r23,zero
    e950:	e0bff117 	ldw	r2,-60(fp)
    e954:	1029883a 	mov	r20,r2
    e958:	002b883a 	mov	r21,zero
    e95c:	b009883a 	mov	r4,r22
    e960:	b80b883a 	mov	r5,r23
    e964:	a00d883a 	mov	r6,r20
    e968:	a80f883a 	mov	r7,r21
    e96c:	001c9940 	call	1c994 <__muldi3>
    e970:	1009883a 	mov	r4,r2
    e974:	180b883a 	mov	r5,r3
    e978:	2005883a 	mov	r2,r4
    e97c:	2807883a 	mov	r3,r5
    e980:	e0bff315 	stw	r2,-52(fp)
    e984:	e0fff415 	stw	r3,-48(fp)
	do_div(&rate, BBPLL_MODULUS);
    e988:	e0bff304 	addi	r2,fp,-52
    e98c:	1009883a 	mov	r4,r2
    e990:	01400834 	movhi	r5,32
    e994:	29780004 	addi	r5,r5,-8192
    e998:	000d883a 	mov	r6,zero
    e99c:	001c76c0 	call	1c76c <do_div>
	rate += (uint64_t)parent_rate * integer;
    e9a0:	e0bff717 	ldw	r2,-36(fp)
    e9a4:	1025883a 	mov	r18,r2
    e9a8:	0027883a 	mov	r19,zero
    e9ac:	e0bff217 	ldw	r2,-56(fp)
    e9b0:	1021883a 	mov	r16,r2
    e9b4:	0023883a 	mov	r17,zero
    e9b8:	9009883a 	mov	r4,r18
    e9bc:	980b883a 	mov	r5,r19
    e9c0:	800d883a 	mov	r6,r16
    e9c4:	880f883a 	mov	r7,r17
    e9c8:	001c9940 	call	1c994 <__muldi3>
    e9cc:	1009883a 	mov	r4,r2
    e9d0:	180b883a 	mov	r5,r3
    e9d4:	200d883a 	mov	r6,r4
    e9d8:	280f883a 	mov	r7,r5
    e9dc:	e13ff317 	ldw	r4,-52(fp)
    e9e0:	e17ff417 	ldw	r5,-48(fp)
    e9e4:	3105883a 	add	r2,r6,r4
    e9e8:	1191803a 	cmpltu	r8,r2,r6
    e9ec:	3947883a 	add	r3,r7,r5
    e9f0:	40c9883a 	add	r4,r8,r3
    e9f4:	2007883a 	mov	r3,r4
    e9f8:	1009883a 	mov	r4,r2
    e9fc:	180b883a 	mov	r5,r3
    ea00:	e13ff315 	stw	r4,-52(fp)
    ea04:	e17ff415 	stw	r5,-48(fp)

	return (uint32_t)rate;
    ea08:	e0bff317 	ldw	r2,-52(fp)
    ea0c:	e0fff417 	ldw	r3,-48(fp)
}
    ea10:	e6fff804 	addi	sp,fp,-32
    ea14:	dfc00917 	ldw	ra,36(sp)
    ea18:	df000817 	ldw	fp,32(sp)
    ea1c:	ddc00717 	ldw	r23,28(sp)
    ea20:	dd800617 	ldw	r22,24(sp)
    ea24:	dd400517 	ldw	r21,20(sp)
    ea28:	dd000417 	ldw	r20,16(sp)
    ea2c:	dcc00317 	ldw	r19,12(sp)
    ea30:	dc800217 	ldw	r18,8(sp)
    ea34:	dc400117 	ldw	r17,4(sp)
    ea38:	dc000017 	ldw	r16,0(sp)
    ea3c:	dec00a04 	addi	sp,sp,40
    ea40:	f800283a 	ret

0000ea44 <ad9361_bbpll_round_rate>:
 * @param parent_rate The parent clock rate.
 * @return The closest possible clock rate that can be set.
 */
int32_t ad9361_bbpll_round_rate(struct refclk_scale *clk_priv, uint32_t rate,
	uint32_t *prate)
{
    ea44:	deffeb04 	addi	sp,sp,-84
    ea48:	de00012e 	bgeu	sp,et,ea50 <ad9361_bbpll_round_rate+0xc>
    ea4c:	003b68fa 	trap	3
    ea50:	dfc01415 	stw	ra,80(sp)
    ea54:	df001315 	stw	fp,76(sp)
    ea58:	ddc01215 	stw	r23,72(sp)
    ea5c:	dd801115 	stw	r22,68(sp)
    ea60:	dd401015 	stw	r21,64(sp)
    ea64:	dd000f15 	stw	r20,60(sp)
    ea68:	dcc00e15 	stw	r19,56(sp)
    ea6c:	dc800d15 	stw	r18,52(sp)
    ea70:	dc400c15 	stw	r17,48(sp)
    ea74:	dc000b15 	stw	r16,44(sp)
    ea78:	df001304 	addi	fp,sp,76
    ea7c:	e13ff315 	stw	r4,-52(fp)
    ea80:	e17ff415 	stw	r5,-48(fp)
    ea84:	e1bff515 	stw	r6,-44(fp)

	if (clk_priv) {
		// Unused variable - fix compiler warning
	}

	if (rate > MAX_BBPLL_FREQ)
    ea88:	e17ff417 	ldw	r5,-48(fp)
    ea8c:	01154f34 	movhi	r4,21820
    ea90:	21046004 	addi	r4,r4,4480
    ea94:	2140032e 	bgeu	r4,r5,eaa4 <ad9361_bbpll_round_rate+0x60>
		return MAX_BBPLL_FREQ;
    ea98:	00954f34 	movhi	r2,21820
    ea9c:	10846004 	addi	r2,r2,4480
    eaa0:	00007106 	br	ec68 <ad9361_bbpll_round_rate+0x224>

	if (rate < MIN_BBPLL_FREQ)
    eaa4:	e17ff417 	ldw	r5,-48(fp)
    eaa8:	010aa7b4 	movhi	r4,10910
    eaac:	21022fc4 	addi	r4,r4,2239
    eab0:	21400336 	bltu	r4,r5,eac0 <ad9361_bbpll_round_rate+0x7c>
		return MIN_BBPLL_FREQ;
    eab4:	008aa7b4 	movhi	r2,10910
    eab8:	10823004 	addi	r2,r2,2240
    eabc:	00006a06 	br	ec68 <ad9361_bbpll_round_rate+0x224>

	temp = rate;
    eac0:	e13ff417 	ldw	r4,-48(fp)
    eac4:	2005883a 	mov	r2,r4
    eac8:	0007883a 	mov	r3,zero
    eacc:	e0bff115 	stw	r2,-60(fp)
    ead0:	e0fff215 	stw	r3,-56(fp)
	tmp = do_div(&temp, *prate);
    ead4:	e0bff517 	ldw	r2,-44(fp)
    ead8:	10800017 	ldw	r2,0(r2)
    eadc:	100f883a 	mov	r7,r2
    eae0:	0011883a 	mov	r8,zero
    eae4:	e0bff104 	addi	r2,fp,-60
    eae8:	1009883a 	mov	r4,r2
    eaec:	380b883a 	mov	r5,r7
    eaf0:	400d883a 	mov	r6,r8
    eaf4:	001c76c0 	call	1c76c <do_div>
    eaf8:	1009883a 	mov	r4,r2
    eafc:	180b883a 	mov	r5,r3
    eb00:	e13fef15 	stw	r4,-68(fp)
    eb04:	e17ff015 	stw	r5,-64(fp)
	rate = temp;
    eb08:	e0bff117 	ldw	r2,-60(fp)
    eb0c:	e0fff217 	ldw	r3,-56(fp)
    eb10:	e0bff415 	stw	r2,-48(fp)
	tmp = tmp * BBPLL_MODULUS + (*prate >> 1);
    eb14:	e17fef17 	ldw	r5,-68(fp)
    eb18:	e1bff017 	ldw	r6,-64(fp)
    eb1c:	00800834 	movhi	r2,32
    eb20:	10b80004 	addi	r2,r2,-8192
    eb24:	0007883a 	mov	r3,zero
    eb28:	2809883a 	mov	r4,r5
    eb2c:	300b883a 	mov	r5,r6
    eb30:	100d883a 	mov	r6,r2
    eb34:	180f883a 	mov	r7,r3
    eb38:	001c9940 	call	1c994 <__muldi3>
    eb3c:	100d883a 	mov	r6,r2
    eb40:	180f883a 	mov	r7,r3
    eb44:	3009883a 	mov	r4,r6
    eb48:	380b883a 	mov	r5,r7
    eb4c:	e0bff517 	ldw	r2,-44(fp)
    eb50:	10800017 	ldw	r2,0(r2)
    eb54:	1004d07a 	srli	r2,r2,1
    eb58:	1025883a 	mov	r18,r2
    eb5c:	0027883a 	mov	r19,zero
    eb60:	2485883a 	add	r2,r4,r18
    eb64:	110d803a 	cmpltu	r6,r2,r4
    eb68:	2cc7883a 	add	r3,r5,r19
    eb6c:	30c9883a 	add	r4,r6,r3
    eb70:	2007883a 	mov	r3,r4
    eb74:	1009883a 	mov	r4,r2
    eb78:	180b883a 	mov	r5,r3
    eb7c:	e13fef15 	stw	r4,-68(fp)
    eb80:	e17ff015 	stw	r5,-64(fp)
	do_div(&tmp, *prate);
    eb84:	e0bff517 	ldw	r2,-44(fp)
    eb88:	10800017 	ldw	r2,0(r2)
    eb8c:	e0bff615 	stw	r2,-40(fp)
    eb90:	e03ff715 	stw	zero,-36(fp)
    eb94:	e0bfef04 	addi	r2,fp,-68
    eb98:	1009883a 	mov	r4,r2
    eb9c:	e17ff617 	ldw	r5,-40(fp)
    eba0:	e1bff717 	ldw	r6,-36(fp)
    eba4:	001c76c0 	call	1c76c <do_div>

	integer = rate;
    eba8:	e0bff417 	ldw	r2,-48(fp)
    ebac:	e0bfed15 	stw	r2,-76(fp)
	fract = tmp;
    ebb0:	e0bfef17 	ldw	r2,-68(fp)
    ebb4:	e0fff017 	ldw	r3,-64(fp)
    ebb8:	e0bfee15 	stw	r2,-72(fp)

	tmp = *prate * (uint64_t)fract;
    ebbc:	e0bff517 	ldw	r2,-44(fp)
    ebc0:	10800017 	ldw	r2,0(r2)
    ebc4:	102d883a 	mov	r22,r2
    ebc8:	002f883a 	mov	r23,zero
    ebcc:	e0bfee17 	ldw	r2,-72(fp)
    ebd0:	1029883a 	mov	r20,r2
    ebd4:	002b883a 	mov	r21,zero
    ebd8:	b009883a 	mov	r4,r22
    ebdc:	b80b883a 	mov	r5,r23
    ebe0:	a00d883a 	mov	r6,r20
    ebe4:	a80f883a 	mov	r7,r21
    ebe8:	001c9940 	call	1c994 <__muldi3>
    ebec:	1009883a 	mov	r4,r2
    ebf0:	180b883a 	mov	r5,r3
    ebf4:	2005883a 	mov	r2,r4
    ebf8:	2807883a 	mov	r3,r5
    ebfc:	e0bfef15 	stw	r2,-68(fp)
    ec00:	e0fff015 	stw	r3,-64(fp)
	do_div(&tmp, BBPLL_MODULUS);
    ec04:	e0bfef04 	addi	r2,fp,-68
    ec08:	1009883a 	mov	r4,r2
    ec0c:	01400834 	movhi	r5,32
    ec10:	29780004 	addi	r5,r5,-8192
    ec14:	000d883a 	mov	r6,zero
    ec18:	001c76c0 	call	1c76c <do_div>
	tmp += *prate * integer;
    ec1c:	e0bff517 	ldw	r2,-44(fp)
    ec20:	10c00017 	ldw	r3,0(r2)
    ec24:	e0bfed17 	ldw	r2,-76(fp)
    ec28:	1885383a 	mul	r2,r3,r2
    ec2c:	1021883a 	mov	r16,r2
    ec30:	0023883a 	mov	r17,zero
    ec34:	e13fef17 	ldw	r4,-68(fp)
    ec38:	e17ff017 	ldw	r5,-64(fp)
    ec3c:	8105883a 	add	r2,r16,r4
    ec40:	140d803a 	cmpltu	r6,r2,r16
    ec44:	8947883a 	add	r3,r17,r5
    ec48:	30c9883a 	add	r4,r6,r3
    ec4c:	2007883a 	mov	r3,r4
    ec50:	1009883a 	mov	r4,r2
    ec54:	180b883a 	mov	r5,r3
    ec58:	e13fef15 	stw	r4,-68(fp)
    ec5c:	e17ff015 	stw	r5,-64(fp)

	return tmp;
    ec60:	e0bfef17 	ldw	r2,-68(fp)
    ec64:	e0fff017 	ldw	r3,-64(fp)
}
    ec68:	e6fff804 	addi	sp,fp,-32
    ec6c:	dfc00917 	ldw	ra,36(sp)
    ec70:	df000817 	ldw	fp,32(sp)
    ec74:	ddc00717 	ldw	r23,28(sp)
    ec78:	dd800617 	ldw	r22,24(sp)
    ec7c:	dd400517 	ldw	r21,20(sp)
    ec80:	dd000417 	ldw	r20,16(sp)
    ec84:	dcc00317 	ldw	r19,12(sp)
    ec88:	dc800217 	ldw	r18,8(sp)
    ec8c:	dc400117 	ldw	r17,4(sp)
    ec90:	dc000017 	ldw	r16,0(sp)
    ec94:	dec00a04 	addi	sp,sp,40
    ec98:	f800283a 	ret

0000ec9c <ad9361_bbpll_set_rate>:
 * @param parent_rate The parent clock rate.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_bbpll_set_rate(struct refclk_scale *clk_priv, uint32_t rate,
	uint32_t parent_rate)
{
    ec9c:	deffe604 	addi	sp,sp,-104
    eca0:	de00012e 	bgeu	sp,et,eca8 <ad9361_bbpll_set_rate+0xc>
    eca4:	003b68fa 	trap	3
    eca8:	dfc01915 	stw	ra,100(sp)
    ecac:	df001815 	stw	fp,96(sp)
    ecb0:	ddc01715 	stw	r23,92(sp)
    ecb4:	dd801615 	stw	r22,88(sp)
    ecb8:	dd401515 	stw	r21,84(sp)
    ecbc:	dd001415 	stw	r20,80(sp)
    ecc0:	dcc01315 	stw	r19,76(sp)
    ecc4:	dc801215 	stw	r18,72(sp)
    ecc8:	dc401115 	stw	r17,68(sp)
    eccc:	dc001015 	stw	r16,64(sp)
    ecd0:	df001804 	addi	fp,sp,96
    ecd4:	e13ff115 	stw	r4,-60(fp)
    ecd8:	e17ff215 	stw	r5,-56(fp)
    ecdc:	e1bff315 	stw	r6,-52(fp)
	struct spi_device *spi = clk_priv->spi;
    ece0:	e0bff117 	ldw	r2,-60(fp)
    ece4:	10800017 	ldw	r2,0(r2)
    ece8:	e0bfe815 	stw	r2,-96(fp)
	uint64_t tmp;
	uint32_t fract, integer;
	int32_t icp_val;
	uint8_t lf_defaults[3] = { 0x35, 0x5B, 0xE8 };
    ecec:	00800d44 	movi	r2,53
    ecf0:	e0bfee05 	stb	r2,-72(fp)
    ecf4:	008016c4 	movi	r2,91
    ecf8:	e0bfee45 	stb	r2,-71(fp)
    ecfc:	00bffa04 	movi	r2,-24
    ed00:	e0bfee85 	stb	r2,-70(fp)
	uint64_t temp;

	dev_dbg(&spi->dev, "%s: Rate %"PRIu32" Hz Parent Rate %"PRIu32" Hz",
    ed04:	010000b4 	movhi	r4,2
    ed08:	211e0304 	addi	r4,r4,30732
    ed0c:	014000b4 	movhi	r5,2
    ed10:	295fb004 	addi	r5,r5,32448
    ed14:	e1bff217 	ldw	r6,-56(fp)
    ed18:	e1fff317 	ldw	r7,-52(fp)
    ed1c:	001f8180 	call	1f818 <printf>
    ed20:	010000b4 	movhi	r4,2
    ed24:	211a7504 	addi	r4,r4,27092
    ed28:	001f8180 	call	1f818 <printf>

	/*
	* Setup Loop Filter and CP Current
	* Scale is 150uA @ (1280MHz BBPLL, 40MHz REFCLK)
	*/
	tmp = (rate >> 7) * 150ULL;
    ed2c:	e0bff217 	ldw	r2,-56(fp)
    ed30:	1004d1fa 	srli	r2,r2,7
    ed34:	e0bff415 	stw	r2,-48(fp)
    ed38:	e03ff515 	stw	zero,-44(fp)
    ed3c:	00802584 	movi	r2,150
    ed40:	0007883a 	mov	r3,zero
    ed44:	e13ff417 	ldw	r4,-48(fp)
    ed48:	e17ff517 	ldw	r5,-44(fp)
    ed4c:	100d883a 	mov	r6,r2
    ed50:	180f883a 	mov	r7,r3
    ed54:	001c9940 	call	1c994 <__muldi3>
    ed58:	1009883a 	mov	r4,r2
    ed5c:	180b883a 	mov	r5,r3
    ed60:	2005883a 	mov	r2,r4
    ed64:	2807883a 	mov	r3,r5
    ed68:	e0bfec15 	stw	r2,-80(fp)
    ed6c:	e0ffed15 	stw	r3,-76(fp)
	do_div(&tmp, (parent_rate >> 7) * 32UL);
    ed70:	e0bff317 	ldw	r2,-52(fp)
    ed74:	1004d1fa 	srli	r2,r2,7
    ed78:	1004917a 	slli	r2,r2,5
    ed7c:	e0bff615 	stw	r2,-40(fp)
    ed80:	e03ff715 	stw	zero,-36(fp)
    ed84:	e0bfec04 	addi	r2,fp,-80
    ed88:	1009883a 	mov	r4,r2
    ed8c:	e17ff617 	ldw	r5,-40(fp)
    ed90:	e1bff717 	ldw	r6,-36(fp)
    ed94:	001c76c0 	call	1c76c <do_div>

	/* 25uA/LSB, Offset 25uA */
	icp_val = DIV_ROUND_CLOSEST((uint32_t)tmp, 25U) - 1;
    ed98:	e0bfec17 	ldw	r2,-80(fp)
    ed9c:	e0ffed17 	ldw	r3,-76(fp)
    eda0:	10800304 	addi	r2,r2,12
    eda4:	1009883a 	mov	r4,r2
    eda8:	01400644 	movi	r5,25
    edac:	001d7a40 	call	1d7a4 <__udivsi3>
    edb0:	10bfffc4 	addi	r2,r2,-1
    edb4:	e0bfe915 	stw	r2,-92(fp)

	icp_val = clamp(icp_val, 1, 64);
    edb8:	e0bfe917 	ldw	r2,-92(fp)
    edbc:	10800090 	cmplti	r2,r2,2
    edc0:	1000051e 	bne	r2,zero,edd8 <ad9361_bbpll_set_rate+0x13c>
    edc4:	e0bfe917 	ldw	r2,-92(fp)
    edc8:	10c01050 	cmplti	r3,r2,65
    edcc:	1800031e 	bne	r3,zero,eddc <ad9361_bbpll_set_rate+0x140>
    edd0:	00801004 	movi	r2,64
    edd4:	00000106 	br	eddc <ad9361_bbpll_set_rate+0x140>
    edd8:	00800044 	movi	r2,1
    eddc:	e0bfe915 	stw	r2,-92(fp)

	ad9361_spi_write(spi, REG_CP_CURRENT, icp_val);
    ede0:	e0bfe917 	ldw	r2,-92(fp)
    ede4:	e13fe817 	ldw	r4,-96(fp)
    ede8:	01401184 	movi	r5,70
    edec:	100d883a 	mov	r6,r2
    edf0:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_writem(spi, REG_LOOP_FILTER_3, lf_defaults,
    edf4:	e0bfee04 	addi	r2,fp,-72
    edf8:	e13fe817 	ldw	r4,-96(fp)
    edfc:	01401284 	movi	r5,74
    ee00:	100d883a 	mov	r6,r2
    ee04:	01c000c4 	movi	r7,3
    ee08:	00003ec0 	call	3ec <ad9361_spi_writem>
		ARRAY_SIZE(lf_defaults));

	/* Allow calibration to occur and set cal count to 1024 for max accuracy */
	ad9361_spi_write(spi, REG_VCO_CTRL,
    ee0c:	e13fe817 	ldw	r4,-96(fp)
    ee10:	014012c4 	movi	r5,75
    ee14:	01803804 	movi	r6,224
    ee18:	00002600 	call	260 <ad9361_spi_write>
		FREQ_CAL_ENABLE | FREQ_CAL_COUNT_LENGTH(3));
	/* Set calibration clock to REFCLK/4 for more accuracy */
	ad9361_spi_write(spi, REG_SDM_CTRL, 0x10);
    ee1c:	e13fe817 	ldw	r4,-96(fp)
    ee20:	01401384 	movi	r5,78
    ee24:	01800404 	movi	r6,16
    ee28:	00002600 	call	260 <ad9361_spi_write>

	/* Calculate and set BBPLL frequency word */
	temp = rate;
    ee2c:	e0bff217 	ldw	r2,-56(fp)
    ee30:	1025883a 	mov	r18,r2
    ee34:	0027883a 	mov	r19,zero
    ee38:	e4bfef15 	stw	r18,-68(fp)
    ee3c:	e4fff015 	stw	r19,-64(fp)
	tmp = do_div(&temp, parent_rate);
    ee40:	e0bff317 	ldw	r2,-52(fp)
    ee44:	102d883a 	mov	r22,r2
    ee48:	002f883a 	mov	r23,zero
    ee4c:	e0bfef04 	addi	r2,fp,-68
    ee50:	1009883a 	mov	r4,r2
    ee54:	b00b883a 	mov	r5,r22
    ee58:	b80d883a 	mov	r6,r23
    ee5c:	001c76c0 	call	1c76c <do_div>
    ee60:	1009883a 	mov	r4,r2
    ee64:	180b883a 	mov	r5,r3
    ee68:	e13fec15 	stw	r4,-80(fp)
    ee6c:	e17fed15 	stw	r5,-76(fp)
	rate = temp;
    ee70:	e0bfef17 	ldw	r2,-68(fp)
    ee74:	e0fff017 	ldw	r3,-64(fp)
    ee78:	e0bff215 	stw	r2,-56(fp)
	tmp = tmp *(uint64_t)BBPLL_MODULUS + (parent_rate >> 1);
    ee7c:	e17fec17 	ldw	r5,-80(fp)
    ee80:	e1bfed17 	ldw	r6,-76(fp)
    ee84:	00800834 	movhi	r2,32
    ee88:	10b80004 	addi	r2,r2,-8192
    ee8c:	0007883a 	mov	r3,zero
    ee90:	2809883a 	mov	r4,r5
    ee94:	300b883a 	mov	r5,r6
    ee98:	100d883a 	mov	r6,r2
    ee9c:	180f883a 	mov	r7,r3
    eea0:	001c9940 	call	1c994 <__muldi3>
    eea4:	100d883a 	mov	r6,r2
    eea8:	180f883a 	mov	r7,r3
    eeac:	3009883a 	mov	r4,r6
    eeb0:	380b883a 	mov	r5,r7
    eeb4:	e0bff317 	ldw	r2,-52(fp)
    eeb8:	1004d07a 	srli	r2,r2,1
    eebc:	1021883a 	mov	r16,r2
    eec0:	0023883a 	mov	r17,zero
    eec4:	2405883a 	add	r2,r4,r16
    eec8:	110d803a 	cmpltu	r6,r2,r4
    eecc:	2c47883a 	add	r3,r5,r17
    eed0:	30c9883a 	add	r4,r6,r3
    eed4:	2007883a 	mov	r3,r4
    eed8:	1009883a 	mov	r4,r2
    eedc:	180b883a 	mov	r5,r3
    eee0:	e13fec15 	stw	r4,-80(fp)
    eee4:	e17fed15 	stw	r5,-76(fp)
	do_div(&tmp, parent_rate);
    eee8:	e0bff317 	ldw	r2,-52(fp)
    eeec:	1029883a 	mov	r20,r2
    eef0:	002b883a 	mov	r21,zero
    eef4:	e0bfec04 	addi	r2,fp,-80
    eef8:	1009883a 	mov	r4,r2
    eefc:	a00b883a 	mov	r5,r20
    ef00:	a80d883a 	mov	r6,r21
    ef04:	001c76c0 	call	1c76c <do_div>

	integer = rate;
    ef08:	e0bff217 	ldw	r2,-56(fp)
    ef0c:	e0bfea15 	stw	r2,-88(fp)
	fract = tmp;
    ef10:	e0bfec17 	ldw	r2,-80(fp)
    ef14:	e0ffed17 	ldw	r3,-76(fp)
    ef18:	e0bfeb15 	stw	r2,-84(fp)

	ad9361_spi_write(spi, REG_INTEGER_BB_FREQ_WORD, integer);
    ef1c:	e13fe817 	ldw	r4,-96(fp)
    ef20:	01401104 	movi	r5,68
    ef24:	e1bfea17 	ldw	r6,-88(fp)
    ef28:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_FRACT_BB_FREQ_WORD_3, fract);
    ef2c:	e13fe817 	ldw	r4,-96(fp)
    ef30:	014010c4 	movi	r5,67
    ef34:	e1bfeb17 	ldw	r6,-84(fp)
    ef38:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_FRACT_BB_FREQ_WORD_2, fract >> 8);
    ef3c:	e0bfeb17 	ldw	r2,-84(fp)
    ef40:	1004d23a 	srli	r2,r2,8
    ef44:	e13fe817 	ldw	r4,-96(fp)
    ef48:	01401084 	movi	r5,66
    ef4c:	100d883a 	mov	r6,r2
    ef50:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_FRACT_BB_FREQ_WORD_1, fract >> 16);
    ef54:	e0bfeb17 	ldw	r2,-84(fp)
    ef58:	1004d43a 	srli	r2,r2,16
    ef5c:	e13fe817 	ldw	r4,-96(fp)
    ef60:	01401044 	movi	r5,65
    ef64:	100d883a 	mov	r6,r2
    ef68:	00002600 	call	260 <ad9361_spi_write>

	ad9361_spi_write(spi, REG_SDM_CTRL_1, INIT_BB_FO_CAL | BBPLL_RESET_BAR); /* Start BBPLL Calibration */
    ef6c:	e13fe817 	ldw	r4,-96(fp)
    ef70:	01400fc4 	movi	r5,63
    ef74:	01800144 	movi	r6,5
    ef78:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_SDM_CTRL_1, BBPLL_RESET_BAR); /* Clear BBPLL start calibration bit */
    ef7c:	e13fe817 	ldw	r4,-96(fp)
    ef80:	01400fc4 	movi	r5,63
    ef84:	01800044 	movi	r6,1
    ef88:	00002600 	call	260 <ad9361_spi_write>

	ad9361_spi_write(spi, REG_VCO_PROGRAM_1, 0x86); /* Increase BBPLL KV and phase margin */
    ef8c:	e13fe817 	ldw	r4,-96(fp)
    ef90:	01401304 	movi	r5,76
    ef94:	01802184 	movi	r6,134
    ef98:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_VCO_PROGRAM_2, 0x01); /* Increase BBPLL KV and phase margin */
    ef9c:	e13fe817 	ldw	r4,-96(fp)
    efa0:	01401344 	movi	r5,77
    efa4:	01800044 	movi	r6,1
    efa8:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(spi, REG_VCO_PROGRAM_2, 0x05); /* Increase BBPLL KV and phase margin */
    efac:	e13fe817 	ldw	r4,-96(fp)
    efb0:	01401344 	movi	r5,77
    efb4:	01800144 	movi	r6,5
    efb8:	00002600 	call	260 <ad9361_spi_write>

	return ad9361_check_cal_done(clk_priv->phy, REG_CH_1_OVERFLOW,
    efbc:	e0bff117 	ldw	r2,-60(fp)
    efc0:	10800117 	ldw	r2,4(r2)
    efc4:	1009883a 	mov	r4,r2
    efc8:	01401784 	movi	r5,94
    efcc:	01802004 	movi	r6,128
    efd0:	01c00044 	movi	r7,1
    efd4:	0000eb00 	call	eb0 <ad9361_check_cal_done>
		BBPLL_LOCK, 1);
}
    efd8:	e6fff804 	addi	sp,fp,-32
    efdc:	dfc00917 	ldw	ra,36(sp)
    efe0:	df000817 	ldw	fp,32(sp)
    efe4:	ddc00717 	ldw	r23,28(sp)
    efe8:	dd800617 	ldw	r22,24(sp)
    efec:	dd400517 	ldw	r21,20(sp)
    eff0:	dd000417 	ldw	r20,16(sp)
    eff4:	dcc00317 	ldw	r19,12(sp)
    eff8:	dc800217 	ldw	r18,8(sp)
    effc:	dc400117 	ldw	r17,4(sp)
    f000:	dc000017 	ldw	r16,0(sp)
    f004:	dec00a04 	addi	sp,sp,40
    f008:	f800283a 	ret

0000f00c <ad9361_calc_rfpll_int_freq>:
 * @return The RFPLL frequency.
 */
static uint64_t ad9361_calc_rfpll_int_freq(uint64_t parent_rate,
	uint64_t integer,
	uint64_t fract, uint32_t vco_div)
{
    f00c:	defff604 	addi	sp,sp,-40
    f010:	de00012e 	bgeu	sp,et,f018 <ad9361_calc_rfpll_int_freq+0xc>
    f014:	003b68fa 	trap	3
    f018:	dfc00915 	stw	ra,36(sp)
    f01c:	df000815 	stw	fp,32(sp)
    f020:	dc400715 	stw	r17,28(sp)
    f024:	dc000615 	stw	r16,24(sp)
    f028:	df000804 	addi	fp,sp,32
    f02c:	e13ffa15 	stw	r4,-24(fp)
    f030:	e17ffb15 	stw	r5,-20(fp)
    f034:	e1bffc15 	stw	r6,-16(fp)
    f038:	e1fffd15 	stw	r7,-12(fp)
	uint64_t rate;

	rate = parent_rate * fract;
    f03c:	e13ffa17 	ldw	r4,-24(fp)
    f040:	e17ffb17 	ldw	r5,-20(fp)
    f044:	e1800217 	ldw	r6,8(fp)
    f048:	e1c00317 	ldw	r7,12(fp)
    f04c:	001c9940 	call	1c994 <__muldi3>
    f050:	1009883a 	mov	r4,r2
    f054:	180b883a 	mov	r5,r3
    f058:	2005883a 	mov	r2,r4
    f05c:	2807883a 	mov	r3,r5
    f060:	e0bff815 	stw	r2,-32(fp)
    f064:	e0fff915 	stw	r3,-28(fp)
	do_div(&rate, RFPLL_MODULUS);
    f068:	e13ff804 	addi	r4,fp,-32
    f06c:	01402034 	movhi	r5,128
    f070:	297ffc44 	addi	r5,r5,-15
    f074:	000d883a 	mov	r6,zero
    f078:	001c76c0 	call	1c76c <do_div>
	rate += parent_rate * integer;
    f07c:	e13ffa17 	ldw	r4,-24(fp)
    f080:	e17ffb17 	ldw	r5,-20(fp)
    f084:	e1bffc17 	ldw	r6,-16(fp)
    f088:	e1fffd17 	ldw	r7,-12(fp)
    f08c:	001c9940 	call	1c994 <__muldi3>
    f090:	1009883a 	mov	r4,r2
    f094:	180b883a 	mov	r5,r3
    f098:	200d883a 	mov	r6,r4
    f09c:	280f883a 	mov	r7,r5
    f0a0:	e13ff817 	ldw	r4,-32(fp)
    f0a4:	e17ff917 	ldw	r5,-28(fp)
    f0a8:	3105883a 	add	r2,r6,r4
    f0ac:	1191803a 	cmpltu	r8,r2,r6
    f0b0:	3947883a 	add	r3,r7,r5
    f0b4:	40c9883a 	add	r4,r8,r3
    f0b8:	2007883a 	mov	r3,r4
    f0bc:	1009883a 	mov	r4,r2
    f0c0:	180b883a 	mov	r5,r3
    f0c4:	e13ff815 	stw	r4,-32(fp)
    f0c8:	e17ff915 	stw	r5,-28(fp)

	return rate >> (vco_div + 1);
    f0cc:	e0bff817 	ldw	r2,-32(fp)
    f0d0:	e0fff917 	ldw	r3,-28(fp)
    f0d4:	e1000417 	ldw	r4,16(fp)
    f0d8:	21000044 	addi	r4,r4,1
    f0dc:	217ff804 	addi	r5,r4,-32
    f0e0:	28000316 	blt	r5,zero,f0f0 <ad9361_calc_rfpll_int_freq+0xe4>
    f0e4:	1960d83a 	srl	r16,r3,r5
    f0e8:	0023883a 	mov	r17,zero
    f0ec:	00000706 	br	f10c <ad9361_calc_rfpll_int_freq+0x100>
    f0f0:	180c907a 	slli	r6,r3,1
    f0f4:	014007c4 	movi	r5,31
    f0f8:	290bc83a 	sub	r5,r5,r4
    f0fc:	314a983a 	sll	r5,r6,r5
    f100:	1120d83a 	srl	r16,r2,r4
    f104:	2c20b03a 	or	r16,r5,r16
    f108:	1922d83a 	srl	r17,r3,r4
    f10c:	8007883a 	mov	r3,r16
    f110:	8809883a 	mov	r4,r17
}
    f114:	1805883a 	mov	r2,r3
    f118:	2007883a 	mov	r3,r4
    f11c:	e6fffe04 	addi	sp,fp,-8
    f120:	dfc00317 	ldw	ra,12(sp)
    f124:	df000217 	ldw	fp,8(sp)
    f128:	dc400117 	ldw	r17,4(sp)
    f12c:	dc000017 	ldw	r16,0(sp)
    f130:	dec00404 	addi	sp,sp,16
    f134:	f800283a 	ret

0000f138 <ad9361_calc_rfpll_int_divder>:
 * @return The RFPLL frequency.
 */
static int32_t ad9361_calc_rfpll_int_divder(uint64_t freq,
	uint64_t parent_rate, uint32_t *integer,
	uint32_t *fract, int32_t *vco_div, uint64_t *vco_freq)
{
    f138:	defff504 	addi	sp,sp,-44
    f13c:	de00012e 	bgeu	sp,et,f144 <ad9361_calc_rfpll_int_divder+0xc>
    f140:	003b68fa 	trap	3
    f144:	dfc00a15 	stw	ra,40(sp)
    f148:	df000915 	stw	fp,36(sp)
    f14c:	dc400815 	stw	r17,32(sp)
    f150:	dc000715 	stw	r16,28(sp)
    f154:	df000904 	addi	fp,sp,36
    f158:	e13ffa15 	stw	r4,-24(fp)
    f15c:	e17ffb15 	stw	r5,-20(fp)
    f160:	e1bffc15 	stw	r6,-16(fp)
    f164:	e1fffd15 	stw	r7,-12(fp)
	uint64_t tmp;
	int32_t div;

	if (freq > MAX_CARRIER_FREQ_HZ || freq < MIN_CARRIER_FREQ_HZ)
    f168:	e0bffa17 	ldw	r2,-24(fp)
    f16c:	e0fffb17 	ldw	r3,-20(fp)
    f170:	190000a8 	cmpgeui	r4,r3,2
    f174:	20000c1e 	bne	r4,zero,f1a8 <ad9361_calc_rfpll_int_divder+0x70>
    f178:	19000058 	cmpnei	r4,r3,1
    f17c:	2000031e 	bne	r4,zero,f18c <ad9361_calc_rfpll_int_divder+0x54>
    f180:	01196874 	movhi	r4,26017
    f184:	212f0004 	addi	r4,r4,-17408
    f188:	20800736 	bltu	r4,r2,f1a8 <ad9361_calc_rfpll_int_divder+0x70>
    f18c:	e0bffa17 	ldw	r2,-24(fp)
    f190:	e0fffb17 	ldw	r3,-20(fp)
    f194:	1800061e 	bne	r3,zero,f1b0 <ad9361_calc_rfpll_int_divder+0x78>
    f198:	1800031e 	bne	r3,zero,f1a8 <ad9361_calc_rfpll_int_divder+0x70>
    f19c:	01010b34 	movhi	r4,1068
    f1a0:	21075fc4 	addi	r4,r4,7551
    f1a4:	20800236 	bltu	r4,r2,f1b0 <ad9361_calc_rfpll_int_divder+0x78>
		return -EINVAL;
    f1a8:	00bffa84 	movi	r2,-22
    f1ac:	00005906 	br	f314 <ad9361_calc_rfpll_int_divder+0x1dc>

	div = -1;
    f1b0:	00bfffc4 	movi	r2,-1
    f1b4:	e0bff715 	stw	r2,-36(fp)

	while (freq <= MIN_VCO_FREQ_HZ) {
    f1b8:	00000e06 	br	f1f4 <ad9361_calc_rfpll_int_divder+0xbc>
		freq <<= 1;
    f1bc:	e0bffa17 	ldw	r2,-24(fp)
    f1c0:	e0fffb17 	ldw	r3,-20(fp)
    f1c4:	1089883a 	add	r4,r2,r2
    f1c8:	208d803a 	cmpltu	r6,r4,r2
    f1cc:	18cb883a 	add	r5,r3,r3
    f1d0:	3145883a 	add	r2,r6,r5
    f1d4:	100b883a 	mov	r5,r2
    f1d8:	2005883a 	mov	r2,r4
    f1dc:	2807883a 	mov	r3,r5
    f1e0:	e0bffa15 	stw	r2,-24(fp)
    f1e4:	e0fffb15 	stw	r3,-20(fp)
		div++;
    f1e8:	e0bff717 	ldw	r2,-36(fp)
    f1ec:	10800044 	addi	r2,r2,1
    f1f0:	e0bff715 	stw	r2,-36(fp)
	if (freq > MAX_CARRIER_FREQ_HZ || freq < MIN_CARRIER_FREQ_HZ)
		return -EINVAL;

	div = -1;

	while (freq <= MIN_VCO_FREQ_HZ) {
    f1f4:	e0bffa17 	ldw	r2,-24(fp)
    f1f8:	e0fffb17 	ldw	r3,-20(fp)
    f1fc:	190000a8 	cmpgeui	r4,r3,2
    f200:	2000051e 	bne	r4,zero,f218 <ad9361_calc_rfpll_int_divder+0xe0>
    f204:	19000058 	cmpnei	r4,r3,1
    f208:	203fec1e 	bne	r4,zero,f1bc <_gp+0xfffdd09c>
    f20c:	01196874 	movhi	r4,26017
    f210:	212f0004 	addi	r4,r4,-17408
    f214:	20bfe92e 	bgeu	r4,r2,f1bc <_gp+0xfffdd09c>
		freq <<= 1;
		div++;
	}

	*vco_div = div;
    f218:	e0800417 	ldw	r2,16(fp)
    f21c:	e0fff717 	ldw	r3,-36(fp)
    f220:	10c00015 	stw	r3,0(r2)
	*vco_freq = freq;
    f224:	e0bffa17 	ldw	r2,-24(fp)
    f228:	e0fffb17 	ldw	r3,-20(fp)
    f22c:	e1000517 	ldw	r4,20(fp)
    f230:	20800015 	stw	r2,0(r4)
    f234:	20c00115 	stw	r3,4(r4)
	tmp = do_div(&freq, parent_rate);
    f238:	e0bffa04 	addi	r2,fp,-24
    f23c:	1009883a 	mov	r4,r2
    f240:	e17ffc17 	ldw	r5,-16(fp)
    f244:	e1bffd17 	ldw	r6,-12(fp)
    f248:	001c76c0 	call	1c76c <do_div>
    f24c:	1009883a 	mov	r4,r2
    f250:	180b883a 	mov	r5,r3
    f254:	e13ff815 	stw	r4,-32(fp)
    f258:	e17ff915 	stw	r5,-28(fp)
	tmp = tmp * RFPLL_MODULUS + (parent_rate >> 1);
    f25c:	e17ff817 	ldw	r5,-32(fp)
    f260:	e1bff917 	ldw	r6,-28(fp)
    f264:	00802034 	movhi	r2,128
    f268:	10bffc44 	addi	r2,r2,-15
    f26c:	0007883a 	mov	r3,zero
    f270:	2809883a 	mov	r4,r5
    f274:	300b883a 	mov	r5,r6
    f278:	100d883a 	mov	r6,r2
    f27c:	180f883a 	mov	r7,r3
    f280:	001c9940 	call	1c994 <__muldi3>
    f284:	100d883a 	mov	r6,r2
    f288:	180f883a 	mov	r7,r3
    f28c:	3009883a 	mov	r4,r6
    f290:	380b883a 	mov	r5,r7
    f294:	e0bffd17 	ldw	r2,-12(fp)
    f298:	100497fa 	slli	r2,r2,31
    f29c:	e0fffc17 	ldw	r3,-16(fp)
    f2a0:	1820d07a 	srli	r16,r3,1
    f2a4:	1420b03a 	or	r16,r2,r16
    f2a8:	e0bffd17 	ldw	r2,-12(fp)
    f2ac:	1022d07a 	srli	r17,r2,1
    f2b0:	2405883a 	add	r2,r4,r16
    f2b4:	110d803a 	cmpltu	r6,r2,r4
    f2b8:	2c47883a 	add	r3,r5,r17
    f2bc:	30c9883a 	add	r4,r6,r3
    f2c0:	2007883a 	mov	r3,r4
    f2c4:	1009883a 	mov	r4,r2
    f2c8:	180b883a 	mov	r5,r3
    f2cc:	e13ff815 	stw	r4,-32(fp)
    f2d0:	e17ff915 	stw	r5,-28(fp)
	do_div(&tmp, parent_rate);
    f2d4:	e0bff804 	addi	r2,fp,-32
    f2d8:	1009883a 	mov	r4,r2
    f2dc:	e17ffc17 	ldw	r5,-16(fp)
    f2e0:	e1bffd17 	ldw	r6,-12(fp)
    f2e4:	001c76c0 	call	1c76c <do_div>
	*integer = freq;
    f2e8:	e0bffa17 	ldw	r2,-24(fp)
    f2ec:	e0fffb17 	ldw	r3,-20(fp)
    f2f0:	1007883a 	mov	r3,r2
    f2f4:	e0800217 	ldw	r2,8(fp)
    f2f8:	10c00015 	stw	r3,0(r2)
	*fract = tmp;
    f2fc:	e0bff817 	ldw	r2,-32(fp)
    f300:	e0fff917 	ldw	r3,-28(fp)
    f304:	1007883a 	mov	r3,r2
    f308:	e0800317 	ldw	r2,12(fp)
    f30c:	10c00015 	stw	r3,0(r2)

	return 0;
    f310:	0005883a 	mov	r2,zero
}
    f314:	e6fffe04 	addi	sp,fp,-8
    f318:	dfc00317 	ldw	ra,12(sp)
    f31c:	df000217 	ldw	fp,8(sp)
    f320:	dc400117 	ldw	r17,4(sp)
    f324:	dc000017 	ldw	r16,0(sp)
    f328:	dec00404 	addi	sp,sp,16
    f32c:	f800283a 	ret

0000f330 <ad9361_rfpll_int_recalc_rate>:
 * @param parent_rate The parent clock rate.
 * @return The clock rate.
 */
uint32_t ad9361_rfpll_int_recalc_rate(struct refclk_scale *clk_priv,
	uint32_t parent_rate)
{
    f330:	deffe804 	addi	sp,sp,-96
    f334:	de00012e 	bgeu	sp,et,f33c <ad9361_rfpll_int_recalc_rate+0xc>
    f338:	003b68fa 	trap	3
    f33c:	dfc01715 	stw	ra,92(sp)
    f340:	df001615 	stw	fp,88(sp)
    f344:	dd801515 	stw	r22,84(sp)
    f348:	dd401415 	stw	r21,80(sp)
    f34c:	dd001315 	stw	r20,76(sp)
    f350:	dcc01215 	stw	r19,72(sp)
    f354:	dc801115 	stw	r18,68(sp)
    f358:	dc401015 	stw	r17,64(sp)
    f35c:	dc000f15 	stw	r16,60(sp)
    f360:	df001604 	addi	fp,sp,88
    f364:	e13ff715 	stw	r4,-36(fp)
    f368:	e17ff815 	stw	r5,-32(fp)
	struct ad9361_rf_phy *phy = clk_priv->phy;
    f36c:	e0bff717 	ldw	r2,-36(fp)
    f370:	10800117 	ldw	r2,4(r2)
    f374:	e0bff115 	stw	r2,-60(fp)
	uint32_t fract, integer;
	uint8_t buf[5];
	uint32_t reg, div_mask, vco_div, profile;

	dev_dbg(&clk_priv->spi->dev, "%s: Parent Rate %"PRIu32" Hz",
    f378:	010000b4 	movhi	r4,2
    f37c:	211e0c04 	addi	r4,r4,30768
    f380:	014000b4 	movhi	r5,2
    f384:	295fb604 	addi	r5,r5,32472
    f388:	e1bff817 	ldw	r6,-32(fp)
    f38c:	001f8180 	call	1f818 <printf>
    f390:	010000b4 	movhi	r4,2
    f394:	211a7504 	addi	r4,r4,27092
    f398:	001f8180 	call	1f818 <printf>
		__func__, parent_rate);

	switch (clk_priv->source) {
    f39c:	e0bff717 	ldw	r2,-36(fp)
    f3a0:	10800417 	ldw	r2,16(r2)
    f3a4:	10c003a0 	cmpeqi	r3,r2,14
    f3a8:	1800031e 	bne	r3,zero,f3b8 <ad9361_rfpll_int_recalc_rate+0x88>
    f3ac:	108003e0 	cmpeqi	r2,r2,15
    f3b0:	10000a1e 	bne	r2,zero,f3dc <ad9361_rfpll_int_recalc_rate+0xac>
    f3b4:	00001206 	br	f400 <ad9361_rfpll_int_recalc_rate+0xd0>
	case RX_RFPLL_INT:
		reg = REG_RX_FRACT_BYTE_2;
    f3b8:	00808d44 	movi	r2,565
    f3bc:	e0bfed15 	stw	r2,-76(fp)
		div_mask = RX_VCO_DIVIDER(~0);
    f3c0:	008003c4 	movi	r2,15
    f3c4:	e0bfee15 	stw	r2,-72(fp)
		profile = phy->fastlock.current_profile[0];
    f3c8:	e0bff117 	ldw	r2,-60(fp)
    f3cc:	108061c3 	ldbu	r2,391(r2)
    f3d0:	10803fcc 	andi	r2,r2,255
    f3d4:	e0bff015 	stw	r2,-64(fp)
		break;
    f3d8:	00000b06 	br	f408 <ad9361_rfpll_int_recalc_rate+0xd8>
	case TX_RFPLL_INT:
		reg = REG_TX_FRACT_BYTE_2;
    f3dc:	00809d44 	movi	r2,629
    f3e0:	e0bfed15 	stw	r2,-76(fp)
		div_mask = TX_VCO_DIVIDER(~0);
    f3e4:	00803c04 	movi	r2,240
    f3e8:	e0bfee15 	stw	r2,-72(fp)
		profile = phy->fastlock.current_profile[1];
    f3ec:	e0bff117 	ldw	r2,-60(fp)
    f3f0:	10806203 	ldbu	r2,392(r2)
    f3f4:	10803fcc 	andi	r2,r2,255
    f3f8:	e0bff015 	stw	r2,-64(fp)
		break;
    f3fc:	00000206 	br	f408 <ad9361_rfpll_int_recalc_rate+0xd8>
	default:
		return -EINVAL;
    f400:	00bffa84 	movi	r2,-22
    f404:	00007e06 	br	f600 <ad9361_rfpll_int_recalc_rate+0x2d0>
	}

	if (profile) {
    f408:	e0bff017 	ldw	r2,-64(fp)
    f40c:	10003f26 	beq	r2,zero,f50c <ad9361_rfpll_int_recalc_rate+0x1dc>
		bool tx = clk_priv->source == TX_RFPLL_INT;
    f410:	e0bff717 	ldw	r2,-36(fp)
    f414:	10800417 	ldw	r2,16(r2)
    f418:	108003e0 	cmpeqi	r2,r2,15
    f41c:	e0bff205 	stb	r2,-56(fp)
		profile = profile - 1;
    f420:	e0bff017 	ldw	r2,-64(fp)
    f424:	10bfffc4 	addi	r2,r2,-1
    f428:	e0bff015 	stw	r2,-64(fp)

		buf[0] = ad9361_fastlock_readval(phy->spi, tx, profile, 4);
    f42c:	e0bff117 	ldw	r2,-60(fp)
    f430:	10c00117 	ldw	r3,4(r2)
    f434:	e0bff203 	ldbu	r2,-56(fp)
    f438:	1809883a 	mov	r4,r3
    f43c:	100b883a 	mov	r5,r2
    f440:	e1bff017 	ldw	r6,-64(fp)
    f444:	01c00104 	movi	r7,4
    f448:	000a86c0 	call	a86c <ad9361_fastlock_readval>
    f44c:	e0bff505 	stb	r2,-44(fp)
		buf[1] = ad9361_fastlock_readval(phy->spi, tx, profile, 3);
    f450:	e0bff117 	ldw	r2,-60(fp)
    f454:	10c00117 	ldw	r3,4(r2)
    f458:	e0bff203 	ldbu	r2,-56(fp)
    f45c:	1809883a 	mov	r4,r3
    f460:	100b883a 	mov	r5,r2
    f464:	e1bff017 	ldw	r6,-64(fp)
    f468:	01c000c4 	movi	r7,3
    f46c:	000a86c0 	call	a86c <ad9361_fastlock_readval>
    f470:	e0bff545 	stb	r2,-43(fp)
		buf[2] = ad9361_fastlock_readval(phy->spi, tx, profile, 2);
    f474:	e0bff117 	ldw	r2,-60(fp)
    f478:	10c00117 	ldw	r3,4(r2)
    f47c:	e0bff203 	ldbu	r2,-56(fp)
    f480:	1809883a 	mov	r4,r3
    f484:	100b883a 	mov	r5,r2
    f488:	e1bff017 	ldw	r6,-64(fp)
    f48c:	01c00084 	movi	r7,2
    f490:	000a86c0 	call	a86c <ad9361_fastlock_readval>
    f494:	e0bff585 	stb	r2,-42(fp)
		buf[3] = ad9361_fastlock_readval(phy->spi, tx, profile, 1);
    f498:	e0bff117 	ldw	r2,-60(fp)
    f49c:	10c00117 	ldw	r3,4(r2)
    f4a0:	e0bff203 	ldbu	r2,-56(fp)
    f4a4:	1809883a 	mov	r4,r3
    f4a8:	100b883a 	mov	r5,r2
    f4ac:	e1bff017 	ldw	r6,-64(fp)
    f4b0:	01c00044 	movi	r7,1
    f4b4:	000a86c0 	call	a86c <ad9361_fastlock_readval>
    f4b8:	e0bff5c5 	stb	r2,-41(fp)
		buf[4] = ad9361_fastlock_readval(phy->spi, tx, profile, 0);
    f4bc:	e0bff117 	ldw	r2,-60(fp)
    f4c0:	10c00117 	ldw	r3,4(r2)
    f4c4:	e0bff203 	ldbu	r2,-56(fp)
    f4c8:	1809883a 	mov	r4,r3
    f4cc:	100b883a 	mov	r5,r2
    f4d0:	e1bff017 	ldw	r6,-64(fp)
    f4d4:	000f883a 	mov	r7,zero
    f4d8:	000a86c0 	call	a86c <ad9361_fastlock_readval>
    f4dc:	e0bff605 	stb	r2,-40(fp)
		vco_div = ad9361_fastlock_readval(phy->spi, tx, profile, 12) & 0xF;
    f4e0:	e0bff117 	ldw	r2,-60(fp)
    f4e4:	10c00117 	ldw	r3,4(r2)
    f4e8:	e0bff203 	ldbu	r2,-56(fp)
    f4ec:	1809883a 	mov	r4,r3
    f4f0:	100b883a 	mov	r5,r2
    f4f4:	e1bff017 	ldw	r6,-64(fp)
    f4f8:	01c00304 	movi	r7,12
    f4fc:	000a86c0 	call	a86c <ad9361_fastlock_readval>
    f500:	108003cc 	andi	r2,r2,15
    f504:	e0bfef15 	stw	r2,-68(fp)
    f508:	00001206 	br	f554 <ad9361_rfpll_int_recalc_rate+0x224>

	}
	else {
		ad9361_spi_readm(clk_priv->spi, reg, &buf[0], ARRAY_SIZE(buf));
    f50c:	e0bff717 	ldw	r2,-36(fp)
    f510:	10c00017 	ldw	r3,0(r2)
    f514:	e0bff504 	addi	r2,fp,-44
    f518:	1809883a 	mov	r4,r3
    f51c:	e17fed17 	ldw	r5,-76(fp)
    f520:	100d883a 	mov	r6,r2
    f524:	01c00144 	movi	r7,5
    f528:	00000740 	call	74 <ad9361_spi_readm>
		vco_div = ad9361_spi_readf(clk_priv->spi, REG_RFPLL_DIVIDERS, div_mask);
    f52c:	e0bff717 	ldw	r2,-36(fp)
    f530:	15800017 	ldw	r22,0(r2)
    f534:	e13fee17 	ldw	r4,-72(fp)
    f538:	001c8300 	call	1c830 <find_first_bit>
    f53c:	b009883a 	mov	r4,r22
    f540:	01400144 	movi	r5,5
    f544:	e1bfee17 	ldw	r6,-72(fp)
    f548:	100f883a 	mov	r7,r2
    f54c:	00001b80 	call	1b8 <__ad9361_spi_readf>
    f550:	e0bfef15 	stw	r2,-68(fp)
	}

	fract = (SYNTH_FRACT_WORD(buf[0]) << 16) | (buf[1] << 8) | buf[2];
    f554:	e0bff503 	ldbu	r2,-44(fp)
    f558:	10803fcc 	andi	r2,r2,255
    f55c:	10801fcc 	andi	r2,r2,127
    f560:	1006943a 	slli	r3,r2,16
    f564:	e0bff543 	ldbu	r2,-43(fp)
    f568:	10803fcc 	andi	r2,r2,255
    f56c:	1004923a 	slli	r2,r2,8
    f570:	1886b03a 	or	r3,r3,r2
    f574:	e0bff583 	ldbu	r2,-42(fp)
    f578:	10803fcc 	andi	r2,r2,255
    f57c:	1884b03a 	or	r2,r3,r2
    f580:	e0bff315 	stw	r2,-52(fp)
	integer = (SYNTH_INTEGER_WORD(buf[3]) << 8) | buf[4];
    f584:	e0bff5c3 	ldbu	r2,-41(fp)
    f588:	10803fcc 	andi	r2,r2,255
    f58c:	108001cc 	andi	r2,r2,7
    f590:	1006923a 	slli	r3,r2,8
    f594:	e0bff603 	ldbu	r2,-40(fp)
    f598:	10803fcc 	andi	r2,r2,255
    f59c:	1884b03a 	or	r2,r3,r2
    f5a0:	e0bff415 	stw	r2,-48(fp)

	return ad9361_to_clk(ad9361_calc_rfpll_int_freq(parent_rate, integer,
    f5a4:	e0bff817 	ldw	r2,-32(fp)
    f5a8:	1029883a 	mov	r20,r2
    f5ac:	002b883a 	mov	r21,zero
    f5b0:	e0bff417 	ldw	r2,-48(fp)
    f5b4:	1025883a 	mov	r18,r2
    f5b8:	0027883a 	mov	r19,zero
    f5bc:	e0bff317 	ldw	r2,-52(fp)
    f5c0:	1021883a 	mov	r16,r2
    f5c4:	0023883a 	mov	r17,zero
    f5c8:	dc000015 	stw	r16,0(sp)
    f5cc:	dc400115 	stw	r17,4(sp)
    f5d0:	e0bfef17 	ldw	r2,-68(fp)
    f5d4:	d8800215 	stw	r2,8(sp)
    f5d8:	a009883a 	mov	r4,r20
    f5dc:	a80b883a 	mov	r5,r21
    f5e0:	900d883a 	mov	r6,r18
    f5e4:	980f883a 	mov	r7,r19
    f5e8:	000f00c0 	call	f00c <ad9361_calc_rfpll_int_freq>
    f5ec:	100b883a 	mov	r5,r2
    f5f0:	180d883a 	mov	r6,r3
    f5f4:	2809883a 	mov	r4,r5
    f5f8:	300b883a 	mov	r5,r6
    f5fc:	00010a80 	call	10a8 <ad9361_to_clk>
		fract, vco_div));
}
    f600:	e6fff904 	addi	sp,fp,-28
    f604:	dfc00817 	ldw	ra,32(sp)
    f608:	df000717 	ldw	fp,28(sp)
    f60c:	dd800617 	ldw	r22,24(sp)
    f610:	dd400517 	ldw	r21,20(sp)
    f614:	dd000417 	ldw	r20,16(sp)
    f618:	dcc00317 	ldw	r19,12(sp)
    f61c:	dc800217 	ldw	r18,8(sp)
    f620:	dc400117 	ldw	r17,4(sp)
    f624:	dc000017 	ldw	r16,0(sp)
    f628:	dec00904 	addi	sp,sp,36
    f62c:	f800283a 	ret

0000f630 <ad9361_rfpll_int_round_rate>:
 * @param parent_rate The parent clock rate.
 * @return The closest possible clock rate that can be set.
 */
int32_t ad9361_rfpll_int_round_rate(struct refclk_scale *clk_priv, uint32_t rate,
	uint32_t *prate)
{
    f630:	defffb04 	addi	sp,sp,-20
    f634:	de00012e 	bgeu	sp,et,f63c <ad9361_rfpll_int_round_rate+0xc>
    f638:	003b68fa 	trap	3
    f63c:	dfc00415 	stw	ra,16(sp)
    f640:	df000315 	stw	fp,12(sp)
    f644:	df000304 	addi	fp,sp,12
    f648:	e13ffd15 	stw	r4,-12(fp)
    f64c:	e17ffe15 	stw	r5,-8(fp)
    f650:	e1bfff15 	stw	r6,-4(fp)
	dev_dbg(&clk_priv->spi->dev, "%s: Rate %"PRIu32" Hz", __func__, rate);
    f654:	010000b4 	movhi	r4,2
    f658:	211e1204 	addi	r4,r4,30792
    f65c:	014000b4 	movhi	r5,2
    f660:	295fbe04 	addi	r5,r5,32504
    f664:	e1bffe17 	ldw	r6,-8(fp)
    f668:	001f8180 	call	1f818 <printf>
    f66c:	010000b4 	movhi	r4,2
    f670:	211a7504 	addi	r4,r4,27092
    f674:	001f8180 	call	1f818 <printf>

	if (clk_priv) {
		// Unused variable - fix compiler warning
	}

	if (ad9361_from_clk(rate) > MAX_CARRIER_FREQ_HZ ||
    f678:	e13ffe17 	ldw	r4,-8(fp)
    f67c:	00010f00 	call	10f0 <ad9361_from_clk>
    f680:	1009883a 	mov	r4,r2
    f684:	180b883a 	mov	r5,r3
    f688:	288000a8 	cmpgeui	r2,r5,2
    f68c:	10000e1e 	bne	r2,zero,f6c8 <ad9361_rfpll_int_round_rate+0x98>
    f690:	28800058 	cmpnei	r2,r5,1
    f694:	1000031e 	bne	r2,zero,f6a4 <ad9361_rfpll_int_round_rate+0x74>
    f698:	00996874 	movhi	r2,26017
    f69c:	10af0004 	addi	r2,r2,-17408
    f6a0:	11000936 	bltu	r2,r4,f6c8 <ad9361_rfpll_int_round_rate+0x98>
		ad9361_from_clk(rate) < MIN_CARRIER_FREQ_HZ)
    f6a4:	e13ffe17 	ldw	r4,-8(fp)
    f6a8:	00010f00 	call	10f0 <ad9361_from_clk>
    f6ac:	1009883a 	mov	r4,r2
    f6b0:	180b883a 	mov	r5,r3

	if (clk_priv) {
		// Unused variable - fix compiler warning
	}

	if (ad9361_from_clk(rate) > MAX_CARRIER_FREQ_HZ ||
    f6b4:	2800061e 	bne	r5,zero,f6d0 <ad9361_rfpll_int_round_rate+0xa0>
    f6b8:	2800031e 	bne	r5,zero,f6c8 <ad9361_rfpll_int_round_rate+0x98>
    f6bc:	00810b34 	movhi	r2,1068
    f6c0:	10875fc4 	addi	r2,r2,7551
    f6c4:	11000236 	bltu	r2,r4,f6d0 <ad9361_rfpll_int_round_rate+0xa0>
		ad9361_from_clk(rate) < MIN_CARRIER_FREQ_HZ)
		return -EINVAL;
    f6c8:	00bffa84 	movi	r2,-22
    f6cc:	00000106 	br	f6d4 <ad9361_rfpll_int_round_rate+0xa4>

	return rate;
    f6d0:	e0bffe17 	ldw	r2,-8(fp)
}
    f6d4:	e037883a 	mov	sp,fp
    f6d8:	dfc00117 	ldw	ra,4(sp)
    f6dc:	df000017 	ldw	fp,0(sp)
    f6e0:	dec00204 	addi	sp,sp,8
    f6e4:	f800283a 	ret

0000f6e8 <ad9361_rfpll_int_set_rate>:
 * @param parent_rate The parent clock rate.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_rfpll_int_set_rate(struct refclk_scale *clk_priv, uint32_t rate,
	uint32_t parent_rate)
{
    f6e8:	deffe904 	addi	sp,sp,-92
    f6ec:	de00012e 	bgeu	sp,et,f6f4 <ad9361_rfpll_int_set_rate+0xc>
    f6f0:	003b68fa 	trap	3
    f6f4:	dfc01615 	stw	ra,88(sp)
    f6f8:	df001515 	stw	fp,84(sp)
    f6fc:	dc401415 	stw	r17,80(sp)
    f700:	dc001315 	stw	r16,76(sp)
    f704:	df001504 	addi	fp,sp,84
    f708:	e13ffb15 	stw	r4,-20(fp)
    f70c:	e17ffc15 	stw	r5,-16(fp)
    f710:	e1bffd15 	stw	r6,-12(fp)
	struct ad9361_rf_phy *phy = clk_priv->phy;
    f714:	e0bffb17 	ldw	r2,-20(fp)
    f718:	10800117 	ldw	r2,4(r2)
    f71c:	e0bff215 	stw	r2,-56(fp)
	uint64_t vco = 0;
    f720:	e03ff415 	stw	zero,-48(fp)
    f724:	e03ff515 	stw	zero,-44(fp)
	uint8_t buf[5];
	uint32_t reg, div_mask, lock_reg, fract = 0, integer = 0;
    f728:	e03ff815 	stw	zero,-32(fp)
    f72c:	e03ff915 	stw	zero,-28(fp)
	int32_t vco_div = 0, ret;
    f730:	e03ffa15 	stw	zero,-24(fp)

	dev_dbg(&clk_priv->spi->dev, "%s: Rate %"PRIu32" Hz Parent Rate %"PRIu32" Hz",
    f734:	010000b4 	movhi	r4,2
    f738:	211e0304 	addi	r4,r4,30732
    f73c:	014000b4 	movhi	r5,2
    f740:	295fc504 	addi	r5,r5,32532
    f744:	e1bffc17 	ldw	r6,-16(fp)
    f748:	e1fffd17 	ldw	r7,-12(fp)
    f74c:	001f8180 	call	1f818 <printf>
    f750:	010000b4 	movhi	r4,2
    f754:	211a7504 	addi	r4,r4,27092
    f758:	001f8180 	call	1f818 <printf>
		__func__, rate, parent_rate);

	ad9361_fastlock_prepare(phy, clk_priv->source == TX_RFPLL_INT, 0, false);
    f75c:	e0bffb17 	ldw	r2,-20(fp)
    f760:	10800417 	ldw	r2,16(r2)
    f764:	108003e0 	cmpeqi	r2,r2,15
    f768:	10803fcc 	andi	r2,r2,255
    f76c:	e13ff217 	ldw	r4,-56(fp)
    f770:	100b883a 	mov	r5,r2
    f774:	000d883a 	mov	r6,zero
    f778:	000f883a 	mov	r7,zero
    f77c:	000b1080 	call	b108 <ad9361_fastlock_prepare>

	ret = ad9361_calc_rfpll_int_divder(ad9361_from_clk(rate), parent_rate,
    f780:	e13ffc17 	ldw	r4,-16(fp)
    f784:	00010f00 	call	10f0 <ad9361_from_clk>
    f788:	100b883a 	mov	r5,r2
    f78c:	180d883a 	mov	r6,r3
    f790:	e0bffd17 	ldw	r2,-12(fp)
    f794:	1021883a 	mov	r16,r2
    f798:	0023883a 	mov	r17,zero
    f79c:	e0bff904 	addi	r2,fp,-28
    f7a0:	d8800015 	stw	r2,0(sp)
    f7a4:	e0bff804 	addi	r2,fp,-32
    f7a8:	d8800115 	stw	r2,4(sp)
    f7ac:	e0bffa04 	addi	r2,fp,-24
    f7b0:	d8800215 	stw	r2,8(sp)
    f7b4:	e0bff404 	addi	r2,fp,-48
    f7b8:	d8800315 	stw	r2,12(sp)
    f7bc:	2809883a 	mov	r4,r5
    f7c0:	300b883a 	mov	r5,r6
    f7c4:	800d883a 	mov	r6,r16
    f7c8:	880f883a 	mov	r7,r17
    f7cc:	000f1380 	call	f138 <ad9361_calc_rfpll_int_divder>
    f7d0:	e0bff315 	stw	r2,-52(fp)
		&integer, &fract, &vco_div, &vco);
	if (ret < 0)
    f7d4:	e0bff317 	ldw	r2,-52(fp)
    f7d8:	1000020e 	bge	r2,zero,f7e4 <ad9361_rfpll_int_set_rate+0xfc>
		return ret;
    f7dc:	e0bff317 	ldw	r2,-52(fp)
    f7e0:	00007d06 	br	f9d8 <ad9361_rfpll_int_set_rate+0x2f0>

	switch (clk_priv->source) {
    f7e4:	e0bffb17 	ldw	r2,-20(fp)
    f7e8:	10800417 	ldw	r2,16(r2)
    f7ec:	10c003a0 	cmpeqi	r3,r2,14
    f7f0:	1800031e 	bne	r3,zero,f800 <ad9361_rfpll_int_set_rate+0x118>
    f7f4:	108003e0 	cmpeqi	r2,r2,15
    f7f8:	10000c1e 	bne	r2,zero,f82c <ad9361_rfpll_int_set_rate+0x144>
    f7fc:	00001606 	br	f858 <ad9361_rfpll_int_set_rate+0x170>
	case RX_RFPLL_INT:
		reg = REG_RX_FRACT_BYTE_2;
    f800:	00808d44 	movi	r2,565
    f804:	e0bfef15 	stw	r2,-68(fp)
		lock_reg = REG_RX_CP_OVERRANGE_VCO_LOCK;
    f808:	008091c4 	movi	r2,583
    f80c:	e0bff115 	stw	r2,-60(fp)
		div_mask = RX_VCO_DIVIDER(~0);
    f810:	008003c4 	movi	r2,15
    f814:	e0bff015 	stw	r2,-64(fp)
		phy->cached_rx_rfpll_div = vco_div;
    f818:	e0bffa17 	ldw	r2,-24(fp)
    f81c:	1007883a 	mov	r3,r2
    f820:	e0bff217 	ldw	r2,-56(fp)
    f824:	10c03185 	stb	r3,198(r2)
		break;
    f828:	00000d06 	br	f860 <ad9361_rfpll_int_set_rate+0x178>
	case TX_RFPLL_INT:
		reg = REG_TX_FRACT_BYTE_2;
    f82c:	00809d44 	movi	r2,629
    f830:	e0bfef15 	stw	r2,-68(fp)
		lock_reg = REG_TX_CP_OVERRANGE_VCO_LOCK;
    f834:	0080a1c4 	movi	r2,647
    f838:	e0bff115 	stw	r2,-60(fp)
		div_mask = TX_VCO_DIVIDER(~0);
    f83c:	00803c04 	movi	r2,240
    f840:	e0bff015 	stw	r2,-64(fp)
		phy->cached_tx_rfpll_div = vco_div;
    f844:	e0bffa17 	ldw	r2,-24(fp)
    f848:	1007883a 	mov	r3,r2
    f84c:	e0bff217 	ldw	r2,-56(fp)
    f850:	10c031c5 	stb	r3,199(r2)
		break;
    f854:	00000206 	br	f860 <ad9361_rfpll_int_set_rate+0x178>
	default:
		return -EINVAL;
    f858:	00bffa84 	movi	r2,-22
    f85c:	00005e06 	br	f9d8 <ad9361_rfpll_int_set_rate+0x2f0>

	}

	/* Option to skip VCO cal in TDD mode when moving from TX/RX to Alert */
	if (phy->pdata->tdd_skip_vco_cal)
    f860:	e0bff217 	ldw	r2,-56(fp)
    f864:	10803017 	ldw	r2,192(r2)
    f868:	10800283 	ldbu	r2,10(r2)
    f86c:	10803fcc 	andi	r2,r2,255
    f870:	10000826 	beq	r2,zero,f894 <ad9361_rfpll_int_set_rate+0x1ac>
		ad9361_trx_vco_cal_control(phy, clk_priv->source == TX_RFPLL_INT,
    f874:	e0bffb17 	ldw	r2,-20(fp)
    f878:	10800417 	ldw	r2,16(r2)
    f87c:	108003e0 	cmpeqi	r2,r2,15
    f880:	10803fcc 	andi	r2,r2,255
    f884:	e13ff217 	ldw	r4,-56(fp)
    f888:	100b883a 	mov	r5,r2
    f88c:	01800044 	movi	r6,1
    f890:	00063880 	call	6388 <ad9361_trx_vco_cal_control>
					   true);

	ad9361_rfpll_vco_init(phy, div_mask == TX_VCO_DIVIDER(~0),
    f894:	e0bff017 	ldw	r2,-64(fp)
    f898:	10803c20 	cmpeqi	r2,r2,240
    f89c:	11403fcc 	andi	r5,r2,255
    f8a0:	e0bff417 	ldw	r2,-48(fp)
    f8a4:	e0fff517 	ldw	r3,-44(fp)
    f8a8:	e13ffd17 	ldw	r4,-12(fp)
    f8ac:	d9000015 	stw	r4,0(sp)
    f8b0:	e13ff217 	ldw	r4,-56(fp)
    f8b4:	100d883a 	mov	r6,r2
    f8b8:	180f883a 	mov	r7,r3
    f8bc:	0001a8c0 	call	1a8c <ad9361_rfpll_vco_init>
		vco, parent_rate);

	buf[0] = SYNTH_FRACT_WORD(fract >> 16);
    f8c0:	e0bff817 	ldw	r2,-32(fp)
    f8c4:	1004d43a 	srli	r2,r2,16
    f8c8:	10801fcc 	andi	r2,r2,127
    f8cc:	e0bff605 	stb	r2,-40(fp)
	buf[1] = fract >> 8;
    f8d0:	e0bff817 	ldw	r2,-32(fp)
    f8d4:	1004d23a 	srli	r2,r2,8
    f8d8:	e0bff645 	stb	r2,-39(fp)
	buf[2] = fract & 0xFF;
    f8dc:	e0bff817 	ldw	r2,-32(fp)
    f8e0:	e0bff685 	stb	r2,-38(fp)
	buf[3] = integer >> 8;
    f8e4:	e0bff917 	ldw	r2,-28(fp)
    f8e8:	1004d23a 	srli	r2,r2,8
    f8ec:	e0bff6c5 	stb	r2,-37(fp)
	buf[3] = SYNTH_INTEGER_WORD(integer >> 8) |
    f8f0:	e0bff917 	ldw	r2,-28(fp)
    f8f4:	1004d23a 	srli	r2,r2,8
    f8f8:	108001cc 	andi	r2,r2,7
    f8fc:	1021883a 	mov	r16,r2
			(~SYNTH_INTEGER_WORD(~0) &
			ad9361_spi_read(clk_priv->spi, reg - 3));
    f900:	e0bffb17 	ldw	r2,-20(fp)
    f904:	10c00017 	ldw	r3,0(r2)
    f908:	e0bfef17 	ldw	r2,-68(fp)
    f90c:	10bfff44 	addi	r2,r2,-3
    f910:	1809883a 	mov	r4,r3
    f914:	100b883a 	mov	r5,r2
    f918:	00001500 	call	150 <ad9361_spi_read>

	buf[0] = SYNTH_FRACT_WORD(fract >> 16);
	buf[1] = fract >> 8;
	buf[2] = fract & 0xFF;
	buf[3] = integer >> 8;
	buf[3] = SYNTH_INTEGER_WORD(integer >> 8) |
    f91c:	1007883a 	mov	r3,r2
    f920:	00bffe04 	movi	r2,-8
    f924:	1884703a 	and	r2,r3,r2
    f928:	8084b03a 	or	r2,r16,r2
    f92c:	e0bff6c5 	stb	r2,-37(fp)
			(~SYNTH_INTEGER_WORD(~0) &
			ad9361_spi_read(clk_priv->spi, reg - 3));
	buf[4] = integer & 0xFF;
    f930:	e0bff917 	ldw	r2,-28(fp)
    f934:	e0bff705 	stb	r2,-36(fp)

	ad9361_spi_writem(clk_priv->spi, reg, buf, 5);
    f938:	e0bffb17 	ldw	r2,-20(fp)
    f93c:	10c00017 	ldw	r3,0(r2)
    f940:	e0bff604 	addi	r2,fp,-40
    f944:	1809883a 	mov	r4,r3
    f948:	e17fef17 	ldw	r5,-68(fp)
    f94c:	100d883a 	mov	r6,r2
    f950:	01c00144 	movi	r7,5
    f954:	00003ec0 	call	3ec <ad9361_spi_writem>
	ad9361_spi_writef(clk_priv->spi, REG_RFPLL_DIVIDERS, div_mask, vco_div);
    f958:	e0bffb17 	ldw	r2,-20(fp)
    f95c:	14000017 	ldw	r16,0(r2)
    f960:	e13ff017 	ldw	r4,-64(fp)
    f964:	001c8300 	call	1c830 <find_first_bit>
    f968:	1007883a 	mov	r3,r2
    f96c:	e0bffa17 	ldw	r2,-24(fp)
    f970:	d8800015 	stw	r2,0(sp)
    f974:	8009883a 	mov	r4,r16
    f978:	01400144 	movi	r5,5
    f97c:	e1bff017 	ldw	r6,-64(fp)
    f980:	180f883a 	mov	r7,r3
    f984:	000031c0 	call	31c <__ad9361_spi_writef>

	ret = ad9361_check_cal_done(phy, lock_reg, VCO_LOCK, 1);
    f988:	e13ff217 	ldw	r4,-56(fp)
    f98c:	e17ff117 	ldw	r5,-60(fp)
    f990:	01800084 	movi	r6,2
    f994:	01c00044 	movi	r7,1
    f998:	0000eb00 	call	eb0 <ad9361_check_cal_done>
    f99c:	e0bff315 	stw	r2,-52(fp)

	if (phy->pdata->tdd_skip_vco_cal)
    f9a0:	e0bff217 	ldw	r2,-56(fp)
    f9a4:	10803017 	ldw	r2,192(r2)
    f9a8:	10800283 	ldbu	r2,10(r2)
    f9ac:	10803fcc 	andi	r2,r2,255
    f9b0:	10000826 	beq	r2,zero,f9d4 <ad9361_rfpll_int_set_rate+0x2ec>
		ad9361_trx_vco_cal_control(phy, clk_priv->source == TX_RFPLL_INT,
    f9b4:	e0bffb17 	ldw	r2,-20(fp)
    f9b8:	10800417 	ldw	r2,16(r2)
    f9bc:	108003e0 	cmpeqi	r2,r2,15
    f9c0:	10803fcc 	andi	r2,r2,255
    f9c4:	e13ff217 	ldw	r4,-56(fp)
    f9c8:	100b883a 	mov	r5,r2
    f9cc:	000d883a 	mov	r6,zero
    f9d0:	00063880 	call	6388 <ad9361_trx_vco_cal_control>
		false);

	return ret;
    f9d4:	e0bff317 	ldw	r2,-52(fp)
}
    f9d8:	e6fffe04 	addi	sp,fp,-8
    f9dc:	dfc00317 	ldw	ra,12(sp)
    f9e0:	df000217 	ldw	fp,8(sp)
    f9e4:	dc400117 	ldw	r17,4(sp)
    f9e8:	dc000017 	ldw	r16,0(sp)
    f9ec:	dec00404 	addi	sp,sp,16
    f9f0:	f800283a 	ret

0000f9f4 <ad9361_rfpll_dummy_recalc_rate>:
 * @param refclk_scale The refclk_scale structure.
 * @param parent_rate The parent clock rate.
 * @return The clock rate.
 */
uint32_t ad9361_rfpll_dummy_recalc_rate(struct refclk_scale *clk_priv)
{
    f9f4:	defffd04 	addi	sp,sp,-12
    f9f8:	de00012e 	bgeu	sp,et,fa00 <ad9361_rfpll_dummy_recalc_rate+0xc>
    f9fc:	003b68fa 	trap	3
    fa00:	df000215 	stw	fp,8(sp)
    fa04:	df000204 	addi	fp,sp,8
    fa08:	e13fff15 	stw	r4,-4(fp)
	struct ad9361_rf_phy *phy = clk_priv->phy;
    fa0c:	e0bfff17 	ldw	r2,-4(fp)
    fa10:	10800117 	ldw	r2,4(r2)
    fa14:	e0bffe15 	stw	r2,-8(fp)

	return 	phy->clks[clk_priv->source]->rate;
    fa18:	e0bfff17 	ldw	r2,-4(fp)
    fa1c:	10800417 	ldw	r2,16(r2)
    fa20:	e0fffe17 	ldw	r3,-8(fp)
    fa24:	108000c4 	addi	r2,r2,3
    fa28:	1085883a 	add	r2,r2,r2
    fa2c:	1085883a 	add	r2,r2,r2
    fa30:	1885883a 	add	r2,r3,r2
    fa34:	10800017 	ldw	r2,0(r2)
    fa38:	10800117 	ldw	r2,4(r2)
}
    fa3c:	e037883a 	mov	sp,fp
    fa40:	df000017 	ldw	fp,0(sp)
    fa44:	dec00104 	addi	sp,sp,4
    fa48:	f800283a 	ret

0000fa4c <ad9361_rfpll_dummy_set_rate>:
 * @param rate The clock rate.
 * @param parent_rate The parent clock rate.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_rfpll_dummy_set_rate(struct refclk_scale *clk_priv, uint32_t rate)
{
    fa4c:	defffc04 	addi	sp,sp,-16
    fa50:	de00012e 	bgeu	sp,et,fa58 <ad9361_rfpll_dummy_set_rate+0xc>
    fa54:	003b68fa 	trap	3
    fa58:	df000315 	stw	fp,12(sp)
    fa5c:	df000304 	addi	fp,sp,12
    fa60:	e13ffe15 	stw	r4,-8(fp)
    fa64:	e17fff15 	stw	r5,-4(fp)
	struct ad9361_rf_phy *phy = clk_priv->phy;
    fa68:	e0bffe17 	ldw	r2,-8(fp)
    fa6c:	10800117 	ldw	r2,4(r2)
    fa70:	e0bffd15 	stw	r2,-12(fp)

	phy->clks[clk_priv->source]->rate = rate;
    fa74:	e0bffe17 	ldw	r2,-8(fp)
    fa78:	10800417 	ldw	r2,16(r2)
    fa7c:	e0fffd17 	ldw	r3,-12(fp)
    fa80:	108000c4 	addi	r2,r2,3
    fa84:	1085883a 	add	r2,r2,r2
    fa88:	1085883a 	add	r2,r2,r2
    fa8c:	1885883a 	add	r2,r3,r2
    fa90:	10800017 	ldw	r2,0(r2)
    fa94:	e0ffff17 	ldw	r3,-4(fp)
    fa98:	10c00115 	stw	r3,4(r2)

	return 0;
    fa9c:	0005883a 	mov	r2,zero
}
    faa0:	e037883a 	mov	sp,fp
    faa4:	df000017 	ldw	fp,0(sp)
    faa8:	dec00104 	addi	sp,sp,4
    faac:	f800283a 	ret

0000fab0 <ad9361_rfpll_recalc_rate>:
 * @param refclk_scale The refclk_scale structure.
 * @param parent_rate The parent clock rate.
 * @return The clock rate.
 */
uint32_t ad9361_rfpll_recalc_rate(struct refclk_scale *clk_priv)
{
    fab0:	defffb04 	addi	sp,sp,-20
    fab4:	de00012e 	bgeu	sp,et,fabc <ad9361_rfpll_recalc_rate+0xc>
    fab8:	003b68fa 	trap	3
    fabc:	dfc00415 	stw	ra,16(sp)
    fac0:	df000315 	stw	fp,12(sp)
    fac4:	df000304 	addi	fp,sp,12
    fac8:	e13fff15 	stw	r4,-4(fp)
	struct ad9361_rf_phy *phy = clk_priv->phy;
    facc:	e0bfff17 	ldw	r2,-4(fp)
    fad0:	10800117 	ldw	r2,4(r2)
    fad4:	e0bffe15 	stw	r2,-8(fp)
	uint32_t rate;

	switch (clk_priv->source) {
    fad8:	e0bfff17 	ldw	r2,-4(fp)
    fadc:	10800417 	ldw	r2,16(r2)
    fae0:	10c004a0 	cmpeqi	r3,r2,18
    fae4:	1800031e 	bne	r3,zero,faf4 <ad9361_rfpll_recalc_rate+0x44>
    fae8:	108004e0 	cmpeqi	r2,r2,19
    faec:	10001f1e 	bne	r2,zero,fb6c <ad9361_rfpll_recalc_rate+0xbc>
    faf0:	00003c06 	br	fbe4 <ad9361_rfpll_recalc_rate+0x134>
	case RX_RFPLL:
		if (phy->pdata->use_ext_rx_lo) {
    faf4:	e0bffe17 	ldw	r2,-8(fp)
    faf8:	10803017 	ldw	r2,192(r2)
    fafc:	108002c3 	ldbu	r2,11(r2)
    fb00:	10803fcc 	andi	r2,r2,255
    fb04:	10000f26 	beq	r2,zero,fb44 <ad9361_rfpll_recalc_rate+0x94>
			if (phy->ad9361_rfpll_ext_recalc_rate)
    fb08:	e0bffe17 	ldw	r2,-8(fp)
    fb0c:	10802d17 	ldw	r2,180(r2)
    fb10:	10000626 	beq	r2,zero,fb2c <ad9361_rfpll_recalc_rate+0x7c>
				rate = phy->ad9361_rfpll_ext_recalc_rate(clk_priv);
    fb14:	e0bffe17 	ldw	r2,-8(fp)
    fb18:	10802d17 	ldw	r2,180(r2)
    fb1c:	e13fff17 	ldw	r4,-4(fp)
    fb20:	103ee83a 	callr	r2
    fb24:	e0bffd15 	stw	r2,-12(fp)
				rate = ad9361_rfpll_dummy_recalc_rate(phy->ref_clk_scale[RX_RFPLL_DUMMY]);
		} else {
			rate = ad9361_rfpll_int_recalc_rate(phy->ref_clk_scale[RX_RFPLL_INT],
					phy->clks[RX_REFCLK]->rate);
		}
		break;
    fb28:	00003006 	br	fbec <ad9361_rfpll_recalc_rate+0x13c>
	case RX_RFPLL:
		if (phy->pdata->use_ext_rx_lo) {
			if (phy->ad9361_rfpll_ext_recalc_rate)
				rate = phy->ad9361_rfpll_ext_recalc_rate(clk_priv);
			else
				rate = ad9361_rfpll_dummy_recalc_rate(phy->ref_clk_scale[RX_RFPLL_DUMMY]);
    fb2c:	e0bffe17 	ldw	r2,-8(fp)
    fb30:	10802717 	ldw	r2,156(r2)
    fb34:	1009883a 	mov	r4,r2
    fb38:	000f9f40 	call	f9f4 <ad9361_rfpll_dummy_recalc_rate>
    fb3c:	e0bffd15 	stw	r2,-12(fp)
		} else {
			rate = ad9361_rfpll_int_recalc_rate(phy->ref_clk_scale[RX_RFPLL_INT],
					phy->clks[RX_REFCLK]->rate);
		}
		break;
    fb40:	00002a06 	br	fbec <ad9361_rfpll_recalc_rate+0x13c>
			if (phy->ad9361_rfpll_ext_recalc_rate)
				rate = phy->ad9361_rfpll_ext_recalc_rate(clk_priv);
			else
				rate = ad9361_rfpll_dummy_recalc_rate(phy->ref_clk_scale[RX_RFPLL_DUMMY]);
		} else {
			rate = ad9361_rfpll_int_recalc_rate(phy->ref_clk_scale[RX_RFPLL_INT],
    fb44:	e0bffe17 	ldw	r2,-8(fp)
    fb48:	10c02517 	ldw	r3,148(r2)
					phy->clks[RX_REFCLK]->rate);
    fb4c:	e0bffe17 	ldw	r2,-8(fp)
    fb50:	10800417 	ldw	r2,16(r2)
			if (phy->ad9361_rfpll_ext_recalc_rate)
				rate = phy->ad9361_rfpll_ext_recalc_rate(clk_priv);
			else
				rate = ad9361_rfpll_dummy_recalc_rate(phy->ref_clk_scale[RX_RFPLL_DUMMY]);
		} else {
			rate = ad9361_rfpll_int_recalc_rate(phy->ref_clk_scale[RX_RFPLL_INT],
    fb54:	10800117 	ldw	r2,4(r2)
    fb58:	1809883a 	mov	r4,r3
    fb5c:	100b883a 	mov	r5,r2
    fb60:	000f3300 	call	f330 <ad9361_rfpll_int_recalc_rate>
    fb64:	e0bffd15 	stw	r2,-12(fp)
					phy->clks[RX_REFCLK]->rate);
		}
		break;
    fb68:	00002006 	br	fbec <ad9361_rfpll_recalc_rate+0x13c>
	case TX_RFPLL:
		if (phy->pdata->use_ext_tx_lo) {
    fb6c:	e0bffe17 	ldw	r2,-8(fp)
    fb70:	10803017 	ldw	r2,192(r2)
    fb74:	10800303 	ldbu	r2,12(r2)
    fb78:	10803fcc 	andi	r2,r2,255
    fb7c:	10000f26 	beq	r2,zero,fbbc <ad9361_rfpll_recalc_rate+0x10c>
			if (phy->ad9361_rfpll_ext_recalc_rate)
    fb80:	e0bffe17 	ldw	r2,-8(fp)
    fb84:	10802d17 	ldw	r2,180(r2)
    fb88:	10000626 	beq	r2,zero,fba4 <ad9361_rfpll_recalc_rate+0xf4>
				rate = phy->ad9361_rfpll_ext_recalc_rate(clk_priv);
    fb8c:	e0bffe17 	ldw	r2,-8(fp)
    fb90:	10802d17 	ldw	r2,180(r2)
    fb94:	e13fff17 	ldw	r4,-4(fp)
    fb98:	103ee83a 	callr	r2
    fb9c:	e0bffd15 	stw	r2,-12(fp)
				rate = ad9361_rfpll_dummy_recalc_rate(phy->ref_clk_scale[TX_RFPLL_DUMMY]);
		} else {
			rate = ad9361_rfpll_int_recalc_rate(phy->ref_clk_scale[TX_RFPLL_INT],
					phy->clks[TX_REFCLK]->rate);
		}
		break;
    fba0:	00001206 	br	fbec <ad9361_rfpll_recalc_rate+0x13c>
	case TX_RFPLL:
		if (phy->pdata->use_ext_tx_lo) {
			if (phy->ad9361_rfpll_ext_recalc_rate)
				rate = phy->ad9361_rfpll_ext_recalc_rate(clk_priv);
			else
				rate = ad9361_rfpll_dummy_recalc_rate(phy->ref_clk_scale[TX_RFPLL_DUMMY]);
    fba4:	e0bffe17 	ldw	r2,-8(fp)
    fba8:	10802817 	ldw	r2,160(r2)
    fbac:	1009883a 	mov	r4,r2
    fbb0:	000f9f40 	call	f9f4 <ad9361_rfpll_dummy_recalc_rate>
    fbb4:	e0bffd15 	stw	r2,-12(fp)
		} else {
			rate = ad9361_rfpll_int_recalc_rate(phy->ref_clk_scale[TX_RFPLL_INT],
					phy->clks[TX_REFCLK]->rate);
		}
		break;
    fbb8:	00000c06 	br	fbec <ad9361_rfpll_recalc_rate+0x13c>
			if (phy->ad9361_rfpll_ext_recalc_rate)
				rate = phy->ad9361_rfpll_ext_recalc_rate(clk_priv);
			else
				rate = ad9361_rfpll_dummy_recalc_rate(phy->ref_clk_scale[TX_RFPLL_DUMMY]);
		} else {
			rate = ad9361_rfpll_int_recalc_rate(phy->ref_clk_scale[TX_RFPLL_INT],
    fbbc:	e0bffe17 	ldw	r2,-8(fp)
    fbc0:	10c02617 	ldw	r3,152(r2)
					phy->clks[TX_REFCLK]->rate);
    fbc4:	e0bffe17 	ldw	r2,-8(fp)
    fbc8:	10800517 	ldw	r2,20(r2)
			if (phy->ad9361_rfpll_ext_recalc_rate)
				rate = phy->ad9361_rfpll_ext_recalc_rate(clk_priv);
			else
				rate = ad9361_rfpll_dummy_recalc_rate(phy->ref_clk_scale[TX_RFPLL_DUMMY]);
		} else {
			rate = ad9361_rfpll_int_recalc_rate(phy->ref_clk_scale[TX_RFPLL_INT],
    fbcc:	10800117 	ldw	r2,4(r2)
    fbd0:	1809883a 	mov	r4,r3
    fbd4:	100b883a 	mov	r5,r2
    fbd8:	000f3300 	call	f330 <ad9361_rfpll_int_recalc_rate>
    fbdc:	e0bffd15 	stw	r2,-12(fp)
					phy->clks[TX_REFCLK]->rate);
		}
		break;
    fbe0:	00000206 	br	fbec <ad9361_rfpll_recalc_rate+0x13c>
	default:
		rate = 0;
    fbe4:	e03ffd15 	stw	zero,-12(fp)
		break;
    fbe8:	0001883a 	nop
	}

	return rate;
    fbec:	e0bffd17 	ldw	r2,-12(fp)
}
    fbf0:	e037883a 	mov	sp,fp
    fbf4:	dfc00117 	ldw	ra,4(sp)
    fbf8:	df000017 	ldw	fp,0(sp)
    fbfc:	dec00204 	addi	sp,sp,8
    fc00:	f800283a 	ret

0000fc04 <ad9361_rfpll_round_rate>:
 * @param rate The clock rate.
 * @param parent_rate The parent clock rate.
 * @return The closest possible clock rate that can be set.
 */
int32_t ad9361_rfpll_round_rate(struct refclk_scale *clk_priv, uint32_t rate)
{
    fc04:	defffa04 	addi	sp,sp,-24
    fc08:	de00012e 	bgeu	sp,et,fc10 <ad9361_rfpll_round_rate+0xc>
    fc0c:	003b68fa 	trap	3
    fc10:	dfc00515 	stw	ra,20(sp)
    fc14:	df000415 	stw	fp,16(sp)
    fc18:	df000404 	addi	fp,sp,16
    fc1c:	e13ffe15 	stw	r4,-8(fp)
    fc20:	e17fff15 	stw	r5,-4(fp)
	struct ad9361_rf_phy *phy = clk_priv->phy;
    fc24:	e0bffe17 	ldw	r2,-8(fp)
    fc28:	10800117 	ldw	r2,4(r2)
    fc2c:	e0bffd15 	stw	r2,-12(fp)
	int32_t round_rate;

	switch (clk_priv->source) {
    fc30:	e0bffe17 	ldw	r2,-8(fp)
    fc34:	10800417 	ldw	r2,16(r2)
    fc38:	10c004a0 	cmpeqi	r3,r2,18
    fc3c:	1800031e 	bne	r3,zero,fc4c <ad9361_rfpll_round_rate+0x48>
    fc40:	108004e0 	cmpeqi	r2,r2,19
    fc44:	1000231e 	bne	r2,zero,fcd4 <ad9361_rfpll_round_rate+0xd0>
    fc48:	00004506 	br	fd60 <ad9361_rfpll_round_rate+0x15c>
	case RX_RFPLL:
		if (phy->pdata->use_ext_rx_lo) {
    fc4c:	e0bffd17 	ldw	r2,-12(fp)
    fc50:	10803017 	ldw	r2,192(r2)
    fc54:	108002c3 	ldbu	r2,11(r2)
    fc58:	10803fcc 	andi	r2,r2,255
    fc5c:	10000d26 	beq	r2,zero,fc94 <ad9361_rfpll_round_rate+0x90>
			if (phy->ad9361_rfpll_ext_round_rate)
    fc60:	e0bffd17 	ldw	r2,-12(fp)
    fc64:	10802e17 	ldw	r2,184(r2)
    fc68:	10000726 	beq	r2,zero,fc88 <ad9361_rfpll_round_rate+0x84>
				round_rate = phy->ad9361_rfpll_ext_round_rate(clk_priv, rate);
    fc6c:	e0bffd17 	ldw	r2,-12(fp)
    fc70:	10802e17 	ldw	r2,184(r2)
    fc74:	e13ffe17 	ldw	r4,-8(fp)
    fc78:	e17fff17 	ldw	r5,-4(fp)
    fc7c:	103ee83a 	callr	r2
    fc80:	e0bffc15 	stw	r2,-16(fp)
    fc84:	00001306 	br	fcd4 <ad9361_rfpll_round_rate+0xd0>
			else
				round_rate = rate;
    fc88:	e0bfff17 	ldw	r2,-4(fp)
    fc8c:	e0bffc15 	stw	r2,-16(fp)
    fc90:	00001006 	br	fcd4 <ad9361_rfpll_round_rate+0xd0>
		} else {
			round_rate = ad9361_rfpll_int_round_rate(phy->ref_clk_scale[RX_RFPLL_INT], rate,
    fc94:	e0bffd17 	ldw	r2,-12(fp)
    fc98:	11002517 	ldw	r4,148(r2)
							&phy->clks[phy->ref_clk_scale[RX_RFPLL_INT]->parent_source]->rate);
    fc9c:	e0bffd17 	ldw	r2,-12(fp)
    fca0:	10802517 	ldw	r2,148(r2)
    fca4:	10800517 	ldw	r2,20(r2)
    fca8:	e0fffd17 	ldw	r3,-12(fp)
    fcac:	108000c4 	addi	r2,r2,3
    fcb0:	1085883a 	add	r2,r2,r2
    fcb4:	1085883a 	add	r2,r2,r2
    fcb8:	1885883a 	add	r2,r3,r2
    fcbc:	10800017 	ldw	r2,0(r2)
			if (phy->ad9361_rfpll_ext_round_rate)
				round_rate = phy->ad9361_rfpll_ext_round_rate(clk_priv, rate);
			else
				round_rate = rate;
		} else {
			round_rate = ad9361_rfpll_int_round_rate(phy->ref_clk_scale[RX_RFPLL_INT], rate,
    fcc0:	10800104 	addi	r2,r2,4
    fcc4:	e17fff17 	ldw	r5,-4(fp)
    fcc8:	100d883a 	mov	r6,r2
    fccc:	000f6300 	call	f630 <ad9361_rfpll_int_round_rate>
    fcd0:	e0bffc15 	stw	r2,-16(fp)
							&phy->clks[phy->ref_clk_scale[RX_RFPLL_INT]->parent_source]->rate);
		}
	case TX_RFPLL:
		if (phy->pdata->use_ext_tx_lo) {
    fcd4:	e0bffd17 	ldw	r2,-12(fp)
    fcd8:	10803017 	ldw	r2,192(r2)
    fcdc:	10800303 	ldbu	r2,12(r2)
    fce0:	10803fcc 	andi	r2,r2,255
    fce4:	10000d26 	beq	r2,zero,fd1c <ad9361_rfpll_round_rate+0x118>
			if (phy->ad9361_rfpll_ext_round_rate)
    fce8:	e0bffd17 	ldw	r2,-12(fp)
    fcec:	10802e17 	ldw	r2,184(r2)
    fcf0:	10000726 	beq	r2,zero,fd10 <ad9361_rfpll_round_rate+0x10c>
				round_rate = phy->ad9361_rfpll_ext_round_rate(clk_priv, rate);
    fcf4:	e0bffd17 	ldw	r2,-12(fp)
    fcf8:	10802e17 	ldw	r2,184(r2)
    fcfc:	e13ffe17 	ldw	r4,-8(fp)
    fd00:	e17fff17 	ldw	r5,-4(fp)
    fd04:	103ee83a 	callr	r2
    fd08:	e0bffc15 	stw	r2,-16(fp)
				round_rate = rate;
		} else {
			round_rate = ad9361_rfpll_int_round_rate(phy->ref_clk_scale[TX_RFPLL_INT], rate,
							&phy->clks[phy->ref_clk_scale[TX_RFPLL_INT]->parent_source]->rate);
		}
		break;
    fd0c:	00001606 	br	fd68 <ad9361_rfpll_round_rate+0x164>
	case TX_RFPLL:
		if (phy->pdata->use_ext_tx_lo) {
			if (phy->ad9361_rfpll_ext_round_rate)
				round_rate = phy->ad9361_rfpll_ext_round_rate(clk_priv, rate);
			else
				round_rate = rate;
    fd10:	e0bfff17 	ldw	r2,-4(fp)
    fd14:	e0bffc15 	stw	r2,-16(fp)
		} else {
			round_rate = ad9361_rfpll_int_round_rate(phy->ref_clk_scale[TX_RFPLL_INT], rate,
							&phy->clks[phy->ref_clk_scale[TX_RFPLL_INT]->parent_source]->rate);
		}
		break;
    fd18:	00001306 	br	fd68 <ad9361_rfpll_round_rate+0x164>
			if (phy->ad9361_rfpll_ext_round_rate)
				round_rate = phy->ad9361_rfpll_ext_round_rate(clk_priv, rate);
			else
				round_rate = rate;
		} else {
			round_rate = ad9361_rfpll_int_round_rate(phy->ref_clk_scale[TX_RFPLL_INT], rate,
    fd1c:	e0bffd17 	ldw	r2,-12(fp)
    fd20:	11002617 	ldw	r4,152(r2)
							&phy->clks[phy->ref_clk_scale[TX_RFPLL_INT]->parent_source]->rate);
    fd24:	e0bffd17 	ldw	r2,-12(fp)
    fd28:	10802617 	ldw	r2,152(r2)
    fd2c:	10800517 	ldw	r2,20(r2)
    fd30:	e0fffd17 	ldw	r3,-12(fp)
    fd34:	108000c4 	addi	r2,r2,3
    fd38:	1085883a 	add	r2,r2,r2
    fd3c:	1085883a 	add	r2,r2,r2
    fd40:	1885883a 	add	r2,r3,r2
    fd44:	10800017 	ldw	r2,0(r2)
			if (phy->ad9361_rfpll_ext_round_rate)
				round_rate = phy->ad9361_rfpll_ext_round_rate(clk_priv, rate);
			else
				round_rate = rate;
		} else {
			round_rate = ad9361_rfpll_int_round_rate(phy->ref_clk_scale[TX_RFPLL_INT], rate,
    fd48:	10800104 	addi	r2,r2,4
    fd4c:	e17fff17 	ldw	r5,-4(fp)
    fd50:	100d883a 	mov	r6,r2
    fd54:	000f6300 	call	f630 <ad9361_rfpll_int_round_rate>
    fd58:	e0bffc15 	stw	r2,-16(fp)
							&phy->clks[phy->ref_clk_scale[TX_RFPLL_INT]->parent_source]->rate);
		}
		break;
    fd5c:	00000206 	br	fd68 <ad9361_rfpll_round_rate+0x164>
	default:
		round_rate = 0;
    fd60:	e03ffc15 	stw	zero,-16(fp)
		break;
    fd64:	0001883a 	nop
	}

	return round_rate;
    fd68:	e0bffc17 	ldw	r2,-16(fp)
}
    fd6c:	e037883a 	mov	sp,fp
    fd70:	dfc00117 	ldw	ra,4(sp)
    fd74:	df000017 	ldw	fp,0(sp)
    fd78:	dec00204 	addi	sp,sp,8
    fd7c:	f800283a 	ret

0000fd80 <ad9361_rfpll_set_rate>:
 * @param rate The clock rate.
 * @param parent_rate The parent clock rate.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_rfpll_set_rate(struct refclk_scale *clk_priv, uint32_t rate)
{
    fd80:	defff504 	addi	sp,sp,-44
    fd84:	de00012e 	bgeu	sp,et,fd8c <ad9361_rfpll_set_rate+0xc>
    fd88:	003b68fa 	trap	3
    fd8c:	dfc00a15 	stw	ra,40(sp)
    fd90:	df000915 	stw	fp,36(sp)
    fd94:	dd000815 	stw	r20,32(sp)
    fd98:	dcc00715 	stw	r19,28(sp)
    fd9c:	dc800615 	stw	r18,24(sp)
    fda0:	dc400515 	stw	r17,20(sp)
    fda4:	dc000415 	stw	r16,16(sp)
    fda8:	df000904 	addi	fp,sp,36
    fdac:	e13ff915 	stw	r4,-28(fp)
    fdb0:	e17ffa15 	stw	r5,-24(fp)
	struct ad9361_rf_phy *phy = clk_priv->phy;
    fdb4:	e0bff917 	ldw	r2,-28(fp)
    fdb8:	10800117 	ldw	r2,4(r2)
    fdbc:	e0bff715 	stw	r2,-36(fp)
	int32_t ret;

	switch (clk_priv->source) {
    fdc0:	e0bff917 	ldw	r2,-28(fp)
    fdc4:	10800417 	ldw	r2,16(r2)
    fdc8:	10c004a0 	cmpeqi	r3,r2,18
    fdcc:	1800031e 	bne	r3,zero,fddc <ad9361_rfpll_set_rate+0x5c>
    fdd0:	108004e0 	cmpeqi	r2,r2,19
    fdd4:	1000331e 	bne	r2,zero,fea4 <ad9361_rfpll_set_rate+0x124>
					"%s: TX QUAD cal failed", __func__);
				phy->last_tx_quad_cal_freq = ad9361_from_clk(rate);
			}
		break;
	default:
		break;
    fdd8:	00008c06 	br	1000c <ad9361_rfpll_set_rate+0x28c>
	struct ad9361_rf_phy *phy = clk_priv->phy;
	int32_t ret;

	switch (clk_priv->source) {
	case RX_RFPLL:
		if (phy->pdata->use_ext_rx_lo) {
    fddc:	e0bff717 	ldw	r2,-36(fp)
    fde0:	10803017 	ldw	r2,192(r2)
    fde4:	108002c3 	ldbu	r2,11(r2)
    fde8:	10803fcc 	andi	r2,r2,255
    fdec:	10000f26 	beq	r2,zero,fe2c <ad9361_rfpll_set_rate+0xac>
			if (phy->ad9361_rfpll_ext_set_rate)
    fdf0:	e0bff717 	ldw	r2,-36(fp)
    fdf4:	10802f17 	ldw	r2,188(r2)
    fdf8:	10000626 	beq	r2,zero,fe14 <ad9361_rfpll_set_rate+0x94>
				phy->ad9361_rfpll_ext_set_rate(clk_priv, rate);
    fdfc:	e0bff717 	ldw	r2,-36(fp)
    fe00:	10802f17 	ldw	r2,188(r2)
    fe04:	e13ff917 	ldw	r4,-28(fp)
    fe08:	e17ffa17 	ldw	r5,-24(fp)
    fe0c:	103ee83a 	callr	r2
    fe10:	00001506 	br	fe68 <ad9361_rfpll_set_rate+0xe8>
			else
				ad9361_rfpll_dummy_set_rate(phy->ref_clk_scale[RX_RFPLL_DUMMY], rate);
    fe14:	e0bff717 	ldw	r2,-36(fp)
    fe18:	10802717 	ldw	r2,156(r2)
    fe1c:	1009883a 	mov	r4,r2
    fe20:	e17ffa17 	ldw	r5,-24(fp)
    fe24:	000fa4c0 	call	fa4c <ad9361_rfpll_dummy_set_rate>
    fe28:	00000f06 	br	fe68 <ad9361_rfpll_set_rate+0xe8>
		} else {
			ad9361_rfpll_int_set_rate(phy->ref_clk_scale[RX_RFPLL_INT], rate,
    fe2c:	e0bff717 	ldw	r2,-36(fp)
    fe30:	11002517 	ldw	r4,148(r2)
					phy->clks[phy->ref_clk_scale[RX_RFPLL_INT]->parent_source]->rate);
    fe34:	e0bff717 	ldw	r2,-36(fp)
    fe38:	10802517 	ldw	r2,148(r2)
    fe3c:	10800517 	ldw	r2,20(r2)
    fe40:	e0fff717 	ldw	r3,-36(fp)
    fe44:	108000c4 	addi	r2,r2,3
    fe48:	1085883a 	add	r2,r2,r2
    fe4c:	1085883a 	add	r2,r2,r2
    fe50:	1885883a 	add	r2,r3,r2
    fe54:	10800017 	ldw	r2,0(r2)
			if (phy->ad9361_rfpll_ext_set_rate)
				phy->ad9361_rfpll_ext_set_rate(clk_priv, rate);
			else
				ad9361_rfpll_dummy_set_rate(phy->ref_clk_scale[RX_RFPLL_DUMMY], rate);
		} else {
			ad9361_rfpll_int_set_rate(phy->ref_clk_scale[RX_RFPLL_INT], rate,
    fe58:	10800117 	ldw	r2,4(r2)
    fe5c:	e17ffa17 	ldw	r5,-24(fp)
    fe60:	100d883a 	mov	r6,r2
    fe64:	000f6e80 	call	f6e8 <ad9361_rfpll_int_set_rate>
					phy->clks[phy->ref_clk_scale[RX_RFPLL_INT]->parent_source]->rate);
		}
		/* Load Gain Table */
		ret = ad9361_load_gt(phy, ad9361_from_clk(rate), GT_RX1 + GT_RX2);
    fe68:	e13ffa17 	ldw	r4,-24(fp)
    fe6c:	00010f00 	call	10f0 <ad9361_from_clk>
    fe70:	100d883a 	mov	r6,r2
    fe74:	180f883a 	mov	r7,r3
    fe78:	e13ff717 	ldw	r4,-36(fp)
    fe7c:	300b883a 	mov	r5,r6
    fe80:	380d883a 	mov	r6,r7
    fe84:	01c000c4 	movi	r7,3
    fe88:	00011500 	call	1150 <ad9361_load_gt>
    fe8c:	e0bff815 	stw	r2,-32(fp)
		if (ret < 0)
    fe90:	e0bff817 	ldw	r2,-32(fp)
    fe94:	1000020e 	bge	r2,zero,fea0 <ad9361_rfpll_set_rate+0x120>
			return ret;
    fe98:	e0bff817 	ldw	r2,-32(fp)
    fe9c:	00005c06 	br	10010 <ad9361_rfpll_set_rate+0x290>
		break;
    fea0:	00005a06 	br	1000c <ad9361_rfpll_set_rate+0x28c>
	case TX_RFPLL:
		if (phy->pdata->use_ext_tx_lo) {
    fea4:	e0bff717 	ldw	r2,-36(fp)
    fea8:	10803017 	ldw	r2,192(r2)
    feac:	10800303 	ldbu	r2,12(r2)
    feb0:	10803fcc 	andi	r2,r2,255
    feb4:	10000f26 	beq	r2,zero,fef4 <ad9361_rfpll_set_rate+0x174>
			if (phy->ad9361_rfpll_ext_set_rate)
    feb8:	e0bff717 	ldw	r2,-36(fp)
    febc:	10802f17 	ldw	r2,188(r2)
    fec0:	10000626 	beq	r2,zero,fedc <ad9361_rfpll_set_rate+0x15c>
				phy->ad9361_rfpll_ext_set_rate(clk_priv, rate);
    fec4:	e0bff717 	ldw	r2,-36(fp)
    fec8:	10802f17 	ldw	r2,188(r2)
    fecc:	e13ff917 	ldw	r4,-28(fp)
    fed0:	e17ffa17 	ldw	r5,-24(fp)
    fed4:	103ee83a 	callr	r2
    fed8:	00001506 	br	ff30 <ad9361_rfpll_set_rate+0x1b0>
			else
				ad9361_rfpll_dummy_set_rate(phy->ref_clk_scale[TX_RFPLL_DUMMY], rate);
    fedc:	e0bff717 	ldw	r2,-36(fp)
    fee0:	10802817 	ldw	r2,160(r2)
    fee4:	1009883a 	mov	r4,r2
    fee8:	e17ffa17 	ldw	r5,-24(fp)
    feec:	000fa4c0 	call	fa4c <ad9361_rfpll_dummy_set_rate>
    fef0:	00000f06 	br	ff30 <ad9361_rfpll_set_rate+0x1b0>
		} else {
			ad9361_rfpll_int_set_rate(phy->ref_clk_scale[TX_RFPLL_INT], rate,
    fef4:	e0bff717 	ldw	r2,-36(fp)
    fef8:	11002617 	ldw	r4,152(r2)
					phy->clks[phy->ref_clk_scale[TX_RFPLL_INT]->parent_source]->rate);
    fefc:	e0bff717 	ldw	r2,-36(fp)
    ff00:	10802617 	ldw	r2,152(r2)
    ff04:	10800517 	ldw	r2,20(r2)
    ff08:	e0fff717 	ldw	r3,-36(fp)
    ff0c:	108000c4 	addi	r2,r2,3
    ff10:	1085883a 	add	r2,r2,r2
    ff14:	1085883a 	add	r2,r2,r2
    ff18:	1885883a 	add	r2,r3,r2
    ff1c:	10800017 	ldw	r2,0(r2)
			if (phy->ad9361_rfpll_ext_set_rate)
				phy->ad9361_rfpll_ext_set_rate(clk_priv, rate);
			else
				ad9361_rfpll_dummy_set_rate(phy->ref_clk_scale[TX_RFPLL_DUMMY], rate);
		} else {
			ad9361_rfpll_int_set_rate(phy->ref_clk_scale[TX_RFPLL_INT], rate,
    ff20:	10800117 	ldw	r2,4(r2)
    ff24:	e17ffa17 	ldw	r5,-24(fp)
    ff28:	100d883a 	mov	r6,r2
    ff2c:	000f6e80 	call	f6e8 <ad9361_rfpll_int_set_rate>
					phy->clks[phy->ref_clk_scale[TX_RFPLL_INT]->parent_source]->rate);
		}
		/* For RX LO we typically have the tracking option enabled
		* so for now do nothing here.
		*/
		if (phy->auto_cal_en && (clk_priv->source == TX_RFPLL_INT))
    ff30:	e0bff717 	ldw	r2,-36(fp)
    ff34:	10804543 	ldbu	r2,277(r2)
    ff38:	10803fcc 	andi	r2,r2,255
    ff3c:	10003226 	beq	r2,zero,10008 <ad9361_rfpll_set_rate+0x288>
    ff40:	e0bff917 	ldw	r2,-28(fp)
    ff44:	10800417 	ldw	r2,16(r2)
    ff48:	108003d8 	cmpnei	r2,r2,15
    ff4c:	10002e1e 	bne	r2,zero,10008 <ad9361_rfpll_set_rate+0x288>
			if (abs((int64_t)(phy->last_tx_quad_cal_freq - ad9361_from_clk(rate))) >
    ff50:	e13ff717 	ldw	r4,-36(fp)
    ff54:	20804617 	ldw	r2,280(r4)
    ff58:	20c04717 	ldw	r3,284(r4)
    ff5c:	1029883a 	mov	r20,r2
    ff60:	e13ffa17 	ldw	r4,-24(fp)
    ff64:	00010f00 	call	10f0 <ad9361_from_clk>
    ff68:	1009883a 	mov	r4,r2
    ff6c:	180b883a 	mov	r5,r3
    ff70:	2005883a 	mov	r2,r4
    ff74:	a085c83a 	sub	r2,r20,r2
    ff78:	1000010e 	bge	r2,zero,ff80 <ad9361_rfpll_set_rate+0x200>
    ff7c:	0085c83a 	sub	r2,zero,r2
    ff80:	1021883a 	mov	r16,r2
    ff84:	1005d7fa 	srai	r2,r2,31
    ff88:	1023883a 	mov	r17,r2
				(int64_t)phy->cal_threshold_freq) {
    ff8c:	e0bff717 	ldw	r2,-36(fp)
    ff90:	10804a17 	ldw	r2,296(r2)
    ff94:	1025883a 	mov	r18,r2
    ff98:	0027883a 	mov	r19,zero
		}
		/* For RX LO we typically have the tracking option enabled
		* so for now do nothing here.
		*/
		if (phy->auto_cal_en && (clk_priv->source == TX_RFPLL_INT))
			if (abs((int64_t)(phy->last_tx_quad_cal_freq - ad9361_from_clk(rate))) >
    ff9c:	9c400316 	blt	r19,r17,ffac <ad9361_rfpll_set_rate+0x22c>
    ffa0:	8cc0191e 	bne	r17,r19,10008 <ad9361_rfpll_set_rate+0x288>
    ffa4:	94000136 	bltu	r18,r16,ffac <ad9361_rfpll_set_rate+0x22c>
				if (ret < 0)
					dev_err(&phy->spi->dev,
					"%s: TX QUAD cal failed", __func__);
				phy->last_tx_quad_cal_freq = ad9361_from_clk(rate);
			}
		break;
    ffa8:	00001706 	br	10008 <ad9361_rfpll_set_rate+0x288>
		* so for now do nothing here.
		*/
		if (phy->auto_cal_en && (clk_priv->source == TX_RFPLL_INT))
			if (abs((int64_t)(phy->last_tx_quad_cal_freq - ad9361_from_clk(rate))) >
				(int64_t)phy->cal_threshold_freq) {
				ret = ad9361_do_calib_run(phy, TX_QUAD_CAL, -1);
    ffac:	e13ff717 	ldw	r4,-36(fp)
    ffb0:	01400404 	movi	r5,16
    ffb4:	01bfffc4 	movi	r6,-1
    ffb8:	000ca480 	call	ca48 <ad9361_do_calib_run>
    ffbc:	e0bff815 	stw	r2,-32(fp)
				if (ret < 0)
    ffc0:	e0bff817 	ldw	r2,-32(fp)
    ffc4:	1000080e 	bge	r2,zero,ffe8 <ad9361_rfpll_set_rate+0x268>
					dev_err(&phy->spi->dev,
    ffc8:	010000b4 	movhi	r4,2
    ffcc:	211e1604 	addi	r4,r4,30808
    ffd0:	014000b4 	movhi	r5,2
    ffd4:	295fcc04 	addi	r5,r5,32560
    ffd8:	001f8180 	call	1f818 <printf>
    ffdc:	010000b4 	movhi	r4,2
    ffe0:	211a7504 	addi	r4,r4,27092
    ffe4:	001f8180 	call	1f818 <printf>
					"%s: TX QUAD cal failed", __func__);
				phy->last_tx_quad_cal_freq = ad9361_from_clk(rate);
    ffe8:	e13ffa17 	ldw	r4,-24(fp)
    ffec:	00010f00 	call	10f0 <ad9361_from_clk>
    fff0:	1009883a 	mov	r4,r2
    fff4:	180b883a 	mov	r5,r3
    fff8:	e0bff717 	ldw	r2,-36(fp)
    fffc:	11004615 	stw	r4,280(r2)
   10000:	11404715 	stw	r5,284(r2)
			}
		break;
   10004:	00000006 	br	10008 <ad9361_rfpll_set_rate+0x288>
   10008:	0001883a 	nop
	default:
		break;
	}

	return 0;
   1000c:	0005883a 	mov	r2,zero
}
   10010:	e6fffb04 	addi	sp,fp,-20
   10014:	dfc00617 	ldw	ra,24(sp)
   10018:	df000517 	ldw	fp,20(sp)
   1001c:	dd000417 	ldw	r20,16(sp)
   10020:	dcc00317 	ldw	r19,12(sp)
   10024:	dc800217 	ldw	r18,8(sp)
   10028:	dc400117 	ldw	r17,4(sp)
   1002c:	dc000017 	ldw	r16,0(sp)
   10030:	dec00704 	addi	sp,sp,28
   10034:	f800283a 	ret

00010038 <ad9361_clk_mux_set_parent>:
 * @param refclk_scale The refclk_scale structure.
 * @param index Index - Enable (1), disable (0) ext lo.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_clk_mux_set_parent(struct refclk_scale *clk_priv, uint8_t index)
{
   10038:	defffa04 	addi	sp,sp,-24
   1003c:	de00012e 	bgeu	sp,et,10044 <ad9361_clk_mux_set_parent+0xc>
   10040:	003b68fa 	trap	3
   10044:	dfc00515 	stw	ra,20(sp)
   10048:	df000415 	stw	fp,16(sp)
   1004c:	df000404 	addi	fp,sp,16
   10050:	e13ffe15 	stw	r4,-8(fp)
   10054:	2805883a 	mov	r2,r5
   10058:	e0bfff05 	stb	r2,-4(fp)
	struct ad9361_rf_phy *phy = clk_priv->phy;
   1005c:	e0bffe17 	ldw	r2,-8(fp)
   10060:	10800117 	ldw	r2,4(r2)
   10064:	e0bffc15 	stw	r2,-16(fp)
	int32_t ret;

	dev_dbg(&clk_priv->spi->dev, "%s: index %d", __func__, index);
   10068:	e0bfff03 	ldbu	r2,-4(fp)
   1006c:	010000b4 	movhi	r4,2
   10070:	211e1c04 	addi	r4,r4,30832
   10074:	014000b4 	movhi	r5,2
   10078:	295fd204 	addi	r5,r5,32584
   1007c:	100d883a 	mov	r6,r2
   10080:	001f8180 	call	1f818 <printf>
   10084:	010000b4 	movhi	r4,2
   10088:	211a7504 	addi	r4,r4,27092
   1008c:	001f8180 	call	1f818 <printf>

	ad9361_ensm_force_state(phy, ENSM_STATE_ALERT);
   10090:	e13ffc17 	ldw	r4,-16(fp)
   10094:	01400144 	movi	r5,5
   10098:	00024740 	call	2474 <ad9361_ensm_force_state>

	ret = ad9361_trx_ext_lo_control(phy, clk_priv->source == TX_RFPLL, index == 1);
   1009c:	e0bffe17 	ldw	r2,-8(fp)
   100a0:	10800417 	ldw	r2,16(r2)
   100a4:	108004e0 	cmpeqi	r2,r2,19
   100a8:	10c03fcc 	andi	r3,r2,255
   100ac:	e0bfff03 	ldbu	r2,-4(fp)
   100b0:	10800060 	cmpeqi	r2,r2,1
   100b4:	10803fcc 	andi	r2,r2,255
   100b8:	e13ffc17 	ldw	r4,-16(fp)
   100bc:	180b883a 	mov	r5,r3
   100c0:	100d883a 	mov	r6,r2
   100c4:	000644c0 	call	644c <ad9361_trx_ext_lo_control>
   100c8:	e0bffd15 	stw	r2,-12(fp)
	if (ret >= 0)
   100cc:	e0bffd17 	ldw	r2,-12(fp)
   100d0:	10000316 	blt	r2,zero,100e0 <ad9361_clk_mux_set_parent+0xa8>
		clk_priv->mult = index;
   100d4:	e0ffff03 	ldbu	r3,-4(fp)
   100d8:	e0bffe17 	ldw	r2,-8(fp)
   100dc:	10c00215 	stw	r3,8(r2)

	ad9361_ensm_restore_prev_state(phy);
   100e0:	e13ffc17 	ldw	r4,-16(fp)
   100e4:	00026740 	call	2674 <ad9361_ensm_restore_prev_state>

	return ret;
   100e8:	e0bffd17 	ldw	r2,-12(fp)
}
   100ec:	e037883a 	mov	sp,fp
   100f0:	dfc00117 	ldw	ra,4(sp)
   100f4:	df000017 	ldw	fp,0(sp)
   100f8:	dec00204 	addi	sp,sp,8
   100fc:	f800283a 	ret

00010100 <ad9361_clk_register>:
 * @return A struct clk for the new clock or a negative error code.
 */
static struct clk *ad9361_clk_register(struct ad9361_rf_phy *phy, const char *name,
	const char *parent_name, uint32_t flags,
	uint32_t source, uint32_t parent_source)
{
   10100:	defff804 	addi	sp,sp,-32
   10104:	de00012e 	bgeu	sp,et,1010c <ad9361_clk_register+0xc>
   10108:	003b68fa 	trap	3
   1010c:	dfc00715 	stw	ra,28(sp)
   10110:	df000615 	stw	fp,24(sp)
   10114:	df000604 	addi	fp,sp,24
   10118:	e13ffc15 	stw	r4,-16(fp)
   1011c:	e17ffd15 	stw	r5,-12(fp)
   10120:	e1bffe15 	stw	r6,-8(fp)
   10124:	e1ffff15 	stw	r7,-4(fp)
	}
	if (flags) {
		// Unused variable - fix compiler warning
	}

	clk_priv = (struct refclk_scale *)malloc(sizeof(*clk_priv));
   10128:	01000604 	movi	r4,24
   1012c:	001f4f40 	call	1f4f4 <malloc>
   10130:	e0bffa15 	stw	r2,-24(fp)
	if (!clk_priv) {
   10134:	e0bffa17 	ldw	r2,-24(fp)
   10138:	1000091e 	bne	r2,zero,10160 <ad9361_clk_register+0x60>
		dev_err(&phy->spi->dev, "ad9361_clk_register: could not allocate fixed factor clk");
   1013c:	010000b4 	movhi	r4,2
   10140:	211e2004 	addi	r4,r4,30848
   10144:	001f8180 	call	1f818 <printf>
   10148:	010000b4 	movhi	r4,2
   1014c:	211a7504 	addi	r4,r4,27092
   10150:	001f8180 	call	1f818 <printf>
		return (struct clk *)ERR_PTR(-ENOMEM);
   10154:	013ffd04 	movi	r4,-12
   10158:	001c9080 	call	1c908 <ERR_PTR>
   1015c:	0000f906 	br	10544 <ad9361_clk_register+0x444>
	}

	/* struct refclk_scale assignments */
	clk_priv->source = (enum ad9361_clocks)source;
   10160:	e0bffa17 	ldw	r2,-24(fp)
   10164:	e0c00217 	ldw	r3,8(fp)
   10168:	10c00415 	stw	r3,16(r2)
	clk_priv->parent_source = (enum ad9361_clocks)parent_source;
   1016c:	e0bffa17 	ldw	r2,-24(fp)
   10170:	e0c00317 	ldw	r3,12(fp)
   10174:	10c00515 	stw	r3,20(r2)
	clk_priv->spi = phy->spi;
   10178:	e0bffc17 	ldw	r2,-16(fp)
   1017c:	10c00117 	ldw	r3,4(r2)
   10180:	e0bffa17 	ldw	r2,-24(fp)
   10184:	10c00015 	stw	r3,0(r2)
	clk_priv->phy = phy;
   10188:	e0bffa17 	ldw	r2,-24(fp)
   1018c:	e0fffc17 	ldw	r3,-16(fp)
   10190:	10c00115 	stw	r3,4(r2)

	phy->ref_clk_scale[source] = clk_priv;
   10194:	e0fffc17 	ldw	r3,-16(fp)
   10198:	e0800217 	ldw	r2,8(fp)
   1019c:	108005c4 	addi	r2,r2,23
   101a0:	1085883a 	add	r2,r2,r2
   101a4:	1085883a 	add	r2,r2,r2
   101a8:	1885883a 	add	r2,r3,r2
   101ac:	e0fffa17 	ldw	r3,-24(fp)
   101b0:	10c00015 	stw	r3,0(r2)

	clk = (struct clk *)malloc(sizeof(*clk));
   101b4:	01000204 	movi	r4,8
   101b8:	001f4f40 	call	1f4f4 <malloc>
   101bc:	e0bffb15 	stw	r2,-20(fp)
	if (!clk) {
   101c0:	e0bffb17 	ldw	r2,-20(fp)
   101c4:	1000051e 	bne	r2,zero,101dc <ad9361_clk_register+0xdc>
		free(clk_priv);
   101c8:	e13ffa17 	ldw	r4,-24(fp)
   101cc:	001f5100 	call	1f510 <free>
		return (struct clk *)ERR_PTR(-ENOMEM);
   101d0:	013ffd04 	movi	r4,-12
   101d4:	001c9080 	call	1c908 <ERR_PTR>
   101d8:	0000da06 	br	10544 <ad9361_clk_register+0x444>
	}

	switch (source) {
   101dc:	e0800217 	ldw	r2,8(fp)
   101e0:	10800528 	cmpgeui	r2,r2,20
   101e4:	1000d61e 	bne	r2,zero,10540 <ad9361_clk_register+0x440>
   101e8:	e0800217 	ldw	r2,8(fp)
   101ec:	100690ba 	slli	r3,r2,2
   101f0:	00800074 	movhi	r2,1
   101f4:	10808104 	addi	r2,r2,516
   101f8:	1885883a 	add	r2,r3,r2
   101fc:	10800017 	ldw	r2,0(r2)
   10200:	1000683a 	jmp	r2
   10204:	000102a4 	muli	zero,zero,1034
   10208:	0001027c 	xorhi	zero,zero,1033
   1020c:	00010254 	movui	zero,1033
   10210:	000102cc 	andi	zero,zero,1035
   10214:	000102f4 	movhi	zero,1035
   10218:	0001031c 	xori	zero,zero,1036
   1021c:	00010344 	movi	zero,1037
   10220:	0001036c 	andhi	zero,zero,1037
   10224:	00010394 	movui	zero,1038
   10228:	000103bc 	xorhi	zero,zero,1038
   1022c:	000103e4 	muli	zero,zero,1039
   10230:	0001040c 	andi	zero,zero,1040
   10234:	00010434 	movhi	zero,1040
   10238:	0001045c 	xori	zero,zero,1041
   1023c:	00010484 	movi	zero,1042
   10240:	000104ac 	andhi	zero,zero,1042
   10244:	000104d4 	movui	zero,1043
   10248:	000104f4 	movhi	zero,1043
   1024c:	00010514 	movui	zero,1044
   10250:	0001052c 	andhi	zero,zero,1044
	case TX_REFCLK:
		clk->rate = ad9361_clk_factor_recalc_rate(clk_priv, phy->clk_refin->rate);
   10254:	e0bffc17 	ldw	r2,-16(fp)
   10258:	10800217 	ldw	r2,8(r2)
   1025c:	10800117 	ldw	r2,4(r2)
   10260:	e13ffa17 	ldw	r4,-24(fp)
   10264:	100b883a 	mov	r5,r2
   10268:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   1026c:	1007883a 	mov	r3,r2
   10270:	e0bffb17 	ldw	r2,-20(fp)
   10274:	10c00115 	stw	r3,4(r2)
		break;
   10278:	0000b106 	br	10540 <ad9361_clk_register+0x440>
	case RX_REFCLK:
		clk->rate = ad9361_clk_factor_recalc_rate(clk_priv, phy->clk_refin->rate);
   1027c:	e0bffc17 	ldw	r2,-16(fp)
   10280:	10800217 	ldw	r2,8(r2)
   10284:	10800117 	ldw	r2,4(r2)
   10288:	e13ffa17 	ldw	r4,-24(fp)
   1028c:	100b883a 	mov	r5,r2
   10290:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   10294:	1007883a 	mov	r3,r2
   10298:	e0bffb17 	ldw	r2,-20(fp)
   1029c:	10c00115 	stw	r3,4(r2)
		break;
   102a0:	0000a706 	br	10540 <ad9361_clk_register+0x440>
	case BB_REFCLK:
		clk->rate = ad9361_clk_factor_recalc_rate(clk_priv, phy->clk_refin->rate);
   102a4:	e0bffc17 	ldw	r2,-16(fp)
   102a8:	10800217 	ldw	r2,8(r2)
   102ac:	10800117 	ldw	r2,4(r2)
   102b0:	e13ffa17 	ldw	r4,-24(fp)
   102b4:	100b883a 	mov	r5,r2
   102b8:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   102bc:	1007883a 	mov	r3,r2
   102c0:	e0bffb17 	ldw	r2,-20(fp)
   102c4:	10c00115 	stw	r3,4(r2)
		break;
   102c8:	00009d06 	br	10540 <ad9361_clk_register+0x440>
	case BBPLL_CLK:
		clk->rate = ad9361_bbpll_recalc_rate(clk_priv, phy->clks[BB_REFCLK]->rate);
   102cc:	e0bffc17 	ldw	r2,-16(fp)
   102d0:	10800317 	ldw	r2,12(r2)
   102d4:	10800117 	ldw	r2,4(r2)
   102d8:	e13ffa17 	ldw	r4,-24(fp)
   102dc:	100b883a 	mov	r5,r2
   102e0:	000e8ac0 	call	e8ac <ad9361_bbpll_recalc_rate>
   102e4:	1007883a 	mov	r3,r2
   102e8:	e0bffb17 	ldw	r2,-20(fp)
   102ec:	10c00115 	stw	r3,4(r2)
		break;
   102f0:	00009306 	br	10540 <ad9361_clk_register+0x440>
	case ADC_CLK:
		clk->rate = ad9361_clk_factor_recalc_rate(clk_priv, phy->clks[BBPLL_CLK]->rate);
   102f4:	e0bffc17 	ldw	r2,-16(fp)
   102f8:	10800617 	ldw	r2,24(r2)
   102fc:	10800117 	ldw	r2,4(r2)
   10300:	e13ffa17 	ldw	r4,-24(fp)
   10304:	100b883a 	mov	r5,r2
   10308:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   1030c:	1007883a 	mov	r3,r2
   10310:	e0bffb17 	ldw	r2,-20(fp)
   10314:	10c00115 	stw	r3,4(r2)
		break;
   10318:	00008906 	br	10540 <ad9361_clk_register+0x440>
	case R2_CLK:
		clk->rate = ad9361_clk_factor_recalc_rate(clk_priv, phy->clks[ADC_CLK]->rate);
   1031c:	e0bffc17 	ldw	r2,-16(fp)
   10320:	10800717 	ldw	r2,28(r2)
   10324:	10800117 	ldw	r2,4(r2)
   10328:	e13ffa17 	ldw	r4,-24(fp)
   1032c:	100b883a 	mov	r5,r2
   10330:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   10334:	1007883a 	mov	r3,r2
   10338:	e0bffb17 	ldw	r2,-20(fp)
   1033c:	10c00115 	stw	r3,4(r2)
		break;
   10340:	00007f06 	br	10540 <ad9361_clk_register+0x440>
	case R1_CLK:
		clk->rate = ad9361_clk_factor_recalc_rate(clk_priv, phy->clks[R2_CLK]->rate);
   10344:	e0bffc17 	ldw	r2,-16(fp)
   10348:	10800817 	ldw	r2,32(r2)
   1034c:	10800117 	ldw	r2,4(r2)
   10350:	e13ffa17 	ldw	r4,-24(fp)
   10354:	100b883a 	mov	r5,r2
   10358:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   1035c:	1007883a 	mov	r3,r2
   10360:	e0bffb17 	ldw	r2,-20(fp)
   10364:	10c00115 	stw	r3,4(r2)
		break;
   10368:	00007506 	br	10540 <ad9361_clk_register+0x440>
	case CLKRF_CLK:
		clk->rate = ad9361_clk_factor_recalc_rate(clk_priv, phy->clks[R1_CLK]->rate);
   1036c:	e0bffc17 	ldw	r2,-16(fp)
   10370:	10800917 	ldw	r2,36(r2)
   10374:	10800117 	ldw	r2,4(r2)
   10378:	e13ffa17 	ldw	r4,-24(fp)
   1037c:	100b883a 	mov	r5,r2
   10380:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   10384:	1007883a 	mov	r3,r2
   10388:	e0bffb17 	ldw	r2,-20(fp)
   1038c:	10c00115 	stw	r3,4(r2)
		break;
   10390:	00006b06 	br	10540 <ad9361_clk_register+0x440>
	case RX_SAMPL_CLK:
		clk->rate = ad9361_clk_factor_recalc_rate(clk_priv, phy->clks[CLKRF_CLK]->rate);
   10394:	e0bffc17 	ldw	r2,-16(fp)
   10398:	10800a17 	ldw	r2,40(r2)
   1039c:	10800117 	ldw	r2,4(r2)
   103a0:	e13ffa17 	ldw	r4,-24(fp)
   103a4:	100b883a 	mov	r5,r2
   103a8:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   103ac:	1007883a 	mov	r3,r2
   103b0:	e0bffb17 	ldw	r2,-20(fp)
   103b4:	10c00115 	stw	r3,4(r2)
		break;
   103b8:	00006106 	br	10540 <ad9361_clk_register+0x440>
	case DAC_CLK:
		clk->rate = ad9361_clk_factor_recalc_rate(clk_priv, phy->clks[ADC_CLK]->rate);
   103bc:	e0bffc17 	ldw	r2,-16(fp)
   103c0:	10800717 	ldw	r2,28(r2)
   103c4:	10800117 	ldw	r2,4(r2)
   103c8:	e13ffa17 	ldw	r4,-24(fp)
   103cc:	100b883a 	mov	r5,r2
   103d0:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   103d4:	1007883a 	mov	r3,r2
   103d8:	e0bffb17 	ldw	r2,-20(fp)
   103dc:	10c00115 	stw	r3,4(r2)
		break;
   103e0:	00005706 	br	10540 <ad9361_clk_register+0x440>
	case T2_CLK:
		clk->rate = ad9361_clk_factor_recalc_rate(clk_priv, phy->clks[DAC_CLK]->rate);
   103e4:	e0bffc17 	ldw	r2,-16(fp)
   103e8:	10800c17 	ldw	r2,48(r2)
   103ec:	10800117 	ldw	r2,4(r2)
   103f0:	e13ffa17 	ldw	r4,-24(fp)
   103f4:	100b883a 	mov	r5,r2
   103f8:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   103fc:	1007883a 	mov	r3,r2
   10400:	e0bffb17 	ldw	r2,-20(fp)
   10404:	10c00115 	stw	r3,4(r2)
		break;
   10408:	00004d06 	br	10540 <ad9361_clk_register+0x440>
	case T1_CLK:
		clk->rate = ad9361_clk_factor_recalc_rate(clk_priv, phy->clks[T2_CLK]->rate);
   1040c:	e0bffc17 	ldw	r2,-16(fp)
   10410:	10800d17 	ldw	r2,52(r2)
   10414:	10800117 	ldw	r2,4(r2)
   10418:	e13ffa17 	ldw	r4,-24(fp)
   1041c:	100b883a 	mov	r5,r2
   10420:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   10424:	1007883a 	mov	r3,r2
   10428:	e0bffb17 	ldw	r2,-20(fp)
   1042c:	10c00115 	stw	r3,4(r2)
		break;
   10430:	00004306 	br	10540 <ad9361_clk_register+0x440>
	case CLKTF_CLK:
		clk->rate = ad9361_clk_factor_recalc_rate(clk_priv, phy->clks[T1_CLK]->rate);
   10434:	e0bffc17 	ldw	r2,-16(fp)
   10438:	10800e17 	ldw	r2,56(r2)
   1043c:	10800117 	ldw	r2,4(r2)
   10440:	e13ffa17 	ldw	r4,-24(fp)
   10444:	100b883a 	mov	r5,r2
   10448:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   1044c:	1007883a 	mov	r3,r2
   10450:	e0bffb17 	ldw	r2,-20(fp)
   10454:	10c00115 	stw	r3,4(r2)
		break;
   10458:	00003906 	br	10540 <ad9361_clk_register+0x440>
	case TX_SAMPL_CLK:
		clk->rate = ad9361_clk_factor_recalc_rate(clk_priv, phy->clks[CLKTF_CLK]->rate);
   1045c:	e0bffc17 	ldw	r2,-16(fp)
   10460:	10800f17 	ldw	r2,60(r2)
   10464:	10800117 	ldw	r2,4(r2)
   10468:	e13ffa17 	ldw	r4,-24(fp)
   1046c:	100b883a 	mov	r5,r2
   10470:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   10474:	1007883a 	mov	r3,r2
   10478:	e0bffb17 	ldw	r2,-20(fp)
   1047c:	10c00115 	stw	r3,4(r2)
		break;
   10480:	00002f06 	br	10540 <ad9361_clk_register+0x440>
	case RX_RFPLL_INT:
		clk->rate = ad9361_rfpll_int_recalc_rate(clk_priv, phy->clks[RX_REFCLK]->rate);
   10484:	e0bffc17 	ldw	r2,-16(fp)
   10488:	10800417 	ldw	r2,16(r2)
   1048c:	10800117 	ldw	r2,4(r2)
   10490:	e13ffa17 	ldw	r4,-24(fp)
   10494:	100b883a 	mov	r5,r2
   10498:	000f3300 	call	f330 <ad9361_rfpll_int_recalc_rate>
   1049c:	1007883a 	mov	r3,r2
   104a0:	e0bffb17 	ldw	r2,-20(fp)
   104a4:	10c00115 	stw	r3,4(r2)
		break;
   104a8:	00002506 	br	10540 <ad9361_clk_register+0x440>
	case TX_RFPLL_INT:
		clk->rate = ad9361_rfpll_int_recalc_rate(clk_priv, phy->clks[TX_REFCLK]->rate);
   104ac:	e0bffc17 	ldw	r2,-16(fp)
   104b0:	10800517 	ldw	r2,20(r2)
   104b4:	10800117 	ldw	r2,4(r2)
   104b8:	e13ffa17 	ldw	r4,-24(fp)
   104bc:	100b883a 	mov	r5,r2
   104c0:	000f3300 	call	f330 <ad9361_rfpll_int_recalc_rate>
   104c4:	1007883a 	mov	r3,r2
   104c8:	e0bffb17 	ldw	r2,-20(fp)
   104cc:	10c00115 	stw	r3,4(r2)
		break;
   104d0:	00001b06 	br	10540 <ad9361_clk_register+0x440>
	case RX_RFPLL_DUMMY:
		clk->rate = phy->pdata->rx_synth_freq;
   104d4:	e0bffc17 	ldw	r2,-16(fp)
   104d8:	11003017 	ldw	r4,192(r2)
   104dc:	20801917 	ldw	r2,100(r4)
   104e0:	20c01a17 	ldw	r3,104(r4)
   104e4:	1007883a 	mov	r3,r2
   104e8:	e0bffb17 	ldw	r2,-20(fp)
   104ec:	10c00115 	stw	r3,4(r2)
		break;
   104f0:	00001306 	br	10540 <ad9361_clk_register+0x440>
	case TX_RFPLL_DUMMY:
		clk->rate = phy->pdata->tx_synth_freq;
   104f4:	e0bffc17 	ldw	r2,-16(fp)
   104f8:	11003017 	ldw	r4,192(r2)
   104fc:	20801b17 	ldw	r2,108(r4)
   10500:	20c01c17 	ldw	r3,112(r4)
   10504:	1007883a 	mov	r3,r2
   10508:	e0bffb17 	ldw	r2,-20(fp)
   1050c:	10c00115 	stw	r3,4(r2)
		break;
   10510:	00000b06 	br	10540 <ad9361_clk_register+0x440>
	case RX_RFPLL:
		clk->rate = ad9361_rfpll_recalc_rate(clk_priv);
   10514:	e13ffa17 	ldw	r4,-24(fp)
   10518:	000fab00 	call	fab0 <ad9361_rfpll_recalc_rate>
   1051c:	1007883a 	mov	r3,r2
   10520:	e0bffb17 	ldw	r2,-20(fp)
   10524:	10c00115 	stw	r3,4(r2)
		break;
   10528:	00000506 	br	10540 <ad9361_clk_register+0x440>
	case TX_RFPLL:
		clk->rate = ad9361_rfpll_recalc_rate(clk_priv);
   1052c:	e13ffa17 	ldw	r4,-24(fp)
   10530:	000fab00 	call	fab0 <ad9361_rfpll_recalc_rate>
   10534:	1007883a 	mov	r3,r2
   10538:	e0bffb17 	ldw	r2,-20(fp)
   1053c:	10c00115 	stw	r3,4(r2)
	}

	return clk;
   10540:	e0bffb17 	ldw	r2,-20(fp)
}
   10544:	e037883a 	mov	sp,fp
   10548:	dfc00117 	ldw	ra,4(sp)
   1054c:	df000017 	ldw	fp,0(sp)
   10550:	dec00204 	addi	sp,sp,8
   10554:	f800283a 	ret

00010558 <register_clocks>:
 * Register and initialize all the system clocks.
 * @param phy The AD9361 state structure.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t register_clocks(struct ad9361_rf_phy *phy)
{
   10558:	defffa04 	addi	sp,sp,-24
   1055c:	de00012e 	bgeu	sp,et,10564 <register_clocks+0xc>
   10560:	003b68fa 	trap	3
   10564:	dfc00515 	stw	ra,20(sp)
   10568:	df000415 	stw	fp,16(sp)
   1056c:	df000404 	addi	fp,sp,16
   10570:	e13fff15 	stw	r4,-4(fp)
	uint32_t flags = CLK_GET_RATE_NOCACHE;
   10574:	00801004 	movi	r2,64
   10578:	e0bffe15 	stw	r2,-8(fp)

	phy->clk_data.clks = (struct clk **)malloc(sizeof(*phy->clk_data.clks) *
   1057c:	01001404 	movi	r4,80
   10580:	001f4f40 	call	1f4f4 <malloc>
   10584:	1007883a 	mov	r3,r2
   10588:	e0bfff17 	ldw	r2,-4(fp)
   1058c:	10c02b15 	stw	r3,172(r2)
		NUM_AD9361_CLKS);
	if (!phy->clk_data.clks) {
   10590:	e0bfff17 	ldw	r2,-4(fp)
   10594:	10802b17 	ldw	r2,172(r2)
   10598:	1000081e 	bne	r2,zero,105bc <register_clocks+0x64>
		dev_err(&phy->spi->dev, "could not allocate memory");
   1059c:	010000b4 	movhi	r4,2
   105a0:	211e2f04 	addi	r4,r4,30908
   105a4:	001f8180 	call	1f818 <printf>
   105a8:	010000b4 	movhi	r4,2
   105ac:	211a7504 	addi	r4,r4,27092
   105b0:	001f8180 	call	1f818 <printf>
		return -ENOMEM;
   105b4:	00bffd04 	movi	r2,-12
   105b8:	00013a06 	br	10aa4 <register_clocks+0x54c>
	}

	phy->clk_data.clk_num = NUM_AD9361_CLKS;
   105bc:	e0bfff17 	ldw	r2,-4(fp)
   105c0:	00c00504 	movi	r3,20
   105c4:	10c02c15 	stw	r3,176(r2)

	/* Scaled Reference Clocks */
	phy->clks[TX_REFCLK] = ad9361_clk_register(phy,
   105c8:	e0bffe17 	ldw	r2,-8(fp)
   105cc:	10c00214 	ori	r3,r2,8
   105d0:	00800084 	movi	r2,2
   105d4:	d8800015 	stw	r2,0(sp)
   105d8:	00800544 	movi	r2,21
   105dc:	d8800115 	stw	r2,4(sp)
   105e0:	e13fff17 	ldw	r4,-4(fp)
   105e4:	014000b4 	movhi	r5,2
   105e8:	295e3604 	addi	r5,r5,30936
   105ec:	018000b4 	movhi	r6,2
   105f0:	319e3904 	addi	r6,r6,30948
   105f4:	180f883a 	mov	r7,r3
   105f8:	00101000 	call	10100 <ad9361_clk_register>
   105fc:	1007883a 	mov	r3,r2
   10600:	e0bfff17 	ldw	r2,-4(fp)
   10604:	10c00515 	stw	r3,20(r2)
		"tx_refclk", "ad9361_ext_refclk",
		flags | CLK_IGNORE_UNUSED,
		TX_REFCLK, EXT_REF_CLK);

	phy->clks[RX_REFCLK] = ad9361_clk_register(phy,
   10608:	e0bffe17 	ldw	r2,-8(fp)
   1060c:	10c00214 	ori	r3,r2,8
   10610:	00800044 	movi	r2,1
   10614:	d8800015 	stw	r2,0(sp)
   10618:	00800544 	movi	r2,21
   1061c:	d8800115 	stw	r2,4(sp)
   10620:	e13fff17 	ldw	r4,-4(fp)
   10624:	014000b4 	movhi	r5,2
   10628:	295e3e04 	addi	r5,r5,30968
   1062c:	018000b4 	movhi	r6,2
   10630:	319e3904 	addi	r6,r6,30948
   10634:	180f883a 	mov	r7,r3
   10638:	00101000 	call	10100 <ad9361_clk_register>
   1063c:	1007883a 	mov	r3,r2
   10640:	e0bfff17 	ldw	r2,-4(fp)
   10644:	10c00415 	stw	r3,16(r2)
		"rx_refclk", "ad9361_ext_refclk",
		flags | CLK_IGNORE_UNUSED,
		RX_REFCLK, EXT_REF_CLK);

	phy->clks[BB_REFCLK] = ad9361_clk_register(phy,
   10648:	e0bffe17 	ldw	r2,-8(fp)
   1064c:	10c00214 	ori	r3,r2,8
   10650:	d8000015 	stw	zero,0(sp)
   10654:	00800544 	movi	r2,21
   10658:	d8800115 	stw	r2,4(sp)
   1065c:	e13fff17 	ldw	r4,-4(fp)
   10660:	014000b4 	movhi	r5,2
   10664:	295e4104 	addi	r5,r5,30980
   10668:	018000b4 	movhi	r6,2
   1066c:	319e3904 	addi	r6,r6,30948
   10670:	180f883a 	mov	r7,r3
   10674:	00101000 	call	10100 <ad9361_clk_register>
   10678:	1007883a 	mov	r3,r2
   1067c:	e0bfff17 	ldw	r2,-4(fp)
   10680:	10c00315 	stw	r3,12(r2)
		"bb_refclk", "ad9361_ext_refclk",
		flags | CLK_IGNORE_UNUSED,
		BB_REFCLK, EXT_REF_CLK);

	/* Base Band PLL Clock */
	phy->clks[BBPLL_CLK] = ad9361_clk_register(phy,
   10684:	e0bffe17 	ldw	r2,-8(fp)
   10688:	10c00214 	ori	r3,r2,8
   1068c:	008000c4 	movi	r2,3
   10690:	d8800015 	stw	r2,0(sp)
   10694:	d8000115 	stw	zero,4(sp)
   10698:	e13fff17 	ldw	r4,-4(fp)
   1069c:	014000b4 	movhi	r5,2
   106a0:	295e4404 	addi	r5,r5,30992
   106a4:	018000b4 	movhi	r6,2
   106a8:	319e4104 	addi	r6,r6,30980
   106ac:	180f883a 	mov	r7,r3
   106b0:	00101000 	call	10100 <ad9361_clk_register>
   106b4:	1007883a 	mov	r3,r2
   106b8:	e0bfff17 	ldw	r2,-4(fp)
   106bc:	10c00615 	stw	r3,24(r2)
		"bbpll_clk", "bb_refclk",
		flags | CLK_IGNORE_UNUSED,
		BBPLL_CLK, BB_REFCLK);

	phy->clks[ADC_CLK] = ad9361_clk_register(phy,
   106c0:	e0bffe17 	ldw	r2,-8(fp)
   106c4:	10c00214 	ori	r3,r2,8
   106c8:	00800104 	movi	r2,4
   106cc:	d8800015 	stw	r2,0(sp)
   106d0:	008000c4 	movi	r2,3
   106d4:	d8800115 	stw	r2,4(sp)
   106d8:	e13fff17 	ldw	r4,-4(fp)
   106dc:	014000b4 	movhi	r5,2
   106e0:	295e4704 	addi	r5,r5,31004
   106e4:	018000b4 	movhi	r6,2
   106e8:	319e4404 	addi	r6,r6,30992
   106ec:	180f883a 	mov	r7,r3
   106f0:	00101000 	call	10100 <ad9361_clk_register>
   106f4:	1007883a 	mov	r3,r2
   106f8:	e0bfff17 	ldw	r2,-4(fp)
   106fc:	10c00715 	stw	r3,28(r2)
		"adc_clk", "bbpll_clk",
		flags | CLK_IGNORE_UNUSED,
		ADC_CLK, BBPLL_CLK);

	phy->clks[R2_CLK] = ad9361_clk_register(phy,
   10700:	e0bffe17 	ldw	r2,-8(fp)
   10704:	10c00214 	ori	r3,r2,8
   10708:	00800144 	movi	r2,5
   1070c:	d8800015 	stw	r2,0(sp)
   10710:	00800104 	movi	r2,4
   10714:	d8800115 	stw	r2,4(sp)
   10718:	e13fff17 	ldw	r4,-4(fp)
   1071c:	014000b4 	movhi	r5,2
   10720:	295e4904 	addi	r5,r5,31012
   10724:	018000b4 	movhi	r6,2
   10728:	319e4704 	addi	r6,r6,31004
   1072c:	180f883a 	mov	r7,r3
   10730:	00101000 	call	10100 <ad9361_clk_register>
   10734:	1007883a 	mov	r3,r2
   10738:	e0bfff17 	ldw	r2,-4(fp)
   1073c:	10c00815 	stw	r3,32(r2)
		"r2_clk", "adc_clk",
		flags | CLK_IGNORE_UNUSED,
		R2_CLK, ADC_CLK);

	phy->clks[R1_CLK] = ad9361_clk_register(phy,
   10740:	e0bffe17 	ldw	r2,-8(fp)
   10744:	10c00214 	ori	r3,r2,8
   10748:	00800184 	movi	r2,6
   1074c:	d8800015 	stw	r2,0(sp)
   10750:	00800144 	movi	r2,5
   10754:	d8800115 	stw	r2,4(sp)
   10758:	e13fff17 	ldw	r4,-4(fp)
   1075c:	014000b4 	movhi	r5,2
   10760:	295e4b04 	addi	r5,r5,31020
   10764:	018000b4 	movhi	r6,2
   10768:	319e4904 	addi	r6,r6,31012
   1076c:	180f883a 	mov	r7,r3
   10770:	00101000 	call	10100 <ad9361_clk_register>
   10774:	1007883a 	mov	r3,r2
   10778:	e0bfff17 	ldw	r2,-4(fp)
   1077c:	10c00915 	stw	r3,36(r2)
		"r1_clk", "r2_clk",
		flags | CLK_IGNORE_UNUSED,
		R1_CLK, R2_CLK);

	phy->clks[CLKRF_CLK] = ad9361_clk_register(phy,
   10780:	e0bffe17 	ldw	r2,-8(fp)
   10784:	10c00214 	ori	r3,r2,8
   10788:	008001c4 	movi	r2,7
   1078c:	d8800015 	stw	r2,0(sp)
   10790:	00800184 	movi	r2,6
   10794:	d8800115 	stw	r2,4(sp)
   10798:	e13fff17 	ldw	r4,-4(fp)
   1079c:	014000b4 	movhi	r5,2
   107a0:	295e4d04 	addi	r5,r5,31028
   107a4:	018000b4 	movhi	r6,2
   107a8:	319e4b04 	addi	r6,r6,31020
   107ac:	180f883a 	mov	r7,r3
   107b0:	00101000 	call	10100 <ad9361_clk_register>
   107b4:	1007883a 	mov	r3,r2
   107b8:	e0bfff17 	ldw	r2,-4(fp)
   107bc:	10c00a15 	stw	r3,40(r2)
		"clkrf_clk", "r1_clk",
		flags | CLK_IGNORE_UNUSED,
		CLKRF_CLK, R1_CLK);

	phy->clks[RX_SAMPL_CLK] = ad9361_clk_register(phy,
   107c0:	e0bffe17 	ldw	r2,-8(fp)
   107c4:	10c00214 	ori	r3,r2,8
   107c8:	00800204 	movi	r2,8
   107cc:	d8800015 	stw	r2,0(sp)
   107d0:	008001c4 	movi	r2,7
   107d4:	d8800115 	stw	r2,4(sp)
   107d8:	e13fff17 	ldw	r4,-4(fp)
   107dc:	014000b4 	movhi	r5,2
   107e0:	295e5004 	addi	r5,r5,31040
   107e4:	018000b4 	movhi	r6,2
   107e8:	319e4d04 	addi	r6,r6,31028
   107ec:	180f883a 	mov	r7,r3
   107f0:	00101000 	call	10100 <ad9361_clk_register>
   107f4:	1007883a 	mov	r3,r2
   107f8:	e0bfff17 	ldw	r2,-4(fp)
   107fc:	10c00b15 	stw	r3,44(r2)
		"rx_sampl_clk", "clkrf_clk",
		flags | CLK_IGNORE_UNUSED,
		RX_SAMPL_CLK, CLKRF_CLK);


	phy->clks[DAC_CLK] = ad9361_clk_register(phy,
   10800:	e0bffe17 	ldw	r2,-8(fp)
   10804:	10c00214 	ori	r3,r2,8
   10808:	00800244 	movi	r2,9
   1080c:	d8800015 	stw	r2,0(sp)
   10810:	00800104 	movi	r2,4
   10814:	d8800115 	stw	r2,4(sp)
   10818:	e13fff17 	ldw	r4,-4(fp)
   1081c:	014000b4 	movhi	r5,2
   10820:	295e5404 	addi	r5,r5,31056
   10824:	018000b4 	movhi	r6,2
   10828:	319e4704 	addi	r6,r6,31004
   1082c:	180f883a 	mov	r7,r3
   10830:	00101000 	call	10100 <ad9361_clk_register>
   10834:	1007883a 	mov	r3,r2
   10838:	e0bfff17 	ldw	r2,-4(fp)
   1083c:	10c00c15 	stw	r3,48(r2)
		"dac_clk", "adc_clk",
		flags | CLK_IGNORE_UNUSED,
		DAC_CLK, ADC_CLK);

	phy->clks[T2_CLK] = ad9361_clk_register(phy,
   10840:	e0bffe17 	ldw	r2,-8(fp)
   10844:	10c00214 	ori	r3,r2,8
   10848:	00800284 	movi	r2,10
   1084c:	d8800015 	stw	r2,0(sp)
   10850:	00800244 	movi	r2,9
   10854:	d8800115 	stw	r2,4(sp)
   10858:	e13fff17 	ldw	r4,-4(fp)
   1085c:	014000b4 	movhi	r5,2
   10860:	295e5604 	addi	r5,r5,31064
   10864:	018000b4 	movhi	r6,2
   10868:	319e5404 	addi	r6,r6,31056
   1086c:	180f883a 	mov	r7,r3
   10870:	00101000 	call	10100 <ad9361_clk_register>
   10874:	1007883a 	mov	r3,r2
   10878:	e0bfff17 	ldw	r2,-4(fp)
   1087c:	10c00d15 	stw	r3,52(r2)
		"t2_clk", "dac_clk",
		flags | CLK_IGNORE_UNUSED,
		T2_CLK, DAC_CLK);

	phy->clks[T1_CLK] = ad9361_clk_register(phy,
   10880:	e0bffe17 	ldw	r2,-8(fp)
   10884:	10c00214 	ori	r3,r2,8
   10888:	008002c4 	movi	r2,11
   1088c:	d8800015 	stw	r2,0(sp)
   10890:	00800284 	movi	r2,10
   10894:	d8800115 	stw	r2,4(sp)
   10898:	e13fff17 	ldw	r4,-4(fp)
   1089c:	014000b4 	movhi	r5,2
   108a0:	295e5804 	addi	r5,r5,31072
   108a4:	018000b4 	movhi	r6,2
   108a8:	319e5604 	addi	r6,r6,31064
   108ac:	180f883a 	mov	r7,r3
   108b0:	00101000 	call	10100 <ad9361_clk_register>
   108b4:	1007883a 	mov	r3,r2
   108b8:	e0bfff17 	ldw	r2,-4(fp)
   108bc:	10c00e15 	stw	r3,56(r2)
		"t1_clk", "t2_clk",
		flags | CLK_IGNORE_UNUSED,
		T1_CLK, T2_CLK);

	phy->clks[CLKTF_CLK] = ad9361_clk_register(phy,
   108c0:	e0bffe17 	ldw	r2,-8(fp)
   108c4:	10c00214 	ori	r3,r2,8
   108c8:	00800304 	movi	r2,12
   108cc:	d8800015 	stw	r2,0(sp)
   108d0:	008002c4 	movi	r2,11
   108d4:	d8800115 	stw	r2,4(sp)
   108d8:	e13fff17 	ldw	r4,-4(fp)
   108dc:	014000b4 	movhi	r5,2
   108e0:	295e5a04 	addi	r5,r5,31080
   108e4:	018000b4 	movhi	r6,2
   108e8:	319e5804 	addi	r6,r6,31072
   108ec:	180f883a 	mov	r7,r3
   108f0:	00101000 	call	10100 <ad9361_clk_register>
   108f4:	1007883a 	mov	r3,r2
   108f8:	e0bfff17 	ldw	r2,-4(fp)
   108fc:	10c00f15 	stw	r3,60(r2)
		"clktf_clk", "t1_clk",
		flags | CLK_IGNORE_UNUSED,
		CLKTF_CLK, T1_CLK);

	phy->clks[TX_SAMPL_CLK] = ad9361_clk_register(phy,
   10900:	e0bffe17 	ldw	r2,-8(fp)
   10904:	10c00214 	ori	r3,r2,8
   10908:	00800344 	movi	r2,13
   1090c:	d8800015 	stw	r2,0(sp)
   10910:	00800304 	movi	r2,12
   10914:	d8800115 	stw	r2,4(sp)
   10918:	e13fff17 	ldw	r4,-4(fp)
   1091c:	014000b4 	movhi	r5,2
   10920:	295e5d04 	addi	r5,r5,31092
   10924:	018000b4 	movhi	r6,2
   10928:	319e5a04 	addi	r6,r6,31080
   1092c:	180f883a 	mov	r7,r3
   10930:	00101000 	call	10100 <ad9361_clk_register>
   10934:	1007883a 	mov	r3,r2
   10938:	e0bfff17 	ldw	r2,-4(fp)
   1093c:	10c01015 	stw	r3,64(r2)
		"tx_sampl_clk", "clktf_clk",
		flags | CLK_IGNORE_UNUSED,
		TX_SAMPL_CLK, CLKTF_CLK);

	phy->clks[RX_RFPLL_INT] = ad9361_clk_register(phy,
   10940:	e0bffe17 	ldw	r2,-8(fp)
   10944:	10c00214 	ori	r3,r2,8
   10948:	00800384 	movi	r2,14
   1094c:	d8800015 	stw	r2,0(sp)
   10950:	00800044 	movi	r2,1
   10954:	d8800115 	stw	r2,4(sp)
   10958:	e13fff17 	ldw	r4,-4(fp)
   1095c:	014000b4 	movhi	r5,2
   10960:	295e6104 	addi	r5,r5,31108
   10964:	018000b4 	movhi	r6,2
   10968:	319e3e04 	addi	r6,r6,30968
   1096c:	180f883a 	mov	r7,r3
   10970:	00101000 	call	10100 <ad9361_clk_register>
   10974:	1007883a 	mov	r3,r2
   10978:	e0bfff17 	ldw	r2,-4(fp)
   1097c:	10c01115 	stw	r3,68(r2)
		"rx_rfpll", "rx_refclk",
		flags | CLK_IGNORE_UNUSED,
		RX_RFPLL_INT, RX_REFCLK);

	phy->clks[TX_RFPLL_INT] = ad9361_clk_register(phy,
   10980:	e0bffe17 	ldw	r2,-8(fp)
   10984:	10c00214 	ori	r3,r2,8
   10988:	008003c4 	movi	r2,15
   1098c:	d8800015 	stw	r2,0(sp)
   10990:	00800084 	movi	r2,2
   10994:	d8800115 	stw	r2,4(sp)
   10998:	e13fff17 	ldw	r4,-4(fp)
   1099c:	014000b4 	movhi	r5,2
   109a0:	295e6404 	addi	r5,r5,31120
   109a4:	018000b4 	movhi	r6,2
   109a8:	319e3604 	addi	r6,r6,30936
   109ac:	180f883a 	mov	r7,r3
   109b0:	00101000 	call	10100 <ad9361_clk_register>
   109b4:	1007883a 	mov	r3,r2
   109b8:	e0bfff17 	ldw	r2,-4(fp)
   109bc:	10c01215 	stw	r3,72(r2)
		"tx_rfpll", "tx_refclk",
		flags | CLK_IGNORE_UNUSED,
		TX_RFPLL_INT, TX_REFCLK);

	phy->clks[RX_RFPLL_DUMMY] = ad9361_clk_register(phy,
   109c0:	e0bffe17 	ldw	r2,-8(fp)
   109c4:	10c00214 	ori	r3,r2,8
   109c8:	00800404 	movi	r2,16
   109cc:	d8800015 	stw	r2,0(sp)
   109d0:	d8000115 	stw	zero,4(sp)
   109d4:	e13fff17 	ldw	r4,-4(fp)
   109d8:	014000b4 	movhi	r5,2
   109dc:	295e6704 	addi	r5,r5,31132
   109e0:	000d883a 	mov	r6,zero
   109e4:	180f883a 	mov	r7,r3
   109e8:	00101000 	call	10100 <ad9361_clk_register>
   109ec:	1007883a 	mov	r3,r2
   109f0:	e0bfff17 	ldw	r2,-4(fp)
   109f4:	10c01315 	stw	r3,76(r2)
		"rx_rfpll_dummy", NULL,
		flags | CLK_IGNORE_UNUSED,
		RX_RFPLL_DUMMY, 0);

	phy->clks[TX_RFPLL_DUMMY] = ad9361_clk_register(phy,
   109f8:	e0bffe17 	ldw	r2,-8(fp)
   109fc:	10c00214 	ori	r3,r2,8
   10a00:	00800444 	movi	r2,17
   10a04:	d8800015 	stw	r2,0(sp)
   10a08:	d8000115 	stw	zero,4(sp)
   10a0c:	e13fff17 	ldw	r4,-4(fp)
   10a10:	014000b4 	movhi	r5,2
   10a14:	295e6b04 	addi	r5,r5,31148
   10a18:	000d883a 	mov	r6,zero
   10a1c:	180f883a 	mov	r7,r3
   10a20:	00101000 	call	10100 <ad9361_clk_register>
   10a24:	1007883a 	mov	r3,r2
   10a28:	e0bfff17 	ldw	r2,-4(fp)
   10a2c:	10c01415 	stw	r3,80(r2)
		"tx_rfpll_dummy", NULL,
		flags | CLK_IGNORE_UNUSED,
		TX_RFPLL_DUMMY, 0);

	phy->clks[RX_RFPLL] = ad9361_clk_register(phy,
   10a30:	e0bffe17 	ldw	r2,-8(fp)
   10a34:	10c00214 	ori	r3,r2,8
   10a38:	00800484 	movi	r2,18
   10a3c:	d8800015 	stw	r2,0(sp)
   10a40:	d8000115 	stw	zero,4(sp)
   10a44:	e13fff17 	ldw	r4,-4(fp)
   10a48:	014000b4 	movhi	r5,2
   10a4c:	295e6104 	addi	r5,r5,31108
   10a50:	000d883a 	mov	r6,zero
   10a54:	180f883a 	mov	r7,r3
   10a58:	00101000 	call	10100 <ad9361_clk_register>
   10a5c:	1007883a 	mov	r3,r2
   10a60:	e0bfff17 	ldw	r2,-4(fp)
   10a64:	10c01515 	stw	r3,84(r2)
		"rx_rfpll", NULL,
		flags | CLK_IGNORE_UNUSED,
		RX_RFPLL, 0);

	phy->clks[TX_RFPLL] = ad9361_clk_register(phy,
   10a68:	e0bffe17 	ldw	r2,-8(fp)
   10a6c:	10c00214 	ori	r3,r2,8
   10a70:	008004c4 	movi	r2,19
   10a74:	d8800015 	stw	r2,0(sp)
   10a78:	d8000115 	stw	zero,4(sp)
   10a7c:	e13fff17 	ldw	r4,-4(fp)
   10a80:	014000b4 	movhi	r5,2
   10a84:	295e6404 	addi	r5,r5,31120
   10a88:	000d883a 	mov	r6,zero
   10a8c:	180f883a 	mov	r7,r3
   10a90:	00101000 	call	10100 <ad9361_clk_register>
   10a94:	1007883a 	mov	r3,r2
   10a98:	e0bfff17 	ldw	r2,-4(fp)
   10a9c:	10c01615 	stw	r3,88(r2)
		"tx_rfpll", NULL,
		flags | CLK_IGNORE_UNUSED,
		TX_RFPLL, 0);

	return 0;
   10aa0:	0005883a 	mov	r2,zero
}
   10aa4:	e037883a 	mov	sp,fp
   10aa8:	dfc00117 	ldw	ra,4(sp)
   10aac:	df000017 	ldw	fp,0(sp)
   10ab0:	dec00204 	addi	sp,sp,8
   10ab4:	f800283a 	ret

00010ab8 <ad9361_rssi_gain_step_calib>:
 *    the received data is within a few dB of full scale but not overloading.
 * @param phy The AD9361 state structure.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_rssi_gain_step_calib(struct ad9361_rf_phy *phy)
{
   10ab8:	deffe604 	addi	sp,sp,-104
   10abc:	de00012e 	bgeu	sp,et,10ac4 <ad9361_rssi_gain_step_calib+0xc>
   10ac0:	003b68fa 	trap	3
   10ac4:	dfc01915 	stw	ra,100(sp)
   10ac8:	df001815 	stw	fp,96(sp)
   10acc:	dc001715 	stw	r16,92(sp)
   10ad0:	df001804 	addi	fp,sp,96
   10ad4:	e13ffe15 	stw	r4,-8(fp)
	uint32_t mixer_error[15];
	uint64_t lo_freq_hz;
	uint8_t  lo_index;
	uint8_t  i;

	lo_freq_hz = ad9361_from_clk(clk_get_rate(phy,
   10ad8:	e0bffe17 	ldw	r2,-8(fp)
   10adc:	10802917 	ldw	r2,164(r2)
   10ae0:	e13ffe17 	ldw	r4,-8(fp)
   10ae4:	100b883a 	mov	r5,r2
   10ae8:	001bc900 	call	1bc90 <clk_get_rate>
   10aec:	1009883a 	mov	r4,r2
   10af0:	00010f00 	call	10f0 <ad9361_from_clk>
   10af4:	e0bfe915 	stw	r2,-92(fp)
   10af8:	e0ffea15 	stw	r3,-88(fp)
										phy->ref_clk_scale[RX_RFPLL]));
	if (lo_freq_hz < 1300000000ULL)
   10afc:	e0bfea17 	ldw	r2,-88(fp)
   10b00:	1000081e 	bne	r2,zero,10b24 <ad9361_rssi_gain_step_calib+0x6c>
   10b04:	e0bfea17 	ldw	r2,-88(fp)
   10b08:	1000041e 	bne	r2,zero,10b1c <ad9361_rssi_gain_step_calib+0x64>
   10b0c:	e0ffe917 	ldw	r3,-92(fp)
   10b10:	00935f34 	movhi	r2,19836
   10b14:	109b3fc4 	addi	r2,r2,27903
   10b18:	10c00236 	bltu	r2,r3,10b24 <ad9361_rssi_gain_step_calib+0x6c>
		lo_index = 0;
   10b1c:	e03fe805 	stb	zero,-96(fp)
   10b20:	00001806 	br	10b84 <ad9361_rssi_gain_step_calib+0xcc>
	else
		if (lo_freq_hz < 3300000000ULL)
   10b24:	e0bfea17 	ldw	r2,-88(fp)
   10b28:	1000091e 	bne	r2,zero,10b50 <ad9361_rssi_gain_step_calib+0x98>
   10b2c:	e0bfea17 	ldw	r2,-88(fp)
   10b30:	1000041e 	bne	r2,zero,10b44 <ad9361_rssi_gain_step_calib+0x8c>
   10b34:	e0ffe917 	ldw	r3,-92(fp)
   10b38:	00b12cb4 	movhi	r2,50354
   10b3c:	10803fc4 	addi	r2,r2,255
   10b40:	10c00336 	bltu	r2,r3,10b50 <ad9361_rssi_gain_step_calib+0x98>
			lo_index = 1;
   10b44:	00800044 	movi	r2,1
   10b48:	e0bfe805 	stb	r2,-96(fp)
   10b4c:	00000d06 	br	10b84 <ad9361_rssi_gain_step_calib+0xcc>
		else
			if (lo_freq_hz < 4100000000ULL)
   10b50:	e0bfea17 	ldw	r2,-88(fp)
   10b54:	1000091e 	bne	r2,zero,10b7c <ad9361_rssi_gain_step_calib+0xc4>
   10b58:	e0bfea17 	ldw	r2,-88(fp)
   10b5c:	1000041e 	bne	r2,zero,10b70 <ad9361_rssi_gain_step_calib+0xb8>
   10b60:	e0ffe917 	ldw	r3,-92(fp)
   10b64:	00bd1874 	movhi	r2,62561
   10b68:	10823fc4 	addi	r2,r2,2303
   10b6c:	10c00336 	bltu	r2,r3,10b7c <ad9361_rssi_gain_step_calib+0xc4>
				lo_index = 2;
   10b70:	00800084 	movi	r2,2
   10b74:	e0bfe805 	stb	r2,-96(fp)
   10b78:	00000206 	br	10b84 <ad9361_rssi_gain_step_calib+0xcc>
			else
				lo_index = 3;
   10b7c:	008000c4 	movi	r2,3
   10b80:	e0bfe805 	stb	r2,-96(fp)

	/* Put the AD9361 into the Alert state. */
	ad9361_ensm_force_state(phy, ENSM_STATE_ALERT);
   10b84:	e13ffe17 	ldw	r4,-8(fp)
   10b88:	01400144 	movi	r5,5
   10b8c:	00024740 	call	2474 <ad9361_ensm_force_state>

	/* Program the directly-addressable register values. */
	ad9361_spi_write(phy->spi, REG_MAX_MIXER_CALIBRATION_GAIN_INDEX,
   10b90:	e0bffe17 	ldw	r2,-8(fp)
   10b94:	10800117 	ldw	r2,4(r2)
   10b98:	1009883a 	mov	r4,r2
   10b9c:	01405144 	movi	r5,325
   10ba0:	018003c4 	movi	r6,15
   10ba4:	00002600 	call	260 <ad9361_spi_write>
			MAX_MIXER_CALIBRATION_GAIN_INDEX(0x0F));
	ad9361_spi_write(phy->spi, REG_MEASURE_DURATION,
   10ba8:	e0bffe17 	ldw	r2,-8(fp)
   10bac:	10800117 	ldw	r2,4(r2)
   10bb0:	1009883a 	mov	r4,r2
   10bb4:	01405204 	movi	r5,328
   10bb8:	01800384 	movi	r6,14
   10bbc:	00002600 	call	260 <ad9361_spi_write>
			GAIN_CAL_MEAS_DURATION(0x0E));
	ad9361_spi_write(phy->spi, REG_SETTLE_TIME,
   10bc0:	e0bffe17 	ldw	r2,-8(fp)
   10bc4:	10800117 	ldw	r2,4(r2)
   10bc8:	1009883a 	mov	r4,r2
   10bcc:	014051c4 	movi	r5,327
   10bd0:	01800fc4 	movi	r6,63
   10bd4:	00002600 	call	260 <ad9361_spi_write>
			SETTLE_TIME(0x3F));
	ad9361_spi_write(phy->spi, REG_RSSI_CONFIG,
   10bd8:	e0bffe17 	ldw	r2,-8(fp)
   10bdc:	10800117 	ldw	r2,4(r2)
   10be0:	1009883a 	mov	r4,r2
   10be4:	01405604 	movi	r5,344
   10be8:	01800344 	movi	r6,13
   10bec:	00002600 	call	260 <ad9361_spi_write>
			RSSI_MODE_SELECT(0x3) | DEFAULT_RSSI_MEAS_MODE);
	ad9361_spi_write(phy->spi, REG_MEASURE_DURATION_01,
   10bf0:	e0bffe17 	ldw	r2,-8(fp)
   10bf4:	10800117 	ldw	r2,4(r2)
   10bf8:	1009883a 	mov	r4,r2
   10bfc:	01405404 	movi	r5,336
   10c00:	01800384 	movi	r6,14
   10c04:	00002600 	call	260 <ad9361_spi_write>
			MEASUREMENT_DURATION_0(0x0E));
	ad9361_spi_write(phy->spi, REG_LNA_GAIN,
   10c08:	e0bffe17 	ldw	r2,-8(fp)
   10c0c:	11000117 	ldw	r4,4(r2)
   10c10:	e0ffe803 	ldbu	r3,-96(fp)
   10c14:	008000b4 	movhi	r2,2
   10c18:	109a4c04 	addi	r2,r2,26928
   10c1c:	18c00524 	muli	r3,r3,20
   10c20:	10c5883a 	add	r2,r2,r3
   10c24:	10800017 	ldw	r2,0(r2)
   10c28:	01405744 	movi	r5,349
   10c2c:	100d883a 	mov	r6,r2
   10c30:	00002600 	call	260 <ad9361_spi_write>
			gain_step_calib_reg_val[lo_index][0]);

	/* Program the LNA gain step words into the internal table. */
	ad9361_spi_write(phy->spi, REG_CONFIG,
   10c34:	e0bffe17 	ldw	r2,-8(fp)
   10c38:	10800117 	ldw	r2,4(r2)
   10c3c:	1009883a 	mov	r4,r2
   10c40:	014050c4 	movi	r5,323
   10c44:	01801844 	movi	r6,97
   10c48:	00002600 	call	260 <ad9361_spi_write>
			CALIB_TABLE_SELECT(0x3) | START_CALIB_TABLE_CLOCK);
	for(i = 0; i < 4; i++) {
   10c4c:	e03fe845 	stb	zero,-95(fp)
   10c50:	00002306 	br	10ce0 <ad9361_rssi_gain_step_calib+0x228>
		ad9361_spi_write(phy->spi, REG_WORD_ADDRESS, i);
   10c54:	e0bffe17 	ldw	r2,-8(fp)
   10c58:	10c00117 	ldw	r3,4(r2)
   10c5c:	e0bfe843 	ldbu	r2,-95(fp)
   10c60:	1809883a 	mov	r4,r3
   10c64:	01405004 	movi	r5,320
   10c68:	100d883a 	mov	r6,r2
   10c6c:	00002600 	call	260 <ad9361_spi_write>
		ad9361_spi_write(phy->spi, REG_GAIN_DIFF_WORDERROR_WRITE,
   10c70:	e0bffe17 	ldw	r2,-8(fp)
   10c74:	11400117 	ldw	r5,4(r2)
   10c78:	e13fe803 	ldbu	r4,-96(fp)
				gain_step_calib_reg_val[lo_index][i+1]);
   10c7c:	e0bfe843 	ldbu	r2,-95(fp)
   10c80:	10c00044 	addi	r3,r2,1
	/* Program the LNA gain step words into the internal table. */
	ad9361_spi_write(phy->spi, REG_CONFIG,
			CALIB_TABLE_SELECT(0x3) | START_CALIB_TABLE_CLOCK);
	for(i = 0; i < 4; i++) {
		ad9361_spi_write(phy->spi, REG_WORD_ADDRESS, i);
		ad9361_spi_write(phy->spi, REG_GAIN_DIFF_WORDERROR_WRITE,
   10c84:	008000b4 	movhi	r2,2
   10c88:	109a4c04 	addi	r2,r2,26928
   10c8c:	21000164 	muli	r4,r4,5
   10c90:	20c7883a 	add	r3,r4,r3
   10c94:	18c7883a 	add	r3,r3,r3
   10c98:	18c7883a 	add	r3,r3,r3
   10c9c:	10c5883a 	add	r2,r2,r3
   10ca0:	10800017 	ldw	r2,0(r2)
   10ca4:	2809883a 	mov	r4,r5
   10ca8:	01405044 	movi	r5,321
   10cac:	100d883a 	mov	r6,r2
   10cb0:	00002600 	call	260 <ad9361_spi_write>
				gain_step_calib_reg_val[lo_index][i+1]);
		ad9361_spi_write(phy->spi, REG_CONFIG,
   10cb4:	e0bffe17 	ldw	r2,-8(fp)
   10cb8:	10800117 	ldw	r2,4(r2)
   10cbc:	1009883a 	mov	r4,r2
   10cc0:	014050c4 	movi	r5,323
   10cc4:	018018c4 	movi	r6,99
   10cc8:	00002600 	call	260 <ad9361_spi_write>
				CALIB_TABLE_SELECT(0x3) | WRITE_LNA_GAIN_DIFF | START_CALIB_TABLE_CLOCK);
		udelay(3);	//Wait for data to fully write to internal table
   10ccc:	010000c4 	movi	r4,3
   10cd0:	001b8a40 	call	1b8a4 <udelay>
			gain_step_calib_reg_val[lo_index][0]);

	/* Program the LNA gain step words into the internal table. */
	ad9361_spi_write(phy->spi, REG_CONFIG,
			CALIB_TABLE_SELECT(0x3) | START_CALIB_TABLE_CLOCK);
	for(i = 0; i < 4; i++) {
   10cd4:	e0bfe843 	ldbu	r2,-95(fp)
   10cd8:	10800044 	addi	r2,r2,1
   10cdc:	e0bfe845 	stb	r2,-95(fp)
   10ce0:	e0bfe843 	ldbu	r2,-95(fp)
   10ce4:	10800130 	cmpltui	r2,r2,4
   10ce8:	103fda1e 	bne	r2,zero,10c54 <_gp+0xfffdeb34>
		ad9361_spi_write(phy->spi, REG_CONFIG,
				CALIB_TABLE_SELECT(0x3) | WRITE_LNA_GAIN_DIFF | START_CALIB_TABLE_CLOCK);
		udelay(3);	//Wait for data to fully write to internal table
	}

	ad9361_spi_write(phy->spi, REG_CONFIG, START_CALIB_TABLE_CLOCK);
   10cec:	e0bffe17 	ldw	r2,-8(fp)
   10cf0:	10800117 	ldw	r2,4(r2)
   10cf4:	1009883a 	mov	r4,r2
   10cf8:	014050c4 	movi	r5,323
   10cfc:	01800044 	movi	r6,1
   10d00:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(phy->spi, REG_CONFIG, 0x00);
   10d04:	e0bffe17 	ldw	r2,-8(fp)
   10d08:	10800117 	ldw	r2,4(r2)
   10d0c:	1009883a 	mov	r4,r2
   10d10:	014050c4 	movi	r5,323
   10d14:	000d883a 	mov	r6,zero
   10d18:	00002600 	call	260 <ad9361_spi_write>

	/* Run and wait until the calibration completes. */
	ad9361_run_calibration(phy, RX_GAIN_STEP_CAL);
   10d1c:	e13ffe17 	ldw	r4,-8(fp)
   10d20:	01400204 	movi	r5,8
   10d24:	0000f900 	call	f90 <ad9361_run_calibration>

	/* Read the LNA and Mixer error terms into nonvolatile memory. */
	ad9361_spi_write(phy->spi, REG_CONFIG, CALIB_TABLE_SELECT(0x1) | READ_SELECT);
   10d28:	e0bffe17 	ldw	r2,-8(fp)
   10d2c:	10800117 	ldw	r2,4(r2)
   10d30:	1009883a 	mov	r4,r2
   10d34:	014050c4 	movi	r5,323
   10d38:	01800c04 	movi	r6,48
   10d3c:	00002600 	call	260 <ad9361_spi_write>
	for(i = 0; i < 4; i++) {
   10d40:	e03fe845 	stb	zero,-95(fp)
   10d44:	00001706 	br	10da4 <ad9361_rssi_gain_step_calib+0x2ec>
		ad9361_spi_write(phy->spi, REG_WORD_ADDRESS, i);
   10d48:	e0bffe17 	ldw	r2,-8(fp)
   10d4c:	10c00117 	ldw	r3,4(r2)
   10d50:	e0bfe843 	ldbu	r2,-95(fp)
   10d54:	1809883a 	mov	r4,r3
   10d58:	01405004 	movi	r5,320
   10d5c:	100d883a 	mov	r6,r2
   10d60:	00002600 	call	260 <ad9361_spi_write>
		lna_error[i] = ad9361_spi_read(phy->spi, REG_GAIN_ERROR_READ);
   10d64:	e43fe843 	ldbu	r16,-95(fp)
   10d68:	e0bffe17 	ldw	r2,-8(fp)
   10d6c:	10800117 	ldw	r2,4(r2)
   10d70:	1009883a 	mov	r4,r2
   10d74:	01405084 	movi	r5,322
   10d78:	00001500 	call	150 <ad9361_spi_read>
   10d7c:	1007883a 	mov	r3,r2
   10d80:	8405883a 	add	r2,r16,r16
   10d84:	1085883a 	add	r2,r2,r2
   10d88:	e13fe804 	addi	r4,fp,-96
   10d8c:	2085883a 	add	r2,r4,r2
   10d90:	10800304 	addi	r2,r2,12
   10d94:	10c00015 	stw	r3,0(r2)
	/* Run and wait until the calibration completes. */
	ad9361_run_calibration(phy, RX_GAIN_STEP_CAL);

	/* Read the LNA and Mixer error terms into nonvolatile memory. */
	ad9361_spi_write(phy->spi, REG_CONFIG, CALIB_TABLE_SELECT(0x1) | READ_SELECT);
	for(i = 0; i < 4; i++) {
   10d98:	e0bfe843 	ldbu	r2,-95(fp)
   10d9c:	10800044 	addi	r2,r2,1
   10da0:	e0bfe845 	stb	r2,-95(fp)
   10da4:	e0bfe843 	ldbu	r2,-95(fp)
   10da8:	10800130 	cmpltui	r2,r2,4
   10dac:	103fe61e 	bne	r2,zero,10d48 <_gp+0xfffdec28>
		ad9361_spi_write(phy->spi, REG_WORD_ADDRESS, i);
		lna_error[i] = ad9361_spi_read(phy->spi, REG_GAIN_ERROR_READ);
	}
	ad9361_spi_write(phy->spi, REG_CONFIG, CALIB_TABLE_SELECT(0x1));
   10db0:	e0bffe17 	ldw	r2,-8(fp)
   10db4:	10800117 	ldw	r2,4(r2)
   10db8:	1009883a 	mov	r4,r2
   10dbc:	014050c4 	movi	r5,323
   10dc0:	01800804 	movi	r6,32
   10dc4:	00002600 	call	260 <ad9361_spi_write>
	for(i = 0; i < 15; i++) {
   10dc8:	e03fe845 	stb	zero,-95(fp)
   10dcc:	00001706 	br	10e2c <ad9361_rssi_gain_step_calib+0x374>
		ad9361_spi_write(phy->spi, REG_WORD_ADDRESS, i);
   10dd0:	e0bffe17 	ldw	r2,-8(fp)
   10dd4:	10c00117 	ldw	r3,4(r2)
   10dd8:	e0bfe843 	ldbu	r2,-95(fp)
   10ddc:	1809883a 	mov	r4,r3
   10de0:	01405004 	movi	r5,320
   10de4:	100d883a 	mov	r6,r2
   10de8:	00002600 	call	260 <ad9361_spi_write>
		mixer_error[i] = ad9361_spi_read(phy->spi, REG_GAIN_ERROR_READ);
   10dec:	e43fe843 	ldbu	r16,-95(fp)
   10df0:	e0bffe17 	ldw	r2,-8(fp)
   10df4:	10800117 	ldw	r2,4(r2)
   10df8:	1009883a 	mov	r4,r2
   10dfc:	01405084 	movi	r5,322
   10e00:	00001500 	call	150 <ad9361_spi_read>
   10e04:	1007883a 	mov	r3,r2
   10e08:	8405883a 	add	r2,r16,r16
   10e0c:	1085883a 	add	r2,r2,r2
   10e10:	e13fe804 	addi	r4,fp,-96
   10e14:	2085883a 	add	r2,r4,r2
   10e18:	10800704 	addi	r2,r2,28
   10e1c:	10c00015 	stw	r3,0(r2)
	for(i = 0; i < 4; i++) {
		ad9361_spi_write(phy->spi, REG_WORD_ADDRESS, i);
		lna_error[i] = ad9361_spi_read(phy->spi, REG_GAIN_ERROR_READ);
	}
	ad9361_spi_write(phy->spi, REG_CONFIG, CALIB_TABLE_SELECT(0x1));
	for(i = 0; i < 15; i++) {
   10e20:	e0bfe843 	ldbu	r2,-95(fp)
   10e24:	10800044 	addi	r2,r2,1
   10e28:	e0bfe845 	stb	r2,-95(fp)
   10e2c:	e0bfe843 	ldbu	r2,-95(fp)
   10e30:	108003f0 	cmpltui	r2,r2,15
   10e34:	103fe61e 	bne	r2,zero,10dd0 <_gp+0xfffdecb0>
		ad9361_spi_write(phy->spi, REG_WORD_ADDRESS, i);
		mixer_error[i] = ad9361_spi_read(phy->spi, REG_GAIN_ERROR_READ);
	}
	ad9361_spi_write(phy->spi, REG_CONFIG, 0x00);
   10e38:	e0bffe17 	ldw	r2,-8(fp)
   10e3c:	10800117 	ldw	r2,4(r2)
   10e40:	1009883a 	mov	r4,r2
   10e44:	014050c4 	movi	r5,323
   10e48:	000d883a 	mov	r6,zero
   10e4c:	00002600 	call	260 <ad9361_spi_write>

	/* Programming gain step errors into the AD9361 in the field */
	ad9361_spi_write(phy->spi,
   10e50:	e0bffe17 	ldw	r2,-8(fp)
   10e54:	10800117 	ldw	r2,4(r2)
   10e58:	1009883a 	mov	r4,r2
   10e5c:	014050c4 	movi	r5,323
   10e60:	01801844 	movi	r6,97
   10e64:	00002600 	call	260 <ad9361_spi_write>
			REG_CONFIG, CALIB_TABLE_SELECT(0x3) | START_CALIB_TABLE_CLOCK);
	for(i = 0; i < 4; i++) {
   10e68:	e03fe845 	stb	zero,-95(fp)
   10e6c:	00001d06 	br	10ee4 <ad9361_rssi_gain_step_calib+0x42c>
		ad9361_spi_write(phy->spi, REG_WORD_ADDRESS, i);
   10e70:	e0bffe17 	ldw	r2,-8(fp)
   10e74:	10c00117 	ldw	r3,4(r2)
   10e78:	e0bfe843 	ldbu	r2,-95(fp)
   10e7c:	1809883a 	mov	r4,r3
   10e80:	01405004 	movi	r5,320
   10e84:	100d883a 	mov	r6,r2
   10e88:	00002600 	call	260 <ad9361_spi_write>
		ad9361_spi_write(phy->spi, REG_GAIN_DIFF_WORDERROR_WRITE, lna_error[i]);
   10e8c:	e0bffe17 	ldw	r2,-8(fp)
   10e90:	10c00117 	ldw	r3,4(r2)
   10e94:	e0bfe843 	ldbu	r2,-95(fp)
   10e98:	1085883a 	add	r2,r2,r2
   10e9c:	1085883a 	add	r2,r2,r2
   10ea0:	e13fe804 	addi	r4,fp,-96
   10ea4:	2085883a 	add	r2,r4,r2
   10ea8:	10800304 	addi	r2,r2,12
   10eac:	10800017 	ldw	r2,0(r2)
   10eb0:	1809883a 	mov	r4,r3
   10eb4:	01405044 	movi	r5,321
   10eb8:	100d883a 	mov	r6,r2
   10ebc:	00002600 	call	260 <ad9361_spi_write>
		ad9361_spi_write(phy->spi, REG_CONFIG,
   10ec0:	e0bffe17 	ldw	r2,-8(fp)
   10ec4:	10800117 	ldw	r2,4(r2)
   10ec8:	1009883a 	mov	r4,r2
   10ecc:	014050c4 	movi	r5,323
   10ed0:	01801944 	movi	r6,101
   10ed4:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(phy->spi, REG_CONFIG, 0x00);

	/* Programming gain step errors into the AD9361 in the field */
	ad9361_spi_write(phy->spi,
			REG_CONFIG, CALIB_TABLE_SELECT(0x3) | START_CALIB_TABLE_CLOCK);
	for(i = 0; i < 4; i++) {
   10ed8:	e0bfe843 	ldbu	r2,-95(fp)
   10edc:	10800044 	addi	r2,r2,1
   10ee0:	e0bfe845 	stb	r2,-95(fp)
   10ee4:	e0bfe843 	ldbu	r2,-95(fp)
   10ee8:	10800130 	cmpltui	r2,r2,4
   10eec:	103fe01e 	bne	r2,zero,10e70 <_gp+0xfffded50>
		ad9361_spi_write(phy->spi, REG_WORD_ADDRESS, i);
		ad9361_spi_write(phy->spi, REG_GAIN_DIFF_WORDERROR_WRITE, lna_error[i]);
		ad9361_spi_write(phy->spi, REG_CONFIG,
				CALIB_TABLE_SELECT(0x3) | WRITE_LNA_ERROR_TABLE | START_CALIB_TABLE_CLOCK);
	}
	ad9361_spi_write(phy->spi, REG_CONFIG,
   10ef0:	e0bffe17 	ldw	r2,-8(fp)
   10ef4:	10800117 	ldw	r2,4(r2)
   10ef8:	1009883a 	mov	r4,r2
   10efc:	014050c4 	movi	r5,323
   10f00:	01801844 	movi	r6,97
   10f04:	00002600 	call	260 <ad9361_spi_write>
			CALIB_TABLE_SELECT(0x3) | START_CALIB_TABLE_CLOCK);
	for(i = 0; i < 15; i++) {
   10f08:	e03fe845 	stb	zero,-95(fp)
   10f0c:	00001d06 	br	10f84 <ad9361_rssi_gain_step_calib+0x4cc>
		ad9361_spi_write(phy->spi, REG_WORD_ADDRESS, i);
   10f10:	e0bffe17 	ldw	r2,-8(fp)
   10f14:	10c00117 	ldw	r3,4(r2)
   10f18:	e0bfe843 	ldbu	r2,-95(fp)
   10f1c:	1809883a 	mov	r4,r3
   10f20:	01405004 	movi	r5,320
   10f24:	100d883a 	mov	r6,r2
   10f28:	00002600 	call	260 <ad9361_spi_write>
		ad9361_spi_write(phy->spi, REG_GAIN_DIFF_WORDERROR_WRITE, mixer_error[i]);
   10f2c:	e0bffe17 	ldw	r2,-8(fp)
   10f30:	10c00117 	ldw	r3,4(r2)
   10f34:	e0bfe843 	ldbu	r2,-95(fp)
   10f38:	1085883a 	add	r2,r2,r2
   10f3c:	1085883a 	add	r2,r2,r2
   10f40:	e13fe804 	addi	r4,fp,-96
   10f44:	2085883a 	add	r2,r4,r2
   10f48:	10800704 	addi	r2,r2,28
   10f4c:	10800017 	ldw	r2,0(r2)
   10f50:	1809883a 	mov	r4,r3
   10f54:	01405044 	movi	r5,321
   10f58:	100d883a 	mov	r6,r2
   10f5c:	00002600 	call	260 <ad9361_spi_write>
		ad9361_spi_write(phy->spi, REG_CONFIG,
   10f60:	e0bffe17 	ldw	r2,-8(fp)
   10f64:	10800117 	ldw	r2,4(r2)
   10f68:	1009883a 	mov	r4,r2
   10f6c:	014050c4 	movi	r5,323
   10f70:	01801a44 	movi	r6,105
   10f74:	00002600 	call	260 <ad9361_spi_write>
		ad9361_spi_write(phy->spi, REG_CONFIG,
				CALIB_TABLE_SELECT(0x3) | WRITE_LNA_ERROR_TABLE | START_CALIB_TABLE_CLOCK);
	}
	ad9361_spi_write(phy->spi, REG_CONFIG,
			CALIB_TABLE_SELECT(0x3) | START_CALIB_TABLE_CLOCK);
	for(i = 0; i < 15; i++) {
   10f78:	e0bfe843 	ldbu	r2,-95(fp)
   10f7c:	10800044 	addi	r2,r2,1
   10f80:	e0bfe845 	stb	r2,-95(fp)
   10f84:	e0bfe843 	ldbu	r2,-95(fp)
   10f88:	108003f0 	cmpltui	r2,r2,15
   10f8c:	103fe01e 	bne	r2,zero,10f10 <_gp+0xfffdedf0>
		ad9361_spi_write(phy->spi, REG_WORD_ADDRESS, i);
		ad9361_spi_write(phy->spi, REG_GAIN_DIFF_WORDERROR_WRITE, mixer_error[i]);
		ad9361_spi_write(phy->spi, REG_CONFIG,
				CALIB_TABLE_SELECT(0x3) | WRITE_MIXER_ERROR_TABLE | START_CALIB_TABLE_CLOCK);
	}
	ad9361_spi_write(phy->spi, REG_CONFIG, 0x00);
   10f90:	e0bffe17 	ldw	r2,-8(fp)
   10f94:	10800117 	ldw	r2,4(r2)
   10f98:	1009883a 	mov	r4,r2
   10f9c:	014050c4 	movi	r5,323
   10fa0:	000d883a 	mov	r6,zero
   10fa4:	00002600 	call	260 <ad9361_spi_write>

	ad9361_ensm_restore_prev_state(phy);
   10fa8:	e13ffe17 	ldw	r4,-8(fp)
   10fac:	00026740 	call	2674 <ad9361_ensm_restore_prev_state>

	return 0;
   10fb0:	0005883a 	mov	r2,zero
}
   10fb4:	e6ffff04 	addi	sp,fp,-4
   10fb8:	dfc00217 	ldw	ra,8(sp)
   10fbc:	df000117 	ldw	fp,4(sp)
   10fc0:	dc000017 	ldw	r16,0(sp)
   10fc4:	dec00304 	addi	sp,sp,12
   10fc8:	f800283a 	ret

00010fcc <ad9361_init>:
 *         success, negative error code otherwise.
 *
 * Note: This function will/may affect the data path.
 */
int32_t ad9361_init (struct ad9361_rf_phy **ad9361_phy, AD9361_InitParam *init_param)
{
   10fcc:	defff704 	addi	sp,sp,-36
   10fd0:	de00012e 	bgeu	sp,et,10fd8 <ad9361_init+0xc>
   10fd4:	003b68fa 	trap	3
   10fd8:	dfc00815 	stw	ra,32(sp)
   10fdc:	df000715 	stw	fp,28(sp)
   10fe0:	dc000615 	stw	r16,24(sp)
   10fe4:	df000704 	addi	fp,sp,28
   10fe8:	e13ffd15 	stw	r4,-12(fp)
   10fec:	e17ffe15 	stw	r5,-8(fp)
	struct ad9361_rf_phy *phy;
	int32_t ret = 0;
   10ff0:	e03ffa15 	stw	zero,-24(fp)
	int32_t rev = 0;
   10ff4:	e03ffb15 	stw	zero,-20(fp)
	int32_t i   = 0;
   10ff8:	e03ff915 	stw	zero,-28(fp)

	phy = (struct ad9361_rf_phy *)zmalloc(sizeof(*phy));
   10ffc:	01007704 	movi	r4,476
   11000:	001c9340 	call	1c934 <zmalloc>
   11004:	e0bffc15 	stw	r2,-16(fp)
	if (!phy) {
   11008:	e0bffc17 	ldw	r2,-16(fp)
   1100c:	1000021e 	bne	r2,zero,11018 <ad9361_init+0x4c>
		return -ENOMEM;
   11010:	00bffd04 	movi	r2,-12
   11014:	0005f506 	br	127ec <ad9361_init+0x1820>
	}

	phy->spi = (struct spi_device *)zmalloc(sizeof(*phy->spi));
   11018:	01000044 	movi	r4,1
   1101c:	001c9340 	call	1c934 <zmalloc>
   11020:	1007883a 	mov	r3,r2
   11024:	e0bffc17 	ldw	r2,-16(fp)
   11028:	10c00115 	stw	r3,4(r2)
	if (!phy->spi) {
   1102c:	e0bffc17 	ldw	r2,-16(fp)
   11030:	10800117 	ldw	r2,4(r2)
   11034:	1000021e 	bne	r2,zero,11040 <ad9361_init+0x74>
		return -ENOMEM;
   11038:	00bffd04 	movi	r2,-12
   1103c:	0005eb06 	br	127ec <ad9361_init+0x1820>
	}

	phy->clk_refin = (struct clk *)zmalloc(sizeof(*phy->clk_refin));
   11040:	01000204 	movi	r4,8
   11044:	001c9340 	call	1c934 <zmalloc>
   11048:	1007883a 	mov	r3,r2
   1104c:	e0bffc17 	ldw	r2,-16(fp)
   11050:	10c00215 	stw	r3,8(r2)
	if (!phy->clk_refin) {
   11054:	e0bffc17 	ldw	r2,-16(fp)
   11058:	10800217 	ldw	r2,8(r2)
   1105c:	1000021e 	bne	r2,zero,11068 <ad9361_init+0x9c>
		return -ENOMEM;
   11060:	00bffd04 	movi	r2,-12
   11064:	0005e106 	br	127ec <ad9361_init+0x1820>
	}

	phy->pdata = (struct ad9361_phy_platform_data *)zmalloc(sizeof(*phy->pdata));
   11068:	01006104 	movi	r4,388
   1106c:	001c9340 	call	1c934 <zmalloc>
   11070:	1007883a 	mov	r3,r2
   11074:	e0bffc17 	ldw	r2,-16(fp)
   11078:	10c03015 	stw	r3,192(r2)
	if (!phy->pdata) {
   1107c:	e0bffc17 	ldw	r2,-16(fp)
   11080:	10803017 	ldw	r2,192(r2)
   11084:	1000021e 	bne	r2,zero,11090 <ad9361_init+0xc4>
		return -ENOMEM;
   11088:	00bffd04 	movi	r2,-12
   1108c:	0005d706 	br	127ec <ad9361_init+0x1820>
	}
#ifndef AXI_ADC_NOT_PRESENT
	phy->adc_conv = (struct axiadc_converter *)zmalloc(sizeof(*phy->adc_conv));
   11090:	01001104 	movi	r4,68
   11094:	001c9340 	call	1c934 <zmalloc>
   11098:	1007883a 	mov	r3,r2
   1109c:	e0bffc17 	ldw	r2,-16(fp)
   110a0:	10c06f15 	stw	r3,444(r2)
	if (!phy->adc_conv) {
   110a4:	e0bffc17 	ldw	r2,-16(fp)
   110a8:	10806f17 	ldw	r2,444(r2)
   110ac:	1000021e 	bne	r2,zero,110b8 <ad9361_init+0xec>
		return -ENOMEM;
   110b0:	00bffd04 	movi	r2,-12
   110b4:	0005cd06 	br	127ec <ad9361_init+0x1820>
	}

	phy->adc_state = (struct axiadc_state *)zmalloc(sizeof(*phy->adc_state));
   110b8:	01000204 	movi	r4,8
   110bc:	001c9340 	call	1c934 <zmalloc>
   110c0:	1007883a 	mov	r3,r2
   110c4:	e0bffc17 	ldw	r2,-16(fp)
   110c8:	10c07015 	stw	r3,448(r2)
	if (!phy->adc_state) {
   110cc:	e0bffc17 	ldw	r2,-16(fp)
   110d0:	10807017 	ldw	r2,448(r2)
   110d4:	1000021e 	bne	r2,zero,110e0 <ad9361_init+0x114>
		return -ENOMEM;
   110d8:	00bffd04 	movi	r2,-12
   110dc:	0005c306 	br	127ec <ad9361_init+0x1820>
	}
	phy->adc_state->phy = phy;
   110e0:	e0bffc17 	ldw	r2,-16(fp)
   110e4:	10807017 	ldw	r2,448(r2)
   110e8:	e0fffc17 	ldw	r3,-16(fp)
   110ec:	10c00015 	stw	r3,0(r2)
#endif

	phy->spi->id_no = init_param->id_no;
   110f0:	e0bffc17 	ldw	r2,-16(fp)
   110f4:	10800117 	ldw	r2,4(r2)
   110f8:	e0fffe17 	ldw	r3,-8(fp)
   110fc:	18c00003 	ldbu	r3,0(r3)
   11100:	10c00005 	stb	r3,0(r2)

	/* Identification number */
	phy->id_no = init_param->id_no;
   11104:	e0bffe17 	ldw	r2,-8(fp)
   11108:	10c00003 	ldbu	r3,0(r2)
   1110c:	e0bffc17 	ldw	r2,-16(fp)
   11110:	10c00005 	stb	r3,0(r2)

	/* Reference Clock */
	phy->clk_refin->rate = init_param->reference_clk_rate;
   11114:	e0bffc17 	ldw	r2,-16(fp)
   11118:	10800217 	ldw	r2,8(r2)
   1111c:	e0fffe17 	ldw	r3,-8(fp)
   11120:	18c00117 	ldw	r3,4(r3)
   11124:	10c00115 	stw	r3,4(r2)

	/* Base Configuration */
	phy->pdata->fdd = init_param->frequency_division_duplex_mode_enable;
   11128:	e0bffc17 	ldw	r2,-16(fp)
   1112c:	10803017 	ldw	r2,192(r2)
   11130:	e0fffe17 	ldw	r3,-8(fp)
   11134:	18c002c3 	ldbu	r3,11(r3)
   11138:	18c03fcc 	andi	r3,r3,255
   1113c:	1806c03a 	cmpne	r3,r3,zero
   11140:	10c00045 	stb	r3,1(r2)
	phy->pdata->fdd_independent_mode = init_param->frequency_division_duplex_independent_mode_enable;
   11144:	e0bffc17 	ldw	r2,-16(fp)
   11148:	10803017 	ldw	r2,192(r2)
   1114c:	e0fffe17 	ldw	r3,-8(fp)
   11150:	18c00303 	ldbu	r3,12(r3)
   11154:	18c03fcc 	andi	r3,r3,255
   11158:	1806c03a 	cmpne	r3,r3,zero
   1115c:	10c00085 	stb	r3,2(r2)
	phy->pdata->rx2tx2 = init_param->two_rx_two_tx_mode_enable;
   11160:	e0bffc17 	ldw	r2,-16(fp)
   11164:	10803017 	ldw	r2,192(r2)
   11168:	e0fffe17 	ldw	r3,-8(fp)
   1116c:	18c00203 	ldbu	r3,8(r3)
   11170:	18c03fcc 	andi	r3,r3,255
   11174:	1806c03a 	cmpne	r3,r3,zero
   11178:	10c00005 	stb	r3,0(r2)
	phy->pdata->rx1tx1_mode_use_rx_num = init_param->one_rx_one_tx_mode_use_rx_num;
   1117c:	e0bffc17 	ldw	r2,-16(fp)
   11180:	10803017 	ldw	r2,192(r2)
   11184:	e0fffe17 	ldw	r3,-8(fp)
   11188:	18c00243 	ldbu	r3,9(r3)
   1118c:	18c03fcc 	andi	r3,r3,255
   11190:	10c00a15 	stw	r3,40(r2)
	phy->pdata->rx1tx1_mode_use_tx_num = init_param->one_rx_one_tx_mode_use_tx_num;
   11194:	e0bffc17 	ldw	r2,-16(fp)
   11198:	10803017 	ldw	r2,192(r2)
   1119c:	e0fffe17 	ldw	r3,-8(fp)
   111a0:	18c00283 	ldbu	r3,10(r3)
   111a4:	18c03fcc 	andi	r3,r3,255
   111a8:	10c00b15 	stw	r3,44(r2)
	phy->pdata->tdd_use_dual_synth = init_param->tdd_use_dual_synth_mode_enable;
   111ac:	e0bffc17 	ldw	r2,-16(fp)
   111b0:	10803017 	ldw	r2,192(r2)
   111b4:	e0fffe17 	ldw	r3,-8(fp)
   111b8:	18c00343 	ldbu	r3,13(r3)
   111bc:	18c03fcc 	andi	r3,r3,255
   111c0:	1806c03a 	cmpne	r3,r3,zero
   111c4:	10c00245 	stb	r3,9(r2)
	phy->pdata->tdd_skip_vco_cal = init_param->tdd_skip_vco_cal_enable;
   111c8:	e0bffc17 	ldw	r2,-16(fp)
   111cc:	10803017 	ldw	r2,192(r2)
   111d0:	e0fffe17 	ldw	r3,-8(fp)
   111d4:	18c00383 	ldbu	r3,14(r3)
   111d8:	18c03fcc 	andi	r3,r3,255
   111dc:	1806c03a 	cmpne	r3,r3,zero
   111e0:	10c00285 	stb	r3,10(r2)
	phy->pdata->rx_fastlock_delay_ns = init_param->rx_fastlock_delay_ns;
   111e4:	e0bffc17 	ldw	r2,-16(fp)
   111e8:	10803017 	ldw	r2,192(r2)
   111ec:	e0fffe17 	ldw	r3,-8(fp)
   111f0:	18c00517 	ldw	r3,20(r3)
   111f4:	10c02115 	stw	r3,132(r2)
	phy->pdata->tx_fastlock_delay_ns = init_param->tx_fastlock_delay_ns;
   111f8:	e0bffc17 	ldw	r2,-16(fp)
   111fc:	10803017 	ldw	r2,192(r2)
   11200:	e0fffe17 	ldw	r3,-8(fp)
   11204:	18c00417 	ldw	r3,16(r3)
   11208:	10c02215 	stw	r3,136(r2)
	phy->pdata->trx_fastlock_pinctrl_en[0] = init_param->rx_fastlock_pincontrol_enable;
   1120c:	e0bffc17 	ldw	r2,-16(fp)
   11210:	10803017 	ldw	r2,192(r2)
   11214:	e0fffe17 	ldw	r3,-8(fp)
   11218:	18c00603 	ldbu	r3,24(r3)
   1121c:	18c03fcc 	andi	r3,r3,255
   11220:	1806c03a 	cmpne	r3,r3,zero
   11224:	10c02305 	stb	r3,140(r2)
	phy->pdata->trx_fastlock_pinctrl_en[1] = init_param->tx_fastlock_pincontrol_enable;
   11228:	e0bffc17 	ldw	r2,-16(fp)
   1122c:	10803017 	ldw	r2,192(r2)
   11230:	e0fffe17 	ldw	r3,-8(fp)
   11234:	18c00643 	ldbu	r3,25(r3)
   11238:	18c03fcc 	andi	r3,r3,255
   1123c:	1806c03a 	cmpne	r3,r3,zero
   11240:	10c02345 	stb	r3,141(r2)
	phy->pdata->use_ext_rx_lo = init_param->external_rx_lo_enable;
   11244:	e0bffc17 	ldw	r2,-16(fp)
   11248:	10803017 	ldw	r2,192(r2)
   1124c:	e0fffe17 	ldw	r3,-8(fp)
   11250:	18c00683 	ldbu	r3,26(r3)
   11254:	18c03fcc 	andi	r3,r3,255
   11258:	1806c03a 	cmpne	r3,r3,zero
   1125c:	10c002c5 	stb	r3,11(r2)
	phy->pdata->use_ext_tx_lo = init_param->external_tx_lo_enable;
   11260:	e0bffc17 	ldw	r2,-16(fp)
   11264:	10803017 	ldw	r2,192(r2)
   11268:	e0fffe17 	ldw	r3,-8(fp)
   1126c:	18c006c3 	ldbu	r3,27(r3)
   11270:	18c03fcc 	andi	r3,r3,255
   11274:	1806c03a 	cmpne	r3,r3,zero
   11278:	10c00305 	stb	r3,12(r2)
	phy->pdata->dc_offset_update_events = init_param->dc_offset_tracking_update_event_mask;
   1127c:	e0bffc17 	ldw	r2,-16(fp)
   11280:	10803017 	ldw	r2,192(r2)
   11284:	e0fffe17 	ldw	r3,-8(fp)
   11288:	18c00703 	ldbu	r3,28(r3)
   1128c:	10c003c5 	stb	r3,15(r2)
	phy->pdata->dc_offset_attenuation_high = init_param->dc_offset_attenuation_high_range;
   11290:	e0bffc17 	ldw	r2,-16(fp)
   11294:	10803017 	ldw	r2,192(r2)
   11298:	e0fffe17 	ldw	r3,-8(fp)
   1129c:	18c00743 	ldbu	r3,29(r3)
   112a0:	10c00405 	stb	r3,16(r2)
	phy->pdata->dc_offset_attenuation_low = init_param->dc_offset_attenuation_low_range;
   112a4:	e0bffc17 	ldw	r2,-16(fp)
   112a8:	10803017 	ldw	r2,192(r2)
   112ac:	e0fffe17 	ldw	r3,-8(fp)
   112b0:	18c00783 	ldbu	r3,30(r3)
   112b4:	10c00445 	stb	r3,17(r2)
	phy->pdata->rf_dc_offset_count_high = init_param->dc_offset_count_high_range;
   112b8:	e0bffc17 	ldw	r2,-16(fp)
   112bc:	10803017 	ldw	r2,192(r2)
   112c0:	e0fffe17 	ldw	r3,-8(fp)
   112c4:	18c007c3 	ldbu	r3,31(r3)
   112c8:	10c00485 	stb	r3,18(r2)
	phy->pdata->rf_dc_offset_count_low = init_param->dc_offset_count_low_range;
   112cc:	e0bffc17 	ldw	r2,-16(fp)
   112d0:	10803017 	ldw	r2,192(r2)
   112d4:	e0fffe17 	ldw	r3,-8(fp)
   112d8:	18c00803 	ldbu	r3,32(r3)
   112dc:	10c004c5 	stb	r3,19(r2)
	phy->pdata->tdd_use_fdd_tables = init_param->tdd_use_fdd_vco_tables_enable;
   112e0:	e0bffc17 	ldw	r2,-16(fp)
   112e4:	10803017 	ldw	r2,192(r2)
   112e8:	e0fffe17 	ldw	r3,-8(fp)
   112ec:	18c00843 	ldbu	r3,33(r3)
   112f0:	18c03fcc 	andi	r3,r3,255
   112f4:	1806c03a 	cmpne	r3,r3,zero
   112f8:	10c00205 	stb	r3,8(r2)
	phy->pdata->split_gt = init_param->split_gain_table_mode_enable;
   112fc:	e0bffc17 	ldw	r2,-16(fp)
   11300:	10803017 	ldw	r2,192(r2)
   11304:	e0fffe17 	ldw	r3,-8(fp)
   11308:	18c00883 	ldbu	r3,34(r3)
   1130c:	18c03fcc 	andi	r3,r3,255
   11310:	1806c03a 	cmpne	r3,r3,zero
   11314:	10c000c5 	stb	r3,3(r2)
	phy->pdata->trx_synth_max_fref = init_param->trx_synthesizer_target_fref_overwrite_hz;
   11318:	e0bffc17 	ldw	r2,-16(fp)
   1131c:	10803017 	ldw	r2,192(r2)
   11320:	e0fffe17 	ldw	r3,-8(fp)
   11324:	18c00917 	ldw	r3,36(r3)
   11328:	10c01815 	stw	r3,96(r2)
	phy->pdata->qec_tracking_slow_mode_en = init_param->qec_tracking_slow_mode_enable;
   1132c:	e0bffc17 	ldw	r2,-16(fp)
   11330:	10803017 	ldw	r2,192(r2)
   11334:	e0fffe17 	ldw	r3,-8(fp)
   11338:	18c00a03 	ldbu	r3,40(r3)
   1133c:	18c03fcc 	andi	r3,r3,255
   11340:	1806c03a 	cmpne	r3,r3,zero
   11344:	10c00385 	stb	r3,14(r2)

	/* ENSM Control */
	phy->pdata->ensm_pin_pulse_mode = init_param->ensm_enable_pin_pulse_mode_enable;
   11348:	e0bffc17 	ldw	r2,-16(fp)
   1134c:	10803017 	ldw	r2,192(r2)
   11350:	e0fffe17 	ldw	r3,-8(fp)
   11354:	18c00a43 	ldbu	r3,41(r3)
   11358:	18c03fcc 	andi	r3,r3,255
   1135c:	1806c03a 	cmpne	r3,r3,zero
   11360:	10c00145 	stb	r3,5(r2)
	phy->pdata->ensm_pin_ctrl = init_param->ensm_enable_txnrx_control_enable;
   11364:	e0bffc17 	ldw	r2,-16(fp)
   11368:	10803017 	ldw	r2,192(r2)
   1136c:	e0fffe17 	ldw	r3,-8(fp)
   11370:	18c00a83 	ldbu	r3,42(r3)
   11374:	18c03fcc 	andi	r3,r3,255
   11378:	1806c03a 	cmpne	r3,r3,zero
   1137c:	10c00185 	stb	r3,6(r2)

	/* LO Control */
	phy->pdata->rx_synth_freq = init_param->rx_synthesizer_frequency_hz;
   11380:	e0bffc17 	ldw	r2,-16(fp)
   11384:	11003017 	ldw	r4,192(r2)
   11388:	e17ffe17 	ldw	r5,-8(fp)
   1138c:	28800b17 	ldw	r2,44(r5)
   11390:	28c00c17 	ldw	r3,48(r5)
   11394:	20801915 	stw	r2,100(r4)
   11398:	20c01a15 	stw	r3,104(r4)
	phy->pdata->tx_synth_freq = init_param->tx_synthesizer_frequency_hz;
   1139c:	e0bffc17 	ldw	r2,-16(fp)
   113a0:	11003017 	ldw	r4,192(r2)
   113a4:	e17ffe17 	ldw	r5,-8(fp)
   113a8:	28800d17 	ldw	r2,52(r5)
   113ac:	28c00e17 	ldw	r3,56(r5)
   113b0:	20801b15 	stw	r2,108(r4)
   113b4:	20c01c15 	stw	r3,112(r4)

	/* Rate & BW Control */
	for(i = 0; i < 6; i++) {
   113b8:	e03ff915 	stw	zero,-28(fp)
   113bc:	00001206 	br	11408 <ad9361_init+0x43c>
		phy->pdata->rx_path_clks[i] = init_param->rx_path_clock_frequencies[i];
   113c0:	e0bffc17 	ldw	r2,-16(fp)
   113c4:	11003017 	ldw	r4,192(r2)
   113c8:	e0fffe17 	ldw	r3,-8(fp)
   113cc:	e0bff917 	ldw	r2,-28(fp)
   113d0:	108003c4 	addi	r2,r2,15
   113d4:	1085883a 	add	r2,r2,r2
   113d8:	1085883a 	add	r2,r2,r2
   113dc:	1885883a 	add	r2,r3,r2
   113e0:	10c00017 	ldw	r3,0(r2)
   113e4:	e0bff917 	ldw	r2,-28(fp)
   113e8:	10800304 	addi	r2,r2,12
   113ec:	1085883a 	add	r2,r2,r2
   113f0:	1085883a 	add	r2,r2,r2
   113f4:	2085883a 	add	r2,r4,r2
   113f8:	10c00015 	stw	r3,0(r2)
	/* LO Control */
	phy->pdata->rx_synth_freq = init_param->rx_synthesizer_frequency_hz;
	phy->pdata->tx_synth_freq = init_param->tx_synthesizer_frequency_hz;

	/* Rate & BW Control */
	for(i = 0; i < 6; i++) {
   113fc:	e0bff917 	ldw	r2,-28(fp)
   11400:	10800044 	addi	r2,r2,1
   11404:	e0bff915 	stw	r2,-28(fp)
   11408:	e0bff917 	ldw	r2,-28(fp)
   1140c:	10800190 	cmplti	r2,r2,6
   11410:	103feb1e 	bne	r2,zero,113c0 <_gp+0xfffdf2a0>
		phy->pdata->rx_path_clks[i] = init_param->rx_path_clock_frequencies[i];
	}
	for(i = 0; i < 6; i++) {
   11414:	e03ff915 	stw	zero,-28(fp)
   11418:	00001206 	br	11464 <ad9361_init+0x498>
		phy->pdata->tx_path_clks[i] = init_param->tx_path_clock_frequencies[i];
   1141c:	e0bffc17 	ldw	r2,-16(fp)
   11420:	11003017 	ldw	r4,192(r2)
   11424:	e0fffe17 	ldw	r3,-8(fp)
   11428:	e0bff917 	ldw	r2,-28(fp)
   1142c:	10800544 	addi	r2,r2,21
   11430:	1085883a 	add	r2,r2,r2
   11434:	1085883a 	add	r2,r2,r2
   11438:	1885883a 	add	r2,r3,r2
   1143c:	10c00017 	ldw	r3,0(r2)
   11440:	e0bff917 	ldw	r2,-28(fp)
   11444:	10800484 	addi	r2,r2,18
   11448:	1085883a 	add	r2,r2,r2
   1144c:	1085883a 	add	r2,r2,r2
   11450:	2085883a 	add	r2,r4,r2
   11454:	10c00015 	stw	r3,0(r2)

	/* Rate & BW Control */
	for(i = 0; i < 6; i++) {
		phy->pdata->rx_path_clks[i] = init_param->rx_path_clock_frequencies[i];
	}
	for(i = 0; i < 6; i++) {
   11458:	e0bff917 	ldw	r2,-28(fp)
   1145c:	10800044 	addi	r2,r2,1
   11460:	e0bff915 	stw	r2,-28(fp)
   11464:	e0bff917 	ldw	r2,-28(fp)
   11468:	10800190 	cmplti	r2,r2,6
   1146c:	103feb1e 	bne	r2,zero,1141c <_gp+0xfffdf2fc>
		phy->pdata->tx_path_clks[i] = init_param->tx_path_clock_frequencies[i];
	}
	phy->pdata->rf_rx_bandwidth_Hz = init_param->rf_rx_bandwidth_hz;
   11470:	e0bffc17 	ldw	r2,-16(fp)
   11474:	10803017 	ldw	r2,192(r2)
   11478:	e0fffe17 	ldw	r3,-8(fp)
   1147c:	18c01b17 	ldw	r3,108(r3)
   11480:	10c01d15 	stw	r3,116(r2)
	phy->pdata->rf_tx_bandwidth_Hz = init_param->rf_tx_bandwidth_hz;
   11484:	e0bffc17 	ldw	r2,-16(fp)
   11488:	10803017 	ldw	r2,192(r2)
   1148c:	e0fffe17 	ldw	r3,-8(fp)
   11490:	18c01c17 	ldw	r3,112(r3)
   11494:	10c01e15 	stw	r3,120(r2)

	/* RF Port Control */
	phy->pdata->rf_rx_input_sel = init_param->rx_rf_port_input_select;
   11498:	e0bffc17 	ldw	r2,-16(fp)
   1149c:	10803017 	ldw	r2,192(r2)
   114a0:	e0fffe17 	ldw	r3,-8(fp)
   114a4:	18c01d17 	ldw	r3,116(r3)
   114a8:	10c00815 	stw	r3,32(r2)
	phy->pdata->rf_tx_output_sel = init_param->tx_rf_port_input_select;
   114ac:	e0bffc17 	ldw	r2,-16(fp)
   114b0:	10803017 	ldw	r2,192(r2)
   114b4:	e0fffe17 	ldw	r3,-8(fp)
   114b8:	18c01e17 	ldw	r3,120(r3)
   114bc:	10c00915 	stw	r3,36(r2)

	/* TX Attenuation Control */
	phy->pdata->tx_atten = init_param->tx_attenuation_mdB;
   114c0:	e0bffc17 	ldw	r2,-16(fp)
   114c4:	10803017 	ldw	r2,192(r2)
   114c8:	e0fffe17 	ldw	r3,-8(fp)
   114cc:	18c01f17 	ldw	r3,124(r3)
   114d0:	10c01f15 	stw	r3,124(r2)
	phy->pdata->update_tx_gain_via_alert = init_param->update_tx_gain_in_alert_enable;
   114d4:	e0bffc17 	ldw	r2,-16(fp)
   114d8:	10803017 	ldw	r2,192(r2)
   114dc:	e0fffe17 	ldw	r3,-8(fp)
   114e0:	18c02003 	ldbu	r3,128(r3)
   114e4:	18c03fcc 	andi	r3,r3,255
   114e8:	1806c03a 	cmpne	r3,r3,zero
   114ec:	10c02005 	stb	r3,128(r2)

	/* Reference Clock Control */
	phy->pdata->use_extclk = init_param->xo_disable_use_ext_refclk_enable;
   114f0:	e0bffc17 	ldw	r2,-16(fp)
   114f4:	10803017 	ldw	r2,192(r2)
   114f8:	e0fffe17 	ldw	r3,-8(fp)
   114fc:	18c02043 	ldbu	r3,129(r3)
   11500:	18c03fcc 	andi	r3,r3,255
   11504:	1806c03a 	cmpne	r3,r3,zero
   11508:	10c00105 	stb	r3,4(r2)
	phy->pdata->dcxo_coarse = init_param->dcxo_coarse_and_fine_tune[0];
   1150c:	e0bffc17 	ldw	r2,-16(fp)
   11510:	10803017 	ldw	r2,192(r2)
   11514:	e0fffe17 	ldw	r3,-8(fp)
   11518:	18c02117 	ldw	r3,132(r3)
   1151c:	10c00615 	stw	r3,24(r2)
	phy->pdata->dcxo_fine = init_param->dcxo_coarse_and_fine_tune[1];
   11520:	e0bffc17 	ldw	r2,-16(fp)
   11524:	10803017 	ldw	r2,192(r2)
   11528:	e0fffe17 	ldw	r3,-8(fp)
   1152c:	18c02217 	ldw	r3,136(r3)
   11530:	10c00715 	stw	r3,28(r2)
	phy->pdata->ad9361_clkout_mode = (enum ad9361_clkout)init_param->clk_output_mode_select;
   11534:	e0bffc17 	ldw	r2,-16(fp)
   11538:	10803017 	ldw	r2,192(r2)
   1153c:	e0fffe17 	ldw	r3,-8(fp)
   11540:	18c02317 	ldw	r3,140(r3)
   11544:	10c02415 	stw	r3,144(r2)

	/* Gain Control */
	phy->pdata->gain_ctrl.rx1_mode = (enum rf_gain_ctrl_mode)init_param->gc_rx1_mode;
   11548:	e0bffc17 	ldw	r2,-16(fp)
   1154c:	10803017 	ldw	r2,192(r2)
   11550:	e0fffe17 	ldw	r3,-8(fp)
   11554:	18c02403 	ldbu	r3,144(r3)
   11558:	18c03fcc 	andi	r3,r3,255
   1155c:	10c02515 	stw	r3,148(r2)
	phy->pdata->gain_ctrl.rx2_mode = (enum rf_gain_ctrl_mode)init_param->gc_rx2_mode;
   11560:	e0bffc17 	ldw	r2,-16(fp)
   11564:	10803017 	ldw	r2,192(r2)
   11568:	e0fffe17 	ldw	r3,-8(fp)
   1156c:	18c02443 	ldbu	r3,145(r3)
   11570:	18c03fcc 	andi	r3,r3,255
   11574:	10c02615 	stw	r3,152(r2)
	phy->pdata->gain_ctrl.adc_large_overload_thresh = init_param->gc_adc_large_overload_thresh;
   11578:	e0bffc17 	ldw	r2,-16(fp)
   1157c:	10803017 	ldw	r2,192(r2)
   11580:	e0fffe17 	ldw	r3,-8(fp)
   11584:	18c02483 	ldbu	r3,146(r3)
   11588:	10c02785 	stb	r3,158(r2)
	phy->pdata->gain_ctrl.adc_ovr_sample_size = init_param->gc_adc_ovr_sample_size;
   1158c:	e0bffc17 	ldw	r2,-16(fp)
   11590:	10803017 	ldw	r2,192(r2)
   11594:	e0fffe17 	ldw	r3,-8(fp)
   11598:	18c024c3 	ldbu	r3,147(r3)
   1159c:	10c02705 	stb	r3,156(r2)
	phy->pdata->gain_ctrl.adc_small_overload_thresh = init_param->gc_adc_small_overload_thresh;
   115a0:	e0bffc17 	ldw	r2,-16(fp)
   115a4:	10803017 	ldw	r2,192(r2)
   115a8:	e0fffe17 	ldw	r3,-8(fp)
   115ac:	18c02503 	ldbu	r3,148(r3)
   115b0:	10c02745 	stb	r3,157(r2)
	phy->pdata->gain_ctrl.dec_pow_measuremnt_duration = init_param->gc_dec_pow_measurement_duration;
   115b4:	e0bffc17 	ldw	r2,-16(fp)
   115b8:	10803017 	ldw	r2,192(r2)
   115bc:	e0fffe17 	ldw	r3,-8(fp)
   115c0:	18c0258b 	ldhu	r3,150(r3)
   115c4:	10c0290d 	sth	r3,164(r2)
	phy->pdata->gain_ctrl.dig_gain_en = init_param->gc_dig_gain_enable;
   115c8:	e0bffc17 	ldw	r2,-16(fp)
   115cc:	10803017 	ldw	r2,192(r2)
   115d0:	e0fffe17 	ldw	r3,-8(fp)
   115d4:	18c02603 	ldbu	r3,152(r3)
   115d8:	18c03fcc 	andi	r3,r3,255
   115dc:	1806c03a 	cmpne	r3,r3,zero
   115e0:	10c029c5 	stb	r3,167(r2)
	phy->pdata->gain_ctrl.lmt_overload_high_thresh = init_param->gc_lmt_overload_high_thresh;
   115e4:	e0bffc17 	ldw	r2,-16(fp)
   115e8:	10803017 	ldw	r2,192(r2)
   115ec:	e0fffe17 	ldw	r3,-8(fp)
   115f0:	18c0268b 	ldhu	r3,154(r3)
   115f4:	10c0280d 	sth	r3,160(r2)
	phy->pdata->gain_ctrl.lmt_overload_low_thresh = init_param->gc_lmt_overload_low_thresh;
   115f8:	e0bffc17 	ldw	r2,-16(fp)
   115fc:	10803017 	ldw	r2,192(r2)
   11600:	e0fffe17 	ldw	r3,-8(fp)
   11604:	18c0270b 	ldhu	r3,156(r3)
   11608:	10c0288d 	sth	r3,162(r2)
	phy->pdata->gain_ctrl.low_power_thresh = init_param->gc_low_power_thresh;
   1160c:	e0bffc17 	ldw	r2,-16(fp)
   11610:	10803017 	ldw	r2,192(r2)
   11614:	e0fffe17 	ldw	r3,-8(fp)
   11618:	18c02783 	ldbu	r3,158(r3)
   1161c:	10c02985 	stb	r3,166(r2)
	phy->pdata->gain_ctrl.max_dig_gain = init_param->gc_max_dig_gain;
   11620:	e0bffc17 	ldw	r2,-16(fp)
   11624:	10803017 	ldw	r2,192(r2)
   11628:	e0fffe17 	ldw	r3,-8(fp)
   1162c:	18c027c3 	ldbu	r3,159(r3)
   11630:	10c02a05 	stb	r3,168(r2)

	/* Gain MGC Control */
	phy->pdata->gain_ctrl.mgc_dec_gain_step = init_param->mgc_dec_gain_step;
   11634:	e0bffc17 	ldw	r2,-16(fp)
   11638:	10803017 	ldw	r2,192(r2)
   1163c:	e0fffe17 	ldw	r3,-8(fp)
   11640:	18c02803 	ldbu	r3,160(r3)
   11644:	10c02b05 	stb	r3,172(r2)
	phy->pdata->gain_ctrl.mgc_inc_gain_step = init_param->mgc_inc_gain_step;
   11648:	e0bffc17 	ldw	r2,-16(fp)
   1164c:	10803017 	ldw	r2,192(r2)
   11650:	e0fffe17 	ldw	r3,-8(fp)
   11654:	18c02843 	ldbu	r3,161(r3)
   11658:	10c02ac5 	stb	r3,171(r2)
	phy->pdata->gain_ctrl.mgc_rx1_ctrl_inp_en = init_param->mgc_rx1_ctrl_inp_enable;
   1165c:	e0bffc17 	ldw	r2,-16(fp)
   11660:	10803017 	ldw	r2,192(r2)
   11664:	e0fffe17 	ldw	r3,-8(fp)
   11668:	18c02883 	ldbu	r3,162(r3)
   1166c:	18c03fcc 	andi	r3,r3,255
   11670:	1806c03a 	cmpne	r3,r3,zero
   11674:	10c02a45 	stb	r3,169(r2)
	phy->pdata->gain_ctrl.mgc_rx2_ctrl_inp_en = init_param->mgc_rx2_ctrl_inp_enable;
   11678:	e0bffc17 	ldw	r2,-16(fp)
   1167c:	10803017 	ldw	r2,192(r2)
   11680:	e0fffe17 	ldw	r3,-8(fp)
   11684:	18c028c3 	ldbu	r3,163(r3)
   11688:	18c03fcc 	andi	r3,r3,255
   1168c:	1806c03a 	cmpne	r3,r3,zero
   11690:	10c02a85 	stb	r3,170(r2)
	phy->pdata->gain_ctrl.mgc_split_table_ctrl_inp_gain_mode = init_param->mgc_split_table_ctrl_inp_gain_mode;
   11694:	e0bffc17 	ldw	r2,-16(fp)
   11698:	10803017 	ldw	r2,192(r2)
   1169c:	e0fffe17 	ldw	r3,-8(fp)
   116a0:	18c02903 	ldbu	r3,164(r3)
   116a4:	10c02b45 	stb	r3,173(r2)

	/* Gain AGC Control */
	phy->pdata->gain_ctrl.adc_large_overload_exceed_counter = init_param->agc_adc_large_overload_exceed_counter;
   116a8:	e0bffc17 	ldw	r2,-16(fp)
   116ac:	10803017 	ldw	r2,192(r2)
   116b0:	e0fffe17 	ldw	r3,-8(fp)
   116b4:	18c02943 	ldbu	r3,165(r3)
   116b8:	10c02e05 	stb	r3,184(r2)
	phy->pdata->gain_ctrl.adc_large_overload_inc_steps = init_param->agc_adc_large_overload_inc_steps;
   116bc:	e0bffc17 	ldw	r2,-16(fp)
   116c0:	10803017 	ldw	r2,192(r2)
   116c4:	e0fffe17 	ldw	r3,-8(fp)
   116c8:	18c02983 	ldbu	r3,166(r3)
   116cc:	10c02e45 	stb	r3,185(r2)
	phy->pdata->gain_ctrl.adc_lmt_small_overload_prevent_gain_inc = init_param->agc_adc_lmt_small_overload_prevent_gain_inc_enable;
   116d0:	e0bffc17 	ldw	r2,-16(fp)
   116d4:	10803017 	ldw	r2,192(r2)
   116d8:	e0fffe17 	ldw	r3,-8(fp)
   116dc:	18c029c3 	ldbu	r3,167(r3)
   116e0:	18c03fcc 	andi	r3,r3,255
   116e4:	1806c03a 	cmpne	r3,r3,zero
   116e8:	10c02e85 	stb	r3,186(r2)
	phy->pdata->gain_ctrl.adc_small_overload_exceed_counter = init_param->agc_adc_small_overload_exceed_counter;
   116ec:	e0bffc17 	ldw	r2,-16(fp)
   116f0:	10803017 	ldw	r2,192(r2)
   116f4:	e0fffe17 	ldw	r3,-8(fp)
   116f8:	18c02a03 	ldbu	r3,168(r3)
   116fc:	10c02dc5 	stb	r3,183(r2)
	phy->pdata->gain_ctrl.dig_gain_step_size = init_param->agc_dig_gain_step_size;
   11700:	e0bffc17 	ldw	r2,-16(fp)
   11704:	10803017 	ldw	r2,192(r2)
   11708:	e0fffe17 	ldw	r3,-8(fp)
   1170c:	18c02a43 	ldbu	r3,169(r3)
   11710:	10c02fc5 	stb	r3,191(r2)
	phy->pdata->gain_ctrl.dig_saturation_exceed_counter = init_param->agc_dig_saturation_exceed_counter;
   11714:	e0bffc17 	ldw	r2,-16(fp)
   11718:	10803017 	ldw	r2,192(r2)
   1171c:	e0fffe17 	ldw	r3,-8(fp)
   11720:	18c02a83 	ldbu	r3,170(r3)
   11724:	10c02f85 	stb	r3,190(r2)
	phy->pdata->gain_ctrl.gain_update_interval_us = init_param->agc_gain_update_interval_us;
   11728:	e0bffc17 	ldw	r2,-16(fp)
   1172c:	10803017 	ldw	r2,192(r2)
   11730:	e0fffe17 	ldw	r3,-8(fp)
   11734:	18c02b17 	ldw	r3,172(r3)
   11738:	10c03115 	stw	r3,196(r2)
	phy->pdata->gain_ctrl.immed_gain_change_if_large_adc_overload = init_param->agc_immed_gain_change_if_large_adc_overload_enable;
   1173c:	e0bffc17 	ldw	r2,-16(fp)
   11740:	10803017 	ldw	r2,192(r2)
   11744:	e0fffe17 	ldw	r3,-8(fp)
   11748:	18c02c03 	ldbu	r3,176(r3)
   1174c:	18c03fcc 	andi	r3,r3,255
   11750:	1806c03a 	cmpne	r3,r3,zero
   11754:	10c03205 	stb	r3,200(r2)
	phy->pdata->gain_ctrl.immed_gain_change_if_large_lmt_overload = init_param->agc_immed_gain_change_if_large_lmt_overload_enable;
   11758:	e0bffc17 	ldw	r2,-16(fp)
   1175c:	10803017 	ldw	r2,192(r2)
   11760:	e0fffe17 	ldw	r3,-8(fp)
   11764:	18c02c43 	ldbu	r3,177(r3)
   11768:	18c03fcc 	andi	r3,r3,255
   1176c:	1806c03a 	cmpne	r3,r3,zero
   11770:	10c03245 	stb	r3,201(r2)
	phy->pdata->gain_ctrl.agc_inner_thresh_high = init_param->agc_inner_thresh_high;
   11774:	e0bffc17 	ldw	r2,-16(fp)
   11778:	10803017 	ldw	r2,192(r2)
   1177c:	e0fffe17 	ldw	r3,-8(fp)
   11780:	18c02c83 	ldbu	r3,178(r3)
   11784:	10c02c45 	stb	r3,177(r2)
	phy->pdata->gain_ctrl.agc_inner_thresh_high_dec_steps = init_param->agc_inner_thresh_high_dec_steps;
   11788:	e0bffc17 	ldw	r2,-16(fp)
   1178c:	10803017 	ldw	r2,192(r2)
   11790:	e0fffe17 	ldw	r3,-8(fp)
   11794:	18c02cc3 	ldbu	r3,179(r3)
   11798:	10c02c85 	stb	r3,178(r2)
	phy->pdata->gain_ctrl.agc_inner_thresh_low = init_param->agc_inner_thresh_low;
   1179c:	e0bffc17 	ldw	r2,-16(fp)
   117a0:	10803017 	ldw	r2,192(r2)
   117a4:	e0fffe17 	ldw	r3,-8(fp)
   117a8:	18c02d03 	ldbu	r3,180(r3)
   117ac:	10c02cc5 	stb	r3,179(r2)
	phy->pdata->gain_ctrl.agc_inner_thresh_low_inc_steps = init_param->agc_inner_thresh_low_inc_steps;
   117b0:	e0bffc17 	ldw	r2,-16(fp)
   117b4:	10803017 	ldw	r2,192(r2)
   117b8:	e0fffe17 	ldw	r3,-8(fp)
   117bc:	18c02d43 	ldbu	r3,181(r3)
   117c0:	10c02d05 	stb	r3,180(r2)
	phy->pdata->gain_ctrl.lmt_overload_large_exceed_counter = init_param->agc_lmt_overload_large_exceed_counter;
   117c4:	e0bffc17 	ldw	r2,-16(fp)
   117c8:	10803017 	ldw	r2,192(r2)
   117cc:	e0fffe17 	ldw	r3,-8(fp)
   117d0:	18c02d83 	ldbu	r3,182(r3)
   117d4:	10c02ec5 	stb	r3,187(r2)
	phy->pdata->gain_ctrl.lmt_overload_large_inc_steps = init_param->agc_lmt_overload_large_inc_steps;
   117d8:	e0bffc17 	ldw	r2,-16(fp)
   117dc:	10803017 	ldw	r2,192(r2)
   117e0:	e0fffe17 	ldw	r3,-8(fp)
   117e4:	18c02dc3 	ldbu	r3,183(r3)
   117e8:	10c02f45 	stb	r3,189(r2)
	phy->pdata->gain_ctrl.lmt_overload_small_exceed_counter = init_param->agc_lmt_overload_small_exceed_counter;
   117ec:	e0bffc17 	ldw	r2,-16(fp)
   117f0:	10803017 	ldw	r2,192(r2)
   117f4:	e0fffe17 	ldw	r3,-8(fp)
   117f8:	18c02e03 	ldbu	r3,184(r3)
   117fc:	10c02f05 	stb	r3,188(r2)
	phy->pdata->gain_ctrl.agc_outer_thresh_high = init_param->agc_outer_thresh_high;
   11800:	e0bffc17 	ldw	r2,-16(fp)
   11804:	10803017 	ldw	r2,192(r2)
   11808:	e0fffe17 	ldw	r3,-8(fp)
   1180c:	18c02e43 	ldbu	r3,185(r3)
   11810:	10c02bc5 	stb	r3,175(r2)
	phy->pdata->gain_ctrl.agc_outer_thresh_high_dec_steps = init_param->agc_outer_thresh_high_dec_steps;
   11814:	e0bffc17 	ldw	r2,-16(fp)
   11818:	10803017 	ldw	r2,192(r2)
   1181c:	e0fffe17 	ldw	r3,-8(fp)
   11820:	18c02e83 	ldbu	r3,186(r3)
   11824:	10c02c05 	stb	r3,176(r2)
	phy->pdata->gain_ctrl.agc_outer_thresh_low = init_param->agc_outer_thresh_low;
   11828:	e0bffc17 	ldw	r2,-16(fp)
   1182c:	10803017 	ldw	r2,192(r2)
   11830:	e0fffe17 	ldw	r3,-8(fp)
   11834:	18c02ec3 	ldbu	r3,187(r3)
   11838:	10c02d45 	stb	r3,181(r2)
	phy->pdata->gain_ctrl.agc_outer_thresh_low_inc_steps = init_param->agc_outer_thresh_low_inc_steps;
   1183c:	e0bffc17 	ldw	r2,-16(fp)
   11840:	10803017 	ldw	r2,192(r2)
   11844:	e0fffe17 	ldw	r3,-8(fp)
   11848:	18c02f03 	ldbu	r3,188(r3)
   1184c:	10c02d85 	stb	r3,182(r2)
	phy->pdata->gain_ctrl.agc_attack_delay_extra_margin_us = init_param->agc_attack_delay_extra_margin_us;
   11850:	e0bffc17 	ldw	r2,-16(fp)
   11854:	10803017 	ldw	r2,192(r2)
   11858:	e0fffe17 	ldw	r3,-8(fp)
   1185c:	18c03017 	ldw	r3,192(r3)
   11860:	10c02b85 	stb	r3,174(r2)
	phy->pdata->gain_ctrl.sync_for_gain_counter_en = init_param->agc_sync_for_gain_counter_enable;
   11864:	e0bffc17 	ldw	r2,-16(fp)
   11868:	10803017 	ldw	r2,192(r2)
   1186c:	e0fffe17 	ldw	r3,-8(fp)
   11870:	18c03103 	ldbu	r3,196(r3)
   11874:	18c03fcc 	andi	r3,r3,255
   11878:	1806c03a 	cmpne	r3,r3,zero
   1187c:	10c03005 	stb	r3,192(r2)

	/* Fast AGC */
	phy->pdata->gain_ctrl.f_agc_dec_pow_measuremnt_duration = init_param->fagc_dec_pow_measuremnt_duration;
   11880:	e0bffc17 	ldw	r2,-16(fp)
   11884:	10803017 	ldw	r2,192(r2)
   11888:	e0fffe17 	ldw	r3,-8(fp)
   1188c:	18c03217 	ldw	r3,200(r3)
   11890:	10c03315 	stw	r3,204(r2)
	phy->pdata->gain_ctrl.f_agc_state_wait_time_ns = init_param->fagc_state_wait_time_ns;
   11894:	e0bffc17 	ldw	r2,-16(fp)
   11898:	10803017 	ldw	r2,192(r2)
   1189c:	e0fffe17 	ldw	r3,-8(fp)
   118a0:	18c03317 	ldw	r3,204(r3)
   118a4:	10c03415 	stw	r3,208(r2)
	/* Fast AGC - Low Power */
	phy->pdata->gain_ctrl.f_agc_allow_agc_gain_increase = init_param->fagc_allow_agc_gain_increase;
   118a8:	e0bffc17 	ldw	r2,-16(fp)
   118ac:	10803017 	ldw	r2,192(r2)
   118b0:	e0fffe17 	ldw	r3,-8(fp)
   118b4:	18c03403 	ldbu	r3,208(r3)
   118b8:	18c03fcc 	andi	r3,r3,255
   118bc:	1806c03a 	cmpne	r3,r3,zero
   118c0:	10c03505 	stb	r3,212(r2)
	phy->pdata->gain_ctrl.f_agc_lp_thresh_increment_time = init_param->fagc_lp_thresh_increment_time;
   118c4:	e0bffc17 	ldw	r2,-16(fp)
   118c8:	10803017 	ldw	r2,192(r2)
   118cc:	e0fffe17 	ldw	r3,-8(fp)
   118d0:	18c03517 	ldw	r3,212(r3)
   118d4:	10c03545 	stb	r3,213(r2)
	phy->pdata->gain_ctrl.f_agc_lp_thresh_increment_steps = init_param->fagc_lp_thresh_increment_steps;
   118d8:	e0bffc17 	ldw	r2,-16(fp)
   118dc:	10803017 	ldw	r2,192(r2)
   118e0:	e0fffe17 	ldw	r3,-8(fp)
   118e4:	18c03617 	ldw	r3,216(r3)
   118e8:	10c03585 	stb	r3,214(r2)
	/* Fast AGC - Lock Level */
	phy->pdata->gain_ctrl.f_agc_lock_level = init_param->fagc_lock_level;
   118ec:	e0bffc17 	ldw	r2,-16(fp)
   118f0:	10803017 	ldw	r2,192(r2)
   118f4:	e0fffe17 	ldw	r3,-8(fp)
   118f8:	18c03717 	ldw	r3,220(r3)
   118fc:	10c035c5 	stb	r3,215(r2)
	phy->pdata->gain_ctrl.f_agc_lock_level_lmt_gain_increase_en = init_param->fagc_lock_level_lmt_gain_increase_en;
   11900:	e0bffc17 	ldw	r2,-16(fp)
   11904:	10803017 	ldw	r2,192(r2)
   11908:	e0fffe17 	ldw	r3,-8(fp)
   1190c:	18c03803 	ldbu	r3,224(r3)
   11910:	18c03fcc 	andi	r3,r3,255
   11914:	1806c03a 	cmpne	r3,r3,zero
   11918:	10c03605 	stb	r3,216(r2)
	phy->pdata->gain_ctrl.f_agc_lock_level_gain_increase_upper_limit = init_param->fagc_lock_level_gain_increase_upper_limit;
   1191c:	e0bffc17 	ldw	r2,-16(fp)
   11920:	10803017 	ldw	r2,192(r2)
   11924:	e0fffe17 	ldw	r3,-8(fp)
   11928:	18c03917 	ldw	r3,228(r3)
   1192c:	10c03645 	stb	r3,217(r2)
	/* Fast AGC - Peak Detectors and Final Settling */
	phy->pdata->gain_ctrl.f_agc_lpf_final_settling_steps = init_param->fagc_lpf_final_settling_steps;
   11930:	e0bffc17 	ldw	r2,-16(fp)
   11934:	10803017 	ldw	r2,192(r2)
   11938:	e0fffe17 	ldw	r3,-8(fp)
   1193c:	18c03a17 	ldw	r3,232(r3)
   11940:	10c03685 	stb	r3,218(r2)
	phy->pdata->gain_ctrl.f_agc_lmt_final_settling_steps = init_param->fagc_lmt_final_settling_steps;
   11944:	e0bffc17 	ldw	r2,-16(fp)
   11948:	10803017 	ldw	r2,192(r2)
   1194c:	e0fffe17 	ldw	r3,-8(fp)
   11950:	18c03b17 	ldw	r3,236(r3)
   11954:	10c036c5 	stb	r3,219(r2)
	phy->pdata->gain_ctrl.f_agc_final_overrange_count = init_param->fagc_final_overrange_count;
   11958:	e0bffc17 	ldw	r2,-16(fp)
   1195c:	10803017 	ldw	r2,192(r2)
   11960:	e0fffe17 	ldw	r3,-8(fp)
   11964:	18c03c17 	ldw	r3,240(r3)
   11968:	10c03705 	stb	r3,220(r2)
	/* Fast AGC - Final Power Test */
	phy->pdata->gain_ctrl.f_agc_gain_increase_after_gain_lock_en = init_param->fagc_gain_increase_after_gain_lock_en;
   1196c:	e0bffc17 	ldw	r2,-16(fp)
   11970:	10803017 	ldw	r2,192(r2)
   11974:	e0fffe17 	ldw	r3,-8(fp)
   11978:	18c03d03 	ldbu	r3,244(r3)
   1197c:	18c03fcc 	andi	r3,r3,255
   11980:	1806c03a 	cmpne	r3,r3,zero
   11984:	10c03745 	stb	r3,221(r2)
	/* Fast AGC - Unlocking the Gain */
	phy->pdata->gain_ctrl.f_agc_gain_index_type_after_exit_rx_mode = (enum f_agc_target_gain_index_type)init_param->fagc_gain_index_type_after_exit_rx_mode;
   11988:	e0bffc17 	ldw	r2,-16(fp)
   1198c:	10803017 	ldw	r2,192(r2)
   11990:	e0fffe17 	ldw	r3,-8(fp)
   11994:	18c03e17 	ldw	r3,248(r3)
   11998:	10c03815 	stw	r3,224(r2)
	phy->pdata->gain_ctrl.f_agc_use_last_lock_level_for_set_gain_en = init_param->fagc_use_last_lock_level_for_set_gain_en;
   1199c:	e0bffc17 	ldw	r2,-16(fp)
   119a0:	10803017 	ldw	r2,192(r2)
   119a4:	e0fffe17 	ldw	r3,-8(fp)
   119a8:	18c03f03 	ldbu	r3,252(r3)
   119ac:	18c03fcc 	andi	r3,r3,255
   119b0:	1806c03a 	cmpne	r3,r3,zero
   119b4:	10c03905 	stb	r3,228(r2)
	phy->pdata->gain_ctrl.f_agc_rst_gla_stronger_sig_thresh_exceeded_en = init_param->fagc_rst_gla_stronger_sig_thresh_exceeded_en;
   119b8:	e0bffc17 	ldw	r2,-16(fp)
   119bc:	10803017 	ldw	r2,192(r2)
   119c0:	e0fffe17 	ldw	r3,-8(fp)
   119c4:	18c03f43 	ldbu	r3,253(r3)
   119c8:	18c03fcc 	andi	r3,r3,255
   119cc:	1806c03a 	cmpne	r3,r3,zero
   119d0:	10c03985 	stb	r3,230(r2)
	phy->pdata->gain_ctrl.f_agc_optimized_gain_offset = init_param->fagc_optimized_gain_offset;
   119d4:	e0bffc17 	ldw	r2,-16(fp)
   119d8:	10803017 	ldw	r2,192(r2)
   119dc:	e0fffe17 	ldw	r3,-8(fp)
   119e0:	18c04017 	ldw	r3,256(r3)
   119e4:	10c03945 	stb	r3,229(r2)
	phy->pdata->gain_ctrl.f_agc_rst_gla_stronger_sig_thresh_above_ll = init_param->fagc_rst_gla_stronger_sig_thresh_above_ll;
   119e8:	e0bffc17 	ldw	r2,-16(fp)
   119ec:	10803017 	ldw	r2,192(r2)
   119f0:	e0fffe17 	ldw	r3,-8(fp)
   119f4:	18c04117 	ldw	r3,260(r3)
   119f8:	10c039c5 	stb	r3,231(r2)
	phy->pdata->gain_ctrl.f_agc_rst_gla_engergy_lost_sig_thresh_exceeded_en = init_param->fagc_rst_gla_engergy_lost_sig_thresh_exceeded_en;
   119fc:	e0bffc17 	ldw	r2,-16(fp)
   11a00:	10803017 	ldw	r2,192(r2)
   11a04:	e0fffe17 	ldw	r3,-8(fp)
   11a08:	18c04203 	ldbu	r3,264(r3)
   11a0c:	18c03fcc 	andi	r3,r3,255
   11a10:	1806c03a 	cmpne	r3,r3,zero
   11a14:	10c03a05 	stb	r3,232(r2)
	phy->pdata->gain_ctrl.f_agc_rst_gla_engergy_lost_goto_optim_gain_en = init_param->fagc_rst_gla_engergy_lost_goto_optim_gain_en;
   11a18:	e0bffc17 	ldw	r2,-16(fp)
   11a1c:	10803017 	ldw	r2,192(r2)
   11a20:	e0fffe17 	ldw	r3,-8(fp)
   11a24:	18c04243 	ldbu	r3,265(r3)
   11a28:	18c03fcc 	andi	r3,r3,255
   11a2c:	1806c03a 	cmpne	r3,r3,zero
   11a30:	10c03a45 	stb	r3,233(r2)
	phy->pdata->gain_ctrl.f_agc_rst_gla_engergy_lost_sig_thresh_below_ll = init_param->fagc_rst_gla_engergy_lost_sig_thresh_below_ll;
   11a34:	e0bffc17 	ldw	r2,-16(fp)
   11a38:	10803017 	ldw	r2,192(r2)
   11a3c:	e0fffe17 	ldw	r3,-8(fp)
   11a40:	18c04317 	ldw	r3,268(r3)
   11a44:	10c03a85 	stb	r3,234(r2)
	phy->pdata->gain_ctrl.f_agc_energy_lost_stronger_sig_gain_lock_exit_cnt = init_param->fagc_energy_lost_stronger_sig_gain_lock_exit_cnt;
   11a48:	e0bffc17 	ldw	r2,-16(fp)
   11a4c:	10803017 	ldw	r2,192(r2)
   11a50:	e0fffe17 	ldw	r3,-8(fp)
   11a54:	18c04417 	ldw	r3,272(r3)
   11a58:	10c03ac5 	stb	r3,235(r2)
	phy->pdata->gain_ctrl.f_agc_rst_gla_large_adc_overload_en = init_param->fagc_rst_gla_large_adc_overload_en;
   11a5c:	e0bffc17 	ldw	r2,-16(fp)
   11a60:	10803017 	ldw	r2,192(r2)
   11a64:	e0fffe17 	ldw	r3,-8(fp)
   11a68:	18c04503 	ldbu	r3,276(r3)
   11a6c:	18c03fcc 	andi	r3,r3,255
   11a70:	1806c03a 	cmpne	r3,r3,zero
   11a74:	10c03b05 	stb	r3,236(r2)
	phy->pdata->gain_ctrl.f_agc_rst_gla_large_lmt_overload_en = init_param->fagc_rst_gla_large_lmt_overload_en;
   11a78:	e0bffc17 	ldw	r2,-16(fp)
   11a7c:	10803017 	ldw	r2,192(r2)
   11a80:	e0fffe17 	ldw	r3,-8(fp)
   11a84:	18c04543 	ldbu	r3,277(r3)
   11a88:	18c03fcc 	andi	r3,r3,255
   11a8c:	1806c03a 	cmpne	r3,r3,zero
   11a90:	10c03b45 	stb	r3,237(r2)
	phy->pdata->gain_ctrl.f_agc_rst_gla_en_agc_pulled_high_en = init_param->fagc_rst_gla_en_agc_pulled_high_en;
   11a94:	e0bffc17 	ldw	r2,-16(fp)
   11a98:	10803017 	ldw	r2,192(r2)
   11a9c:	e0fffe17 	ldw	r3,-8(fp)
   11aa0:	18c04583 	ldbu	r3,278(r3)
   11aa4:	18c03fcc 	andi	r3,r3,255
   11aa8:	1806c03a 	cmpne	r3,r3,zero
   11aac:	10c03b85 	stb	r3,238(r2)
	phy->pdata->gain_ctrl.f_agc_rst_gla_if_en_agc_pulled_high_mode = (enum f_agc_target_gain_index_type)init_param->fagc_rst_gla_if_en_agc_pulled_high_mode;
   11ab0:	e0bffc17 	ldw	r2,-16(fp)
   11ab4:	10803017 	ldw	r2,192(r2)
   11ab8:	e0fffe17 	ldw	r3,-8(fp)
   11abc:	18c04617 	ldw	r3,280(r3)
   11ac0:	10c03c15 	stw	r3,240(r2)
	phy->pdata->gain_ctrl.f_agc_power_measurement_duration_in_state5 = init_param->fagc_power_measurement_duration_in_state5;
   11ac4:	e0bffc17 	ldw	r2,-16(fp)
   11ac8:	10803017 	ldw	r2,192(r2)
   11acc:	e0fffe17 	ldw	r3,-8(fp)
   11ad0:	18c04717 	ldw	r3,284(r3)
   11ad4:	10c03d05 	stb	r3,244(r2)

	/* RSSI Control */
	phy->pdata->rssi_ctrl.rssi_delay = init_param->rssi_delay;
   11ad8:	e0bffc17 	ldw	r2,-16(fp)
   11adc:	10803017 	ldw	r2,192(r2)
   11ae0:	e0fffe17 	ldw	r3,-8(fp)
   11ae4:	18c04817 	ldw	r3,288(r3)
   11ae8:	10c04015 	stw	r3,256(r2)
	phy->pdata->rssi_ctrl.rssi_duration = init_param->rssi_duration;
   11aec:	e0bffc17 	ldw	r2,-16(fp)
   11af0:	10803017 	ldw	r2,192(r2)
   11af4:	e0fffe17 	ldw	r3,-8(fp)
   11af8:	18c04917 	ldw	r3,292(r3)
   11afc:	10c04215 	stw	r3,264(r2)
	phy->pdata->rssi_ctrl.restart_mode = (enum rssi_restart_mode)init_param->rssi_restart_mode;
   11b00:	e0bffc17 	ldw	r2,-16(fp)
   11b04:	10803017 	ldw	r2,192(r2)
   11b08:	e0fffe17 	ldw	r3,-8(fp)
   11b0c:	18c04a03 	ldbu	r3,296(r3)
   11b10:	18c03fcc 	andi	r3,r3,255
   11b14:	10c03e15 	stw	r3,248(r2)
	phy->pdata->rssi_ctrl.rssi_unit_is_rx_samples = init_param->rssi_unit_is_rx_samples_enable;
   11b18:	e0bffc17 	ldw	r2,-16(fp)
   11b1c:	10803017 	ldw	r2,192(r2)
   11b20:	e0fffe17 	ldw	r3,-8(fp)
   11b24:	18c04a43 	ldbu	r3,297(r3)
   11b28:	18c03fcc 	andi	r3,r3,255
   11b2c:	1806c03a 	cmpne	r3,r3,zero
   11b30:	10c03f05 	stb	r3,252(r2)
	phy->pdata->rssi_ctrl.rssi_wait = init_param->rssi_wait;
   11b34:	e0bffc17 	ldw	r2,-16(fp)
   11b38:	10803017 	ldw	r2,192(r2)
   11b3c:	e0fffe17 	ldw	r3,-8(fp)
   11b40:	18c04b17 	ldw	r3,300(r3)
   11b44:	10c04115 	stw	r3,260(r2)

	/* Aux ADC Control */
	phy->pdata->auxadc_ctrl.auxadc_decimation = init_param->aux_adc_decimation;
   11b48:	e0bffc17 	ldw	r2,-16(fp)
   11b4c:	10803017 	ldw	r2,192(r2)
   11b50:	e0fffe17 	ldw	r3,-8(fp)
   11b54:	18c04c17 	ldw	r3,304(r3)
   11b58:	10c04e15 	stw	r3,312(r2)
	phy->pdata->auxadc_ctrl.auxadc_clock_rate = init_param->aux_adc_rate;
   11b5c:	e0bffc17 	ldw	r2,-16(fp)
   11b60:	10803017 	ldw	r2,192(r2)
   11b64:	e0fffe17 	ldw	r3,-8(fp)
   11b68:	18c04d17 	ldw	r3,308(r3)
   11b6c:	10c04d15 	stw	r3,308(r2)

	/* AuxDAC Control */
	phy->pdata->auxdac_ctrl.auxdac_manual_mode_en = init_param->aux_dac_manual_mode_enable;
   11b70:	e0bffc17 	ldw	r2,-16(fp)
   11b74:	10803017 	ldw	r2,192(r2)
   11b78:	e0fffe17 	ldw	r3,-8(fp)
   11b7c:	18c04e03 	ldbu	r3,312(r3)
   11b80:	18c03fcc 	andi	r3,r3,255
   11b84:	1806c03a 	cmpne	r3,r3,zero
   11b88:	10c05005 	stb	r3,320(r2)
	phy->pdata->auxdac_ctrl.dac1_default_value = init_param->aux_dac1_default_value_mV;
   11b8c:	e0bffc17 	ldw	r2,-16(fp)
   11b90:	10803017 	ldw	r2,192(r2)
   11b94:	e0fffe17 	ldw	r3,-8(fp)
   11b98:	18c04f17 	ldw	r3,316(r3)
   11b9c:	10c04f0d 	sth	r3,316(r2)
	phy->pdata->auxdac_ctrl.dac1_in_rx_en = init_param->aux_dac1_active_in_rx_enable;
   11ba0:	e0bffc17 	ldw	r2,-16(fp)
   11ba4:	10803017 	ldw	r2,192(r2)
   11ba8:	e0fffe17 	ldw	r3,-8(fp)
   11bac:	18c05003 	ldbu	r3,320(r3)
   11bb0:	18c03fcc 	andi	r3,r3,255
   11bb4:	1806c03a 	cmpne	r3,r3,zero
   11bb8:	10c05045 	stb	r3,321(r2)
	phy->pdata->auxdac_ctrl.dac1_in_tx_en = init_param->aux_dac1_active_in_tx_enable;
   11bbc:	e0bffc17 	ldw	r2,-16(fp)
   11bc0:	10803017 	ldw	r2,192(r2)
   11bc4:	e0fffe17 	ldw	r3,-8(fp)
   11bc8:	18c05043 	ldbu	r3,321(r3)
   11bcc:	18c03fcc 	andi	r3,r3,255
   11bd0:	1806c03a 	cmpne	r3,r3,zero
   11bd4:	10c05085 	stb	r3,322(r2)
	phy->pdata->auxdac_ctrl.dac1_in_alert_en = init_param->aux_dac1_active_in_alert_enable;
   11bd8:	e0bffc17 	ldw	r2,-16(fp)
   11bdc:	10803017 	ldw	r2,192(r2)
   11be0:	e0fffe17 	ldw	r3,-8(fp)
   11be4:	18c05083 	ldbu	r3,322(r3)
   11be8:	18c03fcc 	andi	r3,r3,255
   11bec:	1806c03a 	cmpne	r3,r3,zero
   11bf0:	10c050c5 	stb	r3,323(r2)
	phy->pdata->auxdac_ctrl.dac1_rx_delay_us = init_param->aux_dac1_rx_delay_us;
   11bf4:	e0bffc17 	ldw	r2,-16(fp)
   11bf8:	10803017 	ldw	r2,192(r2)
   11bfc:	e0fffe17 	ldw	r3,-8(fp)
   11c00:	18c05117 	ldw	r3,324(r3)
   11c04:	10c051c5 	stb	r3,327(r2)
	phy->pdata->auxdac_ctrl.dac1_tx_delay_us = init_param->aux_dac1_tx_delay_us;
   11c08:	e0bffc17 	ldw	r2,-16(fp)
   11c0c:	10803017 	ldw	r2,192(r2)
   11c10:	e0fffe17 	ldw	r3,-8(fp)
   11c14:	18c05217 	ldw	r3,328(r3)
   11c18:	10c05205 	stb	r3,328(r2)
	phy->pdata->auxdac_ctrl.dac2_default_value = init_param->aux_dac2_default_value_mV;
   11c1c:	e0bffc17 	ldw	r2,-16(fp)
   11c20:	10803017 	ldw	r2,192(r2)
   11c24:	e0fffe17 	ldw	r3,-8(fp)
   11c28:	18c05317 	ldw	r3,332(r3)
   11c2c:	10c04f8d 	sth	r3,318(r2)
	phy->pdata->auxdac_ctrl.dac2_in_rx_en = init_param->aux_dac2_active_in_rx_enable;
   11c30:	e0bffc17 	ldw	r2,-16(fp)
   11c34:	10803017 	ldw	r2,192(r2)
   11c38:	e0fffe17 	ldw	r3,-8(fp)
   11c3c:	18c05403 	ldbu	r3,336(r3)
   11c40:	18c03fcc 	andi	r3,r3,255
   11c44:	1806c03a 	cmpne	r3,r3,zero
   11c48:	10c05105 	stb	r3,324(r2)
	phy->pdata->auxdac_ctrl.dac2_in_tx_en = init_param->aux_dac2_active_in_tx_enable;
   11c4c:	e0bffc17 	ldw	r2,-16(fp)
   11c50:	10803017 	ldw	r2,192(r2)
   11c54:	e0fffe17 	ldw	r3,-8(fp)
   11c58:	18c05443 	ldbu	r3,337(r3)
   11c5c:	18c03fcc 	andi	r3,r3,255
   11c60:	1806c03a 	cmpne	r3,r3,zero
   11c64:	10c05145 	stb	r3,325(r2)
	phy->pdata->auxdac_ctrl.dac2_in_alert_en = init_param->aux_dac2_active_in_alert_enable;
   11c68:	e0bffc17 	ldw	r2,-16(fp)
   11c6c:	10803017 	ldw	r2,192(r2)
   11c70:	e0fffe17 	ldw	r3,-8(fp)
   11c74:	18c05483 	ldbu	r3,338(r3)
   11c78:	18c03fcc 	andi	r3,r3,255
   11c7c:	1806c03a 	cmpne	r3,r3,zero
   11c80:	10c05185 	stb	r3,326(r2)
	phy->pdata->auxdac_ctrl.dac2_rx_delay_us = init_param->aux_dac2_rx_delay_us;
   11c84:	e0bffc17 	ldw	r2,-16(fp)
   11c88:	10803017 	ldw	r2,192(r2)
   11c8c:	e0fffe17 	ldw	r3,-8(fp)
   11c90:	18c05517 	ldw	r3,340(r3)
   11c94:	10c05245 	stb	r3,329(r2)
	phy->pdata->auxdac_ctrl.dac2_tx_delay_us = init_param->aux_dac2_tx_delay_us;
   11c98:	e0bffc17 	ldw	r2,-16(fp)
   11c9c:	10803017 	ldw	r2,192(r2)
   11ca0:	e0fffe17 	ldw	r3,-8(fp)
   11ca4:	18c05617 	ldw	r3,344(r3)
   11ca8:	10c05285 	stb	r3,330(r2)

	/* Temperature Sensor Control */
	phy->pdata->auxadc_ctrl.temp_sensor_decimation = init_param->temp_sense_decimation;
   11cac:	e0bffc17 	ldw	r2,-16(fp)
   11cb0:	10803017 	ldw	r2,192(r2)
   11cb4:	e0fffe17 	ldw	r3,-8(fp)
   11cb8:	18c05717 	ldw	r3,348(r3)
   11cbc:	10c04b15 	stw	r3,300(r2)
	phy->pdata->auxadc_ctrl.temp_time_inteval_ms = init_param->temp_sense_measurement_interval_ms;
   11cc0:	e0bffc17 	ldw	r2,-16(fp)
   11cc4:	10803017 	ldw	r2,192(r2)
   11cc8:	e0fffe17 	ldw	r3,-8(fp)
   11ccc:	18c0580b 	ldhu	r3,352(r3)
   11cd0:	18ffffcc 	andi	r3,r3,65535
   11cd4:	10c04a15 	stw	r3,296(r2)
	phy->pdata->auxadc_ctrl.offset = init_param->temp_sense_offset_signed;
   11cd8:	e0bffc17 	ldw	r2,-16(fp)
   11cdc:	10803017 	ldw	r2,192(r2)
   11ce0:	e0fffe17 	ldw	r3,-8(fp)
   11ce4:	18c05883 	ldbu	r3,354(r3)
   11ce8:	10c04905 	stb	r3,292(r2)
	phy->pdata->auxadc_ctrl.periodic_temp_measuremnt = init_param->temp_sense_periodic_measurement_enable;
   11cec:	e0bffc17 	ldw	r2,-16(fp)
   11cf0:	10803017 	ldw	r2,192(r2)
   11cf4:	e0fffe17 	ldw	r3,-8(fp)
   11cf8:	18c058c3 	ldbu	r3,355(r3)
   11cfc:	18c03fcc 	andi	r3,r3,255
   11d00:	1806c03a 	cmpne	r3,r3,zero
   11d04:	10c04c05 	stb	r3,304(r2)

	/* Control Out Setup */
	phy->pdata->ctrl_outs_ctrl.en_mask = init_param->ctrl_outs_enable_mask;
   11d08:	e0bffc17 	ldw	r2,-16(fp)
   11d0c:	10803017 	ldw	r2,192(r2)
   11d10:	e0fffe17 	ldw	r3,-8(fp)
   11d14:	18c05903 	ldbu	r3,356(r3)
   11d18:	10c04585 	stb	r3,278(r2)
	phy->pdata->ctrl_outs_ctrl.index = init_param->ctrl_outs_index;
   11d1c:	e0bffc17 	ldw	r2,-16(fp)
   11d20:	10803017 	ldw	r2,192(r2)
   11d24:	e0fffe17 	ldw	r3,-8(fp)
   11d28:	18c05943 	ldbu	r3,357(r3)
   11d2c:	10c04545 	stb	r3,277(r2)

	/* External LNA Control */
	phy->pdata->elna_ctrl.settling_delay_ns = init_param->elna_settling_delay_ns;
   11d30:	e0bffc17 	ldw	r2,-16(fp)
   11d34:	10803017 	ldw	r2,192(r2)
   11d38:	e0fffe17 	ldw	r3,-8(fp)
   11d3c:	18c05a17 	ldw	r3,360(r3)
   11d40:	10c04715 	stw	r3,284(r2)
	phy->pdata->elna_ctrl.gain_mdB = init_param->elna_gain_mdB;
   11d44:	e0bffc17 	ldw	r2,-16(fp)
   11d48:	10803017 	ldw	r2,192(r2)
   11d4c:	e0fffe17 	ldw	r3,-8(fp)
   11d50:	18c05b17 	ldw	r3,364(r3)
   11d54:	10c0460d 	sth	r3,280(r2)
	phy->pdata->elna_ctrl.bypass_loss_mdB = init_param->elna_bypass_loss_mdB;
   11d58:	e0bffc17 	ldw	r2,-16(fp)
   11d5c:	10803017 	ldw	r2,192(r2)
   11d60:	e0fffe17 	ldw	r3,-8(fp)
   11d64:	18c05c17 	ldw	r3,368(r3)
   11d68:	10c0468d 	sth	r3,282(r2)
	phy->pdata->elna_ctrl.elna_1_control_en = init_param->elna_rx1_gpo0_control_enable;
   11d6c:	e0bffc17 	ldw	r2,-16(fp)
   11d70:	10803017 	ldw	r2,192(r2)
   11d74:	e0fffe17 	ldw	r3,-8(fp)
   11d78:	18c05d03 	ldbu	r3,372(r3)
   11d7c:	18c03fcc 	andi	r3,r3,255
   11d80:	1806c03a 	cmpne	r3,r3,zero
   11d84:	10c04805 	stb	r3,288(r2)
	phy->pdata->elna_ctrl.elna_2_control_en = init_param->elna_rx2_gpo1_control_enable;
   11d88:	e0bffc17 	ldw	r2,-16(fp)
   11d8c:	10803017 	ldw	r2,192(r2)
   11d90:	e0fffe17 	ldw	r3,-8(fp)
   11d94:	18c05d43 	ldbu	r3,373(r3)
   11d98:	18c03fcc 	andi	r3,r3,255
   11d9c:	1806c03a 	cmpne	r3,r3,zero
   11da0:	10c04845 	stb	r3,289(r2)
	phy->pdata->elna_ctrl.elna_in_gaintable_all_index_en = init_param->elna_gaintable_all_index_enable;
   11da4:	e0bffc17 	ldw	r2,-16(fp)
   11da8:	10803017 	ldw	r2,192(r2)
   11dac:	e0fffe17 	ldw	r3,-8(fp)
   11db0:	18c05d83 	ldbu	r3,374(r3)
   11db4:	18c03fcc 	andi	r3,r3,255
   11db8:	1806c03a 	cmpne	r3,r3,zero
   11dbc:	10c04885 	stb	r3,290(r2)

	/* Digital Interface Control */
	phy->pdata->dig_interface_tune_skipmode = (init_param->digital_interface_tune_skip_mode);
   11dc0:	e0bffc17 	ldw	r2,-16(fp)
   11dc4:	10803017 	ldw	r2,192(r2)
   11dc8:	e0fffe17 	ldw	r3,-8(fp)
   11dcc:	18c05dc3 	ldbu	r3,375(r3)
   11dd0:	10c00505 	stb	r3,20(r2)
	phy->pdata->dig_interface_tune_fir_disable = (init_param->digital_interface_tune_fir_disable);
   11dd4:	e0bffc17 	ldw	r2,-16(fp)
   11dd8:	10803017 	ldw	r2,192(r2)
   11ddc:	e0fffe17 	ldw	r3,-8(fp)
   11de0:	18c05e03 	ldbu	r3,376(r3)
   11de4:	10c00545 	stb	r3,21(r2)
	phy->pdata->port_ctrl.pp_conf[0] = (init_param->pp_tx_swap_enable << 7);
   11de8:	e0bffc17 	ldw	r2,-16(fp)
   11dec:	10803017 	ldw	r2,192(r2)
   11df0:	e0fffe17 	ldw	r3,-8(fp)
   11df4:	18c05e43 	ldbu	r3,377(r3)
   11df8:	180691fa 	slli	r3,r3,7
   11dfc:	10c04305 	stb	r3,268(r2)
	phy->pdata->port_ctrl.pp_conf[0] |= (init_param->pp_rx_swap_enable << 6);
   11e00:	e0bffc17 	ldw	r2,-16(fp)
   11e04:	10803017 	ldw	r2,192(r2)
   11e08:	e0fffc17 	ldw	r3,-16(fp)
   11e0c:	18c03017 	ldw	r3,192(r3)
   11e10:	18c04303 	ldbu	r3,268(r3)
   11e14:	1809883a 	mov	r4,r3
   11e18:	e0fffe17 	ldw	r3,-8(fp)
   11e1c:	18c05e83 	ldbu	r3,378(r3)
   11e20:	18c03fcc 	andi	r3,r3,255
   11e24:	180691ba 	slli	r3,r3,6
   11e28:	20c6b03a 	or	r3,r4,r3
   11e2c:	10c04305 	stb	r3,268(r2)
	phy->pdata->port_ctrl.pp_conf[0] |= (init_param->tx_channel_swap_enable << 5);
   11e30:	e0bffc17 	ldw	r2,-16(fp)
   11e34:	10803017 	ldw	r2,192(r2)
   11e38:	e0fffc17 	ldw	r3,-16(fp)
   11e3c:	18c03017 	ldw	r3,192(r3)
   11e40:	18c04303 	ldbu	r3,268(r3)
   11e44:	1809883a 	mov	r4,r3
   11e48:	e0fffe17 	ldw	r3,-8(fp)
   11e4c:	18c05ec3 	ldbu	r3,379(r3)
   11e50:	18c03fcc 	andi	r3,r3,255
   11e54:	1806917a 	slli	r3,r3,5
   11e58:	20c6b03a 	or	r3,r4,r3
   11e5c:	10c04305 	stb	r3,268(r2)
	phy->pdata->port_ctrl.pp_conf[0] |= (init_param->rx_channel_swap_enable << 4);
   11e60:	e0bffc17 	ldw	r2,-16(fp)
   11e64:	10803017 	ldw	r2,192(r2)
   11e68:	e0fffc17 	ldw	r3,-16(fp)
   11e6c:	18c03017 	ldw	r3,192(r3)
   11e70:	18c04303 	ldbu	r3,268(r3)
   11e74:	1809883a 	mov	r4,r3
   11e78:	e0fffe17 	ldw	r3,-8(fp)
   11e7c:	18c05f03 	ldbu	r3,380(r3)
   11e80:	18c03fcc 	andi	r3,r3,255
   11e84:	1806913a 	slli	r3,r3,4
   11e88:	20c6b03a 	or	r3,r4,r3
   11e8c:	10c04305 	stb	r3,268(r2)
	phy->pdata->port_ctrl.pp_conf[0] |= (init_param->rx_frame_pulse_mode_enable << 3);
   11e90:	e0bffc17 	ldw	r2,-16(fp)
   11e94:	10803017 	ldw	r2,192(r2)
   11e98:	e0fffc17 	ldw	r3,-16(fp)
   11e9c:	18c03017 	ldw	r3,192(r3)
   11ea0:	18c04303 	ldbu	r3,268(r3)
   11ea4:	1809883a 	mov	r4,r3
   11ea8:	e0fffe17 	ldw	r3,-8(fp)
   11eac:	18c05f43 	ldbu	r3,381(r3)
   11eb0:	18c03fcc 	andi	r3,r3,255
   11eb4:	180690fa 	slli	r3,r3,3
   11eb8:	20c6b03a 	or	r3,r4,r3
   11ebc:	10c04305 	stb	r3,268(r2)
	phy->pdata->port_ctrl.pp_conf[0] |= (init_param->two_t_two_r_timing_enable << 2);
   11ec0:	e0bffc17 	ldw	r2,-16(fp)
   11ec4:	10c03017 	ldw	r3,192(r2)
   11ec8:	e0bffc17 	ldw	r2,-16(fp)
   11ecc:	10803017 	ldw	r2,192(r2)
   11ed0:	10804303 	ldbu	r2,268(r2)
   11ed4:	1009883a 	mov	r4,r2
   11ed8:	e0bffe17 	ldw	r2,-8(fp)
   11edc:	10805f83 	ldbu	r2,382(r2)
   11ee0:	10803fcc 	andi	r2,r2,255
   11ee4:	1085883a 	add	r2,r2,r2
   11ee8:	1085883a 	add	r2,r2,r2
   11eec:	2084b03a 	or	r2,r4,r2
   11ef0:	18804305 	stb	r2,268(r3)
	phy->pdata->port_ctrl.pp_conf[0] |= (init_param->invert_data_bus_enable << 1);
   11ef4:	e0bffc17 	ldw	r2,-16(fp)
   11ef8:	10c03017 	ldw	r3,192(r2)
   11efc:	e0bffc17 	ldw	r2,-16(fp)
   11f00:	10803017 	ldw	r2,192(r2)
   11f04:	10804303 	ldbu	r2,268(r2)
   11f08:	1009883a 	mov	r4,r2
   11f0c:	e0bffe17 	ldw	r2,-8(fp)
   11f10:	10805fc3 	ldbu	r2,383(r2)
   11f14:	10803fcc 	andi	r2,r2,255
   11f18:	1085883a 	add	r2,r2,r2
   11f1c:	2084b03a 	or	r2,r4,r2
   11f20:	18804305 	stb	r2,268(r3)
	phy->pdata->port_ctrl.pp_conf[0] |= (init_param->invert_data_clk_enable << 0);
   11f24:	e0bffc17 	ldw	r2,-16(fp)
   11f28:	10803017 	ldw	r2,192(r2)
   11f2c:	e0fffc17 	ldw	r3,-16(fp)
   11f30:	18c03017 	ldw	r3,192(r3)
   11f34:	19004303 	ldbu	r4,268(r3)
   11f38:	e0fffe17 	ldw	r3,-8(fp)
   11f3c:	18c06003 	ldbu	r3,384(r3)
   11f40:	20c6b03a 	or	r3,r4,r3
   11f44:	10c04305 	stb	r3,268(r2)
	phy->pdata->port_ctrl.pp_conf[1] = (init_param->fdd_alt_word_order_enable << 7);
   11f48:	e0bffc17 	ldw	r2,-16(fp)
   11f4c:	10803017 	ldw	r2,192(r2)
   11f50:	e0fffe17 	ldw	r3,-8(fp)
   11f54:	18c06043 	ldbu	r3,385(r3)
   11f58:	180691fa 	slli	r3,r3,7
   11f5c:	10c04345 	stb	r3,269(r2)
	phy->pdata->port_ctrl.pp_conf[1] |= (init_param->invert_rx_frame_enable << 2);
   11f60:	e0bffc17 	ldw	r2,-16(fp)
   11f64:	10c03017 	ldw	r3,192(r2)
   11f68:	e0bffc17 	ldw	r2,-16(fp)
   11f6c:	10803017 	ldw	r2,192(r2)
   11f70:	10804343 	ldbu	r2,269(r2)
   11f74:	1009883a 	mov	r4,r2
   11f78:	e0bffe17 	ldw	r2,-8(fp)
   11f7c:	10806083 	ldbu	r2,386(r2)
   11f80:	10803fcc 	andi	r2,r2,255
   11f84:	1085883a 	add	r2,r2,r2
   11f88:	1085883a 	add	r2,r2,r2
   11f8c:	2084b03a 	or	r2,r4,r2
   11f90:	18804345 	stb	r2,269(r3)
	phy->pdata->port_ctrl.pp_conf[2] = (init_param->fdd_rx_rate_2tx_enable << 7);
   11f94:	e0bffc17 	ldw	r2,-16(fp)
   11f98:	10803017 	ldw	r2,192(r2)
   11f9c:	e0fffe17 	ldw	r3,-8(fp)
   11fa0:	18c060c3 	ldbu	r3,387(r3)
   11fa4:	180691fa 	slli	r3,r3,7
   11fa8:	10c04385 	stb	r3,270(r2)
	phy->pdata->port_ctrl.pp_conf[2] |= (init_param->swap_ports_enable << 6);
   11fac:	e0bffc17 	ldw	r2,-16(fp)
   11fb0:	10803017 	ldw	r2,192(r2)
   11fb4:	e0fffc17 	ldw	r3,-16(fp)
   11fb8:	18c03017 	ldw	r3,192(r3)
   11fbc:	18c04383 	ldbu	r3,270(r3)
   11fc0:	1809883a 	mov	r4,r3
   11fc4:	e0fffe17 	ldw	r3,-8(fp)
   11fc8:	18c06103 	ldbu	r3,388(r3)
   11fcc:	18c03fcc 	andi	r3,r3,255
   11fd0:	180691ba 	slli	r3,r3,6
   11fd4:	20c6b03a 	or	r3,r4,r3
   11fd8:	10c04385 	stb	r3,270(r2)
	phy->pdata->port_ctrl.pp_conf[2] |= (init_param->single_data_rate_enable << 5);
   11fdc:	e0bffc17 	ldw	r2,-16(fp)
   11fe0:	10803017 	ldw	r2,192(r2)
   11fe4:	e0fffc17 	ldw	r3,-16(fp)
   11fe8:	18c03017 	ldw	r3,192(r3)
   11fec:	18c04383 	ldbu	r3,270(r3)
   11ff0:	1809883a 	mov	r4,r3
   11ff4:	e0fffe17 	ldw	r3,-8(fp)
   11ff8:	18c06143 	ldbu	r3,389(r3)
   11ffc:	18c03fcc 	andi	r3,r3,255
   12000:	1806917a 	slli	r3,r3,5
   12004:	20c6b03a 	or	r3,r4,r3
   12008:	10c04385 	stb	r3,270(r2)
	phy->pdata->port_ctrl.pp_conf[2] |= (init_param->lvds_mode_enable << 4);
   1200c:	e0bffc17 	ldw	r2,-16(fp)
   12010:	10803017 	ldw	r2,192(r2)
   12014:	e0fffc17 	ldw	r3,-16(fp)
   12018:	18c03017 	ldw	r3,192(r3)
   1201c:	18c04383 	ldbu	r3,270(r3)
   12020:	1809883a 	mov	r4,r3
   12024:	e0fffe17 	ldw	r3,-8(fp)
   12028:	18c06183 	ldbu	r3,390(r3)
   1202c:	18c03fcc 	andi	r3,r3,255
   12030:	1806913a 	slli	r3,r3,4
   12034:	20c6b03a 	or	r3,r4,r3
   12038:	10c04385 	stb	r3,270(r2)
	phy->pdata->port_ctrl.pp_conf[2] |= (init_param->half_duplex_mode_enable << 3);
   1203c:	e0bffc17 	ldw	r2,-16(fp)
   12040:	10803017 	ldw	r2,192(r2)
   12044:	e0fffc17 	ldw	r3,-16(fp)
   12048:	18c03017 	ldw	r3,192(r3)
   1204c:	18c04383 	ldbu	r3,270(r3)
   12050:	1809883a 	mov	r4,r3
   12054:	e0fffe17 	ldw	r3,-8(fp)
   12058:	18c061c3 	ldbu	r3,391(r3)
   1205c:	18c03fcc 	andi	r3,r3,255
   12060:	180690fa 	slli	r3,r3,3
   12064:	20c6b03a 	or	r3,r4,r3
   12068:	10c04385 	stb	r3,270(r2)
	phy->pdata->port_ctrl.pp_conf[2] |= (init_param->single_port_mode_enable << 2);
   1206c:	e0bffc17 	ldw	r2,-16(fp)
   12070:	10c03017 	ldw	r3,192(r2)
   12074:	e0bffc17 	ldw	r2,-16(fp)
   12078:	10803017 	ldw	r2,192(r2)
   1207c:	10804383 	ldbu	r2,270(r2)
   12080:	1009883a 	mov	r4,r2
   12084:	e0bffe17 	ldw	r2,-8(fp)
   12088:	10806203 	ldbu	r2,392(r2)
   1208c:	10803fcc 	andi	r2,r2,255
   12090:	1085883a 	add	r2,r2,r2
   12094:	1085883a 	add	r2,r2,r2
   12098:	2084b03a 	or	r2,r4,r2
   1209c:	18804385 	stb	r2,270(r3)
	phy->pdata->port_ctrl.pp_conf[2] |= (init_param->full_port_enable << 1);
   120a0:	e0bffc17 	ldw	r2,-16(fp)
   120a4:	10c03017 	ldw	r3,192(r2)
   120a8:	e0bffc17 	ldw	r2,-16(fp)
   120ac:	10803017 	ldw	r2,192(r2)
   120b0:	10804383 	ldbu	r2,270(r2)
   120b4:	1009883a 	mov	r4,r2
   120b8:	e0bffe17 	ldw	r2,-8(fp)
   120bc:	10806243 	ldbu	r2,393(r2)
   120c0:	10803fcc 	andi	r2,r2,255
   120c4:	1085883a 	add	r2,r2,r2
   120c8:	2084b03a 	or	r2,r4,r2
   120cc:	18804385 	stb	r2,270(r3)
	phy->pdata->port_ctrl.pp_conf[2] |= (init_param->full_duplex_swap_bits_enable << 0);
   120d0:	e0bffc17 	ldw	r2,-16(fp)
   120d4:	10803017 	ldw	r2,192(r2)
   120d8:	e0fffc17 	ldw	r3,-16(fp)
   120dc:	18c03017 	ldw	r3,192(r3)
   120e0:	19004383 	ldbu	r4,270(r3)
   120e4:	e0fffe17 	ldw	r3,-8(fp)
   120e8:	18c06283 	ldbu	r3,394(r3)
   120ec:	20c6b03a 	or	r3,r4,r3
   120f0:	10c04385 	stb	r3,270(r2)
	phy->pdata->port_ctrl.pp_conf[1] |= (init_param->delay_rx_data & 0x3);
   120f4:	e0bffc17 	ldw	r2,-16(fp)
   120f8:	10803017 	ldw	r2,192(r2)
   120fc:	e0fffc17 	ldw	r3,-16(fp)
   12100:	18c03017 	ldw	r3,192(r3)
   12104:	18c04343 	ldbu	r3,269(r3)
   12108:	e13ffe17 	ldw	r4,-8(fp)
   1210c:	21006317 	ldw	r4,396(r4)
   12110:	210000cc 	andi	r4,r4,3
   12114:	1906b03a 	or	r3,r3,r4
   12118:	10c04345 	stb	r3,269(r2)
	phy->pdata->port_ctrl.rx_clk_data_delay = DATA_CLK_DELAY(init_param->rx_data_clock_delay);
   1211c:	e0bffc17 	ldw	r2,-16(fp)
   12120:	10803017 	ldw	r2,192(r2)
   12124:	e0fffe17 	ldw	r3,-8(fp)
   12128:	18c06417 	ldw	r3,400(r3)
   1212c:	1806913a 	slli	r3,r3,4
   12130:	10c043c5 	stb	r3,271(r2)
	phy->pdata->port_ctrl.rx_clk_data_delay |= RX_DATA_DELAY(init_param->rx_data_delay);
   12134:	e0bffc17 	ldw	r2,-16(fp)
   12138:	10803017 	ldw	r2,192(r2)
   1213c:	e0fffc17 	ldw	r3,-16(fp)
   12140:	18c03017 	ldw	r3,192(r3)
   12144:	18c043c3 	ldbu	r3,271(r3)
   12148:	e13ffe17 	ldw	r4,-8(fp)
   1214c:	21006517 	ldw	r4,404(r4)
   12150:	210003cc 	andi	r4,r4,15
   12154:	1906b03a 	or	r3,r3,r4
   12158:	10c043c5 	stb	r3,271(r2)
	phy->pdata->port_ctrl.tx_clk_data_delay = FB_CLK_DELAY(init_param->tx_fb_clock_delay);
   1215c:	e0bffc17 	ldw	r2,-16(fp)
   12160:	10803017 	ldw	r2,192(r2)
   12164:	e0fffe17 	ldw	r3,-8(fp)
   12168:	18c06617 	ldw	r3,408(r3)
   1216c:	1806913a 	slli	r3,r3,4
   12170:	10c04405 	stb	r3,272(r2)
	phy->pdata->port_ctrl.tx_clk_data_delay |= TX_DATA_DELAY(init_param->tx_data_delay);
   12174:	e0bffc17 	ldw	r2,-16(fp)
   12178:	10803017 	ldw	r2,192(r2)
   1217c:	e0fffc17 	ldw	r3,-16(fp)
   12180:	18c03017 	ldw	r3,192(r3)
   12184:	18c04403 	ldbu	r3,272(r3)
   12188:	e13ffe17 	ldw	r4,-8(fp)
   1218c:	21006717 	ldw	r4,412(r4)
   12190:	210003cc 	andi	r4,r4,15
   12194:	1906b03a 	or	r3,r3,r4
   12198:	10c04405 	stb	r3,272(r2)
	phy->pdata->port_ctrl.lvds_bias_ctrl = (init_param->lvds_bias_mV / 75) & 0x7;
   1219c:	e0bffc17 	ldw	r2,-16(fp)
   121a0:	14003017 	ldw	r16,192(r2)
   121a4:	e0bffe17 	ldw	r2,-8(fp)
   121a8:	10806817 	ldw	r2,416(r2)
   121ac:	1009883a 	mov	r4,r2
   121b0:	014012c4 	movi	r5,75
   121b4:	001d7a40 	call	1d7a4 <__udivsi3>
   121b8:	108001cc 	andi	r2,r2,7
   121bc:	80804485 	stb	r2,274(r16)
	phy->pdata->port_ctrl.lvds_bias_ctrl |= (init_param->lvds_rx_onchip_termination_enable << 5);
   121c0:	e0bffc17 	ldw	r2,-16(fp)
   121c4:	10803017 	ldw	r2,192(r2)
   121c8:	e0fffc17 	ldw	r3,-16(fp)
   121cc:	18c03017 	ldw	r3,192(r3)
   121d0:	18c04483 	ldbu	r3,274(r3)
   121d4:	1809883a 	mov	r4,r3
   121d8:	e0fffe17 	ldw	r3,-8(fp)
   121dc:	18c06903 	ldbu	r3,420(r3)
   121e0:	18c03fcc 	andi	r3,r3,255
   121e4:	1806917a 	slli	r3,r3,5
   121e8:	20c6b03a 	or	r3,r4,r3
   121ec:	10c04485 	stb	r3,274(r2)
	phy->pdata->rx1rx2_phase_inversion_en = init_param->rx1rx2_phase_inversion_en;
   121f0:	e0bffc17 	ldw	r2,-16(fp)
   121f4:	10803017 	ldw	r2,192(r2)
   121f8:	e0fffe17 	ldw	r3,-8(fp)
   121fc:	18c06943 	ldbu	r3,421(r3)
   12200:	18c03fcc 	andi	r3,r3,255
   12204:	1806c03a 	cmpne	r3,r3,zero
   12208:	10c00345 	stb	r3,13(r2)

	/* GPO Control */
	phy->pdata->gpo_ctrl.gpo0_inactive_state_high_en = init_param->gpo0_inactive_state_high_enable;
   1220c:	e0bffc17 	ldw	r2,-16(fp)
   12210:	10803017 	ldw	r2,192(r2)
   12214:	e0fffe17 	ldw	r3,-8(fp)
   12218:	18c06a03 	ldbu	r3,424(r3)
   1221c:	18c03fcc 	andi	r3,r3,255
   12220:	1806c03a 	cmpne	r3,r3,zero
   12224:	10c05305 	stb	r3,332(r2)
	phy->pdata->gpo_ctrl.gpo1_inactive_state_high_en = init_param->gpo1_inactive_state_high_enable;
   12228:	e0bffc17 	ldw	r2,-16(fp)
   1222c:	10803017 	ldw	r2,192(r2)
   12230:	e0fffe17 	ldw	r3,-8(fp)
   12234:	18c06a43 	ldbu	r3,425(r3)
   12238:	18c03fcc 	andi	r3,r3,255
   1223c:	1806c03a 	cmpne	r3,r3,zero
   12240:	10c05345 	stb	r3,333(r2)
	phy->pdata->gpo_ctrl.gpo2_inactive_state_high_en = init_param->gpo2_inactive_state_high_enable;
   12244:	e0bffc17 	ldw	r2,-16(fp)
   12248:	10803017 	ldw	r2,192(r2)
   1224c:	e0fffe17 	ldw	r3,-8(fp)
   12250:	18c06a83 	ldbu	r3,426(r3)
   12254:	18c03fcc 	andi	r3,r3,255
   12258:	1806c03a 	cmpne	r3,r3,zero
   1225c:	10c05385 	stb	r3,334(r2)
	phy->pdata->gpo_ctrl.gpo3_inactive_state_high_en = init_param->gpo3_inactive_state_high_enable;
   12260:	e0bffc17 	ldw	r2,-16(fp)
   12264:	10803017 	ldw	r2,192(r2)
   12268:	e0fffe17 	ldw	r3,-8(fp)
   1226c:	18c06ac3 	ldbu	r3,427(r3)
   12270:	18c03fcc 	andi	r3,r3,255
   12274:	1806c03a 	cmpne	r3,r3,zero
   12278:	10c053c5 	stb	r3,335(r2)

	phy->pdata->gpo_ctrl.gpo0_slave_rx_en = init_param->gpo0_slave_rx_enable;
   1227c:	e0bffc17 	ldw	r2,-16(fp)
   12280:	10803017 	ldw	r2,192(r2)
   12284:	e0fffe17 	ldw	r3,-8(fp)
   12288:	18c06b03 	ldbu	r3,428(r3)
   1228c:	18c03fcc 	andi	r3,r3,255
   12290:	1806c03a 	cmpne	r3,r3,zero
   12294:	10c05405 	stb	r3,336(r2)
	phy->pdata->gpo_ctrl.gpo0_slave_tx_en = init_param->gpo0_slave_tx_enable;
   12298:	e0bffc17 	ldw	r2,-16(fp)
   1229c:	10803017 	ldw	r2,192(r2)
   122a0:	e0fffe17 	ldw	r3,-8(fp)
   122a4:	18c06b43 	ldbu	r3,429(r3)
   122a8:	18c03fcc 	andi	r3,r3,255
   122ac:	1806c03a 	cmpne	r3,r3,zero
   122b0:	10c05445 	stb	r3,337(r2)
	phy->pdata->gpo_ctrl.gpo1_slave_rx_en = init_param->gpo1_slave_rx_enable;
   122b4:	e0bffc17 	ldw	r2,-16(fp)
   122b8:	10803017 	ldw	r2,192(r2)
   122bc:	e0fffe17 	ldw	r3,-8(fp)
   122c0:	18c06b83 	ldbu	r3,430(r3)
   122c4:	18c03fcc 	andi	r3,r3,255
   122c8:	1806c03a 	cmpne	r3,r3,zero
   122cc:	10c05485 	stb	r3,338(r2)
	phy->pdata->gpo_ctrl.gpo1_slave_tx_en = init_param->gpo1_slave_tx_enable;
   122d0:	e0bffc17 	ldw	r2,-16(fp)
   122d4:	10803017 	ldw	r2,192(r2)
   122d8:	e0fffe17 	ldw	r3,-8(fp)
   122dc:	18c06bc3 	ldbu	r3,431(r3)
   122e0:	18c03fcc 	andi	r3,r3,255
   122e4:	1806c03a 	cmpne	r3,r3,zero
   122e8:	10c054c5 	stb	r3,339(r2)
	phy->pdata->gpo_ctrl.gpo2_slave_rx_en = init_param->gpo2_slave_rx_enable;
   122ec:	e0bffc17 	ldw	r2,-16(fp)
   122f0:	10803017 	ldw	r2,192(r2)
   122f4:	e0fffe17 	ldw	r3,-8(fp)
   122f8:	18c06c03 	ldbu	r3,432(r3)
   122fc:	18c03fcc 	andi	r3,r3,255
   12300:	1806c03a 	cmpne	r3,r3,zero
   12304:	10c05505 	stb	r3,340(r2)
	phy->pdata->gpo_ctrl.gpo2_slave_tx_en = init_param->gpo2_slave_tx_enable;
   12308:	e0bffc17 	ldw	r2,-16(fp)
   1230c:	10803017 	ldw	r2,192(r2)
   12310:	e0fffe17 	ldw	r3,-8(fp)
   12314:	18c06c43 	ldbu	r3,433(r3)
   12318:	18c03fcc 	andi	r3,r3,255
   1231c:	1806c03a 	cmpne	r3,r3,zero
   12320:	10c05545 	stb	r3,341(r2)
	phy->pdata->gpo_ctrl.gpo3_slave_rx_en = init_param->gpo3_slave_rx_enable;
   12324:	e0bffc17 	ldw	r2,-16(fp)
   12328:	10803017 	ldw	r2,192(r2)
   1232c:	e0fffe17 	ldw	r3,-8(fp)
   12330:	18c06c83 	ldbu	r3,434(r3)
   12334:	18c03fcc 	andi	r3,r3,255
   12338:	1806c03a 	cmpne	r3,r3,zero
   1233c:	10c05585 	stb	r3,342(r2)
	phy->pdata->gpo_ctrl.gpo3_slave_tx_en = init_param->gpo3_slave_tx_enable;
   12340:	e0bffc17 	ldw	r2,-16(fp)
   12344:	10803017 	ldw	r2,192(r2)
   12348:	e0fffe17 	ldw	r3,-8(fp)
   1234c:	18c06cc3 	ldbu	r3,435(r3)
   12350:	18c03fcc 	andi	r3,r3,255
   12354:	1806c03a 	cmpne	r3,r3,zero
   12358:	10c055c5 	stb	r3,343(r2)

	phy->pdata->gpo_ctrl.gpo0_rx_delay_us = init_param->gpo0_rx_delay_us;
   1235c:	e0bffc17 	ldw	r2,-16(fp)
   12360:	10803017 	ldw	r2,192(r2)
   12364:	e0fffe17 	ldw	r3,-8(fp)
   12368:	18c06d03 	ldbu	r3,436(r3)
   1236c:	10c05605 	stb	r3,344(r2)
	phy->pdata->gpo_ctrl.gpo0_tx_delay_us = init_param->gpo0_tx_delay_us;
   12370:	e0bffc17 	ldw	r2,-16(fp)
   12374:	10803017 	ldw	r2,192(r2)
   12378:	e0fffe17 	ldw	r3,-8(fp)
   1237c:	18c06d43 	ldbu	r3,437(r3)
   12380:	10c05645 	stb	r3,345(r2)
	phy->pdata->gpo_ctrl.gpo1_rx_delay_us = init_param->gpo1_rx_delay_us;
   12384:	e0bffc17 	ldw	r2,-16(fp)
   12388:	10803017 	ldw	r2,192(r2)
   1238c:	e0fffe17 	ldw	r3,-8(fp)
   12390:	18c06d83 	ldbu	r3,438(r3)
   12394:	10c05685 	stb	r3,346(r2)
	phy->pdata->gpo_ctrl.gpo1_tx_delay_us = init_param->gpo1_tx_delay_us;
   12398:	e0bffc17 	ldw	r2,-16(fp)
   1239c:	10803017 	ldw	r2,192(r2)
   123a0:	e0fffe17 	ldw	r3,-8(fp)
   123a4:	18c06dc3 	ldbu	r3,439(r3)
   123a8:	10c056c5 	stb	r3,347(r2)
	phy->pdata->gpo_ctrl.gpo2_rx_delay_us = init_param->gpo2_rx_delay_us;
   123ac:	e0bffc17 	ldw	r2,-16(fp)
   123b0:	10803017 	ldw	r2,192(r2)
   123b4:	e0fffe17 	ldw	r3,-8(fp)
   123b8:	18c06e03 	ldbu	r3,440(r3)
   123bc:	10c05705 	stb	r3,348(r2)
	phy->pdata->gpo_ctrl.gpo2_tx_delay_us = init_param->gpo2_tx_delay_us;
   123c0:	e0bffc17 	ldw	r2,-16(fp)
   123c4:	10803017 	ldw	r2,192(r2)
   123c8:	e0fffe17 	ldw	r3,-8(fp)
   123cc:	18c06e43 	ldbu	r3,441(r3)
   123d0:	10c05745 	stb	r3,349(r2)
	phy->pdata->gpo_ctrl.gpo3_rx_delay_us = init_param->gpo3_rx_delay_us;
   123d4:	e0bffc17 	ldw	r2,-16(fp)
   123d8:	10803017 	ldw	r2,192(r2)
   123dc:	e0fffe17 	ldw	r3,-8(fp)
   123e0:	18c06e83 	ldbu	r3,442(r3)
   123e4:	10c05785 	stb	r3,350(r2)
	phy->pdata->gpo_ctrl.gpo3_tx_delay_us = init_param->gpo3_tx_delay_us;
   123e8:	e0bffc17 	ldw	r2,-16(fp)
   123ec:	10803017 	ldw	r2,192(r2)
   123f0:	e0fffe17 	ldw	r3,-8(fp)
   123f4:	18c06ec3 	ldbu	r3,443(r3)
   123f8:	10c057c5 	stb	r3,351(r2)

	/* Tx Monitor Control */
	phy->pdata->txmon_ctrl.low_high_gain_threshold_mdB = init_param->low_high_gain_threshold_mdB;
   123fc:	e0bffc17 	ldw	r2,-16(fp)
   12400:	10803017 	ldw	r2,192(r2)
   12404:	e0fffe17 	ldw	r3,-8(fp)
   12408:	18c06f17 	ldw	r3,444(r3)
   1240c:	10c05915 	stw	r3,356(r2)
	phy->pdata->txmon_ctrl.low_gain_dB = init_param->low_gain_dB;
   12410:	e0bffc17 	ldw	r2,-16(fp)
   12414:	10803017 	ldw	r2,192(r2)
   12418:	e0fffe17 	ldw	r3,-8(fp)
   1241c:	18c07017 	ldw	r3,448(r3)
   12420:	10c05a05 	stb	r3,360(r2)
	phy->pdata->txmon_ctrl.high_gain_dB = init_param->high_gain_dB;
   12424:	e0bffc17 	ldw	r2,-16(fp)
   12428:	10803017 	ldw	r2,192(r2)
   1242c:	e0fffe17 	ldw	r3,-8(fp)
   12430:	18c07117 	ldw	r3,452(r3)
   12434:	10c05a45 	stb	r3,361(r2)
	phy->pdata->txmon_ctrl.tx_mon_track_en = init_param->tx_mon_track_en;
   12438:	e0bffc17 	ldw	r2,-16(fp)
   1243c:	10803017 	ldw	r2,192(r2)
   12440:	e0fffe17 	ldw	r3,-8(fp)
   12444:	18c07203 	ldbu	r3,456(r3)
   12448:	18c03fcc 	andi	r3,r3,255
   1244c:	1806c03a 	cmpne	r3,r3,zero
   12450:	10c05805 	stb	r3,352(r2)
	phy->pdata->txmon_ctrl.one_shot_mode_en = init_param->one_shot_mode_en;
   12454:	e0bffc17 	ldw	r2,-16(fp)
   12458:	10803017 	ldw	r2,192(r2)
   1245c:	e0fffe17 	ldw	r3,-8(fp)
   12460:	18c07243 	ldbu	r3,457(r3)
   12464:	18c03fcc 	andi	r3,r3,255
   12468:	1806c03a 	cmpne	r3,r3,zero
   1246c:	10c05845 	stb	r3,353(r2)
	phy->pdata->txmon_ctrl.tx_mon_delay = init_param->tx_mon_delay;
   12470:	e0bffc17 	ldw	r2,-16(fp)
   12474:	10803017 	ldw	r2,192(r2)
   12478:	e0fffe17 	ldw	r3,-8(fp)
   1247c:	18c07317 	ldw	r3,460(r3)
   12480:	10c05a8d 	sth	r3,362(r2)
	phy->pdata->txmon_ctrl.tx_mon_duration = init_param->tx_mon_duration;
   12484:	e0bffc17 	ldw	r2,-16(fp)
   12488:	10803017 	ldw	r2,192(r2)
   1248c:	e0fffe17 	ldw	r3,-8(fp)
   12490:	18c07417 	ldw	r3,464(r3)
   12494:	10c05b0d 	sth	r3,364(r2)
	phy->pdata->txmon_ctrl.tx1_mon_front_end_gain = init_param->tx1_mon_front_end_gain;
   12498:	e0bffc17 	ldw	r2,-16(fp)
   1249c:	10803017 	ldw	r2,192(r2)
   124a0:	e0fffe17 	ldw	r3,-8(fp)
   124a4:	18c07517 	ldw	r3,468(r3)
   124a8:	10c05b85 	stb	r3,366(r2)
	phy->pdata->txmon_ctrl.tx2_mon_front_end_gain = init_param->tx2_mon_front_end_gain;
   124ac:	e0bffc17 	ldw	r2,-16(fp)
   124b0:	10803017 	ldw	r2,192(r2)
   124b4:	e0fffe17 	ldw	r3,-8(fp)
   124b8:	18c07617 	ldw	r3,472(r3)
   124bc:	10c05bc5 	stb	r3,367(r2)
	phy->pdata->txmon_ctrl.tx1_mon_lo_cm = init_param->tx1_mon_lo_cm;
   124c0:	e0bffc17 	ldw	r2,-16(fp)
   124c4:	10803017 	ldw	r2,192(r2)
   124c8:	e0fffe17 	ldw	r3,-8(fp)
   124cc:	18c07717 	ldw	r3,476(r3)
   124d0:	10c05c05 	stb	r3,368(r2)
	phy->pdata->txmon_ctrl.tx2_mon_lo_cm = init_param->tx2_mon_lo_cm;
   124d4:	e0bffc17 	ldw	r2,-16(fp)
   124d8:	10803017 	ldw	r2,192(r2)
   124dc:	e0fffe17 	ldw	r3,-8(fp)
   124e0:	18c07817 	ldw	r3,480(r3)
   124e4:	10c05c45 	stb	r3,369(r2)

	phy->pdata->debug_mode = true;
   124e8:	e0bffc17 	ldw	r2,-16(fp)
   124ec:	10803017 	ldw	r2,192(r2)
   124f0:	00c00044 	movi	r3,1
   124f4:	10c001c5 	stb	r3,7(r2)
	phy->pdata->gpio_resetb = init_param->gpio_resetb;
   124f8:	e0bffc17 	ldw	r2,-16(fp)
   124fc:	10803017 	ldw	r2,192(r2)
   12500:	e0fffe17 	ldw	r3,-8(fp)
   12504:	18c07917 	ldw	r3,484(r3)
   12508:	10c05d15 	stw	r3,372(r2)
	/* Optional: next three GPIOs are used for MCS synchronization */
	phy->pdata->gpio_sync = init_param->gpio_sync;
   1250c:	e0bffc17 	ldw	r2,-16(fp)
   12510:	10803017 	ldw	r2,192(r2)
   12514:	e0fffe17 	ldw	r3,-8(fp)
   12518:	18c07a17 	ldw	r3,488(r3)
   1251c:	10c05e15 	stw	r3,376(r2)
	phy->pdata->gpio_cal_sw1 = init_param->gpio_cal_sw1;
   12520:	e0bffc17 	ldw	r2,-16(fp)
   12524:	10803017 	ldw	r2,192(r2)
   12528:	e0fffe17 	ldw	r3,-8(fp)
   1252c:	18c07b17 	ldw	r3,492(r3)
   12530:	10c05f15 	stw	r3,380(r2)
	phy->pdata->gpio_cal_sw2 = init_param->gpio_cal_sw2;
   12534:	e0bffc17 	ldw	r2,-16(fp)
   12538:	10803017 	ldw	r2,192(r2)
   1253c:	e0fffe17 	ldw	r3,-8(fp)
   12540:	18c07c17 	ldw	r3,496(r3)
   12544:	10c06015 	stw	r3,384(r2)

	phy->pdata->port_ctrl.digital_io_ctrl = 0;
   12548:	e0bffc17 	ldw	r2,-16(fp)
   1254c:	10803017 	ldw	r2,192(r2)
   12550:	10004445 	stb	zero,273(r2)
	phy->pdata->port_ctrl.lvds_invert[0] = init_param->lvds_invert1_control;
   12554:	e0bffc17 	ldw	r2,-16(fp)
   12558:	10803017 	ldw	r2,192(r2)
   1255c:	e0fffe17 	ldw	r3,-8(fp)
   12560:	18c06983 	ldbu	r3,422(r3)
   12564:	10c044c5 	stb	r3,275(r2)
	phy->pdata->port_ctrl.lvds_invert[1] = init_param->lvds_invert2_control;
   12568:	e0bffc17 	ldw	r2,-16(fp)
   1256c:	10803017 	ldw	r2,192(r2)
   12570:	e0fffe17 	ldw	r3,-8(fp)
   12574:	18c069c3 	ldbu	r3,423(r3)
   12578:	10c04505 	stb	r3,276(r2)

#ifndef AXI_ADC_NOT_PRESENT
	phy->adc_conv->chip_info = &axiadc_chip_info_tbl[phy->pdata->rx2tx2 ? ID_AD9361 : ID_AD9364];
   1257c:	e0bffc17 	ldw	r2,-16(fp)
   12580:	10c06f17 	ldw	r3,444(r2)
   12584:	e0bffc17 	ldw	r2,-16(fp)
   12588:	10803017 	ldw	r2,192(r2)
   1258c:	10800003 	ldbu	r2,0(r2)
   12590:	10803fcc 	andi	r2,r2,255
   12594:	10000226 	beq	r2,zero,125a0 <ad9361_init+0x15d4>
   12598:	0005883a 	mov	r2,zero
   1259c:	00000106 	br	125a4 <ad9361_init+0x15d8>
   125a0:	00800044 	movi	r2,1
   125a4:	11000324 	muli	r4,r2,12
   125a8:	008000f4 	movhi	r2,3
   125ac:	10a5e204 	addi	r2,r2,-26744
   125b0:	2085883a 	add	r2,r4,r2
   125b4:	18800015 	stw	r2,0(r3)
#endif

	phy->rx_eq_2tx = false;
   125b8:	e0bffc17 	ldw	r2,-16(fp)
   125bc:	10004f85 	stb	zero,318(r2)

	phy->current_table = RXGAIN_TBLS_END;
   125c0:	e0bffc17 	ldw	r2,-16(fp)
   125c4:	00c000c4 	movi	r3,3
   125c8:	10c04415 	stw	r3,272(r2)
	phy->bypass_tx_fir = true;
   125cc:	e0bffc17 	ldw	r2,-16(fp)
   125d0:	00c00044 	movi	r3,1
   125d4:	10c04f45 	stb	r3,317(r2)
	phy->bypass_rx_fir = true;
   125d8:	e0bffc17 	ldw	r2,-16(fp)
   125dc:	00c00044 	movi	r3,1
   125e0:	10c04f05 	stb	r3,316(r2)
	phy->rate_governor = 1;
   125e4:	e0bffc17 	ldw	r2,-16(fp)
   125e8:	00c00044 	movi	r3,1
   125ec:	10c04e15 	stw	r3,312(r2)
	phy->rfdc_track_en = true;
   125f0:	e0bffc17 	ldw	r2,-16(fp)
   125f4:	00c00044 	movi	r3,1
   125f8:	10c05f85 	stb	r3,382(r2)
	phy->bbdc_track_en = true;
   125fc:	e0bffc17 	ldw	r2,-16(fp)
   12600:	00c00044 	movi	r3,1
   12604:	10c05fc5 	stb	r3,383(r2)
	phy->quad_track_en = true;
   12608:	e0bffc17 	ldw	r2,-16(fp)
   1260c:	00c00044 	movi	r3,1
   12610:	10c06005 	stb	r3,384(r2)

	phy->bist_loopback_mode = 0;
   12614:	e0bffc17 	ldw	r2,-16(fp)
   12618:	10007115 	stw	zero,452(r2)
	phy->bist_prbs_mode = BIST_DISABLE;
   1261c:	e0bffc17 	ldw	r2,-16(fp)
   12620:	10007215 	stw	zero,456(r2)
	phy->bist_tone_mode = BIST_DISABLE;
   12624:	e0bffc17 	ldw	r2,-16(fp)
   12628:	10007315 	stw	zero,460(r2)
	phy->bist_tone_freq_Hz = 0;
   1262c:	e0bffc17 	ldw	r2,-16(fp)
   12630:	10007415 	stw	zero,464(r2)
	phy->bist_tone_level_dB = 0;
   12634:	e0bffc17 	ldw	r2,-16(fp)
   12638:	10007515 	stw	zero,468(r2)
	phy->bist_tone_mask = 0;
   1263c:	e0bffc17 	ldw	r2,-16(fp)
   12640:	10007615 	stw	zero,472(r2)

	ad9361_reset(phy);
   12644:	e13ffc17 	ldw	r4,-16(fp)
   12648:	00006980 	call	698 <ad9361_reset>

	ret = ad9361_spi_read(phy->spi, REG_PRODUCT_ID);
   1264c:	e0bffc17 	ldw	r2,-16(fp)
   12650:	10800117 	ldw	r2,4(r2)
   12654:	1009883a 	mov	r4,r2
   12658:	01400dc4 	movi	r5,55
   1265c:	00001500 	call	150 <ad9361_spi_read>
   12660:	e0bffa15 	stw	r2,-24(fp)
	if ((ret & PRODUCT_ID_MASK) != PRODUCT_ID_9361) {
   12664:	e0bffa17 	ldw	r2,-24(fp)
   12668:	10803e0c 	andi	r2,r2,248
   1266c:	10800220 	cmpeqi	r2,r2,8
   12670:	10000a1e 	bne	r2,zero,1269c <ad9361_init+0x16d0>
		printf("%s : Unsupported PRODUCT_ID 0x%X\n", "ad9361_init", (unsigned int)ret);
   12674:	e0bffa17 	ldw	r2,-24(fp)
   12678:	010000b4 	movhi	r4,2
   1267c:	211fdd04 	addi	r4,r4,32628
   12680:	014000b4 	movhi	r5,2
   12684:	295fe604 	addi	r5,r5,32664
   12688:	100d883a 	mov	r6,r2
   1268c:	001f8180 	call	1f818 <printf>
		ret = -ENODEV;
   12690:	00bffb44 	movi	r2,-19
   12694:	e0bffa15 	stw	r2,-24(fp)
		goto out;
   12698:	00003806 	br	1277c <ad9361_init+0x17b0>
	}
	rev = ret & REV_MASK;
   1269c:	e0bffa17 	ldw	r2,-24(fp)
   126a0:	108001cc 	andi	r2,r2,7
   126a4:	e0bffb15 	stw	r2,-20(fp)
		phy->pdata->rx2tx2 = false;
		phy->pdata->rx1tx1_mode_use_rx_num = 1;
		phy->pdata->rx1tx1_mode_use_tx_num = 1;
	}

	phy->ad9361_rfpll_ext_recalc_rate = init_param->ad9361_rfpll_ext_recalc_rate;
   126a8:	e0bffe17 	ldw	r2,-8(fp)
   126ac:	10c07d17 	ldw	r3,500(r2)
   126b0:	e0bffc17 	ldw	r2,-16(fp)
   126b4:	10c02d15 	stw	r3,180(r2)
	phy->ad9361_rfpll_ext_round_rate = init_param->ad9361_rfpll_ext_round_rate;
   126b8:	e0bffe17 	ldw	r2,-8(fp)
   126bc:	10c07e17 	ldw	r3,504(r2)
   126c0:	e0bffc17 	ldw	r2,-16(fp)
   126c4:	10c02e15 	stw	r3,184(r2)
	phy->ad9361_rfpll_ext_set_rate = init_param->ad9361_rfpll_ext_set_rate;
   126c8:	e0bffe17 	ldw	r2,-8(fp)
   126cc:	10c07f17 	ldw	r3,508(r2)
   126d0:	e0bffc17 	ldw	r2,-16(fp)
   126d4:	10c02f15 	stw	r3,188(r2)

	ret = register_clocks(phy);
   126d8:	e13ffc17 	ldw	r4,-16(fp)
   126dc:	00105580 	call	10558 <register_clocks>
   126e0:	e0bffa15 	stw	r2,-24(fp)
	if (ret < 0)
   126e4:	e0bffa17 	ldw	r2,-24(fp)
   126e8:	1000010e 	bge	r2,zero,126f0 <ad9361_init+0x1724>
		goto out;
   126ec:	00002306 	br	1277c <ad9361_init+0x17b0>

#ifndef AXI_ADC_NOT_PRESENT
	axiadc_init(phy);
   126f0:	e13ffc17 	ldw	r4,-16(fp)
   126f4:	001b9580 	call	1b958 <axiadc_init>
	phy->adc_state->pcore_version = axiadc_read(phy->adc_state, ADI_REG_VERSION);
   126f8:	e0bffc17 	ldw	r2,-16(fp)
   126fc:	14007017 	ldw	r16,448(r2)
   12700:	e0bffc17 	ldw	r2,-16(fp)
   12704:	10807017 	ldw	r2,448(r2)
   12708:	1009883a 	mov	r4,r2
   1270c:	000b883a 	mov	r5,zero
   12710:	001b9d00 	call	1b9d0 <axiadc_read>
   12714:	80800115 	stw	r2,4(r16)
#endif

	ad9361_init_gain_tables(phy);
   12718:	e13ffc17 	ldw	r4,-16(fp)
   1271c:	0002ddc0 	call	2ddc <ad9361_init_gain_tables>

	ret = ad9361_setup(phy);
   12720:	e13ffc17 	ldw	r4,-16(fp)
   12724:	000bd2c0 	call	bd2c <ad9361_setup>
   12728:	e0bffa15 	stw	r2,-24(fp)
	if (ret < 0)
   1272c:	e0bffa17 	ldw	r2,-24(fp)
   12730:	1000010e 	bge	r2,zero,12738 <ad9361_init+0x176c>
		goto out;
   12734:	00001106 	br	1277c <ad9361_init+0x17b0>

#ifndef AXI_ADC_NOT_PRESENT
	/* platform specific wrapper to call ad9361_post_setup() */
	ret = axiadc_post_setup(phy);
   12738:	e13ffc17 	ldw	r4,-16(fp)
   1273c:	001b9980 	call	1b998 <axiadc_post_setup>
   12740:	e0bffa15 	stw	r2,-24(fp)
	if (ret < 0)
   12744:	e0bffa17 	ldw	r2,-24(fp)
   12748:	1000010e 	bge	r2,zero,12750 <ad9361_init+0x1784>
		goto out;
   1274c:	00000b06 	br	1277c <ad9361_init+0x17b0>
#endif

	printf("%s : AD9361 Rev %d successfully initialized\n", "ad9361_init", (int)rev);
   12750:	010000b4 	movhi	r4,2
   12754:	211fe904 	addi	r4,r4,32676
   12758:	014000b4 	movhi	r5,2
   1275c:	295fe604 	addi	r5,r5,32664
   12760:	e1bffb17 	ldw	r6,-20(fp)
   12764:	001f8180 	call	1f818 <printf>

	*ad9361_phy = phy;
   12768:	e0bffd17 	ldw	r2,-12(fp)
   1276c:	e0fffc17 	ldw	r3,-16(fp)
   12770:	10c00015 	stw	r3,0(r2)

	return 0;
   12774:	0005883a 	mov	r2,zero
   12778:	00001c06 	br	127ec <ad9361_init+0x1820>

out:
	free(phy->spi);
   1277c:	e0bffc17 	ldw	r2,-16(fp)
   12780:	10800117 	ldw	r2,4(r2)
   12784:	1009883a 	mov	r4,r2
   12788:	001f5100 	call	1f510 <free>
#ifndef AXI_ADC_NOT_PRESENT
	free(phy->adc_conv);
   1278c:	e0bffc17 	ldw	r2,-16(fp)
   12790:	10806f17 	ldw	r2,444(r2)
   12794:	1009883a 	mov	r4,r2
   12798:	001f5100 	call	1f510 <free>
	free(phy->adc_state);
   1279c:	e0bffc17 	ldw	r2,-16(fp)
   127a0:	10807017 	ldw	r2,448(r2)
   127a4:	1009883a 	mov	r4,r2
   127a8:	001f5100 	call	1f510 <free>
#endif
	free(phy->clk_refin);
   127ac:	e0bffc17 	ldw	r2,-16(fp)
   127b0:	10800217 	ldw	r2,8(r2)
   127b4:	1009883a 	mov	r4,r2
   127b8:	001f5100 	call	1f510 <free>
	free(phy->pdata);
   127bc:	e0bffc17 	ldw	r2,-16(fp)
   127c0:	10803017 	ldw	r2,192(r2)
   127c4:	1009883a 	mov	r4,r2
   127c8:	001f5100 	call	1f510 <free>
	free(phy);
   127cc:	e13ffc17 	ldw	r4,-16(fp)
   127d0:	001f5100 	call	1f510 <free>
	printf("%s : AD9361 initialization error\n", "ad9361_init");
   127d4:	010000b4 	movhi	r4,2
   127d8:	211ff504 	addi	r4,r4,32724
   127dc:	014000b4 	movhi	r5,2
   127e0:	295fe604 	addi	r5,r5,32664
   127e4:	001f8180 	call	1f818 <printf>

	return -ENODEV;
   127e8:	00bffb44 	movi	r2,-19
}
   127ec:	e6ffff04 	addi	sp,fp,-4
   127f0:	dfc00217 	ldw	ra,8(sp)
   127f4:	df000117 	ldw	fp,4(sp)
   127f8:	dc000017 	ldw	r16,0(sp)
   127fc:	dec00304 	addi	sp,sp,12
   12800:	f800283a 	ret

00012804 <ad9361_set_en_state_machine_mode>:
 *
 * Note: This function will/may affect the data path.
 */
int32_t ad9361_set_en_state_machine_mode (struct ad9361_rf_phy *phy,
										  uint32_t mode)
{
   12804:	defffa04 	addi	sp,sp,-24
   12808:	de00012e 	bgeu	sp,et,12810 <ad9361_set_en_state_machine_mode+0xc>
   1280c:	003b68fa 	trap	3
   12810:	dfc00515 	stw	ra,20(sp)
   12814:	df000415 	stw	fp,16(sp)
   12818:	df000404 	addi	fp,sp,16
   1281c:	e13ffe15 	stw	r4,-8(fp)
   12820:	e17fff15 	stw	r5,-4(fp)
	int32_t ret;
	uint8_t ensm_state;
	bool pinctrl = false;
   12824:	e03ffc45 	stb	zero,-15(fp)

	phy->pdata->fdd_independent_mode = false;
   12828:	e0bffe17 	ldw	r2,-8(fp)
   1282c:	10803017 	ldw	r2,192(r2)
   12830:	10000085 	stb	zero,2(r2)

	switch (mode) {
   12834:	e0bfff17 	ldw	r2,-4(fp)
   12838:	10800228 	cmpgeui	r2,r2,8
   1283c:	10002b1e 	bne	r2,zero,128ec <ad9361_set_en_state_machine_mode+0xe8>
   12840:	e0bfff17 	ldw	r2,-4(fp)
   12844:	100690ba 	slli	r3,r2,2
   12848:	00800074 	movhi	r2,1
   1284c:	108a1704 	addi	r2,r2,10332
   12850:	1885883a 	add	r2,r3,r2
   12854:	10800017 	ldw	r2,0(r2)
   12858:	1000683a 	jmp	r2
   1285c:	0001287c 	xorhi	zero,zero,1185
   12860:	00012888 	cmpgei	zero,zero,1186
   12864:	00012894 	movui	zero,1186
   12868:	000128a0 	cmpeqi	zero,zero,1186
   1286c:	000128ac 	andhi	zero,zero,1186
   12870:	000128b4 	movhi	zero,1186
   12874:	000128c0 	call	128c <ad9361_load_gt+0x13c>
   12878:	000128d0 	cmplti	zero,zero,1187
	case ENSM_MODE_TX:
		ensm_state = ENSM_STATE_TX;
   1287c:	00800184 	movi	r2,6
   12880:	e0bffc05 	stb	r2,-16(fp)
		break;
   12884:	00001b06 	br	128f4 <ad9361_set_en_state_machine_mode+0xf0>
	case ENSM_MODE_RX:
		ensm_state = ENSM_STATE_RX;
   12888:	00800204 	movi	r2,8
   1288c:	e0bffc05 	stb	r2,-16(fp)
		break;
   12890:	00001806 	br	128f4 <ad9361_set_en_state_machine_mode+0xf0>
	case ENSM_MODE_ALERT:
		ensm_state = ENSM_STATE_ALERT;
   12894:	00800144 	movi	r2,5
   12898:	e0bffc05 	stb	r2,-16(fp)
		break;
   1289c:	00001506 	br	128f4 <ad9361_set_en_state_machine_mode+0xf0>
	case ENSM_MODE_FDD:
		ensm_state = ENSM_STATE_FDD;
   128a0:	00800284 	movi	r2,10
   128a4:	e0bffc05 	stb	r2,-16(fp)
		break;
   128a8:	00001206 	br	128f4 <ad9361_set_en_state_machine_mode+0xf0>
	case ENSM_MODE_WAIT:
		ensm_state = ENSM_STATE_SLEEP_WAIT;
   128ac:	e03ffc05 	stb	zero,-16(fp)
		break;
   128b0:	00001006 	br	128f4 <ad9361_set_en_state_machine_mode+0xf0>
	case ENSM_MODE_SLEEP:
		ensm_state = ENSM_STATE_SLEEP;
   128b4:	00bfe004 	movi	r2,-128
   128b8:	e0bffc05 	stb	r2,-16(fp)
		break;
   128bc:	00000d06 	br	128f4 <ad9361_set_en_state_machine_mode+0xf0>
	case ENSM_MODE_PINCTRL:
		ensm_state = ENSM_STATE_SLEEP_WAIT;
   128c0:	e03ffc05 	stb	zero,-16(fp)
		pinctrl = true;
   128c4:	00800044 	movi	r2,1
   128c8:	e0bffc45 	stb	r2,-15(fp)
		break;
   128cc:	00000906 	br	128f4 <ad9361_set_en_state_machine_mode+0xf0>
	case ENSM_MODE_PINCTRL_FDD_INDEP:
		ensm_state = ENSM_STATE_FDD;
   128d0:	00800284 	movi	r2,10
   128d4:	e0bffc05 	stb	r2,-16(fp)
		phy->pdata->fdd_independent_mode = true;
   128d8:	e0bffe17 	ldw	r2,-8(fp)
   128dc:	10803017 	ldw	r2,192(r2)
   128e0:	00c00044 	movi	r3,1
   128e4:	10c00085 	stb	r3,2(r2)
		break;
   128e8:	00000206 	br	128f4 <ad9361_set_en_state_machine_mode+0xf0>
	default:
		return -EINVAL;
   128ec:	00bffa84 	movi	r2,-22
   128f0:	00001106 	br	12938 <ad9361_set_en_state_machine_mode+0x134>
	}

	ad9361_set_ensm_mode(phy, phy->pdata->fdd, pinctrl);
   128f4:	e0bffe17 	ldw	r2,-8(fp)
   128f8:	10803017 	ldw	r2,192(r2)
   128fc:	10800043 	ldbu	r2,1(r2)
   12900:	10c03fcc 	andi	r3,r2,255
   12904:	e0bffc43 	ldbu	r2,-15(fp)
   12908:	e13ffe17 	ldw	r4,-8(fp)
   1290c:	180b883a 	mov	r5,r3
   12910:	100d883a 	mov	r6,r2
   12914:	000a71c0 	call	a71c <ad9361_set_ensm_mode>
	ret = ad9361_ensm_set_state(phy, ensm_state, pinctrl);
   12918:	e0fffc03 	ldbu	r3,-16(fp)
   1291c:	e0bffc43 	ldbu	r2,-15(fp)
   12920:	e13ffe17 	ldw	r4,-8(fp)
   12924:	180b883a 	mov	r5,r3
   12928:	100d883a 	mov	r6,r2
   1292c:	00092d40 	call	92d4 <ad9361_ensm_set_state>
   12930:	e0bffd15 	stw	r2,-12(fp)

	return ret;
   12934:	e0bffd17 	ldw	r2,-12(fp)
}
   12938:	e037883a 	mov	sp,fp
   1293c:	dfc00117 	ldw	ra,4(sp)
   12940:	df000017 	ldw	fp,0(sp)
   12944:	dec00204 	addi	sp,sp,8
   12948:	f800283a 	ret

0001294c <ad9361_get_en_state_machine_mode>:
 * @param mode A variable to store the selected ENSM mode.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_get_en_state_machine_mode (struct ad9361_rf_phy *phy,
										  uint32_t *mode)
{
   1294c:	defffa04 	addi	sp,sp,-24
   12950:	de00012e 	bgeu	sp,et,12958 <ad9361_get_en_state_machine_mode+0xc>
   12954:	003b68fa 	trap	3
   12958:	dfc00515 	stw	ra,20(sp)
   1295c:	df000415 	stw	fp,16(sp)
   12960:	df000404 	addi	fp,sp,16
   12964:	e13ffe15 	stw	r4,-8(fp)
   12968:	e17fff15 	stw	r5,-4(fp)
	uint8_t ensm_state = phy->curr_ensm_state;
   1296c:	e0bffe17 	ldw	r2,-8(fp)
   12970:	10803143 	ldbu	r2,197(r2)
   12974:	e0bffc45 	stb	r2,-15(fp)
	bool pinctrl = false;
   12978:	e03ffc05 	stb	zero,-16(fp)
	int32_t ret;

	ret = ad9361_spi_read(phy->spi, REG_ENSM_CONFIG_1);
   1297c:	e0bffe17 	ldw	r2,-8(fp)
   12980:	10800117 	ldw	r2,4(r2)
   12984:	1009883a 	mov	r4,r2
   12988:	01400504 	movi	r5,20
   1298c:	00001500 	call	150 <ad9361_spi_read>
   12990:	e0bffd15 	stw	r2,-12(fp)
	if ((ret & ENABLE_ENSM_PIN_CTRL) == ENABLE_ENSM_PIN_CTRL)
   12994:	e0bffd17 	ldw	r2,-12(fp)
   12998:	1080040c 	andi	r2,r2,16
   1299c:	10000226 	beq	r2,zero,129a8 <ad9361_get_en_state_machine_mode+0x5c>
		pinctrl = true;
   129a0:	00800044 	movi	r2,1
   129a4:	e0bffc05 	stb	r2,-16(fp)

	switch (ensm_state) {
   129a8:	e0bffc43 	ldbu	r2,-15(fp)
   129ac:	10c001a0 	cmpeqi	r3,r2,6
   129b0:	18000d1e 	bne	r3,zero,129e8 <ad9361_get_en_state_machine_mode+0x9c>
   129b4:	10c001c8 	cmpgei	r3,r2,7
   129b8:	1800041e 	bne	r3,zero,129cc <ad9361_get_en_state_machine_mode+0x80>
   129bc:	10002226 	beq	r2,zero,12a48 <ad9361_get_en_state_machine_mode+0xfc>
   129c0:	10800160 	cmpeqi	r2,r2,5
   129c4:	10000f1e 	bne	r2,zero,12a04 <ad9361_get_en_state_machine_mode+0xb8>
   129c8:	00002d06 	br	12a80 <ad9361_get_en_state_machine_mode+0x134>
   129cc:	10c002a0 	cmpeqi	r3,r2,10
   129d0:	1800101e 	bne	r3,zero,12a14 <ad9361_get_en_state_machine_mode+0xc8>
   129d4:	10c02020 	cmpeqi	r3,r2,128
   129d8:	1800251e 	bne	r3,zero,12a70 <ad9361_get_en_state_machine_mode+0x124>
   129dc:	10800220 	cmpeqi	r2,r2,8
   129e0:	1000041e 	bne	r2,zero,129f4 <ad9361_get_en_state_machine_mode+0xa8>
   129e4:	00002606 	br	12a80 <ad9361_get_en_state_machine_mode+0x134>
	case ENSM_STATE_TX:
		*mode = ENSM_MODE_TX;
   129e8:	e0bfff17 	ldw	r2,-4(fp)
   129ec:	10000015 	stw	zero,0(r2)
		break;
   129f0:	00002506 	br	12a88 <ad9361_get_en_state_machine_mode+0x13c>
	case ENSM_STATE_RX:
		*mode = ENSM_MODE_RX;
   129f4:	e0bfff17 	ldw	r2,-4(fp)
   129f8:	00c00044 	movi	r3,1
   129fc:	10c00015 	stw	r3,0(r2)
		break;
   12a00:	00002106 	br	12a88 <ad9361_get_en_state_machine_mode+0x13c>
	case ENSM_STATE_ALERT:
		*mode = ENSM_MODE_ALERT;
   12a04:	e0bfff17 	ldw	r2,-4(fp)
   12a08:	00c00084 	movi	r3,2
   12a0c:	10c00015 	stw	r3,0(r2)
		break;
   12a10:	00001d06 	br	12a88 <ad9361_get_en_state_machine_mode+0x13c>
	case ENSM_STATE_FDD:
		if (phy->pdata->fdd_independent_mode)
   12a14:	e0bffe17 	ldw	r2,-8(fp)
   12a18:	10803017 	ldw	r2,192(r2)
   12a1c:	10800083 	ldbu	r2,2(r2)
   12a20:	10803fcc 	andi	r2,r2,255
   12a24:	10000426 	beq	r2,zero,12a38 <ad9361_get_en_state_machine_mode+0xec>
			*mode = ENSM_MODE_PINCTRL_FDD_INDEP;
   12a28:	e0bfff17 	ldw	r2,-4(fp)
   12a2c:	00c001c4 	movi	r3,7
   12a30:	10c00015 	stw	r3,0(r2)
		else
			*mode = ENSM_MODE_FDD;
		break;
   12a34:	00001406 	br	12a88 <ad9361_get_en_state_machine_mode+0x13c>
		break;
	case ENSM_STATE_FDD:
		if (phy->pdata->fdd_independent_mode)
			*mode = ENSM_MODE_PINCTRL_FDD_INDEP;
		else
			*mode = ENSM_MODE_FDD;
   12a38:	e0bfff17 	ldw	r2,-4(fp)
   12a3c:	00c000c4 	movi	r3,3
   12a40:	10c00015 	stw	r3,0(r2)
		break;
   12a44:	00001006 	br	12a88 <ad9361_get_en_state_machine_mode+0x13c>
	case ENSM_STATE_SLEEP_WAIT:
		if (pinctrl)
   12a48:	e0bffc03 	ldbu	r2,-16(fp)
   12a4c:	10000426 	beq	r2,zero,12a60 <ad9361_get_en_state_machine_mode+0x114>
			*mode = ENSM_MODE_PINCTRL;
   12a50:	e0bfff17 	ldw	r2,-4(fp)
   12a54:	00c00184 	movi	r3,6
   12a58:	10c00015 	stw	r3,0(r2)
		else
			*mode = ENSM_MODE_WAIT;
		break;
   12a5c:	00000a06 	br	12a88 <ad9361_get_en_state_machine_mode+0x13c>
		break;
	case ENSM_STATE_SLEEP_WAIT:
		if (pinctrl)
			*mode = ENSM_MODE_PINCTRL;
		else
			*mode = ENSM_MODE_WAIT;
   12a60:	e0bfff17 	ldw	r2,-4(fp)
   12a64:	00c00104 	movi	r3,4
   12a68:	10c00015 	stw	r3,0(r2)
		break;
   12a6c:	00000606 	br	12a88 <ad9361_get_en_state_machine_mode+0x13c>
	case ENSM_STATE_SLEEP:
		*mode = ENSM_MODE_SLEEP;
   12a70:	e0bfff17 	ldw	r2,-4(fp)
   12a74:	00c00144 	movi	r3,5
   12a78:	10c00015 	stw	r3,0(r2)
		break;
   12a7c:	00000206 	br	12a88 <ad9361_get_en_state_machine_mode+0x13c>
	default:
		return -EINVAL;
   12a80:	00bffa84 	movi	r2,-22
   12a84:	00000106 	br	12a8c <ad9361_get_en_state_machine_mode+0x140>
	}

	return 0;
   12a88:	0005883a 	mov	r2,zero
}
   12a8c:	e037883a 	mov	sp,fp
   12a90:	dfc00117 	ldw	ra,4(sp)
   12a94:	df000017 	ldw	fp,0(sp)
   12a98:	dec00204 	addi	sp,sp,8
   12a9c:	f800283a 	ret

00012aa0 <ad9361_set_rx_rf_gain>:
 * 				   10 (10 dB)
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_set_rx_rf_gain (struct ad9361_rf_phy *phy,
							   uint8_t ch, int32_t gain_db)
{
   12aa0:	defff104 	addi	sp,sp,-60
   12aa4:	de00012e 	bgeu	sp,et,12aac <ad9361_set_rx_rf_gain+0xc>
   12aa8:	003b68fa 	trap	3
   12aac:	dfc00e15 	stw	ra,56(sp)
   12ab0:	df000d15 	stw	fp,52(sp)
   12ab4:	df000d04 	addi	fp,sp,52
   12ab8:	e13ffd15 	stw	r4,-12(fp)
   12abc:	2805883a 	mov	r2,r5
   12ac0:	e1bfff15 	stw	r6,-4(fp)
   12ac4:	e0bffe05 	stb	r2,-8(fp)
	struct rf_rx_gain rx_gain = {0};
   12ac8:	e03ff415 	stw	zero,-48(fp)
   12acc:	e03ff515 	stw	zero,-44(fp)
   12ad0:	e03ff615 	stw	zero,-40(fp)
   12ad4:	e03ff715 	stw	zero,-36(fp)
   12ad8:	e03ff815 	stw	zero,-32(fp)
   12adc:	e03ff915 	stw	zero,-28(fp)
   12ae0:	e03ffa15 	stw	zero,-24(fp)
   12ae4:	e03ffb15 	stw	zero,-20(fp)
   12ae8:	e03ffc15 	stw	zero,-16(fp)
	int32_t ret = 0;
   12aec:	e03ff315 	stw	zero,-52(fp)

	if ((phy->pdata->rx2tx2 == 0) && (ch == RX2)) {
   12af0:	e0bffd17 	ldw	r2,-12(fp)
   12af4:	10803017 	ldw	r2,192(r2)
   12af8:	10800003 	ldbu	r2,0(r2)
   12afc:	1080005c 	xori	r2,r2,1
   12b00:	10803fcc 	andi	r2,r2,255
   12b04:	10000a26 	beq	r2,zero,12b30 <ad9361_set_rx_rf_gain+0x90>
   12b08:	e0bffe03 	ldbu	r2,-8(fp)
   12b0c:	10800058 	cmpnei	r2,r2,1
   12b10:	1000071e 	bne	r2,zero,12b30 <ad9361_set_rx_rf_gain+0x90>
		printf("%s : RX2 is an invalid option in 1x1 mode!\n", __func__);
   12b14:	010000b4 	movhi	r4,2
   12b18:	211ffe04 	addi	r4,r4,32760
   12b1c:	014000f4 	movhi	r5,3
   12b20:	29601404 	addi	r5,r5,-32688
   12b24:	001f8180 	call	1f818 <printf>
		return -1;
   12b28:	00bfffc4 	movi	r2,-1
   12b2c:	00001006 	br	12b70 <ad9361_set_rx_rf_gain+0xd0>
	}

	rx_gain.gain_db = gain_db;
   12b30:	e0bfff17 	ldw	r2,-4(fp)
   12b34:	e0bff515 	stw	r2,-44(fp)
	ret = ad9361_set_rx_gain(phy,
					ad9361_1rx1tx_channel_map(phy, false,
   12b38:	e0bffe03 	ldbu	r2,-8(fp)
					ch + 1), &rx_gain);
   12b3c:	10800044 	addi	r2,r2,1
		return -1;
	}

	rx_gain.gain_db = gain_db;
	ret = ad9361_set_rx_gain(phy,
					ad9361_1rx1tx_channel_map(phy, false,
   12b40:	e13ffd17 	ldw	r4,-12(fp)
   12b44:	000b883a 	mov	r5,zero
   12b48:	100d883a 	mov	r6,r2
   12b4c:	00006000 	call	600 <ad9361_1rx1tx_channel_map>
		printf("%s : RX2 is an invalid option in 1x1 mode!\n", __func__);
		return -1;
	}

	rx_gain.gain_db = gain_db;
	ret = ad9361_set_rx_gain(phy,
   12b50:	1007883a 	mov	r3,r2
   12b54:	e0bff404 	addi	r2,fp,-48
   12b58:	e13ffd17 	ldw	r4,-12(fp)
   12b5c:	180b883a 	mov	r5,r3
   12b60:	100d883a 	mov	r6,r2
   12b64:	0002bf40 	call	2bf4 <ad9361_set_rx_gain>
   12b68:	e0bff315 	stw	r2,-52(fp)
					ad9361_1rx1tx_channel_map(phy, false,
					ch + 1), &rx_gain);

	return ret;
   12b6c:	e0bff317 	ldw	r2,-52(fp)
}
   12b70:	e037883a 	mov	sp,fp
   12b74:	dfc00117 	ldw	ra,4(sp)
   12b78:	df000017 	ldw	fp,0(sp)
   12b7c:	dec00204 	addi	sp,sp,8
   12b80:	f800283a 	ret

00012b84 <ad9361_get_rx_rf_gain>:
 * @param gain_db A variable to store the RF gain (dB).
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_get_rx_rf_gain (struct ad9361_rf_phy *phy,
							   uint8_t ch, int32_t *gain_db)
{
   12b84:	defff104 	addi	sp,sp,-60
   12b88:	de00012e 	bgeu	sp,et,12b90 <ad9361_get_rx_rf_gain+0xc>
   12b8c:	003b68fa 	trap	3
   12b90:	dfc00e15 	stw	ra,56(sp)
   12b94:	df000d15 	stw	fp,52(sp)
   12b98:	df000d04 	addi	fp,sp,52
   12b9c:	e13ffd15 	stw	r4,-12(fp)
   12ba0:	2805883a 	mov	r2,r5
   12ba4:	e1bfff15 	stw	r6,-4(fp)
   12ba8:	e0bffe05 	stb	r2,-8(fp)
	struct rf_rx_gain rx_gain = {0};
   12bac:	e03ff415 	stw	zero,-48(fp)
   12bb0:	e03ff515 	stw	zero,-44(fp)
   12bb4:	e03ff615 	stw	zero,-40(fp)
   12bb8:	e03ff715 	stw	zero,-36(fp)
   12bbc:	e03ff815 	stw	zero,-32(fp)
   12bc0:	e03ff915 	stw	zero,-28(fp)
   12bc4:	e03ffa15 	stw	zero,-24(fp)
   12bc8:	e03ffb15 	stw	zero,-20(fp)
   12bcc:	e03ffc15 	stw	zero,-16(fp)
	int32_t ret = 0;
   12bd0:	e03ff315 	stw	zero,-52(fp)

	if ((phy->pdata->rx2tx2 == 0) && (ch == RX2)) {
   12bd4:	e0bffd17 	ldw	r2,-12(fp)
   12bd8:	10803017 	ldw	r2,192(r2)
   12bdc:	10800003 	ldbu	r2,0(r2)
   12be0:	1080005c 	xori	r2,r2,1
   12be4:	10803fcc 	andi	r2,r2,255
   12be8:	10000a26 	beq	r2,zero,12c14 <ad9361_get_rx_rf_gain+0x90>
   12bec:	e0bffe03 	ldbu	r2,-8(fp)
   12bf0:	10800058 	cmpnei	r2,r2,1
   12bf4:	1000071e 	bne	r2,zero,12c14 <ad9361_get_rx_rf_gain+0x90>
		printf("%s : RX2 is an invalid option in 1x1 mode!\n", __func__);
   12bf8:	010000b4 	movhi	r4,2
   12bfc:	211ffe04 	addi	r4,r4,32760
   12c00:	014000f4 	movhi	r5,3
   12c04:	29601a04 	addi	r5,r5,-32664
   12c08:	001f8180 	call	1f818 <printf>
		return -1;
   12c0c:	00bfffc4 	movi	r2,-1
   12c10:	00001106 	br	12c58 <ad9361_get_rx_rf_gain+0xd4>
	}

	ret = ad9361_get_rx_gain(phy, ad9361_1rx1tx_channel_map(phy,
   12c14:	e0bffe03 	ldbu	r2,-8(fp)
			false, ch + 1), &rx_gain);
   12c18:	10800044 	addi	r2,r2,1
	if ((phy->pdata->rx2tx2 == 0) && (ch == RX2)) {
		printf("%s : RX2 is an invalid option in 1x1 mode!\n", __func__);
		return -1;
	}

	ret = ad9361_get_rx_gain(phy, ad9361_1rx1tx_channel_map(phy,
   12c1c:	e13ffd17 	ldw	r4,-12(fp)
   12c20:	000b883a 	mov	r5,zero
   12c24:	100d883a 	mov	r6,r2
   12c28:	00006000 	call	600 <ad9361_1rx1tx_channel_map>
   12c2c:	1007883a 	mov	r3,r2
   12c30:	e0bff404 	addi	r2,fp,-48
   12c34:	e13ffd17 	ldw	r4,-12(fp)
   12c38:	180b883a 	mov	r5,r3
   12c3c:	100d883a 	mov	r6,r2
   12c40:	000226c0 	call	226c <ad9361_get_rx_gain>
   12c44:	e0bff315 	stw	r2,-52(fp)
			false, ch + 1), &rx_gain);

	*gain_db = rx_gain.gain_db;
   12c48:	e0fff517 	ldw	r3,-44(fp)
   12c4c:	e0bfff17 	ldw	r2,-4(fp)
   12c50:	10c00015 	stw	r3,0(r2)

	return ret;
   12c54:	e0bff317 	ldw	r2,-52(fp)
}
   12c58:	e037883a 	mov	sp,fp
   12c5c:	dfc00117 	ldw	ra,4(sp)
   12c60:	df000017 	ldw	fp,0(sp)
   12c64:	dec00204 	addi	sp,sp,8
   12c68:	f800283a 	ret

00012c6c <ad9361_set_rx_rf_bandwidth>:
 *
 * Note: This function will/may affect the data path.
 */
int32_t ad9361_set_rx_rf_bandwidth (struct ad9361_rf_phy *phy,
									uint32_t bandwidth_hz)
{
   12c6c:	defffb04 	addi	sp,sp,-20
   12c70:	de00012e 	bgeu	sp,et,12c78 <ad9361_set_rx_rf_bandwidth+0xc>
   12c74:	003b68fa 	trap	3
   12c78:	dfc00415 	stw	ra,16(sp)
   12c7c:	df000315 	stw	fp,12(sp)
   12c80:	df000304 	addi	fp,sp,12
   12c84:	e13ffe15 	stw	r4,-8(fp)
   12c88:	e17fff15 	stw	r5,-4(fp)
	int32_t ret = 0;
   12c8c:	e03ffd15 	stw	zero,-12(fp)

	if (phy->current_rx_bw_Hz != bandwidth_hz)
   12c90:	e0bffe17 	ldw	r2,-8(fp)
   12c94:	10c04b17 	ldw	r3,300(r2)
   12c98:	e0bfff17 	ldw	r2,-4(fp)
   12c9c:	18800826 	beq	r3,r2,12cc0 <ad9361_set_rx_rf_bandwidth+0x54>
		ret = ad9361_update_rf_bandwidth(phy, bandwidth_hz,
   12ca0:	e0bffe17 	ldw	r2,-8(fp)
   12ca4:	10804c17 	ldw	r2,304(r2)
   12ca8:	e13ffe17 	ldw	r4,-8(fp)
   12cac:	e17fff17 	ldw	r5,-4(fp)
   12cb0:	100d883a 	mov	r6,r2
   12cb4:	000cbb00 	call	cbb0 <ad9361_update_rf_bandwidth>
   12cb8:	e0bffd15 	stw	r2,-12(fp)
   12cbc:	00000106 	br	12cc4 <ad9361_set_rx_rf_bandwidth+0x58>
				phy->current_tx_bw_Hz);
	else
		ret = 0;
   12cc0:	e03ffd15 	stw	zero,-12(fp)

	return ret;
   12cc4:	e0bffd17 	ldw	r2,-12(fp)
}
   12cc8:	e037883a 	mov	sp,fp
   12ccc:	dfc00117 	ldw	ra,4(sp)
   12cd0:	df000017 	ldw	fp,0(sp)
   12cd4:	dec00204 	addi	sp,sp,8
   12cd8:	f800283a 	ret

00012cdc <ad9361_get_rx_rf_bandwidth>:
 * @param bandwidth_hz A variable to store the bandwidth value (Hz).
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_get_rx_rf_bandwidth (struct ad9361_rf_phy *phy,
									uint32_t *bandwidth_hz)
{
   12cdc:	defffd04 	addi	sp,sp,-12
   12ce0:	de00012e 	bgeu	sp,et,12ce8 <ad9361_get_rx_rf_bandwidth+0xc>
   12ce4:	003b68fa 	trap	3
   12ce8:	df000215 	stw	fp,8(sp)
   12cec:	df000204 	addi	fp,sp,8
   12cf0:	e13ffe15 	stw	r4,-8(fp)
   12cf4:	e17fff15 	stw	r5,-4(fp)
	*bandwidth_hz = phy->current_rx_bw_Hz;
   12cf8:	e0bffe17 	ldw	r2,-8(fp)
   12cfc:	10c04b17 	ldw	r3,300(r2)
   12d00:	e0bfff17 	ldw	r2,-4(fp)
   12d04:	10c00015 	stw	r3,0(r2)

	return 0;
   12d08:	0005883a 	mov	r2,zero
}
   12d0c:	e037883a 	mov	sp,fp
   12d10:	df000017 	ldw	fp,0(sp)
   12d14:	dec00104 	addi	sp,sp,4
   12d18:	f800283a 	ret

00012d1c <ad9361_set_rx_sampling_freq>:
 *
 * Note: This function will/may affect the data path.
 */
int32_t ad9361_set_rx_sampling_freq (struct ad9361_rf_phy *phy,
									 uint32_t sampling_freq_hz)
{
   12d1c:	deffee04 	addi	sp,sp,-72
   12d20:	de00012e 	bgeu	sp,et,12d28 <ad9361_set_rx_sampling_freq+0xc>
   12d24:	003b68fa 	trap	3
   12d28:	dfc01115 	stw	ra,68(sp)
   12d2c:	df001015 	stw	fp,64(sp)
   12d30:	df001004 	addi	fp,sp,64
   12d34:	e13ffe15 	stw	r4,-8(fp)
   12d38:	e17fff15 	stw	r5,-4(fp)
	int32_t ret;
	uint32_t rx[6], tx[6];

	ret = ad9361_calculate_rf_clock_chain(phy, sampling_freq_hz,
   12d3c:	e0bffe17 	ldw	r2,-8(fp)
   12d40:	11804e17 	ldw	r6,312(r2)
   12d44:	e0fff204 	addi	r3,fp,-56
   12d48:	e0bff804 	addi	r2,fp,-32
   12d4c:	d8800015 	stw	r2,0(sp)
   12d50:	e13ffe17 	ldw	r4,-8(fp)
   12d54:	e17fff17 	ldw	r5,-4(fp)
   12d58:	180f883a 	mov	r7,r3
   12d5c:	0009f600 	call	9f60 <ad9361_calculate_rf_clock_chain>
   12d60:	e0bff115 	stw	r2,-60(fp)
		phy->rate_governor, rx, tx);
	if (ret < 0)
   12d64:	e0bff117 	ldw	r2,-60(fp)
   12d68:	1000020e 	bge	r2,zero,12d74 <ad9361_set_rx_sampling_freq+0x58>
		return ret;
   12d6c:	e0bff117 	ldw	r2,-60(fp)
   12d70:	00001006 	br	12db4 <ad9361_set_rx_sampling_freq+0x98>

	ad9361_set_trx_clock_chain(phy, rx, tx);
   12d74:	e0fff204 	addi	r3,fp,-56
   12d78:	e0bff804 	addi	r2,fp,-32
   12d7c:	e13ffe17 	ldw	r4,-8(fp)
   12d80:	180b883a 	mov	r5,r3
   12d84:	100d883a 	mov	r6,r2
   12d88:	00099d80 	call	99d8 <ad9361_set_trx_clock_chain>

	ret = ad9361_update_rf_bandwidth(phy, phy->current_rx_bw_Hz,
   12d8c:	e0bffe17 	ldw	r2,-8(fp)
   12d90:	10c04b17 	ldw	r3,300(r2)
   12d94:	e0bffe17 	ldw	r2,-8(fp)
   12d98:	10804c17 	ldw	r2,304(r2)
   12d9c:	e13ffe17 	ldw	r4,-8(fp)
   12da0:	180b883a 	mov	r5,r3
   12da4:	100d883a 	mov	r6,r2
   12da8:	000cbb00 	call	cbb0 <ad9361_update_rf_bandwidth>
   12dac:	e0bff115 	stw	r2,-60(fp)
					phy->current_tx_bw_Hz);

	return ret;
   12db0:	e0bff117 	ldw	r2,-60(fp)
}
   12db4:	e037883a 	mov	sp,fp
   12db8:	dfc00117 	ldw	ra,4(sp)
   12dbc:	df000017 	ldw	fp,0(sp)
   12dc0:	dec00204 	addi	sp,sp,8
   12dc4:	f800283a 	ret

00012dc8 <ad9361_get_rx_sampling_freq>:
 * @param sampling_freq_hz A variable to store the frequency value (Hz).
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_get_rx_sampling_freq (struct ad9361_rf_phy *phy,
									 uint32_t *sampling_freq_hz)
{
   12dc8:	defffc04 	addi	sp,sp,-16
   12dcc:	de00012e 	bgeu	sp,et,12dd4 <ad9361_get_rx_sampling_freq+0xc>
   12dd0:	003b68fa 	trap	3
   12dd4:	dfc00315 	stw	ra,12(sp)
   12dd8:	df000215 	stw	fp,8(sp)
   12ddc:	df000204 	addi	fp,sp,8
   12de0:	e13ffe15 	stw	r4,-8(fp)
   12de4:	e17fff15 	stw	r5,-4(fp)
	*sampling_freq_hz = (uint32_t)clk_get_rate(phy,
   12de8:	e0bffe17 	ldw	r2,-8(fp)
   12dec:	10801f17 	ldw	r2,124(r2)
   12df0:	e13ffe17 	ldw	r4,-8(fp)
   12df4:	100b883a 	mov	r5,r2
   12df8:	001bc900 	call	1bc90 <clk_get_rate>
   12dfc:	1007883a 	mov	r3,r2
   12e00:	e0bfff17 	ldw	r2,-4(fp)
   12e04:	10c00015 	stw	r3,0(r2)
										phy->ref_clk_scale[RX_SAMPL_CLK]);

	return 0;
   12e08:	0005883a 	mov	r2,zero
}
   12e0c:	e037883a 	mov	sp,fp
   12e10:	dfc00117 	ldw	ra,4(sp)
   12e14:	df000017 	ldw	fp,0(sp)
   12e18:	dec00204 	addi	sp,sp,8
   12e1c:	f800283a 	ret

00012e20 <ad9361_set_rx_lo_freq>:
 *
 * Note: This function will/may affect the data path.
 */
int32_t ad9361_set_rx_lo_freq (struct ad9361_rf_phy *phy,
							   uint64_t lo_freq_hz)
{
   12e20:	defff904 	addi	sp,sp,-28
   12e24:	de00012e 	bgeu	sp,et,12e2c <ad9361_set_rx_lo_freq+0xc>
   12e28:	003b68fa 	trap	3
   12e2c:	dfc00615 	stw	ra,24(sp)
   12e30:	df000515 	stw	fp,20(sp)
   12e34:	dc000415 	stw	r16,16(sp)
   12e38:	df000504 	addi	fp,sp,20
   12e3c:	e13ffc15 	stw	r4,-16(fp)
   12e40:	e17ffd15 	stw	r5,-12(fp)
   12e44:	e1bffe15 	stw	r6,-8(fp)
	int32_t ret;

	ret = clk_set_rate(phy, phy->ref_clk_scale[RX_RFPLL],
   12e48:	e0bffc17 	ldw	r2,-16(fp)
   12e4c:	14002917 	ldw	r16,164(r2)
   12e50:	e13ffd17 	ldw	r4,-12(fp)
   12e54:	e17ffe17 	ldw	r5,-8(fp)
   12e58:	00010a80 	call	10a8 <ad9361_to_clk>
   12e5c:	e13ffc17 	ldw	r4,-16(fp)
   12e60:	800b883a 	mov	r5,r16
   12e64:	100d883a 	mov	r6,r2
   12e68:	001be380 	call	1be38 <clk_set_rate>
   12e6c:	e0bffb15 	stw	r2,-20(fp)
				ad9361_to_clk(lo_freq_hz));

	return ret;
   12e70:	e0bffb17 	ldw	r2,-20(fp)
}
   12e74:	e6ffff04 	addi	sp,fp,-4
   12e78:	dfc00217 	ldw	ra,8(sp)
   12e7c:	df000117 	ldw	fp,4(sp)
   12e80:	dc000017 	ldw	r16,0(sp)
   12e84:	dec00304 	addi	sp,sp,12
   12e88:	f800283a 	ret

00012e8c <ad9361_get_rx_lo_freq>:
 * @param lo_freq_hz A variable to store the frequency value (Hz).
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_get_rx_lo_freq (struct ad9361_rf_phy *phy,
							   uint64_t *lo_freq_hz)
{
   12e8c:	defffc04 	addi	sp,sp,-16
   12e90:	de00012e 	bgeu	sp,et,12e98 <ad9361_get_rx_lo_freq+0xc>
   12e94:	003b68fa 	trap	3
   12e98:	dfc00315 	stw	ra,12(sp)
   12e9c:	df000215 	stw	fp,8(sp)
   12ea0:	df000204 	addi	fp,sp,8
   12ea4:	e13ffe15 	stw	r4,-8(fp)
   12ea8:	e17fff15 	stw	r5,-4(fp)
	*lo_freq_hz = ad9361_from_clk(clk_get_rate(phy,
   12eac:	e0bffe17 	ldw	r2,-8(fp)
   12eb0:	10802917 	ldw	r2,164(r2)
   12eb4:	e13ffe17 	ldw	r4,-8(fp)
   12eb8:	100b883a 	mov	r5,r2
   12ebc:	001bc900 	call	1bc90 <clk_get_rate>
   12ec0:	1009883a 	mov	r4,r2
   12ec4:	00010f00 	call	10f0 <ad9361_from_clk>
   12ec8:	1009883a 	mov	r4,r2
   12ecc:	180b883a 	mov	r5,r3
   12ed0:	e0bfff17 	ldw	r2,-4(fp)
   12ed4:	11000015 	stw	r4,0(r2)
   12ed8:	11400115 	stw	r5,4(r2)
										phy->ref_clk_scale[RX_RFPLL]));

	return 0;
   12edc:	0005883a 	mov	r2,zero
}
   12ee0:	e037883a 	mov	sp,fp
   12ee4:	dfc00117 	ldw	ra,4(sp)
   12ee8:	df000017 	ldw	fp,0(sp)
   12eec:	dec00204 	addi	sp,sp,8
   12ef0:	f800283a 	ret

00012ef4 <ad9361_set_rx_lo_int_ext>:
 * 			   INT_LO
 * 			   EXT_LO
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_set_rx_lo_int_ext(struct ad9361_rf_phy *phy, uint8_t int_ext)
{
   12ef4:	defffc04 	addi	sp,sp,-16
   12ef8:	de00012e 	bgeu	sp,et,12f00 <ad9361_set_rx_lo_int_ext+0xc>
   12efc:	003b68fa 	trap	3
   12f00:	dfc00315 	stw	ra,12(sp)
   12f04:	df000215 	stw	fp,8(sp)
   12f08:	df000204 	addi	fp,sp,8
   12f0c:	e13ffe15 	stw	r4,-8(fp)
   12f10:	2805883a 	mov	r2,r5
   12f14:	e0bfff05 	stb	r2,-4(fp)
	phy->pdata->use_ext_rx_lo = int_ext;
   12f18:	e0bffe17 	ldw	r2,-8(fp)
   12f1c:	10803017 	ldw	r2,192(r2)
   12f20:	e0ffff03 	ldbu	r3,-4(fp)
   12f24:	1806c03a 	cmpne	r3,r3,zero
   12f28:	10c002c5 	stb	r3,11(r2)

	return ad9361_clk_mux_set_parent(phy->ref_clk_scale[RX_RFPLL], int_ext);
   12f2c:	e0bffe17 	ldw	r2,-8(fp)
   12f30:	10c02917 	ldw	r3,164(r2)
   12f34:	e0bfff03 	ldbu	r2,-4(fp)
   12f38:	1809883a 	mov	r4,r3
   12f3c:	100b883a 	mov	r5,r2
   12f40:	00100380 	call	10038 <ad9361_clk_mux_set_parent>
}
   12f44:	e037883a 	mov	sp,fp
   12f48:	dfc00117 	ldw	ra,4(sp)
   12f4c:	df000017 	ldw	fp,0(sp)
   12f50:	dec00204 	addi	sp,sp,8
   12f54:	f800283a 	ret

00012f58 <ad9361_get_rx_rssi>:
 * @param rssi A variable to store the RSSI.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_get_rx_rssi (struct ad9361_rf_phy *phy,
							uint8_t ch, struct rf_rssi *rssi)
{
   12f58:	defffa04 	addi	sp,sp,-24
   12f5c:	de00012e 	bgeu	sp,et,12f64 <ad9361_get_rx_rssi+0xc>
   12f60:	003b68fa 	trap	3
   12f64:	dfc00515 	stw	ra,20(sp)
   12f68:	df000415 	stw	fp,16(sp)
   12f6c:	df000404 	addi	fp,sp,16
   12f70:	e13ffd15 	stw	r4,-12(fp)
   12f74:	2805883a 	mov	r2,r5
   12f78:	e1bfff15 	stw	r6,-4(fp)
   12f7c:	e0bffe05 	stb	r2,-8(fp)
	int32_t ret;

	if ((phy->pdata->rx2tx2 == 0) && (ch == RX2)) {
   12f80:	e0bffd17 	ldw	r2,-12(fp)
   12f84:	10803017 	ldw	r2,192(r2)
   12f88:	10800003 	ldbu	r2,0(r2)
   12f8c:	1080005c 	xori	r2,r2,1
   12f90:	10803fcc 	andi	r2,r2,255
   12f94:	10000a26 	beq	r2,zero,12fc0 <ad9361_get_rx_rssi+0x68>
   12f98:	e0bffe03 	ldbu	r2,-8(fp)
   12f9c:	10800058 	cmpnei	r2,r2,1
   12fa0:	1000071e 	bne	r2,zero,12fc0 <ad9361_get_rx_rssi+0x68>
		printf("%s : RX2 is an invalid option in 1x1 mode!\n", __func__);
   12fa4:	010000b4 	movhi	r4,2
   12fa8:	211ffe04 	addi	r4,r4,32760
   12fac:	014000f4 	movhi	r5,3
   12fb0:	29602004 	addi	r5,r5,-32640
   12fb4:	001f8180 	call	1f818 <printf>
		return -1;
   12fb8:	00bfffc4 	movi	r2,-1
   12fbc:	00001106 	br	13004 <ad9361_get_rx_rssi+0xac>
	}

	rssi->ant = ad9361_1rx1tx_channel_map(phy, false, ch + 1);
   12fc0:	e0bffe03 	ldbu	r2,-8(fp)
   12fc4:	10800044 	addi	r2,r2,1
   12fc8:	e13ffd17 	ldw	r4,-12(fp)
   12fcc:	000b883a 	mov	r5,zero
   12fd0:	100d883a 	mov	r6,r2
   12fd4:	00006000 	call	600 <ad9361_1rx1tx_channel_map>
   12fd8:	1007883a 	mov	r3,r2
   12fdc:	e0bfff17 	ldw	r2,-4(fp)
   12fe0:	10c00015 	stw	r3,0(r2)
	rssi->duration = 1;
   12fe4:	e0bfff17 	ldw	r2,-4(fp)
   12fe8:	00c00044 	movi	r3,1
   12fec:	10c00405 	stb	r3,16(r2)
	ret = ad9361_read_rssi(phy, rssi);
   12ff0:	e13ffd17 	ldw	r4,-12(fp)
   12ff4:	e17fff17 	ldw	r5,-4(fp)
   12ff8:	00036b00 	call	36b0 <ad9361_read_rssi>
   12ffc:	e0bffc15 	stw	r2,-16(fp)

	return ret;
   13000:	e0bffc17 	ldw	r2,-16(fp)
}
   13004:	e037883a 	mov	sp,fp
   13008:	dfc00117 	ldw	ra,4(sp)
   1300c:	df000017 	ldw	fp,0(sp)
   13010:	dec00204 	addi	sp,sp,8
   13014:	f800283a 	ret

00013018 <ad9361_set_rx_gain_control_mode>:
 *				   RF_GAIN_HYBRID_AGC (hybrid)
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_set_rx_gain_control_mode (struct ad9361_rf_phy *phy,
										 uint8_t ch, uint8_t gc_mode)
{
   13018:	defff904 	addi	sp,sp,-28
   1301c:	de00012e 	bgeu	sp,et,13024 <ad9361_set_rx_gain_control_mode+0xc>
   13020:	003b68fa 	trap	3
   13024:	dfc00615 	stw	ra,24(sp)
   13028:	df000515 	stw	fp,20(sp)
   1302c:	df000504 	addi	fp,sp,20
   13030:	e13ffd15 	stw	r4,-12(fp)
   13034:	2807883a 	mov	r3,r5
   13038:	3005883a 	mov	r2,r6
   1303c:	e0fffe05 	stb	r3,-8(fp)
   13040:	e0bfff05 	stb	r2,-4(fp)
	struct rf_gain_ctrl gc = {0};
   13044:	e03ffb15 	stw	zero,-20(fp)
   13048:	e03ffc15 	stw	zero,-16(fp)

	if ((phy->pdata->rx2tx2 == 0) && (ch == RX2)) {
   1304c:	e0bffd17 	ldw	r2,-12(fp)
   13050:	10803017 	ldw	r2,192(r2)
   13054:	10800003 	ldbu	r2,0(r2)
   13058:	1080005c 	xori	r2,r2,1
   1305c:	10803fcc 	andi	r2,r2,255
   13060:	10000a26 	beq	r2,zero,1308c <ad9361_set_rx_gain_control_mode+0x74>
   13064:	e0bffe03 	ldbu	r2,-8(fp)
   13068:	10800058 	cmpnei	r2,r2,1
   1306c:	1000071e 	bne	r2,zero,1308c <ad9361_set_rx_gain_control_mode+0x74>
		printf("%s : RX2 is an invalid option in 1x1 mode!\n", __func__);
   13070:	010000b4 	movhi	r4,2
   13074:	211ffe04 	addi	r4,r4,32760
   13078:	014000f4 	movhi	r5,3
   1307c:	29602504 	addi	r5,r5,-32620
   13080:	001f8180 	call	1f818 <printf>
		return -1;
   13084:	00bfffc4 	movi	r2,-1
   13088:	00001606 	br	130e4 <ad9361_set_rx_gain_control_mode+0xcc>
	}

	gc.ant = ad9361_1rx1tx_channel_map(phy, false, ch + 1);
   1308c:	e0bffe03 	ldbu	r2,-8(fp)
   13090:	10800044 	addi	r2,r2,1
   13094:	e13ffd17 	ldw	r4,-12(fp)
   13098:	000b883a 	mov	r5,zero
   1309c:	100d883a 	mov	r6,r2
   130a0:	00006000 	call	600 <ad9361_1rx1tx_channel_map>
   130a4:	e0bffb15 	stw	r2,-20(fp)
	gc.mode = phy->agc_mode[ch] = gc_mode;
   130a8:	e0bffe03 	ldbu	r2,-8(fp)
   130ac:	e0fffd17 	ldw	r3,-12(fp)
   130b0:	1887883a 	add	r3,r3,r2
   130b4:	18c05f04 	addi	r3,r3,380
   130b8:	e13fff03 	ldbu	r4,-4(fp)
   130bc:	19000005 	stb	r4,0(r3)
   130c0:	e0fffd17 	ldw	r3,-12(fp)
   130c4:	1885883a 	add	r2,r3,r2
   130c8:	10805f04 	addi	r2,r2,380
   130cc:	10800003 	ldbu	r2,0(r2)
   130d0:	e0bffc05 	stb	r2,-16(fp)

	ad9361_set_gain_ctrl_mode(phy, &gc);
   130d4:	e13ffd17 	ldw	r4,-12(fp)
   130d8:	e17ffb04 	addi	r5,fp,-20
   130dc:	00034340 	call	3434 <ad9361_set_gain_ctrl_mode>

	return 0;
   130e0:	0005883a 	mov	r2,zero
}
   130e4:	e037883a 	mov	sp,fp
   130e8:	dfc00117 	ldw	ra,4(sp)
   130ec:	df000017 	ldw	fp,0(sp)
   130f0:	dec00204 	addi	sp,sp,8
   130f4:	f800283a 	ret

000130f8 <ad9361_get_rx_gain_control_mode>:
 * @param gc_mode A variable to store the gain control mode.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_get_rx_gain_control_mode (struct ad9361_rf_phy *phy,
										 uint8_t ch, uint8_t *gc_mode)
{
   130f8:	defffc04 	addi	sp,sp,-16
   130fc:	de00012e 	bgeu	sp,et,13104 <ad9361_get_rx_gain_control_mode+0xc>
   13100:	003b68fa 	trap	3
   13104:	df000315 	stw	fp,12(sp)
   13108:	df000304 	addi	fp,sp,12
   1310c:	e13ffd15 	stw	r4,-12(fp)
   13110:	2805883a 	mov	r2,r5
   13114:	e1bfff15 	stw	r6,-4(fp)
   13118:	e0bffe05 	stb	r2,-8(fp)
	*gc_mode = phy->agc_mode[ch];
   1311c:	e0bffe03 	ldbu	r2,-8(fp)
   13120:	e0fffd17 	ldw	r3,-12(fp)
   13124:	1885883a 	add	r2,r3,r2
   13128:	10805f04 	addi	r2,r2,380
   1312c:	10c00003 	ldbu	r3,0(r2)
   13130:	e0bfff17 	ldw	r2,-4(fp)
   13134:	10c00005 	stb	r3,0(r2)

	return 0;
   13138:	0005883a 	mov	r2,zero
}
   1313c:	e037883a 	mov	sp,fp
   13140:	df000017 	ldw	fp,0(sp)
   13144:	dec00104 	addi	sp,sp,4
   13148:	f800283a 	ret

0001314c <ad9361_set_rx_fir_config>:
 *
 * Note: This function will/may affect the data path.
 */
int32_t ad9361_set_rx_fir_config (struct ad9361_rf_phy *phy,
								  AD9361_RXFIRConfig fir_cfg)
{
   1314c:	defff804 	addi	sp,sp,-32
   13150:	de00012e 	bgeu	sp,et,13158 <ad9361_set_rx_fir_config+0xc>
   13154:	003b68fa 	trap	3
   13158:	dfc00415 	stw	ra,16(sp)
   1315c:	df000315 	stw	fp,12(sp)
   13160:	df000304 	addi	fp,sp,12
   13164:	e13fff15 	stw	r4,-4(fp)
   13168:	e1400215 	stw	r5,8(fp)
   1316c:	e1800315 	stw	r6,12(fp)
   13170:	e1c00415 	stw	r7,16(fp)
	int32_t ret;

	phy->rx_fir_dec = fir_cfg.rx_dec;
   13174:	e0800417 	ldw	r2,16(fp)
   13178:	1007883a 	mov	r3,r2
   1317c:	e0bfff17 	ldw	r2,-4(fp)
   13180:	10c05e85 	stb	r3,378(r2)
	ret = ad9361_load_fir_filter_coef(phy, (enum fir_dest)(fir_cfg.rx | FIR_IS_RX),
   13184:	e0800217 	ldw	r2,8(fp)
   13188:	11402014 	ori	r5,r2,128
   1318c:	e1800317 	ldw	r6,12(fp)
			fir_cfg.rx_gain, fir_cfg.rx_coef_size, fir_cfg.rx_coef);
   13190:	e0804503 	ldbu	r2,276(fp)
								  AD9361_RXFIRConfig fir_cfg)
{
	int32_t ret;

	phy->rx_fir_dec = fir_cfg.rx_dec;
	ret = ad9361_load_fir_filter_coef(phy, (enum fir_dest)(fir_cfg.rx | FIR_IS_RX),
   13194:	10c03fcc 	andi	r3,r2,255
   13198:	e0800504 	addi	r2,fp,20
   1319c:	d8800015 	stw	r2,0(sp)
   131a0:	e13fff17 	ldw	r4,-4(fp)
   131a4:	180f883a 	mov	r7,r3
   131a8:	000cfa00 	call	cfa0 <ad9361_load_fir_filter_coef>
   131ac:	e0bffe15 	stw	r2,-8(fp)
			fir_cfg.rx_gain, fir_cfg.rx_coef_size, fir_cfg.rx_coef);

	return ret;
   131b0:	e0bffe17 	ldw	r2,-8(fp)
}
   131b4:	e037883a 	mov	sp,fp
   131b8:	dfc00117 	ldw	ra,4(sp)
   131bc:	df000017 	ldw	fp,0(sp)
   131c0:	dec00504 	addi	sp,sp,20
   131c4:	f800283a 	ret

000131c8 <ad9361_get_rx_fir_config>:
 * 				 RX2 (1)
 * @param fir_cfg FIR filter configuration output file.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_get_rx_fir_config(struct ad9361_rf_phy *phy, uint8_t rx_ch, AD9361_RXFIRConfig *fir_cfg)
{
   131c8:	defff804 	addi	sp,sp,-32
   131cc:	de00012e 	bgeu	sp,et,131d4 <ad9361_get_rx_fir_config+0xc>
   131d0:	003b68fa 	trap	3
   131d4:	dfc00715 	stw	ra,28(sp)
   131d8:	df000615 	stw	fp,24(sp)
   131dc:	df000604 	addi	fp,sp,24
   131e0:	e13ffd15 	stw	r4,-12(fp)
   131e4:	2805883a 	mov	r2,r5
   131e8:	e1bfff15 	stw	r6,-4(fp)
   131ec:	e0bffe05 	stb	r2,-8(fp)
	int32_t ret;
	uint32_t fir_conf;
	uint8_t index;

	rx_ch += 1;
   131f0:	e0bffe03 	ldbu	r2,-8(fp)
   131f4:	10800044 	addi	r2,r2,1
   131f8:	e0bffe05 	stb	r2,-8(fp)

	ret = ad9361_spi_read(phy->spi, REG_RX_FILTER_CONFIG);
   131fc:	e0bffd17 	ldw	r2,-12(fp)
   13200:	10800117 	ldw	r2,4(r2)
   13204:	1009883a 	mov	r4,r2
   13208:	01403d44 	movi	r5,245
   1320c:	00001500 	call	150 <ad9361_spi_read>
   13210:	e0bffb15 	stw	r2,-20(fp)
	if(ret < 0)
   13214:	e0bffb17 	ldw	r2,-20(fp)
   13218:	1000020e 	bge	r2,zero,13224 <ad9361_get_rx_fir_config+0x5c>
		return ret;
   1321c:	e0bffb17 	ldw	r2,-20(fp)
   13220:	00007c06 	br	13414 <ad9361_get_rx_fir_config+0x24c>
	fir_conf = ret;
   13224:	e0bffb17 	ldw	r2,-20(fp)
   13228:	e0bffc15 	stw	r2,-16(fp)

	fir_cfg->rx_coef_size = (((fir_conf & FIR_NUM_TAPS(7)) >> 5) + 1) * 16;
   1322c:	e0bffc17 	ldw	r2,-16(fp)
   13230:	1080380c 	andi	r2,r2,224
   13234:	1004d17a 	srli	r2,r2,5
   13238:	10800044 	addi	r2,r2,1
   1323c:	1004913a 	slli	r2,r2,4
   13240:	1007883a 	mov	r3,r2
   13244:	e0bfff17 	ldw	r2,-4(fp)
   13248:	10c04305 	stb	r3,268(r2)

	ret = ad9361_spi_read(phy->spi, REG_RX_FILTER_GAIN);
   1324c:	e0bffd17 	ldw	r2,-12(fp)
   13250:	10800117 	ldw	r2,4(r2)
   13254:	1009883a 	mov	r4,r2
   13258:	01403d84 	movi	r5,246
   1325c:	00001500 	call	150 <ad9361_spi_read>
   13260:	e0bffb15 	stw	r2,-20(fp)
	if(ret < 0)
   13264:	e0bffb17 	ldw	r2,-20(fp)
   13268:	1000020e 	bge	r2,zero,13274 <ad9361_get_rx_fir_config+0xac>
		return ret;
   1326c:	e0bffb17 	ldw	r2,-20(fp)
   13270:	00006806 	br	13414 <ad9361_get_rx_fir_config+0x24c>
	fir_cfg->rx_gain = -6 * (ret & FILTER_GAIN(3)) + 6;
   13274:	e0bffb17 	ldw	r2,-20(fp)
   13278:	108000cc 	andi	r2,r2,3
   1327c:	10bffea4 	muli	r2,r2,-6
   13280:	10c00184 	addi	r3,r2,6
   13284:	e0bfff17 	ldw	r2,-4(fp)
   13288:	10c00115 	stw	r3,4(r2)
	fir_cfg->rx = rx_ch;
   1328c:	e0fffe03 	ldbu	r3,-8(fp)
   13290:	e0bfff17 	ldw	r2,-4(fp)
   13294:	10c00015 	stw	r3,0(r2)

	fir_conf &= ~FIR_SELECT(3);
   13298:	e0fffc17 	ldw	r3,-16(fp)
   1329c:	00bff9c4 	movi	r2,-25
   132a0:	1884703a 	and	r2,r3,r2
   132a4:	e0bffc15 	stw	r2,-16(fp)
	fir_conf |= FIR_SELECT(rx_ch) | FIR_START_CLK;
   132a8:	e0bffe03 	ldbu	r2,-8(fp)
   132ac:	108000cc 	andi	r2,r2,3
   132b0:	100490fa 	slli	r2,r2,3
   132b4:	1007883a 	mov	r3,r2
   132b8:	e0bffc17 	ldw	r2,-16(fp)
   132bc:	1884b03a 	or	r2,r3,r2
   132c0:	10800094 	ori	r2,r2,2
   132c4:	e0bffc15 	stw	r2,-16(fp)
	ad9361_spi_write(phy->spi, REG_RX_FILTER_CONFIG, fir_conf);
   132c8:	e0bffd17 	ldw	r2,-12(fp)
   132cc:	10800117 	ldw	r2,4(r2)
   132d0:	1009883a 	mov	r4,r2
   132d4:	01403d44 	movi	r5,245
   132d8:	e1bffc17 	ldw	r6,-16(fp)
   132dc:	00002600 	call	260 <ad9361_spi_write>

	for(index = 0; index < 128; index++)
   132e0:	e03ffa05 	stb	zero,-24(fp)
   132e4:	00003606 	br	133c0 <ad9361_get_rx_fir_config+0x1f8>
	{
		ad9361_spi_write(phy->spi, REG_RX_FILTER_COEF_ADDR, index);
   132e8:	e0bffd17 	ldw	r2,-12(fp)
   132ec:	10c00117 	ldw	r3,4(r2)
   132f0:	e0bffa03 	ldbu	r2,-24(fp)
   132f4:	1809883a 	mov	r4,r3
   132f8:	01403c04 	movi	r5,240
   132fc:	100d883a 	mov	r6,r2
   13300:	00002600 	call	260 <ad9361_spi_write>
		ret = ad9361_spi_read(phy->spi, REG_RX_FILTER_COEF_READ_DATA_1);
   13304:	e0bffd17 	ldw	r2,-12(fp)
   13308:	10800117 	ldw	r2,4(r2)
   1330c:	1009883a 	mov	r4,r2
   13310:	01403cc4 	movi	r5,243
   13314:	00001500 	call	150 <ad9361_spi_read>
   13318:	e0bffb15 	stw	r2,-20(fp)
		if(ret < 0)
   1331c:	e0bffb17 	ldw	r2,-20(fp)
   13320:	1000020e 	bge	r2,zero,1332c <ad9361_get_rx_fir_config+0x164>
			return ret;
   13324:	e0bffb17 	ldw	r2,-20(fp)
   13328:	00003a06 	br	13414 <ad9361_get_rx_fir_config+0x24c>
		fir_cfg->rx_coef[index] = ret;
   1332c:	e0bffa03 	ldbu	r2,-24(fp)
   13330:	e0fffb17 	ldw	r3,-20(fp)
   13334:	1809883a 	mov	r4,r3
   13338:	e0ffff17 	ldw	r3,-4(fp)
   1333c:	10800184 	addi	r2,r2,6
   13340:	1085883a 	add	r2,r2,r2
   13344:	1885883a 	add	r2,r3,r2
   13348:	1100000d 	sth	r4,0(r2)
		ret = ad9361_spi_read(phy->spi, REG_RX_FILTER_COEF_READ_DATA_2);
   1334c:	e0bffd17 	ldw	r2,-12(fp)
   13350:	10800117 	ldw	r2,4(r2)
   13354:	1009883a 	mov	r4,r2
   13358:	01403d04 	movi	r5,244
   1335c:	00001500 	call	150 <ad9361_spi_read>
   13360:	e0bffb15 	stw	r2,-20(fp)
		if(ret < 0)
   13364:	e0bffb17 	ldw	r2,-20(fp)
   13368:	1000020e 	bge	r2,zero,13374 <ad9361_get_rx_fir_config+0x1ac>
			return ret;
   1336c:	e0bffb17 	ldw	r2,-20(fp)
   13370:	00002806 	br	13414 <ad9361_get_rx_fir_config+0x24c>
		fir_cfg->rx_coef[index] |= (ret << 8);
   13374:	e13ffa03 	ldbu	r4,-24(fp)
   13378:	e0bffa03 	ldbu	r2,-24(fp)
   1337c:	e0ffff17 	ldw	r3,-4(fp)
   13380:	10800184 	addi	r2,r2,6
   13384:	1085883a 	add	r2,r2,r2
   13388:	1885883a 	add	r2,r3,r2
   1338c:	1080000b 	ldhu	r2,0(r2)
   13390:	e0fffb17 	ldw	r3,-20(fp)
   13394:	1806923a 	slli	r3,r3,8
   13398:	10c4b03a 	or	r2,r2,r3
   1339c:	100b883a 	mov	r5,r2
   133a0:	e0ffff17 	ldw	r3,-4(fp)
   133a4:	20800184 	addi	r2,r4,6
   133a8:	1085883a 	add	r2,r2,r2
   133ac:	1885883a 	add	r2,r3,r2
   133b0:	1140000d 	sth	r5,0(r2)

	fir_conf &= ~FIR_SELECT(3);
	fir_conf |= FIR_SELECT(rx_ch) | FIR_START_CLK;
	ad9361_spi_write(phy->spi, REG_RX_FILTER_CONFIG, fir_conf);

	for(index = 0; index < 128; index++)
   133b4:	e0bffa03 	ldbu	r2,-24(fp)
   133b8:	10800044 	addi	r2,r2,1
   133bc:	e0bffa05 	stb	r2,-24(fp)
   133c0:	e0bffa03 	ldbu	r2,-24(fp)
   133c4:	10803fcc 	andi	r2,r2,255
   133c8:	1080201c 	xori	r2,r2,128
   133cc:	10bfe004 	addi	r2,r2,-128
   133d0:	103fc50e 	bge	r2,zero,132e8 <_gp+0xfffe11c8>
		if(ret < 0)
			return ret;
		fir_cfg->rx_coef[index] |= (ret << 8);
	}

	fir_conf &= ~FIR_START_CLK;
   133d4:	e0fffc17 	ldw	r3,-16(fp)
   133d8:	00bfff44 	movi	r2,-3
   133dc:	1884703a 	and	r2,r3,r2
   133e0:	e0bffc15 	stw	r2,-16(fp)
	ad9361_spi_write(phy->spi, REG_RX_FILTER_CONFIG, fir_conf);
   133e4:	e0bffd17 	ldw	r2,-12(fp)
   133e8:	10800117 	ldw	r2,4(r2)
   133ec:	1009883a 	mov	r4,r2
   133f0:	01403d44 	movi	r5,245
   133f4:	e1bffc17 	ldw	r6,-16(fp)
   133f8:	00002600 	call	260 <ad9361_spi_write>

	fir_cfg->rx_dec = phy->rx_fir_dec;
   133fc:	e0bffd17 	ldw	r2,-12(fp)
   13400:	10805e83 	ldbu	r2,378(r2)
   13404:	10c03fcc 	andi	r3,r2,255
   13408:	e0bfff17 	ldw	r2,-4(fp)
   1340c:	10c00215 	stw	r3,8(r2)

	return 0;
   13410:	0005883a 	mov	r2,zero
}
   13414:	e037883a 	mov	sp,fp
   13418:	dfc00117 	ldw	ra,4(sp)
   1341c:	df000017 	ldw	fp,0(sp)
   13420:	dec00204 	addi	sp,sp,8
   13424:	f800283a 	ret

00013428 <ad9361_set_rx_fir_en_dis>:
 *
 * Note: This function will/may affect the data path.
 */
int32_t ad9361_set_rx_fir_en_dis (struct ad9361_rf_phy *phy,
								  uint8_t en_dis)
{
   13428:	defffb04 	addi	sp,sp,-20
   1342c:	de00012e 	bgeu	sp,et,13434 <ad9361_set_rx_fir_en_dis+0xc>
   13430:	003b68fa 	trap	3
   13434:	dfc00415 	stw	ra,16(sp)
   13438:	df000315 	stw	fp,12(sp)
   1343c:	df000304 	addi	fp,sp,12
   13440:	e13ffe15 	stw	r4,-8(fp)
   13444:	2805883a 	mov	r2,r5
   13448:	e0bfff05 	stb	r2,-4(fp)
	int32_t ret = 0;
   1344c:	e03ffd15 	stw	zero,-12(fp)

	if(phy->bypass_rx_fir == !en_dis)
   13450:	e0bffe17 	ldw	r2,-8(fp)
   13454:	10804f03 	ldbu	r2,316(r2)
   13458:	10c03fcc 	andi	r3,r2,255
   1345c:	e0bfff03 	ldbu	r2,-4(fp)
   13460:	1005003a 	cmpeq	r2,r2,zero
   13464:	10803fcc 	andi	r2,r2,255
   13468:	1880021e 	bne	r3,r2,13474 <ad9361_set_rx_fir_en_dis+0x4c>
		return ret;
   1346c:	e0bffd17 	ldw	r2,-12(fp)
   13470:	00000e06 	br	134ac <ad9361_set_rx_fir_en_dis+0x84>

	phy->bypass_rx_fir = !en_dis;
   13474:	e0bfff03 	ldbu	r2,-4(fp)
   13478:	1005003a 	cmpeq	r2,r2,zero
   1347c:	1007883a 	mov	r3,r2
   13480:	e0bffe17 	ldw	r2,-8(fp)
   13484:	10c04f05 	stb	r3,316(r2)
	ret = ad9361_validate_enable_fir(phy);
   13488:	e13ffe17 	ldw	r4,-8(fp)
   1348c:	000d4780 	call	d478 <ad9361_validate_enable_fir>
   13490:	e0bffd15 	stw	r2,-12(fp)
	if (ret < 0) {
   13494:	e0bffd17 	ldw	r2,-12(fp)
   13498:	1000030e 	bge	r2,zero,134a8 <ad9361_set_rx_fir_en_dis+0x80>
		phy->bypass_rx_fir = true;
   1349c:	e0bffe17 	ldw	r2,-8(fp)
   134a0:	00c00044 	movi	r3,1
   134a4:	10c04f05 	stb	r3,316(r2)
	}

	return ret;
   134a8:	e0bffd17 	ldw	r2,-12(fp)
}
   134ac:	e037883a 	mov	sp,fp
   134b0:	dfc00117 	ldw	ra,4(sp)
   134b4:	df000017 	ldw	fp,0(sp)
   134b8:	dec00204 	addi	sp,sp,8
   134bc:	f800283a 	ret

000134c0 <ad9361_get_rx_fir_en_dis>:
 * @param en_dis The enable/disable status buffer.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_get_rx_fir_en_dis (struct ad9361_rf_phy *phy,
								  uint8_t *en_dis)
{
   134c0:	defffd04 	addi	sp,sp,-12
   134c4:	de00012e 	bgeu	sp,et,134cc <ad9361_get_rx_fir_en_dis+0xc>
   134c8:	003b68fa 	trap	3
   134cc:	df000215 	stw	fp,8(sp)
   134d0:	df000204 	addi	fp,sp,8
   134d4:	e13ffe15 	stw	r4,-8(fp)
   134d8:	e17fff15 	stw	r5,-4(fp)
	*en_dis = !phy->bypass_rx_fir;
   134dc:	e0bffe17 	ldw	r2,-8(fp)
   134e0:	10804f03 	ldbu	r2,316(r2)
   134e4:	1080005c 	xori	r2,r2,1
   134e8:	1007883a 	mov	r3,r2
   134ec:	e0bfff17 	ldw	r2,-4(fp)
   134f0:	10c00005 	stb	r3,0(r2)

	return 0;
   134f4:	0005883a 	mov	r2,zero
}
   134f8:	e037883a 	mov	sp,fp
   134fc:	df000017 	ldw	fp,0(sp)
   13500:	dec00104 	addi	sp,sp,4
   13504:	f800283a 	ret

00013508 <ad9361_set_rx_rfdc_track_en_dis>:
 * 				  DISABLE (0)
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_set_rx_rfdc_track_en_dis (struct ad9361_rf_phy *phy,
										 uint8_t en_dis)
{
   13508:	defffb04 	addi	sp,sp,-20
   1350c:	de00012e 	bgeu	sp,et,13514 <ad9361_set_rx_rfdc_track_en_dis+0xc>
   13510:	003b68fa 	trap	3
   13514:	dfc00415 	stw	ra,16(sp)
   13518:	df000315 	stw	fp,12(sp)
   1351c:	df000304 	addi	fp,sp,12
   13520:	e13ffe15 	stw	r4,-8(fp)
   13524:	2805883a 	mov	r2,r5
   13528:	e0bfff05 	stb	r2,-4(fp)
	int32_t ret = 0;
   1352c:	e03ffd15 	stw	zero,-12(fp)

	if(phy->rfdc_track_en == en_dis)
   13530:	e0bffe17 	ldw	r2,-8(fp)
   13534:	10805f83 	ldbu	r2,382(r2)
   13538:	10c03fcc 	andi	r3,r2,255
   1353c:	e0bfff03 	ldbu	r2,-4(fp)
   13540:	1880021e 	bne	r3,r2,1354c <ad9361_set_rx_rfdc_track_en_dis+0x44>
		return ret;
   13544:	e0bffd17 	ldw	r2,-12(fp)
   13548:	00001406 	br	1359c <ad9361_set_rx_rfdc_track_en_dis+0x94>

	phy->rfdc_track_en = en_dis;
   1354c:	e0bfff03 	ldbu	r2,-4(fp)
   13550:	1004c03a 	cmpne	r2,r2,zero
   13554:	1007883a 	mov	r3,r2
   13558:	e0bffe17 	ldw	r2,-8(fp)
   1355c:	10c05f85 	stb	r3,382(r2)
	ret = ad9361_tracking_control(phy, phy->bbdc_track_en,
   13560:	e0bffe17 	ldw	r2,-8(fp)
   13564:	10805fc3 	ldbu	r2,383(r2)
   13568:	11403fcc 	andi	r5,r2,255
		phy->rfdc_track_en, phy->quad_track_en);
   1356c:	e0bffe17 	ldw	r2,-8(fp)
   13570:	10805f83 	ldbu	r2,382(r2)

	if(phy->rfdc_track_en == en_dis)
		return ret;

	phy->rfdc_track_en = en_dis;
	ret = ad9361_tracking_control(phy, phy->bbdc_track_en,
   13574:	10c03fcc 	andi	r3,r2,255
		phy->rfdc_track_en, phy->quad_track_en);
   13578:	e0bffe17 	ldw	r2,-8(fp)
   1357c:	10806003 	ldbu	r2,384(r2)

	if(phy->rfdc_track_en == en_dis)
		return ret;

	phy->rfdc_track_en = en_dis;
	ret = ad9361_tracking_control(phy, phy->bbdc_track_en,
   13580:	10803fcc 	andi	r2,r2,255
   13584:	e13ffe17 	ldw	r4,-8(fp)
   13588:	180d883a 	mov	r6,r3
   1358c:	100f883a 	mov	r7,r2
   13590:	00061d80 	call	61d8 <ad9361_tracking_control>
   13594:	e0bffd15 	stw	r2,-12(fp)
		phy->rfdc_track_en, phy->quad_track_en);

	return ret;
   13598:	e0bffd17 	ldw	r2,-12(fp)
}
   1359c:	e037883a 	mov	sp,fp
   135a0:	dfc00117 	ldw	ra,4(sp)
   135a4:	df000017 	ldw	fp,0(sp)
   135a8:	dec00204 	addi	sp,sp,8
   135ac:	f800283a 	ret

000135b0 <ad9361_get_rx_rfdc_track_en_dis>:
 * @param en_dis The enable/disable status buffer.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_get_rx_rfdc_track_en_dis (struct ad9361_rf_phy *phy,
										 uint8_t *en_dis)
{
   135b0:	defffd04 	addi	sp,sp,-12
   135b4:	de00012e 	bgeu	sp,et,135bc <ad9361_get_rx_rfdc_track_en_dis+0xc>
   135b8:	003b68fa 	trap	3
   135bc:	df000215 	stw	fp,8(sp)
   135c0:	df000204 	addi	fp,sp,8
   135c4:	e13ffe15 	stw	r4,-8(fp)
   135c8:	e17fff15 	stw	r5,-4(fp)
	*en_dis = phy->rfdc_track_en;
   135cc:	e0bffe17 	ldw	r2,-8(fp)
   135d0:	10805f83 	ldbu	r2,382(r2)
   135d4:	1007883a 	mov	r3,r2
   135d8:	e0bfff17 	ldw	r2,-4(fp)
   135dc:	10c00005 	stb	r3,0(r2)

	return 0;
   135e0:	0005883a 	mov	r2,zero
}
   135e4:	e037883a 	mov	sp,fp
   135e8:	df000017 	ldw	fp,0(sp)
   135ec:	dec00104 	addi	sp,sp,4
   135f0:	f800283a 	ret

000135f4 <ad9361_set_rx_bbdc_track_en_dis>:
 * 				  DISABLE (0)
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_set_rx_bbdc_track_en_dis (struct ad9361_rf_phy *phy,
										 uint8_t en_dis)
{
   135f4:	defffb04 	addi	sp,sp,-20
   135f8:	de00012e 	bgeu	sp,et,13600 <ad9361_set_rx_bbdc_track_en_dis+0xc>
   135fc:	003b68fa 	trap	3
   13600:	dfc00415 	stw	ra,16(sp)
   13604:	df000315 	stw	fp,12(sp)
   13608:	df000304 	addi	fp,sp,12
   1360c:	e13ffe15 	stw	r4,-8(fp)
   13610:	2805883a 	mov	r2,r5
   13614:	e0bfff05 	stb	r2,-4(fp)
	int32_t ret = 0;
   13618:	e03ffd15 	stw	zero,-12(fp)

	if(phy->bbdc_track_en == en_dis)
   1361c:	e0bffe17 	ldw	r2,-8(fp)
   13620:	10805fc3 	ldbu	r2,383(r2)
   13624:	10c03fcc 	andi	r3,r2,255
   13628:	e0bfff03 	ldbu	r2,-4(fp)
   1362c:	1880021e 	bne	r3,r2,13638 <ad9361_set_rx_bbdc_track_en_dis+0x44>
		return ret;
   13630:	e0bffd17 	ldw	r2,-12(fp)
   13634:	00001406 	br	13688 <ad9361_set_rx_bbdc_track_en_dis+0x94>

	phy->bbdc_track_en = en_dis;
   13638:	e0bfff03 	ldbu	r2,-4(fp)
   1363c:	1004c03a 	cmpne	r2,r2,zero
   13640:	1007883a 	mov	r3,r2
   13644:	e0bffe17 	ldw	r2,-8(fp)
   13648:	10c05fc5 	stb	r3,383(r2)
	ret = ad9361_tracking_control(phy, phy->bbdc_track_en,
   1364c:	e0bffe17 	ldw	r2,-8(fp)
   13650:	10805fc3 	ldbu	r2,383(r2)
   13654:	11403fcc 	andi	r5,r2,255
		phy->rfdc_track_en, phy->quad_track_en);
   13658:	e0bffe17 	ldw	r2,-8(fp)
   1365c:	10805f83 	ldbu	r2,382(r2)

	if(phy->bbdc_track_en == en_dis)
		return ret;

	phy->bbdc_track_en = en_dis;
	ret = ad9361_tracking_control(phy, phy->bbdc_track_en,
   13660:	10c03fcc 	andi	r3,r2,255
		phy->rfdc_track_en, phy->quad_track_en);
   13664:	e0bffe17 	ldw	r2,-8(fp)
   13668:	10806003 	ldbu	r2,384(r2)

	if(phy->bbdc_track_en == en_dis)
		return ret;

	phy->bbdc_track_en = en_dis;
	ret = ad9361_tracking_control(phy, phy->bbdc_track_en,
   1366c:	10803fcc 	andi	r2,r2,255
   13670:	e13ffe17 	ldw	r4,-8(fp)
   13674:	180d883a 	mov	r6,r3
   13678:	100f883a 	mov	r7,r2
   1367c:	00061d80 	call	61d8 <ad9361_tracking_control>
   13680:	e0bffd15 	stw	r2,-12(fp)
		phy->rfdc_track_en, phy->quad_track_en);

	return ret;
   13684:	e0bffd17 	ldw	r2,-12(fp)
}
   13688:	e037883a 	mov	sp,fp
   1368c:	dfc00117 	ldw	ra,4(sp)
   13690:	df000017 	ldw	fp,0(sp)
   13694:	dec00204 	addi	sp,sp,8
   13698:	f800283a 	ret

0001369c <ad9361_get_rx_bbdc_track_en_dis>:
 * @param en_dis The enable/disable status buffer.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_get_rx_bbdc_track_en_dis (struct ad9361_rf_phy *phy,
										 uint8_t *en_dis)
{
   1369c:	defffd04 	addi	sp,sp,-12
   136a0:	de00012e 	bgeu	sp,et,136a8 <ad9361_get_rx_bbdc_track_en_dis+0xc>
   136a4:	003b68fa 	trap	3
   136a8:	df000215 	stw	fp,8(sp)
   136ac:	df000204 	addi	fp,sp,8
   136b0:	e13ffe15 	stw	r4,-8(fp)
   136b4:	e17fff15 	stw	r5,-4(fp)
	*en_dis = phy->bbdc_track_en;
   136b8:	e0bffe17 	ldw	r2,-8(fp)
   136bc:	10805fc3 	ldbu	r2,383(r2)
   136c0:	1007883a 	mov	r3,r2
   136c4:	e0bfff17 	ldw	r2,-4(fp)
   136c8:	10c00005 	stb	r3,0(r2)

	return 0;
   136cc:	0005883a 	mov	r2,zero
}
   136d0:	e037883a 	mov	sp,fp
   136d4:	df000017 	ldw	fp,0(sp)
   136d8:	dec00104 	addi	sp,sp,4
   136dc:	f800283a 	ret

000136e0 <ad9361_set_rx_quad_track_en_dis>:
 * 				  DISABLE (0)
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_set_rx_quad_track_en_dis (struct ad9361_rf_phy *phy,
										 uint8_t en_dis)
{
   136e0:	defffb04 	addi	sp,sp,-20
   136e4:	de00012e 	bgeu	sp,et,136ec <ad9361_set_rx_quad_track_en_dis+0xc>
   136e8:	003b68fa 	trap	3
   136ec:	dfc00415 	stw	ra,16(sp)
   136f0:	df000315 	stw	fp,12(sp)
   136f4:	df000304 	addi	fp,sp,12
   136f8:	e13ffe15 	stw	r4,-8(fp)
   136fc:	2805883a 	mov	r2,r5
   13700:	e0bfff05 	stb	r2,-4(fp)
	int32_t ret = 0;
   13704:	e03ffd15 	stw	zero,-12(fp)

	if(phy->quad_track_en == en_dis)
   13708:	e0bffe17 	ldw	r2,-8(fp)
   1370c:	10806003 	ldbu	r2,384(r2)
   13710:	10c03fcc 	andi	r3,r2,255
   13714:	e0bfff03 	ldbu	r2,-4(fp)
   13718:	1880021e 	bne	r3,r2,13724 <ad9361_set_rx_quad_track_en_dis+0x44>
		return ret;
   1371c:	e0bffd17 	ldw	r2,-12(fp)
   13720:	00001406 	br	13774 <ad9361_set_rx_quad_track_en_dis+0x94>

	phy->quad_track_en = en_dis;
   13724:	e0bfff03 	ldbu	r2,-4(fp)
   13728:	1004c03a 	cmpne	r2,r2,zero
   1372c:	1007883a 	mov	r3,r2
   13730:	e0bffe17 	ldw	r2,-8(fp)
   13734:	10c06005 	stb	r3,384(r2)
	ret = ad9361_tracking_control(phy, phy->bbdc_track_en,
   13738:	e0bffe17 	ldw	r2,-8(fp)
   1373c:	10805fc3 	ldbu	r2,383(r2)
   13740:	11403fcc 	andi	r5,r2,255
		phy->rfdc_track_en, phy->quad_track_en);
   13744:	e0bffe17 	ldw	r2,-8(fp)
   13748:	10805f83 	ldbu	r2,382(r2)

	if(phy->quad_track_en == en_dis)
		return ret;

	phy->quad_track_en = en_dis;
	ret = ad9361_tracking_control(phy, phy->bbdc_track_en,
   1374c:	10c03fcc 	andi	r3,r2,255
		phy->rfdc_track_en, phy->quad_track_en);
   13750:	e0bffe17 	ldw	r2,-8(fp)
   13754:	10806003 	ldbu	r2,384(r2)

	if(phy->quad_track_en == en_dis)
		return ret;

	phy->quad_track_en = en_dis;
	ret = ad9361_tracking_control(phy, phy->bbdc_track_en,
   13758:	10803fcc 	andi	r2,r2,255
   1375c:	e13ffe17 	ldw	r4,-8(fp)
   13760:	180d883a 	mov	r6,r3
   13764:	100f883a 	mov	r7,r2
   13768:	00061d80 	call	61d8 <ad9361_tracking_control>
   1376c:	e0bffd15 	stw	r2,-12(fp)
		phy->rfdc_track_en, phy->quad_track_en);

	return ret;
   13770:	e0bffd17 	ldw	r2,-12(fp)
}
   13774:	e037883a 	mov	sp,fp
   13778:	dfc00117 	ldw	ra,4(sp)
   1377c:	df000017 	ldw	fp,0(sp)
   13780:	dec00204 	addi	sp,sp,8
   13784:	f800283a 	ret

00013788 <ad9361_get_rx_quad_track_en_dis>:
 * @param en_dis The enable/disable status buffer.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_get_rx_quad_track_en_dis (struct ad9361_rf_phy *phy,
										 uint8_t *en_dis)
{
   13788:	defffd04 	addi	sp,sp,-12
   1378c:	de00012e 	bgeu	sp,et,13794 <ad9361_get_rx_quad_track_en_dis+0xc>
   13790:	003b68fa 	trap	3
   13794:	df000215 	stw	fp,8(sp)
   13798:	df000204 	addi	fp,sp,8
   1379c:	e13ffe15 	stw	r4,-8(fp)
   137a0:	e17fff15 	stw	r5,-4(fp)
	*en_dis = phy->quad_track_en;
   137a4:	e0bffe17 	ldw	r2,-8(fp)
   137a8:	10806003 	ldbu	r2,384(r2)
   137ac:	1007883a 	mov	r3,r2
   137b0:	e0bfff17 	ldw	r2,-4(fp)
   137b4:	10c00005 	stb	r3,0(r2)

	return 0;
   137b8:	0005883a 	mov	r2,zero
}
   137bc:	e037883a 	mov	sp,fp
   137c0:	df000017 	ldw	fp,0(sp)
   137c4:	dec00104 	addi	sp,sp,4
   137c8:	f800283a 	ret

000137cc <ad9361_set_rx_rf_port_input>:
 *				TX_MON1_2  (11 - TX_MONITOR1 & TX_MONITOR2)
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_set_rx_rf_port_input (struct ad9361_rf_phy *phy,
									 uint32_t mode)
{
   137cc:	defffb04 	addi	sp,sp,-20
   137d0:	de00012e 	bgeu	sp,et,137d8 <ad9361_set_rx_rf_port_input+0xc>
   137d4:	003b68fa 	trap	3
   137d8:	dfc00415 	stw	ra,16(sp)
   137dc:	df000315 	stw	fp,12(sp)
   137e0:	df000304 	addi	fp,sp,12
   137e4:	e13ffe15 	stw	r4,-8(fp)
   137e8:	e17fff15 	stw	r5,-4(fp)
	int32_t ret;

	phy->pdata->rf_rx_input_sel = mode;
   137ec:	e0bffe17 	ldw	r2,-8(fp)
   137f0:	10803017 	ldw	r2,192(r2)
   137f4:	e0ffff17 	ldw	r3,-4(fp)
   137f8:	10c00815 	stw	r3,32(r2)

	ret = ad9361_rf_port_setup(phy, false,
						phy->pdata->rf_rx_input_sel,
   137fc:	e0bffe17 	ldw	r2,-8(fp)
   13800:	10803017 	ldw	r2,192(r2)
{
	int32_t ret;

	phy->pdata->rf_rx_input_sel = mode;

	ret = ad9361_rf_port_setup(phy, false,
   13804:	10c00817 	ldw	r3,32(r2)
						phy->pdata->rf_rx_input_sel,
						phy->pdata->rf_tx_output_sel);
   13808:	e0bffe17 	ldw	r2,-8(fp)
   1380c:	10803017 	ldw	r2,192(r2)
{
	int32_t ret;

	phy->pdata->rf_rx_input_sel = mode;

	ret = ad9361_rf_port_setup(phy, false,
   13810:	10800917 	ldw	r2,36(r2)
   13814:	e13ffe17 	ldw	r4,-8(fp)
   13818:	000b883a 	mov	r5,zero
   1381c:	180d883a 	mov	r6,r3
   13820:	100f883a 	mov	r7,r2
   13824:	0006c100 	call	6c10 <ad9361_rf_port_setup>
   13828:	e0bffd15 	stw	r2,-12(fp)
						phy->pdata->rf_rx_input_sel,
						phy->pdata->rf_tx_output_sel);

	return ret;
   1382c:	e0bffd17 	ldw	r2,-12(fp)
}
   13830:	e037883a 	mov	sp,fp
   13834:	dfc00117 	ldw	ra,4(sp)
   13838:	df000017 	ldw	fp,0(sp)
   1383c:	dec00204 	addi	sp,sp,8
   13840:	f800283a 	ret

00013844 <ad9361_get_rx_rf_port_input>:
 * @param mode The RF port.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_get_rx_rf_port_input (struct ad9361_rf_phy *phy,
									 uint32_t *mode)
{
   13844:	defffd04 	addi	sp,sp,-12
   13848:	de00012e 	bgeu	sp,et,13850 <ad9361_get_rx_rf_port_input+0xc>
   1384c:	003b68fa 	trap	3
   13850:	df000215 	stw	fp,8(sp)
   13854:	df000204 	addi	fp,sp,8
   13858:	e13ffe15 	stw	r4,-8(fp)
   1385c:	e17fff15 	stw	r5,-4(fp)
	*mode = phy->pdata->rf_rx_input_sel;
   13860:	e0bffe17 	ldw	r2,-8(fp)
   13864:	10803017 	ldw	r2,192(r2)
   13868:	10c00817 	ldw	r3,32(r2)
   1386c:	e0bfff17 	ldw	r2,-4(fp)
   13870:	10c00015 	stw	r3,0(r2)

	return 0;
   13874:	0005883a 	mov	r2,zero
}
   13878:	e037883a 	mov	sp,fp
   1387c:	df000017 	ldw	fp,0(sp)
   13880:	dec00104 	addi	sp,sp,4
   13884:	f800283a 	ret

00013888 <ad9361_rx_fastlock_store>:
 * 				  Accepted values:
 * 				   0 - 7
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_rx_fastlock_store(struct ad9361_rf_phy *phy, uint32_t profile)
{
   13888:	defffc04 	addi	sp,sp,-16
   1388c:	de00012e 	bgeu	sp,et,13894 <ad9361_rx_fastlock_store+0xc>
   13890:	003b68fa 	trap	3
   13894:	dfc00315 	stw	ra,12(sp)
   13898:	df000215 	stw	fp,8(sp)
   1389c:	df000204 	addi	fp,sp,8
   138a0:	e13ffe15 	stw	r4,-8(fp)
   138a4:	e17fff15 	stw	r5,-4(fp)
	return ad9361_fastlock_store(phy, 0, profile);
   138a8:	e13ffe17 	ldw	r4,-8(fp)
   138ac:	000b883a 	mov	r5,zero
   138b0:	e1bfff17 	ldw	r6,-4(fp)
   138b4:	000ac5c0 	call	ac5c <ad9361_fastlock_store>
}
   138b8:	e037883a 	mov	sp,fp
   138bc:	dfc00117 	ldw	ra,4(sp)
   138c0:	df000017 	ldw	fp,0(sp)
   138c4:	dec00204 	addi	sp,sp,8
   138c8:	f800283a 	ret

000138cc <ad9361_rx_fastlock_recall>:
 * 				  Accepted values:
 * 				   0 - 7
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_rx_fastlock_recall(struct ad9361_rf_phy *phy, uint32_t profile)
{
   138cc:	defffc04 	addi	sp,sp,-16
   138d0:	de00012e 	bgeu	sp,et,138d8 <ad9361_rx_fastlock_recall+0xc>
   138d4:	003b68fa 	trap	3
   138d8:	dfc00315 	stw	ra,12(sp)
   138dc:	df000215 	stw	fp,8(sp)
   138e0:	df000204 	addi	fp,sp,8
   138e4:	e13ffe15 	stw	r4,-8(fp)
   138e8:	e17fff15 	stw	r5,-4(fp)
	return ad9361_fastlock_recall(phy, 0, profile);
   138ec:	e13ffe17 	ldw	r4,-8(fp)
   138f0:	000b883a 	mov	r5,zero
   138f4:	e1bfff17 	ldw	r6,-4(fp)
   138f8:	000b46c0 	call	b46c <ad9361_fastlock_recall>
}
   138fc:	e037883a 	mov	sp,fp
   13900:	dfc00117 	ldw	ra,4(sp)
   13904:	df000017 	ldw	fp,0(sp)
   13908:	dec00204 	addi	sp,sp,8
   1390c:	f800283a 	ret

00013910 <ad9361_rx_fastlock_load>:
 * 				 Example:
 * 				  val0,val1,val2,,val15
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_rx_fastlock_load(struct ad9361_rf_phy *phy, uint32_t profile, uint8_t *values)
{
   13910:	defffb04 	addi	sp,sp,-20
   13914:	de00012e 	bgeu	sp,et,1391c <ad9361_rx_fastlock_load+0xc>
   13918:	003b68fa 	trap	3
   1391c:	dfc00415 	stw	ra,16(sp)
   13920:	df000315 	stw	fp,12(sp)
   13924:	df000304 	addi	fp,sp,12
   13928:	e13ffd15 	stw	r4,-12(fp)
   1392c:	e17ffe15 	stw	r5,-8(fp)
   13930:	e1bfff15 	stw	r6,-4(fp)
	return ad9361_fastlock_load(phy, 0, profile, values);
   13934:	e13ffd17 	ldw	r4,-12(fp)
   13938:	000b883a 	mov	r5,zero
   1393c:	e1bffe17 	ldw	r6,-8(fp)
   13940:	e1ffff17 	ldw	r7,-4(fp)
   13944:	000aa1c0 	call	aa1c <ad9361_fastlock_load>
}
   13948:	e037883a 	mov	sp,fp
   1394c:	dfc00117 	ldw	ra,4(sp)
   13950:	df000017 	ldw	fp,0(sp)
   13954:	dec00204 	addi	sp,sp,8
   13958:	f800283a 	ret

0001395c <ad9361_rx_fastlock_save>:
 * 				   0 - 7
 * @param values Fastlock profile program data.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_rx_fastlock_save(struct ad9361_rf_phy *phy, uint32_t profile, uint8_t *values)
{
   1395c:	defffb04 	addi	sp,sp,-20
   13960:	de00012e 	bgeu	sp,et,13968 <ad9361_rx_fastlock_save+0xc>
   13964:	003b68fa 	trap	3
   13968:	dfc00415 	stw	ra,16(sp)
   1396c:	df000315 	stw	fp,12(sp)
   13970:	df000304 	addi	fp,sp,12
   13974:	e13ffd15 	stw	r4,-12(fp)
   13978:	e17ffe15 	stw	r5,-8(fp)
   1397c:	e1bfff15 	stw	r6,-4(fp)
	return ad9361_fastlock_save(phy, 0, profile, values);
   13980:	e13ffd17 	ldw	r4,-12(fp)
   13984:	000b883a 	mov	r5,zero
   13988:	e1bffe17 	ldw	r6,-8(fp)
   1398c:	e1ffff17 	ldw	r7,-4(fp)
   13990:	000b8000 	call	b800 <ad9361_fastlock_save>
}
   13994:	e037883a 	mov	sp,fp
   13998:	dfc00117 	ldw	ra,4(sp)
   1399c:	df000017 	ldw	fp,0(sp)
   139a0:	dec00204 	addi	sp,sp,8
   139a4:	f800283a 	ret

000139a8 <ad9361_set_tx_attenuation>:
 * 						   10000 (10 dB)
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_set_tx_attenuation (struct ad9361_rf_phy *phy,
								   uint8_t ch, uint32_t attenuation_mdb)
{
   139a8:	defff804 	addi	sp,sp,-32
   139ac:	de00012e 	bgeu	sp,et,139b4 <ad9361_set_tx_attenuation+0xc>
   139b0:	003b68fa 	trap	3
   139b4:	dfc00715 	stw	ra,28(sp)
   139b8:	df000615 	stw	fp,24(sp)
   139bc:	df000604 	addi	fp,sp,24
   139c0:	e13ffd15 	stw	r4,-12(fp)
   139c4:	2805883a 	mov	r2,r5
   139c8:	e1bfff15 	stw	r6,-4(fp)
   139cc:	e0bffe05 	stb	r2,-8(fp)
	int32_t ret;
	int32_t channel;

	if ((phy->pdata->rx2tx2 == 0) && (ch == TX2)) {
   139d0:	e0bffd17 	ldw	r2,-12(fp)
   139d4:	10803017 	ldw	r2,192(r2)
   139d8:	10800003 	ldbu	r2,0(r2)
   139dc:	1080005c 	xori	r2,r2,1
   139e0:	10803fcc 	andi	r2,r2,255
   139e4:	10000a26 	beq	r2,zero,13a10 <ad9361_set_tx_attenuation+0x68>
   139e8:	e0bffe03 	ldbu	r2,-8(fp)
   139ec:	10800058 	cmpnei	r2,r2,1
   139f0:	1000071e 	bne	r2,zero,13a10 <ad9361_set_tx_attenuation+0x68>
		printf("%s : TX2 is an invalid option in 1x1 mode!\n", __func__);
   139f4:	010000f4 	movhi	r4,3
   139f8:	21200904 	addi	r4,r4,-32732
   139fc:	014000f4 	movhi	r5,3
   13a00:	29602d04 	addi	r5,r5,-32588
   13a04:	001f8180 	call	1f818 <printf>
		return -1;
   13a08:	00bfffc4 	movi	r2,-1
   13a0c:	00001c06 	br	13a80 <ad9361_set_tx_attenuation+0xd8>
	}

	channel = ad9361_1rx1tx_channel_map(phy, true, ch);
   13a10:	e0bffe03 	ldbu	r2,-8(fp)
   13a14:	e13ffd17 	ldw	r4,-12(fp)
   13a18:	01400044 	movi	r5,1
   13a1c:	100d883a 	mov	r6,r2
   13a20:	00006000 	call	600 <ad9361_1rx1tx_channel_map>
   13a24:	e0bffb15 	stw	r2,-20(fp)
	ret = ad9361_set_tx_atten(phy, attenuation_mdb,
   13a28:	e0bffb17 	ldw	r2,-20(fp)
   13a2c:	1005003a 	cmpeq	r2,r2,zero
   13a30:	11803fcc 	andi	r6,r2,255
   13a34:	e0bffb17 	ldw	r2,-20(fp)
   13a38:	10800060 	cmpeqi	r2,r2,1
   13a3c:	10c03fcc 	andi	r3,r2,255
			channel == 0, channel == 1,
			!phy->pdata->update_tx_gain_via_alert);
   13a40:	e0bffd17 	ldw	r2,-12(fp)
   13a44:	10803017 	ldw	r2,192(r2)
   13a48:	10802003 	ldbu	r2,128(r2)
   13a4c:	10803fcc 	andi	r2,r2,255
   13a50:	1004c03a 	cmpne	r2,r2,zero
   13a54:	1080005c 	xori	r2,r2,1
   13a58:	10803fcc 	andi	r2,r2,255
   13a5c:	1080004c 	andi	r2,r2,1
		printf("%s : TX2 is an invalid option in 1x1 mode!\n", __func__);
		return -1;
	}

	channel = ad9361_1rx1tx_channel_map(phy, true, ch);
	ret = ad9361_set_tx_atten(phy, attenuation_mdb,
   13a60:	10803fcc 	andi	r2,r2,255
   13a64:	d8800015 	stw	r2,0(sp)
   13a68:	e13ffd17 	ldw	r4,-12(fp)
   13a6c:	e17fff17 	ldw	r5,-4(fp)
   13a70:	180f883a 	mov	r7,r3
   13a74:	00017fc0 	call	17fc <ad9361_set_tx_atten>
   13a78:	e0bffc15 	stw	r2,-16(fp)
			channel == 0, channel == 1,
			!phy->pdata->update_tx_gain_via_alert);

	return ret;
   13a7c:	e0bffc17 	ldw	r2,-16(fp)
}
   13a80:	e037883a 	mov	sp,fp
   13a84:	dfc00117 	ldw	ra,4(sp)
   13a88:	df000017 	ldw	fp,0(sp)
   13a8c:	dec00204 	addi	sp,sp,8
   13a90:	f800283a 	ret

00013a94 <ad9361_get_tx_attenuation>:
 * @param attenuation_mdb A variable to store the attenuation value (mdB).
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_get_tx_attenuation (struct ad9361_rf_phy *phy,
								   uint8_t ch, uint32_t *attenuation_db)
{
   13a94:	defffa04 	addi	sp,sp,-24
   13a98:	de00012e 	bgeu	sp,et,13aa0 <ad9361_get_tx_attenuation+0xc>
   13a9c:	003b68fa 	trap	3
   13aa0:	dfc00515 	stw	ra,20(sp)
   13aa4:	df000415 	stw	fp,16(sp)
   13aa8:	df000404 	addi	fp,sp,16
   13aac:	e13ffd15 	stw	r4,-12(fp)
   13ab0:	2805883a 	mov	r2,r5
   13ab4:	e1bfff15 	stw	r6,-4(fp)
   13ab8:	e0bffe05 	stb	r2,-8(fp)
	int32_t ret;

	if ((phy->pdata->rx2tx2 == 0) && (ch == TX2)) {
   13abc:	e0bffd17 	ldw	r2,-12(fp)
   13ac0:	10803017 	ldw	r2,192(r2)
   13ac4:	10800003 	ldbu	r2,0(r2)
   13ac8:	1080005c 	xori	r2,r2,1
   13acc:	10803fcc 	andi	r2,r2,255
   13ad0:	10000a26 	beq	r2,zero,13afc <ad9361_get_tx_attenuation+0x68>
   13ad4:	e0bffe03 	ldbu	r2,-8(fp)
   13ad8:	10800058 	cmpnei	r2,r2,1
   13adc:	1000071e 	bne	r2,zero,13afc <ad9361_get_tx_attenuation+0x68>
		printf("%s : TX2 is an invalid option in 1x1 mode!\n", __func__);
   13ae0:	010000f4 	movhi	r4,3
   13ae4:	21200904 	addi	r4,r4,-32732
   13ae8:	014000f4 	movhi	r5,3
   13aec:	29603404 	addi	r5,r5,-32560
   13af0:	001f8180 	call	1f818 <printf>
		return -1;
   13af4:	00bfffc4 	movi	r2,-1
   13af8:	00001206 	br	13b44 <ad9361_get_tx_attenuation+0xb0>
	}

	ret = ad9361_get_tx_atten(phy,
			ad9361_1rx1tx_channel_map(phy, true,
   13afc:	e0bffe03 	ldbu	r2,-8(fp)
			ch + 1));
   13b00:	10800044 	addi	r2,r2,1
		printf("%s : TX2 is an invalid option in 1x1 mode!\n", __func__);
		return -1;
	}

	ret = ad9361_get_tx_atten(phy,
			ad9361_1rx1tx_channel_map(phy, true,
   13b04:	e13ffd17 	ldw	r4,-12(fp)
   13b08:	01400044 	movi	r5,1
   13b0c:	100d883a 	mov	r6,r2
   13b10:	00006000 	call	600 <ad9361_1rx1tx_channel_map>
	if ((phy->pdata->rx2tx2 == 0) && (ch == TX2)) {
		printf("%s : TX2 is an invalid option in 1x1 mode!\n", __func__);
		return -1;
	}

	ret = ad9361_get_tx_atten(phy,
   13b14:	e13ffd17 	ldw	r4,-12(fp)
   13b18:	100b883a 	mov	r5,r2
   13b1c:	00019840 	call	1984 <ad9361_get_tx_atten>
   13b20:	e0bffc15 	stw	r2,-16(fp)
			ad9361_1rx1tx_channel_map(phy, true,
			ch + 1));

	if(ret < 0)
   13b24:	e0bffc17 	ldw	r2,-16(fp)
   13b28:	1000020e 	bge	r2,zero,13b34 <ad9361_get_tx_attenuation+0xa0>
		return ret;
   13b2c:	e0bffc17 	ldw	r2,-16(fp)
   13b30:	00000406 	br	13b44 <ad9361_get_tx_attenuation+0xb0>
	*attenuation_db = ret;
   13b34:	e0fffc17 	ldw	r3,-16(fp)
   13b38:	e0bfff17 	ldw	r2,-4(fp)
   13b3c:	10c00015 	stw	r3,0(r2)

	return 0;
   13b40:	0005883a 	mov	r2,zero
}
   13b44:	e037883a 	mov	sp,fp
   13b48:	dfc00117 	ldw	ra,4(sp)
   13b4c:	df000017 	ldw	fp,0(sp)
   13b50:	dec00204 	addi	sp,sp,8
   13b54:	f800283a 	ret

00013b58 <ad9361_set_tx_rf_bandwidth>:
 *
 * Note: This function will/may affect the data path.
 */
int32_t ad9361_set_tx_rf_bandwidth (struct ad9361_rf_phy *phy,
									uint32_t  bandwidth_hz)
{
   13b58:	defffb04 	addi	sp,sp,-20
   13b5c:	de00012e 	bgeu	sp,et,13b64 <ad9361_set_tx_rf_bandwidth+0xc>
   13b60:	003b68fa 	trap	3
   13b64:	dfc00415 	stw	ra,16(sp)
   13b68:	df000315 	stw	fp,12(sp)
   13b6c:	df000304 	addi	fp,sp,12
   13b70:	e13ffe15 	stw	r4,-8(fp)
   13b74:	e17fff15 	stw	r5,-4(fp)
	int32_t ret = 0;
   13b78:	e03ffd15 	stw	zero,-12(fp)

	if (phy->current_tx_bw_Hz != bandwidth_hz)
   13b7c:	e0bffe17 	ldw	r2,-8(fp)
   13b80:	10c04c17 	ldw	r3,304(r2)
   13b84:	e0bfff17 	ldw	r2,-4(fp)
   13b88:	18800826 	beq	r3,r2,13bac <ad9361_set_tx_rf_bandwidth+0x54>
		ret = ad9361_update_rf_bandwidth(phy,
   13b8c:	e0bffe17 	ldw	r2,-8(fp)
   13b90:	10804b17 	ldw	r2,300(r2)
   13b94:	e13ffe17 	ldw	r4,-8(fp)
   13b98:	100b883a 	mov	r5,r2
   13b9c:	e1bfff17 	ldw	r6,-4(fp)
   13ba0:	000cbb00 	call	cbb0 <ad9361_update_rf_bandwidth>
   13ba4:	e0bffd15 	stw	r2,-12(fp)
   13ba8:	00000106 	br	13bb0 <ad9361_set_tx_rf_bandwidth+0x58>
				phy->current_rx_bw_Hz, bandwidth_hz);
	else
		ret = 0;
   13bac:	e03ffd15 	stw	zero,-12(fp)

	return ret;
   13bb0:	e0bffd17 	ldw	r2,-12(fp)
}
   13bb4:	e037883a 	mov	sp,fp
   13bb8:	dfc00117 	ldw	ra,4(sp)
   13bbc:	df000017 	ldw	fp,0(sp)
   13bc0:	dec00204 	addi	sp,sp,8
   13bc4:	f800283a 	ret

00013bc8 <ad9361_get_tx_rf_bandwidth>:
 * @param bandwidth_hz A variable to store the bandwidth value (Hz).
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_get_tx_rf_bandwidth (struct ad9361_rf_phy *phy,
									uint32_t *bandwidth_hz)
{
   13bc8:	defffd04 	addi	sp,sp,-12
   13bcc:	de00012e 	bgeu	sp,et,13bd4 <ad9361_get_tx_rf_bandwidth+0xc>
   13bd0:	003b68fa 	trap	3
   13bd4:	df000215 	stw	fp,8(sp)
   13bd8:	df000204 	addi	fp,sp,8
   13bdc:	e13ffe15 	stw	r4,-8(fp)
   13be0:	e17fff15 	stw	r5,-4(fp)
	*bandwidth_hz = phy->current_tx_bw_Hz;
   13be4:	e0bffe17 	ldw	r2,-8(fp)
   13be8:	10c04c17 	ldw	r3,304(r2)
   13bec:	e0bfff17 	ldw	r2,-4(fp)
   13bf0:	10c00015 	stw	r3,0(r2)

	return 0;
   13bf4:	0005883a 	mov	r2,zero
}
   13bf8:	e037883a 	mov	sp,fp
   13bfc:	df000017 	ldw	fp,0(sp)
   13c00:	dec00104 	addi	sp,sp,4
   13c04:	f800283a 	ret

00013c08 <ad9361_set_tx_sampling_freq>:
 *
 * Note: This function will/may affect the data path.
 */
int32_t ad9361_set_tx_sampling_freq (struct ad9361_rf_phy *phy,
									 uint32_t sampling_freq_hz)
{
   13c08:	deffee04 	addi	sp,sp,-72
   13c0c:	de00012e 	bgeu	sp,et,13c14 <ad9361_set_tx_sampling_freq+0xc>
   13c10:	003b68fa 	trap	3
   13c14:	dfc01115 	stw	ra,68(sp)
   13c18:	df001015 	stw	fp,64(sp)
   13c1c:	df001004 	addi	fp,sp,64
   13c20:	e13ffe15 	stw	r4,-8(fp)
   13c24:	e17fff15 	stw	r5,-4(fp)
	int32_t ret;
	uint32_t rx[6], tx[6];

	ret = ad9361_calculate_rf_clock_chain(phy, sampling_freq_hz,
   13c28:	e0bffe17 	ldw	r2,-8(fp)
   13c2c:	11804e17 	ldw	r6,312(r2)
   13c30:	e0fff204 	addi	r3,fp,-56
   13c34:	e0bff804 	addi	r2,fp,-32
   13c38:	d8800015 	stw	r2,0(sp)
   13c3c:	e13ffe17 	ldw	r4,-8(fp)
   13c40:	e17fff17 	ldw	r5,-4(fp)
   13c44:	180f883a 	mov	r7,r3
   13c48:	0009f600 	call	9f60 <ad9361_calculate_rf_clock_chain>
   13c4c:	e0bff115 	stw	r2,-60(fp)
		phy->rate_governor, rx, tx);
	if (ret < 0)
   13c50:	e0bff117 	ldw	r2,-60(fp)
   13c54:	1000020e 	bge	r2,zero,13c60 <ad9361_set_tx_sampling_freq+0x58>
		return ret;
   13c58:	e0bff117 	ldw	r2,-60(fp)
   13c5c:	00001006 	br	13ca0 <ad9361_set_tx_sampling_freq+0x98>

	ad9361_set_trx_clock_chain(phy, rx, tx);
   13c60:	e0fff204 	addi	r3,fp,-56
   13c64:	e0bff804 	addi	r2,fp,-32
   13c68:	e13ffe17 	ldw	r4,-8(fp)
   13c6c:	180b883a 	mov	r5,r3
   13c70:	100d883a 	mov	r6,r2
   13c74:	00099d80 	call	99d8 <ad9361_set_trx_clock_chain>

	ret = ad9361_update_rf_bandwidth(phy, phy->current_rx_bw_Hz,
   13c78:	e0bffe17 	ldw	r2,-8(fp)
   13c7c:	10c04b17 	ldw	r3,300(r2)
   13c80:	e0bffe17 	ldw	r2,-8(fp)
   13c84:	10804c17 	ldw	r2,304(r2)
   13c88:	e13ffe17 	ldw	r4,-8(fp)
   13c8c:	180b883a 	mov	r5,r3
   13c90:	100d883a 	mov	r6,r2
   13c94:	000cbb00 	call	cbb0 <ad9361_update_rf_bandwidth>
   13c98:	e0bff115 	stw	r2,-60(fp)
					phy->current_tx_bw_Hz);

	return ret;
   13c9c:	e0bff117 	ldw	r2,-60(fp)
}
   13ca0:	e037883a 	mov	sp,fp
   13ca4:	dfc00117 	ldw	ra,4(sp)
   13ca8:	df000017 	ldw	fp,0(sp)
   13cac:	dec00204 	addi	sp,sp,8
   13cb0:	f800283a 	ret

00013cb4 <ad9361_get_tx_sampling_freq>:
 * @param sampling_freq_hz A variable to store the frequency value (Hz).
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_get_tx_sampling_freq (struct ad9361_rf_phy *phy,
									 uint32_t *sampling_freq_hz)
{
   13cb4:	defffc04 	addi	sp,sp,-16
   13cb8:	de00012e 	bgeu	sp,et,13cc0 <ad9361_get_tx_sampling_freq+0xc>
   13cbc:	003b68fa 	trap	3
   13cc0:	dfc00315 	stw	ra,12(sp)
   13cc4:	df000215 	stw	fp,8(sp)
   13cc8:	df000204 	addi	fp,sp,8
   13ccc:	e13ffe15 	stw	r4,-8(fp)
   13cd0:	e17fff15 	stw	r5,-4(fp)
	*sampling_freq_hz = (uint32_t)clk_get_rate(phy,
   13cd4:	e0bffe17 	ldw	r2,-8(fp)
   13cd8:	10802417 	ldw	r2,144(r2)
   13cdc:	e13ffe17 	ldw	r4,-8(fp)
   13ce0:	100b883a 	mov	r5,r2
   13ce4:	001bc900 	call	1bc90 <clk_get_rate>
   13ce8:	1007883a 	mov	r3,r2
   13cec:	e0bfff17 	ldw	r2,-4(fp)
   13cf0:	10c00015 	stw	r3,0(r2)
										phy->ref_clk_scale[TX_SAMPL_CLK]);

	return 0;
   13cf4:	0005883a 	mov	r2,zero
}
   13cf8:	e037883a 	mov	sp,fp
   13cfc:	dfc00117 	ldw	ra,4(sp)
   13d00:	df000017 	ldw	fp,0(sp)
   13d04:	dec00204 	addi	sp,sp,8
   13d08:	f800283a 	ret

00013d0c <ad9361_set_tx_lo_freq>:
 *
 * Note: This function will/may affect the data path.
 */
int32_t ad9361_set_tx_lo_freq (struct ad9361_rf_phy *phy,
							   uint64_t lo_freq_hz)
{
   13d0c:	defff904 	addi	sp,sp,-28
   13d10:	de00012e 	bgeu	sp,et,13d18 <ad9361_set_tx_lo_freq+0xc>
   13d14:	003b68fa 	trap	3
   13d18:	dfc00615 	stw	ra,24(sp)
   13d1c:	df000515 	stw	fp,20(sp)
   13d20:	dc000415 	stw	r16,16(sp)
   13d24:	df000504 	addi	fp,sp,20
   13d28:	e13ffc15 	stw	r4,-16(fp)
   13d2c:	e17ffd15 	stw	r5,-12(fp)
   13d30:	e1bffe15 	stw	r6,-8(fp)
	int32_t ret;

	ret = clk_set_rate(phy, phy->ref_clk_scale[TX_RFPLL],
   13d34:	e0bffc17 	ldw	r2,-16(fp)
   13d38:	14002a17 	ldw	r16,168(r2)
   13d3c:	e13ffd17 	ldw	r4,-12(fp)
   13d40:	e17ffe17 	ldw	r5,-8(fp)
   13d44:	00010a80 	call	10a8 <ad9361_to_clk>
   13d48:	e13ffc17 	ldw	r4,-16(fp)
   13d4c:	800b883a 	mov	r5,r16
   13d50:	100d883a 	mov	r6,r2
   13d54:	001be380 	call	1be38 <clk_set_rate>
   13d58:	e0bffb15 	stw	r2,-20(fp)
				ad9361_to_clk(lo_freq_hz));

	return ret;
   13d5c:	e0bffb17 	ldw	r2,-20(fp)
}
   13d60:	e6ffff04 	addi	sp,fp,-4
   13d64:	dfc00217 	ldw	ra,8(sp)
   13d68:	df000117 	ldw	fp,4(sp)
   13d6c:	dc000017 	ldw	r16,0(sp)
   13d70:	dec00304 	addi	sp,sp,12
   13d74:	f800283a 	ret

00013d78 <ad9361_get_tx_lo_freq>:
 * @param lo_freq_hz A variable to store the frequency value (Hz).
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_get_tx_lo_freq (struct ad9361_rf_phy *phy,
							   uint64_t *lo_freq_hz)
{
   13d78:	defffc04 	addi	sp,sp,-16
   13d7c:	de00012e 	bgeu	sp,et,13d84 <ad9361_get_tx_lo_freq+0xc>
   13d80:	003b68fa 	trap	3
   13d84:	dfc00315 	stw	ra,12(sp)
   13d88:	df000215 	stw	fp,8(sp)
   13d8c:	df000204 	addi	fp,sp,8
   13d90:	e13ffe15 	stw	r4,-8(fp)
   13d94:	e17fff15 	stw	r5,-4(fp)
	*lo_freq_hz = ad9361_from_clk(clk_get_rate(phy,
   13d98:	e0bffe17 	ldw	r2,-8(fp)
   13d9c:	10802a17 	ldw	r2,168(r2)
   13da0:	e13ffe17 	ldw	r4,-8(fp)
   13da4:	100b883a 	mov	r5,r2
   13da8:	001bc900 	call	1bc90 <clk_get_rate>
   13dac:	1009883a 	mov	r4,r2
   13db0:	00010f00 	call	10f0 <ad9361_from_clk>
   13db4:	1009883a 	mov	r4,r2
   13db8:	180b883a 	mov	r5,r3
   13dbc:	e0bfff17 	ldw	r2,-4(fp)
   13dc0:	11000015 	stw	r4,0(r2)
   13dc4:	11400115 	stw	r5,4(r2)
										phy->ref_clk_scale[TX_RFPLL]));

	return 0;
   13dc8:	0005883a 	mov	r2,zero
}
   13dcc:	e037883a 	mov	sp,fp
   13dd0:	dfc00117 	ldw	ra,4(sp)
   13dd4:	df000017 	ldw	fp,0(sp)
   13dd8:	dec00204 	addi	sp,sp,8
   13ddc:	f800283a 	ret

00013de0 <ad9361_set_tx_lo_int_ext>:
 * 			   INT_LO
 * 			   EXT_LO
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_set_tx_lo_int_ext(struct ad9361_rf_phy *phy, uint8_t int_ext)
{
   13de0:	defffc04 	addi	sp,sp,-16
   13de4:	de00012e 	bgeu	sp,et,13dec <ad9361_set_tx_lo_int_ext+0xc>
   13de8:	003b68fa 	trap	3
   13dec:	dfc00315 	stw	ra,12(sp)
   13df0:	df000215 	stw	fp,8(sp)
   13df4:	df000204 	addi	fp,sp,8
   13df8:	e13ffe15 	stw	r4,-8(fp)
   13dfc:	2805883a 	mov	r2,r5
   13e00:	e0bfff05 	stb	r2,-4(fp)
	phy->pdata->use_ext_tx_lo = int_ext;
   13e04:	e0bffe17 	ldw	r2,-8(fp)
   13e08:	10803017 	ldw	r2,192(r2)
   13e0c:	e0ffff03 	ldbu	r3,-4(fp)
   13e10:	1806c03a 	cmpne	r3,r3,zero
   13e14:	10c00305 	stb	r3,12(r2)

	return ad9361_clk_mux_set_parent(phy->ref_clk_scale[TX_RFPLL], int_ext);
   13e18:	e0bffe17 	ldw	r2,-8(fp)
   13e1c:	10c02a17 	ldw	r3,168(r2)
   13e20:	e0bfff03 	ldbu	r2,-4(fp)
   13e24:	1809883a 	mov	r4,r3
   13e28:	100b883a 	mov	r5,r2
   13e2c:	00100380 	call	10038 <ad9361_clk_mux_set_parent>
}
   13e30:	e037883a 	mov	sp,fp
   13e34:	dfc00117 	ldw	ra,4(sp)
   13e38:	df000017 	ldw	fp,0(sp)
   13e3c:	dec00204 	addi	sp,sp,8
   13e40:	f800283a 	ret

00013e44 <ad9361_set_tx_fir_config>:
 *
 * Note: This function will/may affect the data path.
 */
int32_t ad9361_set_tx_fir_config (struct ad9361_rf_phy *phy,
								  AD9361_TXFIRConfig fir_cfg)
{
   13e44:	defff804 	addi	sp,sp,-32
   13e48:	de00012e 	bgeu	sp,et,13e50 <ad9361_set_tx_fir_config+0xc>
   13e4c:	003b68fa 	trap	3
   13e50:	dfc00415 	stw	ra,16(sp)
   13e54:	df000315 	stw	fp,12(sp)
   13e58:	df000304 	addi	fp,sp,12
   13e5c:	e13fff15 	stw	r4,-4(fp)
   13e60:	e1400215 	stw	r5,8(fp)
   13e64:	e1800315 	stw	r6,12(fp)
   13e68:	e1c00415 	stw	r7,16(fp)
	int32_t ret;

	phy->tx_fir_int = fir_cfg.tx_int;
   13e6c:	e0800417 	ldw	r2,16(fp)
   13e70:	1007883a 	mov	r3,r2
   13e74:	e0bfff17 	ldw	r2,-4(fp)
   13e78:	10c05e05 	stb	r3,376(r2)
	ret = ad9361_load_fir_filter_coef(phy, (enum fir_dest)fir_cfg.tx,
   13e7c:	e1400217 	ldw	r5,8(fp)
   13e80:	e1800317 	ldw	r6,12(fp)
			fir_cfg.tx_gain, fir_cfg.tx_coef_size, fir_cfg.tx_coef);
   13e84:	e0804503 	ldbu	r2,276(fp)
								  AD9361_TXFIRConfig fir_cfg)
{
	int32_t ret;

	phy->tx_fir_int = fir_cfg.tx_int;
	ret = ad9361_load_fir_filter_coef(phy, (enum fir_dest)fir_cfg.tx,
   13e88:	10c03fcc 	andi	r3,r2,255
   13e8c:	e0800504 	addi	r2,fp,20
   13e90:	d8800015 	stw	r2,0(sp)
   13e94:	e13fff17 	ldw	r4,-4(fp)
   13e98:	180f883a 	mov	r7,r3
   13e9c:	000cfa00 	call	cfa0 <ad9361_load_fir_filter_coef>
   13ea0:	e0bffe15 	stw	r2,-8(fp)
			fir_cfg.tx_gain, fir_cfg.tx_coef_size, fir_cfg.tx_coef);

	return ret;
   13ea4:	e0bffe17 	ldw	r2,-8(fp)
}
   13ea8:	e037883a 	mov	sp,fp
   13eac:	dfc00117 	ldw	ra,4(sp)
   13eb0:	df000017 	ldw	fp,0(sp)
   13eb4:	dec00504 	addi	sp,sp,20
   13eb8:	f800283a 	ret

00013ebc <ad9361_get_tx_fir_config>:
 * 				 TX2 (1)
 * @param fir_cfg FIR filter configuration output file.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_get_tx_fir_config(struct ad9361_rf_phy *phy, uint8_t tx_ch, AD9361_TXFIRConfig *fir_cfg)
{
   13ebc:	defff804 	addi	sp,sp,-32
   13ec0:	de00012e 	bgeu	sp,et,13ec8 <ad9361_get_tx_fir_config+0xc>
   13ec4:	003b68fa 	trap	3
   13ec8:	dfc00715 	stw	ra,28(sp)
   13ecc:	df000615 	stw	fp,24(sp)
   13ed0:	df000604 	addi	fp,sp,24
   13ed4:	e13ffd15 	stw	r4,-12(fp)
   13ed8:	2805883a 	mov	r2,r5
   13edc:	e1bfff15 	stw	r6,-4(fp)
   13ee0:	e0bffe05 	stb	r2,-8(fp)
	int32_t ret;
	uint32_t fir_conf;
	uint8_t index;

	tx_ch += 1;
   13ee4:	e0bffe03 	ldbu	r2,-8(fp)
   13ee8:	10800044 	addi	r2,r2,1
   13eec:	e0bffe05 	stb	r2,-8(fp)

	ret = ad9361_spi_read(phy->spi, REG_TX_FILTER_CONF);
   13ef0:	e0bffd17 	ldw	r2,-12(fp)
   13ef4:	10800117 	ldw	r2,4(r2)
   13ef8:	1009883a 	mov	r4,r2
   13efc:	01401944 	movi	r5,101
   13f00:	00001500 	call	150 <ad9361_spi_read>
   13f04:	e0bffb15 	stw	r2,-20(fp)
	if(ret < 0)
   13f08:	e0bffb17 	ldw	r2,-20(fp)
   13f0c:	1000020e 	bge	r2,zero,13f18 <ad9361_get_tx_fir_config+0x5c>
		return ret;
   13f10:	e0bffb17 	ldw	r2,-20(fp)
   13f14:	00007206 	br	140e0 <ad9361_get_tx_fir_config+0x224>
	fir_conf = ret;
   13f18:	e0bffb17 	ldw	r2,-20(fp)
   13f1c:	e0bffc15 	stw	r2,-16(fp)
	fir_cfg->tx_coef_size = (((fir_conf & FIR_NUM_TAPS(7)) >> 5) + 1) * 16;
   13f20:	e0bffc17 	ldw	r2,-16(fp)
   13f24:	1080380c 	andi	r2,r2,224
   13f28:	1004d17a 	srli	r2,r2,5
   13f2c:	10800044 	addi	r2,r2,1
   13f30:	1004913a 	slli	r2,r2,4
   13f34:	1007883a 	mov	r3,r2
   13f38:	e0bfff17 	ldw	r2,-4(fp)
   13f3c:	10c04305 	stb	r3,268(r2)
	fir_cfg->tx_gain = -6 * (fir_conf & TX_FIR_GAIN_6DB);
   13f40:	e0bffc17 	ldw	r2,-16(fp)
   13f44:	1080004c 	andi	r2,r2,1
   13f48:	10bffea4 	muli	r2,r2,-6
   13f4c:	1007883a 	mov	r3,r2
   13f50:	e0bfff17 	ldw	r2,-4(fp)
   13f54:	10c00115 	stw	r3,4(r2)
	fir_cfg->tx = tx_ch;
   13f58:	e0fffe03 	ldbu	r3,-8(fp)
   13f5c:	e0bfff17 	ldw	r2,-4(fp)
   13f60:	10c00015 	stw	r3,0(r2)

	fir_conf &= ~FIR_SELECT(3);
   13f64:	e0fffc17 	ldw	r3,-16(fp)
   13f68:	00bff9c4 	movi	r2,-25
   13f6c:	1884703a 	and	r2,r3,r2
   13f70:	e0bffc15 	stw	r2,-16(fp)
	fir_conf |= FIR_SELECT(tx_ch) | FIR_START_CLK;
   13f74:	e0bffe03 	ldbu	r2,-8(fp)
   13f78:	108000cc 	andi	r2,r2,3
   13f7c:	100490fa 	slli	r2,r2,3
   13f80:	1007883a 	mov	r3,r2
   13f84:	e0bffc17 	ldw	r2,-16(fp)
   13f88:	1884b03a 	or	r2,r3,r2
   13f8c:	10800094 	ori	r2,r2,2
   13f90:	e0bffc15 	stw	r2,-16(fp)
	ad9361_spi_write(phy->spi, REG_TX_FILTER_CONF, fir_conf);
   13f94:	e0bffd17 	ldw	r2,-12(fp)
   13f98:	10800117 	ldw	r2,4(r2)
   13f9c:	1009883a 	mov	r4,r2
   13fa0:	01401944 	movi	r5,101
   13fa4:	e1bffc17 	ldw	r6,-16(fp)
   13fa8:	00002600 	call	260 <ad9361_spi_write>

	for(index = 0; index < 128; index++)
   13fac:	e03ffa05 	stb	zero,-24(fp)
   13fb0:	00003606 	br	1408c <ad9361_get_tx_fir_config+0x1d0>
	{
		ad9361_spi_write(phy->spi, REG_TX_FILTER_COEF_ADDR, index);
   13fb4:	e0bffd17 	ldw	r2,-12(fp)
   13fb8:	10c00117 	ldw	r3,4(r2)
   13fbc:	e0bffa03 	ldbu	r2,-24(fp)
   13fc0:	1809883a 	mov	r4,r3
   13fc4:	01401804 	movi	r5,96
   13fc8:	100d883a 	mov	r6,r2
   13fcc:	00002600 	call	260 <ad9361_spi_write>
		ret = ad9361_spi_read(phy->spi, REG_TX_FILTER_COEF_READ_DATA_1);
   13fd0:	e0bffd17 	ldw	r2,-12(fp)
   13fd4:	10800117 	ldw	r2,4(r2)
   13fd8:	1009883a 	mov	r4,r2
   13fdc:	014018c4 	movi	r5,99
   13fe0:	00001500 	call	150 <ad9361_spi_read>
   13fe4:	e0bffb15 	stw	r2,-20(fp)
		if(ret < 0)
   13fe8:	e0bffb17 	ldw	r2,-20(fp)
   13fec:	1000020e 	bge	r2,zero,13ff8 <ad9361_get_tx_fir_config+0x13c>
			return ret;
   13ff0:	e0bffb17 	ldw	r2,-20(fp)
   13ff4:	00003a06 	br	140e0 <ad9361_get_tx_fir_config+0x224>
		fir_cfg->tx_coef[index] = ret;
   13ff8:	e0bffa03 	ldbu	r2,-24(fp)
   13ffc:	e0fffb17 	ldw	r3,-20(fp)
   14000:	1809883a 	mov	r4,r3
   14004:	e0ffff17 	ldw	r3,-4(fp)
   14008:	10800184 	addi	r2,r2,6
   1400c:	1085883a 	add	r2,r2,r2
   14010:	1885883a 	add	r2,r3,r2
   14014:	1100000d 	sth	r4,0(r2)
		ret = ad9361_spi_read(phy->spi, REG_TX_FILTER_COEF_READ_DATA_2);
   14018:	e0bffd17 	ldw	r2,-12(fp)
   1401c:	10800117 	ldw	r2,4(r2)
   14020:	1009883a 	mov	r4,r2
   14024:	01401904 	movi	r5,100
   14028:	00001500 	call	150 <ad9361_spi_read>
   1402c:	e0bffb15 	stw	r2,-20(fp)
		if(ret < 0)
   14030:	e0bffb17 	ldw	r2,-20(fp)
   14034:	1000020e 	bge	r2,zero,14040 <ad9361_get_tx_fir_config+0x184>
			return ret;
   14038:	e0bffb17 	ldw	r2,-20(fp)
   1403c:	00002806 	br	140e0 <ad9361_get_tx_fir_config+0x224>
		fir_cfg->tx_coef[index] |= (ret << 8);
   14040:	e13ffa03 	ldbu	r4,-24(fp)
   14044:	e0bffa03 	ldbu	r2,-24(fp)
   14048:	e0ffff17 	ldw	r3,-4(fp)
   1404c:	10800184 	addi	r2,r2,6
   14050:	1085883a 	add	r2,r2,r2
   14054:	1885883a 	add	r2,r3,r2
   14058:	1080000b 	ldhu	r2,0(r2)
   1405c:	e0fffb17 	ldw	r3,-20(fp)
   14060:	1806923a 	slli	r3,r3,8
   14064:	10c4b03a 	or	r2,r2,r3
   14068:	100b883a 	mov	r5,r2
   1406c:	e0ffff17 	ldw	r3,-4(fp)
   14070:	20800184 	addi	r2,r4,6
   14074:	1085883a 	add	r2,r2,r2
   14078:	1885883a 	add	r2,r3,r2
   1407c:	1140000d 	sth	r5,0(r2)

	fir_conf &= ~FIR_SELECT(3);
	fir_conf |= FIR_SELECT(tx_ch) | FIR_START_CLK;
	ad9361_spi_write(phy->spi, REG_TX_FILTER_CONF, fir_conf);

	for(index = 0; index < 128; index++)
   14080:	e0bffa03 	ldbu	r2,-24(fp)
   14084:	10800044 	addi	r2,r2,1
   14088:	e0bffa05 	stb	r2,-24(fp)
   1408c:	e0bffa03 	ldbu	r2,-24(fp)
   14090:	10803fcc 	andi	r2,r2,255
   14094:	1080201c 	xori	r2,r2,128
   14098:	10bfe004 	addi	r2,r2,-128
   1409c:	103fc50e 	bge	r2,zero,13fb4 <_gp+0xfffe1e94>
		if(ret < 0)
			return ret;
		fir_cfg->tx_coef[index] |= (ret << 8);
	}

	fir_conf &= ~FIR_START_CLK;
   140a0:	e0fffc17 	ldw	r3,-16(fp)
   140a4:	00bfff44 	movi	r2,-3
   140a8:	1884703a 	and	r2,r3,r2
   140ac:	e0bffc15 	stw	r2,-16(fp)
	ad9361_spi_write(phy->spi, REG_TX_FILTER_CONF, fir_conf);
   140b0:	e0bffd17 	ldw	r2,-12(fp)
   140b4:	10800117 	ldw	r2,4(r2)
   140b8:	1009883a 	mov	r4,r2
   140bc:	01401944 	movi	r5,101
   140c0:	e1bffc17 	ldw	r6,-16(fp)
   140c4:	00002600 	call	260 <ad9361_spi_write>

	fir_cfg->tx_int = phy->tx_fir_int;
   140c8:	e0bffd17 	ldw	r2,-12(fp)
   140cc:	10805e03 	ldbu	r2,376(r2)
   140d0:	10c03fcc 	andi	r3,r2,255
   140d4:	e0bfff17 	ldw	r2,-4(fp)
   140d8:	10c00215 	stw	r3,8(r2)

	return 0;
   140dc:	0005883a 	mov	r2,zero
}
   140e0:	e037883a 	mov	sp,fp
   140e4:	dfc00117 	ldw	ra,4(sp)
   140e8:	df000017 	ldw	fp,0(sp)
   140ec:	dec00204 	addi	sp,sp,8
   140f0:	f800283a 	ret

000140f4 <ad9361_set_tx_fir_en_dis>:
 *
 * Note: This function will/may affect the data path.
 */
int32_t ad9361_set_tx_fir_en_dis (struct ad9361_rf_phy *phy,
								  uint8_t en_dis)
{
   140f4:	defffb04 	addi	sp,sp,-20
   140f8:	de00012e 	bgeu	sp,et,14100 <ad9361_set_tx_fir_en_dis+0xc>
   140fc:	003b68fa 	trap	3
   14100:	dfc00415 	stw	ra,16(sp)
   14104:	df000315 	stw	fp,12(sp)
   14108:	df000304 	addi	fp,sp,12
   1410c:	e13ffe15 	stw	r4,-8(fp)
   14110:	2805883a 	mov	r2,r5
   14114:	e0bfff05 	stb	r2,-4(fp)
	int32_t ret = 0;
   14118:	e03ffd15 	stw	zero,-12(fp)

	if(phy->bypass_tx_fir == !en_dis)
   1411c:	e0bffe17 	ldw	r2,-8(fp)
   14120:	10804f43 	ldbu	r2,317(r2)
   14124:	10c03fcc 	andi	r3,r2,255
   14128:	e0bfff03 	ldbu	r2,-4(fp)
   1412c:	1005003a 	cmpeq	r2,r2,zero
   14130:	10803fcc 	andi	r2,r2,255
   14134:	1880021e 	bne	r3,r2,14140 <ad9361_set_tx_fir_en_dis+0x4c>
		return ret;
   14138:	e0bffd17 	ldw	r2,-12(fp)
   1413c:	00000e06 	br	14178 <ad9361_set_tx_fir_en_dis+0x84>

	phy->bypass_tx_fir = !en_dis;
   14140:	e0bfff03 	ldbu	r2,-4(fp)
   14144:	1005003a 	cmpeq	r2,r2,zero
   14148:	1007883a 	mov	r3,r2
   1414c:	e0bffe17 	ldw	r2,-8(fp)
   14150:	10c04f45 	stb	r3,317(r2)
	ret = ad9361_validate_enable_fir(phy);
   14154:	e13ffe17 	ldw	r4,-8(fp)
   14158:	000d4780 	call	d478 <ad9361_validate_enable_fir>
   1415c:	e0bffd15 	stw	r2,-12(fp)
	if (ret < 0) {
   14160:	e0bffd17 	ldw	r2,-12(fp)
   14164:	1000030e 	bge	r2,zero,14174 <ad9361_set_tx_fir_en_dis+0x80>
		phy->bypass_tx_fir = true;
   14168:	e0bffe17 	ldw	r2,-8(fp)
   1416c:	00c00044 	movi	r3,1
   14170:	10c04f45 	stb	r3,317(r2)
	}

	return ret;
   14174:	e0bffd17 	ldw	r2,-12(fp)
}
   14178:	e037883a 	mov	sp,fp
   1417c:	dfc00117 	ldw	ra,4(sp)
   14180:	df000017 	ldw	fp,0(sp)
   14184:	dec00204 	addi	sp,sp,8
   14188:	f800283a 	ret

0001418c <ad9361_get_tx_fir_en_dis>:
 * @param en_dis The enable/disable status buffer.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_get_tx_fir_en_dis (struct ad9361_rf_phy *phy,
								  uint8_t *en_dis)
{
   1418c:	defffd04 	addi	sp,sp,-12
   14190:	de00012e 	bgeu	sp,et,14198 <ad9361_get_tx_fir_en_dis+0xc>
   14194:	003b68fa 	trap	3
   14198:	df000215 	stw	fp,8(sp)
   1419c:	df000204 	addi	fp,sp,8
   141a0:	e13ffe15 	stw	r4,-8(fp)
   141a4:	e17fff15 	stw	r5,-4(fp)
	*en_dis = !phy->bypass_tx_fir;
   141a8:	e0bffe17 	ldw	r2,-8(fp)
   141ac:	10804f43 	ldbu	r2,317(r2)
   141b0:	1080005c 	xori	r2,r2,1
   141b4:	1007883a 	mov	r3,r2
   141b8:	e0bfff17 	ldw	r2,-4(fp)
   141bc:	10c00005 	stb	r3,0(r2)

	return 0;
   141c0:	0005883a 	mov	r2,zero
}
   141c4:	e037883a 	mov	sp,fp
   141c8:	df000017 	ldw	fp,0(sp)
   141cc:	dec00104 	addi	sp,sp,4
   141d0:	f800283a 	ret

000141d4 <ad9361_get_tx_rssi>:
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_get_tx_rssi (struct ad9361_rf_phy *phy,
							uint8_t ch,
							uint32_t *rssi_db_x_1000)
{
   141d4:	defff704 	addi	sp,sp,-36
   141d8:	de00012e 	bgeu	sp,et,141e0 <ad9361_get_tx_rssi+0xc>
   141dc:	003b68fa 	trap	3
   141e0:	dfc00815 	stw	ra,32(sp)
   141e4:	df000715 	stw	fp,28(sp)
   141e8:	dc000615 	stw	r16,24(sp)
   141ec:	df000704 	addi	fp,sp,28
   141f0:	e13ffc15 	stw	r4,-16(fp)
   141f4:	2805883a 	mov	r2,r5
   141f8:	e1bffe15 	stw	r6,-8(fp)
   141fc:	e0bffd05 	stb	r2,-12(fp)
	uint8_t reg_val_buf[3];
	uint32_t val;
	int32_t ret;

	ret = ad9361_spi_readm(phy->spi, REG_TX_RSSI_LSB,
   14200:	e0bffc17 	ldw	r2,-16(fp)
   14204:	10c00117 	ldw	r3,4(r2)
   14208:	e0bffb04 	addi	r2,fp,-20
   1420c:	1809883a 	mov	r4,r3
   14210:	01401b44 	movi	r5,109
   14214:	100d883a 	mov	r6,r2
   14218:	01c000c4 	movi	r7,3
   1421c:	00000740 	call	74 <ad9361_spi_readm>
   14220:	e0bffa15 	stw	r2,-24(fp)
			reg_val_buf, ARRAY_SIZE(reg_val_buf));
	if (ret < 0) {
   14224:	e0bffa17 	ldw	r2,-24(fp)
   14228:	1000020e 	bge	r2,zero,14234 <ad9361_get_tx_rssi+0x60>
		return ret;
   1422c:	e0bffa17 	ldw	r2,-24(fp)
   14230:	00002c06 	br	142e4 <ad9361_get_tx_rssi+0x110>
	}

	switch (ch) {
   14234:	e0bffd03 	ldbu	r2,-12(fp)
   14238:	10000326 	beq	r2,zero,14248 <ad9361_get_tx_rssi+0x74>
   1423c:	10800060 	cmpeqi	r2,r2,1
   14240:	10000b1e 	bne	r2,zero,14270 <ad9361_get_tx_rssi+0x9c>
   14244:	00001506 	br	1429c <ad9361_get_tx_rssi+0xc8>
	case 0:
		val = (reg_val_buf[2] << 1) | (reg_val_buf[0] & TX_RSSI_1);
   14248:	e0bffb83 	ldbu	r2,-18(fp)
   1424c:	10803fcc 	andi	r2,r2,255
   14250:	1085883a 	add	r2,r2,r2
   14254:	1007883a 	mov	r3,r2
   14258:	e0bffb03 	ldbu	r2,-20(fp)
   1425c:	10803fcc 	andi	r2,r2,255
   14260:	1080004c 	andi	r2,r2,1
   14264:	1884b03a 	or	r2,r3,r2
   14268:	e0bff915 	stw	r2,-28(fp)
		break;
   1426c:	00000d06 	br	142a4 <ad9361_get_tx_rssi+0xd0>
	case 1:
		val = (reg_val_buf[1] << 1) | ((reg_val_buf[0] & TX_RSSI_2) >> 1);
   14270:	e0bffb43 	ldbu	r2,-19(fp)
   14274:	10803fcc 	andi	r2,r2,255
   14278:	1085883a 	add	r2,r2,r2
   1427c:	1007883a 	mov	r3,r2
   14280:	e0bffb03 	ldbu	r2,-20(fp)
   14284:	10803fcc 	andi	r2,r2,255
   14288:	1080008c 	andi	r2,r2,2
   1428c:	1005d07a 	srai	r2,r2,1
   14290:	1884b03a 	or	r2,r3,r2
   14294:	e0bff915 	stw	r2,-28(fp)
		break;
   14298:	00000206 	br	142a4 <ad9361_get_tx_rssi+0xd0>
	default:
		return -EINVAL;
   1429c:	00bffa84 	movi	r2,-22
   142a0:	00001006 	br	142e4 <ad9361_get_tx_rssi+0x110>
	}

	val *= RSSI_RESOLUTION;
   142a4:	e0bff917 	ldw	r2,-28(fp)
   142a8:	10800664 	muli	r2,r2,25
   142ac:	e0bff915 	stw	r2,-28(fp)

	*rssi_db_x_1000 = ((val / RSSI_MULTIPLIER) * 1000) +
   142b0:	e0bff917 	ldw	r2,-28(fp)
   142b4:	1009883a 	mov	r4,r2
   142b8:	01401904 	movi	r5,100
   142bc:	001d7a40 	call	1d7a4 <__udivsi3>
   142c0:	1400fa24 	muli	r16,r2,1000
			(val % RSSI_MULTIPLIER);
   142c4:	e0bff917 	ldw	r2,-28(fp)
   142c8:	1009883a 	mov	r4,r2
   142cc:	01401904 	movi	r5,100
   142d0:	001d7b40 	call	1d7b4 <__umodsi3>
		return -EINVAL;
	}

	val *= RSSI_RESOLUTION;

	*rssi_db_x_1000 = ((val / RSSI_MULTIPLIER) * 1000) +
   142d4:	8087883a 	add	r3,r16,r2
   142d8:	e0bffe17 	ldw	r2,-8(fp)
   142dc:	10c00015 	stw	r3,0(r2)
			(val % RSSI_MULTIPLIER);

	return 0;
   142e0:	0005883a 	mov	r2,zero
}
   142e4:	e6ffff04 	addi	sp,fp,-4
   142e8:	dfc00217 	ldw	ra,8(sp)
   142ec:	df000117 	ldw	fp,4(sp)
   142f0:	dc000017 	ldw	r16,0(sp)
   142f4:	dec00304 	addi	sp,sp,12
   142f8:	f800283a 	ret

000142fc <ad9361_set_tx_rf_port_output>:
 *				TXB	(1)
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_set_tx_rf_port_output (struct ad9361_rf_phy *phy,
									  uint32_t mode)
{
   142fc:	defffb04 	addi	sp,sp,-20
   14300:	de00012e 	bgeu	sp,et,14308 <ad9361_set_tx_rf_port_output+0xc>
   14304:	003b68fa 	trap	3
   14308:	dfc00415 	stw	ra,16(sp)
   1430c:	df000315 	stw	fp,12(sp)
   14310:	df000304 	addi	fp,sp,12
   14314:	e13ffe15 	stw	r4,-8(fp)
   14318:	e17fff15 	stw	r5,-4(fp)
	int32_t ret;

	phy->pdata->rf_tx_output_sel = mode;
   1431c:	e0bffe17 	ldw	r2,-8(fp)
   14320:	10803017 	ldw	r2,192(r2)
   14324:	e0ffff17 	ldw	r3,-4(fp)
   14328:	10c00915 	stw	r3,36(r2)

	ret = ad9361_rf_port_setup(phy, true,
						phy->pdata->rf_rx_input_sel,
   1432c:	e0bffe17 	ldw	r2,-8(fp)
   14330:	10803017 	ldw	r2,192(r2)
{
	int32_t ret;

	phy->pdata->rf_tx_output_sel = mode;

	ret = ad9361_rf_port_setup(phy, true,
   14334:	10c00817 	ldw	r3,32(r2)
						phy->pdata->rf_rx_input_sel,
						phy->pdata->rf_tx_output_sel);
   14338:	e0bffe17 	ldw	r2,-8(fp)
   1433c:	10803017 	ldw	r2,192(r2)
{
	int32_t ret;

	phy->pdata->rf_tx_output_sel = mode;

	ret = ad9361_rf_port_setup(phy, true,
   14340:	10800917 	ldw	r2,36(r2)
   14344:	e13ffe17 	ldw	r4,-8(fp)
   14348:	01400044 	movi	r5,1
   1434c:	180d883a 	mov	r6,r3
   14350:	100f883a 	mov	r7,r2
   14354:	0006c100 	call	6c10 <ad9361_rf_port_setup>
   14358:	e0bffd15 	stw	r2,-12(fp)
						phy->pdata->rf_rx_input_sel,
						phy->pdata->rf_tx_output_sel);

	return ret;
   1435c:	e0bffd17 	ldw	r2,-12(fp)
}
   14360:	e037883a 	mov	sp,fp
   14364:	dfc00117 	ldw	ra,4(sp)
   14368:	df000017 	ldw	fp,0(sp)
   1436c:	dec00204 	addi	sp,sp,8
   14370:	f800283a 	ret

00014374 <ad9361_get_tx_rf_port_output>:
 * @param mode The RF port.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_get_tx_rf_port_output (struct ad9361_rf_phy *phy,
									  uint32_t *mode)
{
   14374:	defffd04 	addi	sp,sp,-12
   14378:	de00012e 	bgeu	sp,et,14380 <ad9361_get_tx_rf_port_output+0xc>
   1437c:	003b68fa 	trap	3
   14380:	df000215 	stw	fp,8(sp)
   14384:	df000204 	addi	fp,sp,8
   14388:	e13ffe15 	stw	r4,-8(fp)
   1438c:	e17fff15 	stw	r5,-4(fp)
	*mode = phy->pdata->rf_tx_output_sel;
   14390:	e0bffe17 	ldw	r2,-8(fp)
   14394:	10803017 	ldw	r2,192(r2)
   14398:	10c00917 	ldw	r3,36(r2)
   1439c:	e0bfff17 	ldw	r2,-4(fp)
   143a0:	10c00015 	stw	r3,0(r2)

	return 0;
   143a4:	0005883a 	mov	r2,zero
}
   143a8:	e037883a 	mov	sp,fp
   143ac:	df000017 	ldw	fp,0(sp)
   143b0:	dec00104 	addi	sp,sp,4
   143b4:	f800283a 	ret

000143b8 <ad9361_set_tx_auto_cal_en_dis>:
 * 				  ENABLE (1)
 * 				  DISABLE (0)
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_set_tx_auto_cal_en_dis (struct ad9361_rf_phy *phy, uint8_t en_dis)
{
   143b8:	defffd04 	addi	sp,sp,-12
   143bc:	de00012e 	bgeu	sp,et,143c4 <ad9361_set_tx_auto_cal_en_dis+0xc>
   143c0:	003b68fa 	trap	3
   143c4:	df000215 	stw	fp,8(sp)
   143c8:	df000204 	addi	fp,sp,8
   143cc:	e13ffe15 	stw	r4,-8(fp)
   143d0:	2805883a 	mov	r2,r5
   143d4:	e0bfff05 	stb	r2,-4(fp)
	if (en_dis == 0)
   143d8:	e0bfff03 	ldbu	r2,-4(fp)
   143dc:	1000031e 	bne	r2,zero,143ec <ad9361_set_tx_auto_cal_en_dis+0x34>
		phy->auto_cal_en = 0;
   143e0:	e0bffe17 	ldw	r2,-8(fp)
   143e4:	10004545 	stb	zero,277(r2)
   143e8:	00000306 	br	143f8 <ad9361_set_tx_auto_cal_en_dis+0x40>
	else
		phy->auto_cal_en = 1;
   143ec:	e0bffe17 	ldw	r2,-8(fp)
   143f0:	00c00044 	movi	r3,1
   143f4:	10c04545 	stb	r3,277(r2)

	return 0;
   143f8:	0005883a 	mov	r2,zero
}
   143fc:	e037883a 	mov	sp,fp
   14400:	df000017 	ldw	fp,0(sp)
   14404:	dec00104 	addi	sp,sp,4
   14408:	f800283a 	ret

0001440c <ad9361_get_tx_auto_cal_en_dis>:
 * @param phy The AD9361 current state structure.
 * @param en_dis The enable/disable status buffer.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_get_tx_auto_cal_en_dis (struct ad9361_rf_phy *phy, uint8_t *en_dis)
{
   1440c:	defffd04 	addi	sp,sp,-12
   14410:	de00012e 	bgeu	sp,et,14418 <ad9361_get_tx_auto_cal_en_dis+0xc>
   14414:	003b68fa 	trap	3
   14418:	df000215 	stw	fp,8(sp)
   1441c:	df000204 	addi	fp,sp,8
   14420:	e13ffe15 	stw	r4,-8(fp)
   14424:	e17fff15 	stw	r5,-4(fp)
	*en_dis = phy->auto_cal_en;
   14428:	e0bffe17 	ldw	r2,-8(fp)
   1442c:	10804543 	ldbu	r2,277(r2)
   14430:	1007883a 	mov	r3,r2
   14434:	e0bfff17 	ldw	r2,-4(fp)
   14438:	10c00005 	stb	r3,0(r2)

	return 0;
   1443c:	0005883a 	mov	r2,zero
}
   14440:	e037883a 	mov	sp,fp
   14444:	df000017 	ldw	fp,0(sp)
   14448:	dec00104 	addi	sp,sp,4
   1444c:	f800283a 	ret

00014450 <ad9361_tx_fastlock_store>:
 * 				  Accepted values:
 * 				   0 - 7
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_tx_fastlock_store(struct ad9361_rf_phy *phy, uint32_t profile)
{
   14450:	defffc04 	addi	sp,sp,-16
   14454:	de00012e 	bgeu	sp,et,1445c <ad9361_tx_fastlock_store+0xc>
   14458:	003b68fa 	trap	3
   1445c:	dfc00315 	stw	ra,12(sp)
   14460:	df000215 	stw	fp,8(sp)
   14464:	df000204 	addi	fp,sp,8
   14468:	e13ffe15 	stw	r4,-8(fp)
   1446c:	e17fff15 	stw	r5,-4(fp)
	return ad9361_fastlock_store(phy, 1, profile);
   14470:	e13ffe17 	ldw	r4,-8(fp)
   14474:	01400044 	movi	r5,1
   14478:	e1bfff17 	ldw	r6,-4(fp)
   1447c:	000ac5c0 	call	ac5c <ad9361_fastlock_store>
}
   14480:	e037883a 	mov	sp,fp
   14484:	dfc00117 	ldw	ra,4(sp)
   14488:	df000017 	ldw	fp,0(sp)
   1448c:	dec00204 	addi	sp,sp,8
   14490:	f800283a 	ret

00014494 <ad9361_tx_fastlock_recall>:
 * 				  Accepted values:
 * 				   0 - 7
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_tx_fastlock_recall(struct ad9361_rf_phy *phy, uint32_t profile)
{
   14494:	defffc04 	addi	sp,sp,-16
   14498:	de00012e 	bgeu	sp,et,144a0 <ad9361_tx_fastlock_recall+0xc>
   1449c:	003b68fa 	trap	3
   144a0:	dfc00315 	stw	ra,12(sp)
   144a4:	df000215 	stw	fp,8(sp)
   144a8:	df000204 	addi	fp,sp,8
   144ac:	e13ffe15 	stw	r4,-8(fp)
   144b0:	e17fff15 	stw	r5,-4(fp)
	return ad9361_fastlock_recall(phy, 1, profile);
   144b4:	e13ffe17 	ldw	r4,-8(fp)
   144b8:	01400044 	movi	r5,1
   144bc:	e1bfff17 	ldw	r6,-4(fp)
   144c0:	000b46c0 	call	b46c <ad9361_fastlock_recall>
}
   144c4:	e037883a 	mov	sp,fp
   144c8:	dfc00117 	ldw	ra,4(sp)
   144cc:	df000017 	ldw	fp,0(sp)
   144d0:	dec00204 	addi	sp,sp,8
   144d4:	f800283a 	ret

000144d8 <ad9361_tx_fastlock_load>:
 * 				 Example:
 * 				  val0,val1,val2,,val15
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_tx_fastlock_load(struct ad9361_rf_phy *phy, uint32_t profile, uint8_t *values)
{
   144d8:	defffb04 	addi	sp,sp,-20
   144dc:	de00012e 	bgeu	sp,et,144e4 <ad9361_tx_fastlock_load+0xc>
   144e0:	003b68fa 	trap	3
   144e4:	dfc00415 	stw	ra,16(sp)
   144e8:	df000315 	stw	fp,12(sp)
   144ec:	df000304 	addi	fp,sp,12
   144f0:	e13ffd15 	stw	r4,-12(fp)
   144f4:	e17ffe15 	stw	r5,-8(fp)
   144f8:	e1bfff15 	stw	r6,-4(fp)
	return ad9361_fastlock_load(phy, 1, profile, values);
   144fc:	e13ffd17 	ldw	r4,-12(fp)
   14500:	01400044 	movi	r5,1
   14504:	e1bffe17 	ldw	r6,-8(fp)
   14508:	e1ffff17 	ldw	r7,-4(fp)
   1450c:	000aa1c0 	call	aa1c <ad9361_fastlock_load>
}
   14510:	e037883a 	mov	sp,fp
   14514:	dfc00117 	ldw	ra,4(sp)
   14518:	df000017 	ldw	fp,0(sp)
   1451c:	dec00204 	addi	sp,sp,8
   14520:	f800283a 	ret

00014524 <ad9361_tx_fastlock_save>:
 * 				   0 - 7
 * @param values Fastlock profile program data.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_tx_fastlock_save(struct ad9361_rf_phy *phy, uint32_t profile, uint8_t *values)
{
   14524:	defffb04 	addi	sp,sp,-20
   14528:	de00012e 	bgeu	sp,et,14530 <ad9361_tx_fastlock_save+0xc>
   1452c:	003b68fa 	trap	3
   14530:	dfc00415 	stw	ra,16(sp)
   14534:	df000315 	stw	fp,12(sp)
   14538:	df000304 	addi	fp,sp,12
   1453c:	e13ffd15 	stw	r4,-12(fp)
   14540:	e17ffe15 	stw	r5,-8(fp)
   14544:	e1bfff15 	stw	r6,-4(fp)
	return ad9361_fastlock_save(phy, 1, profile, values);
   14548:	e13ffd17 	ldw	r4,-12(fp)
   1454c:	01400044 	movi	r5,1
   14550:	e1bffe17 	ldw	r6,-8(fp)
   14554:	e1ffff17 	ldw	r7,-4(fp)
   14558:	000b8000 	call	b800 <ad9361_fastlock_save>
}
   1455c:	e037883a 	mov	sp,fp
   14560:	dfc00117 	ldw	ra,4(sp)
   14564:	df000017 	ldw	fp,0(sp)
   14568:	dec00204 	addi	sp,sp,8
   1456c:	f800283a 	ret

00014570 <ad9361_set_trx_path_clks>:
 * Note: This function will/may affect the data path.
 */
int32_t ad9361_set_trx_path_clks(struct ad9361_rf_phy *phy,
	uint32_t *rx_path_clks,
	uint32_t *tx_path_clks)
{
   14570:	defffa04 	addi	sp,sp,-24
   14574:	de00012e 	bgeu	sp,et,1457c <ad9361_set_trx_path_clks+0xc>
   14578:	003b68fa 	trap	3
   1457c:	dfc00515 	stw	ra,20(sp)
   14580:	df000415 	stw	fp,16(sp)
   14584:	df000404 	addi	fp,sp,16
   14588:	e13ffd15 	stw	r4,-12(fp)
   1458c:	e17ffe15 	stw	r5,-8(fp)
   14590:	e1bfff15 	stw	r6,-4(fp)
	int32_t ret;

	ret = ad9361_set_trx_clock_chain(phy, rx_path_clks, tx_path_clks);
   14594:	e13ffd17 	ldw	r4,-12(fp)
   14598:	e17ffe17 	ldw	r5,-8(fp)
   1459c:	e1bfff17 	ldw	r6,-4(fp)
   145a0:	00099d80 	call	99d8 <ad9361_set_trx_clock_chain>
   145a4:	e0bffc15 	stw	r2,-16(fp)
	if (ret < 0)
   145a8:	e0bffc17 	ldw	r2,-16(fp)
   145ac:	1000020e 	bge	r2,zero,145b8 <ad9361_set_trx_path_clks+0x48>
		return ret;
   145b0:	e0bffc17 	ldw	r2,-16(fp)
   145b4:	00000a06 	br	145e0 <ad9361_set_trx_path_clks+0x70>

	ret = ad9361_update_rf_bandwidth(phy, phy->current_rx_bw_Hz,
   145b8:	e0bffd17 	ldw	r2,-12(fp)
   145bc:	10c04b17 	ldw	r3,300(r2)
   145c0:	e0bffd17 	ldw	r2,-12(fp)
   145c4:	10804c17 	ldw	r2,304(r2)
   145c8:	e13ffd17 	ldw	r4,-12(fp)
   145cc:	180b883a 	mov	r5,r3
   145d0:	100d883a 	mov	r6,r2
   145d4:	000cbb00 	call	cbb0 <ad9361_update_rf_bandwidth>
   145d8:	e0bffc15 	stw	r2,-16(fp)
					phy->current_tx_bw_Hz);

	return ret;
   145dc:	e0bffc17 	ldw	r2,-16(fp)
}
   145e0:	e037883a 	mov	sp,fp
   145e4:	dfc00117 	ldw	ra,4(sp)
   145e8:	df000017 	ldw	fp,0(sp)
   145ec:	dec00204 	addi	sp,sp,8
   145f0:	f800283a 	ret

000145f4 <ad9361_get_trx_path_clks>:
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_get_trx_path_clks(struct ad9361_rf_phy *phy,
	uint32_t *rx_path_clks,
	uint32_t *tx_path_clks)
{
   145f4:	defffb04 	addi	sp,sp,-20
   145f8:	de00012e 	bgeu	sp,et,14600 <ad9361_get_trx_path_clks+0xc>
   145fc:	003b68fa 	trap	3
   14600:	dfc00415 	stw	ra,16(sp)
   14604:	df000315 	stw	fp,12(sp)
   14608:	df000304 	addi	fp,sp,12
   1460c:	e13ffd15 	stw	r4,-12(fp)
   14610:	e17ffe15 	stw	r5,-8(fp)
   14614:	e1bfff15 	stw	r6,-4(fp)
	return ad9361_get_trx_clock_chain(phy, rx_path_clks, tx_path_clks);
   14618:	e13ffd17 	ldw	r4,-12(fp)
   1461c:	e17ffe17 	ldw	r5,-8(fp)
   14620:	e1bfff17 	ldw	r6,-4(fp)
   14624:	0009de00 	call	9de0 <ad9361_get_trx_clock_chain>
}
   14628:	e037883a 	mov	sp,fp
   1462c:	dfc00117 	ldw	ra,4(sp)
   14630:	df000017 	ldw	fp,0(sp)
   14634:	dec00204 	addi	sp,sp,8
   14638:	f800283a 	ret

0001463c <ad9361_set_no_ch_mode>:
 * 				   MODE_1x1 (1)
 * 				   MODE_2x2 (2)
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_set_no_ch_mode(struct ad9361_rf_phy *phy, uint8_t no_ch_mode)
{
   1463c:	defffb04 	addi	sp,sp,-20
   14640:	de00012e 	bgeu	sp,et,14648 <ad9361_set_no_ch_mode+0xc>
   14644:	003b68fa 	trap	3
   14648:	dfc00415 	stw	ra,16(sp)
   1464c:	df000315 	stw	fp,12(sp)
   14650:	dc000215 	stw	r16,8(sp)
   14654:	df000304 	addi	fp,sp,12
   14658:	e13ffd15 	stw	r4,-12(fp)
   1465c:	2805883a 	mov	r2,r5
   14660:	e0bffe05 	stb	r2,-8(fp)
	switch (no_ch_mode) {
   14664:	e0bffe03 	ldbu	r2,-8(fp)
   14668:	10c00060 	cmpeqi	r3,r2,1
   1466c:	1800031e 	bne	r3,zero,1467c <ad9361_set_no_ch_mode+0x40>
   14670:	108000a0 	cmpeqi	r2,r2,2
   14674:	1000051e 	bne	r2,zero,1468c <ad9361_set_no_ch_mode+0x50>
   14678:	00000906 	br	146a0 <ad9361_set_no_ch_mode+0x64>
	case 1:
		phy->pdata->rx2tx2 = 0;
   1467c:	e0bffd17 	ldw	r2,-12(fp)
   14680:	10803017 	ldw	r2,192(r2)
   14684:	10000005 	stb	zero,0(r2)
		break;
   14688:	00000706 	br	146a8 <ad9361_set_no_ch_mode+0x6c>
	case 2:
		phy->pdata->rx2tx2 = 1;
   1468c:	e0bffd17 	ldw	r2,-12(fp)
   14690:	10803017 	ldw	r2,192(r2)
   14694:	00c00044 	movi	r3,1
   14698:	10c00005 	stb	r3,0(r2)
		break;
   1469c:	00000206 	br	146a8 <ad9361_set_no_ch_mode+0x6c>
	default:
		return -EINVAL;
   146a0:	00bffa84 	movi	r2,-22
   146a4:	0000fb06 	br	14a94 <ad9361_set_no_ch_mode+0x458>
	}

#ifndef AXI_ADC_NOT_PRESENT
	phy->adc_conv->chip_info = &axiadc_chip_info_tbl[phy->pdata->rx2tx2 ? ID_AD9361 : ID_AD9364];
   146a8:	e0bffd17 	ldw	r2,-12(fp)
   146ac:	10c06f17 	ldw	r3,444(r2)
   146b0:	e0bffd17 	ldw	r2,-12(fp)
   146b4:	10803017 	ldw	r2,192(r2)
   146b8:	10800003 	ldbu	r2,0(r2)
   146bc:	10803fcc 	andi	r2,r2,255
   146c0:	10000226 	beq	r2,zero,146cc <ad9361_set_no_ch_mode+0x90>
   146c4:	0005883a 	mov	r2,zero
   146c8:	00000106 	br	146d0 <ad9361_set_no_ch_mode+0x94>
   146cc:	00800044 	movi	r2,1
   146d0:	11000324 	muli	r4,r2,12
   146d4:	008000f4 	movhi	r2,3
   146d8:	10a5e204 	addi	r2,r2,-26744
   146dc:	2085883a 	add	r2,r4,r2
   146e0:	18800015 	stw	r2,0(r3)
#endif
	ad9361_reset(phy);
   146e4:	e13ffd17 	ldw	r4,-12(fp)
   146e8:	00006980 	call	698 <ad9361_reset>
	ad9361_spi_write(phy->spi, REG_SPI_CONF, SOFT_RESET | _SOFT_RESET);
   146ec:	e0bffd17 	ldw	r2,-12(fp)
   146f0:	10800117 	ldw	r2,4(r2)
   146f4:	1009883a 	mov	r4,r2
   146f8:	000b883a 	mov	r5,zero
   146fc:	01802044 	movi	r6,129
   14700:	00002600 	call	260 <ad9361_spi_write>
	ad9361_spi_write(phy->spi, REG_SPI_CONF, 0x0);
   14704:	e0bffd17 	ldw	r2,-12(fp)
   14708:	10800117 	ldw	r2,4(r2)
   1470c:	1009883a 	mov	r4,r2
   14710:	000b883a 	mov	r5,zero
   14714:	000d883a 	mov	r6,zero
   14718:	00002600 	call	260 <ad9361_spi_write>

	phy->clks[TX_REFCLK]->rate = ad9361_clk_factor_recalc_rate(phy->ref_clk_scale[TX_REFCLK], phy->clk_refin->rate);
   1471c:	e0bffd17 	ldw	r2,-12(fp)
   14720:	14000517 	ldw	r16,20(r2)
   14724:	e0bffd17 	ldw	r2,-12(fp)
   14728:	10c01917 	ldw	r3,100(r2)
   1472c:	e0bffd17 	ldw	r2,-12(fp)
   14730:	10800217 	ldw	r2,8(r2)
   14734:	10800117 	ldw	r2,4(r2)
   14738:	1809883a 	mov	r4,r3
   1473c:	100b883a 	mov	r5,r2
   14740:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   14744:	80800115 	stw	r2,4(r16)
	phy->clks[TX_REFCLK]->rate = ad9361_clk_factor_recalc_rate(phy->ref_clk_scale[TX_REFCLK], phy->clk_refin->rate);
   14748:	e0bffd17 	ldw	r2,-12(fp)
   1474c:	14000517 	ldw	r16,20(r2)
   14750:	e0bffd17 	ldw	r2,-12(fp)
   14754:	10c01917 	ldw	r3,100(r2)
   14758:	e0bffd17 	ldw	r2,-12(fp)
   1475c:	10800217 	ldw	r2,8(r2)
   14760:	10800117 	ldw	r2,4(r2)
   14764:	1809883a 	mov	r4,r3
   14768:	100b883a 	mov	r5,r2
   1476c:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   14770:	80800115 	stw	r2,4(r16)
	phy->clks[RX_REFCLK]->rate = ad9361_clk_factor_recalc_rate(phy->ref_clk_scale[RX_REFCLK], phy->clk_refin->rate);
   14774:	e0bffd17 	ldw	r2,-12(fp)
   14778:	14000417 	ldw	r16,16(r2)
   1477c:	e0bffd17 	ldw	r2,-12(fp)
   14780:	10c01817 	ldw	r3,96(r2)
   14784:	e0bffd17 	ldw	r2,-12(fp)
   14788:	10800217 	ldw	r2,8(r2)
   1478c:	10800117 	ldw	r2,4(r2)
   14790:	1809883a 	mov	r4,r3
   14794:	100b883a 	mov	r5,r2
   14798:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   1479c:	80800115 	stw	r2,4(r16)
	phy->clks[BB_REFCLK]->rate = ad9361_clk_factor_recalc_rate(phy->ref_clk_scale[BB_REFCLK], phy->clk_refin->rate);
   147a0:	e0bffd17 	ldw	r2,-12(fp)
   147a4:	14000317 	ldw	r16,12(r2)
   147a8:	e0bffd17 	ldw	r2,-12(fp)
   147ac:	10c01717 	ldw	r3,92(r2)
   147b0:	e0bffd17 	ldw	r2,-12(fp)
   147b4:	10800217 	ldw	r2,8(r2)
   147b8:	10800117 	ldw	r2,4(r2)
   147bc:	1809883a 	mov	r4,r3
   147c0:	100b883a 	mov	r5,r2
   147c4:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   147c8:	80800115 	stw	r2,4(r16)
	phy->clks[BBPLL_CLK]->rate = ad9361_bbpll_recalc_rate(phy->ref_clk_scale[BBPLL_CLK], phy->clks[BB_REFCLK]->rate);
   147cc:	e0bffd17 	ldw	r2,-12(fp)
   147d0:	14000617 	ldw	r16,24(r2)
   147d4:	e0bffd17 	ldw	r2,-12(fp)
   147d8:	10c01a17 	ldw	r3,104(r2)
   147dc:	e0bffd17 	ldw	r2,-12(fp)
   147e0:	10800317 	ldw	r2,12(r2)
   147e4:	10800117 	ldw	r2,4(r2)
   147e8:	1809883a 	mov	r4,r3
   147ec:	100b883a 	mov	r5,r2
   147f0:	000e8ac0 	call	e8ac <ad9361_bbpll_recalc_rate>
   147f4:	80800115 	stw	r2,4(r16)
	phy->clks[ADC_CLK]->rate = ad9361_clk_factor_recalc_rate(phy->ref_clk_scale[ADC_CLK], phy->clks[BBPLL_CLK]->rate);
   147f8:	e0bffd17 	ldw	r2,-12(fp)
   147fc:	14000717 	ldw	r16,28(r2)
   14800:	e0bffd17 	ldw	r2,-12(fp)
   14804:	10c01b17 	ldw	r3,108(r2)
   14808:	e0bffd17 	ldw	r2,-12(fp)
   1480c:	10800617 	ldw	r2,24(r2)
   14810:	10800117 	ldw	r2,4(r2)
   14814:	1809883a 	mov	r4,r3
   14818:	100b883a 	mov	r5,r2
   1481c:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   14820:	80800115 	stw	r2,4(r16)
	phy->clks[R2_CLK]->rate = ad9361_clk_factor_recalc_rate(phy->ref_clk_scale[R2_CLK], phy->clks[ADC_CLK]->rate);
   14824:	e0bffd17 	ldw	r2,-12(fp)
   14828:	14000817 	ldw	r16,32(r2)
   1482c:	e0bffd17 	ldw	r2,-12(fp)
   14830:	10c01c17 	ldw	r3,112(r2)
   14834:	e0bffd17 	ldw	r2,-12(fp)
   14838:	10800717 	ldw	r2,28(r2)
   1483c:	10800117 	ldw	r2,4(r2)
   14840:	1809883a 	mov	r4,r3
   14844:	100b883a 	mov	r5,r2
   14848:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   1484c:	80800115 	stw	r2,4(r16)
	phy->clks[R1_CLK]->rate = ad9361_clk_factor_recalc_rate(phy->ref_clk_scale[R1_CLK], phy->clks[R2_CLK]->rate);
   14850:	e0bffd17 	ldw	r2,-12(fp)
   14854:	14000917 	ldw	r16,36(r2)
   14858:	e0bffd17 	ldw	r2,-12(fp)
   1485c:	10c01d17 	ldw	r3,116(r2)
   14860:	e0bffd17 	ldw	r2,-12(fp)
   14864:	10800817 	ldw	r2,32(r2)
   14868:	10800117 	ldw	r2,4(r2)
   1486c:	1809883a 	mov	r4,r3
   14870:	100b883a 	mov	r5,r2
   14874:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   14878:	80800115 	stw	r2,4(r16)
	phy->clks[CLKRF_CLK]->rate = ad9361_clk_factor_recalc_rate(phy->ref_clk_scale[CLKRF_CLK], phy->clks[R1_CLK]->rate);
   1487c:	e0bffd17 	ldw	r2,-12(fp)
   14880:	14000a17 	ldw	r16,40(r2)
   14884:	e0bffd17 	ldw	r2,-12(fp)
   14888:	10c01e17 	ldw	r3,120(r2)
   1488c:	e0bffd17 	ldw	r2,-12(fp)
   14890:	10800917 	ldw	r2,36(r2)
   14894:	10800117 	ldw	r2,4(r2)
   14898:	1809883a 	mov	r4,r3
   1489c:	100b883a 	mov	r5,r2
   148a0:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   148a4:	80800115 	stw	r2,4(r16)
	phy->clks[RX_SAMPL_CLK]->rate = ad9361_clk_factor_recalc_rate(phy->ref_clk_scale[RX_SAMPL_CLK], phy->clks[CLKRF_CLK]->rate);
   148a8:	e0bffd17 	ldw	r2,-12(fp)
   148ac:	14000b17 	ldw	r16,44(r2)
   148b0:	e0bffd17 	ldw	r2,-12(fp)
   148b4:	10c01f17 	ldw	r3,124(r2)
   148b8:	e0bffd17 	ldw	r2,-12(fp)
   148bc:	10800a17 	ldw	r2,40(r2)
   148c0:	10800117 	ldw	r2,4(r2)
   148c4:	1809883a 	mov	r4,r3
   148c8:	100b883a 	mov	r5,r2
   148cc:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   148d0:	80800115 	stw	r2,4(r16)
	phy->clks[DAC_CLK]->rate = ad9361_clk_factor_recalc_rate(phy->ref_clk_scale[DAC_CLK], phy->clks[ADC_CLK]->rate);
   148d4:	e0bffd17 	ldw	r2,-12(fp)
   148d8:	14000c17 	ldw	r16,48(r2)
   148dc:	e0bffd17 	ldw	r2,-12(fp)
   148e0:	10c02017 	ldw	r3,128(r2)
   148e4:	e0bffd17 	ldw	r2,-12(fp)
   148e8:	10800717 	ldw	r2,28(r2)
   148ec:	10800117 	ldw	r2,4(r2)
   148f0:	1809883a 	mov	r4,r3
   148f4:	100b883a 	mov	r5,r2
   148f8:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   148fc:	80800115 	stw	r2,4(r16)
	phy->clks[T2_CLK]->rate = ad9361_clk_factor_recalc_rate(phy->ref_clk_scale[T2_CLK], phy->clks[DAC_CLK]->rate);
   14900:	e0bffd17 	ldw	r2,-12(fp)
   14904:	14000d17 	ldw	r16,52(r2)
   14908:	e0bffd17 	ldw	r2,-12(fp)
   1490c:	10c02117 	ldw	r3,132(r2)
   14910:	e0bffd17 	ldw	r2,-12(fp)
   14914:	10800c17 	ldw	r2,48(r2)
   14918:	10800117 	ldw	r2,4(r2)
   1491c:	1809883a 	mov	r4,r3
   14920:	100b883a 	mov	r5,r2
   14924:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   14928:	80800115 	stw	r2,4(r16)
	phy->clks[T1_CLK]->rate = ad9361_clk_factor_recalc_rate(phy->ref_clk_scale[T1_CLK], phy->clks[T2_CLK]->rate);
   1492c:	e0bffd17 	ldw	r2,-12(fp)
   14930:	14000e17 	ldw	r16,56(r2)
   14934:	e0bffd17 	ldw	r2,-12(fp)
   14938:	10c02217 	ldw	r3,136(r2)
   1493c:	e0bffd17 	ldw	r2,-12(fp)
   14940:	10800d17 	ldw	r2,52(r2)
   14944:	10800117 	ldw	r2,4(r2)
   14948:	1809883a 	mov	r4,r3
   1494c:	100b883a 	mov	r5,r2
   14950:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   14954:	80800115 	stw	r2,4(r16)
	phy->clks[CLKTF_CLK]->rate = ad9361_clk_factor_recalc_rate(phy->ref_clk_scale[CLKTF_CLK], phy->clks[T1_CLK]->rate);
   14958:	e0bffd17 	ldw	r2,-12(fp)
   1495c:	14000f17 	ldw	r16,60(r2)
   14960:	e0bffd17 	ldw	r2,-12(fp)
   14964:	10c02317 	ldw	r3,140(r2)
   14968:	e0bffd17 	ldw	r2,-12(fp)
   1496c:	10800e17 	ldw	r2,56(r2)
   14970:	10800117 	ldw	r2,4(r2)
   14974:	1809883a 	mov	r4,r3
   14978:	100b883a 	mov	r5,r2
   1497c:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   14980:	80800115 	stw	r2,4(r16)
	phy->clks[TX_SAMPL_CLK]->rate = ad9361_clk_factor_recalc_rate(phy->ref_clk_scale[TX_SAMPL_CLK], phy->clks[CLKTF_CLK]->rate);
   14984:	e0bffd17 	ldw	r2,-12(fp)
   14988:	14001017 	ldw	r16,64(r2)
   1498c:	e0bffd17 	ldw	r2,-12(fp)
   14990:	10c02417 	ldw	r3,144(r2)
   14994:	e0bffd17 	ldw	r2,-12(fp)
   14998:	10800f17 	ldw	r2,60(r2)
   1499c:	10800117 	ldw	r2,4(r2)
   149a0:	1809883a 	mov	r4,r3
   149a4:	100b883a 	mov	r5,r2
   149a8:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   149ac:	80800115 	stw	r2,4(r16)
	phy->clks[RX_RFPLL_INT]->rate = ad9361_rfpll_int_recalc_rate(phy->ref_clk_scale[RX_RFPLL_INT], phy->clks[RX_REFCLK]->rate);
   149b0:	e0bffd17 	ldw	r2,-12(fp)
   149b4:	14001117 	ldw	r16,68(r2)
   149b8:	e0bffd17 	ldw	r2,-12(fp)
   149bc:	10c02517 	ldw	r3,148(r2)
   149c0:	e0bffd17 	ldw	r2,-12(fp)
   149c4:	10800417 	ldw	r2,16(r2)
   149c8:	10800117 	ldw	r2,4(r2)
   149cc:	1809883a 	mov	r4,r3
   149d0:	100b883a 	mov	r5,r2
   149d4:	000f3300 	call	f330 <ad9361_rfpll_int_recalc_rate>
   149d8:	80800115 	stw	r2,4(r16)
	phy->clks[TX_RFPLL_INT]->rate = ad9361_rfpll_int_recalc_rate(phy->ref_clk_scale[TX_RFPLL_INT], phy->clks[TX_REFCLK]->rate);
   149dc:	e0bffd17 	ldw	r2,-12(fp)
   149e0:	14001217 	ldw	r16,72(r2)
   149e4:	e0bffd17 	ldw	r2,-12(fp)
   149e8:	10c02617 	ldw	r3,152(r2)
   149ec:	e0bffd17 	ldw	r2,-12(fp)
   149f0:	10800517 	ldw	r2,20(r2)
   149f4:	10800117 	ldw	r2,4(r2)
   149f8:	1809883a 	mov	r4,r3
   149fc:	100b883a 	mov	r5,r2
   14a00:	000f3300 	call	f330 <ad9361_rfpll_int_recalc_rate>
   14a04:	80800115 	stw	r2,4(r16)
	phy->clks[RX_RFPLL_DUMMY]->rate = ad9361_rfpll_dummy_recalc_rate(phy->ref_clk_scale[RX_RFPLL_DUMMY]);
   14a08:	e0bffd17 	ldw	r2,-12(fp)
   14a0c:	14001317 	ldw	r16,76(r2)
   14a10:	e0bffd17 	ldw	r2,-12(fp)
   14a14:	10802717 	ldw	r2,156(r2)
   14a18:	1009883a 	mov	r4,r2
   14a1c:	000f9f40 	call	f9f4 <ad9361_rfpll_dummy_recalc_rate>
   14a20:	80800115 	stw	r2,4(r16)
	phy->clks[TX_RFPLL_DUMMY]->rate = ad9361_rfpll_dummy_recalc_rate(phy->ref_clk_scale[TX_RFPLL_DUMMY]);
   14a24:	e0bffd17 	ldw	r2,-12(fp)
   14a28:	14001417 	ldw	r16,80(r2)
   14a2c:	e0bffd17 	ldw	r2,-12(fp)
   14a30:	10802817 	ldw	r2,160(r2)
   14a34:	1009883a 	mov	r4,r2
   14a38:	000f9f40 	call	f9f4 <ad9361_rfpll_dummy_recalc_rate>
   14a3c:	80800115 	stw	r2,4(r16)
	phy->clks[RX_RFPLL]->rate = ad9361_rfpll_recalc_rate(phy->ref_clk_scale[RX_RFPLL]);
   14a40:	e0bffd17 	ldw	r2,-12(fp)
   14a44:	14001517 	ldw	r16,84(r2)
   14a48:	e0bffd17 	ldw	r2,-12(fp)
   14a4c:	10802917 	ldw	r2,164(r2)
   14a50:	1009883a 	mov	r4,r2
   14a54:	000fab00 	call	fab0 <ad9361_rfpll_recalc_rate>
   14a58:	80800115 	stw	r2,4(r16)
	phy->clks[TX_RFPLL]->rate = ad9361_rfpll_recalc_rate(phy->ref_clk_scale[TX_RFPLL]);
   14a5c:	e0bffd17 	ldw	r2,-12(fp)
   14a60:	14001617 	ldw	r16,88(r2)
   14a64:	e0bffd17 	ldw	r2,-12(fp)
   14a68:	10802a17 	ldw	r2,168(r2)
   14a6c:	1009883a 	mov	r4,r2
   14a70:	000fab00 	call	fab0 <ad9361_rfpll_recalc_rate>
   14a74:	80800115 	stw	r2,4(r16)

#ifndef AXI_ADC_NOT_PRESENT
	axiadc_init(phy);
   14a78:	e13ffd17 	ldw	r4,-12(fp)
   14a7c:	001b9580 	call	1b958 <axiadc_init>
#endif
	ad9361_setup(phy);
   14a80:	e13ffd17 	ldw	r4,-12(fp)
   14a84:	000bd2c0 	call	bd2c <ad9361_setup>
#ifndef AXI_ADC_NOT_PRESENT
	/* platform specific wrapper to call ad9361_post_setup() */
	axiadc_post_setup(phy);
   14a88:	e13ffd17 	ldw	r4,-12(fp)
   14a8c:	001b9980 	call	1b998 <axiadc_post_setup>
#endif

	return 0;
   14a90:	0005883a 	mov	r2,zero
}
   14a94:	e6ffff04 	addi	sp,fp,-4
   14a98:	dfc00217 	ldw	ra,8(sp)
   14a9c:	df000117 	ldw	fp,4(sp)
   14aa0:	dc000017 	ldw	r16,0(sp)
   14aa4:	dec00304 	addi	sp,sp,12
   14aa8:	f800283a 	ret

00014aac <ad9361_do_mcs>:
 * @return 0 in case of success, negative error code otherwise.
 *
 * Note: This function will/may affect the data path.
 */
int32_t ad9361_do_mcs(struct ad9361_rf_phy *phy_master, struct ad9361_rf_phy *phy_slave)
{
   14aac:	defff904 	addi	sp,sp,-28
   14ab0:	de00012e 	bgeu	sp,et,14ab8 <ad9361_do_mcs+0xc>
   14ab4:	003b68fa 	trap	3
   14ab8:	dfc00615 	stw	ra,24(sp)
   14abc:	df000515 	stw	fp,20(sp)
   14ac0:	df000504 	addi	fp,sp,20
   14ac4:	e13ffe15 	stw	r4,-8(fp)
   14ac8:	e17fff15 	stw	r5,-4(fp)
	uint32_t ensm_mode;
	int32_t step;
	int32_t reg;

	reg = ad9361_spi_read(phy_master->spi, REG_RX_CLOCK_DATA_DELAY);
   14acc:	e0bffe17 	ldw	r2,-8(fp)
   14ad0:	10800117 	ldw	r2,4(r2)
   14ad4:	1009883a 	mov	r4,r2
   14ad8:	01400184 	movi	r5,6
   14adc:	00001500 	call	150 <ad9361_spi_read>
   14ae0:	e0bffc15 	stw	r2,-16(fp)
	ad9361_spi_write(phy_slave->spi, REG_RX_CLOCK_DATA_DELAY, reg);
   14ae4:	e0bfff17 	ldw	r2,-4(fp)
   14ae8:	10c00117 	ldw	r3,4(r2)
   14aec:	e0bffc17 	ldw	r2,-16(fp)
   14af0:	1809883a 	mov	r4,r3
   14af4:	01400184 	movi	r5,6
   14af8:	100d883a 	mov	r6,r2
   14afc:	00002600 	call	260 <ad9361_spi_write>
	reg = ad9361_spi_read(phy_master->spi, REG_TX_CLOCK_DATA_DELAY);
   14b00:	e0bffe17 	ldw	r2,-8(fp)
   14b04:	10800117 	ldw	r2,4(r2)
   14b08:	1009883a 	mov	r4,r2
   14b0c:	014001c4 	movi	r5,7
   14b10:	00001500 	call	150 <ad9361_spi_read>
   14b14:	e0bffc15 	stw	r2,-16(fp)
	ad9361_spi_write(phy_slave->spi, REG_TX_CLOCK_DATA_DELAY, reg);
   14b18:	e0bfff17 	ldw	r2,-4(fp)
   14b1c:	10c00117 	ldw	r3,4(r2)
   14b20:	e0bffc17 	ldw	r2,-16(fp)
   14b24:	1809883a 	mov	r4,r3
   14b28:	014001c4 	movi	r5,7
   14b2c:	100d883a 	mov	r6,r2
   14b30:	00002600 	call	260 <ad9361_spi_write>

	ad9361_get_en_state_machine_mode(phy_master, &ensm_mode);
   14b34:	e0bffd04 	addi	r2,fp,-12
   14b38:	e13ffe17 	ldw	r4,-8(fp)
   14b3c:	100b883a 	mov	r5,r2
   14b40:	001294c0 	call	1294c <ad9361_get_en_state_machine_mode>

	ad9361_set_en_state_machine_mode(phy_master, ENSM_MODE_ALERT);
   14b44:	e13ffe17 	ldw	r4,-8(fp)
   14b48:	01400084 	movi	r5,2
   14b4c:	00128040 	call	12804 <ad9361_set_en_state_machine_mode>
	ad9361_set_en_state_machine_mode(phy_slave, ENSM_MODE_ALERT);
   14b50:	e13fff17 	ldw	r4,-4(fp)
   14b54:	01400084 	movi	r5,2
   14b58:	00128040 	call	12804 <ad9361_set_en_state_machine_mode>

	for (step = 0; step <= 5; step++)
   14b5c:	e03ffb15 	stw	zero,-20(fp)
   14b60:	00000b06 	br	14b90 <ad9361_do_mcs+0xe4>
	{
		ad9361_mcs(phy_slave, step);
   14b64:	e13fff17 	ldw	r4,-4(fp)
   14b68:	e17ffb17 	ldw	r5,-20(fp)
   14b6c:	000b8e00 	call	b8e0 <ad9361_mcs>
		ad9361_mcs(phy_master, step);
   14b70:	e13ffe17 	ldw	r4,-8(fp)
   14b74:	e17ffb17 	ldw	r5,-20(fp)
   14b78:	000b8e00 	call	b8e0 <ad9361_mcs>
		mdelay(100);
   14b7c:	01001904 	movi	r4,100
   14b80:	001b8dc0 	call	1b8dc <mdelay>
	ad9361_get_en_state_machine_mode(phy_master, &ensm_mode);

	ad9361_set_en_state_machine_mode(phy_master, ENSM_MODE_ALERT);
	ad9361_set_en_state_machine_mode(phy_slave, ENSM_MODE_ALERT);

	for (step = 0; step <= 5; step++)
   14b84:	e0bffb17 	ldw	r2,-20(fp)
   14b88:	10800044 	addi	r2,r2,1
   14b8c:	e0bffb15 	stw	r2,-20(fp)
   14b90:	e0bffb17 	ldw	r2,-20(fp)
   14b94:	10800190 	cmplti	r2,r2,6
   14b98:	103ff21e 	bne	r2,zero,14b64 <_gp+0xfffe2a44>
		ad9361_mcs(phy_slave, step);
		ad9361_mcs(phy_master, step);
		mdelay(100);
	}

	ad9361_set_en_state_machine_mode(phy_master, ensm_mode);
   14b9c:	e0bffd17 	ldw	r2,-12(fp)
   14ba0:	e13ffe17 	ldw	r4,-8(fp)
   14ba4:	100b883a 	mov	r5,r2
   14ba8:	00128040 	call	12804 <ad9361_set_en_state_machine_mode>
	ad9361_set_en_state_machine_mode(phy_slave, ensm_mode);
   14bac:	e0bffd17 	ldw	r2,-12(fp)
   14bb0:	e13fff17 	ldw	r4,-4(fp)
   14bb4:	100b883a 	mov	r5,r2
   14bb8:	00128040 	call	12804 <ad9361_set_en_state_machine_mode>

	return 0;
   14bbc:	0005883a 	mov	r2,zero
}
   14bc0:	e037883a 	mov	sp,fp
   14bc4:	dfc00117 	ldw	ra,4(sp)
   14bc8:	df000017 	ldw	fp,0(sp)
   14bcc:	dec00204 	addi	sp,sp,8
   14bd0:	f800283a 	ret

00014bd4 <ad9361_set_trx_fir_en_dis>:
 *
 * Note: This function will/may affect the data path.
 */
int32_t ad9361_set_trx_fir_en_dis (struct ad9361_rf_phy *phy,
								  uint8_t en_dis)
{
   14bd4:	defffb04 	addi	sp,sp,-20
   14bd8:	de00012e 	bgeu	sp,et,14be0 <ad9361_set_trx_fir_en_dis+0xc>
   14bdc:	003b68fa 	trap	3
   14be0:	dfc00415 	stw	ra,16(sp)
   14be4:	df000315 	stw	fp,12(sp)
   14be8:	df000304 	addi	fp,sp,12
   14bec:	e13ffe15 	stw	r4,-8(fp)
   14bf0:	2805883a 	mov	r2,r5
   14bf4:	e0bfff05 	stb	r2,-4(fp)
	int32_t ret = 0;
   14bf8:	e03ffd15 	stw	zero,-12(fp)

	if ((phy->bypass_rx_fir == phy->bypass_tx_fir) &&
   14bfc:	e0bffe17 	ldw	r2,-8(fp)
   14c00:	10c04f03 	ldbu	r3,316(r2)
   14c04:	e0bffe17 	ldw	r2,-8(fp)
   14c08:	10804f43 	ldbu	r2,317(r2)
   14c0c:	18c03fcc 	andi	r3,r3,255
   14c10:	10803fcc 	andi	r2,r2,255
   14c14:	1880091e 	bne	r3,r2,14c3c <ad9361_set_trx_fir_en_dis+0x68>
			(phy->bypass_rx_fir == !en_dis))
   14c18:	e0bffe17 	ldw	r2,-8(fp)
   14c1c:	10804f03 	ldbu	r2,316(r2)
   14c20:	10c03fcc 	andi	r3,r2,255
   14c24:	e0bfff03 	ldbu	r2,-4(fp)
   14c28:	1005003a 	cmpeq	r2,r2,zero
   14c2c:	10803fcc 	andi	r2,r2,255
int32_t ad9361_set_trx_fir_en_dis (struct ad9361_rf_phy *phy,
								  uint8_t en_dis)
{
	int32_t ret = 0;

	if ((phy->bypass_rx_fir == phy->bypass_tx_fir) &&
   14c30:	1880021e 	bne	r3,r2,14c3c <ad9361_set_trx_fir_en_dis+0x68>
			(phy->bypass_rx_fir == !en_dis))
		return ret;
   14c34:	e0bffd17 	ldw	r2,-12(fp)
   14c38:	00001606 	br	14c94 <ad9361_set_trx_fir_en_dis+0xc0>

	phy->bypass_rx_fir = !en_dis;
   14c3c:	e0bfff03 	ldbu	r2,-4(fp)
   14c40:	1005003a 	cmpeq	r2,r2,zero
   14c44:	1007883a 	mov	r3,r2
   14c48:	e0bffe17 	ldw	r2,-8(fp)
   14c4c:	10c04f05 	stb	r3,316(r2)
	phy->bypass_tx_fir = !en_dis;
   14c50:	e0bfff03 	ldbu	r2,-4(fp)
   14c54:	1005003a 	cmpeq	r2,r2,zero
   14c58:	1007883a 	mov	r3,r2
   14c5c:	e0bffe17 	ldw	r2,-8(fp)
   14c60:	10c04f45 	stb	r3,317(r2)
	ret = ad9361_validate_enable_fir(phy);
   14c64:	e13ffe17 	ldw	r4,-8(fp)
   14c68:	000d4780 	call	d478 <ad9361_validate_enable_fir>
   14c6c:	e0bffd15 	stw	r2,-12(fp)
	if (ret < 0) {
   14c70:	e0bffd17 	ldw	r2,-12(fp)
   14c74:	1000060e 	bge	r2,zero,14c90 <ad9361_set_trx_fir_en_dis+0xbc>
		phy->bypass_rx_fir = true;
   14c78:	e0bffe17 	ldw	r2,-8(fp)
   14c7c:	00c00044 	movi	r3,1
   14c80:	10c04f05 	stb	r3,316(r2)
		phy->bypass_tx_fir = true;
   14c84:	e0bffe17 	ldw	r2,-8(fp)
   14c88:	00c00044 	movi	r3,1
   14c8c:	10c04f45 	stb	r3,317(r2)
	}

	return ret;
   14c90:	e0bffd17 	ldw	r2,-12(fp)
}
   14c94:	e037883a 	mov	sp,fp
   14c98:	dfc00117 	ldw	ra,4(sp)
   14c9c:	df000017 	ldw	fp,0(sp)
   14ca0:	dec00204 	addi	sp,sp,8
   14ca4:	f800283a 	ret

00014ca8 <ad9361_set_trx_rate_gov>:
 * 					HIGHEST_OSR (0 - highest OSR)
 * 					NOMINAL_OSR (1 - nominal)
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_set_trx_rate_gov (struct ad9361_rf_phy *phy, uint32_t rate_gov)
{
   14ca8:	defffd04 	addi	sp,sp,-12
   14cac:	de00012e 	bgeu	sp,et,14cb4 <ad9361_set_trx_rate_gov+0xc>
   14cb0:	003b68fa 	trap	3
   14cb4:	df000215 	stw	fp,8(sp)
   14cb8:	df000204 	addi	fp,sp,8
   14cbc:	e13ffe15 	stw	r4,-8(fp)
   14cc0:	e17fff15 	stw	r5,-4(fp)
	if (rate_gov == 0)
   14cc4:	e0bfff17 	ldw	r2,-4(fp)
   14cc8:	1000031e 	bne	r2,zero,14cd8 <ad9361_set_trx_rate_gov+0x30>
		phy->rate_governor = 0;
   14ccc:	e0bffe17 	ldw	r2,-8(fp)
   14cd0:	10004e15 	stw	zero,312(r2)
   14cd4:	00000306 	br	14ce4 <ad9361_set_trx_rate_gov+0x3c>
	else
		phy->rate_governor = 1;
   14cd8:	e0bffe17 	ldw	r2,-8(fp)
   14cdc:	00c00044 	movi	r3,1
   14ce0:	10c04e15 	stw	r3,312(r2)

	return 0;
   14ce4:	0005883a 	mov	r2,zero
}
   14ce8:	e037883a 	mov	sp,fp
   14cec:	df000017 	ldw	fp,0(sp)
   14cf0:	dec00104 	addi	sp,sp,4
   14cf4:	f800283a 	ret

00014cf8 <ad9361_get_trx_rate_gov>:
 * @param phy The AD9361 current state structure.
 * @param rate_gov Option buffer.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_get_trx_rate_gov (struct ad9361_rf_phy *phy, uint32_t *rate_gov)
{
   14cf8:	defffd04 	addi	sp,sp,-12
   14cfc:	de00012e 	bgeu	sp,et,14d04 <ad9361_get_trx_rate_gov+0xc>
   14d00:	003b68fa 	trap	3
   14d04:	df000215 	stw	fp,8(sp)
   14d08:	df000204 	addi	fp,sp,8
   14d0c:	e13ffe15 	stw	r4,-8(fp)
   14d10:	e17fff15 	stw	r5,-4(fp)
	*rate_gov = phy->rate_governor;
   14d14:	e0bffe17 	ldw	r2,-8(fp)
   14d18:	10c04e17 	ldw	r3,312(r2)
   14d1c:	e0bfff17 	ldw	r2,-4(fp)
   14d20:	10c00015 	stw	r3,0(r2)

	return 0;
   14d24:	0005883a 	mov	r2,zero
}
   14d28:	e037883a 	mov	sp,fp
   14d2c:	df000017 	ldw	fp,0(sp)
   14d30:	dec00104 	addi	sp,sp,4
   14d34:	f800283a 	ret

00014d38 <ad9361_do_calib>:
 * @return 0 in case of success, negative error code otherwise.
 *
 * Note: This function will/may affect the data path.
 */
int32_t ad9361_do_calib(struct ad9361_rf_phy *phy, uint32_t cal, int32_t arg)
{
   14d38:	defffb04 	addi	sp,sp,-20
   14d3c:	de00012e 	bgeu	sp,et,14d44 <ad9361_do_calib+0xc>
   14d40:	003b68fa 	trap	3
   14d44:	dfc00415 	stw	ra,16(sp)
   14d48:	df000315 	stw	fp,12(sp)
   14d4c:	df000304 	addi	fp,sp,12
   14d50:	e13ffd15 	stw	r4,-12(fp)
   14d54:	e17ffe15 	stw	r5,-8(fp)
   14d58:	e1bfff15 	stw	r6,-4(fp)
	return ad9361_do_calib_run(phy, cal, arg);
   14d5c:	e13ffd17 	ldw	r4,-12(fp)
   14d60:	e17ffe17 	ldw	r5,-8(fp)
   14d64:	e1bfff17 	ldw	r6,-4(fp)
   14d68:	000ca480 	call	ca48 <ad9361_do_calib_run>
}
   14d6c:	e037883a 	mov	sp,fp
   14d70:	dfc00117 	ldw	ra,4(sp)
   14d74:	df000017 	ldw	fp,0(sp)
   14d78:	dec00204 	addi	sp,sp,8
   14d7c:	f800283a 	ret

00014d80 <ad9361_trx_load_enable_fir>:
 * Note: This function will/may affect the data path.
 */
int32_t ad9361_trx_load_enable_fir(struct ad9361_rf_phy *phy,
								   AD9361_RXFIRConfig rx_fir_cfg,
								   AD9361_TXFIRConfig tx_fir_cfg)
{
   14d80:	deffb004 	addi	sp,sp,-320
   14d84:	de00012e 	bgeu	sp,et,14d8c <ad9361_trx_load_enable_fir+0xc>
   14d88:	003b68fa 	trap	3
   14d8c:	dfc04c15 	stw	ra,304(sp)
   14d90:	df004b15 	stw	fp,300(sp)
   14d94:	df004b04 	addi	fp,sp,300
   14d98:	e13fff15 	stw	r4,-4(fp)
   14d9c:	e1400215 	stw	r5,8(fp)
   14da0:	e1800315 	stw	r6,12(fp)
   14da4:	e1c00415 	stw	r7,16(fp)
	int32_t rtx = -1, rrx = -1;
   14da8:	00bfffc4 	movi	r2,-1
   14dac:	e0bffd15 	stw	r2,-12(fp)
   14db0:	00bfffc4 	movi	r2,-1
   14db4:	e0bffe15 	stw	r2,-8(fp)

	phy->filt_rx_bw_Hz = 0;
   14db8:	e0bfff17 	ldw	r2,-4(fp)
   14dbc:	10005c15 	stw	zero,368(r2)
	phy->filt_tx_bw_Hz = 0;
   14dc0:	e0bfff17 	ldw	r2,-4(fp)
   14dc4:	10005d15 	stw	zero,372(r2)
	phy->filt_valid = false;
   14dc8:	e0bfff17 	ldw	r2,-4(fp)
   14dcc:	10004fc5 	stb	zero,319(r2)

	if (tx_fir_cfg.tx_path_clks[TX_SAMPL_FREQ]) {
   14dd0:	e0809617 	ldw	r2,600(fp)
   14dd4:	10000926 	beq	r2,zero,14dfc <ad9361_trx_load_enable_fir+0x7c>
		memcpy(phy->filt_tx_path_clks, tx_fir_cfg.tx_path_clks,
   14dd8:	e0bfff17 	ldw	r2,-4(fp)
   14ddc:	10c05604 	addi	r3,r2,344
   14de0:	e0804d04 	addi	r2,fp,308
   14de4:	10804404 	addi	r2,r2,272
   14de8:	1809883a 	mov	r4,r3
   14dec:	100b883a 	mov	r5,r2
   14df0:	01800604 	movi	r6,24
   14df4:	001f52c0 	call	1f52c <memcpy>
				sizeof(phy->filt_tx_path_clks));
		rtx = 0;
   14df8:	e03ffd15 	stw	zero,-12(fp)
	}

	if (rx_fir_cfg.rx_path_clks[RX_SAMPL_FREQ]) {
   14dfc:	e0804b17 	ldw	r2,300(fp)
   14e00:	10000826 	beq	r2,zero,14e24 <ad9361_trx_load_enable_fir+0xa4>
		memcpy(phy->filt_rx_path_clks, rx_fir_cfg.rx_path_clks,
   14e04:	e0bfff17 	ldw	r2,-4(fp)
   14e08:	10c05004 	addi	r3,r2,320
   14e0c:	e0804604 	addi	r2,fp,280
   14e10:	1809883a 	mov	r4,r3
   14e14:	100b883a 	mov	r5,r2
   14e18:	01800604 	movi	r6,24
   14e1c:	001f52c0 	call	1f52c <memcpy>
				sizeof(phy->filt_rx_path_clks));
		rrx = 0;
   14e20:	e03ffe15 	stw	zero,-8(fp)
	}

	if (tx_fir_cfg.tx_bandwidth) {
   14e24:	e0809717 	ldw	r2,604(fp)
   14e28:	10000326 	beq	r2,zero,14e38 <ad9361_trx_load_enable_fir+0xb8>
		phy->filt_tx_bw_Hz = tx_fir_cfg.tx_bandwidth;
   14e2c:	e0c09717 	ldw	r3,604(fp)
   14e30:	e0bfff17 	ldw	r2,-4(fp)
   14e34:	10c05d15 	stw	r3,372(r2)
	}

	if (rx_fir_cfg.rx_bandwidth) {
   14e38:	e0804c17 	ldw	r2,304(fp)
   14e3c:	10000326 	beq	r2,zero,14e4c <ad9361_trx_load_enable_fir+0xcc>
		phy->filt_rx_bw_Hz = rx_fir_cfg.rx_bandwidth;
   14e40:	e0c04c17 	ldw	r3,304(fp)
   14e44:	e0bfff17 	ldw	r2,-4(fp)
   14e48:	10c05c15 	stw	r3,368(r2)
	}

	ad9361_set_tx_fir_config(phy, tx_fir_cfg);
   14e4c:	d809883a 	mov	r4,sp
   14e50:	e0c05004 	addi	r3,fp,320
   14e54:	00804804 	movi	r2,288
   14e58:	180b883a 	mov	r5,r3
   14e5c:	100d883a 	mov	r6,r2
   14e60:	001f52c0 	call	1f52c <memcpy>
   14e64:	e1404d17 	ldw	r5,308(fp)
   14e68:	e1804e17 	ldw	r6,312(fp)
   14e6c:	e1c04f17 	ldw	r7,316(fp)
   14e70:	e13fff17 	ldw	r4,-4(fp)
   14e74:	0013e440 	call	13e44 <ad9361_set_tx_fir_config>
	ad9361_set_rx_fir_config(phy, rx_fir_cfg);
   14e78:	d809883a 	mov	r4,sp
   14e7c:	e0c00504 	addi	r3,fp,20
   14e80:	00804804 	movi	r2,288
   14e84:	180b883a 	mov	r5,r3
   14e88:	100d883a 	mov	r6,r2
   14e8c:	001f52c0 	call	1f52c <memcpy>
   14e90:	e1400217 	ldw	r5,8(fp)
   14e94:	e1800317 	ldw	r6,12(fp)
   14e98:	e1c00417 	ldw	r7,16(fp)
   14e9c:	e13fff17 	ldw	r4,-4(fp)
   14ea0:	001314c0 	call	1314c <ad9361_set_rx_fir_config>

	if (!(rrx | rtx))
   14ea4:	e0fffe17 	ldw	r3,-8(fp)
   14ea8:	e0bffd17 	ldw	r2,-12(fp)
   14eac:	1884b03a 	or	r2,r3,r2
   14eb0:	1000031e 	bne	r2,zero,14ec0 <ad9361_trx_load_enable_fir+0x140>
		phy->filt_valid = true;
   14eb4:	e0bfff17 	ldw	r2,-4(fp)
   14eb8:	00c00044 	movi	r3,1
   14ebc:	10c04fc5 	stb	r3,319(r2)

	ad9361_set_trx_fir_en_dis(phy, 1);
   14ec0:	e13fff17 	ldw	r4,-4(fp)
   14ec4:	01400044 	movi	r5,1
   14ec8:	0014bd40 	call	14bd4 <ad9361_set_trx_fir_en_dis>

	return 0;
   14ecc:	0005883a 	mov	r2,zero
}
   14ed0:	e037883a 	mov	sp,fp
   14ed4:	dfc00117 	ldw	ra,4(sp)
   14ed8:	df000017 	ldw	fp,0(sp)
   14edc:	dec00504 	addi	sp,sp,20
   14ee0:	f800283a 	ret

00014ee4 <ad9361_hdl_loopback>:
 * @param phy The AD9361 state structure.
 * @param enable Enable/disable option.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_hdl_loopback(struct ad9361_rf_phy *phy, bool enable)
{
   14ee4:	defff604 	addi	sp,sp,-40
   14ee8:	de00012e 	bgeu	sp,et,14ef0 <ad9361_hdl_loopback+0xc>
   14eec:	003b68fa 	trap	3
   14ef0:	dfc00915 	stw	ra,36(sp)
   14ef4:	df000815 	stw	fp,32(sp)
   14ef8:	df000804 	addi	fp,sp,32
   14efc:	e13ffe15 	stw	r4,-8(fp)
   14f00:	2805883a 	mov	r2,r5
   14f04:	e0bfff05 	stb	r2,-4(fp)
	struct axiadc_converter *conv = phy->adc_conv;
   14f08:	e0bffe17 	ldw	r2,-8(fp)
   14f0c:	10806f17 	ldw	r2,444(r2)
   14f10:	e0bffb15 	stw	r2,-20(fp)
	struct axiadc_state *st = phy->adc_state;
   14f14:	e0bffe17 	ldw	r2,-8(fp)
   14f18:	10807017 	ldw	r2,448(r2)
   14f1c:	e0bffc15 	stw	r2,-16(fp)
	int32_t reg, addr, chan;

	uint32_t version = axiadc_read(st, 0x4000);
   14f20:	e13ffc17 	ldw	r4,-16(fp)
   14f24:	01500004 	movi	r5,16384
   14f28:	001b9d00 	call	1b9d0 <axiadc_read>
   14f2c:	e0bffd15 	stw	r2,-12(fp)

	/* Still there but implemented a bit different */
	if (PCORE_VERSION_MAJOR(version) > 7)
   14f30:	e0bffd17 	ldw	r2,-12(fp)
   14f34:	1004d43a 	srli	r2,r2,16
   14f38:	10800230 	cmpltui	r2,r2,8
   14f3c:	1000031e 	bne	r2,zero,14f4c <ad9361_hdl_loopback+0x68>
		addr = 0x4418;
   14f40:	00910604 	movi	r2,17432
   14f44:	e0bff915 	stw	r2,-28(fp)
   14f48:	00000206 	br	14f54 <ad9361_hdl_loopback+0x70>
	else
		addr = 0x4414;
   14f4c:	00910504 	movi	r2,17428
   14f50:	e0bff915 	stw	r2,-28(fp)

	for (chan = 0; chan < conv->chip_info->num_channels; chan++) {
   14f54:	e03ffa15 	stw	zero,-24(fp)
   14f58:	00003f06 	br	15058 <ad9361_hdl_loopback+0x174>
		reg = axiadc_read(st, addr + (chan) * 0x40);
   14f5c:	e0bffa17 	ldw	r2,-24(fp)
   14f60:	100691ba 	slli	r3,r2,6
   14f64:	e0bff917 	ldw	r2,-28(fp)
   14f68:	1885883a 	add	r2,r3,r2
   14f6c:	e13ffc17 	ldw	r4,-16(fp)
   14f70:	100b883a 	mov	r5,r2
   14f74:	001b9d00 	call	1b9d0 <axiadc_read>
   14f78:	e0bff815 	stw	r2,-32(fp)

		if (PCORE_VERSION_MAJOR(version) > 7) {
   14f7c:	e0bffd17 	ldw	r2,-12(fp)
   14f80:	1004d43a 	srli	r2,r2,16
   14f84:	10800230 	cmpltui	r2,r2,8
   14f88:	10001c1e 	bne	r2,zero,14ffc <ad9361_hdl_loopback+0x118>
			if (enable && reg != 0x8) {
   14f8c:	e0bfff03 	ldbu	r2,-4(fp)
   14f90:	10000e26 	beq	r2,zero,14fcc <ad9361_hdl_loopback+0xe8>
   14f94:	e0bff817 	ldw	r2,-32(fp)
   14f98:	10800220 	cmpeqi	r2,r2,8
   14f9c:	10000b1e 	bne	r2,zero,14fcc <ad9361_hdl_loopback+0xe8>
				conv->scratch_reg[chan] = reg;
   14fa0:	e0fff817 	ldw	r3,-32(fp)
   14fa4:	e13ffb17 	ldw	r4,-20(fp)
   14fa8:	e0bffa17 	ldw	r2,-24(fp)
   14fac:	10800044 	addi	r2,r2,1
   14fb0:	1085883a 	add	r2,r2,r2
   14fb4:	1085883a 	add	r2,r2,r2
   14fb8:	2085883a 	add	r2,r4,r2
   14fbc:	10c00015 	stw	r3,0(r2)
				reg = 0x8;
   14fc0:	00800204 	movi	r2,8
   14fc4:	e0bff815 	stw	r2,-32(fp)
   14fc8:	00001606 	br	15024 <ad9361_hdl_loopback+0x140>
			} else if (reg == 0x8) {
   14fcc:	e0bff817 	ldw	r2,-32(fp)
   14fd0:	10800218 	cmpnei	r2,r2,8
   14fd4:	1000131e 	bne	r2,zero,15024 <ad9361_hdl_loopback+0x140>
				reg = conv->scratch_reg[chan];
   14fd8:	e0fffb17 	ldw	r3,-20(fp)
   14fdc:	e0bffa17 	ldw	r2,-24(fp)
   14fe0:	10800044 	addi	r2,r2,1
   14fe4:	1085883a 	add	r2,r2,r2
   14fe8:	1085883a 	add	r2,r2,r2
   14fec:	1885883a 	add	r2,r3,r2
   14ff0:	10800017 	ldw	r2,0(r2)
   14ff4:	e0bff815 	stw	r2,-32(fp)
   14ff8:	00000a06 	br	15024 <ad9361_hdl_loopback+0x140>
			}
		} else {
		/* DAC_LB_ENB If set enables loopback of receive data */
			if (enable)
   14ffc:	e0bfff03 	ldbu	r2,-4(fp)
   15000:	10000426 	beq	r2,zero,15014 <ad9361_hdl_loopback+0x130>
				reg |= BIT(1);
   15004:	e0bff817 	ldw	r2,-32(fp)
   15008:	10800094 	ori	r2,r2,2
   1500c:	e0bff815 	stw	r2,-32(fp)
   15010:	00000406 	br	15024 <ad9361_hdl_loopback+0x140>
			else
				reg &= ~BIT(1);
   15014:	e0fff817 	ldw	r3,-32(fp)
   15018:	00bfff44 	movi	r2,-3
   1501c:	1884703a 	and	r2,r3,r2
   15020:	e0bff815 	stw	r2,-32(fp)
		}
		axiadc_write(st, addr + (chan) * 0x40, reg);
   15024:	e0bffa17 	ldw	r2,-24(fp)
   15028:	100691ba 	slli	r3,r2,6
   1502c:	e0bff917 	ldw	r2,-28(fp)
   15030:	1885883a 	add	r2,r3,r2
   15034:	1007883a 	mov	r3,r2
   15038:	e0bff817 	ldw	r2,-32(fp)
   1503c:	e13ffc17 	ldw	r4,-16(fp)
   15040:	180b883a 	mov	r5,r3
   15044:	100d883a 	mov	r6,r2
   15048:	001ba140 	call	1ba14 <axiadc_write>
	if (PCORE_VERSION_MAJOR(version) > 7)
		addr = 0x4418;
	else
		addr = 0x4414;

	for (chan = 0; chan < conv->chip_info->num_channels; chan++) {
   1504c:	e0bffa17 	ldw	r2,-24(fp)
   15050:	10800044 	addi	r2,r2,1
   15054:	e0bffa15 	stw	r2,-24(fp)
   15058:	e0bffb17 	ldw	r2,-20(fp)
   1505c:	10800017 	ldw	r2,0(r2)
   15060:	10800117 	ldw	r2,4(r2)
   15064:	e0fffa17 	ldw	r3,-24(fp)
   15068:	18bfbc16 	blt	r3,r2,14f5c <_gp+0xfffe2e3c>
				reg &= ~BIT(1);
		}
		axiadc_write(st, addr + (chan) * 0x40, reg);
	}

	return 0;
   1506c:	0005883a 	mov	r2,zero
}
   15070:	e037883a 	mov	sp,fp
   15074:	dfc00117 	ldw	ra,4(sp)
   15078:	df000017 	ldw	fp,0(sp)
   1507c:	dec00204 	addi	sp,sp,8
   15080:	f800283a 	ret

00015084 <ad9361_iodelay_set>:
 * @param tx The Synthesizer TX = 1, RX = 0.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_iodelay_set(struct axiadc_state *st, unsigned lane,
			      unsigned val, bool tx)
{
   15084:	defffa04 	addi	sp,sp,-24
   15088:	de00012e 	bgeu	sp,et,15090 <ad9361_iodelay_set+0xc>
   1508c:	003b68fa 	trap	3
   15090:	dfc00515 	stw	ra,20(sp)
   15094:	df000415 	stw	fp,16(sp)
   15098:	df000404 	addi	fp,sp,16
   1509c:	e13ffc15 	stw	r4,-16(fp)
   150a0:	e17ffd15 	stw	r5,-12(fp)
   150a4:	e1bffe15 	stw	r6,-8(fp)
   150a8:	3805883a 	mov	r2,r7
   150ac:	e0bfff05 	stb	r2,-4(fp)
	if (tx) {
   150b0:	e0bfff03 	ldbu	r2,-4(fp)
   150b4:	10001026 	beq	r2,zero,150f8 <ad9361_iodelay_set+0x74>
		if (PCORE_VERSION_MAJOR(st->pcore_version) > 8)
   150b8:	e0bffc17 	ldw	r2,-16(fp)
   150bc:	10800117 	ldw	r2,4(r2)
   150c0:	1004d43a 	srli	r2,r2,16
   150c4:	10800270 	cmpltui	r2,r2,9
   150c8:	1000091e 	bne	r2,zero,150f0 <ad9361_iodelay_set+0x6c>
			axiadc_write(st, 0x4000 + ADI_REG_DELAY(lane), val);
   150cc:	e0bffd17 	ldw	r2,-12(fp)
   150d0:	10848004 	addi	r2,r2,4608
   150d4:	1085883a 	add	r2,r2,r2
   150d8:	1085883a 	add	r2,r2,r2
   150dc:	e13ffc17 	ldw	r4,-16(fp)
   150e0:	100b883a 	mov	r5,r2
   150e4:	e1bffe17 	ldw	r6,-8(fp)
   150e8:	001ba140 	call	1ba14 <axiadc_write>
   150ec:	00000606 	br	15108 <ad9361_iodelay_set+0x84>
		else
			return -ENODEV;
   150f0:	00bffb44 	movi	r2,-19
   150f4:	00000506 	br	1510c <ad9361_iodelay_set+0x88>
	} else {
		axiadc_idelay_set(st, lane, val);
   150f8:	e13ffc17 	ldw	r4,-16(fp)
   150fc:	e17ffd17 	ldw	r5,-12(fp)
   15100:	e1bffe17 	ldw	r6,-8(fp)
   15104:	001bbb80 	call	1bbb8 <axiadc_idelay_set>
	}

	return 0;
   15108:	0005883a 	mov	r2,zero
}
   1510c:	e037883a 	mov	sp,fp
   15110:	dfc00117 	ldw	ra,4(sp)
   15114:	df000017 	ldw	fp,0(sp)
   15118:	dec00204 	addi	sp,sp,8
   1511c:	f800283a 	ret

00015120 <ad9361_midscale_iodelay>:
 * @param phy The AD9361 state structure.
 * @param tx The Synthesizer TX = 1, RX = 0.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_midscale_iodelay(struct ad9361_rf_phy *phy, bool tx)
{
   15120:	defff904 	addi	sp,sp,-28
   15124:	de00012e 	bgeu	sp,et,1512c <ad9361_midscale_iodelay+0xc>
   15128:	003b68fa 	trap	3
   1512c:	dfc00615 	stw	ra,24(sp)
   15130:	df000515 	stw	fp,20(sp)
   15134:	df000504 	addi	fp,sp,20
   15138:	e13ffe15 	stw	r4,-8(fp)
   1513c:	2805883a 	mov	r2,r5
   15140:	e0bfff05 	stb	r2,-4(fp)
	struct axiadc_state *st = phy->adc_state;
   15144:	e0bffe17 	ldw	r2,-8(fp)
   15148:	10807017 	ldw	r2,448(r2)
   1514c:	e0bffd15 	stw	r2,-12(fp)
	int32_t ret = 0, i;
   15150:	e03ffb15 	stw	zero,-20(fp)

	for (i = 0; i < 7; i++)
   15154:	e03ffc15 	stw	zero,-16(fp)
   15158:	00000e06 	br	15194 <ad9361_midscale_iodelay+0x74>
		ret |= ad9361_iodelay_set(st, i, 15, tx);
   1515c:	e0fffc17 	ldw	r3,-16(fp)
   15160:	e0bfff03 	ldbu	r2,-4(fp)
   15164:	e13ffd17 	ldw	r4,-12(fp)
   15168:	180b883a 	mov	r5,r3
   1516c:	018003c4 	movi	r6,15
   15170:	100f883a 	mov	r7,r2
   15174:	00150840 	call	15084 <ad9361_iodelay_set>
   15178:	1007883a 	mov	r3,r2
   1517c:	e0bffb17 	ldw	r2,-20(fp)
   15180:	10c4b03a 	or	r2,r2,r3
   15184:	e0bffb15 	stw	r2,-20(fp)
static int32_t ad9361_midscale_iodelay(struct ad9361_rf_phy *phy, bool tx)
{
	struct axiadc_state *st = phy->adc_state;
	int32_t ret = 0, i;

	for (i = 0; i < 7; i++)
   15188:	e0bffc17 	ldw	r2,-16(fp)
   1518c:	10800044 	addi	r2,r2,1
   15190:	e0bffc15 	stw	r2,-16(fp)
   15194:	e0bffc17 	ldw	r2,-16(fp)
   15198:	108001d0 	cmplti	r2,r2,7
   1519c:	103fef1e 	bne	r2,zero,1515c <_gp+0xfffe303c>
		ret |= ad9361_iodelay_set(st, i, 15, tx);

	return 0;
   151a0:	0005883a 	mov	r2,zero
}
   151a4:	e037883a 	mov	sp,fp
   151a8:	dfc00117 	ldw	ra,4(sp)
   151ac:	df000017 	ldw	fp,0(sp)
   151b0:	dec00204 	addi	sp,sp,8
   151b4:	f800283a 	ret

000151b8 <ad9361_dig_tune_iodelay>:
 * @param phy The AD9361 state structure.
 * @param tx The Synthesizer TX = 1, RX = 0.
 * @return 0 in case of success, negative error code otherwise.
 */
static int32_t ad9361_dig_tune_iodelay(struct ad9361_rf_phy *phy, bool tx)
{
   151b8:	deffe904 	addi	sp,sp,-92
   151bc:	de00012e 	bgeu	sp,et,151c4 <ad9361_dig_tune_iodelay+0xc>
   151c0:	003b68fa 	trap	3
   151c4:	dfc01615 	stw	ra,88(sp)
   151c8:	df001515 	stw	fp,84(sp)
   151cc:	df001504 	addi	fp,sp,84
   151d0:	e13ffe15 	stw	r4,-8(fp)
   151d4:	2805883a 	mov	r2,r5
   151d8:	e0bfff05 	stb	r2,-4(fp)
	struct axiadc_converter *conv = phy->adc_conv;
   151dc:	e0bffe17 	ldw	r2,-8(fp)
   151e0:	10806f17 	ldw	r2,444(r2)
   151e4:	e0bff115 	stw	r2,-60(fp)
	struct axiadc_state *st = phy->adc_state;
   151e8:	e0bffe17 	ldw	r2,-8(fp)
   151ec:	10807017 	ldw	r2,448(r2)
   151f0:	e0bff215 	stw	r2,-56(fp)
	int32_t ret, i, j, chan, num_chan;
	uint32_t s0, c0;
	uint8_t field[32];

	num_chan = (conv->chip_info->num_channels > 4) ? 4 : conv->chip_info->num_channels;
   151f4:	e0bff117 	ldw	r2,-60(fp)
   151f8:	10800017 	ldw	r2,0(r2)
   151fc:	10800117 	ldw	r2,4(r2)
   15200:	10c00150 	cmplti	r3,r2,5
   15204:	1800011e 	bne	r3,zero,1520c <ad9361_dig_tune_iodelay+0x54>
   15208:	00800104 	movi	r2,4
   1520c:	e0bff315 	stw	r2,-52(fp)

	for (i = 0; i < 7; i++) {
   15210:	e03fee15 	stw	zero,-72(fp)
   15214:	00006606 	br	153b0 <ad9361_dig_tune_iodelay+0x1f8>
		for (j = 0; j < 32; j++) {
   15218:	e03fef15 	stw	zero,-68(fp)
   1521c:	00003606 	br	152f8 <ad9361_dig_tune_iodelay+0x140>
			ad9361_iodelay_set(st, i, j, tx);
   15220:	e17fee17 	ldw	r5,-72(fp)
   15224:	e0ffef17 	ldw	r3,-68(fp)
   15228:	e0bfff03 	ldbu	r2,-4(fp)
   1522c:	e13ff217 	ldw	r4,-56(fp)
   15230:	180d883a 	mov	r6,r3
   15234:	100f883a 	mov	r7,r2
   15238:	00150840 	call	15084 <ad9361_iodelay_set>
			mdelay(1);
   1523c:	01000044 	movi	r4,1
   15240:	001b8dc0 	call	1b8dc <mdelay>

			for (chan = 0; chan < num_chan; chan++)
   15244:	e03ff015 	stw	zero,-64(fp)
   15248:	00000a06 	br	15274 <ad9361_dig_tune_iodelay+0xbc>
				axiadc_write(st, ADI_REG_CHAN_STATUS(chan),
   1524c:	e0bff017 	ldw	r2,-64(fp)
   15250:	100491ba 	slli	r2,r2,6
   15254:	10810104 	addi	r2,r2,1028
   15258:	e13ff217 	ldw	r4,-56(fp)
   1525c:	100b883a 	mov	r5,r2
   15260:	01800184 	movi	r6,6
   15264:	001ba140 	call	1ba14 <axiadc_write>
	for (i = 0; i < 7; i++) {
		for (j = 0; j < 32; j++) {
			ad9361_iodelay_set(st, i, j, tx);
			mdelay(1);

			for (chan = 0; chan < num_chan; chan++)
   15268:	e0bff017 	ldw	r2,-64(fp)
   1526c:	10800044 	addi	r2,r2,1
   15270:	e0bff015 	stw	r2,-64(fp)
   15274:	e0fff017 	ldw	r3,-64(fp)
   15278:	e0bff317 	ldw	r2,-52(fp)
   1527c:	18bff316 	blt	r3,r2,1524c <_gp+0xfffe312c>
				axiadc_write(st, ADI_REG_CHAN_STATUS(chan),
					ADI_PN_ERR | ADI_PN_OOS);
			mdelay(10);
   15280:	01000284 	movi	r4,10
   15284:	001b8dc0 	call	1b8dc <mdelay>

			for (chan = 0, ret = 0; chan < num_chan; chan++)
   15288:	e03ff015 	stw	zero,-64(fp)
   1528c:	e03fed15 	stw	zero,-76(fp)
   15290:	00000d06 	br	152c8 <ad9361_dig_tune_iodelay+0x110>
				ret |= axiadc_read(st, ADI_REG_CHAN_STATUS(chan));
   15294:	e0bff017 	ldw	r2,-64(fp)
   15298:	100491ba 	slli	r2,r2,6
   1529c:	10810104 	addi	r2,r2,1028
   152a0:	e13ff217 	ldw	r4,-56(fp)
   152a4:	100b883a 	mov	r5,r2
   152a8:	001b9d00 	call	1b9d0 <axiadc_read>
   152ac:	1007883a 	mov	r3,r2
   152b0:	e0bfed17 	ldw	r2,-76(fp)
   152b4:	1884b03a 	or	r2,r3,r2
   152b8:	e0bfed15 	stw	r2,-76(fp)
			for (chan = 0; chan < num_chan; chan++)
				axiadc_write(st, ADI_REG_CHAN_STATUS(chan),
					ADI_PN_ERR | ADI_PN_OOS);
			mdelay(10);

			for (chan = 0, ret = 0; chan < num_chan; chan++)
   152bc:	e0bff017 	ldw	r2,-64(fp)
   152c0:	10800044 	addi	r2,r2,1
   152c4:	e0bff015 	stw	r2,-64(fp)
   152c8:	e0fff017 	ldw	r3,-64(fp)
   152cc:	e0bff317 	ldw	r2,-52(fp)
   152d0:	18bff016 	blt	r3,r2,15294 <_gp+0xfffe3174>
				ret |= axiadc_read(st, ADI_REG_CHAN_STATUS(chan));

			field[j] = ret;
   152d4:	e0bfed17 	ldw	r2,-76(fp)
   152d8:	1009883a 	mov	r4,r2
   152dc:	e0fff604 	addi	r3,fp,-40
   152e0:	e0bfef17 	ldw	r2,-68(fp)
   152e4:	1885883a 	add	r2,r3,r2
   152e8:	11000005 	stb	r4,0(r2)
	uint8_t field[32];

	num_chan = (conv->chip_info->num_channels > 4) ? 4 : conv->chip_info->num_channels;

	for (i = 0; i < 7; i++) {
		for (j = 0; j < 32; j++) {
   152ec:	e0bfef17 	ldw	r2,-68(fp)
   152f0:	10800044 	addi	r2,r2,1
   152f4:	e0bfef15 	stw	r2,-68(fp)
   152f8:	e0bfef17 	ldw	r2,-68(fp)
   152fc:	10800810 	cmplti	r2,r2,32
   15300:	103fc71e 	bne	r2,zero,15220 <_gp+0xfffe3100>
				ret |= axiadc_read(st, ADI_REG_CHAN_STATUS(chan));

			field[j] = ret;
		}

		c0 = ad9361_find_opt(&field[0], 32, &s0);
   15304:	e0fff604 	addi	r3,fp,-40
   15308:	e0bff504 	addi	r2,fp,-44
   1530c:	1809883a 	mov	r4,r3
   15310:	01400804 	movi	r5,32
   15314:	100d883a 	mov	r6,r2
   15318:	00004f00 	call	4f0 <ad9361_find_opt>
   1531c:	e0bff415 	stw	r2,-48(fp)
		ad9361_iodelay_set(st, i, s0 + c0 / 2, tx);
   15320:	e17fee17 	ldw	r5,-72(fp)
   15324:	e0bff417 	ldw	r2,-48(fp)
   15328:	1006d07a 	srli	r3,r2,1
   1532c:	e0bff517 	ldw	r2,-44(fp)
   15330:	1887883a 	add	r3,r3,r2
   15334:	e0bfff03 	ldbu	r2,-4(fp)
   15338:	e13ff217 	ldw	r4,-56(fp)
   1533c:	180d883a 	mov	r6,r3
   15340:	100f883a 	mov	r7,r2
   15344:	00150840 	call	15084 <ad9361_iodelay_set>

		dev_dbg(&phy->spi->dev,
   15348:	e0bfff03 	ldbu	r2,-4(fp)
   1534c:	10000326 	beq	r2,zero,1535c <ad9361_dig_tune_iodelay+0x1a4>
   15350:	008000f4 	movhi	r2,3
   15354:	10a03b04 	addi	r2,r2,-32532
   15358:	00000206 	br	15364 <ad9361_dig_tune_iodelay+0x1ac>
   1535c:	008000f4 	movhi	r2,3
   15360:	10a03c04 	addi	r2,r2,-32528
   15364:	e13ff517 	ldw	r4,-44(fp)
   15368:	e0fff417 	ldw	r3,-48(fp)
   1536c:	180ad07a 	srli	r5,r3,1
   15370:	e0fff517 	ldw	r3,-44(fp)
   15374:	28c7883a 	add	r3,r5,r3
   15378:	d9000015 	stw	r4,0(sp)
   1537c:	d8c00115 	stw	r3,4(sp)
   15380:	010000f4 	movhi	r4,3
   15384:	21203d04 	addi	r4,r4,-32524
   15388:	100b883a 	mov	r5,r2
   1538c:	e1bfee17 	ldw	r6,-72(fp)
   15390:	e1fff417 	ldw	r7,-48(fp)
   15394:	001f8180 	call	1f818 <printf>
   15398:	010000f4 	movhi	r4,3
   1539c:	21204d04 	addi	r4,r4,-32460
   153a0:	001f8180 	call	1f818 <printf>
	uint32_t s0, c0;
	uint8_t field[32];

	num_chan = (conv->chip_info->num_channels > 4) ? 4 : conv->chip_info->num_channels;

	for (i = 0; i < 7; i++) {
   153a4:	e0bfee17 	ldw	r2,-72(fp)
   153a8:	10800044 	addi	r2,r2,1
   153ac:	e0bfee15 	stw	r2,-72(fp)
   153b0:	e0bfee17 	ldw	r2,-72(fp)
   153b4:	108001d0 	cmplti	r2,r2,7
   153b8:	103f971e 	bne	r2,zero,15218 <_gp+0xfffe30f8>
		dev_dbg(&phy->spi->dev,
			 "%s Lane %"PRId32", window cnt %"PRIu32" , start %"PRIu32", IODELAY set to %"PRIu32"\n",
			 tx ? "TX" :"RX",  i , c0, s0, s0 + c0 / 2);
	}

	return 0;
   153bc:	0005883a 	mov	r2,zero
}
   153c0:	e037883a 	mov	sp,fp
   153c4:	dfc00117 	ldw	ra,4(sp)
   153c8:	df000017 	ldw	fp,0(sp)
   153cc:	dec00204 	addi	sp,sp,8
   153d0:	f800283a 	ret

000153d4 <ad9361_dig_tune_verbose_print>:
 * @param tx The Synthesizer TX = 1, RX = 0.
 * @return 0 in case of success, negative error code otherwise.
 */
static void ad9361_dig_tune_verbose_print(struct ad9361_rf_phy *phy,
					  uint8_t field[][16], bool tx)
{
   153d4:	defff904 	addi	sp,sp,-28
   153d8:	de00012e 	bgeu	sp,et,153e0 <ad9361_dig_tune_verbose_print+0xc>
   153dc:	003b68fa 	trap	3
   153e0:	dfc00615 	stw	ra,24(sp)
   153e4:	df000515 	stw	fp,20(sp)
   153e8:	df000504 	addi	fp,sp,20
   153ec:	e13ffd15 	stw	r4,-12(fp)
   153f0:	e17ffe15 	stw	r5,-8(fp)
   153f4:	3005883a 	mov	r2,r6
   153f8:	e0bfff05 	stb	r2,-4(fp)
	int32_t i, j;

	printk("SAMPL CLK: %"PRIu32" tuning: %s\n",
   153fc:	e0bffd17 	ldw	r2,-12(fp)
   15400:	10801f17 	ldw	r2,124(r2)
   15404:	e13ffd17 	ldw	r4,-12(fp)
   15408:	100b883a 	mov	r5,r2
   1540c:	001bc900 	call	1bc90 <clk_get_rate>
   15410:	1007883a 	mov	r3,r2
   15414:	e0bfff03 	ldbu	r2,-4(fp)
   15418:	10000326 	beq	r2,zero,15428 <ad9361_dig_tune_verbose_print+0x54>
   1541c:	008000f4 	movhi	r2,3
   15420:	10a03b04 	addi	r2,r2,-32532
   15424:	00000206 	br	15430 <ad9361_dig_tune_verbose_print+0x5c>
   15428:	008000f4 	movhi	r2,3
   1542c:	10a03c04 	addi	r2,r2,-32528
   15430:	010000f4 	movhi	r4,3
   15434:	21204e04 	addi	r4,r4,-32456
   15438:	180b883a 	mov	r5,r3
   1543c:	100d883a 	mov	r6,r2
   15440:	001f8180 	call	1f818 <printf>
			clk_get_rate(phy, phy->ref_clk_scale[RX_SAMPL_CLK]), tx ? "TX" : "RX");
	printk("  ");
   15444:	010000f4 	movhi	r4,3
   15448:	21205504 	addi	r4,r4,-32428
   1544c:	001f8180 	call	1f818 <printf>
	for (i = 0; i < 16; i++)
   15450:	e03ffb15 	stw	zero,-20(fp)
   15454:	00000706 	br	15474 <ad9361_dig_tune_verbose_print+0xa0>
		printk("%"PRIx32":", i);
   15458:	010000f4 	movhi	r4,3
   1545c:	21205604 	addi	r4,r4,-32424
   15460:	e17ffb17 	ldw	r5,-20(fp)
   15464:	001f8180 	call	1f818 <printf>
	int32_t i, j;

	printk("SAMPL CLK: %"PRIu32" tuning: %s\n",
			clk_get_rate(phy, phy->ref_clk_scale[RX_SAMPL_CLK]), tx ? "TX" : "RX");
	printk("  ");
	for (i = 0; i < 16; i++)
   15468:	e0bffb17 	ldw	r2,-20(fp)
   1546c:	10800044 	addi	r2,r2,1
   15470:	e0bffb15 	stw	r2,-20(fp)
   15474:	e0bffb17 	ldw	r2,-20(fp)
   15478:	10800410 	cmplti	r2,r2,16
   1547c:	103ff61e 	bne	r2,zero,15458 <_gp+0xfffe3338>
		printk("%"PRIx32":", i);
	printk("\n");
   15480:	01000284 	movi	r4,10
   15484:	001f9380 	call	1f938 <putchar>

	for (i = 0; i < 2; i++) {
   15488:	e03ffb15 	stw	zero,-20(fp)
   1548c:	00002106 	br	15514 <ad9361_dig_tune_verbose_print+0x140>
		printk("%"PRIx32":", i);
   15490:	010000f4 	movhi	r4,3
   15494:	21205604 	addi	r4,r4,-32424
   15498:	e17ffb17 	ldw	r5,-20(fp)
   1549c:	001f8180 	call	1f818 <printf>
		for (j = 0; j < 16; j++) {
   154a0:	e03ffc15 	stw	zero,-16(fp)
   154a4:	00001306 	br	154f4 <ad9361_dig_tune_verbose_print+0x120>
			printk("%c ", (field[i][j] ? '#' : 'o'));
   154a8:	e0bffb17 	ldw	r2,-20(fp)
   154ac:	1004913a 	slli	r2,r2,4
   154b0:	e0fffe17 	ldw	r3,-8(fp)
   154b4:	1887883a 	add	r3,r3,r2
   154b8:	e0bffc17 	ldw	r2,-16(fp)
   154bc:	1885883a 	add	r2,r3,r2
   154c0:	10800003 	ldbu	r2,0(r2)
   154c4:	10803fcc 	andi	r2,r2,255
   154c8:	10000226 	beq	r2,zero,154d4 <ad9361_dig_tune_verbose_print+0x100>
   154cc:	008008c4 	movi	r2,35
   154d0:	00000106 	br	154d8 <ad9361_dig_tune_verbose_print+0x104>
   154d4:	00801bc4 	movi	r2,111
   154d8:	010000f4 	movhi	r4,3
   154dc:	21205804 	addi	r4,r4,-32416
   154e0:	100b883a 	mov	r5,r2
   154e4:	001f8180 	call	1f818 <printf>
		printk("%"PRIx32":", i);
	printk("\n");

	for (i = 0; i < 2; i++) {
		printk("%"PRIx32":", i);
		for (j = 0; j < 16; j++) {
   154e8:	e0bffc17 	ldw	r2,-16(fp)
   154ec:	10800044 	addi	r2,r2,1
   154f0:	e0bffc15 	stw	r2,-16(fp)
   154f4:	e0bffc17 	ldw	r2,-16(fp)
   154f8:	10800410 	cmplti	r2,r2,16
   154fc:	103fea1e 	bne	r2,zero,154a8 <_gp+0xfffe3388>
			printk("%c ", (field[i][j] ? '#' : 'o'));
		}
		printk("\n");
   15500:	01000284 	movi	r4,10
   15504:	001f9380 	call	1f938 <putchar>
	printk("  ");
	for (i = 0; i < 16; i++)
		printk("%"PRIx32":", i);
	printk("\n");

	for (i = 0; i < 2; i++) {
   15508:	e0bffb17 	ldw	r2,-20(fp)
   1550c:	10800044 	addi	r2,r2,1
   15510:	e0bffb15 	stw	r2,-20(fp)
   15514:	e0bffb17 	ldw	r2,-20(fp)
   15518:	10800090 	cmplti	r2,r2,2
   1551c:	103fdc1e 	bne	r2,zero,15490 <_gp+0xfffe3370>
		for (j = 0; j < 16; j++) {
			printk("%c ", (field[i][j] ? '#' : 'o'));
		}
		printk("\n");
	}
	printk("\n");
   15520:	01000284 	movi	r4,10
   15524:	001f9380 	call	1f938 <putchar>
}
   15528:	e037883a 	mov	sp,fp
   1552c:	dfc00117 	ldw	ra,4(sp)
   15530:	df000017 	ldw	fp,0(sp)
   15534:	dec00204 	addi	sp,sp,8
   15538:	f800283a 	ret

0001553c <ad9361_dig_interface_timing_analysis>:
 * @param buflen The buffer length.
 * @return The size in case of success, negative error code otherwise.
 */
int32_t ad9361_dig_interface_timing_analysis(struct ad9361_rf_phy *phy,
	char *buf, int32_t buflen)
{
   1553c:	deffb204 	addi	sp,sp,-312
   15540:	de00012e 	bgeu	sp,et,15548 <ad9361_dig_interface_timing_analysis+0xc>
   15544:	003b68fa 	trap	3
   15548:	dfc04d15 	stw	ra,308(sp)
   1554c:	df004c15 	stw	fp,304(sp)
   15550:	dc404b15 	stw	r17,300(sp)
   15554:	dc004a15 	stw	r16,296(sp)
   15558:	df004c04 	addi	fp,sp,304
   1555c:	e13ffb15 	stw	r4,-20(fp)
   15560:	e17ffc15 	stw	r5,-16(fp)
   15564:	e1bffd15 	stw	r6,-12(fp)
	struct axiadc_state *st = phy->adc_state;
   15568:	e0bffb17 	ldw	r2,-20(fp)
   1556c:	10807017 	ldw	r2,448(r2)
   15570:	e0bfb915 	stw	r2,-284(fp)
	int32_t ret, i, j, chan, len = 0;
   15574:	e03fb815 	stw	zero,-288(fp)
	uint8_t field[16][16];
	uint8_t rx;

	dev_dbg(&phy->spi->dev, "%s:\n", __func__);
   15578:	010000f4 	movhi	r4,3
   1557c:	21205904 	addi	r4,r4,-32412
   15580:	014000f4 	movhi	r5,3
   15584:	29606f04 	addi	r5,r5,-32324
   15588:	001f8180 	call	1f818 <printf>
   1558c:	010000f4 	movhi	r4,3
   15590:	21204d04 	addi	r4,r4,-32460
   15594:	001f8180 	call	1f818 <printf>

	rx = ad9361_spi_read(phy->spi, REG_RX_CLOCK_DATA_DELAY);
   15598:	e0bffb17 	ldw	r2,-20(fp)
   1559c:	10800117 	ldw	r2,4(r2)
   155a0:	1009883a 	mov	r4,r2
   155a4:	01400184 	movi	r5,6
   155a8:	00001500 	call	150 <ad9361_spi_read>
   155ac:	e0bfba05 	stb	r2,-280(fp)

	ad9361_bist_prbs(phy, BIST_INJ_RX);
   155b0:	e13ffb17 	ldw	r4,-20(fp)
   155b4:	01400084 	movi	r5,2
   155b8:	0000b540 	call	b54 <ad9361_bist_prbs>

	for (i = 0; i < 16; i++) {
   155bc:	e03fb515 	stw	zero,-300(fp)
   155c0:	00004c06 	br	156f4 <ad9361_dig_interface_timing_analysis+0x1b8>
		for (j = 0; j < 16; j++) {
   155c4:	e03fb615 	stw	zero,-296(fp)
   155c8:	00004406 	br	156dc <ad9361_dig_interface_timing_analysis+0x1a0>
			ad9361_spi_write(phy->spi, REG_RX_CLOCK_DATA_DELAY,
   155cc:	e0bffb17 	ldw	r2,-20(fp)
   155d0:	11000117 	ldw	r4,4(r2)
				DATA_CLK_DELAY(j) | RX_DATA_DELAY(i));
   155d4:	e0bfb617 	ldw	r2,-296(fp)
   155d8:	1004913a 	slli	r2,r2,4
   155dc:	10c03fcc 	andi	r3,r2,255
   155e0:	e0bfb517 	ldw	r2,-300(fp)
   155e4:	108003cc 	andi	r2,r2,15
   155e8:	1884b03a 	or	r2,r3,r2

	ad9361_bist_prbs(phy, BIST_INJ_RX);

	for (i = 0; i < 16; i++) {
		for (j = 0; j < 16; j++) {
			ad9361_spi_write(phy->spi, REG_RX_CLOCK_DATA_DELAY,
   155ec:	01400184 	movi	r5,6
   155f0:	100d883a 	mov	r6,r2
   155f4:	00002600 	call	260 <ad9361_spi_write>
				DATA_CLK_DELAY(j) | RX_DATA_DELAY(i));
			for (chan = 0; chan < 4; chan++)
   155f8:	e03fb715 	stw	zero,-292(fp)
   155fc:	00000a06 	br	15628 <ad9361_dig_interface_timing_analysis+0xec>
				axiadc_write(st, ADI_REG_CHAN_STATUS(chan),
   15600:	e0bfb717 	ldw	r2,-292(fp)
   15604:	100491ba 	slli	r2,r2,6
   15608:	10810104 	addi	r2,r2,1028
   1560c:	e13fb917 	ldw	r4,-284(fp)
   15610:	100b883a 	mov	r5,r2
   15614:	01800184 	movi	r6,6
   15618:	001ba140 	call	1ba14 <axiadc_write>

	for (i = 0; i < 16; i++) {
		for (j = 0; j < 16; j++) {
			ad9361_spi_write(phy->spi, REG_RX_CLOCK_DATA_DELAY,
				DATA_CLK_DELAY(j) | RX_DATA_DELAY(i));
			for (chan = 0; chan < 4; chan++)
   1561c:	e0bfb717 	ldw	r2,-292(fp)
   15620:	10800044 	addi	r2,r2,1
   15624:	e0bfb715 	stw	r2,-292(fp)
   15628:	e0bfb717 	ldw	r2,-292(fp)
   1562c:	10800110 	cmplti	r2,r2,4
   15630:	103ff31e 	bne	r2,zero,15600 <_gp+0xfffe34e0>
				axiadc_write(st, ADI_REG_CHAN_STATUS(chan),
				ADI_PN_ERR | ADI_PN_OOS);

			mdelay(1);
   15634:	01000044 	movi	r4,1
   15638:	001b8dc0 	call	1b8dc <mdelay>

			if (axiadc_read(st, ADI_REG_STATUS) & ADI_STATUS) {
   1563c:	e13fb917 	ldw	r4,-284(fp)
   15640:	01401704 	movi	r5,92
   15644:	001b9d00 	call	1b9d0 <axiadc_read>
   15648:	1080004c 	andi	r2,r2,1
   1564c:	10001426 	beq	r2,zero,156a0 <ad9361_dig_interface_timing_analysis+0x164>
				for (chan = 0, ret = 0; chan < 4; chan++)
   15650:	e03fb715 	stw	zero,-292(fp)
   15654:	e03fb415 	stw	zero,-304(fp)
   15658:	00000d06 	br	15690 <ad9361_dig_interface_timing_analysis+0x154>
					ret |= axiadc_read(st, ADI_REG_CHAN_STATUS(chan));
   1565c:	e0bfb717 	ldw	r2,-292(fp)
   15660:	100491ba 	slli	r2,r2,6
   15664:	10810104 	addi	r2,r2,1028
   15668:	e13fb917 	ldw	r4,-284(fp)
   1566c:	100b883a 	mov	r5,r2
   15670:	001b9d00 	call	1b9d0 <axiadc_read>
   15674:	1007883a 	mov	r3,r2
   15678:	e0bfb417 	ldw	r2,-304(fp)
   1567c:	1884b03a 	or	r2,r3,r2
   15680:	e0bfb415 	stw	r2,-304(fp)
				ADI_PN_ERR | ADI_PN_OOS);

			mdelay(1);

			if (axiadc_read(st, ADI_REG_STATUS) & ADI_STATUS) {
				for (chan = 0, ret = 0; chan < 4; chan++)
   15684:	e0bfb717 	ldw	r2,-292(fp)
   15688:	10800044 	addi	r2,r2,1
   1568c:	e0bfb715 	stw	r2,-292(fp)
   15690:	e0bfb717 	ldw	r2,-292(fp)
   15694:	10800110 	cmplti	r2,r2,4
   15698:	103ff01e 	bne	r2,zero,1565c <_gp+0xfffe353c>
   1569c:	00000206 	br	156a8 <ad9361_dig_interface_timing_analysis+0x16c>
					ret |= axiadc_read(st, ADI_REG_CHAN_STATUS(chan));
			}
			else {
				ret = 1;
   156a0:	00800044 	movi	r2,1
   156a4:	e0bfb415 	stw	r2,-304(fp)
			}

			field[i][j] = ret;
   156a8:	e0bfb417 	ldw	r2,-304(fp)
   156ac:	1009883a 	mov	r4,r2
   156b0:	e0bfb517 	ldw	r2,-300(fp)
   156b4:	1004913a 	slli	r2,r2,4
   156b8:	e17fb404 	addi	r5,fp,-304
   156bc:	2887883a 	add	r3,r5,r2
   156c0:	e0bfb617 	ldw	r2,-296(fp)
   156c4:	1885883a 	add	r2,r3,r2
   156c8:	10800644 	addi	r2,r2,25
   156cc:	11000005 	stb	r4,0(r2)
	rx = ad9361_spi_read(phy->spi, REG_RX_CLOCK_DATA_DELAY);

	ad9361_bist_prbs(phy, BIST_INJ_RX);

	for (i = 0; i < 16; i++) {
		for (j = 0; j < 16; j++) {
   156d0:	e0bfb617 	ldw	r2,-296(fp)
   156d4:	10800044 	addi	r2,r2,1
   156d8:	e0bfb615 	stw	r2,-296(fp)
   156dc:	e0bfb617 	ldw	r2,-296(fp)
   156e0:	10800410 	cmplti	r2,r2,16
   156e4:	103fb91e 	bne	r2,zero,155cc <_gp+0xfffe34ac>

	rx = ad9361_spi_read(phy->spi, REG_RX_CLOCK_DATA_DELAY);

	ad9361_bist_prbs(phy, BIST_INJ_RX);

	for (i = 0; i < 16; i++) {
   156e8:	e0bfb517 	ldw	r2,-300(fp)
   156ec:	10800044 	addi	r2,r2,1
   156f0:	e0bfb515 	stw	r2,-300(fp)
   156f4:	e0bfb517 	ldw	r2,-300(fp)
   156f8:	10800410 	cmplti	r2,r2,16
   156fc:	103fb11e 	bne	r2,zero,155c4 <_gp+0xfffe34a4>

			field[i][j] = ret;
		}
	}

	ad9361_spi_write(phy->spi, REG_RX_CLOCK_DATA_DELAY, rx);
   15700:	e0bffb17 	ldw	r2,-20(fp)
   15704:	10c00117 	ldw	r3,4(r2)
   15708:	e0bfba03 	ldbu	r2,-280(fp)
   1570c:	1809883a 	mov	r4,r3
   15710:	01400184 	movi	r5,6
   15714:	100d883a 	mov	r6,r2
   15718:	00002600 	call	260 <ad9361_spi_write>

	ad9361_bist_prbs(phy, BIST_DISABLE);
   1571c:	e13ffb17 	ldw	r4,-20(fp)
   15720:	000b883a 	mov	r5,zero
   15724:	0000b540 	call	b54 <ad9361_bist_prbs>

	len += snprintf(buf + len, buflen, "CLK: %"PRIu32" Hz 'o' = PASS\n",
   15728:	e0bfb817 	ldw	r2,-288(fp)
   1572c:	e0fffc17 	ldw	r3,-16(fp)
   15730:	18a3883a 	add	r17,r3,r2
   15734:	e43ffd17 	ldw	r16,-12(fp)
   15738:	e0bffb17 	ldw	r2,-20(fp)
   1573c:	10801f17 	ldw	r2,124(r2)
   15740:	e13ffb17 	ldw	r4,-20(fp)
   15744:	100b883a 	mov	r5,r2
   15748:	001bc900 	call	1bc90 <clk_get_rate>
   1574c:	8809883a 	mov	r4,r17
   15750:	800b883a 	mov	r5,r16
   15754:	018000f4 	movhi	r6,3
   15758:	31a05b04 	addi	r6,r6,-32404
   1575c:	100f883a 	mov	r7,r2
   15760:	001fb0c0 	call	1fb0c <snprintf>
   15764:	1007883a 	mov	r3,r2
   15768:	e0bfb817 	ldw	r2,-288(fp)
   1576c:	10c5883a 	add	r2,r2,r3
   15770:	e0bfb815 	stw	r2,-288(fp)
		clk_get_rate(phy, phy->ref_clk_scale[RX_SAMPL_CLK]));
	len += snprintf(buf + len, buflen, "DC");
   15774:	e0bfb817 	ldw	r2,-288(fp)
   15778:	e0fffc17 	ldw	r3,-16(fp)
   1577c:	1887883a 	add	r3,r3,r2
   15780:	e0bffd17 	ldw	r2,-12(fp)
   15784:	1809883a 	mov	r4,r3
   15788:	100b883a 	mov	r5,r2
   1578c:	018000f4 	movhi	r6,3
   15790:	31a06104 	addi	r6,r6,-32380
   15794:	001fb0c0 	call	1fb0c <snprintf>
   15798:	1007883a 	mov	r3,r2
   1579c:	e0bfb817 	ldw	r2,-288(fp)
   157a0:	10c5883a 	add	r2,r2,r3
   157a4:	e0bfb815 	stw	r2,-288(fp)
	for (i = 0; i < 16; i++)
   157a8:	e03fb515 	stw	zero,-300(fp)
   157ac:	00001106 	br	157f4 <ad9361_dig_interface_timing_analysis+0x2b8>
		len += snprintf(buf + len, buflen, "%"PRIx32":", i);
   157b0:	e0bfb817 	ldw	r2,-288(fp)
   157b4:	e0fffc17 	ldw	r3,-16(fp)
   157b8:	1887883a 	add	r3,r3,r2
   157bc:	e0bffd17 	ldw	r2,-12(fp)
   157c0:	1809883a 	mov	r4,r3
   157c4:	100b883a 	mov	r5,r2
   157c8:	018000f4 	movhi	r6,3
   157cc:	31a05604 	addi	r6,r6,-32424
   157d0:	e1ffb517 	ldw	r7,-300(fp)
   157d4:	001fb0c0 	call	1fb0c <snprintf>
   157d8:	1007883a 	mov	r3,r2
   157dc:	e0bfb817 	ldw	r2,-288(fp)
   157e0:	10c5883a 	add	r2,r2,r3
   157e4:	e0bfb815 	stw	r2,-288(fp)
	ad9361_bist_prbs(phy, BIST_DISABLE);

	len += snprintf(buf + len, buflen, "CLK: %"PRIu32" Hz 'o' = PASS\n",
		clk_get_rate(phy, phy->ref_clk_scale[RX_SAMPL_CLK]));
	len += snprintf(buf + len, buflen, "DC");
	for (i = 0; i < 16; i++)
   157e8:	e0bfb517 	ldw	r2,-300(fp)
   157ec:	10800044 	addi	r2,r2,1
   157f0:	e0bfb515 	stw	r2,-300(fp)
   157f4:	e0bfb517 	ldw	r2,-300(fp)
   157f8:	10800410 	cmplti	r2,r2,16
   157fc:	103fec1e 	bne	r2,zero,157b0 <_gp+0xfffe3690>
		len += snprintf(buf + len, buflen, "%"PRIx32":", i);
	len += snprintf(buf + len, buflen, "\n");
   15800:	e0bfb817 	ldw	r2,-288(fp)
   15804:	e0fffc17 	ldw	r3,-16(fp)
   15808:	1887883a 	add	r3,r3,r2
   1580c:	e0bffd17 	ldw	r2,-12(fp)
   15810:	1809883a 	mov	r4,r3
   15814:	100b883a 	mov	r5,r2
   15818:	018000f4 	movhi	r6,3
   1581c:	31a04d04 	addi	r6,r6,-32460
   15820:	001fb0c0 	call	1fb0c <snprintf>
   15824:	1007883a 	mov	r3,r2
   15828:	e0bfb817 	ldw	r2,-288(fp)
   1582c:	10c5883a 	add	r2,r2,r3
   15830:	e0bfb815 	stw	r2,-288(fp)

	for (i = 0; i < 16; i++) {
   15834:	e03fb515 	stw	zero,-300(fp)
   15838:	00003f06 	br	15938 <ad9361_dig_interface_timing_analysis+0x3fc>
		len += snprintf(buf + len, buflen, "%"PRIx32":", i);
   1583c:	e0bfb817 	ldw	r2,-288(fp)
   15840:	e0fffc17 	ldw	r3,-16(fp)
   15844:	1887883a 	add	r3,r3,r2
   15848:	e0bffd17 	ldw	r2,-12(fp)
   1584c:	1809883a 	mov	r4,r3
   15850:	100b883a 	mov	r5,r2
   15854:	018000f4 	movhi	r6,3
   15858:	31a05604 	addi	r6,r6,-32424
   1585c:	e1ffb517 	ldw	r7,-300(fp)
   15860:	001fb0c0 	call	1fb0c <snprintf>
   15864:	1007883a 	mov	r3,r2
   15868:	e0bfb817 	ldw	r2,-288(fp)
   1586c:	10c5883a 	add	r2,r2,r3
   15870:	e0bfb815 	stw	r2,-288(fp)
		for (j = 0; j < 16; j++) {
   15874:	e03fb615 	stw	zero,-296(fp)
   15878:	00001c06 	br	158ec <ad9361_dig_interface_timing_analysis+0x3b0>
			len += snprintf(buf + len, buflen, "%c ",
   1587c:	e0bfb817 	ldw	r2,-288(fp)
   15880:	e0fffc17 	ldw	r3,-16(fp)
   15884:	1889883a 	add	r4,r3,r2
   15888:	e17ffd17 	ldw	r5,-12(fp)
				(field[i][j] ? '.' : 'o'));
   1588c:	e0bfb517 	ldw	r2,-300(fp)
   15890:	1004913a 	slli	r2,r2,4
   15894:	e1bfb404 	addi	r6,fp,-304
   15898:	3087883a 	add	r3,r6,r2
   1589c:	e0bfb617 	ldw	r2,-296(fp)
   158a0:	1885883a 	add	r2,r3,r2
   158a4:	10800644 	addi	r2,r2,25
   158a8:	10800003 	ldbu	r2,0(r2)
	len += snprintf(buf + len, buflen, "\n");

	for (i = 0; i < 16; i++) {
		len += snprintf(buf + len, buflen, "%"PRIx32":", i);
		for (j = 0; j < 16; j++) {
			len += snprintf(buf + len, buflen, "%c ",
   158ac:	10803fcc 	andi	r2,r2,255
   158b0:	10000226 	beq	r2,zero,158bc <ad9361_dig_interface_timing_analysis+0x380>
   158b4:	00800b84 	movi	r2,46
   158b8:	00000106 	br	158c0 <ad9361_dig_interface_timing_analysis+0x384>
   158bc:	00801bc4 	movi	r2,111
   158c0:	018000f4 	movhi	r6,3
   158c4:	31a05804 	addi	r6,r6,-32416
   158c8:	100f883a 	mov	r7,r2
   158cc:	001fb0c0 	call	1fb0c <snprintf>
   158d0:	1007883a 	mov	r3,r2
   158d4:	e0bfb817 	ldw	r2,-288(fp)
   158d8:	10c5883a 	add	r2,r2,r3
   158dc:	e0bfb815 	stw	r2,-288(fp)
		len += snprintf(buf + len, buflen, "%"PRIx32":", i);
	len += snprintf(buf + len, buflen, "\n");

	for (i = 0; i < 16; i++) {
		len += snprintf(buf + len, buflen, "%"PRIx32":", i);
		for (j = 0; j < 16; j++) {
   158e0:	e0bfb617 	ldw	r2,-296(fp)
   158e4:	10800044 	addi	r2,r2,1
   158e8:	e0bfb615 	stw	r2,-296(fp)
   158ec:	e0bfb617 	ldw	r2,-296(fp)
   158f0:	10800410 	cmplti	r2,r2,16
   158f4:	103fe11e 	bne	r2,zero,1587c <_gp+0xfffe375c>
			len += snprintf(buf + len, buflen, "%c ",
				(field[i][j] ? '.' : 'o'));
		}
		len += snprintf(buf + len, buflen, "\n");
   158f8:	e0bfb817 	ldw	r2,-288(fp)
   158fc:	e0fffc17 	ldw	r3,-16(fp)
   15900:	1887883a 	add	r3,r3,r2
   15904:	e0bffd17 	ldw	r2,-12(fp)
   15908:	1809883a 	mov	r4,r3
   1590c:	100b883a 	mov	r5,r2
   15910:	018000f4 	movhi	r6,3
   15914:	31a04d04 	addi	r6,r6,-32460
   15918:	001fb0c0 	call	1fb0c <snprintf>
   1591c:	1007883a 	mov	r3,r2
   15920:	e0bfb817 	ldw	r2,-288(fp)
   15924:	10c5883a 	add	r2,r2,r3
   15928:	e0bfb815 	stw	r2,-288(fp)
	len += snprintf(buf + len, buflen, "DC");
	for (i = 0; i < 16; i++)
		len += snprintf(buf + len, buflen, "%"PRIx32":", i);
	len += snprintf(buf + len, buflen, "\n");

	for (i = 0; i < 16; i++) {
   1592c:	e0bfb517 	ldw	r2,-300(fp)
   15930:	10800044 	addi	r2,r2,1
   15934:	e0bfb515 	stw	r2,-300(fp)
   15938:	e0bfb517 	ldw	r2,-300(fp)
   1593c:	10800410 	cmplti	r2,r2,16
   15940:	103fbe1e 	bne	r2,zero,1583c <_gp+0xfffe371c>
			len += snprintf(buf + len, buflen, "%c ",
				(field[i][j] ? '.' : 'o'));
		}
		len += snprintf(buf + len, buflen, "\n");
	}
	len += snprintf(buf + len, buflen, "\n");
   15944:	e0bfb817 	ldw	r2,-288(fp)
   15948:	e0fffc17 	ldw	r3,-16(fp)
   1594c:	1887883a 	add	r3,r3,r2
   15950:	e0bffd17 	ldw	r2,-12(fp)
   15954:	1809883a 	mov	r4,r3
   15958:	100b883a 	mov	r5,r2
   1595c:	018000f4 	movhi	r6,3
   15960:	31a04d04 	addi	r6,r6,-32460
   15964:	001fb0c0 	call	1fb0c <snprintf>
   15968:	1007883a 	mov	r3,r2
   1596c:	e0bfb817 	ldw	r2,-288(fp)
   15970:	10c5883a 	add	r2,r2,r3
   15974:	e0bfb815 	stw	r2,-288(fp)

	return len;
   15978:	e0bfb817 	ldw	r2,-288(fp)
}
   1597c:	e6fffe04 	addi	sp,fp,-8
   15980:	dfc00317 	ldw	ra,12(sp)
   15984:	df000217 	ldw	fp,8(sp)
   15988:	dc400117 	ldw	r17,4(sp)
   1598c:	dc000017 	ldw	r16,0(sp)
   15990:	dec00404 	addi	sp,sp,16
   15994:	f800283a 	ret

00015998 <ad9361_dig_tune>:
 * @param flags Flags: BE_VERBOSE, BE_MOREVERBOSE, DO_IDELAY, DO_ODELAY.
 * @return 0 in case of success, negative error code otherwise.
 */
int32_t ad9361_dig_tune(struct ad9361_rf_phy *phy, uint32_t max_freq,
						enum dig_tune_flags flags)
{
   15998:	deffd304 	addi	sp,sp,-180
   1599c:	de00012e 	bgeu	sp,et,159a4 <ad9361_dig_tune+0xc>
   159a0:	003b68fa 	trap	3
   159a4:	dfc02c15 	stw	ra,176(sp)
   159a8:	df002b15 	stw	fp,172(sp)
   159ac:	dc002a15 	stw	r16,168(sp)
   159b0:	df002b04 	addi	fp,sp,172
   159b4:	e13ffc15 	stw	r4,-16(fp)
   159b8:	e17ffd15 	stw	r5,-12(fp)
   159bc:	e1bffe15 	stw	r6,-8(fp)
	struct axiadc_converter *conv = phy->adc_conv;
   159c0:	e0bffc17 	ldw	r2,-16(fp)
   159c4:	10806f17 	ldw	r2,444(r2)
   159c8:	e0bfdd15 	stw	r2,-140(fp)
	struct axiadc_state *st = phy->adc_state;
   159cc:	e0bffc17 	ldw	r2,-16(fp)
   159d0:	10807017 	ldw	r2,448(r2)
   159d4:	e0bfde15 	stw	r2,-136(fp)
	int32_t ret, i, j, k, chan, t, num_chan, err = 0;
   159d8:	e03fdb15 	stw	zero,-148(fp)
	uint32_t s0, s1, c0, c1, tmp, saved = 0;
   159dc:	e03fdc15 	stw	zero,-144(fp)
	uint8_t field[2][16];
	uint32_t saved_dsel[4], saved_chan_ctrl6[4], saved_chan_ctrl0[4];
	//uint32_t rates[3] = {25000000U, 40000000U, 61440000U};
	uint32_t rates[2] = {25000000U, 40000000U}; //, 61440000U};
   159e0:	00805f74 	movhi	r2,381
   159e4:	109e1004 	addi	r2,r2,30784
   159e8:	e0bffa15 	stw	r2,-24(fp)
   159ec:	008098b4 	movhi	r2,610
   159f0:	10968004 	addi	r2,r2,23040
   159f4:	e0bffb15 	stw	r2,-20(fp)
	uint32_t hdl_dac_version;

	dev_dbg(&phy->spi->dev, "%s: freq %"PRIu32" flags 0x%X\n", __func__,
   159f8:	010000f4 	movhi	r4,3
   159fc:	21206204 	addi	r4,r4,-32376
   15a00:	014000f4 	movhi	r5,3
   15a04:	29607904 	addi	r5,r5,-32284
   15a08:	e1bffd17 	ldw	r6,-12(fp)
   15a0c:	e1fffe17 	ldw	r7,-8(fp)
   15a10:	001f8180 	call	1f818 <printf>
   15a14:	010000f4 	movhi	r4,3
   15a18:	21204d04 	addi	r4,r4,-32460
   15a1c:	001f8180 	call	1f818 <printf>
			max_freq, flags);

	hdl_dac_version = axiadc_read(st, 0x4000);
   15a20:	e13fde17 	ldw	r4,-136(fp)
   15a24:	01500004 	movi	r5,16384
   15a28:	001b9d00 	call	1b9d0 <axiadc_read>
   15a2c:	e0bfdf15 	stw	r2,-132(fp)

	if ((phy->pdata->dig_interface_tune_skipmode == 2) ||
   15a30:	e0bffc17 	ldw	r2,-16(fp)
   15a34:	10803017 	ldw	r2,192(r2)
   15a38:	10800503 	ldbu	r2,20(r2)
   15a3c:	10803fcc 	andi	r2,r2,255
   15a40:	108000a0 	cmpeqi	r2,r2,2
   15a44:	1000031e 	bne	r2,zero,15a54 <ad9361_dig_tune+0xbc>
			(flags & RESTORE_DEFAULT)) {
   15a48:	e0bffe17 	ldw	r2,-8(fp)
   15a4c:	1080080c 	andi	r2,r2,32
	dev_dbg(&phy->spi->dev, "%s: freq %"PRIu32" flags 0x%X\n", __func__,
			max_freq, flags);

	hdl_dac_version = axiadc_read(st, 0x4000);

	if ((phy->pdata->dig_interface_tune_skipmode == 2) ||
   15a50:	10001626 	beq	r2,zero,15aac <ad9361_dig_tune+0x114>
			(flags & RESTORE_DEFAULT)) {
	/* skip completely and use defaults */
		ad9361_spi_write(phy->spi, REG_RX_CLOCK_DATA_DELAY,
   15a54:	e0bffc17 	ldw	r2,-16(fp)
   15a58:	10c00117 	ldw	r3,4(r2)
				phy->pdata->port_ctrl.rx_clk_data_delay);
   15a5c:	e0bffc17 	ldw	r2,-16(fp)
   15a60:	10803017 	ldw	r2,192(r2)
   15a64:	108043c3 	ldbu	r2,271(r2)
	hdl_dac_version = axiadc_read(st, 0x4000);

	if ((phy->pdata->dig_interface_tune_skipmode == 2) ||
			(flags & RESTORE_DEFAULT)) {
	/* skip completely and use defaults */
		ad9361_spi_write(phy->spi, REG_RX_CLOCK_DATA_DELAY,
   15a68:	10803fcc 	andi	r2,r2,255
   15a6c:	1809883a 	mov	r4,r3
   15a70:	01400184 	movi	r5,6
   15a74:	100d883a 	mov	r6,r2
   15a78:	00002600 	call	260 <ad9361_spi_write>
				phy->pdata->port_ctrl.rx_clk_data_delay);

		ad9361_spi_write(phy->spi, REG_TX_CLOCK_DATA_DELAY,
   15a7c:	e0bffc17 	ldw	r2,-16(fp)
   15a80:	10c00117 	ldw	r3,4(r2)
				phy->pdata->port_ctrl.tx_clk_data_delay);
   15a84:	e0bffc17 	ldw	r2,-16(fp)
   15a88:	10803017 	ldw	r2,192(r2)
   15a8c:	10804403 	ldbu	r2,272(r2)
			(flags & RESTORE_DEFAULT)) {
	/* skip completely and use defaults */
		ad9361_spi_write(phy->spi, REG_RX_CLOCK_DATA_DELAY,
				phy->pdata->port_ctrl.rx_clk_data_delay);

		ad9361_spi_write(phy->spi, REG_TX_CLOCK_DATA_DELAY,
   15a90:	10803fcc 	andi	r2,r2,255
   15a94:	1809883a 	mov	r4,r3
   15a98:	014001c4 	movi	r5,7
   15a9c:	100d883a 	mov	r6,r2
   15aa0:	00002600 	call	260 <ad9361_spi_write>
				phy->pdata->port_ctrl.tx_clk_data_delay);

		return 0;
   15aa4:	0005883a 	mov	r2,zero
   15aa8:	00026506 	br	16440 <ad9361_dig_tune+0xaa8>
	}

	if (flags & DO_IDELAY)
   15aac:	e0bffe17 	ldw	r2,-8(fp)
   15ab0:	1080010c 	andi	r2,r2,4
   15ab4:	10000326 	beq	r2,zero,15ac4 <ad9361_dig_tune+0x12c>
		ad9361_midscale_iodelay(phy, 0);
   15ab8:	e13ffc17 	ldw	r4,-16(fp)
   15abc:	000b883a 	mov	r5,zero
   15ac0:	00151200 	call	15120 <ad9361_midscale_iodelay>

	if (flags & DO_ODELAY)
   15ac4:	e0bffe17 	ldw	r2,-8(fp)
   15ac8:	1080020c 	andi	r2,r2,8
   15acc:	10000326 	beq	r2,zero,15adc <ad9361_dig_tune+0x144>
		ad9361_midscale_iodelay(phy, 1);
   15ad0:	e13ffc17 	ldw	r4,-16(fp)
   15ad4:	01400044 	movi	r5,1
   15ad8:	00151200 	call	15120 <ad9361_midscale_iodelay>

	if (!phy->pdata->fdd) {
   15adc:	e0bffc17 	ldw	r2,-16(fp)
   15ae0:	10803017 	ldw	r2,192(r2)
   15ae4:	10800043 	ldbu	r2,1(r2)
   15ae8:	1080005c 	xori	r2,r2,1
   15aec:	10803fcc 	andi	r2,r2,255
   15af0:	10000826 	beq	r2,zero,15b14 <ad9361_dig_tune+0x17c>
		ad9361_set_ensm_mode(phy, true, false);
   15af4:	e13ffc17 	ldw	r4,-16(fp)
   15af8:	01400044 	movi	r5,1
   15afc:	000d883a 	mov	r6,zero
   15b00:	000a71c0 	call	a71c <ad9361_set_ensm_mode>
		ad9361_ensm_force_state(phy, ENSM_STATE_FDD);
   15b04:	e13ffc17 	ldw	r4,-16(fp)
   15b08:	01400284 	movi	r5,10
   15b0c:	00024740 	call	2474 <ad9361_ensm_force_state>
   15b10:	00000506 	br	15b28 <ad9361_dig_tune+0x190>
	} else {
		ad9361_ensm_force_state(phy, ENSM_STATE_ALERT);
   15b14:	e13ffc17 	ldw	r4,-16(fp)
   15b18:	01400144 	movi	r5,5
   15b1c:	00024740 	call	2474 <ad9361_ensm_force_state>
		ad9361_ensm_restore_prev_state(phy);
   15b20:	e13ffc17 	ldw	r4,-16(fp)
   15b24:	00026740 	call	2674 <ad9361_ensm_restore_prev_state>
	}

	num_chan = (conv->chip_info->num_channels > 4) ? 4 :
		conv->chip_info->num_channels;
   15b28:	e0bfdd17 	ldw	r2,-140(fp)
   15b2c:	10800017 	ldw	r2,0(r2)
   15b30:	10800117 	ldw	r2,4(r2)
	} else {
		ad9361_ensm_force_state(phy, ENSM_STATE_ALERT);
		ad9361_ensm_restore_prev_state(phy);
	}

	num_chan = (conv->chip_info->num_channels > 4) ? 4 :
   15b34:	10c00150 	cmplti	r3,r2,5
   15b38:	1800011e 	bne	r3,zero,15b40 <ad9361_dig_tune+0x1a8>
   15b3c:	00800104 	movi	r2,4
   15b40:	e0bfe015 	stw	r2,-128(fp)
		conv->chip_info->num_channels;

	ad9361_bist_prbs(phy, BIST_INJ_RX);
   15b44:	e13ffc17 	ldw	r4,-16(fp)
   15b48:	01400084 	movi	r5,2
   15b4c:	0000b540 	call	b54 <ad9361_bist_prbs>

	for (t = 0; t < 2; t++) {
   15b50:	e03fda15 	stw	zero,-152(fp)
   15b54:	00023606 	br	16430 <ad9361_dig_tune+0xa98>
		memset(field, 0, 32);
   15b58:	e0bfe604 	addi	r2,fp,-104
   15b5c:	1009883a 	mov	r4,r2
   15b60:	000b883a 	mov	r5,zero
   15b64:	01800804 	movi	r6,32
   15b68:	001f55c0 	call	1f55c <memset>
		for (k = 0; (uint32_t)k < (max_freq ? ARRAY_SIZE(rates) : 1); k++) {
   15b6c:	e03fd815 	stw	zero,-160(fp)
   15b70:	00008406 	br	15d84 <ad9361_dig_tune+0x3ec>
			if (max_freq)
   15b74:	e0bffd17 	ldw	r2,-12(fp)
   15b78:	10000a26 	beq	r2,zero,15ba4 <ad9361_dig_tune+0x20c>
				ad9361_set_trx_clock_chain_freq(phy, rates[k]);
   15b7c:	e0bfd817 	ldw	r2,-160(fp)
   15b80:	1085883a 	add	r2,r2,r2
   15b84:	1085883a 	add	r2,r2,r2
   15b88:	e0ffd504 	addi	r3,fp,-172
   15b8c:	1885883a 	add	r2,r3,r2
   15b90:	10802504 	addi	r2,r2,148
   15b94:	10800017 	ldw	r2,0(r2)
   15b98:	e13ffc17 	ldw	r4,-16(fp)
   15b9c:	100b883a 	mov	r5,r2
   15ba0:	000a6980 	call	a698 <ad9361_set_trx_clock_chain_freq>
			for (i = 0; i < 2; i++) {
   15ba4:	e03fd615 	stw	zero,-168(fp)
   15ba8:	00006306 	br	15d38 <ad9361_dig_tune+0x3a0>
				for (j = 0; j < 16; j++) {
   15bac:	e03fd715 	stw	zero,-164(fp)
   15bb0:	00005b06 	br	15d20 <ad9361_dig_tune+0x388>
					ad9361_spi_write(phy->spi,
   15bb4:	e0bffc17 	ldw	r2,-16(fp)
   15bb8:	11000117 	ldw	r4,4(r2)
						REG_RX_CLOCK_DATA_DELAY + t,
   15bbc:	e0bfda17 	ldw	r2,-152(fp)
   15bc0:	10800184 	addi	r2,r2,6
		for (k = 0; (uint32_t)k < (max_freq ? ARRAY_SIZE(rates) : 1); k++) {
			if (max_freq)
				ad9361_set_trx_clock_chain_freq(phy, rates[k]);
			for (i = 0; i < 2; i++) {
				for (j = 0; j < 16; j++) {
					ad9361_spi_write(phy->spi,
   15bc4:	100b883a 	mov	r5,r2
						REG_RX_CLOCK_DATA_DELAY + t,
						RX_DATA_DELAY(i == 0 ? j : 0) |
   15bc8:	e0bfd617 	ldw	r2,-168(fp)
   15bcc:	1000031e 	bne	r2,zero,15bdc <ad9361_dig_tune+0x244>
   15bd0:	e0bfd717 	ldw	r2,-164(fp)
   15bd4:	10c003cc 	andi	r3,r2,15
   15bd8:	00000106 	br	15be0 <ad9361_dig_tune+0x248>
   15bdc:	0007883a 	mov	r3,zero
						DATA_CLK_DELAY(i ? j : 0));
   15be0:	e0bfd617 	ldw	r2,-168(fp)
   15be4:	10000426 	beq	r2,zero,15bf8 <ad9361_dig_tune+0x260>
   15be8:	e0bfd717 	ldw	r2,-164(fp)
   15bec:	1004913a 	slli	r2,r2,4
   15bf0:	10803fcc 	andi	r2,r2,255
   15bf4:	00000106 	br	15bfc <ad9361_dig_tune+0x264>
   15bf8:	0005883a 	mov	r2,zero
				ad9361_set_trx_clock_chain_freq(phy, rates[k]);
			for (i = 0; i < 2; i++) {
				for (j = 0; j < 16; j++) {
					ad9361_spi_write(phy->spi,
						REG_RX_CLOCK_DATA_DELAY + t,
						RX_DATA_DELAY(i == 0 ? j : 0) |
   15bfc:	1884b03a 	or	r2,r3,r2
		for (k = 0; (uint32_t)k < (max_freq ? ARRAY_SIZE(rates) : 1); k++) {
			if (max_freq)
				ad9361_set_trx_clock_chain_freq(phy, rates[k]);
			for (i = 0; i < 2; i++) {
				for (j = 0; j < 16; j++) {
					ad9361_spi_write(phy->spi,
   15c00:	100d883a 	mov	r6,r2
   15c04:	00002600 	call	260 <ad9361_spi_write>
						REG_RX_CLOCK_DATA_DELAY + t,
						RX_DATA_DELAY(i == 0 ? j : 0) |
						DATA_CLK_DELAY(i ? j : 0));
					for (chan = 0; chan < num_chan; chan++)
   15c08:	e03fd915 	stw	zero,-156(fp)
   15c0c:	00000a06 	br	15c38 <ad9361_dig_tune+0x2a0>
						axiadc_write(st, ADI_REG_CHAN_STATUS(chan),
   15c10:	e0bfd917 	ldw	r2,-156(fp)
   15c14:	100491ba 	slli	r2,r2,6
   15c18:	10810104 	addi	r2,r2,1028
   15c1c:	e13fde17 	ldw	r4,-136(fp)
   15c20:	100b883a 	mov	r5,r2
   15c24:	01800184 	movi	r6,6
   15c28:	001ba140 	call	1ba14 <axiadc_write>
				for (j = 0; j < 16; j++) {
					ad9361_spi_write(phy->spi,
						REG_RX_CLOCK_DATA_DELAY + t,
						RX_DATA_DELAY(i == 0 ? j : 0) |
						DATA_CLK_DELAY(i ? j : 0));
					for (chan = 0; chan < num_chan; chan++)
   15c2c:	e0bfd917 	ldw	r2,-156(fp)
   15c30:	10800044 	addi	r2,r2,1
   15c34:	e0bfd915 	stw	r2,-156(fp)
   15c38:	e0ffd917 	ldw	r3,-156(fp)
   15c3c:	e0bfe017 	ldw	r2,-128(fp)
   15c40:	18bff316 	blt	r3,r2,15c10 <_gp+0xfffe3af0>
						axiadc_write(st, ADI_REG_CHAN_STATUS(chan),
						ADI_PN_ERR | ADI_PN_OOS);
					mdelay(4);
   15c44:	01000104 	movi	r4,4
   15c48:	001b8dc0 	call	1b8dc <mdelay>

					if ((t == 1) || (axiadc_read(st, ADI_REG_STATUS) & ADI_STATUS)) {
   15c4c:	e0bfda17 	ldw	r2,-152(fp)
   15c50:	10800060 	cmpeqi	r2,r2,1
   15c54:	1000051e 	bne	r2,zero,15c6c <ad9361_dig_tune+0x2d4>
   15c58:	e13fde17 	ldw	r4,-136(fp)
   15c5c:	01401704 	movi	r5,92
   15c60:	001b9d00 	call	1b9d0 <axiadc_read>
   15c64:	1080004c 	andi	r2,r2,1
   15c68:	10001426 	beq	r2,zero,15cbc <ad9361_dig_tune+0x324>
						for (chan = 0, ret = 0; chan < num_chan; chan++) {
   15c6c:	e03fd915 	stw	zero,-156(fp)
   15c70:	e03fd515 	stw	zero,-172(fp)
   15c74:	00000d06 	br	15cac <ad9361_dig_tune+0x314>
							ret |= axiadc_read(st, ADI_REG_CHAN_STATUS(chan));
   15c78:	e0bfd917 	ldw	r2,-156(fp)
   15c7c:	100491ba 	slli	r2,r2,6
   15c80:	10810104 	addi	r2,r2,1028
   15c84:	e13fde17 	ldw	r4,-136(fp)
   15c88:	100b883a 	mov	r5,r2
   15c8c:	001b9d00 	call	1b9d0 <axiadc_read>
   15c90:	1007883a 	mov	r3,r2
   15c94:	e0bfd517 	ldw	r2,-172(fp)
   15c98:	1884b03a 	or	r2,r3,r2
   15c9c:	e0bfd515 	stw	r2,-172(fp)
						axiadc_write(st, ADI_REG_CHAN_STATUS(chan),
						ADI_PN_ERR | ADI_PN_OOS);
					mdelay(4);

					if ((t == 1) || (axiadc_read(st, ADI_REG_STATUS) & ADI_STATUS)) {
						for (chan = 0, ret = 0; chan < num_chan; chan++) {
   15ca0:	e0bfd917 	ldw	r2,-156(fp)
   15ca4:	10800044 	addi	r2,r2,1
   15ca8:	e0bfd915 	stw	r2,-156(fp)
   15cac:	e0ffd917 	ldw	r3,-156(fp)
   15cb0:	e0bfe017 	ldw	r2,-128(fp)
   15cb4:	18bff016 	blt	r3,r2,15c78 <_gp+0xfffe3b58>
					for (chan = 0; chan < num_chan; chan++)
						axiadc_write(st, ADI_REG_CHAN_STATUS(chan),
						ADI_PN_ERR | ADI_PN_OOS);
					mdelay(4);

					if ((t == 1) || (axiadc_read(st, ADI_REG_STATUS) & ADI_STATUS)) {
   15cb8:	00000206 	br	15cc4 <ad9361_dig_tune+0x32c>
						for (chan = 0, ret = 0; chan < num_chan; chan++) {
							ret |= axiadc_read(st, ADI_REG_CHAN_STATUS(chan));
						}
					}
					else {
						ret = 1;
   15cbc:	00800044 	movi	r2,1
   15cc0:	e0bfd515 	stw	r2,-172(fp)
					}

					field[i][j] |= ret;
   15cc4:	e0bfd617 	ldw	r2,-168(fp)
   15cc8:	1004913a 	slli	r2,r2,4
   15ccc:	e13fd504 	addi	r4,fp,-172
   15cd0:	2087883a 	add	r3,r4,r2
   15cd4:	e0bfd717 	ldw	r2,-164(fp)
   15cd8:	1885883a 	add	r2,r3,r2
   15cdc:	10801104 	addi	r2,r2,68
   15ce0:	10800003 	ldbu	r2,0(r2)
   15ce4:	1007883a 	mov	r3,r2
   15ce8:	e0bfd517 	ldw	r2,-172(fp)
   15cec:	1884b03a 	or	r2,r3,r2
   15cf0:	1009883a 	mov	r4,r2
   15cf4:	e0bfd617 	ldw	r2,-168(fp)
   15cf8:	1004913a 	slli	r2,r2,4
   15cfc:	e17fd504 	addi	r5,fp,-172
   15d00:	2887883a 	add	r3,r5,r2
   15d04:	e0bfd717 	ldw	r2,-164(fp)
   15d08:	1885883a 	add	r2,r3,r2
   15d0c:	10801104 	addi	r2,r2,68
   15d10:	11000005 	stb	r4,0(r2)
		memset(field, 0, 32);
		for (k = 0; (uint32_t)k < (max_freq ? ARRAY_SIZE(rates) : 1); k++) {
			if (max_freq)
				ad9361_set_trx_clock_chain_freq(phy, rates[k]);
			for (i = 0; i < 2; i++) {
				for (j = 0; j < 16; j++) {
   15d14:	e0bfd717 	ldw	r2,-164(fp)
   15d18:	10800044 	addi	r2,r2,1
   15d1c:	e0bfd715 	stw	r2,-164(fp)
   15d20:	e0bfd717 	ldw	r2,-164(fp)
   15d24:	10800410 	cmplti	r2,r2,16
   15d28:	103fa21e 	bne	r2,zero,15bb4 <_gp+0xfffe3a94>
	for (t = 0; t < 2; t++) {
		memset(field, 0, 32);
		for (k = 0; (uint32_t)k < (max_freq ? ARRAY_SIZE(rates) : 1); k++) {
			if (max_freq)
				ad9361_set_trx_clock_chain_freq(phy, rates[k]);
			for (i = 0; i < 2; i++) {
   15d2c:	e0bfd617 	ldw	r2,-168(fp)
   15d30:	10800044 	addi	r2,r2,1
   15d34:	e0bfd615 	stw	r2,-168(fp)
   15d38:	e0bfd617 	ldw	r2,-168(fp)
   15d3c:	10800090 	cmplti	r2,r2,2
   15d40:	103f9a1e 	bne	r2,zero,15bac <_gp+0xfffe3a8c>
					}

					field[i][j] |= ret;
				}
			}
			if ((flags & BE_MOREVERBOSE) && max_freq) {
   15d44:	e0bffe17 	ldw	r2,-8(fp)
   15d48:	1080008c 	andi	r2,r2,2
   15d4c:	10000a26 	beq	r2,zero,15d78 <ad9361_dig_tune+0x3e0>
   15d50:	e0bffd17 	ldw	r2,-12(fp)
   15d54:	10000826 	beq	r2,zero,15d78 <ad9361_dig_tune+0x3e0>
				ad9361_dig_tune_verbose_print(phy, field, t);
   15d58:	e0bfda17 	ldw	r2,-152(fp)
   15d5c:	1004c03a 	cmpne	r2,r2,zero
   15d60:	10803fcc 	andi	r2,r2,255
   15d64:	e0ffe604 	addi	r3,fp,-104
   15d68:	e13ffc17 	ldw	r4,-16(fp)
   15d6c:	180b883a 	mov	r5,r3
   15d70:	100d883a 	mov	r6,r2
   15d74:	00153d40 	call	153d4 <ad9361_dig_tune_verbose_print>

	ad9361_bist_prbs(phy, BIST_INJ_RX);

	for (t = 0; t < 2; t++) {
		memset(field, 0, 32);
		for (k = 0; (uint32_t)k < (max_freq ? ARRAY_SIZE(rates) : 1); k++) {
   15d78:	e0bfd817 	ldw	r2,-160(fp)
   15d7c:	10800044 	addi	r2,r2,1
   15d80:	e0bfd815 	stw	r2,-160(fp)
   15d84:	e0ffd817 	ldw	r3,-160(fp)
   15d88:	e0bffd17 	ldw	r2,-12(fp)
   15d8c:	10000226 	beq	r2,zero,15d98 <ad9361_dig_tune+0x400>
   15d90:	00800084 	movi	r2,2
   15d94:	00000106 	br	15d9c <ad9361_dig_tune+0x404>
   15d98:	00800044 	movi	r2,1
   15d9c:	18bf7536 	bltu	r3,r2,15b74 <_gp+0xfffe3a54>
			if ((flags & BE_MOREVERBOSE) && max_freq) {
				ad9361_dig_tune_verbose_print(phy, field, t);
			}
		}

		c0 = ad9361_find_opt(&field[0][0], 16, &s0);
   15da0:	e0ffe604 	addi	r3,fp,-104
   15da4:	e0bfe404 	addi	r2,fp,-112
   15da8:	1809883a 	mov	r4,r3
   15dac:	01400404 	movi	r5,16
   15db0:	100d883a 	mov	r6,r2
   15db4:	00004f00 	call	4f0 <ad9361_find_opt>
   15db8:	e0bfe115 	stw	r2,-124(fp)
		c1 = ad9361_find_opt(&field[1][0], 16, &s1);
   15dbc:	e0bfe604 	addi	r2,fp,-104
   15dc0:	10c00404 	addi	r3,r2,16
   15dc4:	e0bfe504 	addi	r2,fp,-108
   15dc8:	1809883a 	mov	r4,r3
   15dcc:	01400404 	movi	r5,16
   15dd0:	100d883a 	mov	r6,r2
   15dd4:	00004f00 	call	4f0 <ad9361_find_opt>
   15dd8:	e0bfe215 	stw	r2,-120(fp)

		if (!c0 && !c1) {
   15ddc:	e0bfe117 	ldw	r2,-124(fp)
   15de0:	10001f1e 	bne	r2,zero,15e60 <ad9361_dig_tune+0x4c8>
   15de4:	e0bfe217 	ldw	r2,-120(fp)
   15de8:	10001d1e 	bne	r2,zero,15e60 <ad9361_dig_tune+0x4c8>
			ad9361_dig_tune_verbose_print(phy, field, t);
   15dec:	e0bfda17 	ldw	r2,-152(fp)
   15df0:	1004c03a 	cmpne	r2,r2,zero
   15df4:	10803fcc 	andi	r2,r2,255
   15df8:	e0ffe604 	addi	r3,fp,-104
   15dfc:	e13ffc17 	ldw	r4,-16(fp)
   15e00:	180b883a 	mov	r5,r3
   15e04:	100d883a 	mov	r6,r2
   15e08:	00153d40 	call	153d4 <ad9361_dig_tune_verbose_print>
			dev_err(&phy->spi->dev, "%s: Tuning %s FAILED!", __func__,
   15e0c:	e0bfda17 	ldw	r2,-152(fp)
   15e10:	10000326 	beq	r2,zero,15e20 <ad9361_dig_tune+0x488>
   15e14:	008000f4 	movhi	r2,3
   15e18:	10a03b04 	addi	r2,r2,-32532
   15e1c:	00000206 	br	15e28 <ad9361_dig_tune+0x490>
   15e20:	008000f4 	movhi	r2,3
   15e24:	10a03c04 	addi	r2,r2,-32528
   15e28:	010000f4 	movhi	r4,3
   15e2c:	21206904 	addi	r4,r4,-32348
   15e30:	014000f4 	movhi	r5,3
   15e34:	29607904 	addi	r5,r5,-32284
   15e38:	100d883a 	mov	r6,r2
   15e3c:	001f8180 	call	1f818 <printf>
   15e40:	010000f4 	movhi	r4,3
   15e44:	21204d04 	addi	r4,r4,-32460
   15e48:	001f8180 	call	1f818 <printf>
				t ? "TX" : "RX");
			err |= -EIO;
   15e4c:	e0ffdb17 	ldw	r3,-148(fp)
   15e50:	00bffec4 	movi	r2,-5
   15e54:	1884b03a 	or	r2,r3,r2
   15e58:	e0bfdb15 	stw	r2,-148(fp)
   15e5c:	00000b06 	br	15e8c <ad9361_dig_tune+0x4f4>
		} else if (flags & BE_VERBOSE) {
   15e60:	e0bffe17 	ldw	r2,-8(fp)
   15e64:	1080004c 	andi	r2,r2,1
   15e68:	10000826 	beq	r2,zero,15e8c <ad9361_dig_tune+0x4f4>
			ad9361_dig_tune_verbose_print(phy, field, t);
   15e6c:	e0bfda17 	ldw	r2,-152(fp)
   15e70:	1004c03a 	cmpne	r2,r2,zero
   15e74:	10803fcc 	andi	r2,r2,255
   15e78:	e0ffe604 	addi	r3,fp,-104
   15e7c:	e13ffc17 	ldw	r4,-16(fp)
   15e80:	180b883a 	mov	r5,r3
   15e84:	100d883a 	mov	r6,r2
   15e88:	00153d40 	call	153d4 <ad9361_dig_tune_verbose_print>
		}

		if (c1 > c0)
   15e8c:	e0bfe217 	ldw	r2,-120(fp)
   15e90:	e0ffe117 	ldw	r3,-124(fp)
   15e94:	18800e2e 	bgeu	r3,r2,15ed0 <ad9361_dig_tune+0x538>
			ad9361_spi_write(phy->spi, REG_RX_CLOCK_DATA_DELAY + t,
   15e98:	e0bffc17 	ldw	r2,-16(fp)
   15e9c:	11000117 	ldw	r4,4(r2)
   15ea0:	e0bfda17 	ldw	r2,-152(fp)
   15ea4:	10800184 	addi	r2,r2,6
   15ea8:	100b883a 	mov	r5,r2
			DATA_CLK_DELAY(s1 + c1 / 2) |
   15eac:	e0bfe217 	ldw	r2,-120(fp)
   15eb0:	1006d07a 	srli	r3,r2,1
   15eb4:	e0bfe517 	ldw	r2,-108(fp)
   15eb8:	1885883a 	add	r2,r3,r2
   15ebc:	1004913a 	slli	r2,r2,4
		} else if (flags & BE_VERBOSE) {
			ad9361_dig_tune_verbose_print(phy, field, t);
		}

		if (c1 > c0)
			ad9361_spi_write(phy->spi, REG_RX_CLOCK_DATA_DELAY + t,
   15ec0:	10803fcc 	andi	r2,r2,255
   15ec4:	100d883a 	mov	r6,r2
   15ec8:	00002600 	call	260 <ad9361_spi_write>
   15ecc:	00000c06 	br	15f00 <ad9361_dig_tune+0x568>
			DATA_CLK_DELAY(s1 + c1 / 2) |
			RX_DATA_DELAY(0));
		else
			ad9361_spi_write(phy->spi, REG_RX_CLOCK_DATA_DELAY + t,
   15ed0:	e0bffc17 	ldw	r2,-16(fp)
   15ed4:	11000117 	ldw	r4,4(r2)
   15ed8:	e0bfda17 	ldw	r2,-152(fp)
   15edc:	10800184 	addi	r2,r2,6
   15ee0:	100b883a 	mov	r5,r2
			DATA_CLK_DELAY(0) |
			RX_DATA_DELAY(s0 + c0 / 2));
   15ee4:	e0bfe117 	ldw	r2,-124(fp)
   15ee8:	1006d07a 	srli	r3,r2,1
   15eec:	e0bfe417 	ldw	r2,-112(fp)
   15ef0:	1885883a 	add	r2,r3,r2
		if (c1 > c0)
			ad9361_spi_write(phy->spi, REG_RX_CLOCK_DATA_DELAY + t,
			DATA_CLK_DELAY(s1 + c1 / 2) |
			RX_DATA_DELAY(0));
		else
			ad9361_spi_write(phy->spi, REG_RX_CLOCK_DATA_DELAY + t,
   15ef4:	108003cc 	andi	r2,r2,15
   15ef8:	100d883a 	mov	r6,r2
   15efc:	00002600 	call	260 <ad9361_spi_write>
			DATA_CLK_DELAY(0) |
			RX_DATA_DELAY(s0 + c0 / 2));

		if (t == 0) {
   15f00:	e0bfda17 	ldw	r2,-152(fp)
   15f04:	1000a91e 	bne	r2,zero,161ac <ad9361_dig_tune+0x814>
			if (flags & DO_IDELAY)
   15f08:	e0bffe17 	ldw	r2,-8(fp)
   15f0c:	1080010c 	andi	r2,r2,4
   15f10:	10000326 	beq	r2,zero,15f20 <ad9361_dig_tune+0x588>
				ad9361_dig_tune_iodelay(phy, 0);
   15f14:	e13ffc17 	ldw	r4,-16(fp)
   15f18:	000b883a 	mov	r5,zero
   15f1c:	00151b80 	call	151b8 <ad9361_dig_tune_iodelay>

			/* Now do the loopback and tune the digital out */
			ad9361_bist_prbs(phy, BIST_DISABLE);
   15f20:	e13ffc17 	ldw	r4,-16(fp)
   15f24:	000b883a 	mov	r5,zero
   15f28:	0000b540 	call	b54 <ad9361_bist_prbs>

			axiadc_write(st, ADI_REG_RSTN, ADI_MMCM_RSTN);
   15f2c:	e13fde17 	ldw	r4,-136(fp)
   15f30:	01401004 	movi	r5,64
   15f34:	01800084 	movi	r6,2
   15f38:	001ba140 	call	1ba14 <axiadc_write>
			axiadc_write(st, ADI_REG_RSTN, ADI_RSTN | ADI_MMCM_RSTN);
   15f3c:	e13fde17 	ldw	r4,-136(fp)
   15f40:	01401004 	movi	r5,64
   15f44:	018000c4 	movi	r6,3
   15f48:	001ba140 	call	1ba14 <axiadc_write>

			if (phy->pdata->dig_interface_tune_skipmode == 1) {
   15f4c:	e0bffc17 	ldw	r2,-16(fp)
   15f50:	10803017 	ldw	r2,192(r2)
   15f54:	10800503 	ldbu	r2,20(r2)
   15f58:	10803fcc 	andi	r2,r2,255
   15f5c:	10800058 	cmpnei	r2,r2,1
   15f60:	1000211e 	bne	r2,zero,15fe8 <ad9361_dig_tune+0x650>
			/* skip TX */
				if (!(flags & SKIP_STORE_RESULT))
   15f64:	e0bffe17 	ldw	r2,-8(fp)
   15f68:	1080040c 	andi	r2,r2,16
   15f6c:	1000081e 	bne	r2,zero,15f90 <ad9361_dig_tune+0x5f8>
					phy->pdata->port_ctrl.rx_clk_data_delay =
   15f70:	e0bffc17 	ldw	r2,-16(fp)
   15f74:	14003017 	ldw	r16,192(r2)
							ad9361_spi_read(phy->spi, REG_RX_CLOCK_DATA_DELAY);
   15f78:	e0bffc17 	ldw	r2,-16(fp)
   15f7c:	10800117 	ldw	r2,4(r2)
   15f80:	1009883a 	mov	r4,r2
   15f84:	01400184 	movi	r5,6
   15f88:	00001500 	call	150 <ad9361_spi_read>
			axiadc_write(st, ADI_REG_RSTN, ADI_RSTN | ADI_MMCM_RSTN);

			if (phy->pdata->dig_interface_tune_skipmode == 1) {
			/* skip TX */
				if (!(flags & SKIP_STORE_RESULT))
					phy->pdata->port_ctrl.rx_clk_data_delay =
   15f8c:	808043c5 	stb	r2,271(r16)
							ad9361_spi_read(phy->spi, REG_RX_CLOCK_DATA_DELAY);

				if (!phy->pdata->fdd) {
   15f90:	e0bffc17 	ldw	r2,-16(fp)
   15f94:	10803017 	ldw	r2,192(r2)
   15f98:	10800043 	ldbu	r2,1(r2)
   15f9c:	1080005c 	xori	r2,r2,1
   15fa0:	10803fcc 	andi	r2,r2,255
   15fa4:	10000e26 	beq	r2,zero,15fe0 <ad9361_dig_tune+0x648>
					ad9361_set_ensm_mode(phy, phy->pdata->fdd,
   15fa8:	e0bffc17 	ldw	r2,-16(fp)
   15fac:	10803017 	ldw	r2,192(r2)
   15fb0:	10800043 	ldbu	r2,1(r2)
   15fb4:	10c03fcc 	andi	r3,r2,255
							     phy->pdata->ensm_pin_ctrl);
   15fb8:	e0bffc17 	ldw	r2,-16(fp)
   15fbc:	10803017 	ldw	r2,192(r2)
   15fc0:	10800183 	ldbu	r2,6(r2)
				if (!(flags & SKIP_STORE_RESULT))
					phy->pdata->port_ctrl.rx_clk_data_delay =
							ad9361_spi_read(phy->spi, REG_RX_CLOCK_DATA_DELAY);

				if (!phy->pdata->fdd) {
					ad9361_set_ensm_mode(phy, phy->pdata->fdd,
   15fc4:	10803fcc 	andi	r2,r2,255
   15fc8:	e13ffc17 	ldw	r4,-16(fp)
   15fcc:	180b883a 	mov	r5,r3
   15fd0:	100d883a 	mov	r6,r2
   15fd4:	000a71c0 	call	a71c <ad9361_set_ensm_mode>
							     phy->pdata->ensm_pin_ctrl);
					ad9361_ensm_restore_prev_state(phy);
   15fd8:	e13ffc17 	ldw	r4,-16(fp)
   15fdc:	00026740 	call	2674 <ad9361_ensm_restore_prev_state>
				}
				return 0;
   15fe0:	0005883a 	mov	r2,zero
   15fe4:	00011606 	br	16440 <ad9361_dig_tune+0xaa8>
			}

			ad9361_bist_loopback(phy, 1);
   15fe8:	e13ffc17 	ldw	r4,-16(fp)
   15fec:	01400044 	movi	r5,1
   15ff0:	00009680 	call	968 <ad9361_bist_loopback>
			axiadc_write(st, 0x4000 + ADI_REG_RSTN, ADI_RSTN | ADI_MMCM_RSTN);
   15ff4:	e13fde17 	ldw	r4,-136(fp)
   15ff8:	01501004 	movi	r5,16448
   15ffc:	018000c4 	movi	r6,3
   16000:	001ba140 	call	1ba14 <axiadc_write>

			for (chan = 0; chan < num_chan; chan++) {
   16004:	e03fd915 	stw	zero,-156(fp)
   16008:	00004f06 	br	16148 <ad9361_dig_tune+0x7b0>
				saved_chan_ctrl0[chan] = axiadc_read(st, ADI_REG_CHAN_CNTRL(chan));
   1600c:	e0bfd917 	ldw	r2,-156(fp)
   16010:	10800404 	addi	r2,r2,16
   16014:	100491ba 	slli	r2,r2,6
   16018:	e13fde17 	ldw	r4,-136(fp)
   1601c:	100b883a 	mov	r5,r2
   16020:	001b9d00 	call	1b9d0 <axiadc_read>
   16024:	1007883a 	mov	r3,r2
   16028:	e0bfd917 	ldw	r2,-156(fp)
   1602c:	1085883a 	add	r2,r2,r2
   16030:	1085883a 	add	r2,r2,r2
   16034:	e13fd504 	addi	r4,fp,-172
   16038:	2085883a 	add	r2,r4,r2
   1603c:	10802104 	addi	r2,r2,132
   16040:	10c00015 	stw	r3,0(r2)
				axiadc_write(st, ADI_REG_CHAN_CNTRL(chan),
   16044:	e0bfd917 	ldw	r2,-156(fp)
   16048:	10800404 	addi	r2,r2,16
   1604c:	100491ba 	slli	r2,r2,6
   16050:	e13fde17 	ldw	r4,-136(fp)
   16054:	100b883a 	mov	r5,r2
   16058:	01809444 	movi	r6,593
   1605c:	001ba140 	call	1ba14 <axiadc_write>
					ADI_FORMAT_SIGNEXT | ADI_FORMAT_ENABLE |
					ADI_ENABLE | ADI_IQCOR_ENB);
				axiadc_set_pnsel(st, chan, ADC_PN_CUSTOM);
   16060:	e13fde17 	ldw	r4,-136(fp)
   16064:	e17fd917 	ldw	r5,-156(fp)
   16068:	01800244 	movi	r6,9
   1606c:	001ba580 	call	1ba58 <axiadc_set_pnsel>
				saved_chan_ctrl6[chan] = axiadc_read(st, 0x4414 + (chan) * 0x40);
   16070:	e0bfd917 	ldw	r2,-156(fp)
   16074:	100491ba 	slli	r2,r2,6
   16078:	10910504 	addi	r2,r2,17428
   1607c:	e13fde17 	ldw	r4,-136(fp)
   16080:	100b883a 	mov	r5,r2
   16084:	001b9d00 	call	1b9d0 <axiadc_read>
   16088:	1007883a 	mov	r3,r2
   1608c:	e0bfd917 	ldw	r2,-156(fp)
   16090:	1085883a 	add	r2,r2,r2
   16094:	1085883a 	add	r2,r2,r2
   16098:	e17fd504 	addi	r5,fp,-172
   1609c:	2885883a 	add	r2,r5,r2
   160a0:	10801d04 	addi	r2,r2,116
   160a4:	10c00015 	stw	r3,0(r2)
				if (PCORE_VERSION_MAJOR(hdl_dac_version) > 7)
   160a8:	e0bfdf17 	ldw	r2,-132(fp)
   160ac:	1004d43a 	srli	r2,r2,16
   160b0:	10800230 	cmpltui	r2,r2,8
   160b4:	10001a1e 	bne	r2,zero,16120 <ad9361_dig_tune+0x788>
				{
					saved_dsel[chan] = axiadc_read(st, 0x4418 + (chan) * 0x40);
   160b8:	e0bfd917 	ldw	r2,-156(fp)
   160bc:	100491ba 	slli	r2,r2,6
   160c0:	10910604 	addi	r2,r2,17432
   160c4:	e13fde17 	ldw	r4,-136(fp)
   160c8:	100b883a 	mov	r5,r2
   160cc:	001b9d00 	call	1b9d0 <axiadc_read>
   160d0:	1007883a 	mov	r3,r2
   160d4:	e0bfd917 	ldw	r2,-156(fp)
   160d8:	1085883a 	add	r2,r2,r2
   160dc:	1085883a 	add	r2,r2,r2
   160e0:	e13fd504 	addi	r4,fp,-172
   160e4:	2085883a 	add	r2,r4,r2
   160e8:	10801904 	addi	r2,r2,100
   160ec:	10c00015 	stw	r3,0(r2)
					axiadc_write(st, 0x4418 + (chan) * 0x40, 9);
   160f0:	e0bfd917 	ldw	r2,-156(fp)
   160f4:	100491ba 	slli	r2,r2,6
   160f8:	10910604 	addi	r2,r2,17432
   160fc:	e13fde17 	ldw	r4,-136(fp)
   16100:	100b883a 	mov	r5,r2
   16104:	01800244 	movi	r6,9
   16108:	001ba140 	call	1ba14 <axiadc_write>
					axiadc_write(st, 0x4044, 0x1);
   1610c:	e13fde17 	ldw	r4,-136(fp)
   16110:	01501104 	movi	r5,16452
   16114:	01800044 	movi	r6,1
   16118:	001ba140 	call	1ba14 <axiadc_write>
   1611c:	00000706 	br	1613c <ad9361_dig_tune+0x7a4>
				}
				else
					axiadc_write(st, 0x4414 + (chan) * 0x40, 1);
   16120:	e0bfd917 	ldw	r2,-156(fp)
   16124:	100491ba 	slli	r2,r2,6
   16128:	10910504 	addi	r2,r2,17428
   1612c:	e13fde17 	ldw	r4,-136(fp)
   16130:	100b883a 	mov	r5,r2
   16134:	01800044 	movi	r6,1
   16138:	001ba140 	call	1ba14 <axiadc_write>
			}

			ad9361_bist_loopback(phy, 1);
			axiadc_write(st, 0x4000 + ADI_REG_RSTN, ADI_RSTN | ADI_MMCM_RSTN);

			for (chan = 0; chan < num_chan; chan++) {
   1613c:	e0bfd917 	ldw	r2,-156(fp)
   16140:	10800044 	addi	r2,r2,1
   16144:	e0bfd915 	stw	r2,-156(fp)
   16148:	e0ffd917 	ldw	r3,-156(fp)
   1614c:	e0bfe017 	ldw	r2,-128(fp)
   16150:	18bfae16 	blt	r3,r2,1600c <_gp+0xfffe3eec>
				}
				else
					axiadc_write(st, 0x4414 + (chan) * 0x40, 1);

			}
			if (PCORE_VERSION_MAJOR(hdl_dac_version) < 8) {
   16154:	e0bfdf17 	ldw	r2,-132(fp)
   16158:	1004d43a 	srli	r2,r2,16
   1615c:	10800228 	cmpgeui	r2,r2,8
   16160:	1000b01e 	bne	r2,zero,16424 <ad9361_dig_tune+0xa8c>
				saved = tmp = axiadc_read(st, 0x4048);
   16164:	e13fde17 	ldw	r4,-136(fp)
   16168:	01501204 	movi	r5,16456
   1616c:	001b9d00 	call	1b9d0 <axiadc_read>
   16170:	e0bfe315 	stw	r2,-116(fp)
   16174:	e0bfe317 	ldw	r2,-116(fp)
   16178:	e0bfdc15 	stw	r2,-144(fp)
				tmp &= ~0xF;
   1617c:	e0ffe317 	ldw	r3,-116(fp)
   16180:	00bffc04 	movi	r2,-16
   16184:	1884703a 	and	r2,r3,r2
   16188:	e0bfe315 	stw	r2,-116(fp)
				tmp |= 1;
   1618c:	e0bfe317 	ldw	r2,-116(fp)
   16190:	10800054 	ori	r2,r2,1
   16194:	e0bfe315 	stw	r2,-116(fp)
				axiadc_write(st, 0x4048, tmp);
   16198:	e13fde17 	ldw	r4,-136(fp)
   1619c:	01501204 	movi	r5,16456
   161a0:	e1bfe317 	ldw	r6,-116(fp)
   161a4:	001ba140 	call	1ba14 <axiadc_write>
   161a8:	00009e06 	br	16424 <ad9361_dig_tune+0xa8c>

			}
		} else {
			if (flags & DO_ODELAY)
   161ac:	e0bffe17 	ldw	r2,-8(fp)
   161b0:	1080020c 	andi	r2,r2,8
   161b4:	10000326 	beq	r2,zero,161c4 <ad9361_dig_tune+0x82c>
				ad9361_dig_tune_iodelay(phy, 1);
   161b8:	e13ffc17 	ldw	r4,-16(fp)
   161bc:	01400044 	movi	r5,1
   161c0:	00151b80 	call	151b8 <ad9361_dig_tune_iodelay>

			ad9361_bist_loopback(phy, 0);
   161c4:	e13ffc17 	ldw	r4,-16(fp)
   161c8:	000b883a 	mov	r5,zero
   161cc:	00009680 	call	968 <ad9361_bist_loopback>

			if (PCORE_VERSION_MAJOR(hdl_dac_version) < 8)
   161d0:	e0bfdf17 	ldw	r2,-132(fp)
   161d4:	1004d43a 	srli	r2,r2,16
   161d8:	10800228 	cmpgeui	r2,r2,8
   161dc:	1000041e 	bne	r2,zero,161f0 <ad9361_dig_tune+0x858>
				axiadc_write(st, 0x4048, saved);
   161e0:	e13fde17 	ldw	r4,-136(fp)
   161e4:	01501204 	movi	r5,16456
   161e8:	e1bfdc17 	ldw	r6,-144(fp)
   161ec:	001ba140 	call	1ba14 <axiadc_write>

			for (chan = 0; chan < num_chan; chan++) {
   161f0:	e03fd915 	stw	zero,-156(fp)
   161f4:	00003c06 	br	162e8 <ad9361_dig_tune+0x950>
				axiadc_write(st, ADI_REG_CHAN_CNTRL(chan),
   161f8:	e0bfd917 	ldw	r2,-156(fp)
   161fc:	10800404 	addi	r2,r2,16
   16200:	100491ba 	slli	r2,r2,6
   16204:	1007883a 	mov	r3,r2
					saved_chan_ctrl0[chan]);
   16208:	e0bfd917 	ldw	r2,-156(fp)
   1620c:	1085883a 	add	r2,r2,r2
   16210:	1085883a 	add	r2,r2,r2
   16214:	e17fd504 	addi	r5,fp,-172
   16218:	2885883a 	add	r2,r5,r2
   1621c:	10802104 	addi	r2,r2,132
   16220:	10800017 	ldw	r2,0(r2)

			if (PCORE_VERSION_MAJOR(hdl_dac_version) < 8)
				axiadc_write(st, 0x4048, saved);

			for (chan = 0; chan < num_chan; chan++) {
				axiadc_write(st, ADI_REG_CHAN_CNTRL(chan),
   16224:	e13fde17 	ldw	r4,-136(fp)
   16228:	180b883a 	mov	r5,r3
   1622c:	100d883a 	mov	r6,r2
   16230:	001ba140 	call	1ba14 <axiadc_write>
					saved_chan_ctrl0[chan]);
				axiadc_set_pnsel(st, chan, ADC_PN9);
   16234:	e13fde17 	ldw	r4,-136(fp)
   16238:	e17fd917 	ldw	r5,-156(fp)
   1623c:	000d883a 	mov	r6,zero
   16240:	001ba580 	call	1ba58 <axiadc_set_pnsel>
				if (PCORE_VERSION_MAJOR(hdl_dac_version) > 7)
   16244:	e0bfdf17 	ldw	r2,-132(fp)
   16248:	1004d43a 	srli	r2,r2,16
   1624c:	10800230 	cmpltui	r2,r2,8
   16250:	1000131e 	bne	r2,zero,162a0 <ad9361_dig_tune+0x908>
				{
					axiadc_write(st, 0x4418 + (chan) * 0x40, saved_dsel[chan]);
   16254:	e0bfd917 	ldw	r2,-156(fp)
   16258:	100491ba 	slli	r2,r2,6
   1625c:	10910604 	addi	r2,r2,17432
   16260:	1007883a 	mov	r3,r2
   16264:	e0bfd917 	ldw	r2,-156(fp)
   16268:	1085883a 	add	r2,r2,r2
   1626c:	1085883a 	add	r2,r2,r2
   16270:	e13fd504 	addi	r4,fp,-172
   16274:	2085883a 	add	r2,r4,r2
   16278:	10801904 	addi	r2,r2,100
   1627c:	10800017 	ldw	r2,0(r2)
   16280:	e13fde17 	ldw	r4,-136(fp)
   16284:	180b883a 	mov	r5,r3
   16288:	100d883a 	mov	r6,r2
   1628c:	001ba140 	call	1ba14 <axiadc_write>
					axiadc_write(st, 0x4044, 0x1);
   16290:	e13fde17 	ldw	r4,-136(fp)
   16294:	01501104 	movi	r5,16452
   16298:	01800044 	movi	r6,1
   1629c:	001ba140 	call	1ba14 <axiadc_write>
				}

				axiadc_write(st, 0x4414 + (chan) * 0x40, saved_chan_ctrl6[chan]);
   162a0:	e0bfd917 	ldw	r2,-156(fp)
   162a4:	100491ba 	slli	r2,r2,6
   162a8:	10910504 	addi	r2,r2,17428
   162ac:	1007883a 	mov	r3,r2
   162b0:	e0bfd917 	ldw	r2,-156(fp)
   162b4:	1085883a 	add	r2,r2,r2
   162b8:	1085883a 	add	r2,r2,r2
   162bc:	e17fd504 	addi	r5,fp,-172
   162c0:	2885883a 	add	r2,r5,r2
   162c4:	10801d04 	addi	r2,r2,116
   162c8:	10800017 	ldw	r2,0(r2)
   162cc:	e13fde17 	ldw	r4,-136(fp)
   162d0:	180b883a 	mov	r5,r3
   162d4:	100d883a 	mov	r6,r2
   162d8:	001ba140 	call	1ba14 <axiadc_write>
			ad9361_bist_loopback(phy, 0);

			if (PCORE_VERSION_MAJOR(hdl_dac_version) < 8)
				axiadc_write(st, 0x4048, saved);

			for (chan = 0; chan < num_chan; chan++) {
   162dc:	e0bfd917 	ldw	r2,-156(fp)
   162e0:	10800044 	addi	r2,r2,1
   162e4:	e0bfd915 	stw	r2,-156(fp)
   162e8:	e0ffd917 	ldw	r3,-156(fp)
   162ec:	e0bfe017 	ldw	r2,-128(fp)
   162f0:	18bfc116 	blt	r3,r2,161f8 <_gp+0xfffe40d8>

				axiadc_write(st, 0x4414 + (chan) * 0x40, saved_chan_ctrl6[chan]);

			}

			if (err == -EIO) {
   162f4:	e0bfdb17 	ldw	r2,-148(fp)
   162f8:	10bffed8 	cmpnei	r2,r2,-5
   162fc:	1000181e 	bne	r2,zero,16360 <ad9361_dig_tune+0x9c8>
				ad9361_spi_write(phy->spi, REG_RX_CLOCK_DATA_DELAY,
   16300:	e0bffc17 	ldw	r2,-16(fp)
   16304:	10c00117 	ldw	r3,4(r2)
						phy->pdata->port_ctrl.rx_clk_data_delay);
   16308:	e0bffc17 	ldw	r2,-16(fp)
   1630c:	10803017 	ldw	r2,192(r2)
   16310:	108043c3 	ldbu	r2,271(r2)
				axiadc_write(st, 0x4414 + (chan) * 0x40, saved_chan_ctrl6[chan]);

			}

			if (err == -EIO) {
				ad9361_spi_write(phy->spi, REG_RX_CLOCK_DATA_DELAY,
   16314:	10803fcc 	andi	r2,r2,255
   16318:	1809883a 	mov	r4,r3
   1631c:	01400184 	movi	r5,6
   16320:	100d883a 	mov	r6,r2
   16324:	00002600 	call	260 <ad9361_spi_write>
						phy->pdata->port_ctrl.rx_clk_data_delay);

				ad9361_spi_write(phy->spi, REG_TX_CLOCK_DATA_DELAY,
   16328:	e0bffc17 	ldw	r2,-16(fp)
   1632c:	10c00117 	ldw	r3,4(r2)
						phy->pdata->port_ctrl.tx_clk_data_delay);
   16330:	e0bffc17 	ldw	r2,-16(fp)
   16334:	10803017 	ldw	r2,192(r2)
   16338:	10804403 	ldbu	r2,272(r2)

			if (err == -EIO) {
				ad9361_spi_write(phy->spi, REG_RX_CLOCK_DATA_DELAY,
						phy->pdata->port_ctrl.rx_clk_data_delay);

				ad9361_spi_write(phy->spi, REG_TX_CLOCK_DATA_DELAY,
   1633c:	10803fcc 	andi	r2,r2,255
   16340:	1809883a 	mov	r4,r3
   16344:	014001c4 	movi	r5,7
   16348:	100d883a 	mov	r6,r2
   1634c:	00002600 	call	260 <ad9361_spi_write>
						phy->pdata->port_ctrl.tx_clk_data_delay);
				if (!max_freq)
   16350:	e0bffd17 	ldw	r2,-12(fp)
   16354:	1000151e 	bne	r2,zero,163ac <ad9361_dig_tune+0xa14>
					err = 0;
   16358:	e03fdb15 	stw	zero,-148(fp)
   1635c:	00001306 	br	163ac <ad9361_dig_tune+0xa14>
			} else if (!(flags & SKIP_STORE_RESULT)) {
   16360:	e0bffe17 	ldw	r2,-8(fp)
   16364:	1080040c 	andi	r2,r2,16
   16368:	1000101e 	bne	r2,zero,163ac <ad9361_dig_tune+0xa14>
				phy->pdata->port_ctrl.rx_clk_data_delay =
   1636c:	e0bffc17 	ldw	r2,-16(fp)
   16370:	14003017 	ldw	r16,192(r2)
					ad9361_spi_read(phy->spi, REG_RX_CLOCK_DATA_DELAY);
   16374:	e0bffc17 	ldw	r2,-16(fp)
   16378:	10800117 	ldw	r2,4(r2)
   1637c:	1009883a 	mov	r4,r2
   16380:	01400184 	movi	r5,6
   16384:	00001500 	call	150 <ad9361_spi_read>
				ad9361_spi_write(phy->spi, REG_TX_CLOCK_DATA_DELAY,
						phy->pdata->port_ctrl.tx_clk_data_delay);
				if (!max_freq)
					err = 0;
			} else if (!(flags & SKIP_STORE_RESULT)) {
				phy->pdata->port_ctrl.rx_clk_data_delay =
   16388:	808043c5 	stb	r2,271(r16)
					ad9361_spi_read(phy->spi, REG_RX_CLOCK_DATA_DELAY);
				phy->pdata->port_ctrl.tx_clk_data_delay =
   1638c:	e0bffc17 	ldw	r2,-16(fp)
   16390:	14003017 	ldw	r16,192(r2)
					ad9361_spi_read(phy->spi, REG_TX_CLOCK_DATA_DELAY);
   16394:	e0bffc17 	ldw	r2,-16(fp)
   16398:	10800117 	ldw	r2,4(r2)
   1639c:	1009883a 	mov	r4,r2
   163a0:	014001c4 	movi	r5,7
   163a4:	00001500 	call	150 <ad9361_spi_read>
				if (!max_freq)
					err = 0;
			} else if (!(flags & SKIP_STORE_RESULT)) {
				phy->pdata->port_ctrl.rx_clk_data_delay =
					ad9361_spi_read(phy->spi, REG_RX_CLOCK_DATA_DELAY);
				phy->pdata->port_ctrl.tx_clk_data_delay =
   163a8:	80804405 	stb	r2,272(r16)
					ad9361_spi_read(phy->spi, REG_TX_CLOCK_DATA_DELAY);
			}

			if (!phy->pdata->fdd) {
   163ac:	e0bffc17 	ldw	r2,-16(fp)
   163b0:	10803017 	ldw	r2,192(r2)
   163b4:	10800043 	ldbu	r2,1(r2)
   163b8:	1080005c 	xori	r2,r2,1
   163bc:	10803fcc 	andi	r2,r2,255
   163c0:	10000e26 	beq	r2,zero,163fc <ad9361_dig_tune+0xa64>
				ad9361_set_ensm_mode(phy, phy->pdata->fdd, phy->pdata->ensm_pin_ctrl);
   163c4:	e0bffc17 	ldw	r2,-16(fp)
   163c8:	10803017 	ldw	r2,192(r2)
   163cc:	10800043 	ldbu	r2,1(r2)
   163d0:	10c03fcc 	andi	r3,r2,255
   163d4:	e0bffc17 	ldw	r2,-16(fp)
   163d8:	10803017 	ldw	r2,192(r2)
   163dc:	10800183 	ldbu	r2,6(r2)
   163e0:	10803fcc 	andi	r2,r2,255
   163e4:	e13ffc17 	ldw	r4,-16(fp)
   163e8:	180b883a 	mov	r5,r3
   163ec:	100d883a 	mov	r6,r2
   163f0:	000a71c0 	call	a71c <ad9361_set_ensm_mode>
				ad9361_ensm_restore_prev_state(phy);
   163f4:	e13ffc17 	ldw	r4,-16(fp)
   163f8:	00026740 	call	2674 <ad9361_ensm_restore_prev_state>
			}

			axiadc_write(st, ADI_REG_RSTN, ADI_MMCM_RSTN);
   163fc:	e13fde17 	ldw	r4,-136(fp)
   16400:	01401004 	movi	r5,64
   16404:	01800084 	movi	r6,2
   16408:	001ba140 	call	1ba14 <axiadc_write>
			axiadc_write(st, ADI_REG_RSTN, ADI_RSTN | ADI_MMCM_RSTN);
   1640c:	e13fde17 	ldw	r4,-136(fp)
   16410:	01401004 	movi	r5,64
   16414:	018000c4 	movi	r6,3
   16418:	001ba140 	call	1ba14 <axiadc_write>

			return err;
   1641c:	e0bfdb17 	ldw	r2,-148(fp)
   16420:	00000706 	br	16440 <ad9361_dig_tune+0xaa8>
	num_chan = (conv->chip_info->num_channels > 4) ? 4 :
		conv->chip_info->num_channels;

	ad9361_bist_prbs(phy, BIST_INJ_RX);

	for (t = 0; t < 2; t++) {
   16424:	e0bfda17 	ldw	r2,-152(fp)
   16428:	10800044 	addi	r2,r2,1
   1642c:	e0bfda15 	stw	r2,-152(fp)
   16430:	e0bfda17 	ldw	r2,-152(fp)
   16434:	10800090 	cmplti	r2,r2,2
   16438:	103dc71e 	bne	r2,zero,15b58 <_gp+0xfffe3a38>

			return err;
		}
	}

	return -EINVAL;
   1643c:	00bffa84 	movi	r2,-22
}
   16440:	e6ffff04 	addi	sp,fp,-4
   16444:	dfc00217 	ldw	ra,8(sp)
   16448:	df000117 	ldw	fp,4(sp)
   1644c:	dc000017 	ldw	r16,0(sp)
   16450:	dec00304 	addi	sp,sp,12
   16454:	f800283a 	ret

00016458 <ad9361_post_setup>:
* Setup the AD9361 device.
* @param phy The AD9361 state structure.
* @return 0 in case of success, negative error code otherwise.
*/
int32_t ad9361_post_setup(struct ad9361_rf_phy *phy)
{
   16458:	defff504 	addi	sp,sp,-44
   1645c:	de00012e 	bgeu	sp,et,16464 <ad9361_post_setup+0xc>
   16460:	003b68fa 	trap	3
   16464:	dfc00a15 	stw	ra,40(sp)
   16468:	df000915 	stw	fp,36(sp)
   1646c:	df000904 	addi	fp,sp,36
   16470:	e13fff15 	stw	r4,-4(fp)
	struct axiadc_converter *conv = phy->adc_conv;
   16474:	e0bfff17 	ldw	r2,-4(fp)
   16478:	10806f17 	ldw	r2,444(r2)
   1647c:	e0bff815 	stw	r2,-32(fp)
	struct axiadc_state *st = phy->adc_state;
   16480:	e0bfff17 	ldw	r2,-4(fp)
   16484:	10807017 	ldw	r2,448(r2)
   16488:	e0bff915 	stw	r2,-28(fp)
	int32_t rx2tx2 = phy->pdata->rx2tx2;
   1648c:	e0bfff17 	ldw	r2,-4(fp)
   16490:	10803017 	ldw	r2,192(r2)
   16494:	10800003 	ldbu	r2,0(r2)
   16498:	10803fcc 	andi	r2,r2,255
   1649c:	e0bffa15 	stw	r2,-24(fp)
	int32_t tmp, num_chan, flags;
	int32_t i, ret;

	num_chan = (conv->chip_info->num_channels > 4) ? 4 : conv->chip_info->num_channels;
   164a0:	e0bff817 	ldw	r2,-32(fp)
   164a4:	10800017 	ldw	r2,0(r2)
   164a8:	10800117 	ldw	r2,4(r2)
   164ac:	10c00150 	cmplti	r3,r2,5
   164b0:	1800011e 	bne	r3,zero,164b8 <ad9361_post_setup+0x60>
   164b4:	00800104 	movi	r2,4
   164b8:	e0bffb15 	stw	r2,-20(fp)

	axiadc_write(st, ADI_REG_CNTRL, rx2tx2 ? 0 : ADI_R1_MODE);
   164bc:	e0bffa17 	ldw	r2,-24(fp)
   164c0:	10000226 	beq	r2,zero,164cc <ad9361_post_setup+0x74>
   164c4:	0005883a 	mov	r2,zero
   164c8:	00000106 	br	164d0 <ad9361_post_setup+0x78>
   164cc:	00800104 	movi	r2,4
   164d0:	e13ff917 	ldw	r4,-28(fp)
   164d4:	01401104 	movi	r5,68
   164d8:	100d883a 	mov	r6,r2
   164dc:	001ba140 	call	1ba14 <axiadc_write>
	tmp = axiadc_read(st, 0x4048);
   164e0:	e13ff917 	ldw	r4,-28(fp)
   164e4:	01501204 	movi	r5,16456
   164e8:	001b9d00 	call	1b9d0 <axiadc_read>
   164ec:	e0bffc15 	stw	r2,-16(fp)

	if (!rx2tx2) {
   164f0:	e0bffa17 	ldw	r2,-24(fp)
   164f4:	10000b1e 	bne	r2,zero,16524 <ad9361_post_setup+0xcc>
		axiadc_write(st, 0x4048, tmp | BIT(5)); /* R1_MODE */
   164f8:	e0bffc17 	ldw	r2,-16(fp)
   164fc:	10800814 	ori	r2,r2,32
   16500:	e13ff917 	ldw	r4,-28(fp)
   16504:	01501204 	movi	r5,16456
   16508:	100d883a 	mov	r6,r2
   1650c:	001ba140 	call	1ba14 <axiadc_write>
		axiadc_write(st, 0x404c, 1); /* RATE */
   16510:	e13ff917 	ldw	r4,-28(fp)
   16514:	01501304 	movi	r5,16460
   16518:	01800044 	movi	r6,1
   1651c:	001ba140 	call	1ba14 <axiadc_write>
   16520:	00000d06 	br	16558 <ad9361_post_setup+0x100>
	}
	else {
		tmp &= ~BIT(5);
   16524:	e0fffc17 	ldw	r3,-16(fp)
   16528:	00bff7c4 	movi	r2,-33
   1652c:	1884703a 	and	r2,r3,r2
   16530:	e0bffc15 	stw	r2,-16(fp)
		axiadc_write(st, 0x4048, tmp);
   16534:	e0bffc17 	ldw	r2,-16(fp)
   16538:	e13ff917 	ldw	r4,-28(fp)
   1653c:	01501204 	movi	r5,16456
   16540:	100d883a 	mov	r6,r2
   16544:	001ba140 	call	1ba14 <axiadc_write>
		axiadc_write(st, 0x404c, 3); /* RATE */
   16548:	e13ff917 	ldw	r4,-28(fp)
   1654c:	01501304 	movi	r5,16460
   16550:	018000c4 	movi	r6,3
   16554:	001ba140 	call	1ba14 <axiadc_write>

#ifdef ALTERA_PLATFORM
	axiadc_write(st, 0x404c, 1);
#endif

	for (i = 0; i < num_chan; i++) {
   16558:	e03ff715 	stw	zero,-36(fp)
   1655c:	00001f06 	br	165dc <ad9361_post_setup+0x184>
		axiadc_write(st, ADI_REG_CHAN_CNTRL_1(i),
   16560:	e0bff717 	ldw	r2,-36(fp)
   16564:	100491ba 	slli	r2,r2,6
   16568:	10810404 	addi	r2,r2,1040
   1656c:	e13ff917 	ldw	r4,-28(fp)
   16570:	100b883a 	mov	r5,r2
   16574:	000d883a 	mov	r6,zero
   16578:	001ba140 	call	1ba14 <axiadc_write>
			ADI_DCFILT_OFFSET(0));
		axiadc_write(st, ADI_REG_CHAN_CNTRL_2(i),
   1657c:	e0bff717 	ldw	r2,-36(fp)
   16580:	100491ba 	slli	r2,r2,6
   16584:	10810504 	addi	r2,r2,1044
   16588:	1007883a 	mov	r3,r2
			(i & 1) ? 0x00004000 : 0x40000000);
   1658c:	e0bff717 	ldw	r2,-36(fp)
   16590:	1080004c 	andi	r2,r2,1
#endif

	for (i = 0; i < num_chan; i++) {
		axiadc_write(st, ADI_REG_CHAN_CNTRL_1(i),
			ADI_DCFILT_OFFSET(0));
		axiadc_write(st, ADI_REG_CHAN_CNTRL_2(i),
   16594:	10000226 	beq	r2,zero,165a0 <ad9361_post_setup+0x148>
   16598:	00900004 	movi	r2,16384
   1659c:	00000106 	br	165a4 <ad9361_post_setup+0x14c>
   165a0:	00900034 	movhi	r2,16384
   165a4:	e13ff917 	ldw	r4,-28(fp)
   165a8:	180b883a 	mov	r5,r3
   165ac:	100d883a 	mov	r6,r2
   165b0:	001ba140 	call	1ba14 <axiadc_write>
			(i & 1) ? 0x00004000 : 0x40000000);
		axiadc_write(st, ADI_REG_CHAN_CNTRL(i),
   165b4:	e0bff717 	ldw	r2,-36(fp)
   165b8:	10800404 	addi	r2,r2,16
   165bc:	100491ba 	slli	r2,r2,6
   165c0:	e13ff917 	ldw	r4,-28(fp)
   165c4:	100b883a 	mov	r5,r2
   165c8:	01809444 	movi	r6,593
   165cc:	001ba140 	call	1ba14 <axiadc_write>

#ifdef ALTERA_PLATFORM
	axiadc_write(st, 0x404c, 1);
#endif

	for (i = 0; i < num_chan; i++) {
   165d0:	e0bff717 	ldw	r2,-36(fp)
   165d4:	10800044 	addi	r2,r2,1
   165d8:	e0bff715 	stw	r2,-36(fp)
   165dc:	e0fff717 	ldw	r3,-36(fp)
   165e0:	e0bffb17 	ldw	r2,-20(fp)
   165e4:	18bfde16 	blt	r3,r2,16560 <_gp+0xfffe4440>
		axiadc_write(st, ADI_REG_CHAN_CNTRL(i),
			ADI_FORMAT_SIGNEXT | ADI_FORMAT_ENABLE |
			ADI_ENABLE | ADI_IQCOR_ENB);
	}

	flags = BE_MOREVERBOSE; //0x0;
   165e8:	00800084 	movi	r2,2
   165ec:	e0bffd15 	stw	r2,-12(fp)

	ret = ad9361_dig_tune(phy, ((conv->chip_info->num_channels > 4) ||
   165f0:	e0bff817 	ldw	r2,-32(fp)
   165f4:	10800017 	ldw	r2,0(r2)
   165f8:	10800117 	ldw	r2,4(r2)
   165fc:	10800148 	cmpgei	r2,r2,5
   16600:	1000041e 	bne	r2,zero,16614 <ad9361_post_setup+0x1bc>
		axiadc_read(st, 0x0004)) ? 0 : 61440000, flags);
   16604:	e13ff917 	ldw	r4,-28(fp)
   16608:	01400104 	movi	r5,4
   1660c:	001b9d00 	call	1b9d0 <axiadc_read>
			ADI_ENABLE | ADI_IQCOR_ENB);
	}

	flags = BE_MOREVERBOSE; //0x0;

	ret = ad9361_dig_tune(phy, ((conv->chip_info->num_channels > 4) ||
   16610:	10000226 	beq	r2,zero,1661c <ad9361_post_setup+0x1c4>
   16614:	0005883a 	mov	r2,zero
   16618:	00000206 	br	16624 <ad9361_post_setup+0x1cc>
   1661c:	0080eab4 	movhi	r2,938
   16620:	10a00004 	addi	r2,r2,-32768
   16624:	e0fffd17 	ldw	r3,-12(fp)
   16628:	e13fff17 	ldw	r4,-4(fp)
   1662c:	100b883a 	mov	r5,r2
   16630:	180d883a 	mov	r6,r3
   16634:	00159980 	call	15998 <ad9361_dig_tune>
   16638:	e0bffe15 	stw	r2,-8(fp)
		axiadc_read(st, 0x0004)) ? 0 : 61440000, flags);
	if (ret < 0)
   1663c:	e0bffe17 	ldw	r2,-8(fp)
   16640:	1000020e 	bge	r2,zero,1664c <ad9361_post_setup+0x1f4>
		return ret;
   16644:	e0bffe17 	ldw	r2,-8(fp)
   16648:	00002706 	br	166e8 <ad9361_post_setup+0x290>

	if (flags & (DO_IDELAY | DO_ODELAY)) {
   1664c:	e0bffd17 	ldw	r2,-12(fp)
   16650:	1080030c 	andi	r2,r2,12
   16654:	10001326 	beq	r2,zero,166a4 <ad9361_post_setup+0x24c>
		ret = ad9361_dig_tune(phy, (axiadc_read(st, ADI_REG_ID)) ?
   16658:	e13ff917 	ldw	r4,-28(fp)
   1665c:	01400104 	movi	r5,4
   16660:	001b9d00 	call	1b9d0 <axiadc_read>
   16664:	10000226 	beq	r2,zero,16670 <ad9361_post_setup+0x218>
   16668:	0005883a 	mov	r2,zero
   1666c:	00000206 	br	16678 <ad9361_post_setup+0x220>
   16670:	0080eab4 	movhi	r2,938
   16674:	10a00004 	addi	r2,r2,-32768
			0 : 61440000, flags & BE_VERBOSE);
   16678:	e0fffd17 	ldw	r3,-12(fp)
   1667c:	18c0004c 	andi	r3,r3,1
		axiadc_read(st, 0x0004)) ? 0 : 61440000, flags);
	if (ret < 0)
		return ret;

	if (flags & (DO_IDELAY | DO_ODELAY)) {
		ret = ad9361_dig_tune(phy, (axiadc_read(st, ADI_REG_ID)) ?
   16680:	e13fff17 	ldw	r4,-4(fp)
   16684:	100b883a 	mov	r5,r2
   16688:	180d883a 	mov	r6,r3
   1668c:	00159980 	call	15998 <ad9361_dig_tune>
   16690:	e0bffe15 	stw	r2,-8(fp)
			0 : 61440000, flags & BE_VERBOSE);
		if (ret < 0)
   16694:	e0bffe17 	ldw	r2,-8(fp)
   16698:	1000020e 	bge	r2,zero,166a4 <ad9361_post_setup+0x24c>
			return ret;
   1669c:	e0bffe17 	ldw	r2,-8(fp)
   166a0:	00001106 	br	166e8 <ad9361_post_setup+0x290>
	}

	ret = ad9361_set_trx_clock_chain(phy,
					 phy->pdata->rx_path_clks,
   166a4:	e0bfff17 	ldw	r2,-4(fp)
   166a8:	10803017 	ldw	r2,192(r2)
   166ac:	10c00c04 	addi	r3,r2,48
					 phy->pdata->tx_path_clks);
   166b0:	e0bfff17 	ldw	r2,-4(fp)
   166b4:	10803017 	ldw	r2,192(r2)
   166b8:	10801204 	addi	r2,r2,72
			0 : 61440000, flags & BE_VERBOSE);
		if (ret < 0)
			return ret;
	}

	ret = ad9361_set_trx_clock_chain(phy,
   166bc:	e13fff17 	ldw	r4,-4(fp)
   166c0:	180b883a 	mov	r5,r3
   166c4:	100d883a 	mov	r6,r2
   166c8:	00099d80 	call	99d8 <ad9361_set_trx_clock_chain>
   166cc:	e0bffe15 	stw	r2,-8(fp)
					 phy->pdata->rx_path_clks,
					 phy->pdata->tx_path_clks);

	ad9361_ensm_force_state(phy, ENSM_STATE_ALERT);
   166d0:	e13fff17 	ldw	r4,-4(fp)
   166d4:	01400144 	movi	r5,5
   166d8:	00024740 	call	2474 <ad9361_ensm_force_state>
	ad9361_ensm_restore_prev_state(phy);
   166dc:	e13fff17 	ldw	r4,-4(fp)
   166e0:	00026740 	call	2674 <ad9361_ensm_restore_prev_state>

	return ret;
   166e4:	e0bffe17 	ldw	r2,-8(fp)
}
   166e8:	e037883a 	mov	sp,fp
   166ec:	dfc00117 	ldw	ra,4(sp)
   166f0:	df000017 	ldw	fp,0(sp)
   166f4:	dec00204 	addi	sp,sp,8
   166f8:	f800283a 	ret

000166fc <show_invalid_param_message>:
 * @brief Show the invalid parameter message.
 *
 * @return None.
*******************************************************************************/
void show_invalid_param_message(unsigned char cmd_no)
{
   166fc:	defffd04 	addi	sp,sp,-12
   16700:	de00012e 	bgeu	sp,et,16708 <show_invalid_param_message+0xc>
   16704:	003b68fa 	trap	3
   16708:	dfc00215 	stw	ra,8(sp)
   1670c:	df000115 	stw	fp,4(sp)
   16710:	df000104 	addi	fp,sp,4
   16714:	2005883a 	mov	r2,r4
   16718:	e0bfff05 	stb	r2,-4(fp)
	console_print("Invalid parameter!\n");
   1671c:	010000f4 	movhi	r4,3
   16720:	21235f04 	addi	r4,r4,-29316
   16724:	00188580 	call	18858 <console_print>
	console_print("%s  - %s\n", (char*)cmd_list[cmd_no].name, (char*)cmd_list[cmd_no].description);
   16728:	e0ffff03 	ldbu	r3,-4(fp)
   1672c:	008000f4 	movhi	r2,3
   16730:	10a5e804 	addi	r2,r2,-26720
   16734:	1806913a 	slli	r3,r3,4
   16738:	10c5883a 	add	r2,r2,r3
   1673c:	11400017 	ldw	r5,0(r2)
   16740:	e0ffff03 	ldbu	r3,-4(fp)
   16744:	008000f4 	movhi	r2,3
   16748:	10a5e804 	addi	r2,r2,-26720
   1674c:	1806913a 	slli	r3,r3,4
   16750:	18c00104 	addi	r3,r3,4
   16754:	10c5883a 	add	r2,r2,r3
   16758:	10800017 	ldw	r2,0(r2)
   1675c:	010000f4 	movhi	r4,3
   16760:	21236404 	addi	r4,r4,-29296
   16764:	100d883a 	mov	r6,r2
   16768:	00188580 	call	18858 <console_print>
	console_print("Example: %s\n", (char*)cmd_list[cmd_no].example);
   1676c:	e0ffff03 	ldbu	r3,-4(fp)
   16770:	008000f4 	movhi	r2,3
   16774:	10a5e804 	addi	r2,r2,-26720
   16778:	1806913a 	slli	r3,r3,4
   1677c:	18c00204 	addi	r3,r3,8
   16780:	10c5883a 	add	r2,r2,r3
   16784:	10800017 	ldw	r2,0(r2)
   16788:	010000f4 	movhi	r4,3
   1678c:	21236704 	addi	r4,r4,-29284
   16790:	100b883a 	mov	r5,r2
   16794:	00188580 	call	18858 <console_print>
}
   16798:	e037883a 	mov	sp,fp
   1679c:	dfc00117 	ldw	ra,4(sp)
   167a0:	df000017 	ldw	fp,0(sp)
   167a4:	dec00204 	addi	sp,sp,8
   167a8:	f800283a 	ret

000167ac <get_help>:
 * @brief Displays all available commands.
 *
 * @return None.
*******************************************************************************/
void get_help(double* param, char param_no) // "help?" command
{
   167ac:	defffb04 	addi	sp,sp,-20
   167b0:	de00012e 	bgeu	sp,et,167b8 <get_help+0xc>
   167b4:	003b68fa 	trap	3
   167b8:	dfc00415 	stw	ra,16(sp)
   167bc:	df000315 	stw	fp,12(sp)
   167c0:	df000304 	addi	fp,sp,12
   167c4:	e13ffe15 	stw	r4,-8(fp)
   167c8:	2805883a 	mov	r2,r5
   167cc:	e0bfff05 	stb	r2,-4(fp)
	unsigned char display_cmd;

	console_print("Available commands:\n");
   167d0:	010000f4 	movhi	r4,3
   167d4:	21236b04 	addi	r4,r4,-29268
   167d8:	00188580 	call	18858 <console_print>
	for(display_cmd = 0; display_cmd < cmd_no; display_cmd++)
   167dc:	e03ffd05 	stb	zero,-12(fp)
   167e0:	00001406 	br	16834 <get_help+0x88>
	{
		console_print("%s  - %s\n", (char*)cmd_list[display_cmd].name,
   167e4:	e0fffd03 	ldbu	r3,-12(fp)
   167e8:	008000f4 	movhi	r2,3
   167ec:	10a5e804 	addi	r2,r2,-26720
   167f0:	1806913a 	slli	r3,r3,4
   167f4:	10c5883a 	add	r2,r2,r3
   167f8:	11400017 	ldw	r5,0(r2)
   167fc:	e0fffd03 	ldbu	r3,-12(fp)
								  (char*)cmd_list[display_cmd].description);
   16800:	008000f4 	movhi	r2,3
   16804:	10a5e804 	addi	r2,r2,-26720
   16808:	1806913a 	slli	r3,r3,4
   1680c:	18c00104 	addi	r3,r3,4
   16810:	10c5883a 	add	r2,r2,r3
   16814:	10800017 	ldw	r2,0(r2)
	unsigned char display_cmd;

	console_print("Available commands:\n");
	for(display_cmd = 0; display_cmd < cmd_no; display_cmd++)
	{
		console_print("%s  - %s\n", (char*)cmd_list[display_cmd].name,
   16818:	010000f4 	movhi	r4,3
   1681c:	21236404 	addi	r4,r4,-29296
   16820:	100d883a 	mov	r6,r2
   16824:	00188580 	call	18858 <console_print>
void get_help(double* param, char param_no) // "help?" command
{
	unsigned char display_cmd;

	console_print("Available commands:\n");
	for(display_cmd = 0; display_cmd < cmd_no; display_cmd++)
   16828:	e0bffd03 	ldbu	r2,-12(fp)
   1682c:	10800044 	addi	r2,r2,1
   16830:	e0bffd05 	stb	r2,-12(fp)
   16834:	e0fffd03 	ldbu	r3,-12(fp)
   16838:	00800d84 	movi	r2,54
   1683c:	10803fcc 	andi	r2,r2,255
   16840:	1080201c 	xori	r2,r2,128
   16844:	10bfe004 	addi	r2,r2,-128
   16848:	18bfe616 	blt	r3,r2,167e4 <_gp+0xfffe46c4>
	{
		console_print("%s  - %s\n", (char*)cmd_list[display_cmd].name,
								  (char*)cmd_list[display_cmd].description);
	}
}
   1684c:	e037883a 	mov	sp,fp
   16850:	dfc00117 	ldw	ra,4(sp)
   16854:	df000017 	ldw	fp,0(sp)
   16858:	dec00204 	addi	sp,sp,8
   1685c:	f800283a 	ret

00016860 <get_register>:
 * @brief Displays all available commands.
 *
 * @return None.
*******************************************************************************/
void get_register(double* param, char param_no) // "register?" command
{
   16860:	defffb04 	addi	sp,sp,-20
   16864:	de00012e 	bgeu	sp,et,1686c <get_register+0xc>
   16868:	003b68fa 	trap	3
   1686c:	dfc00415 	stw	ra,16(sp)
   16870:	df000315 	stw	fp,12(sp)
   16874:	df000304 	addi	fp,sp,12
   16878:	e13ffe15 	stw	r4,-8(fp)
   1687c:	2805883a 	mov	r2,r5
   16880:	e0bfff05 	stb	r2,-4(fp)
	uint16_t reg_addr;
	uint8_t reg_val;
	struct spi_device spi;

	if(param_no >= 1)
   16884:	e0bfff07 	ldb	r2,-4(fp)
   16888:	0080160e 	bge	zero,r2,168e4 <get_register+0x84>
	{
		spi.id_no = 0;
   1688c:	e03ffdc5 	stb	zero,-9(fp)
		reg_addr = param[0];
   16890:	e13ffe17 	ldw	r4,-8(fp)
   16894:	20800017 	ldw	r2,0(r4)
   16898:	20c00117 	ldw	r3,4(r4)
   1689c:	1009883a 	mov	r4,r2
   168a0:	180b883a 	mov	r5,r3
   168a4:	001c9fc0 	call	1c9fc <__fixunsdfsi>
   168a8:	e0bffd0d 	sth	r2,-12(fp)
		reg_val = ad9361_spi_read(&spi, reg_addr);
   168ac:	e0bffd0b 	ldhu	r2,-12(fp)
   168b0:	e0fffdc4 	addi	r3,fp,-9
   168b4:	1809883a 	mov	r4,r3
   168b8:	100b883a 	mov	r5,r2
   168bc:	00001500 	call	150 <ad9361_spi_read>
   168c0:	e0bffd85 	stb	r2,-10(fp)
		console_print("register[0x%x]=0x%x\n", reg_addr, reg_val);
   168c4:	e0fffd0b 	ldhu	r3,-12(fp)
   168c8:	e0bffd83 	ldbu	r2,-10(fp)
   168cc:	010000f4 	movhi	r4,3
   168d0:	21237104 	addi	r4,r4,-29244
   168d4:	180b883a 	mov	r5,r3
   168d8:	100d883a 	mov	r6,r2
   168dc:	00188580 	call	18858 <console_print>
   168e0:	00000206 	br	168ec <get_register+0x8c>
	}
	else
		show_invalid_param_message(1);
   168e4:	01000044 	movi	r4,1
   168e8:	00166fc0 	call	166fc <show_invalid_param_message>
}
   168ec:	e037883a 	mov	sp,fp
   168f0:	dfc00117 	ldw	ra,4(sp)
   168f4:	df000017 	ldw	fp,0(sp)
   168f8:	dec00204 	addi	sp,sp,8
   168fc:	f800283a 	ret

00016900 <get_tx_lo_freq>:
 * @brief Gets current TX LO frequency [MHz].
 *
 * @return None.
*******************************************************************************/
void get_tx_lo_freq(double* param, char param_no) // "tx_lo_freq?" command
{
   16900:	defffa04 	addi	sp,sp,-24
   16904:	de00012e 	bgeu	sp,et,1690c <get_tx_lo_freq+0xc>
   16908:	003b68fa 	trap	3
   1690c:	dfc00515 	stw	ra,20(sp)
   16910:	df000415 	stw	fp,16(sp)
   16914:	df000404 	addi	fp,sp,16
   16918:	e13ffe15 	stw	r4,-8(fp)
   1691c:	2805883a 	mov	r2,r5
   16920:	e0bfff05 	stb	r2,-4(fp)
	uint64_t lo_freq_hz;

	ad9361_get_tx_lo_freq(ad9361_phy, &lo_freq_hz);
   16924:	008000f4 	movhi	r2,3
   16928:	10aada04 	addi	r2,r2,-21656
   1692c:	10800017 	ldw	r2,0(r2)
   16930:	1009883a 	mov	r4,r2
   16934:	e17ffc04 	addi	r5,fp,-16
   16938:	0013d780 	call	13d78 <ad9361_get_tx_lo_freq>
	lo_freq_hz /= 1000000;
   1693c:	e17ffc17 	ldw	r5,-16(fp)
   16940:	e1bffd17 	ldw	r6,-12(fp)
   16944:	008003f4 	movhi	r2,15
   16948:	10909004 	addi	r2,r2,16960
   1694c:	0007883a 	mov	r3,zero
   16950:	2809883a 	mov	r4,r5
   16954:	300b883a 	mov	r5,r6
   16958:	100d883a 	mov	r6,r2
   1695c:	180f883a 	mov	r7,r3
   16960:	001cb100 	call	1cb10 <__udivdi3>
   16964:	1009883a 	mov	r4,r2
   16968:	180b883a 	mov	r5,r3
   1696c:	2005883a 	mov	r2,r4
   16970:	2807883a 	mov	r3,r5
   16974:	e0bffc15 	stw	r2,-16(fp)
   16978:	e0fffd15 	stw	r3,-12(fp)
	console_print("tx_lo_freq=%d\n", (uint32_t)lo_freq_hz);
   1697c:	e0bffc17 	ldw	r2,-16(fp)
   16980:	e0fffd17 	ldw	r3,-12(fp)
   16984:	010000f4 	movhi	r4,3
   16988:	21237704 	addi	r4,r4,-29220
   1698c:	100b883a 	mov	r5,r2
   16990:	00188580 	call	18858 <console_print>
}
   16994:	e037883a 	mov	sp,fp
   16998:	dfc00117 	ldw	ra,4(sp)
   1699c:	df000017 	ldw	fp,0(sp)
   169a0:	dec00204 	addi	sp,sp,8
   169a4:	f800283a 	ret

000169a8 <set_tx_lo_freq>:
 * @brief Sets the TX LO frequency [MHz].
 *
 * @return None.
*******************************************************************************/
void set_tx_lo_freq(double* param, char param_no) // "tx_lo_freq=" command
{
   169a8:	defffa04 	addi	sp,sp,-24
   169ac:	de00012e 	bgeu	sp,et,169b4 <set_tx_lo_freq+0xc>
   169b0:	003b68fa 	trap	3
   169b4:	dfc00515 	stw	ra,20(sp)
   169b8:	df000415 	stw	fp,16(sp)
   169bc:	df000404 	addi	fp,sp,16
   169c0:	e13ffe15 	stw	r4,-8(fp)
   169c4:	2805883a 	mov	r2,r5
   169c8:	e0bfff05 	stb	r2,-4(fp)
	uint64_t lo_freq_hz;

	if(param_no >= 1)
   169cc:	e0bfff07 	ldb	r2,-4(fp)
   169d0:	0080300e 	bge	zero,r2,16a94 <set_tx_lo_freq+0xec>
	{
		lo_freq_hz = param[0];
   169d4:	e13ffe17 	ldw	r4,-8(fp)
   169d8:	20800017 	ldw	r2,0(r4)
   169dc:	20c00117 	ldw	r3,4(r4)
   169e0:	1009883a 	mov	r4,r2
   169e4:	180b883a 	mov	r5,r3
   169e8:	001ca780 	call	1ca78 <__fixunsdfdi>
   169ec:	1009883a 	mov	r4,r2
   169f0:	180b883a 	mov	r5,r3
   169f4:	e13ffc15 	stw	r4,-16(fp)
   169f8:	e17ffd15 	stw	r5,-12(fp)
		lo_freq_hz *= 1000000;
   169fc:	008003f4 	movhi	r2,15
   16a00:	10909004 	addi	r2,r2,16960
   16a04:	0007883a 	mov	r3,zero
   16a08:	e13ffc17 	ldw	r4,-16(fp)
   16a0c:	e17ffd17 	ldw	r5,-12(fp)
   16a10:	100d883a 	mov	r6,r2
   16a14:	180f883a 	mov	r7,r3
   16a18:	001c9940 	call	1c994 <__muldi3>
   16a1c:	1009883a 	mov	r4,r2
   16a20:	180b883a 	mov	r5,r3
   16a24:	e13ffc15 	stw	r4,-16(fp)
   16a28:	e17ffd15 	stw	r5,-12(fp)
		ad9361_set_tx_lo_freq(ad9361_phy, lo_freq_hz);
   16a2c:	008000f4 	movhi	r2,3
   16a30:	10aada04 	addi	r2,r2,-21656
   16a34:	10800017 	ldw	r2,0(r2)
   16a38:	1009883a 	mov	r4,r2
   16a3c:	e17ffc17 	ldw	r5,-16(fp)
   16a40:	e1bffd17 	ldw	r6,-12(fp)
   16a44:	0013d0c0 	call	13d0c <ad9361_set_tx_lo_freq>
		lo_freq_hz /= 1000000;
   16a48:	e17ffc17 	ldw	r5,-16(fp)
   16a4c:	e1bffd17 	ldw	r6,-12(fp)
   16a50:	008003f4 	movhi	r2,15
   16a54:	10909004 	addi	r2,r2,16960
   16a58:	0007883a 	mov	r3,zero
   16a5c:	2809883a 	mov	r4,r5
   16a60:	300b883a 	mov	r5,r6
   16a64:	100d883a 	mov	r6,r2
   16a68:	180f883a 	mov	r7,r3
   16a6c:	001cb100 	call	1cb10 <__udivdi3>
   16a70:	1009883a 	mov	r4,r2
   16a74:	180b883a 	mov	r5,r3
   16a78:	e13ffc15 	stw	r4,-16(fp)
   16a7c:	e17ffd15 	stw	r5,-12(fp)
		console_print("tx_lo_freq=%d\n", (uint32_t)lo_freq_hz);
   16a80:	e0bffc17 	ldw	r2,-16(fp)
   16a84:	010000f4 	movhi	r4,3
   16a88:	21237704 	addi	r4,r4,-29220
   16a8c:	100b883a 	mov	r5,r2
   16a90:	00188580 	call	18858 <console_print>
	}
}
   16a94:	e037883a 	mov	sp,fp
   16a98:	dfc00117 	ldw	ra,4(sp)
   16a9c:	df000017 	ldw	fp,0(sp)
   16aa0:	dec00204 	addi	sp,sp,8
   16aa4:	f800283a 	ret

00016aa8 <get_tx_samp_freq>:
 * @brief Gets current sampling frequency [Hz].
 *
 * @return None.
*******************************************************************************/
void get_tx_samp_freq(double* param, char param_no) // "tx_samp_freq?" command
{
   16aa8:	defffb04 	addi	sp,sp,-20
   16aac:	de00012e 	bgeu	sp,et,16ab4 <get_tx_samp_freq+0xc>
   16ab0:	003b68fa 	trap	3
   16ab4:	dfc00415 	stw	ra,16(sp)
   16ab8:	df000315 	stw	fp,12(sp)
   16abc:	df000304 	addi	fp,sp,12
   16ac0:	e13ffe15 	stw	r4,-8(fp)
   16ac4:	2805883a 	mov	r2,r5
   16ac8:	e0bfff05 	stb	r2,-4(fp)
	uint32_t sampling_freq_hz;

	ad9361_get_tx_sampling_freq(ad9361_phy, &sampling_freq_hz);
   16acc:	008000f4 	movhi	r2,3
   16ad0:	10aada04 	addi	r2,r2,-21656
   16ad4:	10800017 	ldw	r2,0(r2)
   16ad8:	1009883a 	mov	r4,r2
   16adc:	e17ffd04 	addi	r5,fp,-12
   16ae0:	0013cb40 	call	13cb4 <ad9361_get_tx_sampling_freq>
	console_print("tx_samp_freq=%d\n", sampling_freq_hz);
   16ae4:	e0bffd17 	ldw	r2,-12(fp)
   16ae8:	010000f4 	movhi	r4,3
   16aec:	21237b04 	addi	r4,r4,-29204
   16af0:	100b883a 	mov	r5,r2
   16af4:	00188580 	call	18858 <console_print>
}
   16af8:	e037883a 	mov	sp,fp
   16afc:	dfc00117 	ldw	ra,4(sp)
   16b00:	df000017 	ldw	fp,0(sp)
   16b04:	dec00204 	addi	sp,sp,8
   16b08:	f800283a 	ret

00016b0c <set_tx_samp_freq>:
 * @brief Sets the sampling frequency [Hz].
 *
 * @return None.
*******************************************************************************/
void set_tx_samp_freq(double* param, char param_no) // "tx_samp_freq=" command
{
   16b0c:	defffb04 	addi	sp,sp,-20
   16b10:	de00012e 	bgeu	sp,et,16b18 <set_tx_samp_freq+0xc>
   16b14:	003b68fa 	trap	3
   16b18:	dfc00415 	stw	ra,16(sp)
   16b1c:	df000315 	stw	fp,12(sp)
   16b20:	df000304 	addi	fp,sp,12
   16b24:	e13ffe15 	stw	r4,-8(fp)
   16b28:	2805883a 	mov	r2,r5
   16b2c:	e0bfff05 	stb	r2,-4(fp)
	uint32_t sampling_freq_hz;

	if(param_no >= 1)
   16b30:	e0bfff07 	ldb	r2,-4(fp)
   16b34:	00801b0e 	bge	zero,r2,16ba4 <set_tx_samp_freq+0x98>
	{
		sampling_freq_hz = (uint32_t)param[0];
   16b38:	e13ffe17 	ldw	r4,-8(fp)
   16b3c:	20800017 	ldw	r2,0(r4)
   16b40:	20c00117 	ldw	r3,4(r4)
   16b44:	1009883a 	mov	r4,r2
   16b48:	180b883a 	mov	r5,r3
   16b4c:	001c9fc0 	call	1c9fc <__fixunsdfsi>
   16b50:	e0bffd15 	stw	r2,-12(fp)
		ad9361_set_tx_sampling_freq(ad9361_phy, sampling_freq_hz);
   16b54:	008000f4 	movhi	r2,3
   16b58:	10aada04 	addi	r2,r2,-21656
   16b5c:	10c00017 	ldw	r3,0(r2)
   16b60:	e0bffd17 	ldw	r2,-12(fp)
   16b64:	1809883a 	mov	r4,r3
   16b68:	100b883a 	mov	r5,r2
   16b6c:	0013c080 	call	13c08 <ad9361_set_tx_sampling_freq>
		ad9361_get_tx_sampling_freq(ad9361_phy, &sampling_freq_hz);
   16b70:	008000f4 	movhi	r2,3
   16b74:	10aada04 	addi	r2,r2,-21656
   16b78:	10800017 	ldw	r2,0(r2)
   16b7c:	1009883a 	mov	r4,r2
   16b80:	e17ffd04 	addi	r5,fp,-12
   16b84:	0013cb40 	call	13cb4 <ad9361_get_tx_sampling_freq>
		dds_update();
   16b88:	001b2280 	call	1b228 <dds_update>
		console_print("tx_samp_freq=%d\n", sampling_freq_hz);
   16b8c:	e0bffd17 	ldw	r2,-12(fp)
   16b90:	010000f4 	movhi	r4,3
   16b94:	21237b04 	addi	r4,r4,-29204
   16b98:	100b883a 	mov	r5,r2
   16b9c:	00188580 	call	18858 <console_print>
   16ba0:	00000206 	br	16bac <set_tx_samp_freq+0xa0>
	}
	else
		show_invalid_param_message(1);
   16ba4:	01000044 	movi	r4,1
   16ba8:	00166fc0 	call	166fc <show_invalid_param_message>
}
   16bac:	e037883a 	mov	sp,fp
   16bb0:	dfc00117 	ldw	ra,4(sp)
   16bb4:	df000017 	ldw	fp,0(sp)
   16bb8:	dec00204 	addi	sp,sp,8
   16bbc:	f800283a 	ret

00016bc0 <get_tx_rf_bandwidth>:
 * @brief Gets current TX RF bandwidth [Hz].
 *
 * @return None.
*******************************************************************************/
void get_tx_rf_bandwidth(double* param, char param_no) // "tx_rf_bandwidth?" command
{
   16bc0:	defffb04 	addi	sp,sp,-20
   16bc4:	de00012e 	bgeu	sp,et,16bcc <get_tx_rf_bandwidth+0xc>
   16bc8:	003b68fa 	trap	3
   16bcc:	dfc00415 	stw	ra,16(sp)
   16bd0:	df000315 	stw	fp,12(sp)
   16bd4:	df000304 	addi	fp,sp,12
   16bd8:	e13ffe15 	stw	r4,-8(fp)
   16bdc:	2805883a 	mov	r2,r5
   16be0:	e0bfff05 	stb	r2,-4(fp)
	uint32_t bandwidth_hz;

	ad9361_get_tx_rf_bandwidth(ad9361_phy, &bandwidth_hz);
   16be4:	008000f4 	movhi	r2,3
   16be8:	10aada04 	addi	r2,r2,-21656
   16bec:	10800017 	ldw	r2,0(r2)
   16bf0:	1009883a 	mov	r4,r2
   16bf4:	e17ffd04 	addi	r5,fp,-12
   16bf8:	0013bc80 	call	13bc8 <ad9361_get_tx_rf_bandwidth>
	console_print("tx_rf_bandwidth=%d\n", bandwidth_hz);
   16bfc:	e0bffd17 	ldw	r2,-12(fp)
   16c00:	010000f4 	movhi	r4,3
   16c04:	21238004 	addi	r4,r4,-29184
   16c08:	100b883a 	mov	r5,r2
   16c0c:	00188580 	call	18858 <console_print>
}
   16c10:	e037883a 	mov	sp,fp
   16c14:	dfc00117 	ldw	ra,4(sp)
   16c18:	df000017 	ldw	fp,0(sp)
   16c1c:	dec00204 	addi	sp,sp,8
   16c20:	f800283a 	ret

00016c24 <set_tx_rf_bandwidth>:
 * @brief Sets the TX RF bandwidth [Hz].
 *
 * @return None.
*******************************************************************************/
void set_tx_rf_bandwidth(double* param, char param_no) // "tx_rf_bandwidth=" command
{
   16c24:	defffb04 	addi	sp,sp,-20
   16c28:	de00012e 	bgeu	sp,et,16c30 <set_tx_rf_bandwidth+0xc>
   16c2c:	003b68fa 	trap	3
   16c30:	dfc00415 	stw	ra,16(sp)
   16c34:	df000315 	stw	fp,12(sp)
   16c38:	df000304 	addi	fp,sp,12
   16c3c:	e13ffe15 	stw	r4,-8(fp)
   16c40:	2805883a 	mov	r2,r5
   16c44:	e0bfff05 	stb	r2,-4(fp)
	uint32_t bandwidth_hz;

	if(param_no >= 1)
   16c48:	e0bfff07 	ldb	r2,-4(fp)
   16c4c:	00800e0e 	bge	zero,r2,16c88 <set_tx_rf_bandwidth+0x64>
	{
		bandwidth_hz = param[0];
   16c50:	e13ffe17 	ldw	r4,-8(fp)
   16c54:	20800017 	ldw	r2,0(r4)
   16c58:	20c00117 	ldw	r3,4(r4)
   16c5c:	1009883a 	mov	r4,r2
   16c60:	180b883a 	mov	r5,r3
   16c64:	001c9fc0 	call	1c9fc <__fixunsdfsi>
   16c68:	e0bffd15 	stw	r2,-12(fp)
		ad9361_set_tx_rf_bandwidth(ad9361_phy, bandwidth_hz);
   16c6c:	008000f4 	movhi	r2,3
   16c70:	10aada04 	addi	r2,r2,-21656
   16c74:	10800017 	ldw	r2,0(r2)
   16c78:	1009883a 	mov	r4,r2
   16c7c:	e17ffd17 	ldw	r5,-12(fp)
   16c80:	0013b580 	call	13b58 <ad9361_set_tx_rf_bandwidth>
   16c84:	00000206 	br	16c90 <set_tx_rf_bandwidth+0x6c>
	}
	else
		show_invalid_param_message(1);
   16c88:	01000044 	movi	r4,1
   16c8c:	00166fc0 	call	166fc <show_invalid_param_message>
}
   16c90:	e037883a 	mov	sp,fp
   16c94:	dfc00117 	ldw	ra,4(sp)
   16c98:	df000017 	ldw	fp,0(sp)
   16c9c:	dec00204 	addi	sp,sp,8
   16ca0:	f800283a 	ret

00016ca4 <get_tx1_attenuation>:
 * @brief Gets current TX1 attenuation [mdB].
 *
 * @return None.
*******************************************************************************/
void get_tx1_attenuation(double* param, char param_no) // "tx1_attenuation?" command
{
   16ca4:	defffb04 	addi	sp,sp,-20
   16ca8:	de00012e 	bgeu	sp,et,16cb0 <get_tx1_attenuation+0xc>
   16cac:	003b68fa 	trap	3
   16cb0:	dfc00415 	stw	ra,16(sp)
   16cb4:	df000315 	stw	fp,12(sp)
   16cb8:	df000304 	addi	fp,sp,12
   16cbc:	e13ffe15 	stw	r4,-8(fp)
   16cc0:	2805883a 	mov	r2,r5
   16cc4:	e0bfff05 	stb	r2,-4(fp)
	uint32_t attenuation_mdb;

	ad9361_get_tx_attenuation(ad9361_phy, 0, &attenuation_mdb);
   16cc8:	008000f4 	movhi	r2,3
   16ccc:	10aada04 	addi	r2,r2,-21656
   16cd0:	10800017 	ldw	r2,0(r2)
   16cd4:	1009883a 	mov	r4,r2
   16cd8:	000b883a 	mov	r5,zero
   16cdc:	e1bffd04 	addi	r6,fp,-12
   16ce0:	0013a940 	call	13a94 <ad9361_get_tx_attenuation>
	console_print("tx1_attenuation=%d\n", attenuation_mdb);
   16ce4:	e0bffd17 	ldw	r2,-12(fp)
   16ce8:	010000f4 	movhi	r4,3
   16cec:	21238504 	addi	r4,r4,-29164
   16cf0:	100b883a 	mov	r5,r2
   16cf4:	00188580 	call	18858 <console_print>
}
   16cf8:	e037883a 	mov	sp,fp
   16cfc:	dfc00117 	ldw	ra,4(sp)
   16d00:	df000017 	ldw	fp,0(sp)
   16d04:	dec00204 	addi	sp,sp,8
   16d08:	f800283a 	ret

00016d0c <set_tx1_attenuation>:
 * @brief Sets the TX1 attenuation [mdB].
 *
 * @return None.
*******************************************************************************/
void set_tx1_attenuation(double* param, char param_no) // "tx1_attenuation=" command
{
   16d0c:	defffb04 	addi	sp,sp,-20
   16d10:	de00012e 	bgeu	sp,et,16d18 <set_tx1_attenuation+0xc>
   16d14:	003b68fa 	trap	3
   16d18:	dfc00415 	stw	ra,16(sp)
   16d1c:	df000315 	stw	fp,12(sp)
   16d20:	df000304 	addi	fp,sp,12
   16d24:	e13ffe15 	stw	r4,-8(fp)
   16d28:	2805883a 	mov	r2,r5
   16d2c:	e0bfff05 	stb	r2,-4(fp)
	uint32_t attenuation_mdb;

	if(param_no >= 1)
   16d30:	e0bfff07 	ldb	r2,-4(fp)
   16d34:	0080130e 	bge	zero,r2,16d84 <set_tx1_attenuation+0x78>
	{
		attenuation_mdb = param[0];
   16d38:	e13ffe17 	ldw	r4,-8(fp)
   16d3c:	20800017 	ldw	r2,0(r4)
   16d40:	20c00117 	ldw	r3,4(r4)
   16d44:	1009883a 	mov	r4,r2
   16d48:	180b883a 	mov	r5,r3
   16d4c:	001c9fc0 	call	1c9fc <__fixunsdfsi>
   16d50:	e0bffd15 	stw	r2,-12(fp)
		ad9361_set_tx_attenuation(ad9361_phy, 0, attenuation_mdb);
   16d54:	008000f4 	movhi	r2,3
   16d58:	10aada04 	addi	r2,r2,-21656
   16d5c:	10800017 	ldw	r2,0(r2)
   16d60:	1009883a 	mov	r4,r2
   16d64:	000b883a 	mov	r5,zero
   16d68:	e1bffd17 	ldw	r6,-12(fp)
   16d6c:	00139a80 	call	139a8 <ad9361_set_tx_attenuation>
		console_print("tx1_attenuation=%d\n", attenuation_mdb);
   16d70:	010000f4 	movhi	r4,3
   16d74:	21238504 	addi	r4,r4,-29164
   16d78:	e17ffd17 	ldw	r5,-12(fp)
   16d7c:	00188580 	call	18858 <console_print>
   16d80:	00000206 	br	16d8c <set_tx1_attenuation+0x80>
	}
	else
		show_invalid_param_message(1);
   16d84:	01000044 	movi	r4,1
   16d88:	00166fc0 	call	166fc <show_invalid_param_message>
}
   16d8c:	e037883a 	mov	sp,fp
   16d90:	dfc00117 	ldw	ra,4(sp)
   16d94:	df000017 	ldw	fp,0(sp)
   16d98:	dec00204 	addi	sp,sp,8
   16d9c:	f800283a 	ret

00016da0 <get_tx2_attenuation>:
 * @brief Gets current TX2 attenuation [mdB].
 *
 * @return None.
*******************************************************************************/
void get_tx2_attenuation(double* param, char param_no) // "tx1_attenuation?" command
{
   16da0:	defffb04 	addi	sp,sp,-20
   16da4:	de00012e 	bgeu	sp,et,16dac <get_tx2_attenuation+0xc>
   16da8:	003b68fa 	trap	3
   16dac:	dfc00415 	stw	ra,16(sp)
   16db0:	df000315 	stw	fp,12(sp)
   16db4:	df000304 	addi	fp,sp,12
   16db8:	e13ffe15 	stw	r4,-8(fp)
   16dbc:	2805883a 	mov	r2,r5
   16dc0:	e0bfff05 	stb	r2,-4(fp)
	uint32_t attenuation_mdb;

	ad9361_get_tx_attenuation(ad9361_phy, 1, &attenuation_mdb);
   16dc4:	008000f4 	movhi	r2,3
   16dc8:	10aada04 	addi	r2,r2,-21656
   16dcc:	10800017 	ldw	r2,0(r2)
   16dd0:	1009883a 	mov	r4,r2
   16dd4:	01400044 	movi	r5,1
   16dd8:	e1bffd04 	addi	r6,fp,-12
   16ddc:	0013a940 	call	13a94 <ad9361_get_tx_attenuation>
	console_print("tx2_attenuation=%d\n", attenuation_mdb);
   16de0:	e0bffd17 	ldw	r2,-12(fp)
   16de4:	010000f4 	movhi	r4,3
   16de8:	21238a04 	addi	r4,r4,-29144
   16dec:	100b883a 	mov	r5,r2
   16df0:	00188580 	call	18858 <console_print>
}
   16df4:	e037883a 	mov	sp,fp
   16df8:	dfc00117 	ldw	ra,4(sp)
   16dfc:	df000017 	ldw	fp,0(sp)
   16e00:	dec00204 	addi	sp,sp,8
   16e04:	f800283a 	ret

00016e08 <set_tx2_attenuation>:
 * @brief Sets the TX2 attenuation [mdB].
 *
 * @return None.
*******************************************************************************/
void set_tx2_attenuation(double* param, char param_no) // "tx1_attenuation=" command
{
   16e08:	defffb04 	addi	sp,sp,-20
   16e0c:	de00012e 	bgeu	sp,et,16e14 <set_tx2_attenuation+0xc>
   16e10:	003b68fa 	trap	3
   16e14:	dfc00415 	stw	ra,16(sp)
   16e18:	df000315 	stw	fp,12(sp)
   16e1c:	df000304 	addi	fp,sp,12
   16e20:	e13ffe15 	stw	r4,-8(fp)
   16e24:	2805883a 	mov	r2,r5
   16e28:	e0bfff05 	stb	r2,-4(fp)
	uint32_t attenuation_mdb;

	if(param_no >= 1)
   16e2c:	e0bfff07 	ldb	r2,-4(fp)
   16e30:	0080130e 	bge	zero,r2,16e80 <set_tx2_attenuation+0x78>
	{
		attenuation_mdb = param[0];
   16e34:	e13ffe17 	ldw	r4,-8(fp)
   16e38:	20800017 	ldw	r2,0(r4)
   16e3c:	20c00117 	ldw	r3,4(r4)
   16e40:	1009883a 	mov	r4,r2
   16e44:	180b883a 	mov	r5,r3
   16e48:	001c9fc0 	call	1c9fc <__fixunsdfsi>
   16e4c:	e0bffd15 	stw	r2,-12(fp)
		ad9361_set_tx_attenuation(ad9361_phy, 1, attenuation_mdb);
   16e50:	008000f4 	movhi	r2,3
   16e54:	10aada04 	addi	r2,r2,-21656
   16e58:	10800017 	ldw	r2,0(r2)
   16e5c:	1009883a 	mov	r4,r2
   16e60:	01400044 	movi	r5,1
   16e64:	e1bffd17 	ldw	r6,-12(fp)
   16e68:	00139a80 	call	139a8 <ad9361_set_tx_attenuation>
		console_print("tx2_attenuation=%d\n", attenuation_mdb);
   16e6c:	010000f4 	movhi	r4,3
   16e70:	21238a04 	addi	r4,r4,-29144
   16e74:	e17ffd17 	ldw	r5,-12(fp)
   16e78:	00188580 	call	18858 <console_print>
   16e7c:	00000206 	br	16e88 <set_tx2_attenuation+0x80>
	}
	else
		show_invalid_param_message(1);
   16e80:	01000044 	movi	r4,1
   16e84:	00166fc0 	call	166fc <show_invalid_param_message>
}
   16e88:	e037883a 	mov	sp,fp
   16e8c:	dfc00117 	ldw	ra,4(sp)
   16e90:	df000017 	ldw	fp,0(sp)
   16e94:	dec00204 	addi	sp,sp,8
   16e98:	f800283a 	ret

00016e9c <get_tx_fir_en>:
 * @brief Gets current TX FIR state.
 *
 * @return None.
*******************************************************************************/
void get_tx_fir_en(double* param, char param_no) // "tx_fir_en?" command
{
   16e9c:	defffb04 	addi	sp,sp,-20
   16ea0:	de00012e 	bgeu	sp,et,16ea8 <get_tx_fir_en+0xc>
   16ea4:	003b68fa 	trap	3
   16ea8:	dfc00415 	stw	ra,16(sp)
   16eac:	df000315 	stw	fp,12(sp)
   16eb0:	df000304 	addi	fp,sp,12
   16eb4:	e13ffe15 	stw	r4,-8(fp)
   16eb8:	2805883a 	mov	r2,r5
   16ebc:	e0bfff05 	stb	r2,-4(fp)
	uint8_t en_dis;

	ad9361_get_tx_fir_en_dis(ad9361_phy, &en_dis);
   16ec0:	008000f4 	movhi	r2,3
   16ec4:	10aada04 	addi	r2,r2,-21656
   16ec8:	10800017 	ldw	r2,0(r2)
   16ecc:	1009883a 	mov	r4,r2
   16ed0:	e17ffd04 	addi	r5,fp,-12
   16ed4:	001418c0 	call	1418c <ad9361_get_tx_fir_en_dis>
	console_print("tx_fir_en=%d\n", en_dis);
   16ed8:	e0bffd03 	ldbu	r2,-12(fp)
   16edc:	10803fcc 	andi	r2,r2,255
   16ee0:	010000f4 	movhi	r4,3
   16ee4:	21238f04 	addi	r4,r4,-29124
   16ee8:	100b883a 	mov	r5,r2
   16eec:	00188580 	call	18858 <console_print>
}
   16ef0:	e037883a 	mov	sp,fp
   16ef4:	dfc00117 	ldw	ra,4(sp)
   16ef8:	df000017 	ldw	fp,0(sp)
   16efc:	dec00204 	addi	sp,sp,8
   16f00:	f800283a 	ret

00016f04 <set_tx_fir_en>:
 * @brief Sets the TX FIR state.
 *
 * @return None.
*******************************************************************************/
void set_tx_fir_en(double* param, char param_no) // "tx_fir_en=" command
{
   16f04:	defffb04 	addi	sp,sp,-20
   16f08:	de00012e 	bgeu	sp,et,16f10 <set_tx_fir_en+0xc>
   16f0c:	003b68fa 	trap	3
   16f10:	dfc00415 	stw	ra,16(sp)
   16f14:	df000315 	stw	fp,12(sp)
   16f18:	df000304 	addi	fp,sp,12
   16f1c:	e13ffe15 	stw	r4,-8(fp)
   16f20:	2805883a 	mov	r2,r5
   16f24:	e0bfff05 	stb	r2,-4(fp)
	uint8_t en_dis;

	if(param_no >= 1)
   16f28:	e0bfff07 	ldb	r2,-4(fp)
   16f2c:	0080140e 	bge	zero,r2,16f80 <set_tx_fir_en+0x7c>
	{
		en_dis = param[0];
   16f30:	e13ffe17 	ldw	r4,-8(fp)
   16f34:	20800017 	ldw	r2,0(r4)
   16f38:	20c00117 	ldw	r3,4(r4)
   16f3c:	1009883a 	mov	r4,r2
   16f40:	180b883a 	mov	r5,r3
   16f44:	001c9fc0 	call	1c9fc <__fixunsdfsi>
   16f48:	e0bffd05 	stb	r2,-12(fp)
		ad9361_set_tx_fir_en_dis(ad9361_phy, en_dis);
   16f4c:	008000f4 	movhi	r2,3
   16f50:	10aada04 	addi	r2,r2,-21656
   16f54:	10c00017 	ldw	r3,0(r2)
   16f58:	e0bffd03 	ldbu	r2,-12(fp)
   16f5c:	1809883a 	mov	r4,r3
   16f60:	100b883a 	mov	r5,r2
   16f64:	00140f40 	call	140f4 <ad9361_set_tx_fir_en_dis>
		console_print("tx_fir_en=%d\n", en_dis);
   16f68:	e0bffd03 	ldbu	r2,-12(fp)
   16f6c:	010000f4 	movhi	r4,3
   16f70:	21238f04 	addi	r4,r4,-29124
   16f74:	100b883a 	mov	r5,r2
   16f78:	00188580 	call	18858 <console_print>
   16f7c:	00000206 	br	16f88 <set_tx_fir_en+0x84>
	}
	else
		show_invalid_param_message(1);
   16f80:	01000044 	movi	r4,1
   16f84:	00166fc0 	call	166fc <show_invalid_param_message>
}
   16f88:	e037883a 	mov	sp,fp
   16f8c:	dfc00117 	ldw	ra,4(sp)
   16f90:	df000017 	ldw	fp,0(sp)
   16f94:	dec00204 	addi	sp,sp,8
   16f98:	f800283a 	ret

00016f9c <get_rx_lo_freq>:
 * @brief Gets current RX LO frequency [MHz].
 *
 * @return None.
*******************************************************************************/
void get_rx_lo_freq(double* param, char param_no) // "rx_lo_freq?" command
{
   16f9c:	defffa04 	addi	sp,sp,-24
   16fa0:	de00012e 	bgeu	sp,et,16fa8 <get_rx_lo_freq+0xc>
   16fa4:	003b68fa 	trap	3
   16fa8:	dfc00515 	stw	ra,20(sp)
   16fac:	df000415 	stw	fp,16(sp)
   16fb0:	df000404 	addi	fp,sp,16
   16fb4:	e13ffe15 	stw	r4,-8(fp)
   16fb8:	2805883a 	mov	r2,r5
   16fbc:	e0bfff05 	stb	r2,-4(fp)
	uint64_t lo_freq_hz;

	ad9361_get_rx_lo_freq(ad9361_phy, &lo_freq_hz);
   16fc0:	008000f4 	movhi	r2,3
   16fc4:	10aada04 	addi	r2,r2,-21656
   16fc8:	10800017 	ldw	r2,0(r2)
   16fcc:	1009883a 	mov	r4,r2
   16fd0:	e17ffc04 	addi	r5,fp,-16
   16fd4:	0012e8c0 	call	12e8c <ad9361_get_rx_lo_freq>
	lo_freq_hz /= 1000000;
   16fd8:	e17ffc17 	ldw	r5,-16(fp)
   16fdc:	e1bffd17 	ldw	r6,-12(fp)
   16fe0:	008003f4 	movhi	r2,15
   16fe4:	10909004 	addi	r2,r2,16960
   16fe8:	0007883a 	mov	r3,zero
   16fec:	2809883a 	mov	r4,r5
   16ff0:	300b883a 	mov	r5,r6
   16ff4:	100d883a 	mov	r6,r2
   16ff8:	180f883a 	mov	r7,r3
   16ffc:	001cb100 	call	1cb10 <__udivdi3>
   17000:	1009883a 	mov	r4,r2
   17004:	180b883a 	mov	r5,r3
   17008:	2005883a 	mov	r2,r4
   1700c:	2807883a 	mov	r3,r5
   17010:	e0bffc15 	stw	r2,-16(fp)
   17014:	e0fffd15 	stw	r3,-12(fp)
	console_print("rx_lo_freq=%d\n", (uint32_t)lo_freq_hz);
   17018:	e0bffc17 	ldw	r2,-16(fp)
   1701c:	e0fffd17 	ldw	r3,-12(fp)
   17020:	010000f4 	movhi	r4,3
   17024:	21239304 	addi	r4,r4,-29108
   17028:	100b883a 	mov	r5,r2
   1702c:	00188580 	call	18858 <console_print>
}
   17030:	e037883a 	mov	sp,fp
   17034:	dfc00117 	ldw	ra,4(sp)
   17038:	df000017 	ldw	fp,0(sp)
   1703c:	dec00204 	addi	sp,sp,8
   17040:	f800283a 	ret

00017044 <set_rx_lo_freq>:
 * @brief Sets the RX LO frequency [MHz].
 *
 * @return None.
*******************************************************************************/
void set_rx_lo_freq(double* param, char param_no) // "rx_lo_freq=" command
{
   17044:	defffa04 	addi	sp,sp,-24
   17048:	de00012e 	bgeu	sp,et,17050 <set_rx_lo_freq+0xc>
   1704c:	003b68fa 	trap	3
   17050:	dfc00515 	stw	ra,20(sp)
   17054:	df000415 	stw	fp,16(sp)
   17058:	df000404 	addi	fp,sp,16
   1705c:	e13ffe15 	stw	r4,-8(fp)
   17060:	2805883a 	mov	r2,r5
   17064:	e0bfff05 	stb	r2,-4(fp)
	uint64_t lo_freq_hz;

	if(param_no >= 1)
   17068:	e0bfff07 	ldb	r2,-4(fp)
   1706c:	0080300e 	bge	zero,r2,17130 <set_rx_lo_freq+0xec>
	{
		lo_freq_hz = param[0];
   17070:	e13ffe17 	ldw	r4,-8(fp)
   17074:	20800017 	ldw	r2,0(r4)
   17078:	20c00117 	ldw	r3,4(r4)
   1707c:	1009883a 	mov	r4,r2
   17080:	180b883a 	mov	r5,r3
   17084:	001ca780 	call	1ca78 <__fixunsdfdi>
   17088:	1009883a 	mov	r4,r2
   1708c:	180b883a 	mov	r5,r3
   17090:	e13ffc15 	stw	r4,-16(fp)
   17094:	e17ffd15 	stw	r5,-12(fp)
		lo_freq_hz *= 1000000;
   17098:	008003f4 	movhi	r2,15
   1709c:	10909004 	addi	r2,r2,16960
   170a0:	0007883a 	mov	r3,zero
   170a4:	e13ffc17 	ldw	r4,-16(fp)
   170a8:	e17ffd17 	ldw	r5,-12(fp)
   170ac:	100d883a 	mov	r6,r2
   170b0:	180f883a 	mov	r7,r3
   170b4:	001c9940 	call	1c994 <__muldi3>
   170b8:	1009883a 	mov	r4,r2
   170bc:	180b883a 	mov	r5,r3
   170c0:	e13ffc15 	stw	r4,-16(fp)
   170c4:	e17ffd15 	stw	r5,-12(fp)
		ad9361_set_rx_lo_freq(ad9361_phy, lo_freq_hz);
   170c8:	008000f4 	movhi	r2,3
   170cc:	10aada04 	addi	r2,r2,-21656
   170d0:	10800017 	ldw	r2,0(r2)
   170d4:	1009883a 	mov	r4,r2
   170d8:	e17ffc17 	ldw	r5,-16(fp)
   170dc:	e1bffd17 	ldw	r6,-12(fp)
   170e0:	0012e200 	call	12e20 <ad9361_set_rx_lo_freq>
		lo_freq_hz /= 1000000;
   170e4:	e17ffc17 	ldw	r5,-16(fp)
   170e8:	e1bffd17 	ldw	r6,-12(fp)
   170ec:	008003f4 	movhi	r2,15
   170f0:	10909004 	addi	r2,r2,16960
   170f4:	0007883a 	mov	r3,zero
   170f8:	2809883a 	mov	r4,r5
   170fc:	300b883a 	mov	r5,r6
   17100:	100d883a 	mov	r6,r2
   17104:	180f883a 	mov	r7,r3
   17108:	001cb100 	call	1cb10 <__udivdi3>
   1710c:	1009883a 	mov	r4,r2
   17110:	180b883a 	mov	r5,r3
   17114:	e13ffc15 	stw	r4,-16(fp)
   17118:	e17ffd15 	stw	r5,-12(fp)
		console_print("rx_lo_freq=%d\n", (uint32_t)lo_freq_hz);
   1711c:	e0bffc17 	ldw	r2,-16(fp)
   17120:	010000f4 	movhi	r4,3
   17124:	21239304 	addi	r4,r4,-29108
   17128:	100b883a 	mov	r5,r2
   1712c:	00188580 	call	18858 <console_print>
	}
}
   17130:	e037883a 	mov	sp,fp
   17134:	dfc00117 	ldw	ra,4(sp)
   17138:	df000017 	ldw	fp,0(sp)
   1713c:	dec00204 	addi	sp,sp,8
   17140:	f800283a 	ret

00017144 <get_rx_samp_freq>:
 * @brief Gets current RX sampling frequency [Hz].
 *
 * @return None.
*******************************************************************************/
void get_rx_samp_freq(double* param, char param_no) // "rx_samp_freq?" command
{
   17144:	defffb04 	addi	sp,sp,-20
   17148:	de00012e 	bgeu	sp,et,17150 <get_rx_samp_freq+0xc>
   1714c:	003b68fa 	trap	3
   17150:	dfc00415 	stw	ra,16(sp)
   17154:	df000315 	stw	fp,12(sp)
   17158:	df000304 	addi	fp,sp,12
   1715c:	e13ffe15 	stw	r4,-8(fp)
   17160:	2805883a 	mov	r2,r5
   17164:	e0bfff05 	stb	r2,-4(fp)
	uint32_t sampling_freq_hz;

	ad9361_get_rx_sampling_freq(ad9361_phy, &sampling_freq_hz);
   17168:	008000f4 	movhi	r2,3
   1716c:	10aada04 	addi	r2,r2,-21656
   17170:	10800017 	ldw	r2,0(r2)
   17174:	1009883a 	mov	r4,r2
   17178:	e17ffd04 	addi	r5,fp,-12
   1717c:	0012dc80 	call	12dc8 <ad9361_get_rx_sampling_freq>
	console_print("rx_samp_freq=%d\n", sampling_freq_hz);
   17180:	e0bffd17 	ldw	r2,-12(fp)
   17184:	010000f4 	movhi	r4,3
   17188:	21239704 	addi	r4,r4,-29092
   1718c:	100b883a 	mov	r5,r2
   17190:	00188580 	call	18858 <console_print>
}
   17194:	e037883a 	mov	sp,fp
   17198:	dfc00117 	ldw	ra,4(sp)
   1719c:	df000017 	ldw	fp,0(sp)
   171a0:	dec00204 	addi	sp,sp,8
   171a4:	f800283a 	ret

000171a8 <set_rx_samp_freq>:
 * @brief Sets the RX sampling frequency [Hz].
 *
 * @return None.
*******************************************************************************/
void set_rx_samp_freq(double* param, char param_no) // "rx_samp_freq=" command
{
   171a8:	defffb04 	addi	sp,sp,-20
   171ac:	de00012e 	bgeu	sp,et,171b4 <set_rx_samp_freq+0xc>
   171b0:	003b68fa 	trap	3
   171b4:	dfc00415 	stw	ra,16(sp)
   171b8:	df000315 	stw	fp,12(sp)
   171bc:	df000304 	addi	fp,sp,12
   171c0:	e13ffe15 	stw	r4,-8(fp)
   171c4:	2805883a 	mov	r2,r5
   171c8:	e0bfff05 	stb	r2,-4(fp)
	uint32_t sampling_freq_hz;

	if(param_no >= 1)
   171cc:	e0bfff07 	ldb	r2,-4(fp)
   171d0:	00801b0e 	bge	zero,r2,17240 <set_rx_samp_freq+0x98>
	{
		sampling_freq_hz = (uint32_t)param[0];
   171d4:	e13ffe17 	ldw	r4,-8(fp)
   171d8:	20800017 	ldw	r2,0(r4)
   171dc:	20c00117 	ldw	r3,4(r4)
   171e0:	1009883a 	mov	r4,r2
   171e4:	180b883a 	mov	r5,r3
   171e8:	001c9fc0 	call	1c9fc <__fixunsdfsi>
   171ec:	e0bffd15 	stw	r2,-12(fp)
		ad9361_set_rx_sampling_freq(ad9361_phy, sampling_freq_hz);
   171f0:	008000f4 	movhi	r2,3
   171f4:	10aada04 	addi	r2,r2,-21656
   171f8:	10c00017 	ldw	r3,0(r2)
   171fc:	e0bffd17 	ldw	r2,-12(fp)
   17200:	1809883a 	mov	r4,r3
   17204:	100b883a 	mov	r5,r2
   17208:	0012d1c0 	call	12d1c <ad9361_set_rx_sampling_freq>
		ad9361_get_rx_sampling_freq(ad9361_phy, &sampling_freq_hz);
   1720c:	008000f4 	movhi	r2,3
   17210:	10aada04 	addi	r2,r2,-21656
   17214:	10800017 	ldw	r2,0(r2)
   17218:	1009883a 	mov	r4,r2
   1721c:	e17ffd04 	addi	r5,fp,-12
   17220:	0012dc80 	call	12dc8 <ad9361_get_rx_sampling_freq>
		dds_update();
   17224:	001b2280 	call	1b228 <dds_update>
		console_print("rx_samp_freq=%d\n", sampling_freq_hz);
   17228:	e0bffd17 	ldw	r2,-12(fp)
   1722c:	010000f4 	movhi	r4,3
   17230:	21239704 	addi	r4,r4,-29092
   17234:	100b883a 	mov	r5,r2
   17238:	00188580 	call	18858 <console_print>
   1723c:	00000206 	br	17248 <set_rx_samp_freq+0xa0>
	}
	else
		show_invalid_param_message(1);
   17240:	01000044 	movi	r4,1
   17244:	00166fc0 	call	166fc <show_invalid_param_message>
}
   17248:	e037883a 	mov	sp,fp
   1724c:	dfc00117 	ldw	ra,4(sp)
   17250:	df000017 	ldw	fp,0(sp)
   17254:	dec00204 	addi	sp,sp,8
   17258:	f800283a 	ret

0001725c <get_rx_rf_bandwidth>:
 * @brief Gets current RX RF bandwidth [Hz].
 *
 * @return None.
*******************************************************************************/
void get_rx_rf_bandwidth(double* param, char param_no) // "rx_rf_bandwidth?" command
{
   1725c:	defffb04 	addi	sp,sp,-20
   17260:	de00012e 	bgeu	sp,et,17268 <get_rx_rf_bandwidth+0xc>
   17264:	003b68fa 	trap	3
   17268:	dfc00415 	stw	ra,16(sp)
   1726c:	df000315 	stw	fp,12(sp)
   17270:	df000304 	addi	fp,sp,12
   17274:	e13ffe15 	stw	r4,-8(fp)
   17278:	2805883a 	mov	r2,r5
   1727c:	e0bfff05 	stb	r2,-4(fp)
	uint32_t bandwidth_hz;

	ad9361_get_rx_rf_bandwidth(ad9361_phy, &bandwidth_hz);
   17280:	008000f4 	movhi	r2,3
   17284:	10aada04 	addi	r2,r2,-21656
   17288:	10800017 	ldw	r2,0(r2)
   1728c:	1009883a 	mov	r4,r2
   17290:	e17ffd04 	addi	r5,fp,-12
   17294:	0012cdc0 	call	12cdc <ad9361_get_rx_rf_bandwidth>
	console_print("rx_rf_bandwidth=%d\n", bandwidth_hz);
   17298:	e0bffd17 	ldw	r2,-12(fp)
   1729c:	010000f4 	movhi	r4,3
   172a0:	21239c04 	addi	r4,r4,-29072
   172a4:	100b883a 	mov	r5,r2
   172a8:	00188580 	call	18858 <console_print>
}
   172ac:	e037883a 	mov	sp,fp
   172b0:	dfc00117 	ldw	ra,4(sp)
   172b4:	df000017 	ldw	fp,0(sp)
   172b8:	dec00204 	addi	sp,sp,8
   172bc:	f800283a 	ret

000172c0 <set_rx_rf_bandwidth>:
 * @brief Sets the RX RF bandwidth [Hz].
 *
 * @return None.
*******************************************************************************/
void set_rx_rf_bandwidth(double* param, char param_no) // "rx_rf_bandwidth=" command
{
   172c0:	defffb04 	addi	sp,sp,-20
   172c4:	de00012e 	bgeu	sp,et,172cc <set_rx_rf_bandwidth+0xc>
   172c8:	003b68fa 	trap	3
   172cc:	dfc00415 	stw	ra,16(sp)
   172d0:	df000315 	stw	fp,12(sp)
   172d4:	df000304 	addi	fp,sp,12
   172d8:	e13ffe15 	stw	r4,-8(fp)
   172dc:	2805883a 	mov	r2,r5
   172e0:	e0bfff05 	stb	r2,-4(fp)
	uint32_t bandwidth_hz;

	if(param_no >= 1)
   172e4:	e0bfff07 	ldb	r2,-4(fp)
   172e8:	0080120e 	bge	zero,r2,17334 <set_rx_rf_bandwidth+0x74>
	{
		bandwidth_hz = param[0];
   172ec:	e13ffe17 	ldw	r4,-8(fp)
   172f0:	20800017 	ldw	r2,0(r4)
   172f4:	20c00117 	ldw	r3,4(r4)
   172f8:	1009883a 	mov	r4,r2
   172fc:	180b883a 	mov	r5,r3
   17300:	001c9fc0 	call	1c9fc <__fixunsdfsi>
   17304:	e0bffd15 	stw	r2,-12(fp)
		ad9361_set_rx_rf_bandwidth(ad9361_phy, bandwidth_hz);
   17308:	008000f4 	movhi	r2,3
   1730c:	10aada04 	addi	r2,r2,-21656
   17310:	10800017 	ldw	r2,0(r2)
   17314:	1009883a 	mov	r4,r2
   17318:	e17ffd17 	ldw	r5,-12(fp)
   1731c:	0012c6c0 	call	12c6c <ad9361_set_rx_rf_bandwidth>
		console_print("rx_rf_bandwidth=%d\n", bandwidth_hz);
   17320:	010000f4 	movhi	r4,3
   17324:	21239c04 	addi	r4,r4,-29072
   17328:	e17ffd17 	ldw	r5,-12(fp)
   1732c:	00188580 	call	18858 <console_print>
   17330:	00000206 	br	1733c <set_rx_rf_bandwidth+0x7c>
	}
	else
		show_invalid_param_message(1);
   17334:	01000044 	movi	r4,1
   17338:	00166fc0 	call	166fc <show_invalid_param_message>
}
   1733c:	e037883a 	mov	sp,fp
   17340:	dfc00117 	ldw	ra,4(sp)
   17344:	df000017 	ldw	fp,0(sp)
   17348:	dec00204 	addi	sp,sp,8
   1734c:	f800283a 	ret

00017350 <get_rx1_gc_mode>:
 * @brief Gets current RX1 GC mode.
 *
 * @return None.
*******************************************************************************/
void get_rx1_gc_mode(double* param, char param_no) // "rx1_gc_mode?" command
{
   17350:	defffb04 	addi	sp,sp,-20
   17354:	de00012e 	bgeu	sp,et,1735c <get_rx1_gc_mode+0xc>
   17358:	003b68fa 	trap	3
   1735c:	dfc00415 	stw	ra,16(sp)
   17360:	df000315 	stw	fp,12(sp)
   17364:	df000304 	addi	fp,sp,12
   17368:	e13ffe15 	stw	r4,-8(fp)
   1736c:	2805883a 	mov	r2,r5
   17370:	e0bfff05 	stb	r2,-4(fp)
	uint8_t gc_mode;

	ad9361_get_rx_gain_control_mode(ad9361_phy, 0, &gc_mode);
   17374:	008000f4 	movhi	r2,3
   17378:	10aada04 	addi	r2,r2,-21656
   1737c:	10800017 	ldw	r2,0(r2)
   17380:	1009883a 	mov	r4,r2
   17384:	000b883a 	mov	r5,zero
   17388:	e1bffd04 	addi	r6,fp,-12
   1738c:	00130f80 	call	130f8 <ad9361_get_rx_gain_control_mode>
	console_print("rx1_gc_mode=%d\n", gc_mode);
   17390:	e0bffd03 	ldbu	r2,-12(fp)
   17394:	10803fcc 	andi	r2,r2,255
   17398:	010000f4 	movhi	r4,3
   1739c:	2123a104 	addi	r4,r4,-29052
   173a0:	100b883a 	mov	r5,r2
   173a4:	00188580 	call	18858 <console_print>
}
   173a8:	e037883a 	mov	sp,fp
   173ac:	dfc00117 	ldw	ra,4(sp)
   173b0:	df000017 	ldw	fp,0(sp)
   173b4:	dec00204 	addi	sp,sp,8
   173b8:	f800283a 	ret

000173bc <set_rx1_gc_mode>:
 * @brief Sets the RX1 GC mode.
 *
 * @return None.
*******************************************************************************/
void set_rx1_gc_mode(double* param, char param_no) // "rx1_gc_mode=" command
{
   173bc:	defffb04 	addi	sp,sp,-20
   173c0:	de00012e 	bgeu	sp,et,173c8 <set_rx1_gc_mode+0xc>
   173c4:	003b68fa 	trap	3
   173c8:	dfc00415 	stw	ra,16(sp)
   173cc:	df000315 	stw	fp,12(sp)
   173d0:	df000304 	addi	fp,sp,12
   173d4:	e13ffe15 	stw	r4,-8(fp)
   173d8:	2805883a 	mov	r2,r5
   173dc:	e0bfff05 	stb	r2,-4(fp)
	uint8_t gc_mode;

	if(param_no >= 1)
   173e0:	e0bfff07 	ldb	r2,-4(fp)
   173e4:	0080150e 	bge	zero,r2,1743c <set_rx1_gc_mode+0x80>
	{
		gc_mode = param[0];
   173e8:	e13ffe17 	ldw	r4,-8(fp)
   173ec:	20800017 	ldw	r2,0(r4)
   173f0:	20c00117 	ldw	r3,4(r4)
   173f4:	1009883a 	mov	r4,r2
   173f8:	180b883a 	mov	r5,r3
   173fc:	001c9fc0 	call	1c9fc <__fixunsdfsi>
   17400:	e0bffd05 	stb	r2,-12(fp)
		ad9361_set_rx_gain_control_mode(ad9361_phy, 0, gc_mode);
   17404:	008000f4 	movhi	r2,3
   17408:	10aada04 	addi	r2,r2,-21656
   1740c:	10c00017 	ldw	r3,0(r2)
   17410:	e0bffd03 	ldbu	r2,-12(fp)
   17414:	1809883a 	mov	r4,r3
   17418:	000b883a 	mov	r5,zero
   1741c:	100d883a 	mov	r6,r2
   17420:	00130180 	call	13018 <ad9361_set_rx_gain_control_mode>
		console_print("rx1_gc_mode=%d\n", gc_mode);
   17424:	e0bffd03 	ldbu	r2,-12(fp)
   17428:	010000f4 	movhi	r4,3
   1742c:	2123a104 	addi	r4,r4,-29052
   17430:	100b883a 	mov	r5,r2
   17434:	00188580 	call	18858 <console_print>
   17438:	00000206 	br	17444 <set_rx1_gc_mode+0x88>
	}
	else
		show_invalid_param_message(1);
   1743c:	01000044 	movi	r4,1
   17440:	00166fc0 	call	166fc <show_invalid_param_message>
}
   17444:	e037883a 	mov	sp,fp
   17448:	dfc00117 	ldw	ra,4(sp)
   1744c:	df000017 	ldw	fp,0(sp)
   17450:	dec00204 	addi	sp,sp,8
   17454:	f800283a 	ret

00017458 <get_rx2_gc_mode>:
 * @brief Gets current RX2 GC mode.
 *
 * @return None.
*******************************************************************************/
void get_rx2_gc_mode(double* param, char param_no) // "rx2_gc_mode?" command
{
   17458:	defffb04 	addi	sp,sp,-20
   1745c:	de00012e 	bgeu	sp,et,17464 <get_rx2_gc_mode+0xc>
   17460:	003b68fa 	trap	3
   17464:	dfc00415 	stw	ra,16(sp)
   17468:	df000315 	stw	fp,12(sp)
   1746c:	df000304 	addi	fp,sp,12
   17470:	e13ffe15 	stw	r4,-8(fp)
   17474:	2805883a 	mov	r2,r5
   17478:	e0bfff05 	stb	r2,-4(fp)
	uint8_t gc_mode;

	ad9361_get_rx_gain_control_mode(ad9361_phy, 1, &gc_mode);
   1747c:	008000f4 	movhi	r2,3
   17480:	10aada04 	addi	r2,r2,-21656
   17484:	10800017 	ldw	r2,0(r2)
   17488:	1009883a 	mov	r4,r2
   1748c:	01400044 	movi	r5,1
   17490:	e1bffd04 	addi	r6,fp,-12
   17494:	00130f80 	call	130f8 <ad9361_get_rx_gain_control_mode>
	console_print("rx2_gc_mode=%d\n", gc_mode);
   17498:	e0bffd03 	ldbu	r2,-12(fp)
   1749c:	10803fcc 	andi	r2,r2,255
   174a0:	010000f4 	movhi	r4,3
   174a4:	2123a504 	addi	r4,r4,-29036
   174a8:	100b883a 	mov	r5,r2
   174ac:	00188580 	call	18858 <console_print>
}
   174b0:	e037883a 	mov	sp,fp
   174b4:	dfc00117 	ldw	ra,4(sp)
   174b8:	df000017 	ldw	fp,0(sp)
   174bc:	dec00204 	addi	sp,sp,8
   174c0:	f800283a 	ret

000174c4 <set_rx2_gc_mode>:
 * @brief Sets the RX2 GC mode.
 *
 * @return None.
*******************************************************************************/
void set_rx2_gc_mode(double* param, char param_no) // "rx2_gc_mode=" command
{
   174c4:	defffb04 	addi	sp,sp,-20
   174c8:	de00012e 	bgeu	sp,et,174d0 <set_rx2_gc_mode+0xc>
   174cc:	003b68fa 	trap	3
   174d0:	dfc00415 	stw	ra,16(sp)
   174d4:	df000315 	stw	fp,12(sp)
   174d8:	df000304 	addi	fp,sp,12
   174dc:	e13ffe15 	stw	r4,-8(fp)
   174e0:	2805883a 	mov	r2,r5
   174e4:	e0bfff05 	stb	r2,-4(fp)
	uint8_t gc_mode;

	if(param_no >= 1)
   174e8:	e0bfff07 	ldb	r2,-4(fp)
   174ec:	0080150e 	bge	zero,r2,17544 <set_rx2_gc_mode+0x80>
	{
		gc_mode = param[0];
   174f0:	e13ffe17 	ldw	r4,-8(fp)
   174f4:	20800017 	ldw	r2,0(r4)
   174f8:	20c00117 	ldw	r3,4(r4)
   174fc:	1009883a 	mov	r4,r2
   17500:	180b883a 	mov	r5,r3
   17504:	001c9fc0 	call	1c9fc <__fixunsdfsi>
   17508:	e0bffd05 	stb	r2,-12(fp)
		ad9361_set_rx_gain_control_mode(ad9361_phy, 1, gc_mode);
   1750c:	008000f4 	movhi	r2,3
   17510:	10aada04 	addi	r2,r2,-21656
   17514:	10c00017 	ldw	r3,0(r2)
   17518:	e0bffd03 	ldbu	r2,-12(fp)
   1751c:	1809883a 	mov	r4,r3
   17520:	01400044 	movi	r5,1
   17524:	100d883a 	mov	r6,r2
   17528:	00130180 	call	13018 <ad9361_set_rx_gain_control_mode>
		console_print("rx2_gc_mode=%d\n", gc_mode);
   1752c:	e0bffd03 	ldbu	r2,-12(fp)
   17530:	010000f4 	movhi	r4,3
   17534:	2123a504 	addi	r4,r4,-29036
   17538:	100b883a 	mov	r5,r2
   1753c:	00188580 	call	18858 <console_print>
   17540:	00000206 	br	1754c <set_rx2_gc_mode+0x88>
	}
	else
		show_invalid_param_message(1);
   17544:	01000044 	movi	r4,1
   17548:	00166fc0 	call	166fc <show_invalid_param_message>
}
   1754c:	e037883a 	mov	sp,fp
   17550:	dfc00117 	ldw	ra,4(sp)
   17554:	df000017 	ldw	fp,0(sp)
   17558:	dec00204 	addi	sp,sp,8
   1755c:	f800283a 	ret

00017560 <get_rx1_rf_gain>:
 * @brief Gets current RX1 RF gain.
 *
 * @return None.
*******************************************************************************/
void get_rx1_rf_gain(double* param, char param_no) // "rx1_rf_gain?" command
{
   17560:	defffb04 	addi	sp,sp,-20
   17564:	de00012e 	bgeu	sp,et,1756c <get_rx1_rf_gain+0xc>
   17568:	003b68fa 	trap	3
   1756c:	dfc00415 	stw	ra,16(sp)
   17570:	df000315 	stw	fp,12(sp)
   17574:	df000304 	addi	fp,sp,12
   17578:	e13ffe15 	stw	r4,-8(fp)
   1757c:	2805883a 	mov	r2,r5
   17580:	e0bfff05 	stb	r2,-4(fp)
	int32_t gain_db;

	ad9361_get_rx_rf_gain (ad9361_phy, 0, &gain_db);
   17584:	008000f4 	movhi	r2,3
   17588:	10aada04 	addi	r2,r2,-21656
   1758c:	10800017 	ldw	r2,0(r2)
   17590:	1009883a 	mov	r4,r2
   17594:	000b883a 	mov	r5,zero
   17598:	e1bffd04 	addi	r6,fp,-12
   1759c:	0012b840 	call	12b84 <ad9361_get_rx_rf_gain>
	console_print("rx1_rf_gain=%d\n", gain_db);
   175a0:	e0bffd17 	ldw	r2,-12(fp)
   175a4:	010000f4 	movhi	r4,3
   175a8:	2123a904 	addi	r4,r4,-29020
   175ac:	100b883a 	mov	r5,r2
   175b0:	00188580 	call	18858 <console_print>
}
   175b4:	e037883a 	mov	sp,fp
   175b8:	dfc00117 	ldw	ra,4(sp)
   175bc:	df000017 	ldw	fp,0(sp)
   175c0:	dec00204 	addi	sp,sp,8
   175c4:	f800283a 	ret

000175c8 <set_rx1_rf_gain>:
 * @brief Sets the RX1 RF gain.
 *
 * @return None.
*******************************************************************************/
void set_rx1_rf_gain(double* param, char param_no) // "rx1_rf_gain=" command
{
   175c8:	defffb04 	addi	sp,sp,-20
   175cc:	de00012e 	bgeu	sp,et,175d4 <set_rx1_rf_gain+0xc>
   175d0:	003b68fa 	trap	3
   175d4:	dfc00415 	stw	ra,16(sp)
   175d8:	df000315 	stw	fp,12(sp)
   175dc:	df000304 	addi	fp,sp,12
   175e0:	e13ffe15 	stw	r4,-8(fp)
   175e4:	2805883a 	mov	r2,r5
   175e8:	e0bfff05 	stb	r2,-4(fp)
	int32_t gain_db;

	if(param_no >= 1)
   175ec:	e0bfff07 	ldb	r2,-4(fp)
   175f0:	0080130e 	bge	zero,r2,17640 <set_rx1_rf_gain+0x78>
	{
		gain_db = param[0];
   175f4:	e13ffe17 	ldw	r4,-8(fp)
   175f8:	20800017 	ldw	r2,0(r4)
   175fc:	20c00117 	ldw	r3,4(r4)
   17600:	1009883a 	mov	r4,r2
   17604:	180b883a 	mov	r5,r3
   17608:	001f23c0 	call	1f23c <__fixdfsi>
   1760c:	e0bffd15 	stw	r2,-12(fp)
		ad9361_set_rx_rf_gain (ad9361_phy, 0, gain_db);
   17610:	008000f4 	movhi	r2,3
   17614:	10aada04 	addi	r2,r2,-21656
   17618:	10800017 	ldw	r2,0(r2)
   1761c:	1009883a 	mov	r4,r2
   17620:	000b883a 	mov	r5,zero
   17624:	e1bffd17 	ldw	r6,-12(fp)
   17628:	0012aa00 	call	12aa0 <ad9361_set_rx_rf_gain>
		console_print("rx1_rf_gain=%d\n", gain_db);
   1762c:	010000f4 	movhi	r4,3
   17630:	2123a904 	addi	r4,r4,-29020
   17634:	e17ffd17 	ldw	r5,-12(fp)
   17638:	00188580 	call	18858 <console_print>
   1763c:	00000206 	br	17648 <set_rx1_rf_gain+0x80>
	}
	else
		show_invalid_param_message(1);
   17640:	01000044 	movi	r4,1
   17644:	00166fc0 	call	166fc <show_invalid_param_message>
}
   17648:	e037883a 	mov	sp,fp
   1764c:	dfc00117 	ldw	ra,4(sp)
   17650:	df000017 	ldw	fp,0(sp)
   17654:	dec00204 	addi	sp,sp,8
   17658:	f800283a 	ret

0001765c <get_rx2_rf_gain>:
 * @brief Gets current RX2 RF gain.
 *
 * @return None.
*******************************************************************************/
void get_rx2_rf_gain(double* param, char param_no) // "rx2_rf_gain?" command
{
   1765c:	defffb04 	addi	sp,sp,-20
   17660:	de00012e 	bgeu	sp,et,17668 <get_rx2_rf_gain+0xc>
   17664:	003b68fa 	trap	3
   17668:	dfc00415 	stw	ra,16(sp)
   1766c:	df000315 	stw	fp,12(sp)
   17670:	df000304 	addi	fp,sp,12
   17674:	e13ffe15 	stw	r4,-8(fp)
   17678:	2805883a 	mov	r2,r5
   1767c:	e0bfff05 	stb	r2,-4(fp)
	int32_t gain_db;

	ad9361_get_rx_rf_gain (ad9361_phy, 1, &gain_db);
   17680:	008000f4 	movhi	r2,3
   17684:	10aada04 	addi	r2,r2,-21656
   17688:	10800017 	ldw	r2,0(r2)
   1768c:	1009883a 	mov	r4,r2
   17690:	01400044 	movi	r5,1
   17694:	e1bffd04 	addi	r6,fp,-12
   17698:	0012b840 	call	12b84 <ad9361_get_rx_rf_gain>
	console_print("rx2_rf_gain=%d\n", gain_db);
   1769c:	e0bffd17 	ldw	r2,-12(fp)
   176a0:	010000f4 	movhi	r4,3
   176a4:	2123ad04 	addi	r4,r4,-29004
   176a8:	100b883a 	mov	r5,r2
   176ac:	00188580 	call	18858 <console_print>
}
   176b0:	e037883a 	mov	sp,fp
   176b4:	dfc00117 	ldw	ra,4(sp)
   176b8:	df000017 	ldw	fp,0(sp)
   176bc:	dec00204 	addi	sp,sp,8
   176c0:	f800283a 	ret

000176c4 <set_rx2_rf_gain>:
 * @brief Sets the RX2 RF gain.
 *
 * @return None.
*******************************************************************************/
void set_rx2_rf_gain(double* param, char param_no) // "rx2_rf_gain=" command
{
   176c4:	defffb04 	addi	sp,sp,-20
   176c8:	de00012e 	bgeu	sp,et,176d0 <set_rx2_rf_gain+0xc>
   176cc:	003b68fa 	trap	3
   176d0:	dfc00415 	stw	ra,16(sp)
   176d4:	df000315 	stw	fp,12(sp)
   176d8:	df000304 	addi	fp,sp,12
   176dc:	e13ffe15 	stw	r4,-8(fp)
   176e0:	2805883a 	mov	r2,r5
   176e4:	e0bfff05 	stb	r2,-4(fp)
	int32_t gain_db;

	if(param_no >= 1)
   176e8:	e0bfff07 	ldb	r2,-4(fp)
   176ec:	0080130e 	bge	zero,r2,1773c <set_rx2_rf_gain+0x78>
	{
		gain_db = param[0];
   176f0:	e13ffe17 	ldw	r4,-8(fp)
   176f4:	20800017 	ldw	r2,0(r4)
   176f8:	20c00117 	ldw	r3,4(r4)
   176fc:	1009883a 	mov	r4,r2
   17700:	180b883a 	mov	r5,r3
   17704:	001f23c0 	call	1f23c <__fixdfsi>
   17708:	e0bffd15 	stw	r2,-12(fp)
		ad9361_set_rx_rf_gain (ad9361_phy, 1, gain_db);
   1770c:	008000f4 	movhi	r2,3
   17710:	10aada04 	addi	r2,r2,-21656
   17714:	10800017 	ldw	r2,0(r2)
   17718:	1009883a 	mov	r4,r2
   1771c:	01400044 	movi	r5,1
   17720:	e1bffd17 	ldw	r6,-12(fp)
   17724:	0012aa00 	call	12aa0 <ad9361_set_rx_rf_gain>
		console_print("rx2_rf_gain=%d\n", gain_db);
   17728:	010000f4 	movhi	r4,3
   1772c:	2123ad04 	addi	r4,r4,-29004
   17730:	e17ffd17 	ldw	r5,-12(fp)
   17734:	00188580 	call	18858 <console_print>
   17738:	00000206 	br	17744 <set_rx2_rf_gain+0x80>
	}
	else
		show_invalid_param_message(1);
   1773c:	01000044 	movi	r4,1
   17740:	00166fc0 	call	166fc <show_invalid_param_message>
}
   17744:	e037883a 	mov	sp,fp
   17748:	dfc00117 	ldw	ra,4(sp)
   1774c:	df000017 	ldw	fp,0(sp)
   17750:	dec00204 	addi	sp,sp,8
   17754:	f800283a 	ret

00017758 <get_rx_fir_en>:
 * @brief Gets current RX FIR state.
 *
 * @return None.
*******************************************************************************/
void get_rx_fir_en(double* param, char param_no) // "rx_fir_en?" command
{
   17758:	defffb04 	addi	sp,sp,-20
   1775c:	de00012e 	bgeu	sp,et,17764 <get_rx_fir_en+0xc>
   17760:	003b68fa 	trap	3
   17764:	dfc00415 	stw	ra,16(sp)
   17768:	df000315 	stw	fp,12(sp)
   1776c:	df000304 	addi	fp,sp,12
   17770:	e13ffe15 	stw	r4,-8(fp)
   17774:	2805883a 	mov	r2,r5
   17778:	e0bfff05 	stb	r2,-4(fp)
	uint8_t en_dis;

	ad9361_get_rx_fir_en_dis(ad9361_phy, &en_dis);
   1777c:	008000f4 	movhi	r2,3
   17780:	10aada04 	addi	r2,r2,-21656
   17784:	10800017 	ldw	r2,0(r2)
   17788:	1009883a 	mov	r4,r2
   1778c:	e17ffd04 	addi	r5,fp,-12
   17790:	00134c00 	call	134c0 <ad9361_get_rx_fir_en_dis>
	console_print("rx_fir_en=%d\n", en_dis);
   17794:	e0bffd03 	ldbu	r2,-12(fp)
   17798:	10803fcc 	andi	r2,r2,255
   1779c:	010000f4 	movhi	r4,3
   177a0:	2123b104 	addi	r4,r4,-28988
   177a4:	100b883a 	mov	r5,r2
   177a8:	00188580 	call	18858 <console_print>
}
   177ac:	e037883a 	mov	sp,fp
   177b0:	dfc00117 	ldw	ra,4(sp)
   177b4:	df000017 	ldw	fp,0(sp)
   177b8:	dec00204 	addi	sp,sp,8
   177bc:	f800283a 	ret

000177c0 <set_rx_fir_en>:
 * @brief Sets the RX FIR state.
 *
 * @return None.
*******************************************************************************/
void set_rx_fir_en(double* param, char param_no) // "rx_fir_en=" command
{
   177c0:	defffb04 	addi	sp,sp,-20
   177c4:	de00012e 	bgeu	sp,et,177cc <set_rx_fir_en+0xc>
   177c8:	003b68fa 	trap	3
   177cc:	dfc00415 	stw	ra,16(sp)
   177d0:	df000315 	stw	fp,12(sp)
   177d4:	df000304 	addi	fp,sp,12
   177d8:	e13ffe15 	stw	r4,-8(fp)
   177dc:	2805883a 	mov	r2,r5
   177e0:	e0bfff05 	stb	r2,-4(fp)
	uint8_t en_dis;

	if(param_no >= 1)
   177e4:	e0bfff07 	ldb	r2,-4(fp)
   177e8:	0080140e 	bge	zero,r2,1783c <set_rx_fir_en+0x7c>
	{
		en_dis = param[0];
   177ec:	e13ffe17 	ldw	r4,-8(fp)
   177f0:	20800017 	ldw	r2,0(r4)
   177f4:	20c00117 	ldw	r3,4(r4)
   177f8:	1009883a 	mov	r4,r2
   177fc:	180b883a 	mov	r5,r3
   17800:	001c9fc0 	call	1c9fc <__fixunsdfsi>
   17804:	e0bffd05 	stb	r2,-12(fp)
		ad9361_set_rx_fir_en_dis(ad9361_phy, en_dis);
   17808:	008000f4 	movhi	r2,3
   1780c:	10aada04 	addi	r2,r2,-21656
   17810:	10c00017 	ldw	r3,0(r2)
   17814:	e0bffd03 	ldbu	r2,-12(fp)
   17818:	1809883a 	mov	r4,r3
   1781c:	100b883a 	mov	r5,r2
   17820:	00134280 	call	13428 <ad9361_set_rx_fir_en_dis>
		console_print("rx_fir_en=%d\n", en_dis);
   17824:	e0bffd03 	ldbu	r2,-12(fp)
   17828:	010000f4 	movhi	r4,3
   1782c:	2123b104 	addi	r4,r4,-28988
   17830:	100b883a 	mov	r5,r2
   17834:	00188580 	call	18858 <console_print>
   17838:	00000206 	br	17844 <set_rx_fir_en+0x84>
	}
	else
		show_invalid_param_message(1);
   1783c:	01000044 	movi	r4,1
   17840:	00166fc0 	call	166fc <show_invalid_param_message>
}
   17844:	e037883a 	mov	sp,fp
   17848:	dfc00117 	ldw	ra,4(sp)
   1784c:	df000017 	ldw	fp,0(sp)
   17850:	dec00204 	addi	sp,sp,8
   17854:	f800283a 	ret

00017858 <get_dds_tx1_tone1_freq>:
 * @brief Gets current DDS TX1 Tone 1 frequency [Hz].
 *
 * @return None.
*******************************************************************************/
void get_dds_tx1_tone1_freq(double* param, char param_no)	// dds_tx1_tone1_freq?
{
   17858:	defffb04 	addi	sp,sp,-20
   1785c:	de00012e 	bgeu	sp,et,17864 <get_dds_tx1_tone1_freq+0xc>
   17860:	003b68fa 	trap	3
   17864:	dfc00415 	stw	ra,16(sp)
   17868:	df000315 	stw	fp,12(sp)
   1786c:	df000304 	addi	fp,sp,12
   17870:	e13ffe15 	stw	r4,-8(fp)
   17874:	2805883a 	mov	r2,r5
   17878:	e0bfff05 	stb	r2,-4(fp)
	uint32_t freq = dds_st.cached_freq[DDS_CHAN_TX1_I_F1];
   1787c:	008000f4 	movhi	r2,3
   17880:	10aae204 	addi	r2,r2,-21624
   17884:	10800017 	ldw	r2,0(r2)
   17888:	e0bffd15 	stw	r2,-12(fp)

	console_print("dds_tx1_tone1_freq=%d\n", freq);
   1788c:	010000f4 	movhi	r4,3
   17890:	2123b504 	addi	r4,r4,-28972
   17894:	e17ffd17 	ldw	r5,-12(fp)
   17898:	00188580 	call	18858 <console_print>
}
   1789c:	e037883a 	mov	sp,fp
   178a0:	dfc00117 	ldw	ra,4(sp)
   178a4:	df000017 	ldw	fp,0(sp)
   178a8:	dec00204 	addi	sp,sp,8
   178ac:	f800283a 	ret

000178b0 <set_dds_tx1_tone1_freq>:
 * @brief Sets the DDS TX1 Tone 1 frequency [Hz].
 *
 * @return None.
*******************************************************************************/
void set_dds_tx1_tone1_freq(double* param, char param_no)	// dds_tx1_tone1_freq=
{
   178b0:	defffb04 	addi	sp,sp,-20
   178b4:	de00012e 	bgeu	sp,et,178bc <set_dds_tx1_tone1_freq+0xc>
   178b8:	003b68fa 	trap	3
   178bc:	dfc00415 	stw	ra,16(sp)
   178c0:	df000315 	stw	fp,12(sp)
   178c4:	df000304 	addi	fp,sp,12
   178c8:	e13ffe15 	stw	r4,-8(fp)
   178cc:	2805883a 	mov	r2,r5
   178d0:	e0bfff05 	stb	r2,-4(fp)
	uint32_t freq = (uint32_t)param[0];
   178d4:	e13ffe17 	ldw	r4,-8(fp)
   178d8:	20800017 	ldw	r2,0(r4)
   178dc:	20c00117 	ldw	r3,4(r4)
   178e0:	1009883a 	mov	r4,r2
   178e4:	180b883a 	mov	r5,r3
   178e8:	001c9fc0 	call	1c9fc <__fixunsdfsi>
   178ec:	e0bffd15 	stw	r2,-12(fp)

	if(param_no >= 1)
   178f0:	e0bfff07 	ldb	r2,-4(fp)
   178f4:	00800b0e 	bge	zero,r2,17924 <set_dds_tx1_tone1_freq+0x74>
	{
		dds_set_frequency(DDS_CHAN_TX1_I_F1, freq);
   178f8:	0009883a 	mov	r4,zero
   178fc:	e17ffd17 	ldw	r5,-12(fp)
   17900:	001ac700 	call	1ac70 <dds_set_frequency>
		dds_set_frequency(DDS_CHAN_TX1_Q_F1, freq);
   17904:	01000084 	movi	r4,2
   17908:	e17ffd17 	ldw	r5,-12(fp)
   1790c:	001ac700 	call	1ac70 <dds_set_frequency>
		console_print("dds_tx1_tone1_freq=%d\n", freq);
   17910:	010000f4 	movhi	r4,3
   17914:	2123b504 	addi	r4,r4,-28972
   17918:	e17ffd17 	ldw	r5,-12(fp)
   1791c:	00188580 	call	18858 <console_print>
   17920:	00000206 	br	1792c <set_dds_tx1_tone1_freq+0x7c>
	}
	else
		show_invalid_param_message(1);
   17924:	01000044 	movi	r4,1
   17928:	00166fc0 	call	166fc <show_invalid_param_message>
}
   1792c:	e037883a 	mov	sp,fp
   17930:	dfc00117 	ldw	ra,4(sp)
   17934:	df000017 	ldw	fp,0(sp)
   17938:	dec00204 	addi	sp,sp,8
   1793c:	f800283a 	ret

00017940 <get_dds_tx1_tone2_freq>:
 * @brief Gets current DDS TX1 Tone 2 frequency [Hz].
 *
 * @return None.
*******************************************************************************/
void get_dds_tx1_tone2_freq(double* param, char param_no)	// dds_tx1_tone2_freq?
{
   17940:	defffb04 	addi	sp,sp,-20
   17944:	de00012e 	bgeu	sp,et,1794c <get_dds_tx1_tone2_freq+0xc>
   17948:	003b68fa 	trap	3
   1794c:	dfc00415 	stw	ra,16(sp)
   17950:	df000315 	stw	fp,12(sp)
   17954:	df000304 	addi	fp,sp,12
   17958:	e13ffe15 	stw	r4,-8(fp)
   1795c:	2805883a 	mov	r2,r5
   17960:	e0bfff05 	stb	r2,-4(fp)
	uint32_t freq = dds_st.cached_freq[DDS_CHAN_TX1_I_F2];
   17964:	008000f4 	movhi	r2,3
   17968:	10aae204 	addi	r2,r2,-21624
   1796c:	10800117 	ldw	r2,4(r2)
   17970:	e0bffd15 	stw	r2,-12(fp)

	console_print("dds_tx1_tone2_freq=%d\n", freq);
   17974:	010000f4 	movhi	r4,3
   17978:	2123bb04 	addi	r4,r4,-28948
   1797c:	e17ffd17 	ldw	r5,-12(fp)
   17980:	00188580 	call	18858 <console_print>
}
   17984:	e037883a 	mov	sp,fp
   17988:	dfc00117 	ldw	ra,4(sp)
   1798c:	df000017 	ldw	fp,0(sp)
   17990:	dec00204 	addi	sp,sp,8
   17994:	f800283a 	ret

00017998 <set_dds_tx1_tone2_freq>:
 * @brief Sets the DDS TX1 Tone 2 frequency [Hz].
 *
 * @return None.
*******************************************************************************/
void set_dds_tx1_tone2_freq(double* param, char param_no)	// dds_tx1_tone2_freq=
{
   17998:	defffb04 	addi	sp,sp,-20
   1799c:	de00012e 	bgeu	sp,et,179a4 <set_dds_tx1_tone2_freq+0xc>
   179a0:	003b68fa 	trap	3
   179a4:	dfc00415 	stw	ra,16(sp)
   179a8:	df000315 	stw	fp,12(sp)
   179ac:	df000304 	addi	fp,sp,12
   179b0:	e13ffe15 	stw	r4,-8(fp)
   179b4:	2805883a 	mov	r2,r5
   179b8:	e0bfff05 	stb	r2,-4(fp)
	uint32_t freq = (uint32_t)param[0];
   179bc:	e13ffe17 	ldw	r4,-8(fp)
   179c0:	20800017 	ldw	r2,0(r4)
   179c4:	20c00117 	ldw	r3,4(r4)
   179c8:	1009883a 	mov	r4,r2
   179cc:	180b883a 	mov	r5,r3
   179d0:	001c9fc0 	call	1c9fc <__fixunsdfsi>
   179d4:	e0bffd15 	stw	r2,-12(fp)

	if(param_no >= 1)
   179d8:	e0bfff07 	ldb	r2,-4(fp)
   179dc:	00800b0e 	bge	zero,r2,17a0c <set_dds_tx1_tone2_freq+0x74>
	{
		dds_set_frequency(DDS_CHAN_TX1_I_F2, freq);
   179e0:	01000044 	movi	r4,1
   179e4:	e17ffd17 	ldw	r5,-12(fp)
   179e8:	001ac700 	call	1ac70 <dds_set_frequency>
		dds_set_frequency(DDS_CHAN_TX1_Q_F2, freq);
   179ec:	010000c4 	movi	r4,3
   179f0:	e17ffd17 	ldw	r5,-12(fp)
   179f4:	001ac700 	call	1ac70 <dds_set_frequency>
		console_print("dds_tx1_tone2_freq=%d\n", freq);
   179f8:	010000f4 	movhi	r4,3
   179fc:	2123bb04 	addi	r4,r4,-28948
   17a00:	e17ffd17 	ldw	r5,-12(fp)
   17a04:	00188580 	call	18858 <console_print>
   17a08:	00000206 	br	17a14 <set_dds_tx1_tone2_freq+0x7c>
	}
	else
		show_invalid_param_message(1);
   17a0c:	01000044 	movi	r4,1
   17a10:	00166fc0 	call	166fc <show_invalid_param_message>
}
   17a14:	e037883a 	mov	sp,fp
   17a18:	dfc00117 	ldw	ra,4(sp)
   17a1c:	df000017 	ldw	fp,0(sp)
   17a20:	dec00204 	addi	sp,sp,8
   17a24:	f800283a 	ret

00017a28 <get_dds_tx1_tone1_phase>:
 * @brief Gets current DDS TX1 Tone 1 phase [degrees].
 *
 * @return None.
*******************************************************************************/
void get_dds_tx1_tone1_phase(double* param, char param_no)	// dds_tx1_tone1_phase?
{
   17a28:	defffb04 	addi	sp,sp,-20
   17a2c:	de00012e 	bgeu	sp,et,17a34 <get_dds_tx1_tone1_phase+0xc>
   17a30:	003b68fa 	trap	3
   17a34:	dfc00415 	stw	ra,16(sp)
   17a38:	df000315 	stw	fp,12(sp)
   17a3c:	df000304 	addi	fp,sp,12
   17a40:	e13ffe15 	stw	r4,-8(fp)
   17a44:	2805883a 	mov	r2,r5
   17a48:	e0bfff05 	stb	r2,-4(fp)
	uint32_t phase = dds_st.cached_phase[DDS_CHAN_TX1_I_F1];
   17a4c:	008000f4 	movhi	r2,3
   17a50:	10aae204 	addi	r2,r2,-21624
   17a54:	10800817 	ldw	r2,32(r2)
   17a58:	e0bffd15 	stw	r2,-12(fp)

	phase /= 1000;
   17a5c:	e0bffd17 	ldw	r2,-12(fp)
   17a60:	1009883a 	mov	r4,r2
   17a64:	0140fa04 	movi	r5,1000
   17a68:	001d7a40 	call	1d7a4 <__udivsi3>
   17a6c:	e0bffd15 	stw	r2,-12(fp)
	console_print("dds_tx1_tone1_phase=%d\n", phase);
   17a70:	010000f4 	movhi	r4,3
   17a74:	2123c104 	addi	r4,r4,-28924
   17a78:	e17ffd17 	ldw	r5,-12(fp)
   17a7c:	00188580 	call	18858 <console_print>
}
   17a80:	e037883a 	mov	sp,fp
   17a84:	dfc00117 	ldw	ra,4(sp)
   17a88:	df000017 	ldw	fp,0(sp)
   17a8c:	dec00204 	addi	sp,sp,8
   17a90:	f800283a 	ret

00017a94 <set_dds_tx1_tone1_phase>:
 * @brief Sets the DDS TX1 Tone 1 phase [degrees].
 *
 * @return None.
*******************************************************************************/
void set_dds_tx1_tone1_phase(double* param, char param_no)	// dds_tx1_tone1_phase=
{
   17a94:	defffb04 	addi	sp,sp,-20
   17a98:	de00012e 	bgeu	sp,et,17aa0 <set_dds_tx1_tone1_phase+0xc>
   17a9c:	003b68fa 	trap	3
   17aa0:	dfc00415 	stw	ra,16(sp)
   17aa4:	df000315 	stw	fp,12(sp)
   17aa8:	df000304 	addi	fp,sp,12
   17aac:	e13ffe15 	stw	r4,-8(fp)
   17ab0:	2805883a 	mov	r2,r5
   17ab4:	e0bfff05 	stb	r2,-4(fp)
	int32_t phase = (uint32_t)param[0];
   17ab8:	e13ffe17 	ldw	r4,-8(fp)
   17abc:	20800017 	ldw	r2,0(r4)
   17ac0:	20c00117 	ldw	r3,4(r4)
   17ac4:	1009883a 	mov	r4,r2
   17ac8:	180b883a 	mov	r5,r3
   17acc:	001c9fc0 	call	1c9fc <__fixunsdfsi>
   17ad0:	e0bffd15 	stw	r2,-12(fp)

	if(param_no >= 1)
   17ad4:	e0bfff07 	ldb	r2,-4(fp)
   17ad8:	00801d0e 	bge	zero,r2,17b50 <set_dds_tx1_tone1_phase+0xbc>
	{
		dds_set_phase(DDS_CHAN_TX1_I_F1, (uint32_t)(phase * 1000));
   17adc:	e0bffd17 	ldw	r2,-12(fp)
   17ae0:	1080fa24 	muli	r2,r2,1000
   17ae4:	0009883a 	mov	r4,zero
   17ae8:	100b883a 	mov	r5,r2
   17aec:	001ade00 	call	1ade0 <dds_set_phase>
		if ((phase - 90) < 0)
   17af0:	e0bffd17 	ldw	r2,-12(fp)
   17af4:	10bfe984 	addi	r2,r2,-90
   17af8:	1000030e 	bge	r2,zero,17b08 <set_dds_tx1_tone1_phase+0x74>
			phase += 360;
   17afc:	e0bffd17 	ldw	r2,-12(fp)
   17b00:	10805a04 	addi	r2,r2,360
   17b04:	e0bffd15 	stw	r2,-12(fp)
		dds_set_phase(DDS_CHAN_TX1_Q_F1, (uint32_t)((phase - 90) * 1000));
   17b08:	e0bffd17 	ldw	r2,-12(fp)
   17b0c:	10bfe984 	addi	r2,r2,-90
   17b10:	1080fa24 	muli	r2,r2,1000
   17b14:	01000084 	movi	r4,2
   17b18:	100b883a 	mov	r5,r2
   17b1c:	001ade00 	call	1ade0 <dds_set_phase>
		phase = dds_st.cached_phase[DDS_CHAN_TX1_I_F1] / 1000;
   17b20:	008000f4 	movhi	r2,3
   17b24:	10aae204 	addi	r2,r2,-21624
   17b28:	10800817 	ldw	r2,32(r2)
   17b2c:	1009883a 	mov	r4,r2
   17b30:	0140fa04 	movi	r5,1000
   17b34:	001d7a40 	call	1d7a4 <__udivsi3>
   17b38:	e0bffd15 	stw	r2,-12(fp)
		console_print("dds_tx1_tone1_phase=%d\n", phase);
   17b3c:	010000f4 	movhi	r4,3
   17b40:	2123c104 	addi	r4,r4,-28924
   17b44:	e17ffd17 	ldw	r5,-12(fp)
   17b48:	00188580 	call	18858 <console_print>
   17b4c:	00000206 	br	17b58 <set_dds_tx1_tone1_phase+0xc4>
	}
	else
		show_invalid_param_message(1);
   17b50:	01000044 	movi	r4,1
   17b54:	00166fc0 	call	166fc <show_invalid_param_message>
}
   17b58:	e037883a 	mov	sp,fp
   17b5c:	dfc00117 	ldw	ra,4(sp)
   17b60:	df000017 	ldw	fp,0(sp)
   17b64:	dec00204 	addi	sp,sp,8
   17b68:	f800283a 	ret

00017b6c <get_dds_tx1_tone2_phase>:
 * @brief Gets current DDS TX1 Tone 2 phase [degrees].
 *
 * @return None.
*******************************************************************************/
void get_dds_tx1_tone2_phase(double* param, char param_no)	// dds_tx1_tone2_phase?
{
   17b6c:	defffb04 	addi	sp,sp,-20
   17b70:	de00012e 	bgeu	sp,et,17b78 <get_dds_tx1_tone2_phase+0xc>
   17b74:	003b68fa 	trap	3
   17b78:	dfc00415 	stw	ra,16(sp)
   17b7c:	df000315 	stw	fp,12(sp)
   17b80:	df000304 	addi	fp,sp,12
   17b84:	e13ffe15 	stw	r4,-8(fp)
   17b88:	2805883a 	mov	r2,r5
   17b8c:	e0bfff05 	stb	r2,-4(fp)
	uint32_t phase = dds_st.cached_phase[DDS_CHAN_TX1_I_F2];
   17b90:	008000f4 	movhi	r2,3
   17b94:	10aae204 	addi	r2,r2,-21624
   17b98:	10800917 	ldw	r2,36(r2)
   17b9c:	e0bffd15 	stw	r2,-12(fp)

	phase /= 1000;
   17ba0:	e0bffd17 	ldw	r2,-12(fp)
   17ba4:	1009883a 	mov	r4,r2
   17ba8:	0140fa04 	movi	r5,1000
   17bac:	001d7a40 	call	1d7a4 <__udivsi3>
   17bb0:	e0bffd15 	stw	r2,-12(fp)
	console_print("dds_tx1_tone2_phase=%d\n", phase);
   17bb4:	010000f4 	movhi	r4,3
   17bb8:	2123c704 	addi	r4,r4,-28900
   17bbc:	e17ffd17 	ldw	r5,-12(fp)
   17bc0:	00188580 	call	18858 <console_print>
}
   17bc4:	e037883a 	mov	sp,fp
   17bc8:	dfc00117 	ldw	ra,4(sp)
   17bcc:	df000017 	ldw	fp,0(sp)
   17bd0:	dec00204 	addi	sp,sp,8
   17bd4:	f800283a 	ret

00017bd8 <set_dds_tx1_tone2_phase>:
 * @brief Sets the DDS TX1 Tone 2 phase [degrees].
 *
 * @return None.
*******************************************************************************/
void set_dds_tx1_tone2_phase(double* param, char param_no)	// dds_tx1_tone2_phase=
{
   17bd8:	defffb04 	addi	sp,sp,-20
   17bdc:	de00012e 	bgeu	sp,et,17be4 <set_dds_tx1_tone2_phase+0xc>
   17be0:	003b68fa 	trap	3
   17be4:	dfc00415 	stw	ra,16(sp)
   17be8:	df000315 	stw	fp,12(sp)
   17bec:	df000304 	addi	fp,sp,12
   17bf0:	e13ffe15 	stw	r4,-8(fp)
   17bf4:	2805883a 	mov	r2,r5
   17bf8:	e0bfff05 	stb	r2,-4(fp)
	int32_t phase = (uint32_t)param[0];
   17bfc:	e13ffe17 	ldw	r4,-8(fp)
   17c00:	20800017 	ldw	r2,0(r4)
   17c04:	20c00117 	ldw	r3,4(r4)
   17c08:	1009883a 	mov	r4,r2
   17c0c:	180b883a 	mov	r5,r3
   17c10:	001c9fc0 	call	1c9fc <__fixunsdfsi>
   17c14:	e0bffd15 	stw	r2,-12(fp)

	if(param_no >= 1)
   17c18:	e0bfff07 	ldb	r2,-4(fp)
   17c1c:	00801d0e 	bge	zero,r2,17c94 <set_dds_tx1_tone2_phase+0xbc>
	{
		dds_set_phase(DDS_CHAN_TX1_I_F2, (uint32_t)(phase * 1000));
   17c20:	e0bffd17 	ldw	r2,-12(fp)
   17c24:	1080fa24 	muli	r2,r2,1000
   17c28:	01000044 	movi	r4,1
   17c2c:	100b883a 	mov	r5,r2
   17c30:	001ade00 	call	1ade0 <dds_set_phase>
		if ((phase - 90) < 0)
   17c34:	e0bffd17 	ldw	r2,-12(fp)
   17c38:	10bfe984 	addi	r2,r2,-90
   17c3c:	1000030e 	bge	r2,zero,17c4c <set_dds_tx1_tone2_phase+0x74>
			phase += 360;
   17c40:	e0bffd17 	ldw	r2,-12(fp)
   17c44:	10805a04 	addi	r2,r2,360
   17c48:	e0bffd15 	stw	r2,-12(fp)
		dds_set_phase(DDS_CHAN_TX1_Q_F2, (uint32_t)((phase - 90) * 1000));
   17c4c:	e0bffd17 	ldw	r2,-12(fp)
   17c50:	10bfe984 	addi	r2,r2,-90
   17c54:	1080fa24 	muli	r2,r2,1000
   17c58:	010000c4 	movi	r4,3
   17c5c:	100b883a 	mov	r5,r2
   17c60:	001ade00 	call	1ade0 <dds_set_phase>
		phase = dds_st.cached_phase[DDS_CHAN_TX1_I_F2] / 1000;
   17c64:	008000f4 	movhi	r2,3
   17c68:	10aae204 	addi	r2,r2,-21624
   17c6c:	10800917 	ldw	r2,36(r2)
   17c70:	1009883a 	mov	r4,r2
   17c74:	0140fa04 	movi	r5,1000
   17c78:	001d7a40 	call	1d7a4 <__udivsi3>
   17c7c:	e0bffd15 	stw	r2,-12(fp)
		console_print("dds_tx1_tone2_phase=%d\n", phase);
   17c80:	010000f4 	movhi	r4,3
   17c84:	2123c704 	addi	r4,r4,-28900
   17c88:	e17ffd17 	ldw	r5,-12(fp)
   17c8c:	00188580 	call	18858 <console_print>
   17c90:	00000206 	br	17c9c <set_dds_tx1_tone2_phase+0xc4>
	}
	else
		show_invalid_param_message(1);
   17c94:	01000044 	movi	r4,1
   17c98:	00166fc0 	call	166fc <show_invalid_param_message>
}
   17c9c:	e037883a 	mov	sp,fp
   17ca0:	dfc00117 	ldw	ra,4(sp)
   17ca4:	df000017 	ldw	fp,0(sp)
   17ca8:	dec00204 	addi	sp,sp,8
   17cac:	f800283a 	ret

00017cb0 <get_dds_tx1_tone1_scale>:
 * @brief Gets current DDS TX1 Tone 1 scale.
 *
 * @return None.
*******************************************************************************/
void get_dds_tx1_tone1_scale(double* param, char param_no)	// dds_tx1_tone1_scale?
{
   17cb0:	defffb04 	addi	sp,sp,-20
   17cb4:	de00012e 	bgeu	sp,et,17cbc <get_dds_tx1_tone1_scale+0xc>
   17cb8:	003b68fa 	trap	3
   17cbc:	dfc00415 	stw	ra,16(sp)
   17cc0:	df000315 	stw	fp,12(sp)
   17cc4:	df000304 	addi	fp,sp,12
   17cc8:	e13ffe15 	stw	r4,-8(fp)
   17ccc:	2805883a 	mov	r2,r5
   17cd0:	e0bfff05 	stb	r2,-4(fp)
	int32_t scale = dds_st.cached_scale[DDS_CHAN_TX1_I_F1];
   17cd4:	010000f4 	movhi	r4,3
   17cd8:	212ae204 	addi	r4,r4,-21624
   17cdc:	20801017 	ldw	r2,64(r4)
   17ce0:	20c01117 	ldw	r3,68(r4)
   17ce4:	1009883a 	mov	r4,r2
   17ce8:	180b883a 	mov	r5,r3
   17cec:	001f23c0 	call	1f23c <__fixdfsi>
   17cf0:	e0bffd15 	stw	r2,-12(fp)

	console_print("dds_tx1_tone1_scale=%d\n", scale);
   17cf4:	010000f4 	movhi	r4,3
   17cf8:	2123cd04 	addi	r4,r4,-28876
   17cfc:	e17ffd17 	ldw	r5,-12(fp)
   17d00:	00188580 	call	18858 <console_print>
}
   17d04:	e037883a 	mov	sp,fp
   17d08:	dfc00117 	ldw	ra,4(sp)
   17d0c:	df000017 	ldw	fp,0(sp)
   17d10:	dec00204 	addi	sp,sp,8
   17d14:	f800283a 	ret

00017d18 <set_dds_tx1_tone1_scale>:
 * @brief Sets the DDS TX1 Tone 1 scale.
 *
 * @return None.
*******************************************************************************/
void set_dds_tx1_tone1_scale(double* param, char param_no)	// dds_tx1_tone1_scale=
{
   17d18:	defffb04 	addi	sp,sp,-20
   17d1c:	de00012e 	bgeu	sp,et,17d24 <set_dds_tx1_tone1_scale+0xc>
   17d20:	003b68fa 	trap	3
   17d24:	dfc00415 	stw	ra,16(sp)
   17d28:	df000315 	stw	fp,12(sp)
   17d2c:	df000304 	addi	fp,sp,12
   17d30:	e13ffe15 	stw	r4,-8(fp)
   17d34:	2805883a 	mov	r2,r5
   17d38:	e0bfff05 	stb	r2,-4(fp)
	int32_t scale = (int32_t)param[0];
   17d3c:	e13ffe17 	ldw	r4,-8(fp)
   17d40:	20800017 	ldw	r2,0(r4)
   17d44:	20c00117 	ldw	r3,4(r4)
   17d48:	1009883a 	mov	r4,r2
   17d4c:	180b883a 	mov	r5,r3
   17d50:	001f23c0 	call	1f23c <__fixdfsi>
   17d54:	e0bffd15 	stw	r2,-12(fp)

	if(param_no >= 1)
   17d58:	e0bfff07 	ldb	r2,-4(fp)
   17d5c:	00801d0e 	bge	zero,r2,17dd4 <set_dds_tx1_tone1_scale+0xbc>
	{
		dds_set_scale(DDS_CHAN_TX1_I_F1, scale);
   17d60:	e13ffd17 	ldw	r4,-12(fp)
   17d64:	001f2cc0 	call	1f2cc <__floatsidf>
   17d68:	100d883a 	mov	r6,r2
   17d6c:	180f883a 	mov	r7,r3
   17d70:	0009883a 	mov	r4,zero
   17d74:	300b883a 	mov	r5,r6
   17d78:	380d883a 	mov	r6,r7
   17d7c:	001af480 	call	1af48 <dds_set_scale>
		dds_set_scale(DDS_CHAN_TX1_Q_F1, scale);
   17d80:	e13ffd17 	ldw	r4,-12(fp)
   17d84:	001f2cc0 	call	1f2cc <__floatsidf>
   17d88:	100d883a 	mov	r6,r2
   17d8c:	180f883a 	mov	r7,r3
   17d90:	01000084 	movi	r4,2
   17d94:	300b883a 	mov	r5,r6
   17d98:	380d883a 	mov	r6,r7
   17d9c:	001af480 	call	1af48 <dds_set_scale>
		scale = dds_st.cached_scale[DDS_CHAN_TX1_I_F1];
   17da0:	010000f4 	movhi	r4,3
   17da4:	212ae204 	addi	r4,r4,-21624
   17da8:	20801017 	ldw	r2,64(r4)
   17dac:	20c01117 	ldw	r3,68(r4)
   17db0:	1009883a 	mov	r4,r2
   17db4:	180b883a 	mov	r5,r3
   17db8:	001f23c0 	call	1f23c <__fixdfsi>
   17dbc:	e0bffd15 	stw	r2,-12(fp)
		console_print("dds_tx1_tone1_scale=%d\n", scale);
   17dc0:	010000f4 	movhi	r4,3
   17dc4:	2123cd04 	addi	r4,r4,-28876
   17dc8:	e17ffd17 	ldw	r5,-12(fp)
   17dcc:	00188580 	call	18858 <console_print>
   17dd0:	00000206 	br	17ddc <set_dds_tx1_tone1_scale+0xc4>
	}
	else
		show_invalid_param_message(1);
   17dd4:	01000044 	movi	r4,1
   17dd8:	00166fc0 	call	166fc <show_invalid_param_message>
}
   17ddc:	e037883a 	mov	sp,fp
   17de0:	dfc00117 	ldw	ra,4(sp)
   17de4:	df000017 	ldw	fp,0(sp)
   17de8:	dec00204 	addi	sp,sp,8
   17dec:	f800283a 	ret

00017df0 <get_dds_tx1_tone2_scale>:
 * @brief Gets current DDS TX1 Tone 2 scale.
 *
 * @return None.
*******************************************************************************/
void get_dds_tx1_tone2_scale(double* param, char param_no)	// dds_tx1_tone2_scale?
{
   17df0:	defffb04 	addi	sp,sp,-20
   17df4:	de00012e 	bgeu	sp,et,17dfc <get_dds_tx1_tone2_scale+0xc>
   17df8:	003b68fa 	trap	3
   17dfc:	dfc00415 	stw	ra,16(sp)
   17e00:	df000315 	stw	fp,12(sp)
   17e04:	df000304 	addi	fp,sp,12
   17e08:	e13ffe15 	stw	r4,-8(fp)
   17e0c:	2805883a 	mov	r2,r5
   17e10:	e0bfff05 	stb	r2,-4(fp)
	int32_t scale = dds_st.cached_scale[DDS_CHAN_TX1_I_F2];
   17e14:	010000f4 	movhi	r4,3
   17e18:	212ae204 	addi	r4,r4,-21624
   17e1c:	20801217 	ldw	r2,72(r4)
   17e20:	20c01317 	ldw	r3,76(r4)
   17e24:	1009883a 	mov	r4,r2
   17e28:	180b883a 	mov	r5,r3
   17e2c:	001f23c0 	call	1f23c <__fixdfsi>
   17e30:	e0bffd15 	stw	r2,-12(fp)

	console_print("dds_tx1_tone2_scale=%d\n", scale);
   17e34:	010000f4 	movhi	r4,3
   17e38:	2123d304 	addi	r4,r4,-28852
   17e3c:	e17ffd17 	ldw	r5,-12(fp)
   17e40:	00188580 	call	18858 <console_print>
}
   17e44:	e037883a 	mov	sp,fp
   17e48:	dfc00117 	ldw	ra,4(sp)
   17e4c:	df000017 	ldw	fp,0(sp)
   17e50:	dec00204 	addi	sp,sp,8
   17e54:	f800283a 	ret

00017e58 <set_dds_tx1_tone2_scale>:
 * @brief Sets the DDS TX1 Tone 2 scale.
 *
 * @return None.
*******************************************************************************/
void set_dds_tx1_tone2_scale(double* param, char param_no)	// dds_tx1_tone2_scale=
{
   17e58:	defffb04 	addi	sp,sp,-20
   17e5c:	de00012e 	bgeu	sp,et,17e64 <set_dds_tx1_tone2_scale+0xc>
   17e60:	003b68fa 	trap	3
   17e64:	dfc00415 	stw	ra,16(sp)
   17e68:	df000315 	stw	fp,12(sp)
   17e6c:	df000304 	addi	fp,sp,12
   17e70:	e13ffe15 	stw	r4,-8(fp)
   17e74:	2805883a 	mov	r2,r5
   17e78:	e0bfff05 	stb	r2,-4(fp)
	int32_t scale = (int32_t)param[0];
   17e7c:	e13ffe17 	ldw	r4,-8(fp)
   17e80:	20800017 	ldw	r2,0(r4)
   17e84:	20c00117 	ldw	r3,4(r4)
   17e88:	1009883a 	mov	r4,r2
   17e8c:	180b883a 	mov	r5,r3
   17e90:	001f23c0 	call	1f23c <__fixdfsi>
   17e94:	e0bffd15 	stw	r2,-12(fp)

	if(param_no >= 1)
   17e98:	e0bfff07 	ldb	r2,-4(fp)
   17e9c:	00801d0e 	bge	zero,r2,17f14 <set_dds_tx1_tone2_scale+0xbc>
	{
		dds_set_scale(DDS_CHAN_TX1_I_F2, scale);
   17ea0:	e13ffd17 	ldw	r4,-12(fp)
   17ea4:	001f2cc0 	call	1f2cc <__floatsidf>
   17ea8:	100d883a 	mov	r6,r2
   17eac:	180f883a 	mov	r7,r3
   17eb0:	01000044 	movi	r4,1
   17eb4:	300b883a 	mov	r5,r6
   17eb8:	380d883a 	mov	r6,r7
   17ebc:	001af480 	call	1af48 <dds_set_scale>
		dds_set_scale(DDS_CHAN_TX1_Q_F2, scale);
   17ec0:	e13ffd17 	ldw	r4,-12(fp)
   17ec4:	001f2cc0 	call	1f2cc <__floatsidf>
   17ec8:	100d883a 	mov	r6,r2
   17ecc:	180f883a 	mov	r7,r3
   17ed0:	010000c4 	movi	r4,3
   17ed4:	300b883a 	mov	r5,r6
   17ed8:	380d883a 	mov	r6,r7
   17edc:	001af480 	call	1af48 <dds_set_scale>
		scale = dds_st.cached_scale[DDS_CHAN_TX1_I_F2];
   17ee0:	010000f4 	movhi	r4,3
   17ee4:	212ae204 	addi	r4,r4,-21624
   17ee8:	20801217 	ldw	r2,72(r4)
   17eec:	20c01317 	ldw	r3,76(r4)
   17ef0:	1009883a 	mov	r4,r2
   17ef4:	180b883a 	mov	r5,r3
   17ef8:	001f23c0 	call	1f23c <__fixdfsi>
   17efc:	e0bffd15 	stw	r2,-12(fp)
		console_print("dds_tx1_tone2_scale=%d\n", scale);
   17f00:	010000f4 	movhi	r4,3
   17f04:	2123d304 	addi	r4,r4,-28852
   17f08:	e17ffd17 	ldw	r5,-12(fp)
   17f0c:	00188580 	call	18858 <console_print>
   17f10:	00000206 	br	17f1c <set_dds_tx1_tone2_scale+0xc4>
	}
	else
		show_invalid_param_message(1);
   17f14:	01000044 	movi	r4,1
   17f18:	00166fc0 	call	166fc <show_invalid_param_message>
}
   17f1c:	e037883a 	mov	sp,fp
   17f20:	dfc00117 	ldw	ra,4(sp)
   17f24:	df000017 	ldw	fp,0(sp)
   17f28:	dec00204 	addi	sp,sp,8
   17f2c:	f800283a 	ret

00017f30 <get_dds_tx2_tone1_freq>:
 * @brief Gets current DDS TX2 Tone 1 frequency [Hz].
 *
 * @return None.
*******************************************************************************/
void get_dds_tx2_tone1_freq(double* param, char param_no)	// dds_tx2_tone1_freq?
{
   17f30:	defffb04 	addi	sp,sp,-20
   17f34:	de00012e 	bgeu	sp,et,17f3c <get_dds_tx2_tone1_freq+0xc>
   17f38:	003b68fa 	trap	3
   17f3c:	dfc00415 	stw	ra,16(sp)
   17f40:	df000315 	stw	fp,12(sp)
   17f44:	df000304 	addi	fp,sp,12
   17f48:	e13ffe15 	stw	r4,-8(fp)
   17f4c:	2805883a 	mov	r2,r5
   17f50:	e0bfff05 	stb	r2,-4(fp)
	uint32_t freq = dds_st.cached_freq[DDS_CHAN_TX2_I_F1];
   17f54:	008000f4 	movhi	r2,3
   17f58:	10aae204 	addi	r2,r2,-21624
   17f5c:	10800417 	ldw	r2,16(r2)
   17f60:	e0bffd15 	stw	r2,-12(fp)

	console_print("dds_tx2_tone1_freq=%d\n", freq);
   17f64:	010000f4 	movhi	r4,3
   17f68:	2123d904 	addi	r4,r4,-28828
   17f6c:	e17ffd17 	ldw	r5,-12(fp)
   17f70:	00188580 	call	18858 <console_print>
}
   17f74:	e037883a 	mov	sp,fp
   17f78:	dfc00117 	ldw	ra,4(sp)
   17f7c:	df000017 	ldw	fp,0(sp)
   17f80:	dec00204 	addi	sp,sp,8
   17f84:	f800283a 	ret

00017f88 <set_dds_tx2_tone1_freq>:
 * @brief Sets the DDS TX2 Tone 1 frequency [Hz].
 *
 * @return None.
*******************************************************************************/
void set_dds_tx2_tone1_freq(double* param, char param_no)	// dds_tx2_tone1_freq=
{
   17f88:	defffb04 	addi	sp,sp,-20
   17f8c:	de00012e 	bgeu	sp,et,17f94 <set_dds_tx2_tone1_freq+0xc>
   17f90:	003b68fa 	trap	3
   17f94:	dfc00415 	stw	ra,16(sp)
   17f98:	df000315 	stw	fp,12(sp)
   17f9c:	df000304 	addi	fp,sp,12
   17fa0:	e13ffe15 	stw	r4,-8(fp)
   17fa4:	2805883a 	mov	r2,r5
   17fa8:	e0bfff05 	stb	r2,-4(fp)
	uint32_t freq = (uint32_t)param[0];
   17fac:	e13ffe17 	ldw	r4,-8(fp)
   17fb0:	20800017 	ldw	r2,0(r4)
   17fb4:	20c00117 	ldw	r3,4(r4)
   17fb8:	1009883a 	mov	r4,r2
   17fbc:	180b883a 	mov	r5,r3
   17fc0:	001c9fc0 	call	1c9fc <__fixunsdfsi>
   17fc4:	e0bffd15 	stw	r2,-12(fp)

	if(param_no >= 1)
   17fc8:	e0bfff07 	ldb	r2,-4(fp)
   17fcc:	00800b0e 	bge	zero,r2,17ffc <set_dds_tx2_tone1_freq+0x74>
	{
		dds_set_frequency(DDS_CHAN_TX2_I_F1, freq);
   17fd0:	01000104 	movi	r4,4
   17fd4:	e17ffd17 	ldw	r5,-12(fp)
   17fd8:	001ac700 	call	1ac70 <dds_set_frequency>
		dds_set_frequency(DDS_CHAN_TX2_Q_F1, freq);
   17fdc:	01000184 	movi	r4,6
   17fe0:	e17ffd17 	ldw	r5,-12(fp)
   17fe4:	001ac700 	call	1ac70 <dds_set_frequency>
		console_print("dds_tx2_tone1_freq=%d\n", freq);
   17fe8:	010000f4 	movhi	r4,3
   17fec:	2123d904 	addi	r4,r4,-28828
   17ff0:	e17ffd17 	ldw	r5,-12(fp)
   17ff4:	00188580 	call	18858 <console_print>
   17ff8:	00000206 	br	18004 <set_dds_tx2_tone1_freq+0x7c>
	}
	else
		show_invalid_param_message(1);
   17ffc:	01000044 	movi	r4,1
   18000:	00166fc0 	call	166fc <show_invalid_param_message>
}
   18004:	e037883a 	mov	sp,fp
   18008:	dfc00117 	ldw	ra,4(sp)
   1800c:	df000017 	ldw	fp,0(sp)
   18010:	dec00204 	addi	sp,sp,8
   18014:	f800283a 	ret

00018018 <get_dds_tx2_tone2_freq>:
 * @brief Gets current DDS TX2 Tone 2 frequency [Hz].
 *
 * @return None.
*******************************************************************************/
void get_dds_tx2_tone2_freq(double* param, char param_no)	// dds_tx2_tone2_freq?
{
   18018:	defffb04 	addi	sp,sp,-20
   1801c:	de00012e 	bgeu	sp,et,18024 <get_dds_tx2_tone2_freq+0xc>
   18020:	003b68fa 	trap	3
   18024:	dfc00415 	stw	ra,16(sp)
   18028:	df000315 	stw	fp,12(sp)
   1802c:	df000304 	addi	fp,sp,12
   18030:	e13ffe15 	stw	r4,-8(fp)
   18034:	2805883a 	mov	r2,r5
   18038:	e0bfff05 	stb	r2,-4(fp)
	uint32_t freq = dds_st.cached_freq[DDS_CHAN_TX2_I_F2];
   1803c:	008000f4 	movhi	r2,3
   18040:	10aae204 	addi	r2,r2,-21624
   18044:	10800517 	ldw	r2,20(r2)
   18048:	e0bffd15 	stw	r2,-12(fp)

	console_print("dds_tx2_tone2_freq=%d\n", freq);
   1804c:	010000f4 	movhi	r4,3
   18050:	2123df04 	addi	r4,r4,-28804
   18054:	e17ffd17 	ldw	r5,-12(fp)
   18058:	00188580 	call	18858 <console_print>
}
   1805c:	e037883a 	mov	sp,fp
   18060:	dfc00117 	ldw	ra,4(sp)
   18064:	df000017 	ldw	fp,0(sp)
   18068:	dec00204 	addi	sp,sp,8
   1806c:	f800283a 	ret

00018070 <set_dds_tx2_tone2_freq>:
 * @brief Sets the DDS TX2 Tone 2 frequency [Hz].
 *
 * @return None.
*******************************************************************************/
void set_dds_tx2_tone2_freq(double* param, char param_no)	// dds_tx2_tone2_freq=
{
   18070:	defffb04 	addi	sp,sp,-20
   18074:	de00012e 	bgeu	sp,et,1807c <set_dds_tx2_tone2_freq+0xc>
   18078:	003b68fa 	trap	3
   1807c:	dfc00415 	stw	ra,16(sp)
   18080:	df000315 	stw	fp,12(sp)
   18084:	df000304 	addi	fp,sp,12
   18088:	e13ffe15 	stw	r4,-8(fp)
   1808c:	2805883a 	mov	r2,r5
   18090:	e0bfff05 	stb	r2,-4(fp)
	uint32_t freq = (uint32_t)param[0];
   18094:	e13ffe17 	ldw	r4,-8(fp)
   18098:	20800017 	ldw	r2,0(r4)
   1809c:	20c00117 	ldw	r3,4(r4)
   180a0:	1009883a 	mov	r4,r2
   180a4:	180b883a 	mov	r5,r3
   180a8:	001c9fc0 	call	1c9fc <__fixunsdfsi>
   180ac:	e0bffd15 	stw	r2,-12(fp)

	if(param_no >= 1)
   180b0:	e0bfff07 	ldb	r2,-4(fp)
   180b4:	00800b0e 	bge	zero,r2,180e4 <set_dds_tx2_tone2_freq+0x74>
	{
		dds_set_frequency(DDS_CHAN_TX2_I_F2, freq);
   180b8:	01000144 	movi	r4,5
   180bc:	e17ffd17 	ldw	r5,-12(fp)
   180c0:	001ac700 	call	1ac70 <dds_set_frequency>
		dds_set_frequency(DDS_CHAN_TX2_Q_F2, freq);
   180c4:	010001c4 	movi	r4,7
   180c8:	e17ffd17 	ldw	r5,-12(fp)
   180cc:	001ac700 	call	1ac70 <dds_set_frequency>
		console_print("dds_tx2_tone2_freq=%d\n", freq);
   180d0:	010000f4 	movhi	r4,3
   180d4:	2123df04 	addi	r4,r4,-28804
   180d8:	e17ffd17 	ldw	r5,-12(fp)
   180dc:	00188580 	call	18858 <console_print>
   180e0:	00000206 	br	180ec <set_dds_tx2_tone2_freq+0x7c>
	}
	else
		show_invalid_param_message(1);
   180e4:	01000044 	movi	r4,1
   180e8:	00166fc0 	call	166fc <show_invalid_param_message>
}
   180ec:	e037883a 	mov	sp,fp
   180f0:	dfc00117 	ldw	ra,4(sp)
   180f4:	df000017 	ldw	fp,0(sp)
   180f8:	dec00204 	addi	sp,sp,8
   180fc:	f800283a 	ret

00018100 <get_dds_tx2_tone1_phase>:
 * @brief Gets current DDS TX2 Tone 1 phase [degrees].
 *
 * @return None.
*******************************************************************************/
void get_dds_tx2_tone1_phase(double* param, char param_no)	// dds_tx2_tone1_phase?
{
   18100:	defffb04 	addi	sp,sp,-20
   18104:	de00012e 	bgeu	sp,et,1810c <get_dds_tx2_tone1_phase+0xc>
   18108:	003b68fa 	trap	3
   1810c:	dfc00415 	stw	ra,16(sp)
   18110:	df000315 	stw	fp,12(sp)
   18114:	df000304 	addi	fp,sp,12
   18118:	e13ffe15 	stw	r4,-8(fp)
   1811c:	2805883a 	mov	r2,r5
   18120:	e0bfff05 	stb	r2,-4(fp)
	uint32_t phase = dds_st.cached_phase[DDS_CHAN_TX2_I_F1];
   18124:	008000f4 	movhi	r2,3
   18128:	10aae204 	addi	r2,r2,-21624
   1812c:	10800c17 	ldw	r2,48(r2)
   18130:	e0bffd15 	stw	r2,-12(fp)

	phase /= 1000;
   18134:	e0bffd17 	ldw	r2,-12(fp)
   18138:	1009883a 	mov	r4,r2
   1813c:	0140fa04 	movi	r5,1000
   18140:	001d7a40 	call	1d7a4 <__udivsi3>
   18144:	e0bffd15 	stw	r2,-12(fp)
	console_print("dds_tx2_tone1_phase=%d\n", phase);
   18148:	010000f4 	movhi	r4,3
   1814c:	2123e504 	addi	r4,r4,-28780
   18150:	e17ffd17 	ldw	r5,-12(fp)
   18154:	00188580 	call	18858 <console_print>
}
   18158:	e037883a 	mov	sp,fp
   1815c:	dfc00117 	ldw	ra,4(sp)
   18160:	df000017 	ldw	fp,0(sp)
   18164:	dec00204 	addi	sp,sp,8
   18168:	f800283a 	ret

0001816c <set_dds_tx2_tone1_phase>:
 * @brief Sets the DDS TX2 Tone 1 phase [degrees].
 *
 * @return None.
*******************************************************************************/
void set_dds_tx2_tone1_phase(double* param, char param_no)	// dds_tx2_tone1_phase=
{
   1816c:	defffb04 	addi	sp,sp,-20
   18170:	de00012e 	bgeu	sp,et,18178 <set_dds_tx2_tone1_phase+0xc>
   18174:	003b68fa 	trap	3
   18178:	dfc00415 	stw	ra,16(sp)
   1817c:	df000315 	stw	fp,12(sp)
   18180:	df000304 	addi	fp,sp,12
   18184:	e13ffe15 	stw	r4,-8(fp)
   18188:	2805883a 	mov	r2,r5
   1818c:	e0bfff05 	stb	r2,-4(fp)
	int32_t phase = (uint32_t)param[0];
   18190:	e13ffe17 	ldw	r4,-8(fp)
   18194:	20800017 	ldw	r2,0(r4)
   18198:	20c00117 	ldw	r3,4(r4)
   1819c:	1009883a 	mov	r4,r2
   181a0:	180b883a 	mov	r5,r3
   181a4:	001c9fc0 	call	1c9fc <__fixunsdfsi>
   181a8:	e0bffd15 	stw	r2,-12(fp)

	if(param_no >= 1)
   181ac:	e0bfff07 	ldb	r2,-4(fp)
   181b0:	00801d0e 	bge	zero,r2,18228 <set_dds_tx2_tone1_phase+0xbc>
	{
		dds_set_phase(DDS_CHAN_TX2_I_F1, (uint32_t)(phase * 1000));
   181b4:	e0bffd17 	ldw	r2,-12(fp)
   181b8:	1080fa24 	muli	r2,r2,1000
   181bc:	01000104 	movi	r4,4
   181c0:	100b883a 	mov	r5,r2
   181c4:	001ade00 	call	1ade0 <dds_set_phase>
		if ((phase - 90) < 0)
   181c8:	e0bffd17 	ldw	r2,-12(fp)
   181cc:	10bfe984 	addi	r2,r2,-90
   181d0:	1000030e 	bge	r2,zero,181e0 <set_dds_tx2_tone1_phase+0x74>
			phase += 360;
   181d4:	e0bffd17 	ldw	r2,-12(fp)
   181d8:	10805a04 	addi	r2,r2,360
   181dc:	e0bffd15 	stw	r2,-12(fp)
		dds_set_phase(DDS_CHAN_TX2_Q_F1, (uint32_t)((phase - 90) * 1000));
   181e0:	e0bffd17 	ldw	r2,-12(fp)
   181e4:	10bfe984 	addi	r2,r2,-90
   181e8:	1080fa24 	muli	r2,r2,1000
   181ec:	01000184 	movi	r4,6
   181f0:	100b883a 	mov	r5,r2
   181f4:	001ade00 	call	1ade0 <dds_set_phase>
		phase = dds_st.cached_phase[DDS_CHAN_TX2_I_F1] / 1000;
   181f8:	008000f4 	movhi	r2,3
   181fc:	10aae204 	addi	r2,r2,-21624
   18200:	10800c17 	ldw	r2,48(r2)
   18204:	1009883a 	mov	r4,r2
   18208:	0140fa04 	movi	r5,1000
   1820c:	001d7a40 	call	1d7a4 <__udivsi3>
   18210:	e0bffd15 	stw	r2,-12(fp)
		console_print("dds_tx2_tone1_phase=%d\n", phase);
   18214:	010000f4 	movhi	r4,3
   18218:	2123e504 	addi	r4,r4,-28780
   1821c:	e17ffd17 	ldw	r5,-12(fp)
   18220:	00188580 	call	18858 <console_print>
   18224:	00000206 	br	18230 <set_dds_tx2_tone1_phase+0xc4>
	}
	else
		show_invalid_param_message(1);
   18228:	01000044 	movi	r4,1
   1822c:	00166fc0 	call	166fc <show_invalid_param_message>
}
   18230:	e037883a 	mov	sp,fp
   18234:	dfc00117 	ldw	ra,4(sp)
   18238:	df000017 	ldw	fp,0(sp)
   1823c:	dec00204 	addi	sp,sp,8
   18240:	f800283a 	ret

00018244 <get_dds_tx2_tone2_phase>:
 * @brief Gets current DDS TX2 Tone 2 phase [degrees].
 *
 * @return None.
*******************************************************************************/
void get_dds_tx2_tone2_phase(double* param, char param_no)	// dds_tx2_tone2_phase?
{
   18244:	defffb04 	addi	sp,sp,-20
   18248:	de00012e 	bgeu	sp,et,18250 <get_dds_tx2_tone2_phase+0xc>
   1824c:	003b68fa 	trap	3
   18250:	dfc00415 	stw	ra,16(sp)
   18254:	df000315 	stw	fp,12(sp)
   18258:	df000304 	addi	fp,sp,12
   1825c:	e13ffe15 	stw	r4,-8(fp)
   18260:	2805883a 	mov	r2,r5
   18264:	e0bfff05 	stb	r2,-4(fp)
	uint32_t phase = dds_st.cached_phase[DDS_CHAN_TX2_I_F2];
   18268:	008000f4 	movhi	r2,3
   1826c:	10aae204 	addi	r2,r2,-21624
   18270:	10800d17 	ldw	r2,52(r2)
   18274:	e0bffd15 	stw	r2,-12(fp)

	phase /= 1000;
   18278:	e0bffd17 	ldw	r2,-12(fp)
   1827c:	1009883a 	mov	r4,r2
   18280:	0140fa04 	movi	r5,1000
   18284:	001d7a40 	call	1d7a4 <__udivsi3>
   18288:	e0bffd15 	stw	r2,-12(fp)
	console_print("dds_tx2_f2_phase=%d\n", phase);
   1828c:	010000f4 	movhi	r4,3
   18290:	2123eb04 	addi	r4,r4,-28756
   18294:	e17ffd17 	ldw	r5,-12(fp)
   18298:	00188580 	call	18858 <console_print>
}
   1829c:	e037883a 	mov	sp,fp
   182a0:	dfc00117 	ldw	ra,4(sp)
   182a4:	df000017 	ldw	fp,0(sp)
   182a8:	dec00204 	addi	sp,sp,8
   182ac:	f800283a 	ret

000182b0 <set_dds_tx2_tone2_phase>:
 * @brief Sets the DDS TX2 Tone 2 phase [degrees].
 *
 * @return None.
*******************************************************************************/
void set_dds_tx2_tone2_phase(double* param, char param_no)	// dds_tx2_tone2_phase=
{
   182b0:	defffb04 	addi	sp,sp,-20
   182b4:	de00012e 	bgeu	sp,et,182bc <set_dds_tx2_tone2_phase+0xc>
   182b8:	003b68fa 	trap	3
   182bc:	dfc00415 	stw	ra,16(sp)
   182c0:	df000315 	stw	fp,12(sp)
   182c4:	df000304 	addi	fp,sp,12
   182c8:	e13ffe15 	stw	r4,-8(fp)
   182cc:	2805883a 	mov	r2,r5
   182d0:	e0bfff05 	stb	r2,-4(fp)
	int32_t phase = (uint32_t)param[0];
   182d4:	e13ffe17 	ldw	r4,-8(fp)
   182d8:	20800017 	ldw	r2,0(r4)
   182dc:	20c00117 	ldw	r3,4(r4)
   182e0:	1009883a 	mov	r4,r2
   182e4:	180b883a 	mov	r5,r3
   182e8:	001c9fc0 	call	1c9fc <__fixunsdfsi>
   182ec:	e0bffd15 	stw	r2,-12(fp)

	if(param_no >= 1)
   182f0:	e0bfff07 	ldb	r2,-4(fp)
   182f4:	00801d0e 	bge	zero,r2,1836c <set_dds_tx2_tone2_phase+0xbc>
	{
		dds_set_phase(DDS_CHAN_TX2_I_F2, (uint32_t)(phase * 1000));
   182f8:	e0bffd17 	ldw	r2,-12(fp)
   182fc:	1080fa24 	muli	r2,r2,1000
   18300:	01000144 	movi	r4,5
   18304:	100b883a 	mov	r5,r2
   18308:	001ade00 	call	1ade0 <dds_set_phase>
		if ((phase - 90) < 0)
   1830c:	e0bffd17 	ldw	r2,-12(fp)
   18310:	10bfe984 	addi	r2,r2,-90
   18314:	1000030e 	bge	r2,zero,18324 <set_dds_tx2_tone2_phase+0x74>
			phase += 360;
   18318:	e0bffd17 	ldw	r2,-12(fp)
   1831c:	10805a04 	addi	r2,r2,360
   18320:	e0bffd15 	stw	r2,-12(fp)
		dds_set_phase(DDS_CHAN_TX2_Q_F2, (uint32_t)((phase - 90) * 1000));
   18324:	e0bffd17 	ldw	r2,-12(fp)
   18328:	10bfe984 	addi	r2,r2,-90
   1832c:	1080fa24 	muli	r2,r2,1000
   18330:	010001c4 	movi	r4,7
   18334:	100b883a 	mov	r5,r2
   18338:	001ade00 	call	1ade0 <dds_set_phase>
		phase = dds_st.cached_phase[DDS_CHAN_TX2_I_F2] / 1000;
   1833c:	008000f4 	movhi	r2,3
   18340:	10aae204 	addi	r2,r2,-21624
   18344:	10800d17 	ldw	r2,52(r2)
   18348:	1009883a 	mov	r4,r2
   1834c:	0140fa04 	movi	r5,1000
   18350:	001d7a40 	call	1d7a4 <__udivsi3>
   18354:	e0bffd15 	stw	r2,-12(fp)
		console_print("dds_tx2_tone2_phase=%d\n", phase);
   18358:	010000f4 	movhi	r4,3
   1835c:	2123f104 	addi	r4,r4,-28732
   18360:	e17ffd17 	ldw	r5,-12(fp)
   18364:	00188580 	call	18858 <console_print>
   18368:	00000206 	br	18374 <set_dds_tx2_tone2_phase+0xc4>
	}
	else
		show_invalid_param_message(1);
   1836c:	01000044 	movi	r4,1
   18370:	00166fc0 	call	166fc <show_invalid_param_message>
}
   18374:	e037883a 	mov	sp,fp
   18378:	dfc00117 	ldw	ra,4(sp)
   1837c:	df000017 	ldw	fp,0(sp)
   18380:	dec00204 	addi	sp,sp,8
   18384:	f800283a 	ret

00018388 <get_dds_tx2_tone1_scale>:
 * @brief Gets current DDS TX2 Tone 1 scale.
 *
 * @return None.
*******************************************************************************/
void get_dds_tx2_tone1_scale(double* param, char param_no)	// dds_tx2_tone1_scale?
{
   18388:	defffb04 	addi	sp,sp,-20
   1838c:	de00012e 	bgeu	sp,et,18394 <get_dds_tx2_tone1_scale+0xc>
   18390:	003b68fa 	trap	3
   18394:	dfc00415 	stw	ra,16(sp)
   18398:	df000315 	stw	fp,12(sp)
   1839c:	df000304 	addi	fp,sp,12
   183a0:	e13ffe15 	stw	r4,-8(fp)
   183a4:	2805883a 	mov	r2,r5
   183a8:	e0bfff05 	stb	r2,-4(fp)
	int32_t scale = dds_st.cached_scale[DDS_CHAN_TX2_I_F1];
   183ac:	010000f4 	movhi	r4,3
   183b0:	212ae204 	addi	r4,r4,-21624
   183b4:	20801817 	ldw	r2,96(r4)
   183b8:	20c01917 	ldw	r3,100(r4)
   183bc:	1009883a 	mov	r4,r2
   183c0:	180b883a 	mov	r5,r3
   183c4:	001f23c0 	call	1f23c <__fixdfsi>
   183c8:	e0bffd15 	stw	r2,-12(fp)

	console_print("dds_tx2_tone1_scale=%d\n", scale);
   183cc:	010000f4 	movhi	r4,3
   183d0:	2123f704 	addi	r4,r4,-28708
   183d4:	e17ffd17 	ldw	r5,-12(fp)
   183d8:	00188580 	call	18858 <console_print>
}
   183dc:	e037883a 	mov	sp,fp
   183e0:	dfc00117 	ldw	ra,4(sp)
   183e4:	df000017 	ldw	fp,0(sp)
   183e8:	dec00204 	addi	sp,sp,8
   183ec:	f800283a 	ret

000183f0 <set_dds_tx2_tone1_scale>:
 * @brief Sets the DDS TX2 Tone 1 scale.
 *
 * @return None.
*******************************************************************************/
void set_dds_tx2_tone1_scale(double* param, char param_no)	// dds_tx2_tone1_scale=
{
   183f0:	defffb04 	addi	sp,sp,-20
   183f4:	de00012e 	bgeu	sp,et,183fc <set_dds_tx2_tone1_scale+0xc>
   183f8:	003b68fa 	trap	3
   183fc:	dfc00415 	stw	ra,16(sp)
   18400:	df000315 	stw	fp,12(sp)
   18404:	df000304 	addi	fp,sp,12
   18408:	e13ffe15 	stw	r4,-8(fp)
   1840c:	2805883a 	mov	r2,r5
   18410:	e0bfff05 	stb	r2,-4(fp)
	int32_t scale = (int32_t)param[0];
   18414:	e13ffe17 	ldw	r4,-8(fp)
   18418:	20800017 	ldw	r2,0(r4)
   1841c:	20c00117 	ldw	r3,4(r4)
   18420:	1009883a 	mov	r4,r2
   18424:	180b883a 	mov	r5,r3
   18428:	001f23c0 	call	1f23c <__fixdfsi>
   1842c:	e0bffd15 	stw	r2,-12(fp)

	if(param_no >= 1)
   18430:	e0bfff07 	ldb	r2,-4(fp)
   18434:	00801d0e 	bge	zero,r2,184ac <set_dds_tx2_tone1_scale+0xbc>
	{
		dds_set_scale(DDS_CHAN_TX2_I_F1, scale);
   18438:	e13ffd17 	ldw	r4,-12(fp)
   1843c:	001f2cc0 	call	1f2cc <__floatsidf>
   18440:	100d883a 	mov	r6,r2
   18444:	180f883a 	mov	r7,r3
   18448:	01000104 	movi	r4,4
   1844c:	300b883a 	mov	r5,r6
   18450:	380d883a 	mov	r6,r7
   18454:	001af480 	call	1af48 <dds_set_scale>
		dds_set_scale(DDS_CHAN_TX2_Q_F1, scale);
   18458:	e13ffd17 	ldw	r4,-12(fp)
   1845c:	001f2cc0 	call	1f2cc <__floatsidf>
   18460:	100d883a 	mov	r6,r2
   18464:	180f883a 	mov	r7,r3
   18468:	01000184 	movi	r4,6
   1846c:	300b883a 	mov	r5,r6
   18470:	380d883a 	mov	r6,r7
   18474:	001af480 	call	1af48 <dds_set_scale>
		scale = dds_st.cached_scale[DDS_CHAN_TX2_I_F1];
   18478:	010000f4 	movhi	r4,3
   1847c:	212ae204 	addi	r4,r4,-21624
   18480:	20801817 	ldw	r2,96(r4)
   18484:	20c01917 	ldw	r3,100(r4)
   18488:	1009883a 	mov	r4,r2
   1848c:	180b883a 	mov	r5,r3
   18490:	001f23c0 	call	1f23c <__fixdfsi>
   18494:	e0bffd15 	stw	r2,-12(fp)
		console_print("dds_tx2_tone1_scale=%d\n", scale);
   18498:	010000f4 	movhi	r4,3
   1849c:	2123f704 	addi	r4,r4,-28708
   184a0:	e17ffd17 	ldw	r5,-12(fp)
   184a4:	00188580 	call	18858 <console_print>
   184a8:	00000206 	br	184b4 <set_dds_tx2_tone1_scale+0xc4>
	}
	else
		show_invalid_param_message(1);
   184ac:	01000044 	movi	r4,1
   184b0:	00166fc0 	call	166fc <show_invalid_param_message>
}
   184b4:	e037883a 	mov	sp,fp
   184b8:	dfc00117 	ldw	ra,4(sp)
   184bc:	df000017 	ldw	fp,0(sp)
   184c0:	dec00204 	addi	sp,sp,8
   184c4:	f800283a 	ret

000184c8 <dds_tx2_tone2_scale>:
 * @brief Gets current DDS TX2 Tone 2 scale.
 *
 * @return None.
*******************************************************************************/
void dds_tx2_tone2_scale(double* param, char param_no)	// dds_tx2_tone2_scale?
{
   184c8:	defffb04 	addi	sp,sp,-20
   184cc:	de00012e 	bgeu	sp,et,184d4 <dds_tx2_tone2_scale+0xc>
   184d0:	003b68fa 	trap	3
   184d4:	dfc00415 	stw	ra,16(sp)
   184d8:	df000315 	stw	fp,12(sp)
   184dc:	df000304 	addi	fp,sp,12
   184e0:	e13ffe15 	stw	r4,-8(fp)
   184e4:	2805883a 	mov	r2,r5
   184e8:	e0bfff05 	stb	r2,-4(fp)
	int32_t scale = dds_st.cached_scale[DDS_CHAN_TX2_I_F2];
   184ec:	010000f4 	movhi	r4,3
   184f0:	212ae204 	addi	r4,r4,-21624
   184f4:	20801a17 	ldw	r2,104(r4)
   184f8:	20c01b17 	ldw	r3,108(r4)
   184fc:	1009883a 	mov	r4,r2
   18500:	180b883a 	mov	r5,r3
   18504:	001f23c0 	call	1f23c <__fixdfsi>
   18508:	e0bffd15 	stw	r2,-12(fp)

	console_print("dds_tx2_tone2_scale=%d\n", scale);
   1850c:	010000f4 	movhi	r4,3
   18510:	2123fd04 	addi	r4,r4,-28684
   18514:	e17ffd17 	ldw	r5,-12(fp)
   18518:	00188580 	call	18858 <console_print>
}
   1851c:	e037883a 	mov	sp,fp
   18520:	dfc00117 	ldw	ra,4(sp)
   18524:	df000017 	ldw	fp,0(sp)
   18528:	dec00204 	addi	sp,sp,8
   1852c:	f800283a 	ret

00018530 <set_dds_tx2_tone2_scale>:
 * @brief Sets the DDS TX2 Tone 2 scale.
 *
 * @return None.
*******************************************************************************/
void set_dds_tx2_tone2_scale(double* param, char param_no)	// dds_tx2_tone2_scale=
{
   18530:	defffb04 	addi	sp,sp,-20
   18534:	de00012e 	bgeu	sp,et,1853c <set_dds_tx2_tone2_scale+0xc>
   18538:	003b68fa 	trap	3
   1853c:	dfc00415 	stw	ra,16(sp)
   18540:	df000315 	stw	fp,12(sp)
   18544:	df000304 	addi	fp,sp,12
   18548:	e13ffe15 	stw	r4,-8(fp)
   1854c:	2805883a 	mov	r2,r5
   18550:	e0bfff05 	stb	r2,-4(fp)
	int32_t scale = (int32_t)param[0];
   18554:	e13ffe17 	ldw	r4,-8(fp)
   18558:	20800017 	ldw	r2,0(r4)
   1855c:	20c00117 	ldw	r3,4(r4)
   18560:	1009883a 	mov	r4,r2
   18564:	180b883a 	mov	r5,r3
   18568:	001f23c0 	call	1f23c <__fixdfsi>
   1856c:	e0bffd15 	stw	r2,-12(fp)

	if(param_no >= 1)
   18570:	e0bfff07 	ldb	r2,-4(fp)
   18574:	00801d0e 	bge	zero,r2,185ec <set_dds_tx2_tone2_scale+0xbc>
	{
		dds_set_scale(DDS_CHAN_TX2_I_F2, scale);
   18578:	e13ffd17 	ldw	r4,-12(fp)
   1857c:	001f2cc0 	call	1f2cc <__floatsidf>
   18580:	100d883a 	mov	r6,r2
   18584:	180f883a 	mov	r7,r3
   18588:	01000144 	movi	r4,5
   1858c:	300b883a 	mov	r5,r6
   18590:	380d883a 	mov	r6,r7
   18594:	001af480 	call	1af48 <dds_set_scale>
		dds_set_scale(DDS_CHAN_TX2_Q_F2, scale);
   18598:	e13ffd17 	ldw	r4,-12(fp)
   1859c:	001f2cc0 	call	1f2cc <__floatsidf>
   185a0:	100d883a 	mov	r6,r2
   185a4:	180f883a 	mov	r7,r3
   185a8:	010001c4 	movi	r4,7
   185ac:	300b883a 	mov	r5,r6
   185b0:	380d883a 	mov	r6,r7
   185b4:	001af480 	call	1af48 <dds_set_scale>
		scale = dds_st.cached_scale[DDS_CHAN_TX2_I_F2];
   185b8:	010000f4 	movhi	r4,3
   185bc:	212ae204 	addi	r4,r4,-21624
   185c0:	20801a17 	ldw	r2,104(r4)
   185c4:	20c01b17 	ldw	r3,108(r4)
   185c8:	1009883a 	mov	r4,r2
   185cc:	180b883a 	mov	r5,r3
   185d0:	001f23c0 	call	1f23c <__fixdfsi>
   185d4:	e0bffd15 	stw	r2,-12(fp)
		console_print("dds_tx2_tone2_scale=%d\n", scale);
   185d8:	010000f4 	movhi	r4,3
   185dc:	2123fd04 	addi	r4,r4,-28684
   185e0:	e17ffd17 	ldw	r5,-12(fp)
   185e4:	00188580 	call	18858 <console_print>
   185e8:	00000206 	br	185f4 <set_dds_tx2_tone2_scale+0xc4>
	}
	else
		show_invalid_param_message(1);
   185ec:	01000044 	movi	r4,1
   185f0:	00166fc0 	call	166fc <show_invalid_param_message>
}
   185f4:	e037883a 	mov	sp,fp
   185f8:	dfc00117 	ldw	ra,4(sp)
   185fc:	df000017 	ldw	fp,0(sp)
   18600:	dec00204 	addi	sp,sp,8
   18604:	f800283a 	ret

00018608 <uart_init>:
 *                   Example: 0 - if initialization was successful;
 *                           -1 - if initialization was unsuccessful.
 *
*******************************************************************************/
char uart_init(unsigned long baudRate)
{
   18608:	defffe04 	addi	sp,sp,-8
   1860c:	de00012e 	bgeu	sp,et,18614 <uart_init+0xc>
   18610:	003b68fa 	trap	3
   18614:	df000115 	stw	fp,4(sp)
   18618:	df000104 	addi	fp,sp,4
   1861c:	e13fff15 	stw	r4,-4(fp)
	return 0;
   18620:	0005883a 	mov	r2,zero
}
   18624:	e037883a 	mov	sp,fp
   18628:	df000017 	ldw	fp,0(sp)
   1862c:	dec00104 	addi	sp,sp,4
   18630:	f800283a 	ret

00018634 <uart_write_char>:
 * @param data - Character to write.
 *
 * @return None.
*******************************************************************************/
void uart_write_char(char data)
{
   18634:	defffd04 	addi	sp,sp,-12
   18638:	de00012e 	bgeu	sp,et,18640 <uart_write_char+0xc>
   1863c:	003b68fa 	trap	3
   18640:	dfc00215 	stw	ra,8(sp)
   18644:	df000115 	stw	fp,4(sp)
   18648:	df000104 	addi	fp,sp,4
   1864c:	2005883a 	mov	r2,r4
   18650:	e0bfff05 	stb	r2,-4(fp)
	putchar(data);
   18654:	e0ffff07 	ldb	r3,-4(fp)
   18658:	008000f4 	movhi	r2,3
   1865c:	10a84c04 	addi	r2,r2,-24272
   18660:	10800017 	ldw	r2,0(r2)
   18664:	10800217 	ldw	r2,8(r2)
   18668:	1809883a 	mov	r4,r3
   1866c:	100b883a 	mov	r5,r2
   18670:	001f86c0 	call	1f86c <putc>
}
   18674:	e037883a 	mov	sp,fp
   18678:	dfc00117 	ldw	ra,4(sp)
   1867c:	df000017 	ldw	fp,0(sp)
   18680:	dec00204 	addi	sp,sp,8
   18684:	f800283a 	ret

00018688 <uart_read_char>:
 * @return received_char   - Read character.
 *
 * Note: Blocking function - Waits until get a valid data.
*******************************************************************************/
void uart_read_char(char * data)
{
   18688:	defffe04 	addi	sp,sp,-8
   1868c:	de00012e 	bgeu	sp,et,18694 <uart_read_char+0xc>
   18690:	003b68fa 	trap	3
   18694:	df000115 	stw	fp,4(sp)
   18698:	df000104 	addi	fp,sp,4
   1869c:	e13fff15 	stw	r4,-4(fp)
	//*data = getchar();
}
   186a0:	e037883a 	mov	sp,fp
   186a4:	df000017 	ldw	fp,0(sp)
   186a8:	dec00104 	addi	sp,sp,4
   186ac:	f800283a 	ret

000186b0 <uart_write_string>:
 * @param data - Character to write.
 *
 * @return None.
*******************************************************************************/
void uart_write_string(const char* string)
{
   186b0:	defffd04 	addi	sp,sp,-12
   186b4:	de00012e 	bgeu	sp,et,186bc <uart_write_string+0xc>
   186b8:	003b68fa 	trap	3
   186bc:	dfc00215 	stw	ra,8(sp)
   186c0:	df000115 	stw	fp,4(sp)
   186c4:	df000104 	addi	fp,sp,4
   186c8:	e13fff15 	stw	r4,-4(fp)
	while(*string)
   186cc:	00000906 	br	186f4 <uart_write_string+0x44>
	{
		uart_write_char(*string++);
   186d0:	e0bfff17 	ldw	r2,-4(fp)
   186d4:	10c00044 	addi	r3,r2,1
   186d8:	e0ffff15 	stw	r3,-4(fp)
   186dc:	10800003 	ldbu	r2,0(r2)
   186e0:	10803fcc 	andi	r2,r2,255
   186e4:	1080201c 	xori	r2,r2,128
   186e8:	10bfe004 	addi	r2,r2,-128
   186ec:	1009883a 	mov	r4,r2
   186f0:	00186340 	call	18634 <uart_write_char>
 *
 * @return None.
*******************************************************************************/
void uart_write_string(const char* string)
{
	while(*string)
   186f4:	e0bfff17 	ldw	r2,-4(fp)
   186f8:	10800003 	ldbu	r2,0(r2)
   186fc:	10803fcc 	andi	r2,r2,255
   18700:	1080201c 	xori	r2,r2,128
   18704:	10bfe004 	addi	r2,r2,-128
   18708:	103ff11e 	bne	r2,zero,186d0 <_gp+0xfffe65b0>
	{
		uart_write_char(*string++);
	}
}
   1870c:	e037883a 	mov	sp,fp
   18710:	dfc00117 	ldw	ra,4(sp)
   18714:	df000017 	ldw	fp,0(sp)
   18718:	dec00204 	addi	sp,sp,8
   1871c:	f800283a 	ret

00018720 <int_to_str>:
 *                 string.
 *
 * @return Pointer to the string of ASCII characters.
*******************************************************************************/
char *int_to_str(long number, char base)
{
   18720:	defff304 	addi	sp,sp,-52
   18724:	de00012e 	bgeu	sp,et,1872c <int_to_str+0xc>
   18728:	003b68fa 	trap	3
   1872c:	dfc00c15 	stw	ra,48(sp)
   18730:	df000b15 	stw	fp,44(sp)
   18734:	dc000a15 	stw	r16,40(sp)
   18738:	df000b04 	addi	fp,sp,44
   1873c:	e13ffd15 	stw	r4,-12(fp)
   18740:	2805883a 	mov	r2,r5
   18744:	e0bffe05 	stb	r2,-8(fp)
	unsigned long pos_number = 0;
   18748:	e03ff515 	stw	zero,-44(fp)
	char		  neg_sign   = 0;
   1874c:	e03ff605 	stb	zero,-40(fp)
	const char	  digits[17] = "0123456789ABCDEF";
   18750:	008cccb4 	movhi	r2,13106
   18754:	108c4c04 	addi	r2,r2,12592
   18758:	e0bff815 	stw	r2,-32(fp)
   1875c:	008dcdb4 	movhi	r2,14134
   18760:	108d4d04 	addi	r2,r2,13620
   18764:	e0bff915 	stw	r2,-28(fp)
   18768:	00909074 	movhi	r2,16961
   1876c:	108e4e04 	addi	r2,r2,14648
   18770:	e0bffa15 	stw	r2,-24(fp)
   18774:	00919174 	movhi	r2,17989
   18778:	109110c4 	addi	r2,r2,17475
   1877c:	e0bffb15 	stw	r2,-20(fp)
   18780:	e03ffc05 	stb	zero,-16(fp)
	static char   buffer[17] = "                ";
	char*		  buffer_ptr = &buffer[16];
   18784:	008000f4 	movhi	r2,3
   18788:	10a6c404 	addi	r2,r2,-25840
   1878c:	e0bff715 	stw	r2,-36(fp)

	if((number < 0) && (base == 10))
   18790:	e0bffd17 	ldw	r2,-12(fp)
   18794:	1000090e 	bge	r2,zero,187bc <int_to_str+0x9c>
   18798:	e0bffe07 	ldb	r2,-8(fp)
   1879c:	10800298 	cmpnei	r2,r2,10
   187a0:	1000061e 	bne	r2,zero,187bc <int_to_str+0x9c>
	{
		neg_sign = 1;
   187a4:	00800044 	movi	r2,1
   187a8:	e0bff605 	stb	r2,-40(fp)
		pos_number = -1 * number;
   187ac:	e0bffd17 	ldw	r2,-12(fp)
   187b0:	0085c83a 	sub	r2,zero,r2
   187b4:	e0bff515 	stw	r2,-44(fp)
   187b8:	00000206 	br	187c4 <int_to_str+0xa4>
	}
	else
	{
		pos_number = (unsigned long)number;
   187bc:	e0bffd17 	ldw	r2,-12(fp)
   187c0:	e0bff515 	stw	r2,-44(fp)
	}
	do
	{
		*buffer_ptr-- = digits[pos_number % base];
   187c4:	e43ff717 	ldw	r16,-36(fp)
   187c8:	80bfffc4 	addi	r2,r16,-1
   187cc:	e0bff715 	stw	r2,-36(fp)
   187d0:	e0bffe07 	ldb	r2,-8(fp)
   187d4:	e0fff517 	ldw	r3,-44(fp)
   187d8:	1809883a 	mov	r4,r3
   187dc:	100b883a 	mov	r5,r2
   187e0:	001d7b40 	call	1d7b4 <__umodsi3>
   187e4:	1007883a 	mov	r3,r2
   187e8:	e0bff804 	addi	r2,fp,-32
   187ec:	10c5883a 	add	r2,r2,r3
   187f0:	10800003 	ldbu	r2,0(r2)
   187f4:	80800005 	stb	r2,0(r16)
		pos_number /= base;
   187f8:	e0bffe07 	ldb	r2,-8(fp)
   187fc:	e13ff517 	ldw	r4,-44(fp)
   18800:	100b883a 	mov	r5,r2
   18804:	001d7a40 	call	1d7a4 <__udivsi3>
   18808:	e0bff515 	stw	r2,-44(fp)
	}
	while(pos_number != 0);
   1880c:	e0bff517 	ldw	r2,-44(fp)
   18810:	103fec1e 	bne	r2,zero,187c4 <_gp+0xfffe66a4>
	if(neg_sign)
   18814:	e0bff607 	ldb	r2,-40(fp)
   18818:	10000526 	beq	r2,zero,18830 <int_to_str+0x110>
	{
		*buffer_ptr-- = '-';
   1881c:	e0bff717 	ldw	r2,-36(fp)
   18820:	10ffffc4 	addi	r3,r2,-1
   18824:	e0fff715 	stw	r3,-36(fp)
   18828:	00c00b44 	movi	r3,45
   1882c:	10c00005 	stb	r3,0(r2)
	}
	*buffer_ptr++;
   18830:	e0bff717 	ldw	r2,-36(fp)
   18834:	10800044 	addi	r2,r2,1
   18838:	e0bff715 	stw	r2,-36(fp)

	return buffer_ptr;
   1883c:	e0bff717 	ldw	r2,-36(fp)
}
   18840:	e6ffff04 	addi	sp,fp,-4
   18844:	dfc00217 	ldw	ra,8(sp)
   18848:	df000117 	ldw	fp,4(sp)
   1884c:	dc000017 	ldw	r16,0(sp)
   18850:	dec00304 	addi	sp,sp,12
   18854:	f800283a 	ret

00018858 <console_print>:
 * @param str - String to be printed.
 *
 * @return None.
*******************************************************************************/
void console_print(char* str, ...)
{
   18858:	deffef04 	addi	sp,sp,-68
   1885c:	de00012e 	bgeu	sp,et,18864 <console_print+0xc>
   18860:	003b68fa 	trap	3
   18864:	dfc00d15 	stw	ra,52(sp)
   18868:	df000c15 	stw	fp,48(sp)
   1886c:	df000c04 	addi	fp,sp,48
   18870:	e1400215 	stw	r5,8(fp)
   18874:	e1800315 	stw	r6,12(fp)
   18878:	e1c00415 	stw	r7,16(fp)
   1887c:	e13fff15 	stw	r4,-4(fp)
	char*		  string_ptr;
	char		  first_param  = 0;
   18880:	e03ff505 	stb	zero,-44(fp)
	char		  second_param = 0;
   18884:	e03ff545 	stb	zero,-43(fp)
	unsigned long x_mask	   = 0;
   18888:	e03ff615 	stw	zero,-40(fp)
	unsigned long d_mask	   = 0;
   1888c:	e03ff715 	stw	zero,-36(fp)
	char		  ch_number	   = 0;
   18890:	e03ff805 	stb	zero,-32(fp)
	unsigned long multiplier   = 1;
   18894:	00800044 	movi	r2,1
   18898:	e0bff915 	stw	r2,-28(fp)
	char*		  str_arg;
	long		  long_arg;
	double		  double_arg;
	va_list		  argp;

	va_start(argp, str);
   1889c:	e0800204 	addi	r2,fp,8
   188a0:	e0bffe15 	stw	r2,-8(fp)
	for(string_ptr = str; *string_ptr != '\0'; string_ptr++)
   188a4:	e0bfff17 	ldw	r2,-4(fp)
   188a8:	e0bff415 	stw	r2,-48(fp)
   188ac:	00013206 	br	18d78 <console_print+0x520>
	{
		if(*string_ptr!='%')
   188b0:	e0bff417 	ldw	r2,-48(fp)
   188b4:	10800003 	ldbu	r2,0(r2)
   188b8:	10803fcc 	andi	r2,r2,255
   188bc:	1080201c 	xori	r2,r2,128
   188c0:	10bfe004 	addi	r2,r2,-128
   188c4:	10800960 	cmpeqi	r2,r2,37
   188c8:	1000081e 	bne	r2,zero,188ec <console_print+0x94>
		{
			uart_write_char(*string_ptr);
   188cc:	e0bff417 	ldw	r2,-48(fp)
   188d0:	10800003 	ldbu	r2,0(r2)
   188d4:	10803fcc 	andi	r2,r2,255
   188d8:	1080201c 	xori	r2,r2,128
   188dc:	10bfe004 	addi	r2,r2,-128
   188e0:	1009883a 	mov	r4,r2
   188e4:	00186340 	call	18634 <uart_write_char>
			continue;
   188e8:	00012006 	br	18d6c <console_print+0x514>
		}
		string_ptr++;
   188ec:	e0bff417 	ldw	r2,-48(fp)
   188f0:	10800044 	addi	r2,r2,1
   188f4:	e0bff415 	stw	r2,-48(fp)
		first_param = 0;
   188f8:	e03ff505 	stb	zero,-44(fp)
		while((*string_ptr >= 0x30) & (*string_ptr <= 0x39))
   188fc:	00000d06 	br	18934 <console_print+0xdc>
		{
			first_param *= 10;
   18900:	e0bff503 	ldbu	r2,-44(fp)
   18904:	108002a4 	muli	r2,r2,10
   18908:	e0bff505 	stb	r2,-44(fp)
			first_param += (*string_ptr - 0x30);
   1890c:	e0bff417 	ldw	r2,-48(fp)
   18910:	10800003 	ldbu	r2,0(r2)
   18914:	1007883a 	mov	r3,r2
   18918:	e0bff503 	ldbu	r2,-44(fp)
   1891c:	1885883a 	add	r2,r3,r2
   18920:	10bff404 	addi	r2,r2,-48
   18924:	e0bff505 	stb	r2,-44(fp)
			string_ptr++;
   18928:	e0bff417 	ldw	r2,-48(fp)
   1892c:	10800044 	addi	r2,r2,1
   18930:	e0bff415 	stw	r2,-48(fp)
			uart_write_char(*string_ptr);
			continue;
		}
		string_ptr++;
		first_param = 0;
		while((*string_ptr >= 0x30) & (*string_ptr <= 0x39))
   18934:	e0bff417 	ldw	r2,-48(fp)
   18938:	10800003 	ldbu	r2,0(r2)
   1893c:	10803fcc 	andi	r2,r2,255
   18940:	1080201c 	xori	r2,r2,128
   18944:	10bfe004 	addi	r2,r2,-128
   18948:	10800c08 	cmpgei	r2,r2,48
   1894c:	1007883a 	mov	r3,r2
   18950:	e0bff417 	ldw	r2,-48(fp)
   18954:	10800003 	ldbu	r2,0(r2)
   18958:	10803fcc 	andi	r2,r2,255
   1895c:	1080201c 	xori	r2,r2,128
   18960:	10bfe004 	addi	r2,r2,-128
   18964:	10800e90 	cmplti	r2,r2,58
   18968:	1884703a 	and	r2,r3,r2
   1896c:	10803fcc 	andi	r2,r2,255
   18970:	103fe31e 	bne	r2,zero,18900 <_gp+0xfffe67e0>
		{
			first_param *= 10;
			first_param += (*string_ptr - 0x30);
			string_ptr++;
		}
		if(*string_ptr == '.')
   18974:	e0bff417 	ldw	r2,-48(fp)
   18978:	10800003 	ldbu	r2,0(r2)
   1897c:	10803fcc 	andi	r2,r2,255
   18980:	1080201c 	xori	r2,r2,128
   18984:	10bfe004 	addi	r2,r2,-128
   18988:	10800b98 	cmpnei	r2,r2,46
   1898c:	1000221e 	bne	r2,zero,18a18 <console_print+0x1c0>
		{
			string_ptr++;
   18990:	e0bff417 	ldw	r2,-48(fp)
   18994:	10800044 	addi	r2,r2,1
   18998:	e0bff415 	stw	r2,-48(fp)
			second_param = 0;
   1899c:	e03ff545 	stb	zero,-43(fp)
			while((*string_ptr >= 0x30) & (*string_ptr <= 0x39))
   189a0:	00000d06 	br	189d8 <console_print+0x180>
			{
				second_param *= 10;
   189a4:	e0bff543 	ldbu	r2,-43(fp)
   189a8:	108002a4 	muli	r2,r2,10
   189ac:	e0bff545 	stb	r2,-43(fp)
				second_param += (*string_ptr - 0x30);
   189b0:	e0bff417 	ldw	r2,-48(fp)
   189b4:	10800003 	ldbu	r2,0(r2)
   189b8:	1007883a 	mov	r3,r2
   189bc:	e0bff543 	ldbu	r2,-43(fp)
   189c0:	1885883a 	add	r2,r3,r2
   189c4:	10bff404 	addi	r2,r2,-48
   189c8:	e0bff545 	stb	r2,-43(fp)
				string_ptr++;
   189cc:	e0bff417 	ldw	r2,-48(fp)
   189d0:	10800044 	addi	r2,r2,1
   189d4:	e0bff415 	stw	r2,-48(fp)
		}
		if(*string_ptr == '.')
		{
			string_ptr++;
			second_param = 0;
			while((*string_ptr >= 0x30) & (*string_ptr <= 0x39))
   189d8:	e0bff417 	ldw	r2,-48(fp)
   189dc:	10800003 	ldbu	r2,0(r2)
   189e0:	10803fcc 	andi	r2,r2,255
   189e4:	1080201c 	xori	r2,r2,128
   189e8:	10bfe004 	addi	r2,r2,-128
   189ec:	10800c08 	cmpgei	r2,r2,48
   189f0:	1007883a 	mov	r3,r2
   189f4:	e0bff417 	ldw	r2,-48(fp)
   189f8:	10800003 	ldbu	r2,0(r2)
   189fc:	10803fcc 	andi	r2,r2,255
   18a00:	1080201c 	xori	r2,r2,128
   18a04:	10bfe004 	addi	r2,r2,-128
   18a08:	10800e90 	cmplti	r2,r2,58
   18a0c:	1884703a 	and	r2,r3,r2
   18a10:	10803fcc 	andi	r2,r2,255
   18a14:	103fe31e 	bne	r2,zero,189a4 <_gp+0xfffe6884>
				second_param *= 10;
				second_param += (*string_ptr - 0x30);
				string_ptr++;
			}
		}
		switch(*string_ptr)
   18a18:	e0bff417 	ldw	r2,-48(fp)
   18a1c:	10800003 	ldbu	r2,0(r2)
   18a20:	10803fcc 	andi	r2,r2,255
   18a24:	1080201c 	xori	r2,r2,128
   18a28:	10bfe004 	addi	r2,r2,-128
   18a2c:	10bfe744 	addi	r2,r2,-99
   18a30:	10c005a8 	cmpgeui	r3,r2,22
   18a34:	1800cd1e 	bne	r3,zero,18d6c <console_print+0x514>
   18a38:	100690ba 	slli	r3,r2,2
   18a3c:	008000b4 	movhi	r2,2
   18a40:	10a29404 	addi	r2,r2,-30128
   18a44:	1885883a 	add	r2,r3,r2
   18a48:	10800017 	ldw	r2,0(r2)
   18a4c:	1000683a 	jmp	r2
   18a50:	00018aa8 	cmpgeui	zero,zero,1578
   18a54:	00018af8 	rdprs	zero,zero,1579
   18a58:	00018d6c 	andhi	zero,zero,1589
   18a5c:	00018bb8 	rdprs	zero,zero,1582
   18a60:	00018d6c 	andhi	zero,zero,1589
   18a64:	00018d6c 	andhi	zero,zero,1589
   18a68:	00018d6c 	andhi	zero,zero,1589
   18a6c:	00018d6c 	andhi	zero,zero,1589
   18a70:	00018d6c 	andhi	zero,zero,1589
   18a74:	00018d6c 	andhi	zero,zero,1589
   18a78:	00018d6c 	andhi	zero,zero,1589
   18a7c:	00018d6c 	andhi	zero,zero,1589
   18a80:	00018d6c 	andhi	zero,zero,1589
   18a84:	00018d6c 	andhi	zero,zero,1589
   18a88:	00018d6c 	andhi	zero,zero,1589
   18a8c:	00018d6c 	andhi	zero,zero,1589
   18a90:	00018ad8 	cmpnei	zero,zero,1579
   18a94:	00018d6c 	andhi	zero,zero,1589
   18a98:	00018d6c 	andhi	zero,zero,1589
   18a9c:	00018d6c 	andhi	zero,zero,1589
   18aa0:	00018d6c 	andhi	zero,zero,1589
   18aa4:	00018b24 	muli	zero,zero,1580
		{
		case 'c':
			long_arg = va_arg(argp, long);
   18aa8:	e0bffe17 	ldw	r2,-8(fp)
   18aac:	10c00104 	addi	r3,r2,4
   18ab0:	e0fffe15 	stw	r3,-8(fp)
   18ab4:	10800017 	ldw	r2,0(r2)
   18ab8:	e0bffc15 	stw	r2,-16(fp)
			uart_write_char((char)long_arg);
   18abc:	e0bffc17 	ldw	r2,-16(fp)
   18ac0:	10803fcc 	andi	r2,r2,255
   18ac4:	1080201c 	xori	r2,r2,128
   18ac8:	10bfe004 	addi	r2,r2,-128
   18acc:	1009883a 	mov	r4,r2
   18ad0:	00186340 	call	18634 <uart_write_char>
			break;
   18ad4:	0000a506 	br	18d6c <console_print+0x514>
		case 's':
			str_arg = va_arg(argp, char*);
   18ad8:	e0bffe17 	ldw	r2,-8(fp)
   18adc:	10c00104 	addi	r3,r2,4
   18ae0:	e0fffe15 	stw	r3,-8(fp)
   18ae4:	10800017 	ldw	r2,0(r2)
   18ae8:	e0bffd15 	stw	r2,-12(fp)
			uart_write_string(str_arg);
   18aec:	e13ffd17 	ldw	r4,-12(fp)
   18af0:	00186b00 	call	186b0 <uart_write_string>
			break;
   18af4:	00009d06 	br	18d6c <console_print+0x514>
		case 'd':
			long_arg = va_arg(argp, long);
   18af8:	e0bffe17 	ldw	r2,-8(fp)
   18afc:	10c00104 	addi	r3,r2,4
   18b00:	e0fffe15 	stw	r3,-8(fp)
   18b04:	10800017 	ldw	r2,0(r2)
   18b08:	e0bffc15 	stw	r2,-16(fp)
			uart_write_string(int_to_str(long_arg, 10));
   18b0c:	e13ffc17 	ldw	r4,-16(fp)
   18b10:	01400284 	movi	r5,10
   18b14:	00187200 	call	18720 <int_to_str>
   18b18:	1009883a 	mov	r4,r2
   18b1c:	00186b00 	call	186b0 <uart_write_string>
			break;
   18b20:	00009206 	br	18d6c <console_print+0x514>
		case 'x':
			long_arg = va_arg(argp, long);
   18b24:	e0bffe17 	ldw	r2,-8(fp)
   18b28:	10c00104 	addi	r3,r2,4
   18b2c:	e0fffe15 	stw	r3,-8(fp)
   18b30:	10800017 	ldw	r2,0(r2)
   18b34:	e0bffc15 	stw	r2,-16(fp)
			x_mask = 268435456;
   18b38:	00840034 	movhi	r2,4096
   18b3c:	e0bff615 	stw	r2,-40(fp)
			ch_number = 8;
   18b40:	00800204 	movi	r2,8
   18b44:	e0bff805 	stb	r2,-32(fp)
			while(x_mask > long_arg)
   18b48:	00000606 	br	18b64 <console_print+0x30c>
			{
				x_mask /= 16;
   18b4c:	e0bff617 	ldw	r2,-40(fp)
   18b50:	1004d13a 	srli	r2,r2,4
   18b54:	e0bff615 	stw	r2,-40(fp)
				ch_number--;
   18b58:	e0bff803 	ldbu	r2,-32(fp)
   18b5c:	10bfffc4 	addi	r2,r2,-1
   18b60:	e0bff805 	stb	r2,-32(fp)
			break;
		case 'x':
			long_arg = va_arg(argp, long);
			x_mask = 268435456;
			ch_number = 8;
			while(x_mask > long_arg)
   18b64:	e0fffc17 	ldw	r3,-16(fp)
   18b68:	e0bff617 	ldw	r2,-40(fp)
   18b6c:	18bff736 	bltu	r3,r2,18b4c <_gp+0xfffe6a2c>
			{
				x_mask /= 16;
				ch_number--;
			}
			while(ch_number < first_param)
   18b70:	00000506 	br	18b88 <console_print+0x330>
			{
				uart_write_char('0');
   18b74:	01000c04 	movi	r4,48
   18b78:	00186340 	call	18634 <uart_write_char>
				ch_number++;
   18b7c:	e0bff803 	ldbu	r2,-32(fp)
   18b80:	10800044 	addi	r2,r2,1
   18b84:	e0bff805 	stb	r2,-32(fp)
			while(x_mask > long_arg)
			{
				x_mask /= 16;
				ch_number--;
			}
			while(ch_number < first_param)
   18b88:	e0fff807 	ldb	r3,-32(fp)
   18b8c:	e0bff507 	ldb	r2,-44(fp)
   18b90:	18bff816 	blt	r3,r2,18b74 <_gp+0xfffe6a54>
			{
				uart_write_char('0');
				ch_number++;
			}
			if(long_arg != 0)
   18b94:	e0bffc17 	ldw	r2,-16(fp)
   18b98:	10000626 	beq	r2,zero,18bb4 <console_print+0x35c>
			{
				uart_write_string(int_to_str(long_arg, 16));
   18b9c:	e13ffc17 	ldw	r4,-16(fp)
   18ba0:	01400404 	movi	r5,16
   18ba4:	00187200 	call	18720 <int_to_str>
   18ba8:	1009883a 	mov	r4,r2
   18bac:	00186b00 	call	186b0 <uart_write_string>
			}
			break;
   18bb0:	00006e06 	br	18d6c <console_print+0x514>
   18bb4:	00006d06 	br	18d6c <console_print+0x514>
		case 'f':
			double_arg = va_arg(argp, double);
   18bb8:	e0bffe17 	ldw	r2,-8(fp)
   18bbc:	10c00204 	addi	r3,r2,8
   18bc0:	e0fffe15 	stw	r3,-8(fp)
   18bc4:	10c00017 	ldw	r3,0(r2)
   18bc8:	e0fffa15 	stw	r3,-24(fp)
   18bcc:	10800117 	ldw	r2,4(r2)
   18bd0:	e0bffb15 	stw	r2,-20(fp)
			if(second_param == 0)
   18bd4:	e0bff547 	ldb	r2,-43(fp)
   18bd8:	1000021e 	bne	r2,zero,18be4 <console_print+0x38c>
			{
				second_param = 3;
   18bdc:	008000c4 	movi	r2,3
   18be0:	e0bff545 	stb	r2,-43(fp)
			}
			ch_number = second_param;
   18be4:	e0bff543 	ldbu	r2,-43(fp)
   18be8:	e0bff805 	stb	r2,-32(fp)
			while(ch_number > 0)
   18bec:	00000606 	br	18c08 <console_print+0x3b0>
			{
				multiplier *= 10;
   18bf0:	e0bff917 	ldw	r2,-28(fp)
   18bf4:	108002a4 	muli	r2,r2,10
   18bf8:	e0bff915 	stw	r2,-28(fp)
				ch_number--;
   18bfc:	e0bff803 	ldbu	r2,-32(fp)
   18c00:	10bfffc4 	addi	r2,r2,-1
   18c04:	e0bff805 	stb	r2,-32(fp)
			if(second_param == 0)
			{
				second_param = 3;
			}
			ch_number = second_param;
			while(ch_number > 0)
   18c08:	e0bff807 	ldb	r2,-32(fp)
   18c0c:	00bff816 	blt	zero,r2,18bf0 <_gp+0xfffe6ad0>
			{
				multiplier *= 10;
				ch_number--;
			}
			double_arg *= multiplier;
   18c10:	e13ff917 	ldw	r4,-28(fp)
   18c14:	001f3a40 	call	1f3a4 <__floatunsidf>
   18c18:	100f883a 	mov	r7,r2
   18c1c:	1811883a 	mov	r8,r3
   18c20:	e13ffa17 	ldw	r4,-24(fp)
   18c24:	e17ffb17 	ldw	r5,-20(fp)
   18c28:	380d883a 	mov	r6,r7
   18c2c:	400f883a 	mov	r7,r8
   18c30:	001e2380 	call	1e238 <__muldf3>
   18c34:	1009883a 	mov	r4,r2
   18c38:	180b883a 	mov	r5,r3
   18c3c:	e13ffa15 	stw	r4,-24(fp)
   18c40:	e17ffb15 	stw	r5,-20(fp)
			if(double_arg < 0)
   18c44:	e13ffa17 	ldw	r4,-24(fp)
   18c48:	e17ffb17 	ldw	r5,-20(fp)
   18c4c:	000d883a 	mov	r6,zero
   18c50:	000f883a 	mov	r7,zero
   18c54:	001e1500 	call	1e150 <__ledf2>
   18c58:	1000070e 	bge	r2,zero,18c78 <console_print+0x420>
			{
				double_arg *= -1;
   18c5c:	e0bffa17 	ldw	r2,-24(fp)
   18c60:	e0bffa15 	stw	r2,-24(fp)
   18c64:	e0bffb17 	ldw	r2,-20(fp)
   18c68:	10a0003c 	xorhi	r2,r2,32768
   18c6c:	e0bffb15 	stw	r2,-20(fp)
				uart_write_char('-');
   18c70:	01000b44 	movi	r4,45
   18c74:	00186340 	call	18634 <uart_write_char>
			}
			long_arg = (long)double_arg;
   18c78:	e13ffa17 	ldw	r4,-24(fp)
   18c7c:	e17ffb17 	ldw	r5,-20(fp)
   18c80:	001f23c0 	call	1f23c <__fixdfsi>
   18c84:	e0bffc15 	stw	r2,-16(fp)
			uart_write_string(int_to_str((long_arg / multiplier), 10));
   18c88:	e0bffc17 	ldw	r2,-16(fp)
   18c8c:	1009883a 	mov	r4,r2
   18c90:	e17ff917 	ldw	r5,-28(fp)
   18c94:	001d7a40 	call	1d7a4 <__udivsi3>
   18c98:	1009883a 	mov	r4,r2
   18c9c:	01400284 	movi	r5,10
   18ca0:	00187200 	call	18720 <int_to_str>
   18ca4:	1009883a 	mov	r4,r2
   18ca8:	00186b00 	call	186b0 <uart_write_string>
			uart_write_char('.');
   18cac:	01000b84 	movi	r4,46
   18cb0:	00186340 	call	18634 <uart_write_char>
			d_mask = 1000000000;
   18cb4:	008ee6f4 	movhi	r2,15259
   18cb8:	10b28004 	addi	r2,r2,-13824
   18cbc:	e0bff715 	stw	r2,-36(fp)
			ch_number = 10;
   18cc0:	00800284 	movi	r2,10
   18cc4:	e0bff805 	stb	r2,-32(fp)
			while(d_mask > (long)(long_arg % multiplier))
   18cc8:	00000806 	br	18cec <console_print+0x494>
			{
				d_mask /= 10;
   18ccc:	e0bff717 	ldw	r2,-36(fp)
   18cd0:	1009883a 	mov	r4,r2
   18cd4:	01400284 	movi	r5,10
   18cd8:	001d7a40 	call	1d7a4 <__udivsi3>
   18cdc:	e0bff715 	stw	r2,-36(fp)
				ch_number--;
   18ce0:	e0bff803 	ldbu	r2,-32(fp)
   18ce4:	10bfffc4 	addi	r2,r2,-1
   18ce8:	e0bff805 	stb	r2,-32(fp)
			long_arg = (long)double_arg;
			uart_write_string(int_to_str((long_arg / multiplier), 10));
			uart_write_char('.');
			d_mask = 1000000000;
			ch_number = 10;
			while(d_mask > (long)(long_arg % multiplier))
   18cec:	e0bffc17 	ldw	r2,-16(fp)
   18cf0:	1009883a 	mov	r4,r2
   18cf4:	e17ff917 	ldw	r5,-28(fp)
   18cf8:	001d7b40 	call	1d7b4 <__umodsi3>
   18cfc:	1007883a 	mov	r3,r2
   18d00:	e0bff717 	ldw	r2,-36(fp)
   18d04:	18bff136 	bltu	r3,r2,18ccc <_gp+0xfffe6bac>
			{
				d_mask /= 10;
				ch_number--;
			}
			while(ch_number < second_param)
   18d08:	00000506 	br	18d20 <console_print+0x4c8>
			{
				uart_write_char('0');
   18d0c:	01000c04 	movi	r4,48
   18d10:	00186340 	call	18634 <uart_write_char>
				ch_number++;
   18d14:	e0bff803 	ldbu	r2,-32(fp)
   18d18:	10800044 	addi	r2,r2,1
   18d1c:	e0bff805 	stb	r2,-32(fp)
			while(d_mask > (long)(long_arg % multiplier))
			{
				d_mask /= 10;
				ch_number--;
			}
			while(ch_number < second_param)
   18d20:	e0fff807 	ldb	r3,-32(fp)
   18d24:	e0bff547 	ldb	r2,-43(fp)
   18d28:	18bff816 	blt	r3,r2,18d0c <_gp+0xfffe6bec>
			{
				uart_write_char('0');
				ch_number++;
			}
			if((long_arg % multiplier) != 0)
   18d2c:	e0bffc17 	ldw	r2,-16(fp)
   18d30:	1009883a 	mov	r4,r2
   18d34:	e17ff917 	ldw	r5,-28(fp)
   18d38:	001d7b40 	call	1d7b4 <__umodsi3>
   18d3c:	10000a26 	beq	r2,zero,18d68 <console_print+0x510>
			{
				uart_write_string(int_to_str((long_arg % multiplier), 10));
   18d40:	e0bffc17 	ldw	r2,-16(fp)
   18d44:	1009883a 	mov	r4,r2
   18d48:	e17ff917 	ldw	r5,-28(fp)
   18d4c:	001d7b40 	call	1d7b4 <__umodsi3>
   18d50:	1009883a 	mov	r4,r2
   18d54:	01400284 	movi	r5,10
   18d58:	00187200 	call	18720 <int_to_str>
   18d5c:	1009883a 	mov	r4,r2
   18d60:	00186b00 	call	186b0 <uart_write_string>
			}
			break;
   18d64:	00000006 	br	18d68 <console_print+0x510>
   18d68:	0001883a 	nop
	long		  long_arg;
	double		  double_arg;
	va_list		  argp;

	va_start(argp, str);
	for(string_ptr = str; *string_ptr != '\0'; string_ptr++)
   18d6c:	e0bff417 	ldw	r2,-48(fp)
   18d70:	10800044 	addi	r2,r2,1
   18d74:	e0bff415 	stw	r2,-48(fp)
   18d78:	e0bff417 	ldw	r2,-48(fp)
   18d7c:	10800003 	ldbu	r2,0(r2)
   18d80:	10803fcc 	andi	r2,r2,255
   18d84:	1080201c 	xori	r2,r2,128
   18d88:	10bfe004 	addi	r2,r2,-128
   18d8c:	103ec81e 	bne	r2,zero,188b0 <_gp+0xfffe6790>
			}
			break;
		}
	}
	va_end(argp);
}
   18d90:	e037883a 	mov	sp,fp
   18d94:	dfc00117 	ldw	ra,4(sp)
   18d98:	df000017 	ldw	fp,0(sp)
   18d9c:	dec00504 	addi	sp,sp,20
   18da0:	f800283a 	ret

00018da4 <console_init>:
 * @return status   - Result of the initialization procedure.
 *                    Example: -1 - if initialization was unsuccessful;
 *                              0 - if initialization was successful.
*******************************************************************************/
char console_init(unsigned long baud_rate)
{
   18da4:	defffd04 	addi	sp,sp,-12
   18da8:	de00012e 	bgeu	sp,et,18db0 <console_init+0xc>
   18dac:	003b68fa 	trap	3
   18db0:	dfc00215 	stw	ra,8(sp)
   18db4:	df000115 	stw	fp,4(sp)
   18db8:	df000104 	addi	fp,sp,4
   18dbc:	e13fff15 	stw	r4,-4(fp)
	return uart_init(baud_rate);
   18dc0:	e13fff17 	ldw	r4,-4(fp)
   18dc4:	00186080 	call	18608 <uart_init>
}
   18dc8:	e037883a 	mov	sp,fp
   18dcc:	dfc00117 	ldw	ra,4(sp)
   18dd0:	df000017 	ldw	fp,0(sp)
   18dd4:	dec00204 	addi	sp,sp,8
   18dd8:	f800283a 	ret

00018ddc <console_get_command>:
 * @param command - Read command.
 *
 * @return None.
*******************************************************************************/
void console_get_command(char* command)
{
   18ddc:	defffc04 	addi	sp,sp,-16
   18de0:	de00012e 	bgeu	sp,et,18de8 <console_get_command+0xc>
   18de4:	003b68fa 	trap	3
   18de8:	dfc00315 	stw	ra,12(sp)
   18dec:	df000215 	stw	fp,8(sp)
   18df0:	df000204 	addi	fp,sp,8
   18df4:	e13fff15 	stw	r4,-4(fp)
	char		  received_char	= 0;
   18df8:	e03ffe45 	stb	zero,-7(fp)
	unsigned char char_number	= 0;
   18dfc:	e03ffe05 	stb	zero,-8(fp)

	while((received_char != '\n') && (received_char != '\r'))
   18e00:	00000b06 	br	18e30 <console_get_command+0x54>
	{
		uart_read_char(&received_char);
   18e04:	e0bffe44 	addi	r2,fp,-7
   18e08:	1009883a 	mov	r4,r2
   18e0c:	00186880 	call	18688 <uart_read_char>
		command[char_number++] = received_char;
   18e10:	e0bffe03 	ldbu	r2,-8(fp)
   18e14:	10c00044 	addi	r3,r2,1
   18e18:	e0fffe05 	stb	r3,-8(fp)
   18e1c:	10803fcc 	andi	r2,r2,255
   18e20:	e0ffff17 	ldw	r3,-4(fp)
   18e24:	1885883a 	add	r2,r3,r2
   18e28:	e0fffe43 	ldbu	r3,-7(fp)
   18e2c:	10c00005 	stb	r3,0(r2)
void console_get_command(char* command)
{
	char		  received_char	= 0;
	unsigned char char_number	= 0;

	while((received_char != '\n') && (received_char != '\r'))
   18e30:	e0bffe43 	ldbu	r2,-7(fp)
   18e34:	10803fcc 	andi	r2,r2,255
   18e38:	1080201c 	xori	r2,r2,128
   18e3c:	10bfe004 	addi	r2,r2,-128
   18e40:	108002a0 	cmpeqi	r2,r2,10
   18e44:	1000061e 	bne	r2,zero,18e60 <console_get_command+0x84>
   18e48:	e0bffe43 	ldbu	r2,-7(fp)
   18e4c:	10803fcc 	andi	r2,r2,255
   18e50:	1080201c 	xori	r2,r2,128
   18e54:	10bfe004 	addi	r2,r2,-128
   18e58:	10800358 	cmpnei	r2,r2,13
   18e5c:	103fe91e 	bne	r2,zero,18e04 <_gp+0xfffe6ce4>
	{
		uart_read_char(&received_char);
		command[char_number++] = received_char;
	}
}
   18e60:	e037883a 	mov	sp,fp
   18e64:	dfc00117 	ldw	ra,4(sp)
   18e68:	df000017 	ldw	fp,0(sp)
   18e6c:	dec00204 	addi	sp,sp,8
   18e70:	f800283a 	ret

00018e74 <console_check_commands>:
*******************************************************************************/
int console_check_commands(char*	   received_cmd,
						   const char* expected_cmd,
						   double*	   param,
						   char*	   param_no)
{
   18e74:	deffeb04 	addi	sp,sp,-84
   18e78:	de00012e 	bgeu	sp,et,18e80 <console_check_commands+0xc>
   18e7c:	003b68fa 	trap	3
   18e80:	dfc01415 	stw	ra,80(sp)
   18e84:	df001315 	stw	fp,76(sp)
   18e88:	dd401215 	stw	r21,72(sp)
   18e8c:	dd001115 	stw	r20,68(sp)
   18e90:	dcc01015 	stw	r19,64(sp)
   18e94:	dc800f15 	stw	r18,60(sp)
   18e98:	dc400e15 	stw	r17,56(sp)
   18e9c:	dc000d15 	stw	r16,52(sp)
   18ea0:	df001304 	addi	fp,sp,76
   18ea4:	e13ff615 	stw	r4,-40(fp)
   18ea8:	e17ff715 	stw	r5,-36(fp)
   18eac:	e1bff815 	stw	r6,-32(fp)
   18eb0:	e1fff915 	stw	r7,-28(fp)
	int			  cmd_type		   = 1;
   18eb4:	00800044 	movi	r2,1
   18eb8:	e0bfed15 	stw	r2,-76(fp)
	unsigned char char_index	   = 0;
   18ebc:	e03fee05 	stb	zero,-72(fp)
	char		  param_string[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
   18ec0:	e03fef05 	stb	zero,-68(fp)
   18ec4:	e03fef45 	stb	zero,-67(fp)
   18ec8:	e03fef85 	stb	zero,-66(fp)
   18ecc:	e03fefc5 	stb	zero,-65(fp)
   18ed0:	e03ff005 	stb	zero,-64(fp)
   18ed4:	e03ff045 	stb	zero,-63(fp)
   18ed8:	e03ff085 	stb	zero,-62(fp)
   18edc:	e03ff0c5 	stb	zero,-61(fp)
   18ee0:	e03ff105 	stb	zero,-60(fp)
   18ee4:	e03ff145 	stb	zero,-59(fp)
	unsigned char param_index	   = 0;
   18ee8:	e03fee45 	stb	zero,-71(fp)
	unsigned char index			   = 0;
   18eec:	e03fee85 	stb	zero,-70(fp)
	const char	  digits[17]	   = "0123456789ABCDEF";
   18ef0:	008c4c04 	movi	r2,12592
   18ef4:	e0bff18d 	sth	r2,-58(fp)
   18ef8:	008ccc84 	movi	r2,13106
   18efc:	e0bff20d 	sth	r2,-56(fp)
   18f00:	008d4d04 	movi	r2,13620
   18f04:	e0bff28d 	sth	r2,-54(fp)
   18f08:	008dcd84 	movi	r2,14134
   18f0c:	e0bff30d 	sth	r2,-52(fp)
   18f10:	008e4e04 	movi	r2,14648
   18f14:	e0bff38d 	sth	r2,-50(fp)
   18f18:	00909044 	movi	r2,16961
   18f1c:	e0bff40d 	sth	r2,-48(fp)
   18f20:	009110c4 	movi	r2,17475
   18f24:	e0bff48d 	sth	r2,-46(fp)
   18f28:	00919144 	movi	r2,17989
   18f2c:	e0bff50d 	sth	r2,-44(fp)
   18f30:	e03ff585 	stb	zero,-42(fp)
	unsigned char digit_index	   = 0;
   18f34:	e03feec5 	stb	zero,-69(fp)

	while((expected_cmd[char_index] != '!') &&
   18f38:	00001406 	br	18f8c <console_check_commands+0x118>
		  (expected_cmd[char_index] != '?') &&
		  (expected_cmd[char_index] != '=') &&
		  (cmd_type != UNKNOWN_CMD))
	{
		if(expected_cmd[char_index] != received_cmd[char_index])
   18f3c:	e0bfee03 	ldbu	r2,-72(fp)
   18f40:	e0fff717 	ldw	r3,-36(fp)
   18f44:	1885883a 	add	r2,r3,r2
   18f48:	11000003 	ldbu	r4,0(r2)
   18f4c:	e0bfee03 	ldbu	r2,-72(fp)
   18f50:	e0fff617 	ldw	r3,-40(fp)
   18f54:	1885883a 	add	r2,r3,r2
   18f58:	10800003 	ldbu	r2,0(r2)
   18f5c:	20c03fcc 	andi	r3,r4,255
   18f60:	18c0201c 	xori	r3,r3,128
   18f64:	18ffe004 	addi	r3,r3,-128
   18f68:	10803fcc 	andi	r2,r2,255
   18f6c:	1080201c 	xori	r2,r2,128
   18f70:	10bfe004 	addi	r2,r2,-128
   18f74:	18800226 	beq	r3,r2,18f80 <console_check_commands+0x10c>
		{
			cmd_type = UNKNOWN_CMD;
   18f78:	00bfffc4 	movi	r2,-1
   18f7c:	e0bfed15 	stw	r2,-76(fp)
		}
		char_index++;
   18f80:	e0bfee03 	ldbu	r2,-72(fp)
   18f84:	10800044 	addi	r2,r2,1
   18f88:	e0bfee05 	stb	r2,-72(fp)
	unsigned char param_index	   = 0;
	unsigned char index			   = 0;
	const char	  digits[17]	   = "0123456789ABCDEF";
	unsigned char digit_index	   = 0;

	while((expected_cmd[char_index] != '!') &&
   18f8c:	e0bfee03 	ldbu	r2,-72(fp)
   18f90:	e0fff717 	ldw	r3,-36(fp)
   18f94:	1885883a 	add	r2,r3,r2
   18f98:	10800003 	ldbu	r2,0(r2)
   18f9c:	10803fcc 	andi	r2,r2,255
   18fa0:	1080201c 	xori	r2,r2,128
   18fa4:	10bfe004 	addi	r2,r2,-128
   18fa8:	10800860 	cmpeqi	r2,r2,33
   18fac:	1000151e 	bne	r2,zero,19004 <console_check_commands+0x190>
		  (expected_cmd[char_index] != '?') &&
   18fb0:	e0bfee03 	ldbu	r2,-72(fp)
   18fb4:	e0fff717 	ldw	r3,-36(fp)
   18fb8:	1885883a 	add	r2,r3,r2
   18fbc:	10800003 	ldbu	r2,0(r2)
	unsigned char param_index	   = 0;
	unsigned char index			   = 0;
	const char	  digits[17]	   = "0123456789ABCDEF";
	unsigned char digit_index	   = 0;

	while((expected_cmd[char_index] != '!') &&
   18fc0:	10803fcc 	andi	r2,r2,255
   18fc4:	1080201c 	xori	r2,r2,128
   18fc8:	10bfe004 	addi	r2,r2,-128
   18fcc:	10800fe0 	cmpeqi	r2,r2,63
   18fd0:	10000c1e 	bne	r2,zero,19004 <console_check_commands+0x190>
		  (expected_cmd[char_index] != '?') &&
		  (expected_cmd[char_index] != '=') &&
   18fd4:	e0bfee03 	ldbu	r2,-72(fp)
   18fd8:	e0fff717 	ldw	r3,-36(fp)
   18fdc:	1885883a 	add	r2,r3,r2
   18fe0:	10800003 	ldbu	r2,0(r2)
	unsigned char index			   = 0;
	const char	  digits[17]	   = "0123456789ABCDEF";
	unsigned char digit_index	   = 0;

	while((expected_cmd[char_index] != '!') &&
		  (expected_cmd[char_index] != '?') &&
   18fe4:	10803fcc 	andi	r2,r2,255
   18fe8:	1080201c 	xori	r2,r2,128
   18fec:	10bfe004 	addi	r2,r2,-128
   18ff0:	10800f60 	cmpeqi	r2,r2,61
   18ff4:	1000031e 	bne	r2,zero,19004 <console_check_commands+0x190>
		  (expected_cmd[char_index] != '=') &&
   18ff8:	e0bfed17 	ldw	r2,-76(fp)
   18ffc:	10bfffd8 	cmpnei	r2,r2,-1
   19000:	103fce1e 	bne	r2,zero,18f3c <_gp+0xfffe6e1c>
		{
			cmd_type = UNKNOWN_CMD;
		}
		char_index++;
	}
	if(cmd_type != UNKNOWN_CMD)
   19004:	e0bfed17 	ldw	r2,-76(fp)
   19008:	10bfffe0 	cmpeqi	r2,r2,-1
   1900c:	10017f1e 	bne	r2,zero,1960c <console_check_commands+0x798>
	{
		if(expected_cmd[char_index] == '!')
   19010:	e0bfee03 	ldbu	r2,-72(fp)
   19014:	e0fff717 	ldw	r3,-36(fp)
   19018:	1885883a 	add	r2,r3,r2
   1901c:	10800003 	ldbu	r2,0(r2)
   19020:	10803fcc 	andi	r2,r2,255
   19024:	1080201c 	xori	r2,r2,128
   19028:	10bfe004 	addi	r2,r2,-128
   1902c:	10800858 	cmpnei	r2,r2,33
   19030:	10000d1e 	bne	r2,zero,19068 <console_check_commands+0x1f4>
		{
			if(received_cmd[char_index] == '!')
   19034:	e0bfee03 	ldbu	r2,-72(fp)
   19038:	e0fff617 	ldw	r3,-40(fp)
   1903c:	1885883a 	add	r2,r3,r2
   19040:	10800003 	ldbu	r2,0(r2)
   19044:	10803fcc 	andi	r2,r2,255
   19048:	1080201c 	xori	r2,r2,128
   1904c:	10bfe004 	addi	r2,r2,-128
   19050:	10800858 	cmpnei	r2,r2,33
   19054:	1000021e 	bne	r2,zero,19060 <console_check_commands+0x1ec>
			{
				cmd_type = DO_CMD;
   19058:	e03fed15 	stw	zero,-76(fp)
   1905c:	00000206 	br	19068 <console_check_commands+0x1f4>
			}
			else
			{
				cmd_type = UNKNOWN_CMD;
   19060:	00bfffc4 	movi	r2,-1
   19064:	e0bfed15 	stw	r2,-76(fp)
			}
		}
		if(expected_cmd[char_index] == '?')
   19068:	e0bfee03 	ldbu	r2,-72(fp)
   1906c:	e0fff717 	ldw	r3,-36(fp)
   19070:	1885883a 	add	r2,r3,r2
   19074:	10800003 	ldbu	r2,0(r2)
   19078:	10803fcc 	andi	r2,r2,255
   1907c:	1080201c 	xori	r2,r2,128
   19080:	10bfe004 	addi	r2,r2,-128
   19084:	10800fd8 	cmpnei	r2,r2,63
   19088:	10000e1e 	bne	r2,zero,190c4 <console_check_commands+0x250>
		{
			if(received_cmd[char_index] == '?')
   1908c:	e0bfee03 	ldbu	r2,-72(fp)
   19090:	e0fff617 	ldw	r3,-40(fp)
   19094:	1885883a 	add	r2,r3,r2
   19098:	10800003 	ldbu	r2,0(r2)
   1909c:	10803fcc 	andi	r2,r2,255
   190a0:	1080201c 	xori	r2,r2,128
   190a4:	10bfe004 	addi	r2,r2,-128
   190a8:	10800fd8 	cmpnei	r2,r2,63
   190ac:	1000031e 	bne	r2,zero,190bc <console_check_commands+0x248>
			{
				cmd_type = READ_CMD;
   190b0:	00800044 	movi	r2,1
   190b4:	e0bfed15 	stw	r2,-76(fp)
   190b8:	00000206 	br	190c4 <console_check_commands+0x250>
			}
			else
			{
				cmd_type = UNKNOWN_CMD;
   190bc:	00bfffc4 	movi	r2,-1
   190c0:	e0bfed15 	stw	r2,-76(fp)
			}
		}
		if(expected_cmd[char_index] == '=')
   190c4:	e0bfee03 	ldbu	r2,-72(fp)
   190c8:	e0fff717 	ldw	r3,-36(fp)
   190cc:	1885883a 	add	r2,r3,r2
   190d0:	10800003 	ldbu	r2,0(r2)
   190d4:	10803fcc 	andi	r2,r2,255
   190d8:	1080201c 	xori	r2,r2,128
   190dc:	10bfe004 	addi	r2,r2,-128
   190e0:	10800f58 	cmpnei	r2,r2,61
   190e4:	10000e1e 	bne	r2,zero,19120 <console_check_commands+0x2ac>
		{
			if(received_cmd[char_index] == '=')
   190e8:	e0bfee03 	ldbu	r2,-72(fp)
   190ec:	e0fff617 	ldw	r3,-40(fp)
   190f0:	1885883a 	add	r2,r3,r2
   190f4:	10800003 	ldbu	r2,0(r2)
   190f8:	10803fcc 	andi	r2,r2,255
   190fc:	1080201c 	xori	r2,r2,128
   19100:	10bfe004 	addi	r2,r2,-128
   19104:	10800f58 	cmpnei	r2,r2,61
   19108:	1000031e 	bne	r2,zero,19118 <console_check_commands+0x2a4>
			{
				cmd_type = WRITE_CMD;
   1910c:	00800084 	movi	r2,2
   19110:	e0bfed15 	stw	r2,-76(fp)
   19114:	00000206 	br	19120 <console_check_commands+0x2ac>
			}
			else
			{
				cmd_type = UNKNOWN_CMD;
   19118:	00bfffc4 	movi	r2,-1
   1911c:	e0bfed15 	stw	r2,-76(fp)
			}
		}
		if((cmd_type == WRITE_CMD) || (cmd_type == READ_CMD))
   19120:	e0bfed17 	ldw	r2,-76(fp)
   19124:	108000a0 	cmpeqi	r2,r2,2
   19128:	1000031e 	bne	r2,zero,19138 <console_check_commands+0x2c4>
   1912c:	e0bfed17 	ldw	r2,-76(fp)
   19130:	10800058 	cmpnei	r2,r2,1
   19134:	1001351e 	bne	r2,zero,1960c <console_check_commands+0x798>
		{
			char_index++;
   19138:	e0bfee03 	ldbu	r2,-72(fp)
   1913c:	10800044 	addi	r2,r2,1
   19140:	e0bfee05 	stb	r2,-72(fp)
			while((received_cmd[char_index] != '\n') &&
   19144:	0000a406 	br	193d8 <console_check_commands+0x564>
				  (received_cmd[char_index] != '\r'))
			{
				if((received_cmd[char_index] == 0x20))
   19148:	e0bfee03 	ldbu	r2,-72(fp)
   1914c:	e0fff617 	ldw	r3,-40(fp)
   19150:	1885883a 	add	r2,r3,r2
   19154:	10800003 	ldbu	r2,0(r2)
   19158:	10803fcc 	andi	r2,r2,255
   1915c:	1080201c 	xori	r2,r2,128
   19160:	10bfe004 	addi	r2,r2,-128
   19164:	10800818 	cmpnei	r2,r2,32
   19168:	10008d1e 	bne	r2,zero,193a0 <console_check_commands+0x52c>
				{
					*param = 0;
   1916c:	e0bff817 	ldw	r2,-32(fp)
   19170:	10000015 	stw	zero,0(r2)
   19174:	10000115 	stw	zero,4(r2)
					if((param_string[0] == '0') && (param_string[1] == 'x'))
   19178:	e0bfef03 	ldbu	r2,-68(fp)
   1917c:	10803fcc 	andi	r2,r2,255
   19180:	1080201c 	xori	r2,r2,128
   19184:	10bfe004 	addi	r2,r2,-128
   19188:	10800c18 	cmpnei	r2,r2,48
   1918c:	10004a1e 	bne	r2,zero,192b8 <console_check_commands+0x444>
   19190:	e0bfef43 	ldbu	r2,-67(fp)
   19194:	10803fcc 	andi	r2,r2,255
   19198:	1080201c 	xori	r2,r2,128
   1919c:	10bfe004 	addi	r2,r2,-128
   191a0:	10801e18 	cmpnei	r2,r2,120
   191a4:	1000441e 	bne	r2,zero,192b8 <console_check_commands+0x444>
					{
						for(index = 2; index < param_index; index++)
   191a8:	00800084 	movi	r2,2
   191ac:	e0bfee85 	stb	r2,-70(fp)
   191b0:	00003d06 	br	192a8 <console_check_commands+0x434>
						{
							for(digit_index = 0; digit_index < 16; digit_index++)
   191b4:	e03feec5 	stb	zero,-69(fp)
   191b8:	00003506 	br	19290 <console_check_commands+0x41c>
							{
								if(param_string[index] == digits[digit_index])
   191bc:	e0bfee83 	ldbu	r2,-70(fp)
   191c0:	e0ffef04 	addi	r3,fp,-68
   191c4:	1885883a 	add	r2,r3,r2
   191c8:	11000003 	ldbu	r4,0(r2)
   191cc:	e0bfeec3 	ldbu	r2,-69(fp)
   191d0:	e0fff184 	addi	r3,fp,-58
   191d4:	1885883a 	add	r2,r3,r2
   191d8:	10800003 	ldbu	r2,0(r2)
   191dc:	20c03fcc 	andi	r3,r4,255
   191e0:	18c0201c 	xori	r3,r3,128
   191e4:	18ffe004 	addi	r3,r3,-128
   191e8:	10803fcc 	andi	r2,r2,255
   191ec:	1080201c 	xori	r2,r2,128
   191f0:	10bfe004 	addi	r2,r2,-128
   191f4:	1880231e 	bne	r3,r2,19284 <console_check_commands+0x410>
								{
									*param = *param * 16;
   191f8:	e13ff817 	ldw	r4,-32(fp)
   191fc:	20800017 	ldw	r2,0(r4)
   19200:	20c00117 	ldw	r3,4(r4)
   19204:	1009883a 	mov	r4,r2
   19208:	180b883a 	mov	r5,r3
   1920c:	000d883a 	mov	r6,zero
   19210:	01d00c34 	movhi	r7,16432
   19214:	001e2380 	call	1e238 <__muldf3>
   19218:	1009883a 	mov	r4,r2
   1921c:	180b883a 	mov	r5,r3
   19220:	2005883a 	mov	r2,r4
   19224:	2807883a 	mov	r3,r5
   19228:	e13ff817 	ldw	r4,-32(fp)
   1922c:	20800015 	stw	r2,0(r4)
   19230:	20c00115 	stw	r3,4(r4)
									*param = *param + digit_index;
   19234:	e0bff817 	ldw	r2,-32(fp)
   19238:	15000017 	ldw	r20,0(r2)
   1923c:	15400117 	ldw	r21,4(r2)
   19240:	e0bfeec3 	ldbu	r2,-69(fp)
   19244:	1009883a 	mov	r4,r2
   19248:	001f2cc0 	call	1f2cc <__floatsidf>
   1924c:	100f883a 	mov	r7,r2
   19250:	1811883a 	mov	r8,r3
   19254:	a009883a 	mov	r4,r20
   19258:	a80b883a 	mov	r5,r21
   1925c:	380d883a 	mov	r6,r7
   19260:	400f883a 	mov	r7,r8
   19264:	001d7c40 	call	1d7c4 <__adddf3>
   19268:	1009883a 	mov	r4,r2
   1926c:	180b883a 	mov	r5,r3
   19270:	2005883a 	mov	r2,r4
   19274:	2807883a 	mov	r3,r5
   19278:	e13ff817 	ldw	r4,-32(fp)
   1927c:	20800015 	stw	r2,0(r4)
   19280:	20c00115 	stw	r3,4(r4)
					*param = 0;
					if((param_string[0] == '0') && (param_string[1] == 'x'))
					{
						for(index = 2; index < param_index; index++)
						{
							for(digit_index = 0; digit_index < 16; digit_index++)
   19284:	e0bfeec3 	ldbu	r2,-69(fp)
   19288:	10800044 	addi	r2,r2,1
   1928c:	e0bfeec5 	stb	r2,-69(fp)
   19290:	e0bfeec3 	ldbu	r2,-69(fp)
   19294:	10800430 	cmpltui	r2,r2,16
   19298:	103fc81e 	bne	r2,zero,191bc <_gp+0xfffe709c>
				if((received_cmd[char_index] == 0x20))
				{
					*param = 0;
					if((param_string[0] == '0') && (param_string[1] == 'x'))
					{
						for(index = 2; index < param_index; index++)
   1929c:	e0bfee83 	ldbu	r2,-70(fp)
   192a0:	10800044 	addi	r2,r2,1
   192a4:	e0bfee85 	stb	r2,-70(fp)
   192a8:	e0ffee83 	ldbu	r3,-70(fp)
   192ac:	e0bfee43 	ldbu	r2,-71(fp)
   192b0:	18bfc036 	bltu	r3,r2,191b4 <_gp+0xfffe7094>
				  (received_cmd[char_index] != '\r'))
			{
				if((received_cmd[char_index] == 0x20))
				{
					*param = 0;
					if((param_string[0] == '0') && (param_string[1] == 'x'))
   192b4:	00002006 	br	19338 <console_check_commands+0x4c4>
							}
						}
					}
					else
					{
						if(param_string[0] == '-')
   192b8:	e0bfef03 	ldbu	r2,-68(fp)
   192bc:	10803fcc 	andi	r2,r2,255
   192c0:	1080201c 	xori	r2,r2,128
   192c4:	10bfe004 	addi	r2,r2,-128
   192c8:	10800b58 	cmpnei	r2,r2,45
   192cc:	1000121e 	bne	r2,zero,19318 <console_check_commands+0x4a4>
						{
							*param = atof((const char*)(&param_string[1]));
   192d0:	e0bfef04 	addi	r2,fp,-68
   192d4:	10800044 	addi	r2,r2,1
   192d8:	1009883a 	mov	r4,r2
   192dc:	001f4bc0 	call	1f4bc <atof>
   192e0:	1009883a 	mov	r4,r2
   192e4:	180b883a 	mov	r5,r3
   192e8:	e0bff817 	ldw	r2,-32(fp)
   192ec:	11000015 	stw	r4,0(r2)
   192f0:	11400115 	stw	r5,4(r2)
							*param *= (-1);
   192f4:	e13ff817 	ldw	r4,-32(fp)
   192f8:	20800017 	ldw	r2,0(r4)
   192fc:	20c00117 	ldw	r3,4(r4)
   19300:	1025883a 	mov	r18,r2
   19304:	1ce0003c 	xorhi	r19,r3,32768
   19308:	e0bff817 	ldw	r2,-32(fp)
   1930c:	14800015 	stw	r18,0(r2)
   19310:	14c00115 	stw	r19,4(r2)
   19314:	00000806 	br	19338 <console_check_commands+0x4c4>
						}
						else
						{
							*param = atof((const char*)param_string);
   19318:	e0bfef04 	addi	r2,fp,-68
   1931c:	1009883a 	mov	r4,r2
   19320:	001f4bc0 	call	1f4bc <atof>
   19324:	1009883a 	mov	r4,r2
   19328:	180b883a 	mov	r5,r3
   1932c:	e0bff817 	ldw	r2,-32(fp)
   19330:	11000015 	stw	r4,0(r2)
   19334:	11400115 	stw	r5,4(r2)
						}
					}
					param++;
   19338:	e0bff817 	ldw	r2,-32(fp)
   1933c:	10800204 	addi	r2,r2,8
   19340:	e0bff815 	stw	r2,-32(fp)
					*param_no += 1;
   19344:	e0bff917 	ldw	r2,-28(fp)
   19348:	10800003 	ldbu	r2,0(r2)
   1934c:	10800044 	addi	r2,r2,1
   19350:	1007883a 	mov	r3,r2
   19354:	e0bff917 	ldw	r2,-28(fp)
   19358:	10c00005 	stb	r3,0(r2)
					for(param_index = 0; param_index < 10; param_index++)
   1935c:	e03fee45 	stb	zero,-71(fp)
   19360:	00000706 	br	19380 <console_check_commands+0x50c>
					{
						param_string[param_index] = 0;
   19364:	e0bfee43 	ldbu	r2,-71(fp)
   19368:	e0ffef04 	addi	r3,fp,-68
   1936c:	1885883a 	add	r2,r3,r2
   19370:	10000005 	stb	zero,0(r2)
							*param = atof((const char*)param_string);
						}
					}
					param++;
					*param_no += 1;
					for(param_index = 0; param_index < 10; param_index++)
   19374:	e0bfee43 	ldbu	r2,-71(fp)
   19378:	10800044 	addi	r2,r2,1
   1937c:	e0bfee45 	stb	r2,-71(fp)
   19380:	e0bfee43 	ldbu	r2,-71(fp)
   19384:	108002b0 	cmpltui	r2,r2,10
   19388:	103ff61e 	bne	r2,zero,19364 <_gp+0xfffe7244>
					{
						param_string[param_index] = 0;
					}
					param_index = 0;
   1938c:	e03fee45 	stb	zero,-71(fp)
					char_index++;
   19390:	e0bfee03 	ldbu	r2,-72(fp)
   19394:	10800044 	addi	r2,r2,1
   19398:	e0bfee05 	stb	r2,-72(fp)
   1939c:	00000e06 	br	193d8 <console_check_commands+0x564>
				}
				else
				{
					param_string[param_index] = received_cmd[char_index];
   193a0:	e0bfee43 	ldbu	r2,-71(fp)
   193a4:	e0ffee03 	ldbu	r3,-72(fp)
   193a8:	e13ff617 	ldw	r4,-40(fp)
   193ac:	20c7883a 	add	r3,r4,r3
   193b0:	18c00003 	ldbu	r3,0(r3)
   193b4:	e13fef04 	addi	r4,fp,-68
   193b8:	2085883a 	add	r2,r4,r2
   193bc:	10c00005 	stb	r3,0(r2)
					char_index++;
   193c0:	e0bfee03 	ldbu	r2,-72(fp)
   193c4:	10800044 	addi	r2,r2,1
   193c8:	e0bfee05 	stb	r2,-72(fp)
					param_index++;
   193cc:	e0bfee43 	ldbu	r2,-71(fp)
   193d0:	10800044 	addi	r2,r2,1
   193d4:	e0bfee45 	stb	r2,-71(fp)
			}
		}
		if((cmd_type == WRITE_CMD) || (cmd_type == READ_CMD))
		{
			char_index++;
			while((received_cmd[char_index] != '\n') &&
   193d8:	e0bfee03 	ldbu	r2,-72(fp)
   193dc:	e0fff617 	ldw	r3,-40(fp)
   193e0:	1885883a 	add	r2,r3,r2
   193e4:	10800003 	ldbu	r2,0(r2)
   193e8:	10803fcc 	andi	r2,r2,255
   193ec:	1080201c 	xori	r2,r2,128
   193f0:	10bfe004 	addi	r2,r2,-128
   193f4:	108002a0 	cmpeqi	r2,r2,10
   193f8:	1000091e 	bne	r2,zero,19420 <console_check_commands+0x5ac>
				  (received_cmd[char_index] != '\r'))
   193fc:	e0bfee03 	ldbu	r2,-72(fp)
   19400:	e0fff617 	ldw	r3,-40(fp)
   19404:	1885883a 	add	r2,r3,r2
   19408:	10800003 	ldbu	r2,0(r2)
			}
		}
		if((cmd_type == WRITE_CMD) || (cmd_type == READ_CMD))
		{
			char_index++;
			while((received_cmd[char_index] != '\n') &&
   1940c:	10803fcc 	andi	r2,r2,255
   19410:	1080201c 	xori	r2,r2,128
   19414:	10bfe004 	addi	r2,r2,-128
   19418:	10800358 	cmpnei	r2,r2,13
   1941c:	103f4a1e 	bne	r2,zero,19148 <_gp+0xfffe7028>
					param_string[param_index] = received_cmd[char_index];
					char_index++;
					param_index++;
				}
			}
			if(param_index)
   19420:	e0bfee43 	ldbu	r2,-71(fp)
   19424:	10007926 	beq	r2,zero,1960c <console_check_commands+0x798>
			{
				*param = 0;
   19428:	e0bff817 	ldw	r2,-32(fp)
   1942c:	10000015 	stw	zero,0(r2)
   19430:	10000115 	stw	zero,4(r2)
				if((param_string[0] == '0') && (param_string[1] == 'x'))
   19434:	e0bfef03 	ldbu	r2,-68(fp)
   19438:	10803fcc 	andi	r2,r2,255
   1943c:	1080201c 	xori	r2,r2,128
   19440:	10bfe004 	addi	r2,r2,-128
   19444:	10800c18 	cmpnei	r2,r2,48
   19448:	10004a1e 	bne	r2,zero,19574 <console_check_commands+0x700>
   1944c:	e0bfef43 	ldbu	r2,-67(fp)
   19450:	10803fcc 	andi	r2,r2,255
   19454:	1080201c 	xori	r2,r2,128
   19458:	10bfe004 	addi	r2,r2,-128
   1945c:	10801e18 	cmpnei	r2,r2,120
   19460:	1000441e 	bne	r2,zero,19574 <console_check_commands+0x700>
				{
					for(index = 2; index < param_index; index++)
   19464:	00800084 	movi	r2,2
   19468:	e0bfee85 	stb	r2,-70(fp)
   1946c:	00003d06 	br	19564 <console_check_commands+0x6f0>
					{
						for(digit_index = 0; digit_index < 16; digit_index++)
   19470:	e03feec5 	stb	zero,-69(fp)
   19474:	00003506 	br	1954c <console_check_commands+0x6d8>
						{
							if(param_string[index] == digits[digit_index])
   19478:	e0bfee83 	ldbu	r2,-70(fp)
   1947c:	e0ffef04 	addi	r3,fp,-68
   19480:	1885883a 	add	r2,r3,r2
   19484:	11000003 	ldbu	r4,0(r2)
   19488:	e0bfeec3 	ldbu	r2,-69(fp)
   1948c:	e0fff184 	addi	r3,fp,-58
   19490:	1885883a 	add	r2,r3,r2
   19494:	10800003 	ldbu	r2,0(r2)
   19498:	20c03fcc 	andi	r3,r4,255
   1949c:	18c0201c 	xori	r3,r3,128
   194a0:	18ffe004 	addi	r3,r3,-128
   194a4:	10803fcc 	andi	r2,r2,255
   194a8:	1080201c 	xori	r2,r2,128
   194ac:	10bfe004 	addi	r2,r2,-128
   194b0:	1880231e 	bne	r3,r2,19540 <console_check_commands+0x6cc>
							{
								*param *= 16;
   194b4:	e13ff817 	ldw	r4,-32(fp)
   194b8:	20800017 	ldw	r2,0(r4)
   194bc:	20c00117 	ldw	r3,4(r4)
   194c0:	1009883a 	mov	r4,r2
   194c4:	180b883a 	mov	r5,r3
   194c8:	000d883a 	mov	r6,zero
   194cc:	01d00c34 	movhi	r7,16432
   194d0:	001e2380 	call	1e238 <__muldf3>
   194d4:	1009883a 	mov	r4,r2
   194d8:	180b883a 	mov	r5,r3
   194dc:	2005883a 	mov	r2,r4
   194e0:	2807883a 	mov	r3,r5
   194e4:	e13ff817 	ldw	r4,-32(fp)
   194e8:	20800015 	stw	r2,0(r4)
   194ec:	20c00115 	stw	r3,4(r4)
								*param += digit_index;
   194f0:	e0bff817 	ldw	r2,-32(fp)
   194f4:	14000017 	ldw	r16,0(r2)
   194f8:	14400117 	ldw	r17,4(r2)
   194fc:	e0bfeec3 	ldbu	r2,-69(fp)
   19500:	1009883a 	mov	r4,r2
   19504:	001f2cc0 	call	1f2cc <__floatsidf>
   19508:	100f883a 	mov	r7,r2
   1950c:	1811883a 	mov	r8,r3
   19510:	8009883a 	mov	r4,r16
   19514:	880b883a 	mov	r5,r17
   19518:	380d883a 	mov	r6,r7
   1951c:	400f883a 	mov	r7,r8
   19520:	001d7c40 	call	1d7c4 <__adddf3>
   19524:	1009883a 	mov	r4,r2
   19528:	180b883a 	mov	r5,r3
   1952c:	2005883a 	mov	r2,r4
   19530:	2807883a 	mov	r3,r5
   19534:	e13ff817 	ldw	r4,-32(fp)
   19538:	20800015 	stw	r2,0(r4)
   1953c:	20c00115 	stw	r3,4(r4)
				*param = 0;
				if((param_string[0] == '0') && (param_string[1] == 'x'))
				{
					for(index = 2; index < param_index; index++)
					{
						for(digit_index = 0; digit_index < 16; digit_index++)
   19540:	e0bfeec3 	ldbu	r2,-69(fp)
   19544:	10800044 	addi	r2,r2,1
   19548:	e0bfeec5 	stb	r2,-69(fp)
   1954c:	e0bfeec3 	ldbu	r2,-69(fp)
   19550:	10800430 	cmpltui	r2,r2,16
   19554:	103fc81e 	bne	r2,zero,19478 <_gp+0xfffe7358>
			if(param_index)
			{
				*param = 0;
				if((param_string[0] == '0') && (param_string[1] == 'x'))
				{
					for(index = 2; index < param_index; index++)
   19558:	e0bfee83 	ldbu	r2,-70(fp)
   1955c:	10800044 	addi	r2,r2,1
   19560:	e0bfee85 	stb	r2,-70(fp)
   19564:	e0ffee83 	ldbu	r3,-70(fp)
   19568:	e0bfee43 	ldbu	r2,-71(fp)
   1956c:	18bfc036 	bltu	r3,r2,19470 <_gp+0xfffe7350>
				}
			}
			if(param_index)
			{
				*param = 0;
				if((param_string[0] == '0') && (param_string[1] == 'x'))
   19570:	00002006 	br	195f4 <console_check_commands+0x780>
						}
					}
				}
				else
				{
					if(param_string[0] == '-')
   19574:	e0bfef03 	ldbu	r2,-68(fp)
   19578:	10803fcc 	andi	r2,r2,255
   1957c:	1080201c 	xori	r2,r2,128
   19580:	10bfe004 	addi	r2,r2,-128
   19584:	10800b58 	cmpnei	r2,r2,45
   19588:	1000121e 	bne	r2,zero,195d4 <console_check_commands+0x760>
					{
						*param = atof((const char*)(&param_string[1]));
   1958c:	e0bfef04 	addi	r2,fp,-68
   19590:	10800044 	addi	r2,r2,1
   19594:	1009883a 	mov	r4,r2
   19598:	001f4bc0 	call	1f4bc <atof>
   1959c:	1009883a 	mov	r4,r2
   195a0:	180b883a 	mov	r5,r3
   195a4:	e0bff817 	ldw	r2,-32(fp)
   195a8:	11000015 	stw	r4,0(r2)
   195ac:	11400115 	stw	r5,4(r2)
						*param *= (-1);
   195b0:	e13ff817 	ldw	r4,-32(fp)
   195b4:	20800017 	ldw	r2,0(r4)
   195b8:	20c00117 	ldw	r3,4(r4)
   195bc:	1021883a 	mov	r16,r2
   195c0:	1c60003c 	xorhi	r17,r3,32768
   195c4:	e0bff817 	ldw	r2,-32(fp)
   195c8:	14000015 	stw	r16,0(r2)
   195cc:	14400115 	stw	r17,4(r2)
   195d0:	00000806 	br	195f4 <console_check_commands+0x780>
					}
					else
					{
						*param = atof((const char*)param_string);
   195d4:	e0bfef04 	addi	r2,fp,-68
   195d8:	1009883a 	mov	r4,r2
   195dc:	001f4bc0 	call	1f4bc <atof>
   195e0:	1009883a 	mov	r4,r2
   195e4:	180b883a 	mov	r5,r3
   195e8:	e0bff817 	ldw	r2,-32(fp)
   195ec:	11000015 	stw	r4,0(r2)
   195f0:	11400115 	stw	r5,4(r2)
					}
				}
				*param_no += 1;
   195f4:	e0bff917 	ldw	r2,-28(fp)
   195f8:	10800003 	ldbu	r2,0(r2)
   195fc:	10800044 	addi	r2,r2,1
   19600:	1007883a 	mov	r3,r2
   19604:	e0bff917 	ldw	r2,-28(fp)
   19608:	10c00005 	stb	r3,0(r2)
			}
		}
	}

	return cmd_type;
   1960c:	e0bfed17 	ldw	r2,-76(fp)
}
   19610:	e6fffa04 	addi	sp,fp,-24
   19614:	dfc00717 	ldw	ra,28(sp)
   19618:	df000617 	ldw	fp,24(sp)
   1961c:	dd400517 	ldw	r21,20(sp)
   19620:	dd000417 	ldw	r20,16(sp)
   19624:	dcc00317 	ldw	r19,12(sp)
   19628:	dc800217 	ldw	r18,8(sp)
   1962c:	dc400117 	ldw	r17,4(sp)
   19630:	dc000017 	ldw	r16,0(sp)
   19634:	dec00804 	addi	sp,sp,32
   19638:	f800283a 	ret

0001963c <_localeconv_r>:
int num_1, num_2,num_3,num_4, num_5, num_6;
char tmp;

struct _reent;
struct lconv *_localeconv_r(struct _reent * r)
{
   1963c:	defffe04 	addi	sp,sp,-8
   19640:	de00012e 	bgeu	sp,et,19648 <_localeconv_r+0xc>
   19644:	003b68fa 	trap	3
   19648:	df000115 	stw	fp,4(sp)
   1964c:	df000104 	addi	fp,sp,4
   19650:	e13fff15 	stw	r4,-4(fp)
	return 0;
   19654:	0005883a 	mov	r2,zero
}
   19658:	e037883a 	mov	sp,fp
   1965c:	df000017 	ldw	fp,0(sp)
   19660:	dec00104 	addi	sp,sp,4
   19664:	f800283a 	ret

00019668 <read_reg_bige>:

#define SWAP_UINT32(x) (((x) >> 24) | (((x) & 0x00FF0000) >> 8) | (((x) & 0x0000FF00) << 8) | ((x) << 24))

//read register and convert the value to big endian
uint32_t read_reg_bige(uint32_t BaseAddress, uint32_t RegOffset)
{
   19668:	defffc04 	addi	sp,sp,-16
   1966c:	de00012e 	bgeu	sp,et,19674 <read_reg_bige+0xc>
   19670:	003b68fa 	trap	3
   19674:	df000315 	stw	fp,12(sp)
   19678:	df000304 	addi	fp,sp,12
   1967c:	e13ffe15 	stw	r4,-8(fp)
   19680:	e17fff15 	stw	r5,-4(fp)
	uint32_t read_val = REG_MAP_mReadReg(BaseAddress, RegOffset);
   19684:	e0fffe17 	ldw	r3,-8(fp)
   19688:	e0bfff17 	ldw	r2,-4(fp)
   1968c:	1885883a 	add	r2,r3,r2
   19690:	10800037 	ldwio	r2,0(r2)
   19694:	e0bffd15 	stw	r2,-12(fp)
	//return SWAP_UINT32(read_val);
	return read_val;
   19698:	e0bffd17 	ldw	r2,-12(fp)
}
   1969c:	e037883a 	mov	sp,fp
   196a0:	df000017 	ldw	fp,0(sp)
   196a4:	dec00104 	addi	sp,sp,4
   196a8:	f800283a 	ret

000196ac <write_reg_bige>:

//convert data to big endian before writing
void write_reg_bige(uint32_t BaseAddress, uint32_t RegOffset, uint32_t Data)
{
   196ac:	defffc04 	addi	sp,sp,-16
   196b0:	de00012e 	bgeu	sp,et,196b8 <write_reg_bige+0xc>
   196b4:	003b68fa 	trap	3
   196b8:	df000315 	stw	fp,12(sp)
   196bc:	df000304 	addi	fp,sp,12
   196c0:	e13ffd15 	stw	r4,-12(fp)
   196c4:	e17ffe15 	stw	r5,-8(fp)
   196c8:	e1bfff15 	stw	r6,-4(fp)
	//REG_MAP_mWriteReg(BaseAddress, RegOffset, SWAP_UINT32(Data));
	REG_MAP_mWriteReg(BaseAddress, RegOffset, Data);
   196cc:	e0fffd17 	ldw	r3,-12(fp)
   196d0:	e0bffe17 	ldw	r2,-8(fp)
   196d4:	1885883a 	add	r2,r3,r2
   196d8:	1007883a 	mov	r3,r2
   196dc:	e0bfff17 	ldw	r2,-4(fp)
   196e0:	18800035 	stwio	r2,0(r3)
}
   196e4:	e037883a 	mov	sp,fp
   196e8:	df000017 	ldw	fp,0(sp)
   196ec:	dec00104 	addi	sp,sp,4
   196f0:	f800283a 	ret

000196f4 <main>:

/***************************************************************************//**
 * @brief main
*******************************************************************************/
int main(void)
{
   196f4:	deff8004 	addi	sp,sp,-512
   196f8:	de00012e 	bgeu	sp,et,19700 <main+0xc>
   196fc:	003b68fa 	trap	3
   19700:	dfc07f15 	stw	ra,508(sp)
   19704:	df007e15 	stw	fp,504(sp)
   19708:	dcc07d15 	stw	r19,500(sp)
   1970c:	dc807c15 	stw	r18,496(sp)
   19710:	dc407b15 	stw	r17,492(sp)
   19714:	dc007a15 	stw	r16,488(sp)
   19718:	df007e04 	addi	fp,sp,504
	int i, j, k;
	int config_loaded;
	//lt_u8 spi_read_data[10];


	config_loaded = 0;
   1971c:	e03fd315 	stw	zero,-180(fp)

	printf("Hello!\n");
   19720:	010000f4 	movhi	r4,3
   19724:	21240304 	addi	r4,r4,-28660
   19728:	001f9e00 	call	1f9e0 <puts>
	printf("lgdst software v.%s, %s %s\n\r", SW_VERSION, __DATE__, __TIME__);
   1972c:	010000f4 	movhi	r4,3
   19730:	21240504 	addi	r4,r4,-28652
   19734:	014000f4 	movhi	r5,3
   19738:	29640d04 	addi	r5,r5,-28620
   1973c:	018000f4 	movhi	r6,3
   19740:	31a40f04 	addi	r6,r6,-28612
   19744:	01c000f4 	movhi	r7,3
   19748:	39e41204 	addi	r7,r7,-28600
   1974c:	001f8180 	call	1f818 <printf>
		//polling the registers for changes------------------------------------
		cur_word = REG_MAP_mReadReg(REG_MAP_BASEADDR, MB_SYS_STAT_OFFSET + 36); //bytes 36-39, sys stat page 1
		config_loaded = (cur_word >> 29) & 0x1;
	}*/

	rf_tx_atten_select_prev = -1;
   19750:	00bfffc4 	movi	r2,-1
   19754:	e0bfd005 	stb	r2,-192(fp)
	rf_tx_ch_sel_prev = -1;
   19758:	00bfffc4 	movi	r2,-1
   1975c:	e0bfd045 	stb	r2,-191(fp)
	tx_power_on_prev = 100;
   19760:	00801904 	movi	r2,100
   19764:	e0bfca05 	stb	r2,-216(fp)
	tx_bw_sel_prev = 0;
   19768:	e03fd405 	stb	zero,-176(fp)
	tone1_freq_prev = 0;
   1976c:	e03fcd15 	stw	zero,-204(fp)
	tone2_freq_prev = 0;
   19770:	e03fce15 	stw	zero,-200(fp)
	chassis_ctrl_prev = -1;
   19774:	00bfffc4 	movi	r2,-1
   19778:	e0bfd515 	stw	r2,-172(fp)
	min_attenuation_mdb_prev = 1000 * 1000;
   1977c:	008003f4 	movhi	r2,15
   19780:	10909004 	addi	r2,r2,16960
   19784:	e0bfcb15 	stw	r2,-212(fp)
	tx_ch_freq_min_prev = 100 * 1000;
   19788:	008000b4 	movhi	r2,2
   1978c:	10a1a804 	addi	r2,r2,-31072
   19790:	e0bfcf15 	stw	r2,-196(fp)


#ifdef __INCLUDE_RF__
	// NOTE: The user has to choose the GPIO numbers according to desired
	// carrier board.
	default_init_param.gpio_resetb = GPIO_RESET_PIN;
   19794:	008000f4 	movhi	r2,3
   19798:	10a6c504 	addi	r2,r2,-25836
   1979c:	10007915 	stw	zero,484(r2)
#ifdef FMCOMMS5
	default_init_param.gpio_sync = GPIO_SYNC_PIN;
	default_init_param.gpio_cal_sw1 = GPIO_CAL_SW1_PIN;
	default_init_param.gpio_cal_sw2 = GPIO_CAL_SW2_PIN;
#else
	default_init_param.gpio_sync = -1;
   197a0:	008000f4 	movhi	r2,3
   197a4:	10a6c504 	addi	r2,r2,-25836
   197a8:	00ffffc4 	movi	r3,-1
   197ac:	10c07a15 	stw	r3,488(r2)
	default_init_param.gpio_cal_sw1 = -1;
   197b0:	008000f4 	movhi	r2,3
   197b4:	10a6c504 	addi	r2,r2,-25836
   197b8:	00ffffc4 	movi	r3,-1
   197bc:	10c07b15 	stw	r3,492(r2)
	default_init_param.gpio_cal_sw2 = -1;
   197c0:	008000f4 	movhi	r2,3
   197c4:	10a6c504 	addi	r2,r2,-25836
   197c8:	00ffffc4 	movi	r3,-1
   197cc:	10c07c15 	stw	r3,496(r2)
#endif

#ifdef LINUX_PLATFORM
	gpio_init(default_init_param.gpio_resetb);
#else
	gpio_init(GPIO_DEVICE_ID);
   197d0:	0009883a 	mov	r4,zero
   197d4:	001b6dc0 	call	1b6dc <gpio_init>
#endif
	gpio_direction(default_init_param.gpio_resetb, 1);
   197d8:	008000f4 	movhi	r2,3
   197dc:	10a6c504 	addi	r2,r2,-25836
   197e0:	10807917 	ldw	r2,484(r2)
   197e4:	10803fcc 	andi	r2,r2,255
   197e8:	1009883a 	mov	r4,r2
   197ec:	01400044 	movi	r5,1
   197f0:	001b7040 	call	1b704 <gpio_direction>

	spi_init(SPI_DEVICE_ID, 1, 0);
   197f4:	0009883a 	mov	r4,zero
   197f8:	01400044 	movi	r5,1
   197fc:	000d883a 	mov	r6,zero
   19800:	001b5440 	call	1b544 <spi_init>

	//cur_word = (1 << REG_LOC_RF_CAL_DONE) | (0x43 << 24); //byte 3: usr tx control byte, bit 7: cnt select, bits 3:0: frame, bit 6: frame sel when cnt_sel = 0
	//write_reg_bige(REG_MAP_BASEADDR, MB_RF_STAT_OFFSET + 0, cur_word); //turn off the fabric transmitter
	//ad9361_bist_loopback(ad9361_phy, 1);

	ad9361_init(&ad9361_phy, &default_init_param);
   19804:	d1229204 	addi	r4,gp,-30136
   19808:	014000f4 	movhi	r5,3
   1980c:	2966c504 	addi	r5,r5,-25836
   19810:	0010fcc0 	call	10fcc <ad9361_init>

	//cur_word = 9142857;
	//ad9361_set_rx_sampling_freq(ad9361_phy, cur_word);
	ad9361_get_rx_sampling_freq(ad9361_phy, &cur_word);
   19814:	d0e29217 	ldw	r3,-30136(gp)
   19818:	e0bfe504 	addi	r2,fp,-108
   1981c:	1809883a 	mov	r4,r3
   19820:	100b883a 	mov	r5,r2
   19824:	0012dc80 	call	12dc8 <ad9361_get_rx_sampling_freq>
	console_print("rx sampling freq = %d\n", (uint32_t)(cur_word));
   19828:	e0bfe517 	ldw	r2,-108(fp)
   1982c:	010000f4 	movhi	r4,3
   19830:	21241504 	addi	r4,r4,-28588
   19834:	100b883a 	mov	r5,r2
   19838:	00188580 	call	18858 <console_print>


	ad9361_set_tx_fir_config(ad9361_phy, tx_fir_config);
   1983c:	d4e29217 	ldw	r19,-30136(gp)
   19840:	040000f4 	movhi	r16,3
   19844:	84274504 	addi	r16,r16,-25324
   19848:	d809883a 	mov	r4,sp
   1984c:	80c00304 	addi	r3,r16,12
   19850:	00804804 	movi	r2,288
   19854:	180b883a 	mov	r5,r3
   19858:	100d883a 	mov	r6,r2
   1985c:	001f52c0 	call	1f52c <memcpy>
   19860:	81400017 	ldw	r5,0(r16)
   19864:	81800117 	ldw	r6,4(r16)
   19868:	81c00217 	ldw	r7,8(r16)
   1986c:	9809883a 	mov	r4,r19
   19870:	0013e440 	call	13e44 <ad9361_set_tx_fir_config>
	//ad9361_set_rx_fir_config(ad9361_phy, rx_fir_config);
	
	//Enable TX filter
	ret = ad9361_set_tx_fir_en_dis(ad9361_phy, 1);
   19874:	d0a29217 	ldw	r2,-30136(gp)
   19878:	1009883a 	mov	r4,r2
   1987c:	01400044 	movi	r5,1
   19880:	00140f40 	call	140f4 <ad9361_set_tx_fir_en_dis>
   19884:	e0bfd615 	stw	r2,-168(fp)
    //REG_MAP_mWriteReg(REG_MAP_BASEADDR, MB_RF_CONF_OFFSET, 0xdeadbeef);
    //REG_MAP_mWriteReg(REG_MAP_BASEADDR, 4, 0xb0a6e0ab);
    //REG_MAP_mWriteReg(REG_MAP_BASEADDR, 8, 0x11223344);

    //default DVB-T settings: QPSK, rate 1/2, 1/32 guard interval
    cur_word = 1 << REG_LOC_RF_REG_CHANGE_REQ;  //request the change
   19888:	00801034 	movhi	r2,64
   1988c:	e0bfe515 	stw	r2,-108(fp)
    write_reg_bige(REG_MAP_BASEADDR, MB_RF_CONF_OFFSET + 0, cur_word);
   19890:	e0bfe517 	ldw	r2,-108(fp)
   19894:	01000174 	movhi	r4,5
   19898:	21100004 	addi	r4,r4,16384
   1989c:	01401004 	movi	r5,64
   198a0:	100d883a 	mov	r6,r2
   198a4:	00196ac0 	call	196ac <write_reg_bige>

    //cur_word = 1 << REG_LOC_TX_POWER_ON;
    cur_word = 0 << REG_LOC_TX_POWER_ON;    //default to power off
   198a8:	e03fe515 	stw	zero,-108(fp)
    cur_word |= 0x00024600; //default attenuation delta  default:
   198ac:	e0ffe517 	ldw	r3,-108(fp)
   198b0:	008000b4 	movhi	r2,2
   198b4:	10918004 	addi	r2,r2,17920
   198b8:	1884b03a 	or	r2,r3,r2
   198bc:	e0bfe515 	stw	r2,-108(fp)
    write_reg_bige(REG_MAP_BASEADDR, MB_RF_CONF_OFFSET + 4, cur_word); //power on
   198c0:	e0bfe517 	ldw	r2,-108(fp)
   198c4:	01000174 	movhi	r4,5
   198c8:	21100004 	addi	r4,r4,16384
   198cc:	01401104 	movi	r5,68
   198d0:	100d883a 	mov	r6,r2
   198d4:	00196ac0 	call	196ac <write_reg_bige>

    //min TX attenuation
    cur_word = 10000 << 16; //default attenuation
   198d8:	0089c434 	movhi	r2,10000
   198dc:	e0bfe515 	stw	r2,-108(fp)
    write_reg_bige(REG_MAP_BASEADDR, MB_RF_CONF_OFFSET + REG_LOC_TX_MIN_ATTEN, cur_word);
   198e0:	e0bfe517 	ldw	r2,-108(fp)
   198e4:	01000174 	movhi	r4,5
   198e8:	21100004 	addi	r4,r4,16384
   198ec:	01401204 	movi	r5,72
   198f0:	100d883a 	mov	r6,r2
   198f4:	00196ac0 	call	196ac <write_reg_bige>
    //min TX LO freq
    cur_word = 9568;  //666, or 2430
   198f8:	00895804 	movi	r2,9568
   198fc:	e0bfe515 	stw	r2,-108(fp)
    write_reg_bige(REG_MAP_BASEADDR, MB_RF_CONF_OFFSET + 12, cur_word); //freq in MHz
   19900:	e0bfe517 	ldw	r2,-108(fp)
   19904:	01000174 	movhi	r4,5
   19908:	21100004 	addi	r4,r4,16384
   1990c:	01401304 	movi	r5,76
   19910:	100d883a 	mov	r6,r2
   19914:	00196ac0 	call	196ac <write_reg_bige>

    //frequency change delta
    cur_word = 0x000a0a0a;
   19918:	008002b4 	movhi	r2,10
   1991c:	10828284 	addi	r2,r2,2570
   19920:	e0bfe515 	stw	r2,-108(fp)
    write_reg_bige(REG_MAP_BASEADDR, MB_RF_CONF_OFFSET + 16, cur_word);
   19924:	e0bfe517 	ldw	r2,-108(fp)
   19928:	01000174 	movhi	r4,5
   1992c:	21100004 	addi	r4,r4,16384
   19930:	01401404 	movi	r5,80
   19934:	100d883a 	mov	r6,r2
   19938:	00196ac0 	call	196ac <write_reg_bige>
    cur_word = 0x0a0a0a0a;
   1993c:	008282b4 	movhi	r2,2570
   19940:	10828284 	addi	r2,r2,2570
   19944:	e0bfe515 	stw	r2,-108(fp)
    write_reg_bige(REG_MAP_BASEADDR, MB_RF_CONF_OFFSET + 20, cur_word);
   19948:	e0bfe517 	ldw	r2,-108(fp)
   1994c:	01000174 	movhi	r4,5
   19950:	21100004 	addi	r4,r4,16384
   19954:	01401504 	movi	r5,84
   19958:	100d883a 	mov	r6,r2
   1995c:	00196ac0 	call	196ac <write_reg_bige>
    write_reg_bige(REG_MAP_BASEADDR, MB_RF_CONF_OFFSET + 24, cur_word);
   19960:	e0bfe517 	ldw	r2,-108(fp)
   19964:	01000174 	movhi	r4,5
   19968:	21100004 	addi	r4,r4,16384
   1996c:	01401604 	movi	r5,88
   19970:	100d883a 	mov	r6,r2
   19974:	00196ac0 	call	196ac <write_reg_bige>
    write_reg_bige(REG_MAP_BASEADDR, MB_RF_CONF_OFFSET + 28, cur_word);
   19978:	e0bfe517 	ldw	r2,-108(fp)
   1997c:	01000174 	movhi	r4,5
   19980:	21100004 	addi	r4,r4,16384
   19984:	01401704 	movi	r5,92
   19988:	100d883a 	mov	r6,r2
   1998c:	00196ac0 	call	196ac <write_reg_bige>


    //loopback
    //ad9361_bist_loopback(ad9361_phy, 1);

    cur_word = (1 << REG_LOC_RF_CAL_DONE) | (0x43 << 24);
   19990:	0090c034 	movhi	r2,17152
   19994:	10800044 	addi	r2,r2,1
   19998:	e0bfe515 	stw	r2,-108(fp)
    write_reg_bige(REG_MAP_BASEADDR, MB_RF_STAT_OFFSET + 0, cur_word); //turn on the fabric transmitter
   1999c:	e0bfe517 	ldw	r2,-108(fp)
   199a0:	01000174 	movhi	r4,5
   199a4:	21100004 	addi	r4,r4,16384
   199a8:	01410004 	movi	r5,1024
   199ac:	100d883a 	mov	r6,r2
   199b0:	00196ac0 	call	196ac <write_reg_bige>

    //added by sid to get the version
    num_1 = atoi(&BUILD_YEAR_CH2);  //2nd digit of the year
   199b4:	010000f4 	movhi	r4,3
   199b8:	21241144 	addi	r4,r4,-28603
   199bc:	001f4cc0 	call	1f4cc <atoi>
   199c0:	d0a28f15 	stw	r2,-30148(gp)
    num_1 = (num_1/10);
   199c4:	d0a28f17 	ldw	r2,-30148(gp)
   199c8:	1009883a 	mov	r4,r2
   199cc:	01400284 	movi	r5,10
   199d0:	001d6e40 	call	1d6e4 <__divsi3>
   199d4:	d0a28f15 	stw	r2,-30148(gp)
    num_2 = atoi(&BUILD_YEAR_CH3);  //lsd digit of the year
   199d8:	010000f4 	movhi	r4,3
   199dc:	21241184 	addi	r4,r4,-28602
   199e0:	001f4cc0 	call	1f4cc <atoi>
   199e4:	d0a29015 	stw	r2,-30144(gp)
    num_2 = (num_2 & 0xf);
   199e8:	d0a29017 	ldw	r2,-30144(gp)
   199ec:	108003cc 	andi	r2,r2,15
   199f0:	d0a29015 	stw	r2,-30144(gp)
    tmp = (BUILD_MONTH_CH0);
   199f4:	00801284 	movi	r2,74
   199f8:	10803fcc 	andi	r2,r2,255
   199fc:	1080201c 	xori	r2,r2,128
   19a00:	10bfe004 	addi	r2,r2,-128
   19a04:	108013e0 	cmpeqi	r2,r2,79
   19a08:	10000c1e 	bne	r2,zero,19a3c <main+0x348>
   19a0c:	00801284 	movi	r2,74
   19a10:	10803fcc 	andi	r2,r2,255
   19a14:	1080201c 	xori	r2,r2,128
   19a18:	10bfe004 	addi	r2,r2,-128
   19a1c:	108013a0 	cmpeqi	r2,r2,78
   19a20:	1000061e 	bne	r2,zero,19a3c <main+0x348>
   19a24:	00801284 	movi	r2,74
   19a28:	10803fcc 	andi	r2,r2,255
   19a2c:	1080201c 	xori	r2,r2,128
   19a30:	10bfe004 	addi	r2,r2,-128
   19a34:	10801118 	cmpnei	r2,r2,68
   19a38:	1000021e 	bne	r2,zero,19a44 <main+0x350>
   19a3c:	00800c44 	movi	r2,49
   19a40:	00000106 	br	19a48 <main+0x354>
   19a44:	00800c04 	movi	r2,48
   19a48:	d0a28c05 	stb	r2,-30160(gp)
    num_3 = atoi(&tmp); //2nd digit of the month
   19a4c:	d1228c04 	addi	r4,gp,-30160
   19a50:	001f4cc0 	call	1f4cc <atoi>
   19a54:	d0a29315 	stw	r2,-30132(gp)
    tmp = (BUILD_MONTH_CH1);
   19a58:	00801284 	movi	r2,74
   19a5c:	10803fcc 	andi	r2,r2,255
   19a60:	1080201c 	xori	r2,r2,128
   19a64:	10bfe004 	addi	r2,r2,-128
   19a68:	10801298 	cmpnei	r2,r2,74
   19a6c:	10000c1e 	bne	r2,zero,19aa0 <main+0x3ac>
   19a70:	00801d44 	movi	r2,117
   19a74:	10803fcc 	andi	r2,r2,255
   19a78:	1080201c 	xori	r2,r2,128
   19a7c:	10bfe004 	addi	r2,r2,-128
   19a80:	10801858 	cmpnei	r2,r2,97
   19a84:	1000061e 	bne	r2,zero,19aa0 <main+0x3ac>
   19a88:	00801b04 	movi	r2,108
   19a8c:	10803fcc 	andi	r2,r2,255
   19a90:	1080201c 	xori	r2,r2,128
   19a94:	10bfe004 	addi	r2,r2,-128
   19a98:	10801ba0 	cmpeqi	r2,r2,110
   19a9c:	1000991e 	bne	r2,zero,19d04 <main+0x610>
   19aa0:	00801284 	movi	r2,74
   19aa4:	10803fcc 	andi	r2,r2,255
   19aa8:	1080201c 	xori	r2,r2,128
   19aac:	10bfe004 	addi	r2,r2,-128
   19ab0:	108011a0 	cmpeqi	r2,r2,70
   19ab4:	1000901e 	bne	r2,zero,19cf8 <main+0x604>
   19ab8:	00801284 	movi	r2,74
   19abc:	10803fcc 	andi	r2,r2,255
   19ac0:	1080201c 	xori	r2,r2,128
   19ac4:	10bfe004 	addi	r2,r2,-128
   19ac8:	10801358 	cmpnei	r2,r2,77
   19acc:	10000c1e 	bne	r2,zero,19b00 <main+0x40c>
   19ad0:	00801d44 	movi	r2,117
   19ad4:	10803fcc 	andi	r2,r2,255
   19ad8:	1080201c 	xori	r2,r2,128
   19adc:	10bfe004 	addi	r2,r2,-128
   19ae0:	10801858 	cmpnei	r2,r2,97
   19ae4:	1000061e 	bne	r2,zero,19b00 <main+0x40c>
   19ae8:	00801b04 	movi	r2,108
   19aec:	10803fcc 	andi	r2,r2,255
   19af0:	1080201c 	xori	r2,r2,128
   19af4:	10bfe004 	addi	r2,r2,-128
   19af8:	10801ca0 	cmpeqi	r2,r2,114
   19afc:	10007b1e 	bne	r2,zero,19cec <main+0x5f8>
   19b00:	00801284 	movi	r2,74
   19b04:	10803fcc 	andi	r2,r2,255
   19b08:	1080201c 	xori	r2,r2,128
   19b0c:	10bfe004 	addi	r2,r2,-128
   19b10:	10801058 	cmpnei	r2,r2,65
   19b14:	1000061e 	bne	r2,zero,19b30 <main+0x43c>
   19b18:	00801d44 	movi	r2,117
   19b1c:	10803fcc 	andi	r2,r2,255
   19b20:	1080201c 	xori	r2,r2,128
   19b24:	10bfe004 	addi	r2,r2,-128
   19b28:	10801c20 	cmpeqi	r2,r2,112
   19b2c:	10006d1e 	bne	r2,zero,19ce4 <main+0x5f0>
   19b30:	00801284 	movi	r2,74
   19b34:	10803fcc 	andi	r2,r2,255
   19b38:	1080201c 	xori	r2,r2,128
   19b3c:	10bfe004 	addi	r2,r2,-128
   19b40:	10801358 	cmpnei	r2,r2,77
   19b44:	10000c1e 	bne	r2,zero,19b78 <main+0x484>
   19b48:	00801d44 	movi	r2,117
   19b4c:	10803fcc 	andi	r2,r2,255
   19b50:	1080201c 	xori	r2,r2,128
   19b54:	10bfe004 	addi	r2,r2,-128
   19b58:	10801858 	cmpnei	r2,r2,97
   19b5c:	1000061e 	bne	r2,zero,19b78 <main+0x484>
   19b60:	00801b04 	movi	r2,108
   19b64:	10803fcc 	andi	r2,r2,255
   19b68:	1080201c 	xori	r2,r2,128
   19b6c:	10bfe004 	addi	r2,r2,-128
   19b70:	10801e60 	cmpeqi	r2,r2,121
   19b74:	1000591e 	bne	r2,zero,19cdc <main+0x5e8>
   19b78:	00801284 	movi	r2,74
   19b7c:	10803fcc 	andi	r2,r2,255
   19b80:	1080201c 	xori	r2,r2,128
   19b84:	10bfe004 	addi	r2,r2,-128
   19b88:	10801298 	cmpnei	r2,r2,74
   19b8c:	10000c1e 	bne	r2,zero,19bc0 <main+0x4cc>
   19b90:	00801d44 	movi	r2,117
   19b94:	10803fcc 	andi	r2,r2,255
   19b98:	1080201c 	xori	r2,r2,128
   19b9c:	10bfe004 	addi	r2,r2,-128
   19ba0:	10801d58 	cmpnei	r2,r2,117
   19ba4:	1000061e 	bne	r2,zero,19bc0 <main+0x4cc>
   19ba8:	00801b04 	movi	r2,108
   19bac:	10803fcc 	andi	r2,r2,255
   19bb0:	1080201c 	xori	r2,r2,128
   19bb4:	10bfe004 	addi	r2,r2,-128
   19bb8:	10801ba0 	cmpeqi	r2,r2,110
   19bbc:	1000451e 	bne	r2,zero,19cd4 <main+0x5e0>
   19bc0:	00801284 	movi	r2,74
   19bc4:	10803fcc 	andi	r2,r2,255
   19bc8:	1080201c 	xori	r2,r2,128
   19bcc:	10bfe004 	addi	r2,r2,-128
   19bd0:	10801298 	cmpnei	r2,r2,74
   19bd4:	10000c1e 	bne	r2,zero,19c08 <main+0x514>
   19bd8:	00801d44 	movi	r2,117
   19bdc:	10803fcc 	andi	r2,r2,255
   19be0:	1080201c 	xori	r2,r2,128
   19be4:	10bfe004 	addi	r2,r2,-128
   19be8:	10801d58 	cmpnei	r2,r2,117
   19bec:	1000061e 	bne	r2,zero,19c08 <main+0x514>
   19bf0:	00801b04 	movi	r2,108
   19bf4:	10803fcc 	andi	r2,r2,255
   19bf8:	1080201c 	xori	r2,r2,128
   19bfc:	10bfe004 	addi	r2,r2,-128
   19c00:	10801b20 	cmpeqi	r2,r2,108
   19c04:	1000311e 	bne	r2,zero,19ccc <main+0x5d8>
   19c08:	00801284 	movi	r2,74
   19c0c:	10803fcc 	andi	r2,r2,255
   19c10:	1080201c 	xori	r2,r2,128
   19c14:	10bfe004 	addi	r2,r2,-128
   19c18:	10801058 	cmpnei	r2,r2,65
   19c1c:	1000061e 	bne	r2,zero,19c38 <main+0x544>
   19c20:	00801d44 	movi	r2,117
   19c24:	10803fcc 	andi	r2,r2,255
   19c28:	1080201c 	xori	r2,r2,128
   19c2c:	10bfe004 	addi	r2,r2,-128
   19c30:	10801d60 	cmpeqi	r2,r2,117
   19c34:	1000231e 	bne	r2,zero,19cc4 <main+0x5d0>
   19c38:	00801284 	movi	r2,74
   19c3c:	10803fcc 	andi	r2,r2,255
   19c40:	1080201c 	xori	r2,r2,128
   19c44:	10bfe004 	addi	r2,r2,-128
   19c48:	108014e0 	cmpeqi	r2,r2,83
   19c4c:	10001a1e 	bne	r2,zero,19cb8 <main+0x5c4>
   19c50:	00801284 	movi	r2,74
   19c54:	10803fcc 	andi	r2,r2,255
   19c58:	1080201c 	xori	r2,r2,128
   19c5c:	10bfe004 	addi	r2,r2,-128
   19c60:	108013e0 	cmpeqi	r2,r2,79
   19c64:	1000121e 	bne	r2,zero,19cb0 <main+0x5bc>
   19c68:	00801284 	movi	r2,74
   19c6c:	10803fcc 	andi	r2,r2,255
   19c70:	1080201c 	xori	r2,r2,128
   19c74:	10bfe004 	addi	r2,r2,-128
   19c78:	108013a0 	cmpeqi	r2,r2,78
   19c7c:	10000a1e 	bne	r2,zero,19ca8 <main+0x5b4>
   19c80:	00801284 	movi	r2,74
   19c84:	10803fcc 	andi	r2,r2,255
   19c88:	1080201c 	xori	r2,r2,128
   19c8c:	10bfe004 	addi	r2,r2,-128
   19c90:	10801118 	cmpnei	r2,r2,68
   19c94:	1000021e 	bne	r2,zero,19ca0 <main+0x5ac>
   19c98:	00800c84 	movi	r2,50
   19c9c:	00000806 	br	19cc0 <main+0x5cc>
   19ca0:	00800fc4 	movi	r2,63
   19ca4:	00000606 	br	19cc0 <main+0x5cc>
   19ca8:	00800c44 	movi	r2,49
   19cac:	00000406 	br	19cc0 <main+0x5cc>
   19cb0:	00800c04 	movi	r2,48
   19cb4:	00000f06 	br	19cf4 <main+0x600>
   19cb8:	00800e44 	movi	r2,57
   19cbc:	00000d06 	br	19cf4 <main+0x600>
   19cc0:	00000c06 	br	19cf4 <main+0x600>
   19cc4:	00800e04 	movi	r2,56
   19cc8:	00000a06 	br	19cf4 <main+0x600>
   19ccc:	00800dc4 	movi	r2,55
   19cd0:	00000806 	br	19cf4 <main+0x600>
   19cd4:	00800d84 	movi	r2,54
   19cd8:	00000606 	br	19cf4 <main+0x600>
   19cdc:	00800d44 	movi	r2,53
   19ce0:	00000406 	br	19cf4 <main+0x600>
   19ce4:	00800d04 	movi	r2,52
   19ce8:	00000206 	br	19cf4 <main+0x600>
   19cec:	00800cc4 	movi	r2,51
   19cf0:	00000306 	br	19d00 <main+0x60c>
   19cf4:	00000206 	br	19d00 <main+0x60c>
   19cf8:	00800c84 	movi	r2,50
   19cfc:	00000206 	br	19d08 <main+0x614>
   19d00:	00000106 	br	19d08 <main+0x614>
   19d04:	00800c44 	movi	r2,49
   19d08:	d0a28c05 	stb	r2,-30160(gp)
    num_4 = atoi(&tmp); //lsd digit of the month
   19d0c:	d1228c04 	addi	r4,gp,-30160
   19d10:	001f4cc0 	call	1f4cc <atoi>
   19d14:	d0a29115 	stw	r2,-30140(gp)
    tmp = (BUILD_DAY_CH0);
   19d18:	00800c44 	movi	r2,49
   19d1c:	10c03fcc 	andi	r3,r2,255
   19d20:	18c0201c 	xori	r3,r3,128
   19d24:	18ffe004 	addi	r3,r3,-128
   19d28:	18c00c08 	cmpgei	r3,r3,48
   19d2c:	1800011e 	bne	r3,zero,19d34 <main+0x640>
   19d30:	00800c04 	movi	r2,48
   19d34:	d0a28c05 	stb	r2,-30160(gp)
    num_5 = atoi(&tmp); //2nd digit of the day
   19d38:	d1228c04 	addi	r4,gp,-30160
   19d3c:	001f4cc0 	call	1f4cc <atoi>
   19d40:	d0a28d15 	stw	r2,-30156(gp)
    tmp = (BUILD_DAY_CH1);
   19d44:	00800c44 	movi	r2,49
   19d48:	d0a28c05 	stb	r2,-30160(gp)
    num_6 = atoi(&tmp); //lsd digit of the day
   19d4c:	d1228c04 	addi	r4,gp,-30160
   19d50:	001f4cc0 	call	1f4cc <atoi>
   19d54:	d0a28e15 	stw	r2,-30152(gp)

    cur_word = (num_1 <<28) | (num_2 <<24) | (num_3 <<20) | (num_4 <<16) | (num_5 <<12) | (num_6 <<8);
   19d58:	d0a28f17 	ldw	r2,-30148(gp)
   19d5c:	1006973a 	slli	r3,r2,28
   19d60:	d0a29017 	ldw	r2,-30144(gp)
   19d64:	1004963a 	slli	r2,r2,24
   19d68:	1886b03a 	or	r3,r3,r2
   19d6c:	d0a29317 	ldw	r2,-30132(gp)
   19d70:	1004953a 	slli	r2,r2,20
   19d74:	1886b03a 	or	r3,r3,r2
   19d78:	d0a29117 	ldw	r2,-30140(gp)
   19d7c:	1004943a 	slli	r2,r2,16
   19d80:	1886b03a 	or	r3,r3,r2
   19d84:	d0a28d17 	ldw	r2,-30156(gp)
   19d88:	1004933a 	slli	r2,r2,12
   19d8c:	1886b03a 	or	r3,r3,r2
   19d90:	d0a28e17 	ldw	r2,-30152(gp)
   19d94:	1004923a 	slli	r2,r2,8
   19d98:	1884b03a 	or	r2,r3,r2
   19d9c:	e0bfe515 	stw	r2,-108(fp)
    write_reg_bige(REG_MAP_BASEADDR, MB_RF_STAT_OFFSET + 4, cur_word);
   19da0:	e0bfe517 	ldw	r2,-108(fp)
   19da4:	01000174 	movhi	r4,5
   19da8:	21100004 	addi	r4,r4,16384
   19dac:	01410104 	movi	r5,1028
   19db0:	100d883a 	mov	r6,r2
   19db4:	00196ac0 	call	196ac <write_reg_bige>
    printf("Init done.\r\n");
   19db8:	010000f4 	movhi	r4,3
   19dbc:	21241b04 	addi	r4,r4,-28564
   19dc0:	001f9e00 	call	1f9e0 <puts>
    printf("griffin software v.%s, %s %s\n\r", SW_VERSION, __DATE__, __TIME__);
   19dc4:	010000f4 	movhi	r4,3
   19dc8:	21241e04 	addi	r4,r4,-28552
   19dcc:	014000f4 	movhi	r5,3
   19dd0:	29640d04 	addi	r5,r5,-28620
   19dd4:	018000f4 	movhi	r6,3
   19dd8:	31a40f04 	addi	r6,r6,-28612
   19ddc:	01c000f4 	movhi	r7,3
   19de0:	39e41204 	addi	r7,r7,-28600
   19de4:	001f8180 	call	1f818 <printf>
    printf("-----------------------------------------------\n\r");
   19de8:	010000f4 	movhi	r4,3
   19dec:	21242604 	addi	r4,r4,-28520
   19df0:	001f8180 	call	1f818 <printf>
			console_print("Invalid command!\n");
		}
	}
#else

	chassis_ctrl_inhibit = 1; //no chassis control
   19df4:	00800044 	movi	r2,1
   19df8:	e0bfd705 	stb	r2,-164(fp)
	while(1)
	{
		//polling the registers for changes------------------------------------
		cur_word = read_reg_bige(REG_MAP_BASEADDR, MB_RF_CONF_OFFSET + 0);
   19dfc:	01000174 	movhi	r4,5
   19e00:	21100004 	addi	r4,r4,16384
   19e04:	01401004 	movi	r5,64
   19e08:	00196680 	call	19668 <read_reg_bige>
   19e0c:	e0bfe515 	stw	r2,-108(fp)

	    //chassis_ctrl_inhibit = (cur_word >> REG_LOC_CHASSIS_CTRL_INH) & 0x1;
	    test_tone_out_select = (cur_word >> REG_LOC_DVB_T_OUT_SELECT) & 0x1;
   19e10:	e0bfe517 	ldw	r2,-108(fp)
   19e14:	1004d7fa 	srli	r2,r2,31
   19e18:	e0bfd745 	stb	r2,-163(fp)

	    if (!rf_reg_change_req)
   19e1c:	e0bfd083 	ldbu	r2,-190(fp)
   19e20:	1000111e 	bne	r2,zero,19e68 <main+0x774>
	    {
	    	rf_reg_change_req = (cur_word >> REG_LOC_RF_REG_CHANGE_REQ) & 0x1;
   19e24:	e0bfe517 	ldw	r2,-108(fp)
   19e28:	1004d5ba 	srli	r2,r2,22
   19e2c:	1080004c 	andi	r2,r2,1
   19e30:	e0bfd085 	stb	r2,-190(fp)

	    	if (rf_reg_change_req)
   19e34:	e0bfd083 	ldbu	r2,-190(fp)
   19e38:	10000b26 	beq	r2,zero,19e68 <main+0x774>
	    	{
				cur_word &= ~(0x1 << REG_LOC_RF_REG_CHANGE_REQ);
   19e3c:	e0ffe517 	ldw	r3,-108(fp)
   19e40:	00bff034 	movhi	r2,65472
   19e44:	10bfffc4 	addi	r2,r2,-1
   19e48:	1884703a 	and	r2,r3,r2
   19e4c:	e0bfe515 	stw	r2,-108(fp)
				write_reg_bige(REG_MAP_BASEADDR, MB_RF_CONF_OFFSET + 0, cur_word);
   19e50:	e0bfe517 	ldw	r2,-108(fp)
   19e54:	01000174 	movhi	r4,5
   19e58:	21100004 	addi	r4,r4,16384
   19e5c:	01401004 	movi	r5,64
   19e60:	100d883a 	mov	r6,r2
   19e64:	00196ac0 	call	196ac <write_reg_bige>
				chassis_ctrl_prev = chassis_ctrl;
			}
	    }*/

	    //skip the rest of there is no change
	    if (!rf_reg_change_req)
   19e68:	e0bfd083 	ldbu	r2,-190(fp)
   19e6c:	1000011e 	bne	r2,zero,19e74 <main+0x780>
	    	continue;
   19e70:	00013706 	br	1a350 <main+0xc5c>

	    console_print("rf change request received.\n");
   19e74:	010000f4 	movhi	r4,3
   19e78:	21243304 	addi	r4,r4,-28468
   19e7c:	00188580 	call	18858 <console_print>
	    rf_reg_change_req = 0; //turn it off
   19e80:	e03fd085 	stb	zero,-190(fp)

	    reg_word1 = read_reg_bige(REG_MAP_BASEADDR, MB_RF_CONF_OFFSET + 4);
   19e84:	01000174 	movhi	r4,5
   19e88:	21100004 	addi	r4,r4,16384
   19e8c:	01401104 	movi	r5,68
   19e90:	00196680 	call	19668 <read_reg_bige>
   19e94:	e0bfd815 	stw	r2,-160(fp)
	    reg_word2 = read_reg_bige(REG_MAP_BASEADDR, MB_RF_CONF_OFFSET + 8);
   19e98:	01000174 	movhi	r4,5
   19e9c:	21100004 	addi	r4,r4,16384
   19ea0:	01401204 	movi	r5,72
   19ea4:	00196680 	call	19668 <read_reg_bige>
   19ea8:	e0bfd915 	stw	r2,-156(fp)
	    reg_word3 = read_reg_bige(REG_MAP_BASEADDR, MB_RF_CONF_OFFSET + 12);
   19eac:	01000174 	movhi	r4,5
   19eb0:	21100004 	addi	r4,r4,16384
   19eb4:	01401304 	movi	r5,76
   19eb8:	00196680 	call	19668 <read_reg_bige>
   19ebc:	e0bfda15 	stw	r2,-152(fp)
	    tx_ch_freq_min = reg_word3;
   19ec0:	e0bfda17 	ldw	r2,-152(fp)
   19ec4:	e0bfdb15 	stw	r2,-148(fp)

	    tx_power_on = (reg_word1 >> REG_LOC_TX_POWER_ON) & 0x1;
   19ec8:	e0bfd817 	ldw	r2,-160(fp)
   19ecc:	1004d7fa 	srli	r2,r2,31
   19ed0:	e0bfdc05 	stb	r2,-144(fp)
	    rf_tx_atten_select = (reg_word1 >> REG_LOC_TX_ATTEN_SEL) & 0x3;
   19ed4:	e0bfd817 	ldw	r2,-160(fp)
   19ed8:	1004d73a 	srli	r2,r2,28
   19edc:	108000cc 	andi	r2,r2,3
   19ee0:	e0bfdc45 	stb	r2,-143(fp)
	    rf_tx_ch_sel = (reg_word1 >> REG_LOC_TX_CHAN_SEL) & 0xf;
   19ee4:	e0bfd817 	ldw	r2,-160(fp)
   19ee8:	1004d63a 	srli	r2,r2,24
   19eec:	108003cc 	andi	r2,r2,15
   19ef0:	e0bfdc85 	stb	r2,-142(fp)
	    tone1_change_req = (reg_word1 >> REG_LOC_TONE1_CHANGE_REQ) & 0x1;
	    tone2_change_req = (reg_word1 >> REG_LOC_TONE2_CHANGE_REQ) & 0x1;
	    tx_bw_change_req = (reg_word1 >> REG_LOC_TX_BW_CHANGE_REQ) & 0x1;
	    */

	    min_attenuation_mdb = reg_word2 >> 16;
   19ef4:	e0bfd917 	ldw	r2,-156(fp)
   19ef8:	1004d43a 	srli	r2,r2,16
   19efc:	e0bfdd15 	stw	r2,-140(fp)
	    tone1_freq = (reg_word2 >> 8) & 0xff;
   19f00:	e0bfd917 	ldw	r2,-156(fp)
   19f04:	1004d23a 	srli	r2,r2,8
   19f08:	10803fcc 	andi	r2,r2,255
   19f0c:	e0bfde15 	stw	r2,-136(fp)
	    tone2_freq = reg_word2 & 0xff;
   19f10:	e0bfd917 	ldw	r2,-156(fp)
   19f14:	10803fcc 	andi	r2,r2,255
   19f18:	e0bfdf15 	stw	r2,-132(fp)
	    tx_bw_sel = reg_word1 & 0x03; //00: 8 MHz, 01: 7 MHz, 10: 6 MHz
   19f1c:	e0bfd817 	ldw	r2,-160(fp)
   19f20:	108000cc 	andi	r2,r2,3
   19f24:	e0bfe005 	stb	r2,-128(fp)


	    for(i = 0; i < 4; i++)
   19f28:	e03fd115 	stw	zero,-188(fp)
   19f2c:	00001906 	br	19f94 <main+0x8a0>
	    {
	    	atten_offset = ((reg_word1 >> (20 - i * 4)) & 0xf);
   19f30:	00c00144 	movi	r3,5
   19f34:	e0bfd117 	ldw	r2,-188(fp)
   19f38:	1885c83a 	sub	r2,r3,r2
   19f3c:	1085883a 	add	r2,r2,r2
   19f40:	1085883a 	add	r2,r2,r2
   19f44:	1007883a 	mov	r3,r2
   19f48:	e0bfd817 	ldw	r2,-160(fp)
   19f4c:	10c4d83a 	srl	r2,r2,r3
   19f50:	108003cc 	andi	r2,r2,15
   19f54:	e0bfe045 	stb	r2,-127(fp)
	    	tx_pwr_atten[i] = min_attenuation_mdb + atten_offset * 1000; //in mdB
   19f58:	e0bfe043 	ldbu	r2,-127(fp)
   19f5c:	1080fa24 	muli	r2,r2,1000
   19f60:	1007883a 	mov	r3,r2
   19f64:	e0bfdd17 	ldw	r2,-140(fp)
   19f68:	1887883a 	add	r3,r3,r2
   19f6c:	e0bfd117 	ldw	r2,-188(fp)
   19f70:	1085883a 	add	r2,r2,r2
   19f74:	1085883a 	add	r2,r2,r2
   19f78:	e13fca04 	addi	r4,fp,-216
   19f7c:	2085883a 	add	r2,r4,r2
   19f80:	10801e04 	addi	r2,r2,120
   19f84:	10c00015 	stw	r3,0(r2)
	    tone1_freq = (reg_word2 >> 8) & 0xff;
	    tone2_freq = reg_word2 & 0xff;
	    tx_bw_sel = reg_word1 & 0x03; //00: 8 MHz, 01: 7 MHz, 10: 6 MHz


	    for(i = 0; i < 4; i++)
   19f88:	e0bfd117 	ldw	r2,-188(fp)
   19f8c:	10800044 	addi	r2,r2,1
   19f90:	e0bfd115 	stw	r2,-188(fp)
   19f94:	e0bfd117 	ldw	r2,-188(fp)
   19f98:	10800110 	cmplti	r2,r2,4
   19f9c:	103fe41e 	bne	r2,zero,19f30 <_gp+0xfffe7e10>
	    {
	    	atten_offset = ((reg_word1 >> (20 - i * 4)) & 0xf);
	    	tx_pwr_atten[i] = min_attenuation_mdb + atten_offset * 1000; //in mdB
	    }

	    tx_ch_freq[0] = tx_ch_freq_min;
   19fa0:	e0bfdb17 	ldw	r2,-148(fp)
   19fa4:	e0bfec15 	stw	r2,-80(fp)

	    for(i = 0; i < 4; i++)
   19fa8:	e03fd115 	stw	zero,-188(fp)
   19fac:	00003b06 	br	1a09c <main+0x9a8>
	    {
	    	cur_word = read_reg_bige(REG_MAP_BASEADDR, REG_LOC_CHAN_FREQ_OFF_BASE + i * 4);
   19fb0:	e0bfd117 	ldw	r2,-188(fp)
   19fb4:	10800504 	addi	r2,r2,20
   19fb8:	1085883a 	add	r2,r2,r2
   19fbc:	1085883a 	add	r2,r2,r2
   19fc0:	01000174 	movhi	r4,5
   19fc4:	21100004 	addi	r4,r4,16384
   19fc8:	100b883a 	mov	r5,r2
   19fcc:	00196680 	call	19668 <read_reg_bige>
   19fd0:	e0bfe515 	stw	r2,-108(fp)

	    	for(j = 0; j < 4; j++)
   19fd4:	e03fd215 	stw	zero,-184(fp)
   19fd8:	00002a06 	br	1a084 <main+0x990>
	    	{
	    		k = i * 4 + j;
   19fdc:	e0bfd117 	ldw	r2,-188(fp)
   19fe0:	1085883a 	add	r2,r2,r2
   19fe4:	1085883a 	add	r2,r2,r2
   19fe8:	1007883a 	mov	r3,r2
   19fec:	e0bfd217 	ldw	r2,-184(fp)
   19ff0:	1885883a 	add	r2,r3,r2
   19ff4:	e0bfe115 	stw	r2,-124(fp)
	    		freq_offset = ((cur_word >> ((3 - j) * 8)) & 0xff);
   19ff8:	e0ffe517 	ldw	r3,-108(fp)
   19ffc:	010000c4 	movi	r4,3
   1a000:	e0bfd217 	ldw	r2,-184(fp)
   1a004:	2085c83a 	sub	r2,r4,r2
   1a008:	100490fa 	slli	r2,r2,3
   1a00c:	1884d83a 	srl	r2,r3,r2
   1a010:	10803fcc 	andi	r2,r2,255
   1a014:	e0bfe215 	stw	r2,-120(fp)

	    		//console_print("k = %d, %d\n", k, freq_offset);

	    		if (k == 0)
   1a018:	e0bfe117 	ldw	r2,-124(fp)
   1a01c:	1000051e 	bne	r2,zero,1a034 <main+0x940>
	    		{
	    			tx_ch_freq[0] = tx_ch_freq_min + freq_offset;  //in MHz
   1a020:	e0ffdb17 	ldw	r3,-148(fp)
   1a024:	e0bfe217 	ldw	r2,-120(fp)
   1a028:	1885883a 	add	r2,r3,r2
   1a02c:	e0bfec15 	stw	r2,-80(fp)
   1a030:	00001106 	br	1a078 <main+0x984>
	    		}
	    		else
	    		{
	    			tx_ch_freq[k] = tx_ch_freq[k - 1] + freq_offset;
   1a034:	e0bfe117 	ldw	r2,-124(fp)
   1a038:	10bfffc4 	addi	r2,r2,-1
   1a03c:	1085883a 	add	r2,r2,r2
   1a040:	1085883a 	add	r2,r2,r2
   1a044:	e0ffca04 	addi	r3,fp,-216
   1a048:	1885883a 	add	r2,r3,r2
   1a04c:	10802204 	addi	r2,r2,136
   1a050:	10c00017 	ldw	r3,0(r2)
   1a054:	e0bfe217 	ldw	r2,-120(fp)
   1a058:	1887883a 	add	r3,r3,r2
   1a05c:	e0bfe117 	ldw	r2,-124(fp)
   1a060:	1085883a 	add	r2,r2,r2
   1a064:	1085883a 	add	r2,r2,r2
   1a068:	e13fca04 	addi	r4,fp,-216
   1a06c:	2085883a 	add	r2,r4,r2
   1a070:	10802204 	addi	r2,r2,136
   1a074:	10c00015 	stw	r3,0(r2)

	    for(i = 0; i < 4; i++)
	    {
	    	cur_word = read_reg_bige(REG_MAP_BASEADDR, REG_LOC_CHAN_FREQ_OFF_BASE + i * 4);

	    	for(j = 0; j < 4; j++)
   1a078:	e0bfd217 	ldw	r2,-184(fp)
   1a07c:	10800044 	addi	r2,r2,1
   1a080:	e0bfd215 	stw	r2,-184(fp)
   1a084:	e0bfd217 	ldw	r2,-184(fp)
   1a088:	10800110 	cmplti	r2,r2,4
   1a08c:	103fd31e 	bne	r2,zero,19fdc <_gp+0xfffe7ebc>
	    	tx_pwr_atten[i] = min_attenuation_mdb + atten_offset * 1000; //in mdB
	    }

	    tx_ch_freq[0] = tx_ch_freq_min;

	    for(i = 0; i < 4; i++)
   1a090:	e0bfd117 	ldw	r2,-188(fp)
   1a094:	10800044 	addi	r2,r2,1
   1a098:	e0bfd115 	stw	r2,-188(fp)
   1a09c:	e0bfd117 	ldw	r2,-188(fp)
   1a0a0:	10800110 	cmplti	r2,r2,4
   1a0a4:	103fc21e 	bne	r2,zero,19fb0 <_gp+0xfffe7e90>
//		/*else
//		{
//			lo_freq_hz = tx_ch_freq_min * 1000000; //reg value in kHz
//		}*/

	    if (tx_power_on != tx_power_on_prev)
   1a0a8:	e0ffdc03 	ldbu	r3,-144(fp)
   1a0ac:	e0bfca03 	ldbu	r2,-216(fp)
   1a0b0:	18802026 	beq	r3,r2,1a134 <main+0xa40>
		{
			if (!tx_power_on)
   1a0b4:	e0bfdc03 	ldbu	r2,-144(fp)
   1a0b8:	1000071e 	bne	r2,zero,1a0d8 <main+0x9e4>
			{
				//set deep attenuation
				cur_attenuation_mdb = 80 * 1000; //almost max atten (89.5)
   1a0bc:	00800074 	movhi	r2,1
   1a0c0:	108e2004 	addi	r2,r2,14464
   1a0c4:	e0bfcc15 	stw	r2,-208(fp)
				console_print("TX power off: max attenuation set.\n");
   1a0c8:	010000f4 	movhi	r4,3
   1a0cc:	21243b04 	addi	r4,r4,-28436
   1a0d0:	00188580 	call	18858 <console_print>
   1a0d4:	00000c06 	br	1a108 <main+0xa14>
			}
			else
			{
				cur_attenuation_mdb = tx_pwr_atten[rf_tx_atten_select];  //restore attenuation
   1a0d8:	e0bfdc47 	ldb	r2,-143(fp)
   1a0dc:	1085883a 	add	r2,r2,r2
   1a0e0:	1085883a 	add	r2,r2,r2
   1a0e4:	e0ffca04 	addi	r3,fp,-216
   1a0e8:	1885883a 	add	r2,r3,r2
   1a0ec:	10801e04 	addi	r2,r2,120
   1a0f0:	10800017 	ldw	r2,0(r2)
   1a0f4:	e0bfcc15 	stw	r2,-208(fp)
				console_print("TX power on: current attenuation restored (%d mdB).\n", cur_attenuation_mdb);
   1a0f8:	010000f4 	movhi	r4,3
   1a0fc:	21244404 	addi	r4,r4,-28400
   1a100:	e17fcc17 	ldw	r5,-208(fp)
   1a104:	00188580 	call	18858 <console_print>
			}

			ad9361_set_tx_attenuation(ad9361_phy, 0, cur_attenuation_mdb);
   1a108:	d0a29217 	ldw	r2,-30136(gp)
   1a10c:	1009883a 	mov	r4,r2
   1a110:	000b883a 	mov	r5,zero
   1a114:	e1bfcc17 	ldw	r6,-208(fp)
   1a118:	00139a80 	call	139a8 <ad9361_set_tx_attenuation>
			get_tx1_attenuation(ad9361_phy, 0);
   1a11c:	d0a29217 	ldw	r2,-30136(gp)
   1a120:	1009883a 	mov	r4,r2
   1a124:	000b883a 	mov	r5,zero
   1a128:	0016ca40 	call	16ca4 <get_tx1_attenuation>
			tx_power_on_prev = tx_power_on;
   1a12c:	e0bfdc03 	ldbu	r2,-144(fp)
   1a130:	e0bfca05 	stb	r2,-216(fp)
		}

		if (((rf_tx_atten_select != rf_tx_atten_select_prev) || (min_attenuation_mdb != min_attenuation_mdb_prev)) && tx_power_on)
   1a134:	e0ffdc47 	ldb	r3,-143(fp)
   1a138:	e0bfd007 	ldb	r2,-192(fp)
   1a13c:	1880031e 	bne	r3,r2,1a14c <main+0xa58>
   1a140:	e0ffdd17 	ldw	r3,-140(fp)
   1a144:	e0bfcb17 	ldw	r2,-212(fp)
   1a148:	18801b26 	beq	r3,r2,1a1b8 <main+0xac4>
   1a14c:	e0bfdc03 	ldbu	r2,-144(fp)
   1a150:	10001926 	beq	r2,zero,1a1b8 <main+0xac4>
		{
			//atten_change_req = 1;
			cur_attenuation_mdb = tx_pwr_atten[rf_tx_atten_select];
   1a154:	e0bfdc47 	ldb	r2,-143(fp)
   1a158:	1085883a 	add	r2,r2,r2
   1a15c:	1085883a 	add	r2,r2,r2
   1a160:	e13fca04 	addi	r4,fp,-216
   1a164:	2085883a 	add	r2,r4,r2
   1a168:	10801e04 	addi	r2,r2,120
   1a16c:	10800017 	ldw	r2,0(r2)
   1a170:	e0bfcc15 	stw	r2,-208(fp)
			ad9361_set_tx_attenuation(ad9361_phy, 0, cur_attenuation_mdb);
   1a174:	d0a29217 	ldw	r2,-30136(gp)
   1a178:	1009883a 	mov	r4,r2
   1a17c:	000b883a 	mov	r5,zero
   1a180:	e1bfcc17 	ldw	r6,-208(fp)
   1a184:	00139a80 	call	139a8 <ad9361_set_tx_attenuation>
			rf_tx_atten_select_prev = rf_tx_atten_select;
   1a188:	e0bfdc43 	ldbu	r2,-143(fp)
   1a18c:	e0bfd005 	stb	r2,-192(fp)
			min_attenuation_mdb_prev = min_attenuation_mdb;
   1a190:	e0bfdd17 	ldw	r2,-140(fp)
   1a194:	e0bfcb15 	stw	r2,-212(fp)

			get_tx1_attenuation(ad9361_phy, 0);
   1a198:	d0a29217 	ldw	r2,-30136(gp)
   1a19c:	1009883a 	mov	r4,r2
   1a1a0:	000b883a 	mov	r5,zero
   1a1a4:	0016ca40 	call	16ca4 <get_tx1_attenuation>
			console_print("Attenuation changed: %d mdB.\n", cur_attenuation_mdb);
   1a1a8:	010000f4 	movhi	r4,3
   1a1ac:	21245204 	addi	r4,r4,-28344
   1a1b0:	e17fcc17 	ldw	r5,-208(fp)
   1a1b4:	00188580 	call	18858 <console_print>
			REG_MAP_mWriteReg(REG_MAP_BASEADDR, MB_RF_STAT_OFFSET + 0, cur_word);
			rf_tx_on_btn_prev = rf_tx_on_btn;
		}*/


		if ((rf_tx_ch_sel != rf_tx_ch_sel_prev) || (tx_ch_freq_min != tx_ch_freq_min_prev))
   1a1b8:	e0ffdc87 	ldb	r3,-142(fp)
   1a1bc:	e0bfd047 	ldb	r2,-191(fp)
   1a1c0:	1880031e 	bne	r3,r2,1a1d0 <main+0xadc>
   1a1c4:	e0ffdb17 	ldw	r3,-148(fp)
   1a1c8:	e0bfcf17 	ldw	r2,-196(fp)
   1a1cc:	18804a26 	beq	r3,r2,1a2f8 <main+0xc04>
			/*for(i = 0; i < 16; i++)
			{
				console_print("i = %d, %d\n", i, tx_ch_freq[i]);
			}*/

			lo_freq_hz = (tx_ch_freq[rf_tx_ch_sel]) * 250000;
   1a1d0:	e0bfdc87 	ldb	r2,-142(fp)
   1a1d4:	1085883a 	add	r2,r2,r2
   1a1d8:	1085883a 	add	r2,r2,r2
   1a1dc:	e0ffca04 	addi	r3,fp,-216
   1a1e0:	1885883a 	add	r2,r3,r2
   1a1e4:	10802204 	addi	r2,r2,136
   1a1e8:	10c00017 	ldw	r3,0(r2)
   1a1ec:	00800134 	movhi	r2,4
   1a1f0:	10b42404 	addi	r2,r2,-12144
   1a1f4:	1885383a 	mul	r2,r3,r2
   1a1f8:	1023883a 	mov	r17,r2
   1a1fc:	0025883a 	mov	r18,zero
   1a200:	e47fe615 	stw	r17,-104(fp)
   1a204:	e4bfe715 	stw	r18,-100(fp)
			selected_tx_freq = lo_freq_hz;
   1a208:	e0bfe617 	ldw	r2,-104(fp)
   1a20c:	e0bfe315 	stw	r2,-116(fp)
   1a210:	e0bfe717 	ldw	r2,-100(fp)
   1a214:	e0bfe415 	stw	r2,-112(fp)
			selected_tx_freq /= 250000;
   1a218:	e17fe317 	ldw	r5,-116(fp)
   1a21c:	e1bfe417 	ldw	r6,-112(fp)
   1a220:	00800134 	movhi	r2,4
   1a224:	10b42404 	addi	r2,r2,-12144
   1a228:	0007883a 	mov	r3,zero
   1a22c:	2809883a 	mov	r4,r5
   1a230:	300b883a 	mov	r5,r6
   1a234:	100d883a 	mov	r6,r2
   1a238:	180f883a 	mov	r7,r3
   1a23c:	001cb100 	call	1cb10 <__udivdi3>
   1a240:	1009883a 	mov	r4,r2
   1a244:	180b883a 	mov	r5,r3
   1a248:	e13fe315 	stw	r4,-116(fp)
   1a24c:	e17fe415 	stw	r5,-112(fp)
			console_print("setting tx lo freq to %d\n", (uint32_t)(selected_tx_freq));
   1a250:	e0bfe317 	ldw	r2,-116(fp)
   1a254:	010000f4 	movhi	r4,3
   1a258:	21245a04 	addi	r4,r4,-28312
   1a25c:	100b883a 	mov	r5,r2
   1a260:	00188580 	call	18858 <console_print>

			rf_tx_ch_sel_prev = rf_tx_ch_sel;
   1a264:	e0bfdc83 	ldbu	r2,-142(fp)
   1a268:	e0bfd045 	stb	r2,-191(fp)
			tx_ch_freq_min_prev = tx_ch_freq_min;
   1a26c:	e0bfdb17 	ldw	r2,-148(fp)
   1a270:	e0bfcf15 	stw	r2,-196(fp)

			//lo_freq_hz = reg_word3 * 250000; //reg value in MHz
			ad9361_set_tx_lo_freq(ad9361_phy, lo_freq_hz);
   1a274:	d1229217 	ldw	r4,-30136(gp)
   1a278:	e0bfe617 	ldw	r2,-104(fp)
   1a27c:	e0ffe717 	ldw	r3,-100(fp)
   1a280:	100b883a 	mov	r5,r2
   1a284:	180d883a 	mov	r6,r3
   1a288:	0013d0c0 	call	13d0c <ad9361_set_tx_lo_freq>

			//lo_freq_hz /= 250000;
			//console_print("tx_lo_freq=%d\n", (uint32_t)lo_freq_hz);
			//console_print("TX LO freq changed to %d.\n", (uint32_t)lo_freq_hz);

			ad9361_get_tx_lo_freq(ad9361_phy, &lo_freq_hz);
   1a28c:	d0e29217 	ldw	r3,-30136(gp)
   1a290:	e0bfe604 	addi	r2,fp,-104
   1a294:	1809883a 	mov	r4,r3
   1a298:	100b883a 	mov	r5,r2
   1a29c:	0013d780 	call	13d78 <ad9361_get_tx_lo_freq>
			lo_freq_hz /= 250000;
   1a2a0:	e17fe617 	ldw	r5,-104(fp)
   1a2a4:	e1bfe717 	ldw	r6,-100(fp)
   1a2a8:	00800134 	movhi	r2,4
   1a2ac:	10b42404 	addi	r2,r2,-12144
   1a2b0:	0007883a 	mov	r3,zero
   1a2b4:	2809883a 	mov	r4,r5
   1a2b8:	300b883a 	mov	r5,r6
   1a2bc:	100d883a 	mov	r6,r2
   1a2c0:	180f883a 	mov	r7,r3
   1a2c4:	001cb100 	call	1cb10 <__udivdi3>
   1a2c8:	1009883a 	mov	r4,r2
   1a2cc:	180b883a 	mov	r5,r3
   1a2d0:	2005883a 	mov	r2,r4
   1a2d4:	2807883a 	mov	r3,r5
   1a2d8:	e0bfe615 	stw	r2,-104(fp)
   1a2dc:	e0ffe715 	stw	r3,-100(fp)
			console_print("tx_lo_freq = %d MHz\n", (uint32_t)lo_freq_hz);
   1a2e0:	e0bfe617 	ldw	r2,-104(fp)
   1a2e4:	e0ffe717 	ldw	r3,-100(fp)
   1a2e8:	010000f4 	movhi	r4,3
   1a2ec:	21246104 	addi	r4,r4,-28284
   1a2f0:	100b883a 	mov	r5,r2
   1a2f4:	00188580 	call	18858 <console_print>
			//reg_word1 &= ~(0x1 << REG_LOC_TX_BW_CHANGE_REQ);
			tx_bw_sel_prev = tx_bw_sel;
		}*/

		//console_print("test_tone_out_select=%d\n", test_tone_out_select);
		if ((test_tone_out_select) && (tone1_freq != tone1_freq_prev))
   1a2f8:	e0bfd743 	ldbu	r2,-163(fp)
   1a2fc:	10000926 	beq	r2,zero,1a324 <main+0xc30>
   1a300:	e0ffde17 	ldw	r3,-136(fp)
   1a304:	e0bfcd17 	ldw	r2,-204(fp)
   1a308:	18800626 	beq	r3,r2,1a324 <main+0xc30>
		{
			//dds_set_frequency(DDS_CHAN_TX1_I_F1, tone1_freq);
			//dds_set_frequency(DDS_CHAN_TX1_Q_F1, tone1_freq);

			console_print("Test tone1 freq changed: %d MHz.\n", tone1_freq);
   1a30c:	010000f4 	movhi	r4,3
   1a310:	21246704 	addi	r4,r4,-28260
   1a314:	e17fde17 	ldw	r5,-136(fp)
   1a318:	00188580 	call	18858 <console_print>

			//clear the request bit
			//reg_word1 &= ~(0x1 << REG_LOC_TONE1_CHANGE_REQ);
			tone1_freq_prev = tone1_freq;
   1a31c:	e0bfde17 	ldw	r2,-136(fp)
   1a320:	e0bfcd15 	stw	r2,-204(fp)
		}

		if ((test_tone_out_select) && (tone2_freq != tone2_freq_prev))
   1a324:	e0bfd743 	ldbu	r2,-163(fp)
   1a328:	10000926 	beq	r2,zero,1a350 <main+0xc5c>
   1a32c:	e0ffdf17 	ldw	r3,-132(fp)
   1a330:	e0bfce17 	ldw	r2,-200(fp)
   1a334:	18800626 	beq	r3,r2,1a350 <main+0xc5c>
		{
			//dds_set_frequency(DDS_CHAN_TX1_I_F2, tone2_freq);
			//dds_set_frequency(DDS_CHAN_TX1_Q_F2, tone2_freq);

			console_print("Test tone2 freq changed: %d MHz.\n", tone2_freq);
   1a338:	010000f4 	movhi	r4,3
   1a33c:	21247004 	addi	r4,r4,-28224
   1a340:	e17fdf17 	ldw	r5,-132(fp)
   1a344:	00188580 	call	18858 <console_print>

			//clear the request bit
			//reg_word1 &= ~(0x1 << REG_LOC_TONE2_CHANGE_REQ);
			tone2_freq_prev = tone2_freq;
   1a348:	e0bfdf17 	ldw	r2,-132(fp)
   1a34c:	e0bfce15 	stw	r2,-200(fp)

//		if (atten_change_req | tx_lo_change_req | tone1_change_req | tone2_change_req | tx_bw_change_req)
//		{
//			REG_MAP_mWriteReg(REG_MAP_BASEADDR, MB_RF_CONF_OFFSET + 4, reg_word1);
//		}
	}
   1a350:	003eaa06 	br	19dfc <_gp+0xfffe7cdc>

0001a354 <adc_read>:

/***************************************************************************//**
 * @brief adc_read
*******************************************************************************/
void adc_read(uint32_t regAddr, uint32_t *data)
{
   1a354:	defffd04 	addi	sp,sp,-12
   1a358:	de00012e 	bgeu	sp,et,1a360 <adc_read+0xc>
   1a35c:	003b68fa 	trap	3
   1a360:	df000215 	stw	fp,8(sp)
   1a364:	df000204 	addi	fp,sp,8
   1a368:	e13ffe15 	stw	r4,-8(fp)
   1a36c:	e17fff15 	stw	r5,-4(fp)
	//*data = alt_read_word(CF_AD9361_RX_BASEADDR + regAddr);
	*data = IORD_ALTERA_AVALON_PIO_DATA((CF_AD9361_RX_BASEADDR) + (regAddr));
   1a370:	e0fffe17 	ldw	r3,-8(fp)
   1a374:	00800234 	movhi	r2,8
   1a378:	1885883a 	add	r2,r3,r2
   1a37c:	10800037 	ldwio	r2,0(r2)
   1a380:	1007883a 	mov	r3,r2
   1a384:	e0bfff17 	ldw	r2,-4(fp)
   1a388:	10c00015 	stw	r3,0(r2)
}
   1a38c:	e037883a 	mov	sp,fp
   1a390:	df000017 	ldw	fp,0(sp)
   1a394:	dec00104 	addi	sp,sp,4
   1a398:	f800283a 	ret

0001a39c <adc_write>:

/***************************************************************************//**
 * @brief adc_write
*******************************************************************************/
void adc_write(uint32_t regAddr, uint32_t data)
{
   1a39c:	defffd04 	addi	sp,sp,-12
   1a3a0:	de00012e 	bgeu	sp,et,1a3a8 <adc_write+0xc>
   1a3a4:	003b68fa 	trap	3
   1a3a8:	df000215 	stw	fp,8(sp)
   1a3ac:	df000204 	addi	fp,sp,8
   1a3b0:	e13ffe15 	stw	r4,-8(fp)
   1a3b4:	e17fff15 	stw	r5,-4(fp)
	//alt_write_word(CF_AD9361_RX_BASEADDR + regAddr, data);
	IOWR_ALTERA_AVALON_PIO_DATA((CF_AD9361_RX_BASEADDR) + (regAddr), (uint32_t)(data));
   1a3b8:	e0fffe17 	ldw	r3,-8(fp)
   1a3bc:	00800234 	movhi	r2,8
   1a3c0:	1885883a 	add	r2,r3,r2
   1a3c4:	1007883a 	mov	r3,r2
   1a3c8:	e0bfff17 	ldw	r2,-4(fp)
   1a3cc:	18800035 	stwio	r2,0(r3)
}
   1a3d0:	e037883a 	mov	sp,fp
   1a3d4:	df000017 	ldw	fp,0(sp)
   1a3d8:	dec00104 	addi	sp,sp,4
   1a3dc:	f800283a 	ret

0001a3e0 <adc_dma_read>:

/***************************************************************************//**
 * @brief adc_dma_read
*******************************************************************************/
void adc_dma_read(uint32_t regAddr, uint32_t *data)
{
   1a3e0:	defffd04 	addi	sp,sp,-12
   1a3e4:	de00012e 	bgeu	sp,et,1a3ec <adc_dma_read+0xc>
   1a3e8:	003b68fa 	trap	3
   1a3ec:	df000215 	stw	fp,8(sp)
   1a3f0:	df000204 	addi	fp,sp,8
   1a3f4:	e13ffe15 	stw	r4,-8(fp)
   1a3f8:	e17fff15 	stw	r5,-4(fp)
	//FIXME
}
   1a3fc:	e037883a 	mov	sp,fp
   1a400:	df000017 	ldw	fp,0(sp)
   1a404:	dec00104 	addi	sp,sp,4
   1a408:	f800283a 	ret

0001a40c <adc_dma_write>:

/***************************************************************************//**
 * @brief adc_dma_write
*******************************************************************************/
void adc_dma_write(uint32_t regAddr, uint32_t data)
{
   1a40c:	defffd04 	addi	sp,sp,-12
   1a410:	de00012e 	bgeu	sp,et,1a418 <adc_dma_write+0xc>
   1a414:	003b68fa 	trap	3
   1a418:	df000215 	stw	fp,8(sp)
   1a41c:	df000204 	addi	fp,sp,8
   1a420:	e13ffe15 	stw	r4,-8(fp)
   1a424:	e17fff15 	stw	r5,-4(fp)
	//FIXME
}
   1a428:	e037883a 	mov	sp,fp
   1a42c:	df000017 	ldw	fp,0(sp)
   1a430:	dec00104 	addi	sp,sp,4
   1a434:	f800283a 	ret

0001a438 <adc_init>:

/***************************************************************************//**
 * @brief adc_init
*******************************************************************************/
void adc_init(void)
{
   1a438:	defffe04 	addi	sp,sp,-8
   1a43c:	de00012e 	bgeu	sp,et,1a444 <adc_init+0xc>
   1a440:	003b68fa 	trap	3
   1a444:	dfc00115 	stw	ra,4(sp)
   1a448:	df000015 	stw	fp,0(sp)
   1a44c:	d839883a 	mov	fp,sp
	adc_write(ADI_REG_RSTN, 0);
   1a450:	01001004 	movi	r4,64
   1a454:	000b883a 	mov	r5,zero
   1a458:	001a39c0 	call	1a39c <adc_write>
	adc_write(ADI_REG_RSTN, ADI_RSTN);
   1a45c:	01001004 	movi	r4,64
   1a460:	01400044 	movi	r5,1
   1a464:	001a39c0 	call	1a39c <adc_write>

	adc_write(ADI_REG_CHAN_CNTRL(0),
   1a468:	01010004 	movi	r4,1024
   1a46c:	01409444 	movi	r5,593
   1a470:	001a39c0 	call	1a39c <adc_write>
		ADI_IQCOR_ENB | ADI_FORMAT_SIGNEXT | ADI_FORMAT_ENABLE | ADI_ENABLE);
	adc_write(ADI_REG_CHAN_CNTRL(1),
   1a474:	01011004 	movi	r4,1088
   1a478:	01409444 	movi	r5,593
   1a47c:	001a39c0 	call	1a39c <adc_write>
		ADI_IQCOR_ENB | ADI_FORMAT_SIGNEXT | ADI_FORMAT_ENABLE | ADI_ENABLE);
	adc_write(ADI_REG_CHAN_CNTRL(2),
   1a480:	01012004 	movi	r4,1152
   1a484:	01409444 	movi	r5,593
   1a488:	001a39c0 	call	1a39c <adc_write>
		ADI_IQCOR_ENB | ADI_FORMAT_SIGNEXT | ADI_FORMAT_ENABLE | ADI_ENABLE);
	adc_write(ADI_REG_CHAN_CNTRL(3),
   1a48c:	01013004 	movi	r4,1216
   1a490:	01409444 	movi	r5,593
   1a494:	001a39c0 	call	1a39c <adc_write>
		ADI_IQCOR_ENB | ADI_FORMAT_SIGNEXT | ADI_FORMAT_ENABLE | ADI_ENABLE);
}
   1a498:	e037883a 	mov	sp,fp
   1a49c:	dfc00117 	ldw	ra,4(sp)
   1a4a0:	df000017 	ldw	fp,0(sp)
   1a4a4:	dec00204 	addi	sp,sp,8
   1a4a8:	f800283a 	ret

0001a4ac <adc_capture>:

/***************************************************************************//**
 * @brief adc_capture
*******************************************************************************/
int32_t adc_capture(uint32_t size, uint32_t start_address)
{
   1a4ac:	defffa04 	addi	sp,sp,-24
   1a4b0:	de00012e 	bgeu	sp,et,1a4b8 <adc_capture+0xc>
   1a4b4:	003b68fa 	trap	3
   1a4b8:	dfc00515 	stw	ra,20(sp)
   1a4bc:	df000415 	stw	fp,16(sp)
   1a4c0:	df000404 	addi	fp,sp,16
   1a4c4:	e13ffe15 	stw	r4,-8(fp)
   1a4c8:	e17fff15 	stw	r5,-4(fp)
	uint32_t reg_val;
	uint32_t transfer_id;

	adc_dma_write(AXI_DMAC_REG_CTRL, 0x0);
   1a4cc:	01010004 	movi	r4,1024
   1a4d0:	000b883a 	mov	r5,zero
   1a4d4:	001a40c0 	call	1a40c <adc_dma_write>
	adc_dma_write(AXI_DMAC_REG_CTRL, AXI_DMAC_CTRL_ENABLE);
   1a4d8:	01010004 	movi	r4,1024
   1a4dc:	01400044 	movi	r5,1
   1a4e0:	001a40c0 	call	1a40c <adc_dma_write>

	adc_dma_write(AXI_DMAC_REG_IRQ_MASK, 0x0);
   1a4e4:	01002004 	movi	r4,128
   1a4e8:	000b883a 	mov	r5,zero
   1a4ec:	001a40c0 	call	1a40c <adc_dma_write>

	adc_dma_read(AXI_DMAC_REG_TRANSFER_ID, &transfer_id);
   1a4f0:	e0bffd04 	addi	r2,fp,-12
   1a4f4:	01010104 	movi	r4,1028
   1a4f8:	100b883a 	mov	r5,r2
   1a4fc:	001a3e00 	call	1a3e0 <adc_dma_read>
	adc_dma_read(AXI_DMAC_REG_IRQ_PENDING, &reg_val);
   1a500:	01002104 	movi	r4,132
   1a504:	e17ffc04 	addi	r5,fp,-16
   1a508:	001a3e00 	call	1a3e0 <adc_dma_read>
	adc_dma_write(AXI_DMAC_REG_IRQ_PENDING, reg_val);
   1a50c:	e0bffc17 	ldw	r2,-16(fp)
   1a510:	01002104 	movi	r4,132
   1a514:	100b883a 	mov	r5,r2
   1a518:	001a40c0 	call	1a40c <adc_dma_write>

	adc_dma_write(AXI_DMAC_REG_DEST_ADDRESS, start_address);
   1a51c:	01010404 	movi	r4,1040
   1a520:	e17fff17 	ldw	r5,-4(fp)
   1a524:	001a40c0 	call	1a40c <adc_dma_write>
	adc_dma_write(AXI_DMAC_REG_DEST_STRIDE, 0x0);
   1a528:	01010804 	movi	r4,1056
   1a52c:	000b883a 	mov	r5,zero
   1a530:	001a40c0 	call	1a40c <adc_dma_write>
	adc_dma_write(AXI_DMAC_REG_X_LENGTH, (size * 8) - 1);
   1a534:	e0bffe17 	ldw	r2,-8(fp)
   1a538:	100490fa 	slli	r2,r2,3
   1a53c:	10bfffc4 	addi	r2,r2,-1
   1a540:	01010604 	movi	r4,1048
   1a544:	100b883a 	mov	r5,r2
   1a548:	001a40c0 	call	1a40c <adc_dma_write>
	adc_dma_write(AXI_DMAC_REG_Y_LENGTH, 0x0);
   1a54c:	01010704 	movi	r4,1052
   1a550:	000b883a 	mov	r5,zero
   1a554:	001a40c0 	call	1a40c <adc_dma_write>

	adc_dma_write(AXI_DMAC_REG_START_TRANSFER, 0x1);
   1a558:	01010204 	movi	r4,1032
   1a55c:	01400044 	movi	r5,1
   1a560:	001a40c0 	call	1a40c <adc_dma_write>
	/* Wait until the new transfer is queued. */
	do {
		adc_dma_read(AXI_DMAC_REG_START_TRANSFER, &reg_val);
   1a564:	01010204 	movi	r4,1032
   1a568:	e17ffc04 	addi	r5,fp,-16
   1a56c:	001a3e00 	call	1a3e0 <adc_dma_read>
	}
	while(reg_val == 1);
   1a570:	e0bffc17 	ldw	r2,-16(fp)
   1a574:	10800060 	cmpeqi	r2,r2,1
   1a578:	103ffa1e 	bne	r2,zero,1a564 <_gp+0xfffe8444>

	/* Wait until the current transfer is completed. */
	do {
		adc_dma_read(AXI_DMAC_REG_IRQ_PENDING, &reg_val);
   1a57c:	01002104 	movi	r4,132
   1a580:	e17ffc04 	addi	r5,fp,-16
   1a584:	001a3e00 	call	1a3e0 <adc_dma_read>
	}
	while(reg_val != (AXI_DMAC_IRQ_SOT | AXI_DMAC_IRQ_EOT));
   1a588:	e0bffc17 	ldw	r2,-16(fp)
   1a58c:	108000d8 	cmpnei	r2,r2,3
   1a590:	103ffa1e 	bne	r2,zero,1a57c <_gp+0xfffe845c>
	adc_dma_write(AXI_DMAC_REG_IRQ_PENDING, reg_val);
   1a594:	e0bffc17 	ldw	r2,-16(fp)
   1a598:	01002104 	movi	r4,132
   1a59c:	100b883a 	mov	r5,r2
   1a5a0:	001a40c0 	call	1a40c <adc_dma_write>

	/* Wait until the transfer with the ID transfer_id is completed. */
	do {
		adc_dma_read(AXI_DMAC_REG_TRANSFER_DONE, &reg_val);
   1a5a4:	01010a04 	movi	r4,1064
   1a5a8:	e17ffc04 	addi	r5,fp,-16
   1a5ac:	001a3e00 	call	1a3e0 <adc_dma_read>
	}
	while((reg_val & (1 << transfer_id)) != (1 << transfer_id));
   1a5b0:	e0bffd17 	ldw	r2,-12(fp)
   1a5b4:	1007883a 	mov	r3,r2
   1a5b8:	00800044 	movi	r2,1
   1a5bc:	10c4983a 	sll	r2,r2,r3
   1a5c0:	1007883a 	mov	r3,r2
   1a5c4:	e0bffc17 	ldw	r2,-16(fp)
   1a5c8:	1884703a 	and	r2,r3,r2
   1a5cc:	e0fffd17 	ldw	r3,-12(fp)
   1a5d0:	1809883a 	mov	r4,r3
   1a5d4:	00c00044 	movi	r3,1
   1a5d8:	1906983a 	sll	r3,r3,r4
   1a5dc:	10fff11e 	bne	r2,r3,1a5a4 <_gp+0xfffe8484>

	return 0;
   1a5e0:	0005883a 	mov	r2,zero
}
   1a5e4:	e037883a 	mov	sp,fp
   1a5e8:	dfc00117 	ldw	ra,4(sp)
   1a5ec:	df000017 	ldw	fp,0(sp)
   1a5f0:	dec00204 	addi	sp,sp,8
   1a5f4:	f800283a 	ret

0001a5f8 <dac_read>:

/***************************************************************************//**
 * @brief dac_read
*******************************************************************************/
void dac_read(uint32_t regAddr, uint32_t *data)
{
   1a5f8:	defffd04 	addi	sp,sp,-12
   1a5fc:	de00012e 	bgeu	sp,et,1a604 <dac_read+0xc>
   1a600:	003b68fa 	trap	3
   1a604:	df000215 	stw	fp,8(sp)
   1a608:	df000204 	addi	fp,sp,8
   1a60c:	e13ffe15 	stw	r4,-8(fp)
   1a610:	e17fff15 	stw	r5,-4(fp)
	//*data = alt_read_word(CF_AD9361_TX_BASEADDR + regAddr);
	*data = IORD_ALTERA_AVALON_PIO_DATA((CF_AD9361_RX_BASEADDR) + (regAddr));
   1a614:	e0fffe17 	ldw	r3,-8(fp)
   1a618:	00800234 	movhi	r2,8
   1a61c:	1885883a 	add	r2,r3,r2
   1a620:	10800037 	ldwio	r2,0(r2)
   1a624:	1007883a 	mov	r3,r2
   1a628:	e0bfff17 	ldw	r2,-4(fp)
   1a62c:	10c00015 	stw	r3,0(r2)
}
   1a630:	e037883a 	mov	sp,fp
   1a634:	df000017 	ldw	fp,0(sp)
   1a638:	dec00104 	addi	sp,sp,4
   1a63c:	f800283a 	ret

0001a640 <dac_write>:

/***************************************************************************//**
 * @brief dac_write
*******************************************************************************/
void dac_write(uint32_t regAddr, uint32_t data)
{
   1a640:	defffd04 	addi	sp,sp,-12
   1a644:	de00012e 	bgeu	sp,et,1a64c <dac_write+0xc>
   1a648:	003b68fa 	trap	3
   1a64c:	df000215 	stw	fp,8(sp)
   1a650:	df000204 	addi	fp,sp,8
   1a654:	e13ffe15 	stw	r4,-8(fp)
   1a658:	e17fff15 	stw	r5,-4(fp)
	//alt_write_word(CF_AD9361_TX_BASEADDR + regAddr, data);
	IOWR_ALTERA_AVALON_PIO_DATA((CF_AD9361_RX_BASEADDR) + (regAddr), (uint32_t)(data));
   1a65c:	e0fffe17 	ldw	r3,-8(fp)
   1a660:	00800234 	movhi	r2,8
   1a664:	1885883a 	add	r2,r3,r2
   1a668:	1007883a 	mov	r3,r2
   1a66c:	e0bfff17 	ldw	r2,-4(fp)
   1a670:	18800035 	stwio	r2,0(r3)
}
   1a674:	e037883a 	mov	sp,fp
   1a678:	df000017 	ldw	fp,0(sp)
   1a67c:	dec00104 	addi	sp,sp,4
   1a680:	f800283a 	ret

0001a684 <dac_dma_read>:

/***************************************************************************//**
 * @brief dac_dma_read
*******************************************************************************/
void dac_dma_read(uint32_t regAddr, uint32_t *data)
{
   1a684:	defffd04 	addi	sp,sp,-12
   1a688:	de00012e 	bgeu	sp,et,1a690 <dac_dma_read+0xc>
   1a68c:	003b68fa 	trap	3
   1a690:	df000215 	stw	fp,8(sp)
   1a694:	df000204 	addi	fp,sp,8
   1a698:	e13ffe15 	stw	r4,-8(fp)
   1a69c:	e17fff15 	stw	r5,-4(fp)
	//FIXME
}
   1a6a0:	e037883a 	mov	sp,fp
   1a6a4:	df000017 	ldw	fp,0(sp)
   1a6a8:	dec00104 	addi	sp,sp,4
   1a6ac:	f800283a 	ret

0001a6b0 <dac_dma_write>:

/***************************************************************************//**
 * @brief dac_dma_write
*******************************************************************************/
void dac_dma_write(uint32_t regAddr, uint32_t data)
{
   1a6b0:	defffd04 	addi	sp,sp,-12
   1a6b4:	de00012e 	bgeu	sp,et,1a6bc <dac_dma_write+0xc>
   1a6b8:	003b68fa 	trap	3
   1a6bc:	df000215 	stw	fp,8(sp)
   1a6c0:	df000204 	addi	fp,sp,8
   1a6c4:	e13ffe15 	stw	r4,-8(fp)
   1a6c8:	e17fff15 	stw	r5,-4(fp)
	//FIXME
}
   1a6cc:	e037883a 	mov	sp,fp
   1a6d0:	df000017 	ldw	fp,0(sp)
   1a6d4:	dec00104 	addi	sp,sp,4
   1a6d8:	f800283a 	ret

0001a6dc <dds_default_setup>:
/***************************************************************************//**
 * @brief dds_default_setup
*******************************************************************************/
static int dds_default_setup(uint32_t chan, uint32_t phase,
							 uint32_t freq, double scale)
{
   1a6dc:	defffa04 	addi	sp,sp,-24
   1a6e0:	de00012e 	bgeu	sp,et,1a6e8 <dds_default_setup+0xc>
   1a6e4:	003b68fa 	trap	3
   1a6e8:	dfc00415 	stw	ra,16(sp)
   1a6ec:	df000315 	stw	fp,12(sp)
   1a6f0:	df000304 	addi	fp,sp,12
   1a6f4:	e13ffd15 	stw	r4,-12(fp)
   1a6f8:	e17ffe15 	stw	r5,-8(fp)
   1a6fc:	e1bfff15 	stw	r6,-4(fp)
   1a700:	e1c00215 	stw	r7,8(fp)
	dds_set_phase(chan, phase);
   1a704:	e13ffd17 	ldw	r4,-12(fp)
   1a708:	e17ffe17 	ldw	r5,-8(fp)
   1a70c:	001ade00 	call	1ade0 <dds_set_phase>
	dds_set_frequency(chan, freq);
   1a710:	e13ffd17 	ldw	r4,-12(fp)
   1a714:	e17fff17 	ldw	r5,-4(fp)
   1a718:	001ac700 	call	1ac70 <dds_set_frequency>
	dds_set_scale(chan, scale);
   1a71c:	e13ffd17 	ldw	r4,-12(fp)
   1a720:	e1400217 	ldw	r5,8(fp)
   1a724:	e1800317 	ldw	r6,12(fp)
   1a728:	001af480 	call	1af48 <dds_set_scale>
	dds_st.cached_freq[chan] = freq;
   1a72c:	008000f4 	movhi	r2,3
   1a730:	10aae204 	addi	r2,r2,-21624
   1a734:	e0fffd17 	ldw	r3,-12(fp)
   1a738:	18c7883a 	add	r3,r3,r3
   1a73c:	18c7883a 	add	r3,r3,r3
   1a740:	10c5883a 	add	r2,r2,r3
   1a744:	e0ffff17 	ldw	r3,-4(fp)
   1a748:	10c00015 	stw	r3,0(r2)
	dds_st.cached_phase[chan] = phase;
   1a74c:	008000f4 	movhi	r2,3
   1a750:	10aae204 	addi	r2,r2,-21624
   1a754:	e0fffd17 	ldw	r3,-12(fp)
   1a758:	18c00204 	addi	r3,r3,8
   1a75c:	18c7883a 	add	r3,r3,r3
   1a760:	18c7883a 	add	r3,r3,r3
   1a764:	10c5883a 	add	r2,r2,r3
   1a768:	e0fffe17 	ldw	r3,-8(fp)
   1a76c:	10c00015 	stw	r3,0(r2)
	dds_st.cached_scale[chan] = scale;
   1a770:	008000f4 	movhi	r2,3
   1a774:	10aae204 	addi	r2,r2,-21624
   1a778:	e0fffd17 	ldw	r3,-12(fp)
   1a77c:	18c00204 	addi	r3,r3,8
   1a780:	180690fa 	slli	r3,r3,3
   1a784:	10c5883a 	add	r2,r2,r3
   1a788:	e0c00217 	ldw	r3,8(fp)
   1a78c:	10c00015 	stw	r3,0(r2)
   1a790:	e0c00317 	ldw	r3,12(fp)
   1a794:	10c00115 	stw	r3,4(r2)

	return 0;
   1a798:	0005883a 	mov	r2,zero
}
   1a79c:	e037883a 	mov	sp,fp
   1a7a0:	dfc00117 	ldw	ra,4(sp)
   1a7a4:	df000017 	ldw	fp,0(sp)
   1a7a8:	dec00304 	addi	sp,sp,12
   1a7ac:	f800283a 	ret

0001a7b0 <dac_stop>:

/***************************************************************************//**
 * @brief dac_stop
*******************************************************************************/
void dac_stop(void)
{
   1a7b0:	defffe04 	addi	sp,sp,-8
   1a7b4:	de00012e 	bgeu	sp,et,1a7bc <dac_stop+0xc>
   1a7b8:	003b68fa 	trap	3
   1a7bc:	dfc00115 	stw	ra,4(sp)
   1a7c0:	df000015 	stw	fp,0(sp)
   1a7c4:	d839883a 	mov	fp,sp
	if (PCORE_VERSION_MAJOR(dds_st.pcore_version) < 8)
   1a7c8:	008000f4 	movhi	r2,3
   1a7cc:	10aae204 	addi	r2,r2,-21624
   1a7d0:	10802117 	ldw	r2,132(r2)
   1a7d4:	1004d43a 	srli	r2,r2,16
   1a7d8:	10800228 	cmpgeui	r2,r2,8
   1a7dc:	1000031e 	bne	r2,zero,1a7ec <dac_stop+0x3c>
	{
		dac_write(ADI_REG_CNTRL_1, 0);
   1a7e0:	01001104 	movi	r4,68
   1a7e4:	000b883a 	mov	r5,zero
   1a7e8:	001a6400 	call	1a640 <dac_write>
	}
}
   1a7ec:	e037883a 	mov	sp,fp
   1a7f0:	dfc00117 	ldw	ra,4(sp)
   1a7f4:	df000017 	ldw	fp,0(sp)
   1a7f8:	dec00204 	addi	sp,sp,8
   1a7fc:	f800283a 	ret

0001a800 <dac_start_sync>:

/***************************************************************************//**
 * @brief dac_start_sync
*******************************************************************************/
void dac_start_sync(bool force_on)
{
   1a800:	defffd04 	addi	sp,sp,-12
   1a804:	de00012e 	bgeu	sp,et,1a80c <dac_start_sync+0xc>
   1a808:	003b68fa 	trap	3
   1a80c:	dfc00215 	stw	ra,8(sp)
   1a810:	df000115 	stw	fp,4(sp)
   1a814:	df000104 	addi	fp,sp,4
   1a818:	2005883a 	mov	r2,r4
   1a81c:	e0bfff05 	stb	r2,-4(fp)
	if (PCORE_VERSION_MAJOR(dds_st.pcore_version) < 8)
   1a820:	008000f4 	movhi	r2,3
   1a824:	10aae204 	addi	r2,r2,-21624
   1a828:	10802117 	ldw	r2,132(r2)
   1a82c:	1004d43a 	srli	r2,r2,16
   1a830:	10800228 	cmpgeui	r2,r2,8
   1a834:	10000e1e 	bne	r2,zero,1a870 <dac_start_sync+0x70>
	{
		dac_write(ADI_REG_CNTRL_1, (dds_st.enable || force_on) ? ADI_ENABLE : 0);
   1a838:	008000f4 	movhi	r2,3
   1a83c:	10aae204 	addi	r2,r2,-21624
   1a840:	10802303 	ldbu	r2,140(r2)
   1a844:	10803fcc 	andi	r2,r2,255
   1a848:	1000021e 	bne	r2,zero,1a854 <dac_start_sync+0x54>
   1a84c:	e0bfff03 	ldbu	r2,-4(fp)
   1a850:	10000226 	beq	r2,zero,1a85c <dac_start_sync+0x5c>
   1a854:	00800044 	movi	r2,1
   1a858:	00000106 	br	1a860 <dac_start_sync+0x60>
   1a85c:	0005883a 	mov	r2,zero
   1a860:	01001104 	movi	r4,68
   1a864:	100b883a 	mov	r5,r2
   1a868:	001a6400 	call	1a640 <dac_write>
   1a86c:	00000306 	br	1a87c <dac_start_sync+0x7c>
	}
	else
	{
		dac_write(ADI_REG_CNTRL_1, ADI_SYNC);
   1a870:	01001104 	movi	r4,68
   1a874:	01400044 	movi	r5,1
   1a878:	001a6400 	call	1a640 <dac_write>
	}
}
   1a87c:	e037883a 	mov	sp,fp
   1a880:	dfc00117 	ldw	ra,4(sp)
   1a884:	df000017 	ldw	fp,0(sp)
   1a888:	dec00204 	addi	sp,sp,8
   1a88c:	f800283a 	ret

0001a890 <dac_init>:

/***************************************************************************//**
 * @brief dac_init
*******************************************************************************/
void dac_init(struct ad9361_rf_phy *phy, uint8_t data_sel)
{
   1a890:	defff104 	addi	sp,sp,-60
   1a894:	de00012e 	bgeu	sp,et,1a89c <dac_init+0xc>
   1a898:	003b68fa 	trap	3
   1a89c:	dfc00e15 	stw	ra,56(sp)
   1a8a0:	df000d15 	stw	fp,52(sp)
   1a8a4:	df000d04 	addi	fp,sp,52
   1a8a8:	e13ffe15 	stw	r4,-8(fp)
   1a8ac:	2805883a 	mov	r2,r5
   1a8b0:	e0bfff05 	stb	r2,-4(fp)
	uint32_t data_i1;
	uint32_t data_q1;
	uint32_t data_i2;
	uint32_t data_q2;

	dac_write(ADI_REG_RSTN, 0x0);
   1a8b4:	01001004 	movi	r4,64
   1a8b8:	000b883a 	mov	r5,zero
   1a8bc:	001a6400 	call	1a640 <dac_write>
	dac_write(ADI_REG_RSTN, ADI_RSTN | ADI_MMCM_RSTN);
   1a8c0:	01001004 	movi	r4,64
   1a8c4:	014000c4 	movi	r5,3
   1a8c8:	001a6400 	call	1a640 <dac_write>

	dac_write(ADI_REG_RATECNTRL, ADI_RATE(3));
   1a8cc:	01001304 	movi	r4,76
   1a8d0:	014000c4 	movi	r5,3
   1a8d4:	001a6400 	call	1a640 <dac_write>

	dds_st.dac_clk = &phy->clks[TX_SAMPL_CLK]->rate;
   1a8d8:	e0bffe17 	ldw	r2,-8(fp)
   1a8dc:	10801017 	ldw	r2,64(r2)
   1a8e0:	10c00104 	addi	r3,r2,4
   1a8e4:	008000f4 	movhi	r2,3
   1a8e8:	10aae204 	addi	r2,r2,-21624
   1a8ec:	10c02015 	stw	r3,128(r2)
	dds_st.num_dds_channels = 8;	// FIXME
   1a8f0:	008000f4 	movhi	r2,3
   1a8f4:	10aae204 	addi	r2,r2,-21624
   1a8f8:	00c00204 	movi	r3,8
   1a8fc:	10c02215 	stw	r3,136(r2)

	dac_read(ADI_REG_VERSION, &dds_st.pcore_version);
   1a900:	0009883a 	mov	r4,zero
   1a904:	014000f4 	movhi	r5,3
   1a908:	296b0304 	addi	r5,r5,-21492
   1a90c:	001a5f80 	call	1a5f8 <dac_read>

	dac_stop();
   1a910:	001a7b00 	call	1a7b0 <dac_stop>
	switch (data_sel) {
   1a914:	e0bfff03 	ldbu	r2,-4(fp)
   1a918:	10000326 	beq	r2,zero,1a928 <dac_init+0x98>
   1a91c:	108000a0 	cmpeqi	r2,r2,2
   1a920:	10004c1e 	bne	r2,zero,1aa54 <dac_init+0x1c4>
		dac_dma_write(AXI_DMAC_REG_START_TRANSFER, 0x1);
		dac_write(ADI_REG_CNTRL_2, 0);
		dac_datasel(-1, DATA_SEL_DMA);
		break;
	default:
		break;
   1a924:	0000c706 	br	1ac44 <dac_init+0x3b4>
	dac_read(ADI_REG_VERSION, &dds_st.pcore_version);

	dac_stop();
	switch (data_sel) {
	case DATA_SEL_DDS:
		dds_default_setup(DDS_CHAN_TX1_I_F1, 90000, 1000000, 0.25);
   1a928:	008ff434 	movhi	r2,16336
   1a92c:	d8800015 	stw	r2,0(sp)
   1a930:	000f883a 	mov	r7,zero
   1a934:	0009883a 	mov	r4,zero
   1a938:	01400074 	movhi	r5,1
   1a93c:	2957e404 	addi	r5,r5,24464
   1a940:	018003f4 	movhi	r6,15
   1a944:	31909004 	addi	r6,r6,16960
   1a948:	001a6dc0 	call	1a6dc <dds_default_setup>
		dds_default_setup(DDS_CHAN_TX1_I_F2, 90000, 1000000, 0.25);
   1a94c:	008ff434 	movhi	r2,16336
   1a950:	d8800015 	stw	r2,0(sp)
   1a954:	000f883a 	mov	r7,zero
   1a958:	01000044 	movi	r4,1
   1a95c:	01400074 	movhi	r5,1
   1a960:	2957e404 	addi	r5,r5,24464
   1a964:	018003f4 	movhi	r6,15
   1a968:	31909004 	addi	r6,r6,16960
   1a96c:	001a6dc0 	call	1a6dc <dds_default_setup>
		dds_default_setup(DDS_CHAN_TX1_Q_F1, 0, 1000000, 0.25);
   1a970:	008ff434 	movhi	r2,16336
   1a974:	d8800015 	stw	r2,0(sp)
   1a978:	000f883a 	mov	r7,zero
   1a97c:	01000084 	movi	r4,2
   1a980:	000b883a 	mov	r5,zero
   1a984:	018003f4 	movhi	r6,15
   1a988:	31909004 	addi	r6,r6,16960
   1a98c:	001a6dc0 	call	1a6dc <dds_default_setup>
		dds_default_setup(DDS_CHAN_TX1_Q_F2, 0, 1000000, 0.25);
   1a990:	008ff434 	movhi	r2,16336
   1a994:	d8800015 	stw	r2,0(sp)
   1a998:	000f883a 	mov	r7,zero
   1a99c:	010000c4 	movi	r4,3
   1a9a0:	000b883a 	mov	r5,zero
   1a9a4:	018003f4 	movhi	r6,15
   1a9a8:	31909004 	addi	r6,r6,16960
   1a9ac:	001a6dc0 	call	1a6dc <dds_default_setup>
		dds_default_setup(DDS_CHAN_TX2_I_F1, 90000, 1000000, 0.25);
   1a9b0:	008ff434 	movhi	r2,16336
   1a9b4:	d8800015 	stw	r2,0(sp)
   1a9b8:	000f883a 	mov	r7,zero
   1a9bc:	01000104 	movi	r4,4
   1a9c0:	01400074 	movhi	r5,1
   1a9c4:	2957e404 	addi	r5,r5,24464
   1a9c8:	018003f4 	movhi	r6,15
   1a9cc:	31909004 	addi	r6,r6,16960
   1a9d0:	001a6dc0 	call	1a6dc <dds_default_setup>
		dds_default_setup(DDS_CHAN_TX2_I_F2, 90000, 1000000, 0.25);
   1a9d4:	008ff434 	movhi	r2,16336
   1a9d8:	d8800015 	stw	r2,0(sp)
   1a9dc:	000f883a 	mov	r7,zero
   1a9e0:	01000144 	movi	r4,5
   1a9e4:	01400074 	movhi	r5,1
   1a9e8:	2957e404 	addi	r5,r5,24464
   1a9ec:	018003f4 	movhi	r6,15
   1a9f0:	31909004 	addi	r6,r6,16960
   1a9f4:	001a6dc0 	call	1a6dc <dds_default_setup>
		dds_default_setup(DDS_CHAN_TX2_Q_F1, 0, 1000000, 0.25);
   1a9f8:	008ff434 	movhi	r2,16336
   1a9fc:	d8800015 	stw	r2,0(sp)
   1aa00:	000f883a 	mov	r7,zero
   1aa04:	01000184 	movi	r4,6
   1aa08:	000b883a 	mov	r5,zero
   1aa0c:	018003f4 	movhi	r6,15
   1aa10:	31909004 	addi	r6,r6,16960
   1aa14:	001a6dc0 	call	1a6dc <dds_default_setup>
		dds_default_setup(DDS_CHAN_TX2_Q_F2, 0, 1000000, 0.25);
   1aa18:	008ff434 	movhi	r2,16336
   1aa1c:	d8800015 	stw	r2,0(sp)
   1aa20:	000f883a 	mov	r7,zero
   1aa24:	010001c4 	movi	r4,7
   1aa28:	000b883a 	mov	r5,zero
   1aa2c:	018003f4 	movhi	r6,15
   1aa30:	31909004 	addi	r6,r6,16960
   1aa34:	001a6dc0 	call	1a6dc <dds_default_setup>
		dac_write(ADI_REG_CNTRL_2, 0);
   1aa38:	01001204 	movi	r4,72
   1aa3c:	000b883a 	mov	r5,zero
   1aa40:	001a6400 	call	1a640 <dac_write>
		dac_datasel(-1, DATA_SEL_DDS);
   1aa44:	013fffc4 	movi	r4,-1
   1aa48:	000b883a 	mov	r5,zero
   1aa4c:	001b2f80 	call	1b2f8 <dac_datasel>
		break;
   1aa50:	00007c06 	br	1ac44 <dac_init+0x3b4>
	case DATA_SEL_DMA:
		tx_count = sizeof(sine_lut) / sizeof(uint16_t);
   1aa54:	00800804 	movi	r2,32
   1aa58:	e0bff815 	stw	r2,-32(fp)
		for(index = 0; index < (tx_count * 2); index += 2)
   1aa5c:	e03ff415 	stw	zero,-48(fp)
   1aa60:	00005706 	br	1abc0 <dac_init+0x330>
		{
			index_i1 = index;
   1aa64:	e0bff417 	ldw	r2,-48(fp)
   1aa68:	e0bff915 	stw	r2,-28(fp)
			index_q1 = index + (tx_count / 2);
   1aa6c:	e0bff817 	ldw	r2,-32(fp)
   1aa70:	1006d07a 	srli	r3,r2,1
   1aa74:	e0bff417 	ldw	r2,-48(fp)
   1aa78:	1885883a 	add	r2,r3,r2
   1aa7c:	e0bff515 	stw	r2,-44(fp)
			if(index_q1 >= (tx_count * 2))
   1aa80:	e0bff817 	ldw	r2,-32(fp)
   1aa84:	1085883a 	add	r2,r2,r2
   1aa88:	1007883a 	mov	r3,r2
   1aa8c:	e0bff517 	ldw	r2,-44(fp)
   1aa90:	10c00636 	bltu	r2,r3,1aaac <dac_init+0x21c>
				index_q1 -= (tx_count * 2);
   1aa94:	e0bff817 	ldw	r2,-32(fp)
   1aa98:	1085883a 	add	r2,r2,r2
   1aa9c:	1007883a 	mov	r3,r2
   1aaa0:	e0bff517 	ldw	r2,-44(fp)
   1aaa4:	10c5c83a 	sub	r2,r2,r3
   1aaa8:	e0bff515 	stw	r2,-44(fp)
			data_i1 = (sine_lut[index_i1 / 2] << 20);
   1aaac:	e0bff917 	ldw	r2,-28(fp)
   1aab0:	1006d07a 	srli	r3,r2,1
   1aab4:	008000f4 	movhi	r2,3
   1aab8:	10a47904 	addi	r2,r2,-28188
   1aabc:	18c7883a 	add	r3,r3,r3
   1aac0:	10c5883a 	add	r2,r2,r3
   1aac4:	1080000b 	ldhu	r2,0(r2)
   1aac8:	10bfffcc 	andi	r2,r2,65535
   1aacc:	1004953a 	slli	r2,r2,20
   1aad0:	e0bffa15 	stw	r2,-24(fp)
			data_q1 = (sine_lut[index_q1 / 2] << 4);
   1aad4:	e0bff517 	ldw	r2,-44(fp)
   1aad8:	1006d07a 	srli	r3,r2,1
   1aadc:	008000f4 	movhi	r2,3
   1aae0:	10a47904 	addi	r2,r2,-28188
   1aae4:	18c7883a 	add	r3,r3,r3
   1aae8:	10c5883a 	add	r2,r2,r3
   1aaec:	1080000b 	ldhu	r2,0(r2)
   1aaf0:	10bfffcc 	andi	r2,r2,65535
   1aaf4:	1004913a 	slli	r2,r2,4
   1aaf8:	e0bffb15 	stw	r2,-20(fp)
			// FIXME

			index_i2 = index_i1;
   1aafc:	e0bff917 	ldw	r2,-28(fp)
   1ab00:	e0bff615 	stw	r2,-40(fp)
			index_q2 = index_q1;
   1ab04:	e0bff517 	ldw	r2,-44(fp)
   1ab08:	e0bff715 	stw	r2,-36(fp)
			if(index_i2 >= (tx_count * 2))
   1ab0c:	e0bff817 	ldw	r2,-32(fp)
   1ab10:	1085883a 	add	r2,r2,r2
   1ab14:	1007883a 	mov	r3,r2
   1ab18:	e0bff617 	ldw	r2,-40(fp)
   1ab1c:	10c00636 	bltu	r2,r3,1ab38 <dac_init+0x2a8>
				index_i2 -= (tx_count * 2);
   1ab20:	e0bff817 	ldw	r2,-32(fp)
   1ab24:	1085883a 	add	r2,r2,r2
   1ab28:	1007883a 	mov	r3,r2
   1ab2c:	e0bff617 	ldw	r2,-40(fp)
   1ab30:	10c5c83a 	sub	r2,r2,r3
   1ab34:	e0bff615 	stw	r2,-40(fp)
			if(index_q2 >= (tx_count * 2))
   1ab38:	e0bff817 	ldw	r2,-32(fp)
   1ab3c:	1085883a 	add	r2,r2,r2
   1ab40:	1007883a 	mov	r3,r2
   1ab44:	e0bff717 	ldw	r2,-36(fp)
   1ab48:	10c00636 	bltu	r2,r3,1ab64 <dac_init+0x2d4>
				index_q2 -= (tx_count * 2);
   1ab4c:	e0bff817 	ldw	r2,-32(fp)
   1ab50:	1085883a 	add	r2,r2,r2
   1ab54:	1007883a 	mov	r3,r2
   1ab58:	e0bff717 	ldw	r2,-36(fp)
   1ab5c:	10c5c83a 	sub	r2,r2,r3
   1ab60:	e0bff715 	stw	r2,-36(fp)
			data_i2 = (sine_lut[index_i2 / 2] << 20);
   1ab64:	e0bff617 	ldw	r2,-40(fp)
   1ab68:	1006d07a 	srli	r3,r2,1
   1ab6c:	008000f4 	movhi	r2,3
   1ab70:	10a47904 	addi	r2,r2,-28188
   1ab74:	18c7883a 	add	r3,r3,r3
   1ab78:	10c5883a 	add	r2,r2,r3
   1ab7c:	1080000b 	ldhu	r2,0(r2)
   1ab80:	10bfffcc 	andi	r2,r2,65535
   1ab84:	1004953a 	slli	r2,r2,20
   1ab88:	e0bffc15 	stw	r2,-16(fp)
			data_q2 = (sine_lut[index_q2 / 2] << 4);
   1ab8c:	e0bff717 	ldw	r2,-36(fp)
   1ab90:	1006d07a 	srli	r3,r2,1
   1ab94:	008000f4 	movhi	r2,3
   1ab98:	10a47904 	addi	r2,r2,-28188
   1ab9c:	18c7883a 	add	r3,r3,r3
   1aba0:	10c5883a 	add	r2,r2,r3
   1aba4:	1080000b 	ldhu	r2,0(r2)
   1aba8:	10bfffcc 	andi	r2,r2,65535
   1abac:	1004913a 	slli	r2,r2,4
   1abb0:	e0bffd15 	stw	r2,-12(fp)
		dac_write(ADI_REG_CNTRL_2, 0);
		dac_datasel(-1, DATA_SEL_DDS);
		break;
	case DATA_SEL_DMA:
		tx_count = sizeof(sine_lut) / sizeof(uint16_t);
		for(index = 0; index < (tx_count * 2); index += 2)
   1abb4:	e0bff417 	ldw	r2,-48(fp)
   1abb8:	10800084 	addi	r2,r2,2
   1abbc:	e0bff415 	stw	r2,-48(fp)
   1abc0:	e0bff817 	ldw	r2,-32(fp)
   1abc4:	1085883a 	add	r2,r2,r2
   1abc8:	1007883a 	mov	r3,r2
   1abcc:	e0bff417 	ldw	r2,-48(fp)
   1abd0:	10ffa436 	bltu	r2,r3,1aa64 <_gp+0xfffe8944>
				index_q2 -= (tx_count * 2);
			data_i2 = (sine_lut[index_i2 / 2] << 20);
			data_q2 = (sine_lut[index_q2 / 2] << 4);
			// FIXME
		}
		dac_dma_write(AXI_DMAC_REG_CTRL, 0);
   1abd4:	01010004 	movi	r4,1024
   1abd8:	000b883a 	mov	r5,zero
   1abdc:	001a6b00 	call	1a6b0 <dac_dma_write>
		dac_dma_write(AXI_DMAC_REG_CTRL, AXI_DMAC_CTRL_ENABLE);
   1abe0:	01010004 	movi	r4,1024
   1abe4:	01400044 	movi	r5,1
   1abe8:	001a6b00 	call	1a6b0 <dac_dma_write>
		// FIXME dac_dma_write(AXI_DMAC_REG_SRC_ADDRESS, DAC_DDR_BASEADDR);
		dac_dma_write(AXI_DMAC_REG_SRC_STRIDE, 0x0);
   1abec:	01010904 	movi	r4,1060
   1abf0:	000b883a 	mov	r5,zero
   1abf4:	001a6b00 	call	1a6b0 <dac_dma_write>
		dac_dma_write(AXI_DMAC_REG_X_LENGTH, (tx_count * 8) - 1);
   1abf8:	e0bff817 	ldw	r2,-32(fp)
   1abfc:	100490fa 	slli	r2,r2,3
   1ac00:	10bfffc4 	addi	r2,r2,-1
   1ac04:	01010604 	movi	r4,1048
   1ac08:	100b883a 	mov	r5,r2
   1ac0c:	001a6b00 	call	1a6b0 <dac_dma_write>
		dac_dma_write(AXI_DMAC_REG_Y_LENGTH, 0x0);
   1ac10:	01010704 	movi	r4,1052
   1ac14:	000b883a 	mov	r5,zero
   1ac18:	001a6b00 	call	1a6b0 <dac_dma_write>
		dac_dma_write(AXI_DMAC_REG_START_TRANSFER, 0x1);
   1ac1c:	01010204 	movi	r4,1032
   1ac20:	01400044 	movi	r5,1
   1ac24:	001a6b00 	call	1a6b0 <dac_dma_write>
		dac_write(ADI_REG_CNTRL_2, 0);
   1ac28:	01001204 	movi	r4,72
   1ac2c:	000b883a 	mov	r5,zero
   1ac30:	001a6400 	call	1a640 <dac_write>
		dac_datasel(-1, DATA_SEL_DMA);
   1ac34:	013fffc4 	movi	r4,-1
   1ac38:	01400084 	movi	r5,2
   1ac3c:	001b2f80 	call	1b2f8 <dac_datasel>
		break;
   1ac40:	0001883a 	nop
	default:
		break;
	}
	dds_st.enable = true;
   1ac44:	008000f4 	movhi	r2,3
   1ac48:	10aae204 	addi	r2,r2,-21624
   1ac4c:	00c00044 	movi	r3,1
   1ac50:	10c02305 	stb	r3,140(r2)
	dac_start_sync(0);
   1ac54:	0009883a 	mov	r4,zero
   1ac58:	001a8000 	call	1a800 <dac_start_sync>
}
   1ac5c:	e037883a 	mov	sp,fp
   1ac60:	dfc00117 	ldw	ra,4(sp)
   1ac64:	df000017 	ldw	fp,0(sp)
   1ac68:	dec00204 	addi	sp,sp,8
   1ac6c:	f800283a 	ret

0001ac70 <dds_set_frequency>:

/***************************************************************************//**
 * @brief dds_set_frequency
*******************************************************************************/
void dds_set_frequency(uint32_t chan, uint32_t freq)
{
   1ac70:	defff504 	addi	sp,sp,-44
   1ac74:	de00012e 	bgeu	sp,et,1ac7c <dds_set_frequency+0xc>
   1ac78:	003b68fa 	trap	3
   1ac7c:	dfc00a15 	stw	ra,40(sp)
   1ac80:	df000915 	stw	fp,36(sp)
   1ac84:	dcc00815 	stw	r19,32(sp)
   1ac88:	dc800715 	stw	r18,28(sp)
   1ac8c:	dc400615 	stw	r17,24(sp)
   1ac90:	dc000515 	stw	r16,20(sp)
   1ac94:	df000904 	addi	fp,sp,36
   1ac98:	e13ffa15 	stw	r4,-24(fp)
   1ac9c:	e17ffb15 	stw	r5,-20(fp)
	uint64_t val64;
	uint32_t reg;

	dds_st.cached_freq[chan] = freq;
   1aca0:	008000f4 	movhi	r2,3
   1aca4:	10aae204 	addi	r2,r2,-21624
   1aca8:	e0fffa17 	ldw	r3,-24(fp)
   1acac:	18c7883a 	add	r3,r3,r3
   1acb0:	18c7883a 	add	r3,r3,r3
   1acb4:	10c5883a 	add	r2,r2,r3
   1acb8:	e0fffb17 	ldw	r3,-20(fp)
   1acbc:	10c00015 	stw	r3,0(r2)
	dac_stop();
   1acc0:	001a7b00 	call	1a7b0 <dac_stop>
	dac_read(ADI_REG_CHAN_CNTRL_2_IIOCHAN(chan), &reg);
   1acc4:	e0bffa17 	ldw	r2,-24(fp)
   1acc8:	1004d07a 	srli	r2,r2,1
   1accc:	100690fa 	slli	r3,r2,3
   1acd0:	e0bffa17 	ldw	r2,-24(fp)
   1acd4:	1080004c 	andi	r2,r2,1
   1acd8:	1885883a 	add	r2,r3,r2
   1acdc:	100490fa 	slli	r2,r2,3
   1ace0:	10c10104 	addi	r3,r2,1028
   1ace4:	e0bff904 	addi	r2,fp,-28
   1ace8:	1809883a 	mov	r4,r3
   1acec:	100b883a 	mov	r5,r2
   1acf0:	001a5f80 	call	1a5f8 <dac_read>
	reg &= ~ADI_DDS_INCR(~0);
   1acf4:	e0bff917 	ldw	r2,-28(fp)
   1acf8:	10bfffec 	andhi	r2,r2,65535
   1acfc:	e0bff915 	stw	r2,-28(fp)
	val64 = (uint64_t) freq * 0xFFFFULL;
   1ad00:	e0bffb17 	ldw	r2,-20(fp)
   1ad04:	1025883a 	mov	r18,r2
   1ad08:	0027883a 	mov	r19,zero
   1ad0c:	00bfffd4 	movui	r2,65535
   1ad10:	0007883a 	mov	r3,zero
   1ad14:	9009883a 	mov	r4,r18
   1ad18:	980b883a 	mov	r5,r19
   1ad1c:	100d883a 	mov	r6,r2
   1ad20:	180f883a 	mov	r7,r3
   1ad24:	001c9940 	call	1c994 <__muldi3>
   1ad28:	1009883a 	mov	r4,r2
   1ad2c:	180b883a 	mov	r5,r3
   1ad30:	2005883a 	mov	r2,r4
   1ad34:	2807883a 	mov	r3,r5
   1ad38:	e0bff715 	stw	r2,-36(fp)
   1ad3c:	e0fff815 	stw	r3,-32(fp)
	do_div(&val64, *dds_st.dac_clk);
   1ad40:	008000f4 	movhi	r2,3
   1ad44:	10aae204 	addi	r2,r2,-21624
   1ad48:	10802017 	ldw	r2,128(r2)
   1ad4c:	10800017 	ldw	r2,0(r2)
   1ad50:	1021883a 	mov	r16,r2
   1ad54:	0023883a 	mov	r17,zero
   1ad58:	e13ff704 	addi	r4,fp,-36
   1ad5c:	800b883a 	mov	r5,r16
   1ad60:	880d883a 	mov	r6,r17
   1ad64:	001c76c0 	call	1c76c <do_div>
	reg |= ADI_DDS_INCR(val64) | 1;
   1ad68:	e0bff717 	ldw	r2,-36(fp)
   1ad6c:	e0fff817 	ldw	r3,-32(fp)
   1ad70:	10ffffcc 	andi	r3,r2,65535
   1ad74:	e0bff917 	ldw	r2,-28(fp)
   1ad78:	1884b03a 	or	r2,r3,r2
   1ad7c:	10800054 	ori	r2,r2,1
   1ad80:	e0bff915 	stw	r2,-28(fp)
	dac_write(ADI_REG_CHAN_CNTRL_2_IIOCHAN(chan), reg);
   1ad84:	e0bffa17 	ldw	r2,-24(fp)
   1ad88:	1004d07a 	srli	r2,r2,1
   1ad8c:	100690fa 	slli	r3,r2,3
   1ad90:	e0bffa17 	ldw	r2,-24(fp)
   1ad94:	1080004c 	andi	r2,r2,1
   1ad98:	1885883a 	add	r2,r3,r2
   1ad9c:	100490fa 	slli	r2,r2,3
   1ada0:	10c10104 	addi	r3,r2,1028
   1ada4:	e0bff917 	ldw	r2,-28(fp)
   1ada8:	1809883a 	mov	r4,r3
   1adac:	100b883a 	mov	r5,r2
   1adb0:	001a6400 	call	1a640 <dac_write>
	dac_start_sync(0);
   1adb4:	0009883a 	mov	r4,zero
   1adb8:	001a8000 	call	1a800 <dac_start_sync>
}
   1adbc:	e6fffc04 	addi	sp,fp,-16
   1adc0:	dfc00517 	ldw	ra,20(sp)
   1adc4:	df000417 	ldw	fp,16(sp)
   1adc8:	dcc00317 	ldw	r19,12(sp)
   1adcc:	dc800217 	ldw	r18,8(sp)
   1add0:	dc400117 	ldw	r17,4(sp)
   1add4:	dc000017 	ldw	r16,0(sp)
   1add8:	dec00604 	addi	sp,sp,24
   1addc:	f800283a 	ret

0001ade0 <dds_set_phase>:

/***************************************************************************//**
 * @brief dds_set_phase
*******************************************************************************/
void dds_set_phase(uint32_t chan, uint32_t phase)
{
   1ade0:	defff504 	addi	sp,sp,-44
   1ade4:	de00012e 	bgeu	sp,et,1adec <dds_set_phase+0xc>
   1ade8:	003b68fa 	trap	3
   1adec:	dfc00a15 	stw	ra,40(sp)
   1adf0:	df000915 	stw	fp,36(sp)
   1adf4:	dcc00815 	stw	r19,32(sp)
   1adf8:	dc800715 	stw	r18,28(sp)
   1adfc:	dc400615 	stw	r17,24(sp)
   1ae00:	dc000515 	stw	r16,20(sp)
   1ae04:	df000904 	addi	fp,sp,36
   1ae08:	e13ffa15 	stw	r4,-24(fp)
   1ae0c:	e17ffb15 	stw	r5,-20(fp)
	uint64_t val64;
	uint32_t reg;

	dds_st.cached_phase[chan] = phase;
   1ae10:	008000f4 	movhi	r2,3
   1ae14:	10aae204 	addi	r2,r2,-21624
   1ae18:	e0fffa17 	ldw	r3,-24(fp)
   1ae1c:	18c00204 	addi	r3,r3,8
   1ae20:	18c7883a 	add	r3,r3,r3
   1ae24:	18c7883a 	add	r3,r3,r3
   1ae28:	10c5883a 	add	r2,r2,r3
   1ae2c:	e0fffb17 	ldw	r3,-20(fp)
   1ae30:	10c00015 	stw	r3,0(r2)
	dac_stop();
   1ae34:	001a7b00 	call	1a7b0 <dac_stop>
	dac_read(ADI_REG_CHAN_CNTRL_2_IIOCHAN(chan), &reg);
   1ae38:	e0bffa17 	ldw	r2,-24(fp)
   1ae3c:	1004d07a 	srli	r2,r2,1
   1ae40:	100690fa 	slli	r3,r2,3
   1ae44:	e0bffa17 	ldw	r2,-24(fp)
   1ae48:	1080004c 	andi	r2,r2,1
   1ae4c:	1885883a 	add	r2,r3,r2
   1ae50:	100490fa 	slli	r2,r2,3
   1ae54:	10c10104 	addi	r3,r2,1028
   1ae58:	e0bff904 	addi	r2,fp,-28
   1ae5c:	1809883a 	mov	r4,r3
   1ae60:	100b883a 	mov	r5,r2
   1ae64:	001a5f80 	call	1a5f8 <dac_read>
	reg &= ~ADI_DDS_INIT(~0);
   1ae68:	e0bff917 	ldw	r2,-28(fp)
   1ae6c:	10bfffcc 	andi	r2,r2,65535
   1ae70:	e0bff915 	stw	r2,-28(fp)
	val64 = (uint64_t) phase * 0x10000ULL + (360000 / 2);
   1ae74:	e0bffb17 	ldw	r2,-20(fp)
   1ae78:	1025883a 	mov	r18,r2
   1ae7c:	0027883a 	mov	r19,zero
   1ae80:	9004d43a 	srli	r2,r18,16
   1ae84:	9822943a 	slli	r17,r19,16
   1ae88:	1462b03a 	or	r17,r2,r17
   1ae8c:	9020943a 	slli	r16,r18,16
   1ae90:	010000f4 	movhi	r4,3
   1ae94:	212fc804 	addi	r4,r4,-16608
   1ae98:	000b883a 	mov	r5,zero
   1ae9c:	8105883a 	add	r2,r16,r4
   1aea0:	140d803a 	cmpltu	r6,r2,r16
   1aea4:	8947883a 	add	r3,r17,r5
   1aea8:	30c9883a 	add	r4,r6,r3
   1aeac:	2007883a 	mov	r3,r4
   1aeb0:	1009883a 	mov	r4,r2
   1aeb4:	180b883a 	mov	r5,r3
   1aeb8:	e13ff715 	stw	r4,-36(fp)
   1aebc:	e17ff815 	stw	r5,-32(fp)
	do_div(&val64, 360000);
   1aec0:	e13ff704 	addi	r4,fp,-36
   1aec4:	01400174 	movhi	r5,5
   1aec8:	295f9004 	addi	r5,r5,32320
   1aecc:	000d883a 	mov	r6,zero
   1aed0:	001c76c0 	call	1c76c <do_div>
	reg |= ADI_DDS_INIT(val64);
   1aed4:	e0bff717 	ldw	r2,-36(fp)
   1aed8:	e0fff817 	ldw	r3,-32(fp)
   1aedc:	1006943a 	slli	r3,r2,16
   1aee0:	e0bff917 	ldw	r2,-28(fp)
   1aee4:	1884b03a 	or	r2,r3,r2
   1aee8:	e0bff915 	stw	r2,-28(fp)
	dac_write(ADI_REG_CHAN_CNTRL_2_IIOCHAN(chan), reg);
   1aeec:	e0bffa17 	ldw	r2,-24(fp)
   1aef0:	1004d07a 	srli	r2,r2,1
   1aef4:	100690fa 	slli	r3,r2,3
   1aef8:	e0bffa17 	ldw	r2,-24(fp)
   1aefc:	1080004c 	andi	r2,r2,1
   1af00:	1885883a 	add	r2,r3,r2
   1af04:	100490fa 	slli	r2,r2,3
   1af08:	10c10104 	addi	r3,r2,1028
   1af0c:	e0bff917 	ldw	r2,-28(fp)
   1af10:	1809883a 	mov	r4,r3
   1af14:	100b883a 	mov	r5,r2
   1af18:	001a6400 	call	1a640 <dac_write>
	dac_start_sync(0);
   1af1c:	0009883a 	mov	r4,zero
   1af20:	001a8000 	call	1a800 <dac_start_sync>
}
   1af24:	e6fffc04 	addi	sp,fp,-16
   1af28:	dfc00517 	ldw	ra,20(sp)
   1af2c:	df000417 	ldw	fp,16(sp)
   1af30:	dcc00317 	ldw	r19,12(sp)
   1af34:	dc800217 	ldw	r18,8(sp)
   1af38:	dc400117 	ldw	r17,4(sp)
   1af3c:	dc000017 	ldw	r16,0(sp)
   1af40:	dec00604 	addi	sp,sp,24
   1af44:	f800283a 	ret

0001af48 <dds_set_scale>:

/***************************************************************************//**
 * @brief dds_set_phase
*******************************************************************************/
void dds_set_scale(uint32_t chan, double scale)
{
   1af48:	defff704 	addi	sp,sp,-36
   1af4c:	de00012e 	bgeu	sp,et,1af54 <dds_set_scale+0xc>
   1af50:	003b68fa 	trap	3
   1af54:	dfc00815 	stw	ra,32(sp)
   1af58:	df000715 	stw	fp,28(sp)
   1af5c:	df000704 	addi	fp,sp,28
   1af60:	e13ffd15 	stw	r4,-12(fp)
   1af64:	e17ffe15 	stw	r5,-8(fp)
   1af68:	e1bfff15 	stw	r6,-4(fp)
	uint32_t scale_reg;
	uint32_t sign_part;
	uint32_t int_part;
	uint32_t fract_part;

	if (PCORE_VERSION_MAJOR(dds_st.pcore_version) > 6)
   1af6c:	008000f4 	movhi	r2,3
   1af70:	10aae204 	addi	r2,r2,-21624
   1af74:	10802117 	ldw	r2,132(r2)
   1af78:	1004d43a 	srli	r2,r2,16
   1af7c:	108001f0 	cmpltui	r2,r2,7
   1af80:	1000641e 	bne	r2,zero,1b114 <dds_set_scale+0x1cc>
	{
		if(scale >= 1.0)
   1af84:	e13ffe17 	ldw	r4,-8(fp)
   1af88:	e17fff17 	ldw	r5,-4(fp)
   1af8c:	000d883a 	mov	r6,zero
   1af90:	01cffc34 	movhi	r7,16368
   1af94:	001e0680 	call	1e068 <__gedf2>
   1af98:	10000e16 	blt	r2,zero,1afd4 <dds_set_scale+0x8c>
		{
			sign_part = 0;
   1af9c:	e03ffa15 	stw	zero,-24(fp)
			int_part = 1;
   1afa0:	00800044 	movi	r2,1
   1afa4:	e0bffb15 	stw	r2,-20(fp)
			fract_part = 0;
   1afa8:	e03ffc15 	stw	zero,-16(fp)
			dds_st.cached_scale[chan] = 1.0;
   1afac:	008000f4 	movhi	r2,3
   1afb0:	10aae204 	addi	r2,r2,-21624
   1afb4:	e0fffd17 	ldw	r3,-12(fp)
   1afb8:	18c00204 	addi	r3,r3,8
   1afbc:	180690fa 	slli	r3,r3,3
   1afc0:	10c5883a 	add	r2,r2,r3
   1afc4:	10000015 	stw	zero,0(r2)
   1afc8:	00cffc34 	movhi	r3,16368
   1afcc:	10c00115 	stw	r3,4(r2)
			goto set_scale_reg;
   1afd0:	00004706 	br	1b0f0 <dds_set_scale+0x1a8>
		}
		if(scale <= -1.0)
   1afd4:	e13ffe17 	ldw	r4,-8(fp)
   1afd8:	e17fff17 	ldw	r5,-4(fp)
   1afdc:	000d883a 	mov	r6,zero
   1afe0:	01effc34 	movhi	r7,49136
   1afe4:	001e1500 	call	1e150 <__ledf2>
   1afe8:	00800f16 	blt	zero,r2,1b028 <dds_set_scale+0xe0>
		{
			sign_part = 1;
   1afec:	00800044 	movi	r2,1
   1aff0:	e0bffa15 	stw	r2,-24(fp)
			int_part = 1;
   1aff4:	00800044 	movi	r2,1
   1aff8:	e0bffb15 	stw	r2,-20(fp)
			fract_part = 0;
   1affc:	e03ffc15 	stw	zero,-16(fp)
			dds_st.cached_scale[chan] = -1.0;
   1b000:	008000f4 	movhi	r2,3
   1b004:	10aae204 	addi	r2,r2,-21624
   1b008:	e0fffd17 	ldw	r3,-12(fp)
   1b00c:	18c00204 	addi	r3,r3,8
   1b010:	180690fa 	slli	r3,r3,3
   1b014:	10c5883a 	add	r2,r2,r3
   1b018:	10000015 	stw	zero,0(r2)
   1b01c:	00effc34 	movhi	r3,49136
   1b020:	10c00115 	stw	r3,4(r2)
			goto set_scale_reg;
   1b024:	00003206 	br	1b0f0 <dds_set_scale+0x1a8>
		}
		if(scale < 0)
   1b028:	e13ffe17 	ldw	r4,-8(fp)
   1b02c:	e17fff17 	ldw	r5,-4(fp)
   1b030:	000d883a 	mov	r6,zero
   1b034:	000f883a 	mov	r7,zero
   1b038:	001e1500 	call	1e150 <__ledf2>
   1b03c:	1000130e 	bge	r2,zero,1b08c <dds_set_scale+0x144>
		{
			sign_part = 1;
   1b040:	00800044 	movi	r2,1
   1b044:	e0bffa15 	stw	r2,-24(fp)
			int_part = 0;
   1b048:	e03ffb15 	stw	zero,-20(fp)
			dds_st.cached_scale[chan] = scale;
   1b04c:	008000f4 	movhi	r2,3
   1b050:	10aae204 	addi	r2,r2,-21624
   1b054:	e0fffd17 	ldw	r3,-12(fp)
   1b058:	18c00204 	addi	r3,r3,8
   1b05c:	180690fa 	slli	r3,r3,3
   1b060:	10c5883a 	add	r2,r2,r3
   1b064:	e0fffe17 	ldw	r3,-8(fp)
   1b068:	10c00015 	stw	r3,0(r2)
   1b06c:	e0ffff17 	ldw	r3,-4(fp)
   1b070:	10c00115 	stw	r3,4(r2)
			scale *= -1;
   1b074:	e0bffe17 	ldw	r2,-8(fp)
   1b078:	e0bffe15 	stw	r2,-8(fp)
   1b07c:	e0bfff17 	ldw	r2,-4(fp)
   1b080:	10a0003c 	xorhi	r2,r2,32768
   1b084:	e0bfff15 	stw	r2,-4(fp)
			goto set_scale_reg;
   1b088:	00001906 	br	1b0f0 <dds_set_scale+0x1a8>
		}
		sign_part = 0;
   1b08c:	e03ffa15 	stw	zero,-24(fp)
		int_part = 0;
   1b090:	e03ffb15 	stw	zero,-20(fp)
		dds_st.cached_scale[chan] = scale;
   1b094:	008000f4 	movhi	r2,3
   1b098:	10aae204 	addi	r2,r2,-21624
   1b09c:	e0fffd17 	ldw	r3,-12(fp)
   1b0a0:	18c00204 	addi	r3,r3,8
   1b0a4:	180690fa 	slli	r3,r3,3
   1b0a8:	10c5883a 	add	r2,r2,r3
   1b0ac:	e0fffe17 	ldw	r3,-8(fp)
   1b0b0:	10c00015 	stw	r3,0(r2)
   1b0b4:	e0ffff17 	ldw	r3,-4(fp)
   1b0b8:	10c00115 	stw	r3,4(r2)
		fract_part = (uint32_t)(scale * 0x4000);
   1b0bc:	e13ffe17 	ldw	r4,-8(fp)
   1b0c0:	e17fff17 	ldw	r5,-4(fp)
   1b0c4:	000d883a 	mov	r6,zero
   1b0c8:	01d03434 	movhi	r7,16592
   1b0cc:	001e2380 	call	1e238 <__muldf3>
   1b0d0:	1009883a 	mov	r4,r2
   1b0d4:	180b883a 	mov	r5,r3
   1b0d8:	2005883a 	mov	r2,r4
   1b0dc:	2807883a 	mov	r3,r5
   1b0e0:	1009883a 	mov	r4,r2
   1b0e4:	180b883a 	mov	r5,r3
   1b0e8:	001c9fc0 	call	1c9fc <__fixunsdfsi>
   1b0ec:	e0bffc15 	stw	r2,-16(fp)
	set_scale_reg:
		scale_reg = (sign_part << 15) | (int_part << 14) | fract_part;
   1b0f0:	e0bffa17 	ldw	r2,-24(fp)
   1b0f4:	100693fa 	slli	r3,r2,15
   1b0f8:	e0bffb17 	ldw	r2,-20(fp)
   1b0fc:	100493ba 	slli	r2,r2,14
   1b100:	1886b03a 	or	r3,r3,r2
   1b104:	e0bffc17 	ldw	r2,-16(fp)
   1b108:	1884b03a 	or	r2,r3,r2
   1b10c:	e0bff915 	stw	r2,-28(fp)
   1b110:	00003006 	br	1b1d4 <dds_set_scale+0x28c>
	}
	else
	{
		if(scale >= 1.0)
   1b114:	e13ffe17 	ldw	r4,-8(fp)
   1b118:	e17fff17 	ldw	r5,-4(fp)
   1b11c:	000d883a 	mov	r6,zero
   1b120:	01cffc34 	movhi	r7,16368
   1b124:	001e0680 	call	1e068 <__gedf2>
   1b128:	10000416 	blt	r2,zero,1b13c <dds_set_scale+0x1f4>
		{
			scale_reg = 0;
   1b12c:	e03ff915 	stw	zero,-28(fp)
			scale = 1.0;
   1b130:	e03ffe15 	stw	zero,-8(fp)
   1b134:	008ffc34 	movhi	r2,16368
   1b138:	e0bfff15 	stw	r2,-4(fp)
		}
		if(scale <= 0.0)
   1b13c:	e13ffe17 	ldw	r4,-8(fp)
   1b140:	e17fff17 	ldw	r5,-4(fp)
   1b144:	000d883a 	mov	r6,zero
   1b148:	000f883a 	mov	r7,zero
   1b14c:	001e1500 	call	1e150 <__ledf2>
   1b150:	00800316 	blt	zero,r2,1b160 <dds_set_scale+0x218>
		{
			scale_reg = 0;
   1b154:	e03ff915 	stw	zero,-28(fp)
			scale = 0.0;
   1b158:	e03ffe15 	stw	zero,-8(fp)
   1b15c:	e03fff15 	stw	zero,-4(fp)
		}
		dds_st.cached_scale[chan] = scale;
   1b160:	008000f4 	movhi	r2,3
   1b164:	10aae204 	addi	r2,r2,-21624
   1b168:	e0fffd17 	ldw	r3,-12(fp)
   1b16c:	18c00204 	addi	r3,r3,8
   1b170:	180690fa 	slli	r3,r3,3
   1b174:	10c5883a 	add	r2,r2,r3
   1b178:	e0fffe17 	ldw	r3,-8(fp)
   1b17c:	10c00015 	stw	r3,0(r2)
   1b180:	e0ffff17 	ldw	r3,-4(fp)
   1b184:	10c00115 	stw	r3,4(r2)
		fract_part = (uint32_t)(scale * 1000000);
   1b188:	e13ffe17 	ldw	r4,-8(fp)
   1b18c:	e17fff17 	ldw	r5,-4(fp)
   1b190:	000d883a 	mov	r6,zero
   1b194:	01d04bf4 	movhi	r7,16687
   1b198:	39e12004 	addi	r7,r7,-31616
   1b19c:	001e2380 	call	1e238 <__muldf3>
   1b1a0:	1009883a 	mov	r4,r2
   1b1a4:	180b883a 	mov	r5,r3
   1b1a8:	2005883a 	mov	r2,r4
   1b1ac:	2807883a 	mov	r3,r5
   1b1b0:	1009883a 	mov	r4,r2
   1b1b4:	180b883a 	mov	r5,r3
   1b1b8:	001c9fc0 	call	1c9fc <__fixunsdfsi>
   1b1bc:	e0bffc15 	stw	r2,-16(fp)
		scale_reg = 500000 / fract_part;
   1b1c0:	01000234 	movhi	r4,8
   1b1c4:	21284804 	addi	r4,r4,-24288
   1b1c8:	e17ffc17 	ldw	r5,-16(fp)
   1b1cc:	001d7a40 	call	1d7a4 <__udivsi3>
   1b1d0:	e0bff915 	stw	r2,-28(fp)
	}
	dac_stop();
   1b1d4:	001a7b00 	call	1a7b0 <dac_stop>
	dac_write(ADI_REG_CHAN_CNTRL_1_IIOCHAN(chan), ADI_DDS_SCALE(scale_reg));
   1b1d8:	e0bffd17 	ldw	r2,-12(fp)
   1b1dc:	1004d07a 	srli	r2,r2,1
   1b1e0:	10800404 	addi	r2,r2,16
   1b1e4:	100690fa 	slli	r3,r2,3
   1b1e8:	e0bffd17 	ldw	r2,-12(fp)
   1b1ec:	1080004c 	andi	r2,r2,1
   1b1f0:	1885883a 	add	r2,r3,r2
   1b1f4:	100690fa 	slli	r3,r2,3
   1b1f8:	e0bff917 	ldw	r2,-28(fp)
   1b1fc:	10bfffcc 	andi	r2,r2,65535
   1b200:	1809883a 	mov	r4,r3
   1b204:	100b883a 	mov	r5,r2
   1b208:	001a6400 	call	1a640 <dac_write>
	dac_start_sync(0);
   1b20c:	0009883a 	mov	r4,zero
   1b210:	001a8000 	call	1a800 <dac_start_sync>
}
   1b214:	e037883a 	mov	sp,fp
   1b218:	dfc00117 	ldw	ra,4(sp)
   1b21c:	df000017 	ldw	fp,0(sp)
   1b220:	dec00204 	addi	sp,sp,8
   1b224:	f800283a 	ret

0001b228 <dds_update>:

/***************************************************************************//**
 * @brief dds_update
*******************************************************************************/
void dds_update(void)
{
   1b228:	defffd04 	addi	sp,sp,-12
   1b22c:	de00012e 	bgeu	sp,et,1b234 <dds_update+0xc>
   1b230:	003b68fa 	trap	3
   1b234:	dfc00215 	stw	ra,8(sp)
   1b238:	df000115 	stw	fp,4(sp)
   1b23c:	df000104 	addi	fp,sp,4
	uint32_t chan;

	for(chan = DDS_CHAN_TX1_I_F1; chan <= DDS_CHAN_TX2_Q_F2; chan++)
   1b240:	e03fff15 	stw	zero,-4(fp)
   1b244:	00002406 	br	1b2d8 <dds_update+0xb0>
	{
		dds_set_frequency(chan, dds_st.cached_freq[chan]);
   1b248:	008000f4 	movhi	r2,3
   1b24c:	10aae204 	addi	r2,r2,-21624
   1b250:	e0ffff17 	ldw	r3,-4(fp)
   1b254:	18c7883a 	add	r3,r3,r3
   1b258:	18c7883a 	add	r3,r3,r3
   1b25c:	10c5883a 	add	r2,r2,r3
   1b260:	10800017 	ldw	r2,0(r2)
   1b264:	e13fff17 	ldw	r4,-4(fp)
   1b268:	100b883a 	mov	r5,r2
   1b26c:	001ac700 	call	1ac70 <dds_set_frequency>
		dds_set_phase(chan, dds_st.cached_phase[chan]);
   1b270:	008000f4 	movhi	r2,3
   1b274:	10aae204 	addi	r2,r2,-21624
   1b278:	e0ffff17 	ldw	r3,-4(fp)
   1b27c:	18c00204 	addi	r3,r3,8
   1b280:	18c7883a 	add	r3,r3,r3
   1b284:	18c7883a 	add	r3,r3,r3
   1b288:	10c5883a 	add	r2,r2,r3
   1b28c:	10800017 	ldw	r2,0(r2)
   1b290:	e13fff17 	ldw	r4,-4(fp)
   1b294:	100b883a 	mov	r5,r2
   1b298:	001ade00 	call	1ade0 <dds_set_phase>
		dds_set_scale(chan, dds_st.cached_scale[chan]);
   1b29c:	008000f4 	movhi	r2,3
   1b2a0:	10aae204 	addi	r2,r2,-21624
   1b2a4:	e0ffff17 	ldw	r3,-4(fp)
   1b2a8:	18c00204 	addi	r3,r3,8
   1b2ac:	180690fa 	slli	r3,r3,3
   1b2b0:	10c9883a 	add	r4,r2,r3
   1b2b4:	20800017 	ldw	r2,0(r4)
   1b2b8:	20c00117 	ldw	r3,4(r4)
   1b2bc:	e13fff17 	ldw	r4,-4(fp)
   1b2c0:	100b883a 	mov	r5,r2
   1b2c4:	180d883a 	mov	r6,r3
   1b2c8:	001af480 	call	1af48 <dds_set_scale>
*******************************************************************************/
void dds_update(void)
{
	uint32_t chan;

	for(chan = DDS_CHAN_TX1_I_F1; chan <= DDS_CHAN_TX2_Q_F2; chan++)
   1b2cc:	e0bfff17 	ldw	r2,-4(fp)
   1b2d0:	10800044 	addi	r2,r2,1
   1b2d4:	e0bfff15 	stw	r2,-4(fp)
   1b2d8:	e0bfff17 	ldw	r2,-4(fp)
   1b2dc:	10800230 	cmpltui	r2,r2,8
   1b2e0:	103fd91e 	bne	r2,zero,1b248 <_gp+0xfffe9128>
	{
		dds_set_frequency(chan, dds_st.cached_freq[chan]);
		dds_set_phase(chan, dds_st.cached_phase[chan]);
		dds_set_scale(chan, dds_st.cached_scale[chan]);
	}
}
   1b2e4:	e037883a 	mov	sp,fp
   1b2e8:	dfc00117 	ldw	ra,4(sp)
   1b2ec:	df000017 	ldw	fp,0(sp)
   1b2f0:	dec00204 	addi	sp,sp,8
   1b2f4:	f800283a 	ret

0001b2f8 <dac_datasel>:

/***************************************************************************//**
 * @brief dac_datasel
*******************************************************************************/
int dac_datasel(int32_t chan, enum dds_data_select sel)
{
   1b2f8:	defffa04 	addi	sp,sp,-24
   1b2fc:	de00012e 	bgeu	sp,et,1b304 <dac_datasel+0xc>
   1b300:	003b68fa 	trap	3
   1b304:	dfc00515 	stw	ra,20(sp)
   1b308:	df000415 	stw	fp,16(sp)
   1b30c:	df000404 	addi	fp,sp,16
   1b310:	e13ffe15 	stw	r4,-8(fp)
   1b314:	e17fff15 	stw	r5,-4(fp)
	if (PCORE_VERSION_MAJOR(dds_st.pcore_version) > 7) {
   1b318:	008000f4 	movhi	r2,3
   1b31c:	10aae204 	addi	r2,r2,-21624
   1b320:	10802117 	ldw	r2,132(r2)
   1b324:	1004d43a 	srli	r2,r2,16
   1b328:	10800230 	cmpltui	r2,r2,8
   1b32c:	10001a1e 	bne	r2,zero,1b398 <dac_datasel+0xa0>
		if (chan < 0) { /* ALL */
   1b330:	e0bffe17 	ldw	r2,-8(fp)
   1b334:	1000110e 	bge	r2,zero,1b37c <dac_datasel+0x84>
			int i;
			for (i = 0; i < dds_st.num_dds_channels; i++) {
   1b338:	e03ffc15 	stw	zero,-16(fp)
   1b33c:	00000906 	br	1b364 <dac_datasel+0x6c>
				dac_write(ADI_REG_CHAN_CNTRL_7(i), sel);
   1b340:	e0bffc17 	ldw	r2,-16(fp)
   1b344:	100491ba 	slli	r2,r2,6
   1b348:	10810604 	addi	r2,r2,1048
   1b34c:	1009883a 	mov	r4,r2
   1b350:	e17fff17 	ldw	r5,-4(fp)
   1b354:	001a6400 	call	1a640 <dac_write>
int dac_datasel(int32_t chan, enum dds_data_select sel)
{
	if (PCORE_VERSION_MAJOR(dds_st.pcore_version) > 7) {
		if (chan < 0) { /* ALL */
			int i;
			for (i = 0; i < dds_st.num_dds_channels; i++) {
   1b358:	e0bffc17 	ldw	r2,-16(fp)
   1b35c:	10800044 	addi	r2,r2,1
   1b360:	e0bffc15 	stw	r2,-16(fp)
   1b364:	e0fffc17 	ldw	r3,-16(fp)
   1b368:	008000f4 	movhi	r2,3
   1b36c:	10aae204 	addi	r2,r2,-21624
   1b370:	10802217 	ldw	r2,136(r2)
   1b374:	18bff236 	bltu	r3,r2,1b340 <_gp+0xfffe9220>
   1b378:	00001f06 	br	1b3f8 <dac_datasel+0x100>
				dac_write(ADI_REG_CHAN_CNTRL_7(i), sel);
			}
		} else {
			dac_write(ADI_REG_CHAN_CNTRL_7(chan), sel);
   1b37c:	e0bffe17 	ldw	r2,-8(fp)
   1b380:	100491ba 	slli	r2,r2,6
   1b384:	10810604 	addi	r2,r2,1048
   1b388:	1009883a 	mov	r4,r2
   1b38c:	e17fff17 	ldw	r5,-4(fp)
   1b390:	001a6400 	call	1a640 <dac_write>
   1b394:	00001806 	br	1b3f8 <dac_datasel+0x100>
		}
	} else {
		uint32_t reg;

		switch(sel) {
   1b398:	e0bfff17 	ldw	r2,-4(fp)
   1b39c:	108000e8 	cmpgeui	r2,r2,3
   1b3a0:	1000131e 	bne	r2,zero,1b3f0 <dac_datasel+0xf8>
		case DATA_SEL_DDS:
		case DATA_SEL_SED:
		case DATA_SEL_DMA:
			dac_read(ADI_REG_CNTRL_2, &reg);
   1b3a4:	e0bffd04 	addi	r2,fp,-12
   1b3a8:	01001204 	movi	r4,72
   1b3ac:	100b883a 	mov	r5,r2
   1b3b0:	001a5f80 	call	1a5f8 <dac_read>
			reg &= ~ADI_DATA_SEL(~0);
   1b3b4:	e0fffd17 	ldw	r3,-12(fp)
   1b3b8:	00bffc04 	movi	r2,-16
   1b3bc:	1884703a 	and	r2,r3,r2
   1b3c0:	e0bffd15 	stw	r2,-12(fp)
			reg |= ADI_DATA_SEL(sel);
   1b3c4:	e0bfff17 	ldw	r2,-4(fp)
   1b3c8:	10c003cc 	andi	r3,r2,15
   1b3cc:	e0bffd17 	ldw	r2,-12(fp)
   1b3d0:	1884b03a 	or	r2,r3,r2
   1b3d4:	e0bffd15 	stw	r2,-12(fp)
			dac_write(ADI_REG_CNTRL_2, reg);
   1b3d8:	e0bffd17 	ldw	r2,-12(fp)
   1b3dc:	01001204 	movi	r4,72
   1b3e0:	100b883a 	mov	r5,r2
   1b3e4:	001a6400 	call	1a640 <dac_write>
			break;
   1b3e8:	0001883a 	nop
   1b3ec:	00000206 	br	1b3f8 <dac_datasel+0x100>
		default:
			return -EINVAL;
   1b3f0:	00bffa84 	movi	r2,-22
   1b3f4:	00000106 	br	1b3fc <dac_datasel+0x104>
		}
	}

	return 0;
   1b3f8:	0005883a 	mov	r2,zero
}
   1b3fc:	e037883a 	mov	sp,fp
   1b400:	dfc00117 	ldw	ra,4(sp)
   1b404:	df000017 	ldw	fp,0(sp)
   1b408:	dec00204 	addi	sp,sp,8
   1b40c:	f800283a 	ret

0001b410 <usleep>:

/***************************************************************************//**
 * @brief usleep
*******************************************************************************/
static inline void usleep(unsigned long usleep)
{
   1b410:	defffd04 	addi	sp,sp,-12
   1b414:	de00012e 	bgeu	sp,et,1b41c <usleep+0xc>
   1b418:	003b68fa 	trap	3
   1b41c:	df000215 	stw	fp,8(sp)
   1b420:	df000204 	addi	fp,sp,8
   1b424:	e13fff15 	stw	r4,-4(fp)
	unsigned long delay = 0;
   1b428:	e03ffe15 	stw	zero,-8(fp)

	for(delay = 0; delay < usleep * 10; delay++);
   1b42c:	e03ffe15 	stw	zero,-8(fp)
   1b430:	00000306 	br	1b440 <usleep+0x30>
   1b434:	e0bffe17 	ldw	r2,-8(fp)
   1b438:	10800044 	addi	r2,r2,1
   1b43c:	e0bffe15 	stw	r2,-8(fp)
   1b440:	e0bfff17 	ldw	r2,-4(fp)
   1b444:	108002a4 	muli	r2,r2,10
   1b448:	e0fffe17 	ldw	r3,-8(fp)
   1b44c:	18bff936 	bltu	r3,r2,1b434 <_gp+0xfffe9314>
}
   1b450:	e037883a 	mov	sp,fp
   1b454:	df000017 	ldw	fp,0(sp)
   1b458:	dec00104 	addi	sp,sp,4
   1b45c:	f800283a 	ret

0001b460 <altera_bridge_init>:

/***************************************************************************//**
 * @brief altera_bridge_init
*******************************************************************************/
int32_t altera_bridge_init(void)
{
   1b460:	defffe04 	addi	sp,sp,-8
   1b464:	de00012e 	bgeu	sp,et,1b46c <altera_bridge_init+0xc>
   1b468:	003b68fa 	trap	3
   1b46c:	df000115 	stw	fp,4(sp)
   1b470:	df000104 	addi	fp,sp,4
	int32_t status = 0;
   1b474:	e03fff15 	stw	zero,-4(fp)
									  ALT_ADDR_SPACE_NONMPU_ZERO_AT_OCRAM,
									  ALT_ADDR_SPACE_H2F_ACCESSIBLE,
									  ALT_ADDR_SPACE_LWH2F_ACCESSIBLE);
	}*/

	return status;
   1b478:	e0bfff17 	ldw	r2,-4(fp)
}
   1b47c:	e037883a 	mov	sp,fp
   1b480:	df000017 	ldw	fp,0(sp)
   1b484:	dec00104 	addi	sp,sp,4
   1b488:	f800283a 	ret

0001b48c <altera_bridge_uninit>:

/***************************************************************************//**
 * @brief altera_bridge_uninit
*******************************************************************************/
int32_t altera_bridge_uninit(void)
{
   1b48c:	defffe04 	addi	sp,sp,-8
   1b490:	de00012e 	bgeu	sp,et,1b498 <altera_bridge_uninit+0xc>
   1b494:	003b68fa 	trap	3
   1b498:	df000115 	stw	fp,4(sp)
   1b49c:	df000104 	addi	fp,sp,4
	int32_t status = 0;
   1b4a0:	e03fff15 	stw	zero,-4(fp)

    //status = alt_bridge_uninit(ALT_BRIDGE_LWH2F, NULL, NULL);

    return status;
   1b4a4:	e0bfff17 	ldw	r2,-4(fp)
}
   1b4a8:	e037883a 	mov	sp,fp
   1b4ac:	df000017 	ldw	fp,0(sp)
   1b4b0:	dec00104 	addi	sp,sp,4
   1b4b4:	f800283a 	ret

0001b4b8 <alt_avl_spi_read>:

/***************************************************************************//**
 * @brief alt_avl_spi_read
*******************************************************************************/
uint32_t alt_avl_spi_read(uint32_t reg_addr)
{
   1b4b8:	defffd04 	addi	sp,sp,-12
   1b4bc:	de00012e 	bgeu	sp,et,1b4c4 <alt_avl_spi_read+0xc>
   1b4c0:	003b68fa 	trap	3
   1b4c4:	df000215 	stw	fp,8(sp)
   1b4c8:	df000204 	addi	fp,sp,8
   1b4cc:	e13fff15 	stw	r4,-4(fp)
	uint32_t reg_data;

	//reg_data = alt_read_word(SPI_BASEADDR + reg_addr);
	reg_data = IORD_ALTERA_AVALON_PIO_DATA((SPI_BASEADDR) + (reg_addr));
   1b4d0:	e0ffff17 	ldw	r3,-4(fp)
   1b4d4:	00800174 	movhi	r2,5
   1b4d8:	10a00004 	addi	r2,r2,-32768
   1b4dc:	1885883a 	add	r2,r3,r2
   1b4e0:	10800037 	ldwio	r2,0(r2)
   1b4e4:	e0bffe15 	stw	r2,-8(fp)

	return reg_data;
   1b4e8:	e0bffe17 	ldw	r2,-8(fp)
}
   1b4ec:	e037883a 	mov	sp,fp
   1b4f0:	df000017 	ldw	fp,0(sp)
   1b4f4:	dec00104 	addi	sp,sp,4
   1b4f8:	f800283a 	ret

0001b4fc <alt_avl_spi_write>:

/***************************************************************************//**
 * @brief alt_avl_spi_write
*******************************************************************************/
void alt_avl_spi_write(uint32_t reg_addr, uint32_t reg_data)
{
   1b4fc:	defffd04 	addi	sp,sp,-12
   1b500:	de00012e 	bgeu	sp,et,1b508 <alt_avl_spi_write+0xc>
   1b504:	003b68fa 	trap	3
   1b508:	df000215 	stw	fp,8(sp)
   1b50c:	df000204 	addi	fp,sp,8
   1b510:	e13ffe15 	stw	r4,-8(fp)
   1b514:	e17fff15 	stw	r5,-4(fp)
	//alt_write_word(SPI_BASEADDR + reg_addr, reg_data);
	IOWR_ALTERA_AVALON_PIO_DATA((SPI_BASEADDR) + (reg_addr), (uint32_t)(reg_data));
   1b518:	e0fffe17 	ldw	r3,-8(fp)
   1b51c:	00800174 	movhi	r2,5
   1b520:	10a00004 	addi	r2,r2,-32768
   1b524:	1885883a 	add	r2,r3,r2
   1b528:	1007883a 	mov	r3,r2
   1b52c:	e0bfff17 	ldw	r2,-4(fp)
   1b530:	18800035 	stwio	r2,0(r3)
}
   1b534:	e037883a 	mov	sp,fp
   1b538:	df000017 	ldw	fp,0(sp)
   1b53c:	dec00104 	addi	sp,sp,4
   1b540:	f800283a 	ret

0001b544 <spi_init>:
 * @brief spi_init
*******************************************************************************/
int32_t spi_init(uint32_t device_id,
				 uint8_t  clk_pha,
				 uint8_t  clk_pol)
{
   1b544:	defffc04 	addi	sp,sp,-16
   1b548:	de00012e 	bgeu	sp,et,1b550 <spi_init+0xc>
   1b54c:	003b68fa 	trap	3
   1b550:	df000315 	stw	fp,12(sp)
   1b554:	df000304 	addi	fp,sp,12
   1b558:	e13ffd15 	stw	r4,-12(fp)
   1b55c:	2807883a 	mov	r3,r5
   1b560:	3005883a 	mov	r2,r6
   1b564:	e0fffe05 	stb	r3,-8(fp)
   1b568:	e0bfff05 	stb	r2,-4(fp)
	return 0;
   1b56c:	0005883a 	mov	r2,zero
}
   1b570:	e037883a 	mov	sp,fp
   1b574:	df000017 	ldw	fp,0(sp)
   1b578:	dec00104 	addi	sp,sp,4
   1b57c:	f800283a 	ret

0001b580 <spi_read>:
/***************************************************************************//**
 * @brief spi_read
*******************************************************************************/
int32_t spi_read(uint8_t *data,
				 uint8_t bytes_number)
{
   1b580:	defff904 	addi	sp,sp,-28
   1b584:	de00012e 	bgeu	sp,et,1b58c <spi_read+0xc>
   1b588:	003b68fa 	trap	3
   1b58c:	dfc00615 	stw	ra,24(sp)
   1b590:	df000515 	stw	fp,20(sp)
   1b594:	df000504 	addi	fp,sp,20
   1b598:	e13ffe15 	stw	r4,-8(fp)
   1b59c:	2805883a 	mov	r2,r5
   1b5a0:	e0bfff05 	stb	r2,-4(fp)

	//int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
	//                           alt_u32 write_length, const alt_u8 * write_data,
	//                           alt_u32 read_length, alt_u8 * read_data,
	//                           alt_u32 flags);
	alt_avalon_spi_command(SPI_BASEADDR, 0, 0, 0, bytes_number, data, 0);
   1b5a4:	e0bfff03 	ldbu	r2,-4(fp)
   1b5a8:	d8800015 	stw	r2,0(sp)
   1b5ac:	e0bffe17 	ldw	r2,-8(fp)
   1b5b0:	d8800115 	stw	r2,4(sp)
   1b5b4:	d8000215 	stw	zero,8(sp)
   1b5b8:	01000174 	movhi	r4,5
   1b5bc:	21200004 	addi	r4,r4,-32768
   1b5c0:	000b883a 	mov	r5,zero
   1b5c4:	000d883a 	mov	r6,zero
   1b5c8:	000f883a 	mov	r7,zero
   1b5cc:	0024cf00 	call	24cf0 <alt_avalon_spi_command>
//	while((alt_avl_spi_read(ALT_AVL_SPI_STATUS_REG) &
//				ALT_AVL_SPI_STATUS_TMT_MSK) == 0);
//	/* Clear the SSO bit (release chip select). */
//	alt_avl_spi_write(ALT_AVL_SPI_CONTROL_REG, 0);

	return 0;
   1b5d0:	0005883a 	mov	r2,zero
}
   1b5d4:	e037883a 	mov	sp,fp
   1b5d8:	dfc00117 	ldw	ra,4(sp)
   1b5dc:	df000017 	ldw	fp,0(sp)
   1b5e0:	dec00204 	addi	sp,sp,8
   1b5e4:	f800283a 	ret

0001b5e8 <spi_write_then_read>:
 * @brief spi_write_then_read
*******************************************************************************/
int spi_write_then_read(struct spi_device *spi,
		const unsigned char *txbuf, unsigned n_tx,
		unsigned char *rxbuf, unsigned n_rx)
{
   1b5e8:	defff704 	addi	sp,sp,-36
   1b5ec:	de00012e 	bgeu	sp,et,1b5f4 <spi_write_then_read+0xc>
   1b5f0:	003b68fa 	trap	3
   1b5f4:	dfc00815 	stw	ra,32(sp)
   1b5f8:	df000715 	stw	fp,28(sp)
   1b5fc:	df000704 	addi	fp,sp,28
   1b600:	e13ffc15 	stw	r4,-16(fp)
   1b604:	e17ffd15 	stw	r5,-12(fp)
   1b608:	e1bffe15 	stw	r6,-8(fp)
   1b60c:	e1ffff15 	stw	r7,-4(fp)

	//int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
	//                           alt_u32 write_length, const alt_u8 * write_data,
	//                           alt_u32 read_length, alt_u8 * read_data,
	//                           alt_u32 flags);
	alt_avalon_spi_command(SPI_BASEADDR, 0, n_tx, txbuf, n_rx, rxbuf, 0); //write
   1b610:	e0800217 	ldw	r2,8(fp)
   1b614:	d8800015 	stw	r2,0(sp)
   1b618:	e0bfff17 	ldw	r2,-4(fp)
   1b61c:	d8800115 	stw	r2,4(sp)
   1b620:	d8000215 	stw	zero,8(sp)
   1b624:	01000174 	movhi	r4,5
   1b628:	21200004 	addi	r4,r4,-32768
   1b62c:	000b883a 	mov	r5,zero
   1b630:	e1bffe17 	ldw	r6,-8(fp)
   1b634:	e1fffd17 	ldw	r7,-12(fp)
   1b638:	0024cf00 	call	24cf0 <alt_avalon_spi_command>
	//alt_avalon_spi_command(SPI_BASEADDR, 0, 0, 0, n_rx, rxbuf, 0); //read
	return SUCCESS;
   1b63c:	0005883a 	mov	r2,zero
}
   1b640:	e037883a 	mov	sp,fp
   1b644:	dfc00117 	ldw	ra,4(sp)
   1b648:	df000017 	ldw	fp,0(sp)
   1b64c:	dec00204 	addi	sp,sp,8
   1b650:	f800283a 	ret

0001b654 <alt_avl_gpio_read>:

/***************************************************************************//**
 * @brief alt_avl_gpio_read
*******************************************************************************/
uint32_t alt_avl_gpio_read(uint32_t reg_addr)
{
   1b654:	defffd04 	addi	sp,sp,-12
   1b658:	de00012e 	bgeu	sp,et,1b660 <alt_avl_gpio_read+0xc>
   1b65c:	003b68fa 	trap	3
   1b660:	df000215 	stw	fp,8(sp)
   1b664:	df000204 	addi	fp,sp,8
   1b668:	e13fff15 	stw	r4,-4(fp)
	uint32_t reg_data;

	//reg_data = alt_read_word(GPIO_BASEADDR + reg_addr);
	IORD_ALTERA_AVALON_PIO_DATA(GPIO_BASEADDR + reg_addr);
   1b66c:	e0ffff17 	ldw	r3,-4(fp)
   1b670:	00800174 	movhi	r2,5
   1b674:	10802804 	addi	r2,r2,160
   1b678:	1885883a 	add	r2,r3,r2
   1b67c:	10800037 	ldwio	r2,0(r2)

	return reg_data;
   1b680:	e0bffe17 	ldw	r2,-8(fp)
}
   1b684:	e037883a 	mov	sp,fp
   1b688:	df000017 	ldw	fp,0(sp)
   1b68c:	dec00104 	addi	sp,sp,4
   1b690:	f800283a 	ret

0001b694 <alt_avl_gpio_write>:

/***************************************************************************//**
 * @brief alt_avl_gpio_write
*******************************************************************************/
void alt_avl_gpio_write(uint32_t reg_addr, uint32_t reg_data)
{
   1b694:	defffd04 	addi	sp,sp,-12
   1b698:	de00012e 	bgeu	sp,et,1b6a0 <alt_avl_gpio_write+0xc>
   1b69c:	003b68fa 	trap	3
   1b6a0:	df000215 	stw	fp,8(sp)
   1b6a4:	df000204 	addi	fp,sp,8
   1b6a8:	e13ffe15 	stw	r4,-8(fp)
   1b6ac:	e17fff15 	stw	r5,-4(fp)
	//alt_write_word(GPIO_BASEADDR + reg_addr, reg_data);
	IOWR_ALTERA_AVALON_PIO_DATA(GPIO_BASEADDR + reg_addr, reg_data);
   1b6b0:	e0fffe17 	ldw	r3,-8(fp)
   1b6b4:	00800174 	movhi	r2,5
   1b6b8:	10802804 	addi	r2,r2,160
   1b6bc:	1885883a 	add	r2,r3,r2
   1b6c0:	1007883a 	mov	r3,r2
   1b6c4:	e0bfff17 	ldw	r2,-4(fp)
   1b6c8:	18800035 	stwio	r2,0(r3)
}
   1b6cc:	e037883a 	mov	sp,fp
   1b6d0:	df000017 	ldw	fp,0(sp)
   1b6d4:	dec00104 	addi	sp,sp,4
   1b6d8:	f800283a 	ret

0001b6dc <gpio_init>:

/***************************************************************************//**
 * @brief gpio_init
*******************************************************************************/
void gpio_init(uint32_t device_id)
{
   1b6dc:	defffe04 	addi	sp,sp,-8
   1b6e0:	de00012e 	bgeu	sp,et,1b6e8 <gpio_init+0xc>
   1b6e4:	003b68fa 	trap	3
   1b6e8:	df000115 	stw	fp,4(sp)
   1b6ec:	df000104 	addi	fp,sp,4
   1b6f0:	e13fff15 	stw	r4,-4(fp)

}
   1b6f4:	e037883a 	mov	sp,fp
   1b6f8:	df000017 	ldw	fp,0(sp)
   1b6fc:	dec00104 	addi	sp,sp,4
   1b700:	f800283a 	ret

0001b704 <gpio_direction>:

/***************************************************************************//**
 * @brief gpio_direction
*******************************************************************************/
void gpio_direction(uint8_t pin, uint8_t direction)
{
   1b704:	defffb04 	addi	sp,sp,-20
   1b708:	de00012e 	bgeu	sp,et,1b710 <gpio_direction+0xc>
   1b70c:	003b68fa 	trap	3
   1b710:	dfc00415 	stw	ra,16(sp)
   1b714:	df000315 	stw	fp,12(sp)
   1b718:	df000304 	addi	fp,sp,12
   1b71c:	2007883a 	mov	r3,r4
   1b720:	2805883a 	mov	r2,r5
   1b724:	e0fffe05 	stb	r3,-8(fp)
   1b728:	e0bfff05 	stb	r2,-4(fp)
	uint32_t reg_val;

	reg_val = alt_avl_gpio_read(ALT_AVL_PIO_DIRECTION_REG);
   1b72c:	01000104 	movi	r4,4
   1b730:	001b6540 	call	1b654 <alt_avl_gpio_read>
   1b734:	e0bffd15 	stw	r2,-12(fp)
	if (direction)
   1b738:	e0bfff03 	ldbu	r2,-4(fp)
   1b73c:	10000826 	beq	r2,zero,1b760 <gpio_direction+0x5c>
		reg_val |= (1 << pin);
   1b740:	e0bffe03 	ldbu	r2,-8(fp)
   1b744:	00c00044 	movi	r3,1
   1b748:	1884983a 	sll	r2,r3,r2
   1b74c:	1007883a 	mov	r3,r2
   1b750:	e0bffd17 	ldw	r2,-12(fp)
   1b754:	10c4b03a 	or	r2,r2,r3
   1b758:	e0bffd15 	stw	r2,-12(fp)
   1b75c:	00000806 	br	1b780 <gpio_direction+0x7c>
	else
		reg_val &= ~(1 << pin);
   1b760:	e0bffe03 	ldbu	r2,-8(fp)
   1b764:	00c00044 	movi	r3,1
   1b768:	1884983a 	sll	r2,r3,r2
   1b76c:	0084303a 	nor	r2,zero,r2
   1b770:	1007883a 	mov	r3,r2
   1b774:	e0bffd17 	ldw	r2,-12(fp)
   1b778:	10c4703a 	and	r2,r2,r3
   1b77c:	e0bffd15 	stw	r2,-12(fp)
	alt_avl_gpio_write(ALT_AVL_PIO_DIRECTION_REG, reg_val);
   1b780:	01000104 	movi	r4,4
   1b784:	e17ffd17 	ldw	r5,-12(fp)
   1b788:	001b6940 	call	1b694 <alt_avl_gpio_write>
}
   1b78c:	e037883a 	mov	sp,fp
   1b790:	dfc00117 	ldw	ra,4(sp)
   1b794:	df000017 	ldw	fp,0(sp)
   1b798:	dec00204 	addi	sp,sp,8
   1b79c:	f800283a 	ret

0001b7a0 <gpio_is_valid>:

/***************************************************************************//**
 * @brief gpio_is_valid
*******************************************************************************/
bool gpio_is_valid(int number)
{
   1b7a0:	defffe04 	addi	sp,sp,-8
   1b7a4:	de00012e 	bgeu	sp,et,1b7ac <gpio_is_valid+0xc>
   1b7a8:	003b68fa 	trap	3
   1b7ac:	df000115 	stw	fp,4(sp)
   1b7b0:	df000104 	addi	fp,sp,4
   1b7b4:	e13fff15 	stw	r4,-4(fp)
	if(number >= 0)
   1b7b8:	e0bfff17 	ldw	r2,-4(fp)
   1b7bc:	10000216 	blt	r2,zero,1b7c8 <gpio_is_valid+0x28>
		return 1;
   1b7c0:	00800044 	movi	r2,1
   1b7c4:	00000106 	br	1b7cc <gpio_is_valid+0x2c>
	else
		return 0;
   1b7c8:	0005883a 	mov	r2,zero
}
   1b7cc:	e037883a 	mov	sp,fp
   1b7d0:	df000017 	ldw	fp,0(sp)
   1b7d4:	dec00104 	addi	sp,sp,4
   1b7d8:	f800283a 	ret

0001b7dc <gpio_data>:

/***************************************************************************//**
 * @brief gpio_data
*******************************************************************************/
void gpio_data(uint8_t pin, uint8_t data)
{
   1b7dc:	defffd04 	addi	sp,sp,-12
   1b7e0:	de00012e 	bgeu	sp,et,1b7e8 <gpio_data+0xc>
   1b7e4:	003b68fa 	trap	3
   1b7e8:	df000215 	stw	fp,8(sp)
   1b7ec:	df000204 	addi	fp,sp,8
   1b7f0:	2007883a 	mov	r3,r4
   1b7f4:	2805883a 	mov	r2,r5
   1b7f8:	e0fffe05 	stb	r3,-8(fp)
   1b7fc:	e0bfff05 	stb	r2,-4(fp)

}
   1b800:	e037883a 	mov	sp,fp
   1b804:	df000017 	ldw	fp,0(sp)
   1b808:	dec00104 	addi	sp,sp,4
   1b80c:	f800283a 	ret

0001b810 <gpio_set_value>:

/***************************************************************************//**
 * @brief gpio_set_value
*******************************************************************************/
void gpio_set_value(unsigned gpio, int value)
{
   1b810:	defffb04 	addi	sp,sp,-20
   1b814:	de00012e 	bgeu	sp,et,1b81c <gpio_set_value+0xc>
   1b818:	003b68fa 	trap	3
   1b81c:	dfc00415 	stw	ra,16(sp)
   1b820:	df000315 	stw	fp,12(sp)
   1b824:	df000304 	addi	fp,sp,12
   1b828:	e13ffe15 	stw	r4,-8(fp)
   1b82c:	e17fff15 	stw	r5,-4(fp)
	uint32_t reg_val;

	reg_val = alt_avl_gpio_read(ALT_AVL_PIO_DATA_REG);
   1b830:	0009883a 	mov	r4,zero
   1b834:	001b6540 	call	1b654 <alt_avl_gpio_read>
   1b838:	e0bffd15 	stw	r2,-12(fp)
	if (value)
   1b83c:	e0bfff17 	ldw	r2,-4(fp)
   1b840:	10000826 	beq	r2,zero,1b864 <gpio_set_value+0x54>
		reg_val |= (1 << gpio);
   1b844:	e0bffe17 	ldw	r2,-8(fp)
   1b848:	00c00044 	movi	r3,1
   1b84c:	1884983a 	sll	r2,r3,r2
   1b850:	1007883a 	mov	r3,r2
   1b854:	e0bffd17 	ldw	r2,-12(fp)
   1b858:	10c4b03a 	or	r2,r2,r3
   1b85c:	e0bffd15 	stw	r2,-12(fp)
   1b860:	00000806 	br	1b884 <gpio_set_value+0x74>
	else
		reg_val &= ~(1 << gpio);
   1b864:	e0bffe17 	ldw	r2,-8(fp)
   1b868:	00c00044 	movi	r3,1
   1b86c:	1884983a 	sll	r2,r3,r2
   1b870:	0084303a 	nor	r2,zero,r2
   1b874:	1007883a 	mov	r3,r2
   1b878:	e0bffd17 	ldw	r2,-12(fp)
   1b87c:	10c4703a 	and	r2,r2,r3
   1b880:	e0bffd15 	stw	r2,-12(fp)
	alt_avl_gpio_write(ALT_AVL_PIO_DATA_REG, reg_val);
   1b884:	0009883a 	mov	r4,zero
   1b888:	e17ffd17 	ldw	r5,-12(fp)
   1b88c:	001b6940 	call	1b694 <alt_avl_gpio_write>
}
   1b890:	e037883a 	mov	sp,fp
   1b894:	dfc00117 	ldw	ra,4(sp)
   1b898:	df000017 	ldw	fp,0(sp)
   1b89c:	dec00204 	addi	sp,sp,8
   1b8a0:	f800283a 	ret

0001b8a4 <udelay>:

/***************************************************************************//**
 * @brief udelay
*******************************************************************************/
void udelay(unsigned long usecs)
{
   1b8a4:	defffd04 	addi	sp,sp,-12
   1b8a8:	de00012e 	bgeu	sp,et,1b8b0 <udelay+0xc>
   1b8ac:	003b68fa 	trap	3
   1b8b0:	dfc00215 	stw	ra,8(sp)
   1b8b4:	df000115 	stw	fp,4(sp)
   1b8b8:	df000104 	addi	fp,sp,4
   1b8bc:	e13fff15 	stw	r4,-4(fp)
	usleep(usecs);
   1b8c0:	e13fff17 	ldw	r4,-4(fp)
   1b8c4:	001b4100 	call	1b410 <usleep>
}
   1b8c8:	e037883a 	mov	sp,fp
   1b8cc:	dfc00117 	ldw	ra,4(sp)
   1b8d0:	df000017 	ldw	fp,0(sp)
   1b8d4:	dec00204 	addi	sp,sp,8
   1b8d8:	f800283a 	ret

0001b8dc <mdelay>:

/***************************************************************************//**
 * @brief mdelay
*******************************************************************************/
void mdelay(unsigned long msecs)
{
   1b8dc:	defffd04 	addi	sp,sp,-12
   1b8e0:	de00012e 	bgeu	sp,et,1b8e8 <mdelay+0xc>
   1b8e4:	003b68fa 	trap	3
   1b8e8:	dfc00215 	stw	ra,8(sp)
   1b8ec:	df000115 	stw	fp,4(sp)
   1b8f0:	df000104 	addi	fp,sp,4
   1b8f4:	e13fff15 	stw	r4,-4(fp)
	usleep(msecs * 1000);
   1b8f8:	e0bfff17 	ldw	r2,-4(fp)
   1b8fc:	1080fa24 	muli	r2,r2,1000
   1b900:	1009883a 	mov	r4,r2
   1b904:	001b4100 	call	1b410 <usleep>
}
   1b908:	e037883a 	mov	sp,fp
   1b90c:	dfc00117 	ldw	ra,4(sp)
   1b910:	df000017 	ldw	fp,0(sp)
   1b914:	dec00204 	addi	sp,sp,8
   1b918:	f800283a 	ret

0001b91c <msleep_interruptible>:

/***************************************************************************//**
 * @brief msleep_interruptible
*******************************************************************************/
unsigned long msleep_interruptible(unsigned int msecs)
{
   1b91c:	defffd04 	addi	sp,sp,-12
   1b920:	de00012e 	bgeu	sp,et,1b928 <msleep_interruptible+0xc>
   1b924:	003b68fa 	trap	3
   1b928:	dfc00215 	stw	ra,8(sp)
   1b92c:	df000115 	stw	fp,4(sp)
   1b930:	df000104 	addi	fp,sp,4
   1b934:	e13fff15 	stw	r4,-4(fp)
	mdelay(msecs);
   1b938:	e13fff17 	ldw	r4,-4(fp)
   1b93c:	001b8dc0 	call	1b8dc <mdelay>

	return 0;
   1b940:	0005883a 	mov	r2,zero
}
   1b944:	e037883a 	mov	sp,fp
   1b948:	dfc00117 	ldw	ra,4(sp)
   1b94c:	df000017 	ldw	fp,0(sp)
   1b950:	dec00204 	addi	sp,sp,8
   1b954:	f800283a 	ret

0001b958 <axiadc_init>:

/***************************************************************************//**
 * @brief axiadc_init
*******************************************************************************/
void axiadc_init(struct ad9361_rf_phy *phy)
{
   1b958:	defffd04 	addi	sp,sp,-12
   1b95c:	de00012e 	bgeu	sp,et,1b964 <axiadc_init+0xc>
   1b960:	003b68fa 	trap	3
   1b964:	dfc00215 	stw	ra,8(sp)
   1b968:	df000115 	stw	fp,4(sp)
   1b96c:	df000104 	addi	fp,sp,4
   1b970:	e13fff15 	stw	r4,-4(fp)
	adc_init();
   1b974:	001a4380 	call	1a438 <adc_init>
	dac_init(phy, DATA_SEL_DDS);
   1b978:	e13fff17 	ldw	r4,-4(fp)
   1b97c:	000b883a 	mov	r5,zero
   1b980:	001a8900 	call	1a890 <dac_init>
}
   1b984:	e037883a 	mov	sp,fp
   1b988:	dfc00117 	ldw	ra,4(sp)
   1b98c:	df000017 	ldw	fp,0(sp)
   1b990:	dec00204 	addi	sp,sp,8
   1b994:	f800283a 	ret

0001b998 <axiadc_post_setup>:

/***************************************************************************//**
 * @brief axiadc_post_setup
*******************************************************************************/
int axiadc_post_setup(struct ad9361_rf_phy *phy)
{
   1b998:	defffd04 	addi	sp,sp,-12
   1b99c:	de00012e 	bgeu	sp,et,1b9a4 <axiadc_post_setup+0xc>
   1b9a0:	003b68fa 	trap	3
   1b9a4:	dfc00215 	stw	ra,8(sp)
   1b9a8:	df000115 	stw	fp,4(sp)
   1b9ac:	df000104 	addi	fp,sp,4
   1b9b0:	e13fff15 	stw	r4,-4(fp)
	return ad9361_post_setup(phy);
   1b9b4:	e13fff17 	ldw	r4,-4(fp)
   1b9b8:	00164580 	call	16458 <ad9361_post_setup>
}
   1b9bc:	e037883a 	mov	sp,fp
   1b9c0:	dfc00117 	ldw	ra,4(sp)
   1b9c4:	df000017 	ldw	fp,0(sp)
   1b9c8:	dec00204 	addi	sp,sp,8
   1b9cc:	f800283a 	ret

0001b9d0 <axiadc_read>:

/***************************************************************************//**
 * @brief axiadc_read
*******************************************************************************/
unsigned int axiadc_read(struct axiadc_state *st, unsigned long reg)
{
   1b9d0:	defffb04 	addi	sp,sp,-20
   1b9d4:	de00012e 	bgeu	sp,et,1b9dc <axiadc_read+0xc>
   1b9d8:	003b68fa 	trap	3
   1b9dc:	dfc00415 	stw	ra,16(sp)
   1b9e0:	df000315 	stw	fp,12(sp)
   1b9e4:	df000304 	addi	fp,sp,12
   1b9e8:	e13ffe15 	stw	r4,-8(fp)
   1b9ec:	e17fff15 	stw	r5,-4(fp)
	uint32_t val;

	adc_read(reg, &val);
   1b9f0:	e13fff17 	ldw	r4,-4(fp)
   1b9f4:	e17ffd04 	addi	r5,fp,-12
   1b9f8:	001a3540 	call	1a354 <adc_read>

	return val;
   1b9fc:	e0bffd17 	ldw	r2,-12(fp)
}
   1ba00:	e037883a 	mov	sp,fp
   1ba04:	dfc00117 	ldw	ra,4(sp)
   1ba08:	df000017 	ldw	fp,0(sp)
   1ba0c:	dec00204 	addi	sp,sp,8
   1ba10:	f800283a 	ret

0001ba14 <axiadc_write>:

/***************************************************************************//**
 * @brief axiadc_write
*******************************************************************************/
void axiadc_write(struct axiadc_state *st, unsigned reg, unsigned val)
{
   1ba14:	defffb04 	addi	sp,sp,-20
   1ba18:	de00012e 	bgeu	sp,et,1ba20 <axiadc_write+0xc>
   1ba1c:	003b68fa 	trap	3
   1ba20:	dfc00415 	stw	ra,16(sp)
   1ba24:	df000315 	stw	fp,12(sp)
   1ba28:	df000304 	addi	fp,sp,12
   1ba2c:	e13ffd15 	stw	r4,-12(fp)
   1ba30:	e17ffe15 	stw	r5,-8(fp)
   1ba34:	e1bfff15 	stw	r6,-4(fp)
	adc_write(reg, val);
   1ba38:	e13ffe17 	ldw	r4,-8(fp)
   1ba3c:	e17fff17 	ldw	r5,-4(fp)
   1ba40:	001a39c0 	call	1a39c <adc_write>
}
   1ba44:	e037883a 	mov	sp,fp
   1ba48:	dfc00117 	ldw	ra,4(sp)
   1ba4c:	df000017 	ldw	fp,0(sp)
   1ba50:	dec00204 	addi	sp,sp,8
   1ba54:	f800283a 	ret

0001ba58 <axiadc_set_pnsel>:

/***************************************************************************//**
 * @brief axiadc_set_pnsel
*******************************************************************************/
int axiadc_set_pnsel(struct axiadc_state *st, int channel, enum adc_pn_sel sel)
{
   1ba58:	defff904 	addi	sp,sp,-28
   1ba5c:	de00012e 	bgeu	sp,et,1ba64 <axiadc_set_pnsel+0xc>
   1ba60:	003b68fa 	trap	3
   1ba64:	dfc00615 	stw	ra,24(sp)
   1ba68:	df000515 	stw	fp,20(sp)
   1ba6c:	df000504 	addi	fp,sp,20
   1ba70:	e13ffd15 	stw	r4,-12(fp)
   1ba74:	e17ffe15 	stw	r5,-8(fp)
   1ba78:	e1bfff15 	stw	r6,-4(fp)
	unsigned reg;

	uint32_t version = axiadc_read(st, 0x4000);
   1ba7c:	e13ffd17 	ldw	r4,-12(fp)
   1ba80:	01500004 	movi	r5,16384
   1ba84:	001b9d00 	call	1b9d0 <axiadc_read>
   1ba88:	e0bffc15 	stw	r2,-16(fp)

	if (PCORE_VERSION_MAJOR(version) > 7) {
   1ba8c:	e0bffc17 	ldw	r2,-16(fp)
   1ba90:	1004d43a 	srli	r2,r2,16
   1ba94:	10800230 	cmpltui	r2,r2,8
   1ba98:	10001a1e 	bne	r2,zero,1bb04 <axiadc_set_pnsel+0xac>
		reg = axiadc_read(st, ADI_REG_CHAN_CNTRL_3(channel));
   1ba9c:	e0bffe17 	ldw	r2,-8(fp)
   1baa0:	100491ba 	slli	r2,r2,6
   1baa4:	10810604 	addi	r2,r2,1048
   1baa8:	e13ffd17 	ldw	r4,-12(fp)
   1baac:	100b883a 	mov	r5,r2
   1bab0:	001b9d00 	call	1b9d0 <axiadc_read>
   1bab4:	e0bffb15 	stw	r2,-20(fp)
		reg &= ~ADI_ADC_PN_SEL(~0);
   1bab8:	e0fffb17 	ldw	r3,-20(fp)
   1babc:	00bffc74 	movhi	r2,65521
   1bac0:	10bfffc4 	addi	r2,r2,-1
   1bac4:	1884703a 	and	r2,r3,r2
   1bac8:	e0bffb15 	stw	r2,-20(fp)
		reg |= ADI_ADC_PN_SEL(sel);
   1bacc:	e0bfff17 	ldw	r2,-4(fp)
   1bad0:	108003cc 	andi	r2,r2,15
   1bad4:	1004943a 	slli	r2,r2,16
   1bad8:	e0fffb17 	ldw	r3,-20(fp)
   1badc:	1884b03a 	or	r2,r3,r2
   1bae0:	e0bffb15 	stw	r2,-20(fp)
		axiadc_write(st, ADI_REG_CHAN_CNTRL_3(channel), reg);
   1bae4:	e0bffe17 	ldw	r2,-8(fp)
   1bae8:	100491ba 	slli	r2,r2,6
   1baec:	10810604 	addi	r2,r2,1048
   1baf0:	e13ffd17 	ldw	r4,-12(fp)
   1baf4:	100b883a 	mov	r5,r2
   1baf8:	e1bffb17 	ldw	r6,-20(fp)
   1bafc:	001ba140 	call	1ba14 <axiadc_write>
   1bb00:	00002706 	br	1bba0 <axiadc_set_pnsel+0x148>
	} else {
		reg = axiadc_read(st, ADI_REG_CHAN_CNTRL(channel));
   1bb04:	e0bffe17 	ldw	r2,-8(fp)
   1bb08:	10800404 	addi	r2,r2,16
   1bb0c:	100491ba 	slli	r2,r2,6
   1bb10:	e13ffd17 	ldw	r4,-12(fp)
   1bb14:	100b883a 	mov	r5,r2
   1bb18:	001b9d00 	call	1b9d0 <axiadc_read>
   1bb1c:	e0bffb15 	stw	r2,-20(fp)

		if (sel == ADC_PN_CUSTOM) {
   1bb20:	e0bfff17 	ldw	r2,-4(fp)
   1bb24:	10800258 	cmpnei	r2,r2,9
   1bb28:	1000041e 	bne	r2,zero,1bb3c <axiadc_set_pnsel+0xe4>
			reg |= ADI_PN_SEL;
   1bb2c:	e0bffb17 	ldw	r2,-20(fp)
   1bb30:	10810014 	ori	r2,r2,1024
   1bb34:	e0bffb15 	stw	r2,-20(fp)
   1bb38:	00001206 	br	1bb84 <axiadc_set_pnsel+0x12c>
		} else if (sel == ADC_PN9) {
   1bb3c:	e0bfff17 	ldw	r2,-4(fp)
   1bb40:	1000091e 	bne	r2,zero,1bb68 <axiadc_set_pnsel+0x110>
			reg &= ~ADI_PN23_TYPE;
   1bb44:	e0fffb17 	ldw	r3,-20(fp)
   1bb48:	00bfff44 	movi	r2,-3
   1bb4c:	1884703a 	and	r2,r3,r2
   1bb50:	e0bffb15 	stw	r2,-20(fp)
			reg &= ~ADI_PN_SEL;
   1bb54:	e0fffb17 	ldw	r3,-20(fp)
   1bb58:	00beffc4 	movi	r2,-1025
   1bb5c:	1884703a 	and	r2,r3,r2
   1bb60:	e0bffb15 	stw	r2,-20(fp)
   1bb64:	00000706 	br	1bb84 <axiadc_set_pnsel+0x12c>
		} else {
			reg |= ADI_PN23_TYPE;
   1bb68:	e0bffb17 	ldw	r2,-20(fp)
   1bb6c:	10800094 	ori	r2,r2,2
   1bb70:	e0bffb15 	stw	r2,-20(fp)
			reg &= ~ADI_PN_SEL;
   1bb74:	e0fffb17 	ldw	r3,-20(fp)
   1bb78:	00beffc4 	movi	r2,-1025
   1bb7c:	1884703a 	and	r2,r3,r2
   1bb80:	e0bffb15 	stw	r2,-20(fp)
		}

		axiadc_write(st, ADI_REG_CHAN_CNTRL(channel), reg);
   1bb84:	e0bffe17 	ldw	r2,-8(fp)
   1bb88:	10800404 	addi	r2,r2,16
   1bb8c:	100491ba 	slli	r2,r2,6
   1bb90:	e13ffd17 	ldw	r4,-12(fp)
   1bb94:	100b883a 	mov	r5,r2
   1bb98:	e1bffb17 	ldw	r6,-20(fp)
   1bb9c:	001ba140 	call	1ba14 <axiadc_write>
	}

	return 0;
   1bba0:	0005883a 	mov	r2,zero
}
   1bba4:	e037883a 	mov	sp,fp
   1bba8:	dfc00117 	ldw	ra,4(sp)
   1bbac:	df000017 	ldw	fp,0(sp)
   1bbb0:	dec00204 	addi	sp,sp,8
   1bbb4:	f800283a 	ret

0001bbb8 <axiadc_idelay_set>:
/***************************************************************************//**
 * @brief axiadc_idelay_set
*******************************************************************************/
void axiadc_idelay_set(struct axiadc_state *st,
				unsigned lane, unsigned val)
{
   1bbb8:	defffb04 	addi	sp,sp,-20
   1bbbc:	de00012e 	bgeu	sp,et,1bbc4 <axiadc_idelay_set+0xc>
   1bbc0:	003b68fa 	trap	3
   1bbc4:	dfc00415 	stw	ra,16(sp)
   1bbc8:	df000315 	stw	fp,12(sp)
   1bbcc:	df000304 	addi	fp,sp,12
   1bbd0:	e13ffd15 	stw	r4,-12(fp)
   1bbd4:	e17ffe15 	stw	r5,-8(fp)
   1bbd8:	e1bfff15 	stw	r6,-4(fp)
	if (PCORE_VERSION_MAJOR(st->pcore_version) > 8) {
   1bbdc:	e0bffd17 	ldw	r2,-12(fp)
   1bbe0:	10800117 	ldw	r2,4(r2)
   1bbe4:	1004d43a 	srli	r2,r2,16
   1bbe8:	10800270 	cmpltui	r2,r2,9
   1bbec:	1000091e 	bne	r2,zero,1bc14 <axiadc_idelay_set+0x5c>
		axiadc_write(st, ADI_REG_DELAY(lane), val);
   1bbf0:	e0bffe17 	ldw	r2,-8(fp)
   1bbf4:	10808004 	addi	r2,r2,512
   1bbf8:	1085883a 	add	r2,r2,r2
   1bbfc:	1085883a 	add	r2,r2,r2
   1bc00:	e13ffd17 	ldw	r4,-12(fp)
   1bc04:	100b883a 	mov	r5,r2
   1bc08:	e1bfff17 	ldw	r6,-4(fp)
   1bc0c:	001ba140 	call	1ba14 <axiadc_write>
   1bc10:	00000f06 	br	1bc50 <axiadc_idelay_set+0x98>
	} else {
		axiadc_write(st, ADI_REG_DELAY_CNTRL, 0);
   1bc14:	e13ffd17 	ldw	r4,-12(fp)
   1bc18:	01401804 	movi	r5,96
   1bc1c:	000d883a 	mov	r6,zero
   1bc20:	001ba140 	call	1ba14 <axiadc_write>
		axiadc_write(st, ADI_REG_DELAY_CNTRL,
				ADI_DELAY_ADDRESS(lane)
   1bc24:	e0bffe17 	ldw	r2,-8(fp)
   1bc28:	1004923a 	slli	r2,r2,8
   1bc2c:	10ffffcc 	andi	r3,r2,65535
				| ADI_DELAY_WDATA(val)
   1bc30:	e0bfff17 	ldw	r2,-4(fp)
   1bc34:	108007cc 	andi	r2,r2,31
   1bc38:	1884b03a 	or	r2,r3,r2
{
	if (PCORE_VERSION_MAJOR(st->pcore_version) > 8) {
		axiadc_write(st, ADI_REG_DELAY(lane), val);
	} else {
		axiadc_write(st, ADI_REG_DELAY_CNTRL, 0);
		axiadc_write(st, ADI_REG_DELAY_CNTRL,
   1bc3c:	108000b4 	orhi	r2,r2,2
   1bc40:	e13ffd17 	ldw	r4,-12(fp)
   1bc44:	01401804 	movi	r5,96
   1bc48:	100d883a 	mov	r6,r2
   1bc4c:	001ba140 	call	1ba14 <axiadc_write>
				ADI_DELAY_ADDRESS(lane)
				| ADI_DELAY_WDATA(val)
				| ADI_DELAY_SEL);
	}
}
   1bc50:	e037883a 	mov	sp,fp
   1bc54:	dfc00117 	ldw	ra,4(sp)
   1bc58:	df000017 	ldw	fp,0(sp)
   1bc5c:	dec00204 	addi	sp,sp,8
   1bc60:	f800283a 	ret

0001bc64 <clk_prepare_enable>:

/***************************************************************************//**
 * @brief clk_prepare_enable
*******************************************************************************/
int32_t clk_prepare_enable(struct clk *clk)
{
   1bc64:	defffe04 	addi	sp,sp,-8
   1bc68:	de00012e 	bgeu	sp,et,1bc70 <clk_prepare_enable+0xc>
   1bc6c:	003b68fa 	trap	3
   1bc70:	df000115 	stw	fp,4(sp)
   1bc74:	df000104 	addi	fp,sp,4
   1bc78:	e13fff15 	stw	r4,-4(fp)
	if (clk) {
		// Unused variable - fix compiler warning
	}

	return 0;
   1bc7c:	0005883a 	mov	r2,zero
}
   1bc80:	e037883a 	mov	sp,fp
   1bc84:	df000017 	ldw	fp,0(sp)
   1bc88:	dec00104 	addi	sp,sp,4
   1bc8c:	f800283a 	ret

0001bc90 <clk_get_rate>:
/***************************************************************************//**
 * @brief clk_get_rate
*******************************************************************************/
uint32_t clk_get_rate(struct ad9361_rf_phy *phy,
					  struct refclk_scale *clk_priv)
{
   1bc90:	defffa04 	addi	sp,sp,-24
   1bc94:	de00012e 	bgeu	sp,et,1bc9c <clk_get_rate+0xc>
   1bc98:	003b68fa 	trap	3
   1bc9c:	dfc00515 	stw	ra,20(sp)
   1bca0:	df000415 	stw	fp,16(sp)
   1bca4:	df000404 	addi	fp,sp,16
   1bca8:	e13ffe15 	stw	r4,-8(fp)
   1bcac:	e17fff15 	stw	r5,-4(fp)
	uint32_t rate = 0;
   1bcb0:	e03ffc15 	stw	zero,-16(fp)
	uint32_t source;

	source = clk_priv->source;
   1bcb4:	e0bfff17 	ldw	r2,-4(fp)
   1bcb8:	10800417 	ldw	r2,16(r2)
   1bcbc:	e0bffd15 	stw	r2,-12(fp)

	switch (source) {
   1bcc0:	e0bffd17 	ldw	r2,-12(fp)
   1bcc4:	10800528 	cmpgeui	r2,r2,20
   1bcc8:	1000541e 	bne	r2,zero,1be1c <clk_get_rate+0x18c>
   1bccc:	e0bffd17 	ldw	r2,-12(fp)
   1bcd0:	100690ba 	slli	r3,r2,2
   1bcd4:	008000b4 	movhi	r2,2
   1bcd8:	10af3a04 	addi	r2,r2,-17176
   1bcdc:	1885883a 	add	r2,r3,r2
   1bce0:	10800017 	ldw	r2,0(r2)
   1bce4:	1000683a 	jmp	r2
   1bce8:	0001bd38 	rdprs	zero,zero,1780
   1bcec:	0001bd38 	rdprs	zero,zero,1780
   1bcf0:	0001bd38 	rdprs	zero,zero,1780
   1bcf4:	0001bdac 	andhi	zero,zero,1782
   1bcf8:	0001bde4 	muli	zero,zero,1783
   1bcfc:	0001bde4 	muli	zero,zero,1783
   1bd00:	0001bde4 	muli	zero,zero,1783
   1bd04:	0001bde4 	muli	zero,zero,1783
   1bd08:	0001bde4 	muli	zero,zero,1783
   1bd0c:	0001bde4 	muli	zero,zero,1783
   1bd10:	0001bde4 	muli	zero,zero,1783
   1bd14:	0001bde4 	muli	zero,zero,1783
   1bd18:	0001bde4 	muli	zero,zero,1783
   1bd1c:	0001bde4 	muli	zero,zero,1783
   1bd20:	0001bd58 	cmpnei	zero,zero,1781
   1bd24:	0001bd58 	cmpnei	zero,zero,1781
   1bd28:	0001bd8c 	andi	zero,zero,1782
   1bd2c:	0001bd8c 	andi	zero,zero,1782
   1bd30:	0001bd9c 	xori	zero,zero,1782
   1bd34:	0001bd9c 	xori	zero,zero,1782
		case TX_REFCLK:
		case RX_REFCLK:
		case BB_REFCLK:
			rate = ad9361_clk_factor_recalc_rate(clk_priv,
						phy->clk_refin->rate);
   1bd38:	e0bffe17 	ldw	r2,-8(fp)
   1bd3c:	10800217 	ldw	r2,8(r2)

	switch (source) {
		case TX_REFCLK:
		case RX_REFCLK:
		case BB_REFCLK:
			rate = ad9361_clk_factor_recalc_rate(clk_priv,
   1bd40:	10800117 	ldw	r2,4(r2)
   1bd44:	e13fff17 	ldw	r4,-4(fp)
   1bd48:	100b883a 	mov	r5,r2
   1bd4c:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   1bd50:	e0bffc15 	stw	r2,-16(fp)
						phy->clk_refin->rate);
			break;
   1bd54:	00003206 	br	1be20 <clk_get_rate+0x190>
		case TX_RFPLL_INT:
		case RX_RFPLL_INT:
			rate = ad9361_rfpll_int_recalc_rate(clk_priv,
						phy->clks[clk_priv->parent_source]->rate);
   1bd58:	e0bfff17 	ldw	r2,-4(fp)
   1bd5c:	10800517 	ldw	r2,20(r2)
   1bd60:	e0fffe17 	ldw	r3,-8(fp)
   1bd64:	108000c4 	addi	r2,r2,3
   1bd68:	1085883a 	add	r2,r2,r2
   1bd6c:	1085883a 	add	r2,r2,r2
   1bd70:	1885883a 	add	r2,r3,r2
   1bd74:	10800017 	ldw	r2,0(r2)
			rate = ad9361_clk_factor_recalc_rate(clk_priv,
						phy->clk_refin->rate);
			break;
		case TX_RFPLL_INT:
		case RX_RFPLL_INT:
			rate = ad9361_rfpll_int_recalc_rate(clk_priv,
   1bd78:	10800117 	ldw	r2,4(r2)
   1bd7c:	e13fff17 	ldw	r4,-4(fp)
   1bd80:	100b883a 	mov	r5,r2
   1bd84:	000f3300 	call	f330 <ad9361_rfpll_int_recalc_rate>
   1bd88:	e0bffc15 	stw	r2,-16(fp)
						phy->clks[clk_priv->parent_source]->rate);
		case RX_RFPLL_DUMMY:
		case TX_RFPLL_DUMMY:
			rate = ad9361_rfpll_dummy_recalc_rate(clk_priv);
   1bd8c:	e13fff17 	ldw	r4,-4(fp)
   1bd90:	000f9f40 	call	f9f4 <ad9361_rfpll_dummy_recalc_rate>
   1bd94:	e0bffc15 	stw	r2,-16(fp)
			break;
   1bd98:	00002106 	br	1be20 <clk_get_rate+0x190>
		case TX_RFPLL:
		case RX_RFPLL:
			rate = ad9361_rfpll_recalc_rate(clk_priv);
   1bd9c:	e13fff17 	ldw	r4,-4(fp)
   1bda0:	000fab00 	call	fab0 <ad9361_rfpll_recalc_rate>
   1bda4:	e0bffc15 	stw	r2,-16(fp)
			break;
   1bda8:	00001d06 	br	1be20 <clk_get_rate+0x190>
		case BBPLL_CLK:
			rate = ad9361_bbpll_recalc_rate(clk_priv,
						phy->clks[clk_priv->parent_source]->rate);
   1bdac:	e0bfff17 	ldw	r2,-4(fp)
   1bdb0:	10800517 	ldw	r2,20(r2)
   1bdb4:	e0fffe17 	ldw	r3,-8(fp)
   1bdb8:	108000c4 	addi	r2,r2,3
   1bdbc:	1085883a 	add	r2,r2,r2
   1bdc0:	1085883a 	add	r2,r2,r2
   1bdc4:	1885883a 	add	r2,r3,r2
   1bdc8:	10800017 	ldw	r2,0(r2)
		case TX_RFPLL:
		case RX_RFPLL:
			rate = ad9361_rfpll_recalc_rate(clk_priv);
			break;
		case BBPLL_CLK:
			rate = ad9361_bbpll_recalc_rate(clk_priv,
   1bdcc:	10800117 	ldw	r2,4(r2)
   1bdd0:	e13fff17 	ldw	r4,-4(fp)
   1bdd4:	100b883a 	mov	r5,r2
   1bdd8:	000e8ac0 	call	e8ac <ad9361_bbpll_recalc_rate>
   1bddc:	e0bffc15 	stw	r2,-16(fp)
						phy->clks[clk_priv->parent_source]->rate);
			break;
   1bde0:	00000f06 	br	1be20 <clk_get_rate+0x190>
		case T2_CLK:
		case T1_CLK:
		case CLKTF_CLK:
		case TX_SAMPL_CLK:
			rate = ad9361_clk_factor_recalc_rate(clk_priv,
						phy->clks[clk_priv->parent_source]->rate);
   1bde4:	e0bfff17 	ldw	r2,-4(fp)
   1bde8:	10800517 	ldw	r2,20(r2)
   1bdec:	e0fffe17 	ldw	r3,-8(fp)
   1bdf0:	108000c4 	addi	r2,r2,3
   1bdf4:	1085883a 	add	r2,r2,r2
   1bdf8:	1085883a 	add	r2,r2,r2
   1bdfc:	1885883a 	add	r2,r3,r2
   1be00:	10800017 	ldw	r2,0(r2)
		case DAC_CLK:
		case T2_CLK:
		case T1_CLK:
		case CLKTF_CLK:
		case TX_SAMPL_CLK:
			rate = ad9361_clk_factor_recalc_rate(clk_priv,
   1be04:	10800117 	ldw	r2,4(r2)
   1be08:	e13fff17 	ldw	r4,-4(fp)
   1be0c:	100b883a 	mov	r5,r2
   1be10:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   1be14:	e0bffc15 	stw	r2,-16(fp)
						phy->clks[clk_priv->parent_source]->rate);
			break;
   1be18:	00000106 	br	1be20 <clk_get_rate+0x190>
		default:
			break;
   1be1c:	0001883a 	nop
	}

	return rate;
   1be20:	e0bffc17 	ldw	r2,-16(fp)
}
   1be24:	e037883a 	mov	sp,fp
   1be28:	dfc00117 	ldw	ra,4(sp)
   1be2c:	df000017 	ldw	fp,0(sp)
   1be30:	dec00204 	addi	sp,sp,8
   1be34:	f800283a 	ret

0001be38 <clk_set_rate>:
 * @brief clk_set_rate
*******************************************************************************/
int32_t clk_set_rate(struct ad9361_rf_phy *phy,
					 struct refclk_scale *clk_priv,
					 uint32_t rate)
{
   1be38:	defff704 	addi	sp,sp,-36
   1be3c:	de00012e 	bgeu	sp,et,1be44 <clk_set_rate+0xc>
   1be40:	003b68fa 	trap	3
   1be44:	dfc00815 	stw	ra,32(sp)
   1be48:	df000715 	stw	fp,28(sp)
   1be4c:	dc000615 	stw	r16,24(sp)
   1be50:	df000704 	addi	fp,sp,28
   1be54:	e13ffc15 	stw	r4,-16(fp)
   1be58:	e17ffd15 	stw	r5,-12(fp)
   1be5c:	e1bffe15 	stw	r6,-8(fp)
	uint32_t source;
	int32_t i;
	uint32_t round_rate;

	source = clk_priv->source;
   1be60:	e0bffd17 	ldw	r2,-12(fp)
   1be64:	10800417 	ldw	r2,16(r2)
   1be68:	e0bffa15 	stw	r2,-24(fp)
	if(phy->clks[source]->rate != rate)
   1be6c:	e0fffc17 	ldw	r3,-16(fp)
   1be70:	e0bffa17 	ldw	r2,-24(fp)
   1be74:	108000c4 	addi	r2,r2,3
   1be78:	1085883a 	add	r2,r2,r2
   1be7c:	1085883a 	add	r2,r2,r2
   1be80:	1885883a 	add	r2,r3,r2
   1be84:	10800017 	ldw	r2,0(r2)
   1be88:	10c00117 	ldw	r3,4(r2)
   1be8c:	e0bffe17 	ldw	r2,-8(fp)
   1be90:	18819626 	beq	r3,r2,1c4ec <clk_set_rate+0x6b4>
	{
		switch (source) {
   1be94:	e0bffa17 	ldw	r2,-24(fp)
   1be98:	10800528 	cmpgeui	r2,r2,20
   1be9c:	1000de1e 	bne	r2,zero,1c218 <clk_set_rate+0x3e0>
   1bea0:	e0bffa17 	ldw	r2,-24(fp)
   1bea4:	100690ba 	slli	r3,r2,2
   1bea8:	008000b4 	movhi	r2,2
   1beac:	10afaf04 	addi	r2,r2,-16708
   1beb0:	1885883a 	add	r2,r3,r2
   1beb4:	10800017 	ldw	r2,0(r2)
   1beb8:	1000683a 	jmp	r2
   1bebc:	0001bf0c 	andi	zero,zero,1788
   1bec0:	0001bf0c 	andi	zero,zero,1788
   1bec4:	0001bf0c 	andi	zero,zero,1788
   1bec8:	0001c098 	cmpnei	zero,zero,1794
   1becc:	0001c158 	cmpnei	zero,zero,1797
   1bed0:	0001c158 	cmpnei	zero,zero,1797
   1bed4:	0001c158 	cmpnei	zero,zero,1797
   1bed8:	0001c158 	cmpnei	zero,zero,1797
   1bedc:	0001c158 	cmpnei	zero,zero,1797
   1bee0:	0001c158 	cmpnei	zero,zero,1797
   1bee4:	0001c158 	cmpnei	zero,zero,1797
   1bee8:	0001c158 	cmpnei	zero,zero,1797
   1beec:	0001c158 	cmpnei	zero,zero,1797
   1bef0:	0001c158 	cmpnei	zero,zero,1797
   1bef4:	0001bf84 	movi	zero,1790
   1bef8:	0001bf84 	movi	zero,1790
   1befc:	0001c044 	movi	zero,1793
   1bf00:	0001c044 	movi	zero,1793
   1bf04:	0001c050 	cmplti	zero,zero,1793
   1bf08:	0001c050 	cmplti	zero,zero,1793
			case TX_REFCLK:
			case RX_REFCLK:
			case BB_REFCLK:
				round_rate = ad9361_clk_factor_round_rate(clk_priv, rate,
								&phy->clk_refin->rate);
   1bf0c:	e0bffc17 	ldw	r2,-16(fp)
   1bf10:	10800217 	ldw	r2,8(r2)
	{
		switch (source) {
			case TX_REFCLK:
			case RX_REFCLK:
			case BB_REFCLK:
				round_rate = ad9361_clk_factor_round_rate(clk_priv, rate,
   1bf14:	10800104 	addi	r2,r2,4
   1bf18:	e13ffd17 	ldw	r4,-12(fp)
   1bf1c:	e17ffe17 	ldw	r5,-8(fp)
   1bf20:	100d883a 	mov	r6,r2
   1bf24:	000e6480 	call	e648 <ad9361_clk_factor_round_rate>
   1bf28:	e0bffb15 	stw	r2,-20(fp)
								&phy->clk_refin->rate);
				ad9361_clk_factor_set_rate(clk_priv, round_rate,
						phy->clk_refin->rate);
   1bf2c:	e0bffc17 	ldw	r2,-16(fp)
   1bf30:	10800217 	ldw	r2,8(r2)
			case TX_REFCLK:
			case RX_REFCLK:
			case BB_REFCLK:
				round_rate = ad9361_clk_factor_round_rate(clk_priv, rate,
								&phy->clk_refin->rate);
				ad9361_clk_factor_set_rate(clk_priv, round_rate,
   1bf34:	10800117 	ldw	r2,4(r2)
   1bf38:	e13ffd17 	ldw	r4,-12(fp)
   1bf3c:	e17ffb17 	ldw	r5,-20(fp)
   1bf40:	100d883a 	mov	r6,r2
   1bf44:	000e7900 	call	e790 <ad9361_clk_factor_set_rate>
						phy->clk_refin->rate);
				phy->clks[source]->rate = ad9361_clk_factor_recalc_rate(clk_priv,
   1bf48:	e0fffc17 	ldw	r3,-16(fp)
   1bf4c:	e0bffa17 	ldw	r2,-24(fp)
   1bf50:	108000c4 	addi	r2,r2,3
   1bf54:	1085883a 	add	r2,r2,r2
   1bf58:	1085883a 	add	r2,r2,r2
   1bf5c:	1885883a 	add	r2,r3,r2
   1bf60:	14000017 	ldw	r16,0(r2)
												phy->clk_refin->rate);
   1bf64:	e0bffc17 	ldw	r2,-16(fp)
   1bf68:	10800217 	ldw	r2,8(r2)
			case BB_REFCLK:
				round_rate = ad9361_clk_factor_round_rate(clk_priv, rate,
								&phy->clk_refin->rate);
				ad9361_clk_factor_set_rate(clk_priv, round_rate,
						phy->clk_refin->rate);
				phy->clks[source]->rate = ad9361_clk_factor_recalc_rate(clk_priv,
   1bf6c:	10800117 	ldw	r2,4(r2)
   1bf70:	e13ffd17 	ldw	r4,-12(fp)
   1bf74:	100b883a 	mov	r5,r2
   1bf78:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   1bf7c:	80800115 	stw	r2,4(r16)
												phy->clk_refin->rate);
				break;
   1bf80:	0000a606 	br	1c21c <clk_set_rate+0x3e4>
			case TX_RFPLL_INT:
			case RX_RFPLL_INT:
				round_rate = ad9361_rfpll_int_round_rate(clk_priv, rate,
								&phy->clks[clk_priv->parent_source]->rate);
   1bf84:	e0bffd17 	ldw	r2,-12(fp)
   1bf88:	10800517 	ldw	r2,20(r2)
   1bf8c:	e0fffc17 	ldw	r3,-16(fp)
   1bf90:	108000c4 	addi	r2,r2,3
   1bf94:	1085883a 	add	r2,r2,r2
   1bf98:	1085883a 	add	r2,r2,r2
   1bf9c:	1885883a 	add	r2,r3,r2
   1bfa0:	10800017 	ldw	r2,0(r2)
				phy->clks[source]->rate = ad9361_clk_factor_recalc_rate(clk_priv,
												phy->clk_refin->rate);
				break;
			case TX_RFPLL_INT:
			case RX_RFPLL_INT:
				round_rate = ad9361_rfpll_int_round_rate(clk_priv, rate,
   1bfa4:	10800104 	addi	r2,r2,4
   1bfa8:	e13ffd17 	ldw	r4,-12(fp)
   1bfac:	e17ffe17 	ldw	r5,-8(fp)
   1bfb0:	100d883a 	mov	r6,r2
   1bfb4:	000f6300 	call	f630 <ad9361_rfpll_int_round_rate>
   1bfb8:	e0bffb15 	stw	r2,-20(fp)
								&phy->clks[clk_priv->parent_source]->rate);
				ad9361_rfpll_int_set_rate(clk_priv, round_rate,
						phy->clks[clk_priv->parent_source]->rate);
   1bfbc:	e0bffd17 	ldw	r2,-12(fp)
   1bfc0:	10800517 	ldw	r2,20(r2)
   1bfc4:	e0fffc17 	ldw	r3,-16(fp)
   1bfc8:	108000c4 	addi	r2,r2,3
   1bfcc:	1085883a 	add	r2,r2,r2
   1bfd0:	1085883a 	add	r2,r2,r2
   1bfd4:	1885883a 	add	r2,r3,r2
   1bfd8:	10800017 	ldw	r2,0(r2)
				break;
			case TX_RFPLL_INT:
			case RX_RFPLL_INT:
				round_rate = ad9361_rfpll_int_round_rate(clk_priv, rate,
								&phy->clks[clk_priv->parent_source]->rate);
				ad9361_rfpll_int_set_rate(clk_priv, round_rate,
   1bfdc:	10800117 	ldw	r2,4(r2)
   1bfe0:	e13ffd17 	ldw	r4,-12(fp)
   1bfe4:	e17ffb17 	ldw	r5,-20(fp)
   1bfe8:	100d883a 	mov	r6,r2
   1bfec:	000f6e80 	call	f6e8 <ad9361_rfpll_int_set_rate>
						phy->clks[clk_priv->parent_source]->rate);
				phy->clks[source]->rate = ad9361_rfpll_int_recalc_rate(clk_priv,
   1bff0:	e0fffc17 	ldw	r3,-16(fp)
   1bff4:	e0bffa17 	ldw	r2,-24(fp)
   1bff8:	108000c4 	addi	r2,r2,3
   1bffc:	1085883a 	add	r2,r2,r2
   1c000:	1085883a 	add	r2,r2,r2
   1c004:	1885883a 	add	r2,r3,r2
   1c008:	14000017 	ldw	r16,0(r2)
											phy->clks[clk_priv->parent_source]->rate);
   1c00c:	e0bffd17 	ldw	r2,-12(fp)
   1c010:	10800517 	ldw	r2,20(r2)
   1c014:	e0fffc17 	ldw	r3,-16(fp)
   1c018:	108000c4 	addi	r2,r2,3
   1c01c:	1085883a 	add	r2,r2,r2
   1c020:	1085883a 	add	r2,r2,r2
   1c024:	1885883a 	add	r2,r3,r2
   1c028:	10800017 	ldw	r2,0(r2)
			case RX_RFPLL_INT:
				round_rate = ad9361_rfpll_int_round_rate(clk_priv, rate,
								&phy->clks[clk_priv->parent_source]->rate);
				ad9361_rfpll_int_set_rate(clk_priv, round_rate,
						phy->clks[clk_priv->parent_source]->rate);
				phy->clks[source]->rate = ad9361_rfpll_int_recalc_rate(clk_priv,
   1c02c:	10800117 	ldw	r2,4(r2)
   1c030:	e13ffd17 	ldw	r4,-12(fp)
   1c034:	100b883a 	mov	r5,r2
   1c038:	000f3300 	call	f330 <ad9361_rfpll_int_recalc_rate>
   1c03c:	80800115 	stw	r2,4(r16)
											phy->clks[clk_priv->parent_source]->rate);
				break;
   1c040:	00007606 	br	1c21c <clk_set_rate+0x3e4>
			case RX_RFPLL_DUMMY:
			case TX_RFPLL_DUMMY:
				ad9361_rfpll_dummy_set_rate(clk_priv, rate);
   1c044:	e13ffd17 	ldw	r4,-12(fp)
   1c048:	e17ffe17 	ldw	r5,-8(fp)
   1c04c:	000fa4c0 	call	fa4c <ad9361_rfpll_dummy_set_rate>
			case TX_RFPLL:
			case RX_RFPLL:
				round_rate = ad9361_rfpll_round_rate(clk_priv, rate);
   1c050:	e13ffd17 	ldw	r4,-12(fp)
   1c054:	e17ffe17 	ldw	r5,-8(fp)
   1c058:	000fc040 	call	fc04 <ad9361_rfpll_round_rate>
   1c05c:	e0bffb15 	stw	r2,-20(fp)
				ad9361_rfpll_set_rate(clk_priv, round_rate);
   1c060:	e13ffd17 	ldw	r4,-12(fp)
   1c064:	e17ffb17 	ldw	r5,-20(fp)
   1c068:	000fd800 	call	fd80 <ad9361_rfpll_set_rate>
				phy->clks[source]->rate = ad9361_rfpll_recalc_rate(clk_priv);
   1c06c:	e0fffc17 	ldw	r3,-16(fp)
   1c070:	e0bffa17 	ldw	r2,-24(fp)
   1c074:	108000c4 	addi	r2,r2,3
   1c078:	1085883a 	add	r2,r2,r2
   1c07c:	1085883a 	add	r2,r2,r2
   1c080:	1885883a 	add	r2,r3,r2
   1c084:	14000017 	ldw	r16,0(r2)
   1c088:	e13ffd17 	ldw	r4,-12(fp)
   1c08c:	000fab00 	call	fab0 <ad9361_rfpll_recalc_rate>
   1c090:	80800115 	stw	r2,4(r16)
				break;
   1c094:	00006106 	br	1c21c <clk_set_rate+0x3e4>
			case BBPLL_CLK:
				round_rate = ad9361_bbpll_round_rate(clk_priv, rate,
								&phy->clks[clk_priv->parent_source]->rate);
   1c098:	e0bffd17 	ldw	r2,-12(fp)
   1c09c:	10800517 	ldw	r2,20(r2)
   1c0a0:	e0fffc17 	ldw	r3,-16(fp)
   1c0a4:	108000c4 	addi	r2,r2,3
   1c0a8:	1085883a 	add	r2,r2,r2
   1c0ac:	1085883a 	add	r2,r2,r2
   1c0b0:	1885883a 	add	r2,r3,r2
   1c0b4:	10800017 	ldw	r2,0(r2)
				round_rate = ad9361_rfpll_round_rate(clk_priv, rate);
				ad9361_rfpll_set_rate(clk_priv, round_rate);
				phy->clks[source]->rate = ad9361_rfpll_recalc_rate(clk_priv);
				break;
			case BBPLL_CLK:
				round_rate = ad9361_bbpll_round_rate(clk_priv, rate,
   1c0b8:	10800104 	addi	r2,r2,4
   1c0bc:	e13ffd17 	ldw	r4,-12(fp)
   1c0c0:	e17ffe17 	ldw	r5,-8(fp)
   1c0c4:	100d883a 	mov	r6,r2
   1c0c8:	000ea440 	call	ea44 <ad9361_bbpll_round_rate>
   1c0cc:	e0bffb15 	stw	r2,-20(fp)
								&phy->clks[clk_priv->parent_source]->rate);
				ad9361_bbpll_set_rate(clk_priv, round_rate,
					phy->clks[clk_priv->parent_source]->rate);
   1c0d0:	e0bffd17 	ldw	r2,-12(fp)
   1c0d4:	10800517 	ldw	r2,20(r2)
   1c0d8:	e0fffc17 	ldw	r3,-16(fp)
   1c0dc:	108000c4 	addi	r2,r2,3
   1c0e0:	1085883a 	add	r2,r2,r2
   1c0e4:	1085883a 	add	r2,r2,r2
   1c0e8:	1885883a 	add	r2,r3,r2
   1c0ec:	10800017 	ldw	r2,0(r2)
				phy->clks[source]->rate = ad9361_rfpll_recalc_rate(clk_priv);
				break;
			case BBPLL_CLK:
				round_rate = ad9361_bbpll_round_rate(clk_priv, rate,
								&phy->clks[clk_priv->parent_source]->rate);
				ad9361_bbpll_set_rate(clk_priv, round_rate,
   1c0f0:	10800117 	ldw	r2,4(r2)
   1c0f4:	e13ffd17 	ldw	r4,-12(fp)
   1c0f8:	e17ffb17 	ldw	r5,-20(fp)
   1c0fc:	100d883a 	mov	r6,r2
   1c100:	000ec9c0 	call	ec9c <ad9361_bbpll_set_rate>
					phy->clks[clk_priv->parent_source]->rate);
				phy->clks[source]->rate = ad9361_bbpll_recalc_rate(clk_priv,
   1c104:	e0fffc17 	ldw	r3,-16(fp)
   1c108:	e0bffa17 	ldw	r2,-24(fp)
   1c10c:	108000c4 	addi	r2,r2,3
   1c110:	1085883a 	add	r2,r2,r2
   1c114:	1085883a 	add	r2,r2,r2
   1c118:	1885883a 	add	r2,r3,r2
   1c11c:	14000017 	ldw	r16,0(r2)
											phy->clks[clk_priv->parent_source]->rate);
   1c120:	e0bffd17 	ldw	r2,-12(fp)
   1c124:	10800517 	ldw	r2,20(r2)
   1c128:	e0fffc17 	ldw	r3,-16(fp)
   1c12c:	108000c4 	addi	r2,r2,3
   1c130:	1085883a 	add	r2,r2,r2
   1c134:	1085883a 	add	r2,r2,r2
   1c138:	1885883a 	add	r2,r3,r2
   1c13c:	10800017 	ldw	r2,0(r2)
			case BBPLL_CLK:
				round_rate = ad9361_bbpll_round_rate(clk_priv, rate,
								&phy->clks[clk_priv->parent_source]->rate);
				ad9361_bbpll_set_rate(clk_priv, round_rate,
					phy->clks[clk_priv->parent_source]->rate);
				phy->clks[source]->rate = ad9361_bbpll_recalc_rate(clk_priv,
   1c140:	10800117 	ldw	r2,4(r2)
   1c144:	e13ffd17 	ldw	r4,-12(fp)
   1c148:	100b883a 	mov	r5,r2
   1c14c:	000e8ac0 	call	e8ac <ad9361_bbpll_recalc_rate>
   1c150:	80800115 	stw	r2,4(r16)
											phy->clks[clk_priv->parent_source]->rate);
				break;
   1c154:	00003106 	br	1c21c <clk_set_rate+0x3e4>
			case T2_CLK:
			case T1_CLK:
			case CLKTF_CLK:
			case TX_SAMPL_CLK:
				round_rate = ad9361_clk_factor_round_rate(clk_priv, rate,
								&phy->clks[clk_priv->parent_source]->rate);
   1c158:	e0bffd17 	ldw	r2,-12(fp)
   1c15c:	10800517 	ldw	r2,20(r2)
   1c160:	e0fffc17 	ldw	r3,-16(fp)
   1c164:	108000c4 	addi	r2,r2,3
   1c168:	1085883a 	add	r2,r2,r2
   1c16c:	1085883a 	add	r2,r2,r2
   1c170:	1885883a 	add	r2,r3,r2
   1c174:	10800017 	ldw	r2,0(r2)
			case DAC_CLK:
			case T2_CLK:
			case T1_CLK:
			case CLKTF_CLK:
			case TX_SAMPL_CLK:
				round_rate = ad9361_clk_factor_round_rate(clk_priv, rate,
   1c178:	10800104 	addi	r2,r2,4
   1c17c:	e13ffd17 	ldw	r4,-12(fp)
   1c180:	e17ffe17 	ldw	r5,-8(fp)
   1c184:	100d883a 	mov	r6,r2
   1c188:	000e6480 	call	e648 <ad9361_clk_factor_round_rate>
   1c18c:	e0bffb15 	stw	r2,-20(fp)
								&phy->clks[clk_priv->parent_source]->rate);
				ad9361_clk_factor_set_rate(clk_priv, round_rate,
						phy->clks[clk_priv->parent_source]->rate);
   1c190:	e0bffd17 	ldw	r2,-12(fp)
   1c194:	10800517 	ldw	r2,20(r2)
   1c198:	e0fffc17 	ldw	r3,-16(fp)
   1c19c:	108000c4 	addi	r2,r2,3
   1c1a0:	1085883a 	add	r2,r2,r2
   1c1a4:	1085883a 	add	r2,r2,r2
   1c1a8:	1885883a 	add	r2,r3,r2
   1c1ac:	10800017 	ldw	r2,0(r2)
			case T1_CLK:
			case CLKTF_CLK:
			case TX_SAMPL_CLK:
				round_rate = ad9361_clk_factor_round_rate(clk_priv, rate,
								&phy->clks[clk_priv->parent_source]->rate);
				ad9361_clk_factor_set_rate(clk_priv, round_rate,
   1c1b0:	10800117 	ldw	r2,4(r2)
   1c1b4:	e13ffd17 	ldw	r4,-12(fp)
   1c1b8:	e17ffb17 	ldw	r5,-20(fp)
   1c1bc:	100d883a 	mov	r6,r2
   1c1c0:	000e7900 	call	e790 <ad9361_clk_factor_set_rate>
						phy->clks[clk_priv->parent_source]->rate);
				phy->clks[source]->rate = ad9361_clk_factor_recalc_rate(clk_priv,
   1c1c4:	e0fffc17 	ldw	r3,-16(fp)
   1c1c8:	e0bffa17 	ldw	r2,-24(fp)
   1c1cc:	108000c4 	addi	r2,r2,3
   1c1d0:	1085883a 	add	r2,r2,r2
   1c1d4:	1085883a 	add	r2,r2,r2
   1c1d8:	1885883a 	add	r2,r3,r2
   1c1dc:	14000017 	ldw	r16,0(r2)
											phy->clks[clk_priv->parent_source]->rate);
   1c1e0:	e0bffd17 	ldw	r2,-12(fp)
   1c1e4:	10800517 	ldw	r2,20(r2)
   1c1e8:	e0fffc17 	ldw	r3,-16(fp)
   1c1ec:	108000c4 	addi	r2,r2,3
   1c1f0:	1085883a 	add	r2,r2,r2
   1c1f4:	1085883a 	add	r2,r2,r2
   1c1f8:	1885883a 	add	r2,r3,r2
   1c1fc:	10800017 	ldw	r2,0(r2)
			case TX_SAMPL_CLK:
				round_rate = ad9361_clk_factor_round_rate(clk_priv, rate,
								&phy->clks[clk_priv->parent_source]->rate);
				ad9361_clk_factor_set_rate(clk_priv, round_rate,
						phy->clks[clk_priv->parent_source]->rate);
				phy->clks[source]->rate = ad9361_clk_factor_recalc_rate(clk_priv,
   1c200:	10800117 	ldw	r2,4(r2)
   1c204:	e13ffd17 	ldw	r4,-12(fp)
   1c208:	100b883a 	mov	r5,r2
   1c20c:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   1c210:	80800115 	stw	r2,4(r16)
											phy->clks[clk_priv->parent_source]->rate);
				break;
   1c214:	00000106 	br	1c21c <clk_set_rate+0x3e4>
			default:
				break;
   1c218:	0001883a 	nop
		}
		for(i = BB_REFCLK; i < BBPLL_CLK; i++)
   1c21c:	e03ff915 	stw	zero,-28(fp)
   1c220:	00001806 	br	1c284 <clk_set_rate+0x44c>
		{
			phy->clks[i]->rate = ad9361_clk_factor_recalc_rate(phy->ref_clk_scale[i],
   1c224:	e0fffc17 	ldw	r3,-16(fp)
   1c228:	e0bff917 	ldw	r2,-28(fp)
   1c22c:	108000c4 	addi	r2,r2,3
   1c230:	1085883a 	add	r2,r2,r2
   1c234:	1085883a 	add	r2,r2,r2
   1c238:	1885883a 	add	r2,r3,r2
   1c23c:	14000017 	ldw	r16,0(r2)
   1c240:	e0fffc17 	ldw	r3,-16(fp)
   1c244:	e0bff917 	ldw	r2,-28(fp)
   1c248:	108005c4 	addi	r2,r2,23
   1c24c:	1085883a 	add	r2,r2,r2
   1c250:	1085883a 	add	r2,r2,r2
   1c254:	1885883a 	add	r2,r3,r2
   1c258:	10c00017 	ldw	r3,0(r2)
									phy->clk_refin->rate);
   1c25c:	e0bffc17 	ldw	r2,-16(fp)
   1c260:	10800217 	ldw	r2,8(r2)
			default:
				break;
		}
		for(i = BB_REFCLK; i < BBPLL_CLK; i++)
		{
			phy->clks[i]->rate = ad9361_clk_factor_recalc_rate(phy->ref_clk_scale[i],
   1c264:	10800117 	ldw	r2,4(r2)
   1c268:	1809883a 	mov	r4,r3
   1c26c:	100b883a 	mov	r5,r2
   1c270:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   1c274:	80800115 	stw	r2,4(r16)
											phy->clks[clk_priv->parent_source]->rate);
				break;
			default:
				break;
		}
		for(i = BB_REFCLK; i < BBPLL_CLK; i++)
   1c278:	e0bff917 	ldw	r2,-28(fp)
   1c27c:	10800044 	addi	r2,r2,1
   1c280:	e0bff915 	stw	r2,-28(fp)
   1c284:	e0bff917 	ldw	r2,-28(fp)
   1c288:	108000d0 	cmplti	r2,r2,3
   1c28c:	103fe51e 	bne	r2,zero,1c224 <_gp+0xfffea104>
		{
			phy->clks[i]->rate = ad9361_clk_factor_recalc_rate(phy->ref_clk_scale[i],
									phy->clk_refin->rate);
		}
		phy->clks[BBPLL_CLK]->rate = ad9361_bbpll_recalc_rate(phy->ref_clk_scale[BBPLL_CLK],
   1c290:	e0bffc17 	ldw	r2,-16(fp)
   1c294:	14000617 	ldw	r16,24(r2)
   1c298:	e0bffc17 	ldw	r2,-16(fp)
   1c29c:	11001a17 	ldw	r4,104(r2)
										phy->clks[phy->ref_clk_scale[BBPLL_CLK]->parent_source]->rate);
   1c2a0:	e0bffc17 	ldw	r2,-16(fp)
   1c2a4:	10801a17 	ldw	r2,104(r2)
   1c2a8:	10800517 	ldw	r2,20(r2)
   1c2ac:	e0fffc17 	ldw	r3,-16(fp)
   1c2b0:	108000c4 	addi	r2,r2,3
   1c2b4:	1085883a 	add	r2,r2,r2
   1c2b8:	1085883a 	add	r2,r2,r2
   1c2bc:	1885883a 	add	r2,r3,r2
   1c2c0:	10800017 	ldw	r2,0(r2)
		for(i = BB_REFCLK; i < BBPLL_CLK; i++)
		{
			phy->clks[i]->rate = ad9361_clk_factor_recalc_rate(phy->ref_clk_scale[i],
									phy->clk_refin->rate);
		}
		phy->clks[BBPLL_CLK]->rate = ad9361_bbpll_recalc_rate(phy->ref_clk_scale[BBPLL_CLK],
   1c2c4:	10800117 	ldw	r2,4(r2)
   1c2c8:	100b883a 	mov	r5,r2
   1c2cc:	000e8ac0 	call	e8ac <ad9361_bbpll_recalc_rate>
   1c2d0:	80800115 	stw	r2,4(r16)
										phy->clks[phy->ref_clk_scale[BBPLL_CLK]->parent_source]->rate);
		for(i = ADC_CLK; i < RX_RFPLL_INT; i++)
   1c2d4:	00800104 	movi	r2,4
   1c2d8:	e0bff915 	stw	r2,-28(fp)
   1c2dc:	00002306 	br	1c36c <clk_set_rate+0x534>
		{
			phy->clks[i]->rate = ad9361_clk_factor_recalc_rate(phy->ref_clk_scale[i],
   1c2e0:	e0fffc17 	ldw	r3,-16(fp)
   1c2e4:	e0bff917 	ldw	r2,-28(fp)
   1c2e8:	108000c4 	addi	r2,r2,3
   1c2ec:	1085883a 	add	r2,r2,r2
   1c2f0:	1085883a 	add	r2,r2,r2
   1c2f4:	1885883a 	add	r2,r3,r2
   1c2f8:	14000017 	ldw	r16,0(r2)
   1c2fc:	e0fffc17 	ldw	r3,-16(fp)
   1c300:	e0bff917 	ldw	r2,-28(fp)
   1c304:	108005c4 	addi	r2,r2,23
   1c308:	1085883a 	add	r2,r2,r2
   1c30c:	1085883a 	add	r2,r2,r2
   1c310:	1885883a 	add	r2,r3,r2
   1c314:	11000017 	ldw	r4,0(r2)
									phy->clks[phy->ref_clk_scale[i]->parent_source]->rate);
   1c318:	e0fffc17 	ldw	r3,-16(fp)
   1c31c:	e0bff917 	ldw	r2,-28(fp)
   1c320:	108005c4 	addi	r2,r2,23
   1c324:	1085883a 	add	r2,r2,r2
   1c328:	1085883a 	add	r2,r2,r2
   1c32c:	1885883a 	add	r2,r3,r2
   1c330:	10800017 	ldw	r2,0(r2)
   1c334:	10800517 	ldw	r2,20(r2)
   1c338:	e0fffc17 	ldw	r3,-16(fp)
   1c33c:	108000c4 	addi	r2,r2,3
   1c340:	1085883a 	add	r2,r2,r2
   1c344:	1085883a 	add	r2,r2,r2
   1c348:	1885883a 	add	r2,r3,r2
   1c34c:	10800017 	ldw	r2,0(r2)
		}
		phy->clks[BBPLL_CLK]->rate = ad9361_bbpll_recalc_rate(phy->ref_clk_scale[BBPLL_CLK],
										phy->clks[phy->ref_clk_scale[BBPLL_CLK]->parent_source]->rate);
		for(i = ADC_CLK; i < RX_RFPLL_INT; i++)
		{
			phy->clks[i]->rate = ad9361_clk_factor_recalc_rate(phy->ref_clk_scale[i],
   1c350:	10800117 	ldw	r2,4(r2)
   1c354:	100b883a 	mov	r5,r2
   1c358:	000e5dc0 	call	e5dc <ad9361_clk_factor_recalc_rate>
   1c35c:	80800115 	stw	r2,4(r16)
			phy->clks[i]->rate = ad9361_clk_factor_recalc_rate(phy->ref_clk_scale[i],
									phy->clk_refin->rate);
		}
		phy->clks[BBPLL_CLK]->rate = ad9361_bbpll_recalc_rate(phy->ref_clk_scale[BBPLL_CLK],
										phy->clks[phy->ref_clk_scale[BBPLL_CLK]->parent_source]->rate);
		for(i = ADC_CLK; i < RX_RFPLL_INT; i++)
   1c360:	e0bff917 	ldw	r2,-28(fp)
   1c364:	10800044 	addi	r2,r2,1
   1c368:	e0bff915 	stw	r2,-28(fp)
   1c36c:	e0bff917 	ldw	r2,-28(fp)
   1c370:	10800390 	cmplti	r2,r2,14
   1c374:	103fda1e 	bne	r2,zero,1c2e0 <_gp+0xfffea1c0>
		{
			phy->clks[i]->rate = ad9361_clk_factor_recalc_rate(phy->ref_clk_scale[i],
									phy->clks[phy->ref_clk_scale[i]->parent_source]->rate);
		}
		for(i = RX_RFPLL_INT; i < RX_RFPLL_DUMMY; i++)
   1c378:	00800384 	movi	r2,14
   1c37c:	e0bff915 	stw	r2,-28(fp)
   1c380:	00002306 	br	1c410 <clk_set_rate+0x5d8>
		{
			phy->clks[i]->rate = ad9361_rfpll_int_recalc_rate(phy->ref_clk_scale[i],
   1c384:	e0fffc17 	ldw	r3,-16(fp)
   1c388:	e0bff917 	ldw	r2,-28(fp)
   1c38c:	108000c4 	addi	r2,r2,3
   1c390:	1085883a 	add	r2,r2,r2
   1c394:	1085883a 	add	r2,r2,r2
   1c398:	1885883a 	add	r2,r3,r2
   1c39c:	14000017 	ldw	r16,0(r2)
   1c3a0:	e0fffc17 	ldw	r3,-16(fp)
   1c3a4:	e0bff917 	ldw	r2,-28(fp)
   1c3a8:	108005c4 	addi	r2,r2,23
   1c3ac:	1085883a 	add	r2,r2,r2
   1c3b0:	1085883a 	add	r2,r2,r2
   1c3b4:	1885883a 	add	r2,r3,r2
   1c3b8:	11000017 	ldw	r4,0(r2)
									phy->clks[phy->ref_clk_scale[i]->parent_source]->rate);
   1c3bc:	e0fffc17 	ldw	r3,-16(fp)
   1c3c0:	e0bff917 	ldw	r2,-28(fp)
   1c3c4:	108005c4 	addi	r2,r2,23
   1c3c8:	1085883a 	add	r2,r2,r2
   1c3cc:	1085883a 	add	r2,r2,r2
   1c3d0:	1885883a 	add	r2,r3,r2
   1c3d4:	10800017 	ldw	r2,0(r2)
   1c3d8:	10800517 	ldw	r2,20(r2)
   1c3dc:	e0fffc17 	ldw	r3,-16(fp)
   1c3e0:	108000c4 	addi	r2,r2,3
   1c3e4:	1085883a 	add	r2,r2,r2
   1c3e8:	1085883a 	add	r2,r2,r2
   1c3ec:	1885883a 	add	r2,r3,r2
   1c3f0:	10800017 	ldw	r2,0(r2)
			phy->clks[i]->rate = ad9361_clk_factor_recalc_rate(phy->ref_clk_scale[i],
									phy->clks[phy->ref_clk_scale[i]->parent_source]->rate);
		}
		for(i = RX_RFPLL_INT; i < RX_RFPLL_DUMMY; i++)
		{
			phy->clks[i]->rate = ad9361_rfpll_int_recalc_rate(phy->ref_clk_scale[i],
   1c3f4:	10800117 	ldw	r2,4(r2)
   1c3f8:	100b883a 	mov	r5,r2
   1c3fc:	000f3300 	call	f330 <ad9361_rfpll_int_recalc_rate>
   1c400:	80800115 	stw	r2,4(r16)
		for(i = ADC_CLK; i < RX_RFPLL_INT; i++)
		{
			phy->clks[i]->rate = ad9361_clk_factor_recalc_rate(phy->ref_clk_scale[i],
									phy->clks[phy->ref_clk_scale[i]->parent_source]->rate);
		}
		for(i = RX_RFPLL_INT; i < RX_RFPLL_DUMMY; i++)
   1c404:	e0bff917 	ldw	r2,-28(fp)
   1c408:	10800044 	addi	r2,r2,1
   1c40c:	e0bff915 	stw	r2,-28(fp)
   1c410:	e0bff917 	ldw	r2,-28(fp)
   1c414:	10800410 	cmplti	r2,r2,16
   1c418:	103fda1e 	bne	r2,zero,1c384 <_gp+0xfffea264>
		{
			phy->clks[i]->rate = ad9361_rfpll_int_recalc_rate(phy->ref_clk_scale[i],
									phy->clks[phy->ref_clk_scale[i]->parent_source]->rate);
		}
		for(i = RX_RFPLL_DUMMY; i < RX_RFPLL; i++)
   1c41c:	00800404 	movi	r2,16
   1c420:	e0bff915 	stw	r2,-28(fp)
   1c424:	00001406 	br	1c478 <clk_set_rate+0x640>
		{
			phy->clks[i]->rate = ad9361_rfpll_dummy_recalc_rate(phy->ref_clk_scale[i]);
   1c428:	e0fffc17 	ldw	r3,-16(fp)
   1c42c:	e0bff917 	ldw	r2,-28(fp)
   1c430:	108000c4 	addi	r2,r2,3
   1c434:	1085883a 	add	r2,r2,r2
   1c438:	1085883a 	add	r2,r2,r2
   1c43c:	1885883a 	add	r2,r3,r2
   1c440:	14000017 	ldw	r16,0(r2)
   1c444:	e0fffc17 	ldw	r3,-16(fp)
   1c448:	e0bff917 	ldw	r2,-28(fp)
   1c44c:	108005c4 	addi	r2,r2,23
   1c450:	1085883a 	add	r2,r2,r2
   1c454:	1085883a 	add	r2,r2,r2
   1c458:	1885883a 	add	r2,r3,r2
   1c45c:	10800017 	ldw	r2,0(r2)
   1c460:	1009883a 	mov	r4,r2
   1c464:	000f9f40 	call	f9f4 <ad9361_rfpll_dummy_recalc_rate>
   1c468:	80800115 	stw	r2,4(r16)
		for(i = RX_RFPLL_INT; i < RX_RFPLL_DUMMY; i++)
		{
			phy->clks[i]->rate = ad9361_rfpll_int_recalc_rate(phy->ref_clk_scale[i],
									phy->clks[phy->ref_clk_scale[i]->parent_source]->rate);
		}
		for(i = RX_RFPLL_DUMMY; i < RX_RFPLL; i++)
   1c46c:	e0bff917 	ldw	r2,-28(fp)
   1c470:	10800044 	addi	r2,r2,1
   1c474:	e0bff915 	stw	r2,-28(fp)
   1c478:	e0bff917 	ldw	r2,-28(fp)
   1c47c:	10800490 	cmplti	r2,r2,18
   1c480:	103fe91e 	bne	r2,zero,1c428 <_gp+0xfffea308>
		{
			phy->clks[i]->rate = ad9361_rfpll_dummy_recalc_rate(phy->ref_clk_scale[i]);
		}
		for(i = RX_RFPLL; i < NUM_AD9361_CLKS; i++)
   1c484:	00800484 	movi	r2,18
   1c488:	e0bff915 	stw	r2,-28(fp)
   1c48c:	00001406 	br	1c4e0 <clk_set_rate+0x6a8>
		{
			phy->clks[i]->rate = ad9361_rfpll_recalc_rate(phy->ref_clk_scale[i]);
   1c490:	e0fffc17 	ldw	r3,-16(fp)
   1c494:	e0bff917 	ldw	r2,-28(fp)
   1c498:	108000c4 	addi	r2,r2,3
   1c49c:	1085883a 	add	r2,r2,r2
   1c4a0:	1085883a 	add	r2,r2,r2
   1c4a4:	1885883a 	add	r2,r3,r2
   1c4a8:	14000017 	ldw	r16,0(r2)
   1c4ac:	e0fffc17 	ldw	r3,-16(fp)
   1c4b0:	e0bff917 	ldw	r2,-28(fp)
   1c4b4:	108005c4 	addi	r2,r2,23
   1c4b8:	1085883a 	add	r2,r2,r2
   1c4bc:	1085883a 	add	r2,r2,r2
   1c4c0:	1885883a 	add	r2,r3,r2
   1c4c4:	10800017 	ldw	r2,0(r2)
   1c4c8:	1009883a 	mov	r4,r2
   1c4cc:	000fab00 	call	fab0 <ad9361_rfpll_recalc_rate>
   1c4d0:	80800115 	stw	r2,4(r16)
		}
		for(i = RX_RFPLL_DUMMY; i < RX_RFPLL; i++)
		{
			phy->clks[i]->rate = ad9361_rfpll_dummy_recalc_rate(phy->ref_clk_scale[i]);
		}
		for(i = RX_RFPLL; i < NUM_AD9361_CLKS; i++)
   1c4d4:	e0bff917 	ldw	r2,-28(fp)
   1c4d8:	10800044 	addi	r2,r2,1
   1c4dc:	e0bff915 	stw	r2,-28(fp)
   1c4e0:	e0bff917 	ldw	r2,-28(fp)
   1c4e4:	10800510 	cmplti	r2,r2,20
   1c4e8:	103fe91e 	bne	r2,zero,1c490 <_gp+0xfffea370>
		{
			phy->clks[i]->rate = ad9361_rfpll_recalc_rate(phy->ref_clk_scale[i]);
		}
	}

	return 0;
   1c4ec:	0005883a 	mov	r2,zero
}
   1c4f0:	e6ffff04 	addi	sp,fp,-4
   1c4f4:	dfc00217 	ldw	ra,8(sp)
   1c4f8:	df000117 	ldw	fp,4(sp)
   1c4fc:	dc000017 	ldw	r16,0(sp)
   1c500:	dec00304 	addi	sp,sp,12
   1c504:	f800283a 	ret

0001c508 <int_sqrt>:

/***************************************************************************//**
 * @brief int_sqrt
*******************************************************************************/
uint32_t int_sqrt(uint32_t x)
{
   1c508:	defffb04 	addi	sp,sp,-20
   1c50c:	de00012e 	bgeu	sp,et,1c514 <int_sqrt+0xc>
   1c510:	003b68fa 	trap	3
   1c514:	df000415 	stw	fp,16(sp)
   1c518:	df000404 	addi	fp,sp,16
   1c51c:	e13fff15 	stw	r4,-4(fp)
	uint32_t b, m, y = 0;
   1c520:	e03ffd15 	stw	zero,-12(fp)

	if (x <= 1)
   1c524:	e0bfff17 	ldw	r2,-4(fp)
   1c528:	108000a8 	cmpgeui	r2,r2,2
   1c52c:	1000021e 	bne	r2,zero,1c538 <int_sqrt+0x30>
		return x;
   1c530:	e0bfff17 	ldw	r2,-4(fp)
   1c534:	00001b06 	br	1c5a4 <int_sqrt+0x9c>

	m = 1UL << (BITS_PER_LONG - 2);
   1c538:	00900034 	movhi	r2,16384
   1c53c:	e0bffc15 	stw	r2,-16(fp)
	while (m != 0) {
   1c540:	00001506 	br	1c598 <int_sqrt+0x90>
		b = y + m;
   1c544:	e0fffd17 	ldw	r3,-12(fp)
   1c548:	e0bffc17 	ldw	r2,-16(fp)
   1c54c:	1885883a 	add	r2,r3,r2
   1c550:	e0bffe15 	stw	r2,-8(fp)
		y >>= 1;
   1c554:	e0bffd17 	ldw	r2,-12(fp)
   1c558:	1004d07a 	srli	r2,r2,1
   1c55c:	e0bffd15 	stw	r2,-12(fp)

		if (x >= b) {
   1c560:	e0ffff17 	ldw	r3,-4(fp)
   1c564:	e0bffe17 	ldw	r2,-8(fp)
   1c568:	18800836 	bltu	r3,r2,1c58c <int_sqrt+0x84>
			x -= b;
   1c56c:	e0ffff17 	ldw	r3,-4(fp)
   1c570:	e0bffe17 	ldw	r2,-8(fp)
   1c574:	1885c83a 	sub	r2,r3,r2
   1c578:	e0bfff15 	stw	r2,-4(fp)
			y += m;
   1c57c:	e0fffd17 	ldw	r3,-12(fp)
   1c580:	e0bffc17 	ldw	r2,-16(fp)
   1c584:	1885883a 	add	r2,r3,r2
   1c588:	e0bffd15 	stw	r2,-12(fp)
		}
		m >>= 2;
   1c58c:	e0bffc17 	ldw	r2,-16(fp)
   1c590:	1004d0ba 	srli	r2,r2,2
   1c594:	e0bffc15 	stw	r2,-16(fp)

	if (x <= 1)
		return x;

	m = 1UL << (BITS_PER_LONG - 2);
	while (m != 0) {
   1c598:	e0bffc17 	ldw	r2,-16(fp)
   1c59c:	103fe91e 	bne	r2,zero,1c544 <_gp+0xfffea424>
			y += m;
		}
		m >>= 2;
	}

	return y;
   1c5a0:	e0bffd17 	ldw	r2,-12(fp)
}
   1c5a4:	e037883a 	mov	sp,fp
   1c5a8:	df000017 	ldw	fp,0(sp)
   1c5ac:	dec00104 	addi	sp,sp,4
   1c5b0:	f800283a 	ret

0001c5b4 <ilog2>:

/***************************************************************************//**
 * @brief ilog2
*******************************************************************************/
int32_t ilog2(int32_t x)
{
   1c5b4:	defffb04 	addi	sp,sp,-20
   1c5b8:	de00012e 	bgeu	sp,et,1c5c0 <ilog2+0xc>
   1c5bc:	003b68fa 	trap	3
   1c5c0:	df000415 	stw	fp,16(sp)
   1c5c4:	df000404 	addi	fp,sp,16
   1c5c8:	e13fff15 	stw	r4,-4(fp)
	int32_t A = !(!(x >> 16));
   1c5cc:	e0bfff17 	ldw	r2,-4(fp)
   1c5d0:	1005d43a 	srai	r2,r2,16
   1c5d4:	1004c03a 	cmpne	r2,r2,zero
   1c5d8:	10803fcc 	andi	r2,r2,255
   1c5dc:	e0bffc15 	stw	r2,-16(fp)
	int32_t count = 0;
   1c5e0:	e03ffd15 	stw	zero,-12(fp)
	int32_t x_copy = x;
   1c5e4:	e0bfff17 	ldw	r2,-4(fp)
   1c5e8:	e0bffe15 	stw	r2,-8(fp)

	count = count + (A << 4);
   1c5ec:	e0bffc17 	ldw	r2,-16(fp)
   1c5f0:	1004913a 	slli	r2,r2,4
   1c5f4:	e0fffd17 	ldw	r3,-12(fp)
   1c5f8:	1885883a 	add	r2,r3,r2
   1c5fc:	e0bffd15 	stw	r2,-12(fp)

	x_copy = (((~A + 1) & (x >> 16)) + (~(~A + 1) & x));
   1c600:	e0bffc17 	ldw	r2,-16(fp)
   1c604:	0087c83a 	sub	r3,zero,r2
   1c608:	e0bfff17 	ldw	r2,-4(fp)
   1c60c:	1005d43a 	srai	r2,r2,16
   1c610:	1886703a 	and	r3,r3,r2
   1c614:	e0bffc17 	ldw	r2,-16(fp)
   1c618:	113fffc4 	addi	r4,r2,-1
   1c61c:	e0bfff17 	ldw	r2,-4(fp)
   1c620:	2084703a 	and	r2,r4,r2
   1c624:	1885883a 	add	r2,r3,r2
   1c628:	e0bffe15 	stw	r2,-8(fp)

	A = !(!(x_copy >> 8));
   1c62c:	e0bffe17 	ldw	r2,-8(fp)
   1c630:	1005d23a 	srai	r2,r2,8
   1c634:	1004c03a 	cmpne	r2,r2,zero
   1c638:	10803fcc 	andi	r2,r2,255
   1c63c:	e0bffc15 	stw	r2,-16(fp)
	count = count + (A << 3);
   1c640:	e0bffc17 	ldw	r2,-16(fp)
   1c644:	100490fa 	slli	r2,r2,3
   1c648:	e0fffd17 	ldw	r3,-12(fp)
   1c64c:	1885883a 	add	r2,r3,r2
   1c650:	e0bffd15 	stw	r2,-12(fp)
	x_copy = (((~A + 1) & (x_copy >> 8)) + (~(~A + 1) & x_copy));
   1c654:	e0bffc17 	ldw	r2,-16(fp)
   1c658:	0087c83a 	sub	r3,zero,r2
   1c65c:	e0bffe17 	ldw	r2,-8(fp)
   1c660:	1005d23a 	srai	r2,r2,8
   1c664:	1886703a 	and	r3,r3,r2
   1c668:	e0bffc17 	ldw	r2,-16(fp)
   1c66c:	113fffc4 	addi	r4,r2,-1
   1c670:	e0bffe17 	ldw	r2,-8(fp)
   1c674:	2084703a 	and	r2,r4,r2
   1c678:	1885883a 	add	r2,r3,r2
   1c67c:	e0bffe15 	stw	r2,-8(fp)

	A = !(!(x_copy >> 4));
   1c680:	e0bffe17 	ldw	r2,-8(fp)
   1c684:	1005d13a 	srai	r2,r2,4
   1c688:	1004c03a 	cmpne	r2,r2,zero
   1c68c:	10803fcc 	andi	r2,r2,255
   1c690:	e0bffc15 	stw	r2,-16(fp)
	count = count + (A << 2);
   1c694:	e0bffc17 	ldw	r2,-16(fp)
   1c698:	1085883a 	add	r2,r2,r2
   1c69c:	1085883a 	add	r2,r2,r2
   1c6a0:	1007883a 	mov	r3,r2
   1c6a4:	e0bffd17 	ldw	r2,-12(fp)
   1c6a8:	10c5883a 	add	r2,r2,r3
   1c6ac:	e0bffd15 	stw	r2,-12(fp)
	x_copy = (((~A + 1) & (x_copy >> 4)) + (~(~A + 1) & x_copy));
   1c6b0:	e0bffc17 	ldw	r2,-16(fp)
   1c6b4:	0087c83a 	sub	r3,zero,r2
   1c6b8:	e0bffe17 	ldw	r2,-8(fp)
   1c6bc:	1005d13a 	srai	r2,r2,4
   1c6c0:	1886703a 	and	r3,r3,r2
   1c6c4:	e0bffc17 	ldw	r2,-16(fp)
   1c6c8:	113fffc4 	addi	r4,r2,-1
   1c6cc:	e0bffe17 	ldw	r2,-8(fp)
   1c6d0:	2084703a 	and	r2,r4,r2
   1c6d4:	1885883a 	add	r2,r3,r2
   1c6d8:	e0bffe15 	stw	r2,-8(fp)

	A = !(!(x_copy >> 2));
   1c6dc:	e0bffe17 	ldw	r2,-8(fp)
   1c6e0:	1005d0ba 	srai	r2,r2,2
   1c6e4:	1004c03a 	cmpne	r2,r2,zero
   1c6e8:	10803fcc 	andi	r2,r2,255
   1c6ec:	e0bffc15 	stw	r2,-16(fp)
	count = count + (A << 1);
   1c6f0:	e0bffc17 	ldw	r2,-16(fp)
   1c6f4:	1085883a 	add	r2,r2,r2
   1c6f8:	1007883a 	mov	r3,r2
   1c6fc:	e0bffd17 	ldw	r2,-12(fp)
   1c700:	10c5883a 	add	r2,r2,r3
   1c704:	e0bffd15 	stw	r2,-12(fp)
	x_copy = (((~A + 1) & (x_copy >> 2)) + (~(~A + 1) & x_copy));
   1c708:	e0bffc17 	ldw	r2,-16(fp)
   1c70c:	0087c83a 	sub	r3,zero,r2
   1c710:	e0bffe17 	ldw	r2,-8(fp)
   1c714:	1005d0ba 	srai	r2,r2,2
   1c718:	1886703a 	and	r3,r3,r2
   1c71c:	e0bffc17 	ldw	r2,-16(fp)
   1c720:	113fffc4 	addi	r4,r2,-1
   1c724:	e0bffe17 	ldw	r2,-8(fp)
   1c728:	2084703a 	and	r2,r4,r2
   1c72c:	1885883a 	add	r2,r3,r2
   1c730:	e0bffe15 	stw	r2,-8(fp)

	A = !(!(x_copy >> 1));
   1c734:	e0bffe17 	ldw	r2,-8(fp)
   1c738:	1005d07a 	srai	r2,r2,1
   1c73c:	1004c03a 	cmpne	r2,r2,zero
   1c740:	10803fcc 	andi	r2,r2,255
   1c744:	e0bffc15 	stw	r2,-16(fp)
	count = count + A;
   1c748:	e0fffd17 	ldw	r3,-12(fp)
   1c74c:	e0bffc17 	ldw	r2,-16(fp)
   1c750:	1885883a 	add	r2,r3,r2
   1c754:	e0bffd15 	stw	r2,-12(fp)

	return count;
   1c758:	e0bffd17 	ldw	r2,-12(fp)
}
   1c75c:	e037883a 	mov	sp,fp
   1c760:	df000017 	ldw	fp,0(sp)
   1c764:	dec00104 	addi	sp,sp,4
   1c768:	f800283a 	ret

0001c76c <do_div>:

/***************************************************************************//**
 * @brief do_div
*******************************************************************************/
uint64_t do_div(uint64_t* n, uint64_t base)
{
   1c76c:	defff904 	addi	sp,sp,-28
   1c770:	de00012e 	bgeu	sp,et,1c778 <do_div+0xc>
   1c774:	003b68fa 	trap	3
   1c778:	dfc00615 	stw	ra,24(sp)
   1c77c:	df000515 	stw	fp,20(sp)
   1c780:	df000504 	addi	fp,sp,20
   1c784:	e13ffd15 	stw	r4,-12(fp)
   1c788:	e17ffe15 	stw	r5,-8(fp)
   1c78c:	e1bfff15 	stw	r6,-4(fp)
	uint64_t mod = 0;
   1c790:	e03ffb15 	stw	zero,-20(fp)
   1c794:	e03ffc15 	stw	zero,-16(fp)

	mod = *n % base;
   1c798:	e13ffd17 	ldw	r4,-12(fp)
   1c79c:	20800017 	ldw	r2,0(r4)
   1c7a0:	20c00117 	ldw	r3,4(r4)
   1c7a4:	1009883a 	mov	r4,r2
   1c7a8:	180b883a 	mov	r5,r3
   1c7ac:	e1bffe17 	ldw	r6,-8(fp)
   1c7b0:	e1ffff17 	ldw	r7,-4(fp)
   1c7b4:	001d0d80 	call	1d0d8 <__umoddi3>
   1c7b8:	1009883a 	mov	r4,r2
   1c7bc:	180b883a 	mov	r5,r3
   1c7c0:	e13ffb15 	stw	r4,-20(fp)
   1c7c4:	e17ffc15 	stw	r5,-16(fp)
	*n = *n / base;
   1c7c8:	e13ffd17 	ldw	r4,-12(fp)
   1c7cc:	20800017 	ldw	r2,0(r4)
   1c7d0:	20c00117 	ldw	r3,4(r4)
   1c7d4:	1009883a 	mov	r4,r2
   1c7d8:	180b883a 	mov	r5,r3
   1c7dc:	e1bffe17 	ldw	r6,-8(fp)
   1c7e0:	e1ffff17 	ldw	r7,-4(fp)
   1c7e4:	001cb100 	call	1cb10 <__udivdi3>
   1c7e8:	1009883a 	mov	r4,r2
   1c7ec:	180b883a 	mov	r5,r3
   1c7f0:	2005883a 	mov	r2,r4
   1c7f4:	2807883a 	mov	r3,r5
   1c7f8:	e13ffd17 	ldw	r4,-12(fp)
   1c7fc:	20800015 	stw	r2,0(r4)
   1c800:	20c00115 	stw	r3,4(r4)

	return mod;
   1c804:	e0bffb17 	ldw	r2,-20(fp)
   1c808:	e0fffc17 	ldw	r3,-16(fp)
   1c80c:	1009883a 	mov	r4,r2
   1c810:	180b883a 	mov	r5,r3
}
   1c814:	2005883a 	mov	r2,r4
   1c818:	2807883a 	mov	r3,r5
   1c81c:	e037883a 	mov	sp,fp
   1c820:	dfc00117 	ldw	ra,4(sp)
   1c824:	df000017 	ldw	fp,0(sp)
   1c828:	dec00204 	addi	sp,sp,8
   1c82c:	f800283a 	ret

0001c830 <find_first_bit>:

/***************************************************************************//**
 * @brief find_first_bit
*******************************************************************************/
uint32_t find_first_bit(uint32_t word)
{
   1c830:	defffd04 	addi	sp,sp,-12
   1c834:	de00012e 	bgeu	sp,et,1c83c <find_first_bit+0xc>
   1c838:	003b68fa 	trap	3
   1c83c:	df000215 	stw	fp,8(sp)
   1c840:	df000204 	addi	fp,sp,8
   1c844:	e13fff15 	stw	r4,-4(fp)
	int32_t num = 0;
   1c848:	e03ffe15 	stw	zero,-8(fp)

	if ((word & 0xffff) == 0) {
   1c84c:	e0bfff17 	ldw	r2,-4(fp)
   1c850:	10bfffcc 	andi	r2,r2,65535
   1c854:	1000061e 	bne	r2,zero,1c870 <find_first_bit+0x40>
			num += 16;
   1c858:	e0bffe17 	ldw	r2,-8(fp)
   1c85c:	10800404 	addi	r2,r2,16
   1c860:	e0bffe15 	stw	r2,-8(fp)
			word >>= 16;
   1c864:	e0bfff17 	ldw	r2,-4(fp)
   1c868:	1004d43a 	srli	r2,r2,16
   1c86c:	e0bfff15 	stw	r2,-4(fp)
	}
	if ((word & 0xff) == 0) {
   1c870:	e0bfff17 	ldw	r2,-4(fp)
   1c874:	10803fcc 	andi	r2,r2,255
   1c878:	1000061e 	bne	r2,zero,1c894 <find_first_bit+0x64>
			num += 8;
   1c87c:	e0bffe17 	ldw	r2,-8(fp)
   1c880:	10800204 	addi	r2,r2,8
   1c884:	e0bffe15 	stw	r2,-8(fp)
			word >>= 8;
   1c888:	e0bfff17 	ldw	r2,-4(fp)
   1c88c:	1004d23a 	srli	r2,r2,8
   1c890:	e0bfff15 	stw	r2,-4(fp)
	}
	if ((word & 0xf) == 0) {
   1c894:	e0bfff17 	ldw	r2,-4(fp)
   1c898:	108003cc 	andi	r2,r2,15
   1c89c:	1000061e 	bne	r2,zero,1c8b8 <find_first_bit+0x88>
			num += 4;
   1c8a0:	e0bffe17 	ldw	r2,-8(fp)
   1c8a4:	10800104 	addi	r2,r2,4
   1c8a8:	e0bffe15 	stw	r2,-8(fp)
			word >>= 4;
   1c8ac:	e0bfff17 	ldw	r2,-4(fp)
   1c8b0:	1004d13a 	srli	r2,r2,4
   1c8b4:	e0bfff15 	stw	r2,-4(fp)
	}
	if ((word & 0x3) == 0) {
   1c8b8:	e0bfff17 	ldw	r2,-4(fp)
   1c8bc:	108000cc 	andi	r2,r2,3
   1c8c0:	1000061e 	bne	r2,zero,1c8dc <find_first_bit+0xac>
			num += 2;
   1c8c4:	e0bffe17 	ldw	r2,-8(fp)
   1c8c8:	10800084 	addi	r2,r2,2
   1c8cc:	e0bffe15 	stw	r2,-8(fp)
			word >>= 2;
   1c8d0:	e0bfff17 	ldw	r2,-4(fp)
   1c8d4:	1004d0ba 	srli	r2,r2,2
   1c8d8:	e0bfff15 	stw	r2,-4(fp)
	}
	if ((word & 0x1) == 0)
   1c8dc:	e0bfff17 	ldw	r2,-4(fp)
   1c8e0:	1080004c 	andi	r2,r2,1
   1c8e4:	1000031e 	bne	r2,zero,1c8f4 <find_first_bit+0xc4>
			num += 1;
   1c8e8:	e0bffe17 	ldw	r2,-8(fp)
   1c8ec:	10800044 	addi	r2,r2,1
   1c8f0:	e0bffe15 	stw	r2,-8(fp)
	return num;
   1c8f4:	e0bffe17 	ldw	r2,-8(fp)
}
   1c8f8:	e037883a 	mov	sp,fp
   1c8fc:	df000017 	ldw	fp,0(sp)
   1c900:	dec00104 	addi	sp,sp,4
   1c904:	f800283a 	ret

0001c908 <ERR_PTR>:

/***************************************************************************//**
 * @brief ERR_PTR
*******************************************************************************/
void * ERR_PTR(long error)
{
   1c908:	defffe04 	addi	sp,sp,-8
   1c90c:	de00012e 	bgeu	sp,et,1c914 <ERR_PTR+0xc>
   1c910:	003b68fa 	trap	3
   1c914:	df000115 	stw	fp,4(sp)
   1c918:	df000104 	addi	fp,sp,4
   1c91c:	e13fff15 	stw	r4,-4(fp)
	return (void *) error;
   1c920:	e0bfff17 	ldw	r2,-4(fp)
}
   1c924:	e037883a 	mov	sp,fp
   1c928:	df000017 	ldw	fp,0(sp)
   1c92c:	dec00104 	addi	sp,sp,4
   1c930:	f800283a 	ret

0001c934 <zmalloc>:

/***************************************************************************//**
 * @brief zmalloc
*******************************************************************************/
void *zmalloc(size_t size)
{
   1c934:	defffc04 	addi	sp,sp,-16
   1c938:	de00012e 	bgeu	sp,et,1c940 <zmalloc+0xc>
   1c93c:	003b68fa 	trap	3
   1c940:	dfc00315 	stw	ra,12(sp)
   1c944:	df000215 	stw	fp,8(sp)
   1c948:	df000204 	addi	fp,sp,8
   1c94c:	e13fff15 	stw	r4,-4(fp)
	void *ptr = malloc(size);
   1c950:	e13fff17 	ldw	r4,-4(fp)
   1c954:	001f4f40 	call	1f4f4 <malloc>
   1c958:	e0bffe15 	stw	r2,-8(fp)
	if (ptr)
   1c95c:	e0bffe17 	ldw	r2,-8(fp)
   1c960:	10000426 	beq	r2,zero,1c974 <zmalloc+0x40>
		memset(ptr, 0, size);
   1c964:	e13ffe17 	ldw	r4,-8(fp)
   1c968:	000b883a 	mov	r5,zero
   1c96c:	e1bfff17 	ldw	r6,-4(fp)
   1c970:	001f55c0 	call	1f55c <memset>
	mdelay(1);
   1c974:	01000044 	movi	r4,1
   1c978:	001b8dc0 	call	1b8dc <mdelay>

	return ptr;
   1c97c:	e0bffe17 	ldw	r2,-8(fp)
}
   1c980:	e037883a 	mov	sp,fp
   1c984:	dfc00117 	ldw	ra,4(sp)
   1c988:	df000017 	ldw	fp,0(sp)
   1c98c:	dec00204 	addi	sp,sp,8
   1c990:	f800283a 	ret

0001c994 <__muldi3>:
   1c994:	223fffcc 	andi	r8,r4,65535
   1c998:	2012d43a 	srli	r9,r4,16
   1c99c:	32bfffcc 	andi	r10,r6,65535
   1c9a0:	3006d43a 	srli	r3,r6,16
   1c9a4:	5217383a 	mul	r11,r10,r8
   1c9a8:	5255383a 	mul	r10,r10,r9
   1c9ac:	1a05383a 	mul	r2,r3,r8
   1c9b0:	5810d43a 	srli	r8,r11,16
   1c9b4:	de00012e 	bgeu	sp,et,1c9bc <__muldi3+0x28>
   1c9b8:	003b68fa 	trap	3
   1c9bc:	5085883a 	add	r2,r10,r2
   1c9c0:	1205883a 	add	r2,r2,r8
   1c9c4:	1a51383a 	mul	r8,r3,r9
   1c9c8:	1280022e 	bgeu	r2,r10,1c9d4 <__muldi3+0x40>
   1c9cc:	00c00074 	movhi	r3,1
   1c9d0:	40d1883a 	add	r8,r8,r3
   1c9d4:	1006d43a 	srli	r3,r2,16
   1c9d8:	21cf383a 	mul	r7,r4,r7
   1c9dc:	314b383a 	mul	r5,r6,r5
   1c9e0:	1004943a 	slli	r2,r2,16
   1c9e4:	40c7883a 	add	r3,r8,r3
   1c9e8:	5affffcc 	andi	r11,r11,65535
   1c9ec:	3949883a 	add	r4,r7,r5
   1c9f0:	12c5883a 	add	r2,r2,r11
   1c9f4:	20c7883a 	add	r3,r4,r3
   1c9f8:	f800283a 	ret

0001c9fc <__fixunsdfsi>:
   1c9fc:	defffd04 	addi	sp,sp,-12
   1ca00:	000d883a 	mov	r6,zero
   1ca04:	01d07834 	movhi	r7,16864
   1ca08:	de00012e 	bgeu	sp,et,1ca10 <__fixunsdfsi+0x14>
   1ca0c:	003b68fa 	trap	3
   1ca10:	dc400115 	stw	r17,4(sp)
   1ca14:	dc000015 	stw	r16,0(sp)
   1ca18:	dfc00215 	stw	ra,8(sp)
   1ca1c:	2023883a 	mov	r17,r4
   1ca20:	2821883a 	mov	r16,r5
   1ca24:	001e0680 	call	1e068 <__gedf2>
   1ca28:	1000080e 	bge	r2,zero,1ca4c <__fixunsdfsi+0x50>
   1ca2c:	8809883a 	mov	r4,r17
   1ca30:	800b883a 	mov	r5,r16
   1ca34:	001f23c0 	call	1f23c <__fixdfsi>
   1ca38:	dfc00217 	ldw	ra,8(sp)
   1ca3c:	dc400117 	ldw	r17,4(sp)
   1ca40:	dc000017 	ldw	r16,0(sp)
   1ca44:	dec00304 	addi	sp,sp,12
   1ca48:	f800283a 	ret
   1ca4c:	000d883a 	mov	r6,zero
   1ca50:	01d07834 	movhi	r7,16864
   1ca54:	8809883a 	mov	r4,r17
   1ca58:	800b883a 	mov	r5,r16
   1ca5c:	001e9640 	call	1e964 <__subdf3>
   1ca60:	180b883a 	mov	r5,r3
   1ca64:	1009883a 	mov	r4,r2
   1ca68:	001f23c0 	call	1f23c <__fixdfsi>
   1ca6c:	00e00034 	movhi	r3,32768
   1ca70:	10c5883a 	add	r2,r2,r3
   1ca74:	003ff006 	br	1ca38 <_gp+0xfffea918>

0001ca78 <__fixunsdfdi>:
   1ca78:	defffc04 	addi	sp,sp,-16
   1ca7c:	000d883a 	mov	r6,zero
   1ca80:	01cf7c34 	movhi	r7,15856
   1ca84:	de00012e 	bgeu	sp,et,1ca8c <__fixunsdfdi+0x14>
   1ca88:	003b68fa 	trap	3
   1ca8c:	dfc00315 	stw	ra,12(sp)
   1ca90:	dc800215 	stw	r18,8(sp)
   1ca94:	dc400115 	stw	r17,4(sp)
   1ca98:	2025883a 	mov	r18,r4
   1ca9c:	2823883a 	mov	r17,r5
   1caa0:	dc000015 	stw	r16,0(sp)
   1caa4:	001e2380 	call	1e238 <__muldf3>
   1caa8:	180b883a 	mov	r5,r3
   1caac:	1009883a 	mov	r4,r2
   1cab0:	001c9fc0 	call	1c9fc <__fixunsdfsi>
   1cab4:	1009883a 	mov	r4,r2
   1cab8:	1021883a 	mov	r16,r2
   1cabc:	001f3a40 	call	1f3a4 <__floatunsidf>
   1cac0:	1009883a 	mov	r4,r2
   1cac4:	180b883a 	mov	r5,r3
   1cac8:	000d883a 	mov	r6,zero
   1cacc:	01d07c34 	movhi	r7,16880
   1cad0:	001e2380 	call	1e238 <__muldf3>
   1cad4:	9009883a 	mov	r4,r18
   1cad8:	880b883a 	mov	r5,r17
   1cadc:	100d883a 	mov	r6,r2
   1cae0:	180f883a 	mov	r7,r3
   1cae4:	001e9640 	call	1e964 <__subdf3>
   1cae8:	180b883a 	mov	r5,r3
   1caec:	1009883a 	mov	r4,r2
   1caf0:	001c9fc0 	call	1c9fc <__fixunsdfsi>
   1caf4:	8007883a 	mov	r3,r16
   1caf8:	dfc00317 	ldw	ra,12(sp)
   1cafc:	dc800217 	ldw	r18,8(sp)
   1cb00:	dc400117 	ldw	r17,4(sp)
   1cb04:	dc000017 	ldw	r16,0(sp)
   1cb08:	dec00404 	addi	sp,sp,16
   1cb0c:	f800283a 	ret

0001cb10 <__udivdi3>:
   1cb10:	defff504 	addi	sp,sp,-44
   1cb14:	de00012e 	bgeu	sp,et,1cb1c <__udivdi3+0xc>
   1cb18:	003b68fa 	trap	3
   1cb1c:	dcc00415 	stw	r19,16(sp)
   1cb20:	dc000115 	stw	r16,4(sp)
   1cb24:	dfc00a15 	stw	ra,40(sp)
   1cb28:	df000915 	stw	fp,36(sp)
   1cb2c:	ddc00815 	stw	r23,32(sp)
   1cb30:	dd800715 	stw	r22,28(sp)
   1cb34:	dd400615 	stw	r21,24(sp)
   1cb38:	dd000515 	stw	r20,20(sp)
   1cb3c:	dc800315 	stw	r18,12(sp)
   1cb40:	dc400215 	stw	r17,8(sp)
   1cb44:	2027883a 	mov	r19,r4
   1cb48:	2821883a 	mov	r16,r5
   1cb4c:	3800421e 	bne	r7,zero,1cc58 <__udivdi3+0x148>
   1cb50:	3025883a 	mov	r18,r6
   1cb54:	2023883a 	mov	r17,r4
   1cb58:	2980542e 	bgeu	r5,r6,1ccac <__udivdi3+0x19c>
   1cb5c:	00bfffd4 	movui	r2,65535
   1cb60:	282d883a 	mov	r22,r5
   1cb64:	1180a836 	bltu	r2,r6,1ce08 <__udivdi3+0x2f8>
   1cb68:	00803fc4 	movi	r2,255
   1cb6c:	1181422e 	bgeu	r2,r6,1d078 <__udivdi3+0x568>
   1cb70:	00800204 	movi	r2,8
   1cb74:	1007883a 	mov	r3,r2
   1cb78:	3084d83a 	srl	r2,r6,r2
   1cb7c:	010000f4 	movhi	r4,3
   1cb80:	21248904 	addi	r4,r4,-28124
   1cb84:	2085883a 	add	r2,r4,r2
   1cb88:	10800003 	ldbu	r2,0(r2)
   1cb8c:	10c7883a 	add	r3,r2,r3
   1cb90:	00800804 	movi	r2,32
   1cb94:	10c5c83a 	sub	r2,r2,r3
   1cb98:	10000526 	beq	r2,zero,1cbb0 <__udivdi3+0xa0>
   1cb9c:	80a0983a 	sll	r16,r16,r2
   1cba0:	98c6d83a 	srl	r3,r19,r3
   1cba4:	30a4983a 	sll	r18,r6,r2
   1cba8:	98a2983a 	sll	r17,r19,r2
   1cbac:	80ecb03a 	or	r22,r16,r3
   1cbb0:	902ad43a 	srli	r21,r18,16
   1cbb4:	b009883a 	mov	r4,r22
   1cbb8:	953fffcc 	andi	r20,r18,65535
   1cbbc:	a80b883a 	mov	r5,r21
   1cbc0:	001d7b40 	call	1d7b4 <__umodsi3>
   1cbc4:	b009883a 	mov	r4,r22
   1cbc8:	a80b883a 	mov	r5,r21
   1cbcc:	1027883a 	mov	r19,r2
   1cbd0:	001d7a40 	call	1d7a4 <__udivsi3>
   1cbd4:	1021883a 	mov	r16,r2
   1cbd8:	8806d43a 	srli	r3,r17,16
   1cbdc:	9804943a 	slli	r2,r19,16
   1cbe0:	8527383a 	mul	r19,r16,r20
   1cbe4:	10c4b03a 	or	r2,r2,r3
   1cbe8:	14c0052e 	bgeu	r2,r19,1cc00 <__udivdi3+0xf0>
   1cbec:	1485883a 	add	r2,r2,r18
   1cbf0:	80ffffc4 	addi	r3,r16,-1
   1cbf4:	14800136 	bltu	r2,r18,1cbfc <__udivdi3+0xec>
   1cbf8:	14c13436 	bltu	r2,r19,1d0cc <__udivdi3+0x5bc>
   1cbfc:	1821883a 	mov	r16,r3
   1cc00:	14e7c83a 	sub	r19,r2,r19
   1cc04:	9809883a 	mov	r4,r19
   1cc08:	a80b883a 	mov	r5,r21
   1cc0c:	001d7b40 	call	1d7b4 <__umodsi3>
   1cc10:	102d883a 	mov	r22,r2
   1cc14:	9809883a 	mov	r4,r19
   1cc18:	a80b883a 	mov	r5,r21
   1cc1c:	001d7a40 	call	1d7a4 <__udivsi3>
   1cc20:	b02c943a 	slli	r22,r22,16
   1cc24:	1529383a 	mul	r20,r2,r20
   1cc28:	8c7fffcc 	andi	r17,r17,65535
   1cc2c:	b462b03a 	or	r17,r22,r17
   1cc30:	8d00052e 	bgeu	r17,r20,1cc48 <__udivdi3+0x138>
   1cc34:	8ca3883a 	add	r17,r17,r18
   1cc38:	10ffffc4 	addi	r3,r2,-1
   1cc3c:	8c80f636 	bltu	r17,r18,1d018 <__udivdi3+0x508>
   1cc40:	8d00f52e 	bgeu	r17,r20,1d018 <__udivdi3+0x508>
   1cc44:	10bfff84 	addi	r2,r2,-2
   1cc48:	8020943a 	slli	r16,r16,16
   1cc4c:	0007883a 	mov	r3,zero
   1cc50:	1404b03a 	or	r2,r2,r16
   1cc54:	00005b06 	br	1cdc4 <__udivdi3+0x2b4>
   1cc58:	29c05836 	bltu	r5,r7,1cdbc <__udivdi3+0x2ac>
   1cc5c:	00bfffd4 	movui	r2,65535
   1cc60:	11c0642e 	bgeu	r2,r7,1cdf4 <__udivdi3+0x2e4>
   1cc64:	00804034 	movhi	r2,256
   1cc68:	10bfffc4 	addi	r2,r2,-1
   1cc6c:	11c0f32e 	bgeu	r2,r7,1d03c <__udivdi3+0x52c>
   1cc70:	00c00604 	movi	r3,24
   1cc74:	180b883a 	mov	r5,r3
   1cc78:	38c6d83a 	srl	r3,r7,r3
   1cc7c:	008000f4 	movhi	r2,3
   1cc80:	10a48904 	addi	r2,r2,-28124
   1cc84:	10c7883a 	add	r3,r2,r3
   1cc88:	18c00003 	ldbu	r3,0(r3)
   1cc8c:	01000804 	movi	r4,32
   1cc90:	1947883a 	add	r3,r3,r5
   1cc94:	20e5c83a 	sub	r18,r4,r3
   1cc98:	9000661e 	bne	r18,zero,1ce34 <__udivdi3+0x324>
   1cc9c:	3c00f936 	bltu	r7,r16,1d084 <__udivdi3+0x574>
   1cca0:	9985403a 	cmpgeu	r2,r19,r6
   1cca4:	0007883a 	mov	r3,zero
   1cca8:	00004606 	br	1cdc4 <__udivdi3+0x2b4>
   1ccac:	3000041e 	bne	r6,zero,1ccc0 <__udivdi3+0x1b0>
   1ccb0:	01000044 	movi	r4,1
   1ccb4:	000b883a 	mov	r5,zero
   1ccb8:	001d7a40 	call	1d7a4 <__udivsi3>
   1ccbc:	1025883a 	mov	r18,r2
   1ccc0:	00bfffd4 	movui	r2,65535
   1ccc4:	1480562e 	bgeu	r2,r18,1ce20 <__udivdi3+0x310>
   1ccc8:	00804034 	movhi	r2,256
   1cccc:	10bfffc4 	addi	r2,r2,-1
   1ccd0:	1480e32e 	bgeu	r2,r18,1d060 <__udivdi3+0x550>
   1ccd4:	00800604 	movi	r2,24
   1ccd8:	1007883a 	mov	r3,r2
   1ccdc:	9084d83a 	srl	r2,r18,r2
   1cce0:	010000f4 	movhi	r4,3
   1cce4:	21248904 	addi	r4,r4,-28124
   1cce8:	2085883a 	add	r2,r4,r2
   1ccec:	10800003 	ldbu	r2,0(r2)
   1ccf0:	10c5883a 	add	r2,r2,r3
   1ccf4:	00c00804 	movi	r3,32
   1ccf8:	1887c83a 	sub	r3,r3,r2
   1ccfc:	1800911e 	bne	r3,zero,1cf44 <__udivdi3+0x434>
   1cd00:	9028d43a 	srli	r20,r18,16
   1cd04:	84a1c83a 	sub	r16,r16,r18
   1cd08:	957fffcc 	andi	r21,r18,65535
   1cd0c:	00c00044 	movi	r3,1
   1cd10:	8009883a 	mov	r4,r16
   1cd14:	a00b883a 	mov	r5,r20
   1cd18:	d8c00015 	stw	r3,0(sp)
   1cd1c:	001d7b40 	call	1d7b4 <__umodsi3>
   1cd20:	8009883a 	mov	r4,r16
   1cd24:	a00b883a 	mov	r5,r20
   1cd28:	1027883a 	mov	r19,r2
   1cd2c:	001d7a40 	call	1d7a4 <__udivsi3>
   1cd30:	1021883a 	mov	r16,r2
   1cd34:	880cd43a 	srli	r6,r17,16
   1cd38:	9804943a 	slli	r2,r19,16
   1cd3c:	8567383a 	mul	r19,r16,r21
   1cd40:	d8c00017 	ldw	r3,0(sp)
   1cd44:	1188b03a 	or	r4,r2,r6
   1cd48:	24c0052e 	bgeu	r4,r19,1cd60 <__udivdi3+0x250>
   1cd4c:	2489883a 	add	r4,r4,r18
   1cd50:	80bfffc4 	addi	r2,r16,-1
   1cd54:	24800136 	bltu	r4,r18,1cd5c <__udivdi3+0x24c>
   1cd58:	24c0d936 	bltu	r4,r19,1d0c0 <__udivdi3+0x5b0>
   1cd5c:	1021883a 	mov	r16,r2
   1cd60:	24e7c83a 	sub	r19,r4,r19
   1cd64:	9809883a 	mov	r4,r19
   1cd68:	a00b883a 	mov	r5,r20
   1cd6c:	d8c00015 	stw	r3,0(sp)
   1cd70:	001d7b40 	call	1d7b4 <__umodsi3>
   1cd74:	102d883a 	mov	r22,r2
   1cd78:	9809883a 	mov	r4,r19
   1cd7c:	a00b883a 	mov	r5,r20
   1cd80:	001d7a40 	call	1d7a4 <__udivsi3>
   1cd84:	b02c943a 	slli	r22,r22,16
   1cd88:	156b383a 	mul	r21,r2,r21
   1cd8c:	8c7fffcc 	andi	r17,r17,65535
   1cd90:	b462b03a 	or	r17,r22,r17
   1cd94:	d8c00017 	ldw	r3,0(sp)
   1cd98:	8d40052e 	bgeu	r17,r21,1cdb0 <__udivdi3+0x2a0>
   1cd9c:	8ca3883a 	add	r17,r17,r18
   1cda0:	113fffc4 	addi	r4,r2,-1
   1cda4:	8c809a36 	bltu	r17,r18,1d010 <__udivdi3+0x500>
   1cda8:	8d40992e 	bgeu	r17,r21,1d010 <__udivdi3+0x500>
   1cdac:	10bfff84 	addi	r2,r2,-2
   1cdb0:	8020943a 	slli	r16,r16,16
   1cdb4:	1404b03a 	or	r2,r2,r16
   1cdb8:	00000206 	br	1cdc4 <__udivdi3+0x2b4>
   1cdbc:	0007883a 	mov	r3,zero
   1cdc0:	0005883a 	mov	r2,zero
   1cdc4:	dfc00a17 	ldw	ra,40(sp)
   1cdc8:	df000917 	ldw	fp,36(sp)
   1cdcc:	ddc00817 	ldw	r23,32(sp)
   1cdd0:	dd800717 	ldw	r22,28(sp)
   1cdd4:	dd400617 	ldw	r21,24(sp)
   1cdd8:	dd000517 	ldw	r20,20(sp)
   1cddc:	dcc00417 	ldw	r19,16(sp)
   1cde0:	dc800317 	ldw	r18,12(sp)
   1cde4:	dc400217 	ldw	r17,8(sp)
   1cde8:	dc000117 	ldw	r16,4(sp)
   1cdec:	dec00b04 	addi	sp,sp,44
   1cdf0:	f800283a 	ret
   1cdf4:	00803fc4 	movi	r2,255
   1cdf8:	11c0932e 	bgeu	r2,r7,1d048 <__udivdi3+0x538>
   1cdfc:	00c00204 	movi	r3,8
   1ce00:	180b883a 	mov	r5,r3
   1ce04:	003f9c06 	br	1cc78 <_gp+0xfffeab58>
   1ce08:	00804034 	movhi	r2,256
   1ce0c:	10bfffc4 	addi	r2,r2,-1
   1ce10:	1180902e 	bgeu	r2,r6,1d054 <__udivdi3+0x544>
   1ce14:	00800604 	movi	r2,24
   1ce18:	1007883a 	mov	r3,r2
   1ce1c:	003f5606 	br	1cb78 <_gp+0xfffeaa58>
   1ce20:	00803fc4 	movi	r2,255
   1ce24:	1480912e 	bgeu	r2,r18,1d06c <__udivdi3+0x55c>
   1ce28:	00800204 	movi	r2,8
   1ce2c:	1007883a 	mov	r3,r2
   1ce30:	003faa06 	br	1ccdc <_gp+0xfffeabbc>
   1ce34:	30eed83a 	srl	r23,r6,r3
   1ce38:	3c8e983a 	sll	r7,r7,r18
   1ce3c:	80f8d83a 	srl	fp,r16,r3
   1ce40:	98c6d83a 	srl	r3,r19,r3
   1ce44:	3deeb03a 	or	r23,r7,r23
   1ce48:	b828d43a 	srli	r20,r23,16
   1ce4c:	84a0983a 	sll	r16,r16,r18
   1ce50:	e009883a 	mov	r4,fp
   1ce54:	a00b883a 	mov	r5,r20
   1ce58:	80e2b03a 	or	r17,r16,r3
   1ce5c:	34aa983a 	sll	r21,r6,r18
   1ce60:	001d7b40 	call	1d7b4 <__umodsi3>
   1ce64:	e009883a 	mov	r4,fp
   1ce68:	a00b883a 	mov	r5,r20
   1ce6c:	102d883a 	mov	r22,r2
   1ce70:	001d7a40 	call	1d7a4 <__udivsi3>
   1ce74:	1021883a 	mov	r16,r2
   1ce78:	bf3fffcc 	andi	fp,r23,65535
   1ce7c:	b004943a 	slli	r2,r22,16
   1ce80:	8808d43a 	srli	r4,r17,16
   1ce84:	872d383a 	mul	r22,r16,fp
   1ce88:	1104b03a 	or	r2,r2,r4
   1ce8c:	1580042e 	bgeu	r2,r22,1cea0 <__udivdi3+0x390>
   1ce90:	15c5883a 	add	r2,r2,r23
   1ce94:	80ffffc4 	addi	r3,r16,-1
   1ce98:	15c0812e 	bgeu	r2,r23,1d0a0 <__udivdi3+0x590>
   1ce9c:	1821883a 	mov	r16,r3
   1cea0:	15adc83a 	sub	r22,r2,r22
   1cea4:	b009883a 	mov	r4,r22
   1cea8:	a00b883a 	mov	r5,r20
   1ceac:	001d7b40 	call	1d7b4 <__umodsi3>
   1ceb0:	a00b883a 	mov	r5,r20
   1ceb4:	b009883a 	mov	r4,r22
   1ceb8:	d8800015 	stw	r2,0(sp)
   1cebc:	001d7a40 	call	1d7a4 <__udivsi3>
   1cec0:	d8c00017 	ldw	r3,0(sp)
   1cec4:	170b383a 	mul	r5,r2,fp
   1cec8:	8c7fffcc 	andi	r17,r17,65535
   1cecc:	1806943a 	slli	r3,r3,16
   1ced0:	1c46b03a 	or	r3,r3,r17
   1ced4:	1940042e 	bgeu	r3,r5,1cee8 <__udivdi3+0x3d8>
   1ced8:	1dc7883a 	add	r3,r3,r23
   1cedc:	113fffc4 	addi	r4,r2,-1
   1cee0:	1dc06b2e 	bgeu	r3,r23,1d090 <__udivdi3+0x580>
   1cee4:	2005883a 	mov	r2,r4
   1cee8:	8020943a 	slli	r16,r16,16
   1ceec:	a9ffffcc 	andi	r7,r21,65535
   1cef0:	a82ad43a 	srli	r21,r21,16
   1cef4:	1404b03a 	or	r2,r2,r16
   1cef8:	113fffcc 	andi	r4,r2,65535
   1cefc:	100cd43a 	srli	r6,r2,16
   1cf00:	21d3383a 	mul	r9,r4,r7
   1cf04:	2549383a 	mul	r4,r4,r21
   1cf08:	31cf383a 	mul	r7,r6,r7
   1cf0c:	4810d43a 	srli	r8,r9,16
   1cf10:	1947c83a 	sub	r3,r3,r5
   1cf14:	3909883a 	add	r4,r7,r4
   1cf18:	2209883a 	add	r4,r4,r8
   1cf1c:	354d383a 	mul	r6,r6,r21
   1cf20:	21c0022e 	bgeu	r4,r7,1cf2c <__udivdi3+0x41c>
   1cf24:	01400074 	movhi	r5,1
   1cf28:	314d883a 	add	r6,r6,r5
   1cf2c:	202ad43a 	srli	r21,r4,16
   1cf30:	354d883a 	add	r6,r6,r21
   1cf34:	19803f36 	bltu	r3,r6,1d034 <__udivdi3+0x524>
   1cf38:	19803926 	beq	r3,r6,1d020 <__udivdi3+0x510>
   1cf3c:	0007883a 	mov	r3,zero
   1cf40:	003fa006 	br	1cdc4 <_gp+0xfffeaca4>
   1cf44:	90e4983a 	sll	r18,r18,r3
   1cf48:	80aad83a 	srl	r21,r16,r2
   1cf4c:	80e0983a 	sll	r16,r16,r3
   1cf50:	9028d43a 	srli	r20,r18,16
   1cf54:	9884d83a 	srl	r2,r19,r2
   1cf58:	a809883a 	mov	r4,r21
   1cf5c:	a00b883a 	mov	r5,r20
   1cf60:	80acb03a 	or	r22,r16,r2
   1cf64:	98e2983a 	sll	r17,r19,r3
   1cf68:	001d7b40 	call	1d7b4 <__umodsi3>
   1cf6c:	a809883a 	mov	r4,r21
   1cf70:	a00b883a 	mov	r5,r20
   1cf74:	1021883a 	mov	r16,r2
   1cf78:	001d7a40 	call	1d7a4 <__udivsi3>
   1cf7c:	957fffcc 	andi	r21,r18,65535
   1cf80:	8020943a 	slli	r16,r16,16
   1cf84:	b00ad43a 	srli	r5,r22,16
   1cf88:	1567383a 	mul	r19,r2,r21
   1cf8c:	102f883a 	mov	r23,r2
   1cf90:	8148b03a 	or	r4,r16,r5
   1cf94:	24c0062e 	bgeu	r4,r19,1cfb0 <__udivdi3+0x4a0>
   1cf98:	2489883a 	add	r4,r4,r18
   1cf9c:	10bfffc4 	addi	r2,r2,-1
   1cfa0:	24804536 	bltu	r4,r18,1d0b8 <__udivdi3+0x5a8>
   1cfa4:	24c0442e 	bgeu	r4,r19,1d0b8 <__udivdi3+0x5a8>
   1cfa8:	bdffff84 	addi	r23,r23,-2
   1cfac:	2489883a 	add	r4,r4,r18
   1cfb0:	24e7c83a 	sub	r19,r4,r19
   1cfb4:	9809883a 	mov	r4,r19
   1cfb8:	a00b883a 	mov	r5,r20
   1cfbc:	001d7b40 	call	1d7b4 <__umodsi3>
   1cfc0:	1021883a 	mov	r16,r2
   1cfc4:	9809883a 	mov	r4,r19
   1cfc8:	a00b883a 	mov	r5,r20
   1cfcc:	001d7a40 	call	1d7a4 <__udivsi3>
   1cfd0:	8020943a 	slli	r16,r16,16
   1cfd4:	1007883a 	mov	r3,r2
   1cfd8:	1545383a 	mul	r2,r2,r21
   1cfdc:	b13fffcc 	andi	r4,r22,65535
   1cfe0:	8108b03a 	or	r4,r16,r4
   1cfe4:	2080062e 	bgeu	r4,r2,1d000 <__udivdi3+0x4f0>
   1cfe8:	2489883a 	add	r4,r4,r18
   1cfec:	197fffc4 	addi	r5,r3,-1
   1cff0:	24802f36 	bltu	r4,r18,1d0b0 <__udivdi3+0x5a0>
   1cff4:	20802e2e 	bgeu	r4,r2,1d0b0 <__udivdi3+0x5a0>
   1cff8:	18ffff84 	addi	r3,r3,-2
   1cffc:	2489883a 	add	r4,r4,r18
   1d000:	b82e943a 	slli	r23,r23,16
   1d004:	20a1c83a 	sub	r16,r4,r2
   1d008:	1dc6b03a 	or	r3,r3,r23
   1d00c:	003f4006 	br	1cd10 <_gp+0xfffeabf0>
   1d010:	2005883a 	mov	r2,r4
   1d014:	003f6606 	br	1cdb0 <_gp+0xfffeac90>
   1d018:	1805883a 	mov	r2,r3
   1d01c:	003f0a06 	br	1cc48 <_gp+0xfffeab28>
   1d020:	2006943a 	slli	r3,r4,16
   1d024:	9c88983a 	sll	r4,r19,r18
   1d028:	4a7fffcc 	andi	r9,r9,65535
   1d02c:	1a47883a 	add	r3,r3,r9
   1d030:	20ffc22e 	bgeu	r4,r3,1cf3c <_gp+0xfffeae1c>
   1d034:	10bfffc4 	addi	r2,r2,-1
   1d038:	003fc006 	br	1cf3c <_gp+0xfffeae1c>
   1d03c:	00c00404 	movi	r3,16
   1d040:	180b883a 	mov	r5,r3
   1d044:	003f0c06 	br	1cc78 <_gp+0xfffeab58>
   1d048:	0007883a 	mov	r3,zero
   1d04c:	000b883a 	mov	r5,zero
   1d050:	003f0906 	br	1cc78 <_gp+0xfffeab58>
   1d054:	00800404 	movi	r2,16
   1d058:	1007883a 	mov	r3,r2
   1d05c:	003ec606 	br	1cb78 <_gp+0xfffeaa58>
   1d060:	00800404 	movi	r2,16
   1d064:	1007883a 	mov	r3,r2
   1d068:	003f1c06 	br	1ccdc <_gp+0xfffeabbc>
   1d06c:	0005883a 	mov	r2,zero
   1d070:	0007883a 	mov	r3,zero
   1d074:	003f1906 	br	1ccdc <_gp+0xfffeabbc>
   1d078:	0005883a 	mov	r2,zero
   1d07c:	0007883a 	mov	r3,zero
   1d080:	003ebd06 	br	1cb78 <_gp+0xfffeaa58>
   1d084:	0007883a 	mov	r3,zero
   1d088:	00800044 	movi	r2,1
   1d08c:	003f4d06 	br	1cdc4 <_gp+0xfffeaca4>
   1d090:	197f942e 	bgeu	r3,r5,1cee4 <_gp+0xfffeadc4>
   1d094:	10bfff84 	addi	r2,r2,-2
   1d098:	1dc7883a 	add	r3,r3,r23
   1d09c:	003f9206 	br	1cee8 <_gp+0xfffeadc8>
   1d0a0:	15bf7e2e 	bgeu	r2,r22,1ce9c <_gp+0xfffead7c>
   1d0a4:	843fff84 	addi	r16,r16,-2
   1d0a8:	15c5883a 	add	r2,r2,r23
   1d0ac:	003f7c06 	br	1cea0 <_gp+0xfffead80>
   1d0b0:	2807883a 	mov	r3,r5
   1d0b4:	003fd206 	br	1d000 <_gp+0xfffeaee0>
   1d0b8:	102f883a 	mov	r23,r2
   1d0bc:	003fbc06 	br	1cfb0 <_gp+0xfffeae90>
   1d0c0:	843fff84 	addi	r16,r16,-2
   1d0c4:	2489883a 	add	r4,r4,r18
   1d0c8:	003f2506 	br	1cd60 <_gp+0xfffeac40>
   1d0cc:	843fff84 	addi	r16,r16,-2
   1d0d0:	1485883a 	add	r2,r2,r18
   1d0d4:	003eca06 	br	1cc00 <_gp+0xfffeaae0>

0001d0d8 <__umoddi3>:
   1d0d8:	defff404 	addi	sp,sp,-48
   1d0dc:	de00012e 	bgeu	sp,et,1d0e4 <__umoddi3+0xc>
   1d0e0:	003b68fa 	trap	3
   1d0e4:	ddc00915 	stw	r23,36(sp)
   1d0e8:	dc400315 	stw	r17,12(sp)
   1d0ec:	dc000215 	stw	r16,8(sp)
   1d0f0:	dfc00b15 	stw	ra,44(sp)
   1d0f4:	df000a15 	stw	fp,40(sp)
   1d0f8:	dd800815 	stw	r22,32(sp)
   1d0fc:	dd400715 	stw	r21,28(sp)
   1d100:	dd000615 	stw	r20,24(sp)
   1d104:	dcc00515 	stw	r19,20(sp)
   1d108:	dc800415 	stw	r18,16(sp)
   1d10c:	2021883a 	mov	r16,r4
   1d110:	2823883a 	mov	r17,r5
   1d114:	282f883a 	mov	r23,r5
   1d118:	3800381e 	bne	r7,zero,1d1fc <__umoddi3+0x124>
   1d11c:	3027883a 	mov	r19,r6
   1d120:	2029883a 	mov	r20,r4
   1d124:	29804e2e 	bgeu	r5,r6,1d260 <__umoddi3+0x188>
   1d128:	00bfffd4 	movui	r2,65535
   1d12c:	11809c36 	bltu	r2,r6,1d3a0 <__umoddi3+0x2c8>
   1d130:	00803fc4 	movi	r2,255
   1d134:	11813b2e 	bgeu	r2,r6,1d624 <__umoddi3+0x54c>
   1d138:	01400204 	movi	r5,8
   1d13c:	2805883a 	mov	r2,r5
   1d140:	314ad83a 	srl	r5,r6,r5
   1d144:	00c000f4 	movhi	r3,3
   1d148:	18e48904 	addi	r3,r3,-28124
   1d14c:	194b883a 	add	r5,r3,r5
   1d150:	29000003 	ldbu	r4,0(r5)
   1d154:	2089883a 	add	r4,r4,r2
   1d158:	00800804 	movi	r2,32
   1d15c:	1105c83a 	sub	r2,r2,r4
   1d160:	1000ec26 	beq	r2,zero,1d514 <__umoddi3+0x43c>
   1d164:	88a2983a 	sll	r17,r17,r2
   1d168:	8108d83a 	srl	r4,r16,r4
   1d16c:	30a6983a 	sll	r19,r6,r2
   1d170:	80a8983a 	sll	r20,r16,r2
   1d174:	1025883a 	mov	r18,r2
   1d178:	892eb03a 	or	r23,r17,r4
   1d17c:	982cd43a 	srli	r22,r19,16
   1d180:	b809883a 	mov	r4,r23
   1d184:	9d7fffcc 	andi	r21,r19,65535
   1d188:	b00b883a 	mov	r5,r22
   1d18c:	001d7b40 	call	1d7b4 <__umodsi3>
   1d190:	b809883a 	mov	r4,r23
   1d194:	b00b883a 	mov	r5,r22
   1d198:	1021883a 	mov	r16,r2
   1d19c:	001d7a40 	call	1d7a4 <__udivsi3>
   1d1a0:	8020943a 	slli	r16,r16,16
   1d1a4:	a00cd43a 	srli	r6,r20,16
   1d1a8:	1545383a 	mul	r2,r2,r21
   1d1ac:	8188b03a 	or	r4,r16,r6
   1d1b0:	2080042e 	bgeu	r4,r2,1d1c4 <__umoddi3+0xec>
   1d1b4:	24c9883a 	add	r4,r4,r19
   1d1b8:	24c00236 	bltu	r4,r19,1d1c4 <__umoddi3+0xec>
   1d1bc:	2080012e 	bgeu	r4,r2,1d1c4 <__umoddi3+0xec>
   1d1c0:	24c9883a 	add	r4,r4,r19
   1d1c4:	20a3c83a 	sub	r17,r4,r2
   1d1c8:	8809883a 	mov	r4,r17
   1d1cc:	b00b883a 	mov	r5,r22
   1d1d0:	001d7b40 	call	1d7b4 <__umodsi3>
   1d1d4:	8809883a 	mov	r4,r17
   1d1d8:	b00b883a 	mov	r5,r22
   1d1dc:	1021883a 	mov	r16,r2
   1d1e0:	001d7a40 	call	1d7a4 <__udivsi3>
   1d1e4:	8006943a 	slli	r3,r16,16
   1d1e8:	1545383a 	mul	r2,r2,r21
   1d1ec:	a13fffcc 	andi	r4,r20,65535
   1d1f0:	1906b03a 	or	r3,r3,r4
   1d1f4:	1880532e 	bgeu	r3,r2,1d344 <__umoddi3+0x26c>
   1d1f8:	00004e06 	br	1d334 <__umoddi3+0x25c>
   1d1fc:	29c05536 	bltu	r5,r7,1d354 <__umoddi3+0x27c>
   1d200:	00bfffd4 	movui	r2,65535
   1d204:	11c0612e 	bgeu	r2,r7,1d38c <__umoddi3+0x2b4>
   1d208:	00804034 	movhi	r2,256
   1d20c:	10bfffc4 	addi	r2,r2,-1
   1d210:	11c0f82e 	bgeu	r2,r7,1d5f4 <__umoddi3+0x51c>
   1d214:	01400604 	movi	r5,24
   1d218:	282b883a 	mov	r21,r5
   1d21c:	394ad83a 	srl	r5,r7,r5
   1d220:	00c000f4 	movhi	r3,3
   1d224:	18e48904 	addi	r3,r3,-28124
   1d228:	194b883a 	add	r5,r3,r5
   1d22c:	28800003 	ldbu	r2,0(r5)
   1d230:	00c00804 	movi	r3,32
   1d234:	156b883a 	add	r21,r2,r21
   1d238:	1d69c83a 	sub	r20,r3,r21
   1d23c:	a000631e 	bne	r20,zero,1d3cc <__umoddi3+0x2f4>
   1d240:	3c400136 	bltu	r7,r17,1d248 <__umoddi3+0x170>
   1d244:	81810436 	bltu	r16,r6,1d658 <__umoddi3+0x580>
   1d248:	8185c83a 	sub	r2,r16,r6
   1d24c:	89e3c83a 	sub	r17,r17,r7
   1d250:	8087803a 	cmpltu	r3,r16,r2
   1d254:	88efc83a 	sub	r23,r17,r3
   1d258:	b807883a 	mov	r3,r23
   1d25c:	00003f06 	br	1d35c <__umoddi3+0x284>
   1d260:	3000041e 	bne	r6,zero,1d274 <__umoddi3+0x19c>
   1d264:	01000044 	movi	r4,1
   1d268:	000b883a 	mov	r5,zero
   1d26c:	001d7a40 	call	1d7a4 <__udivsi3>
   1d270:	1027883a 	mov	r19,r2
   1d274:	00bfffd4 	movui	r2,65535
   1d278:	14c04f2e 	bgeu	r2,r19,1d3b8 <__umoddi3+0x2e0>
   1d27c:	00804034 	movhi	r2,256
   1d280:	10bfffc4 	addi	r2,r2,-1
   1d284:	14c0e42e 	bgeu	r2,r19,1d618 <__umoddi3+0x540>
   1d288:	00800604 	movi	r2,24
   1d28c:	1007883a 	mov	r3,r2
   1d290:	9884d83a 	srl	r2,r19,r2
   1d294:	010000f4 	movhi	r4,3
   1d298:	21248904 	addi	r4,r4,-28124
   1d29c:	2085883a 	add	r2,r4,r2
   1d2a0:	11000003 	ldbu	r4,0(r2)
   1d2a4:	00800804 	movi	r2,32
   1d2a8:	20c7883a 	add	r3,r4,r3
   1d2ac:	10c5c83a 	sub	r2,r2,r3
   1d2b0:	10009a1e 	bne	r2,zero,1d51c <__umoddi3+0x444>
   1d2b4:	982cd43a 	srli	r22,r19,16
   1d2b8:	8ce3c83a 	sub	r17,r17,r19
   1d2bc:	9c3fffcc 	andi	r16,r19,65535
   1d2c0:	0025883a 	mov	r18,zero
   1d2c4:	8809883a 	mov	r4,r17
   1d2c8:	b00b883a 	mov	r5,r22
   1d2cc:	001d7b40 	call	1d7b4 <__umodsi3>
   1d2d0:	8809883a 	mov	r4,r17
   1d2d4:	b00b883a 	mov	r5,r22
   1d2d8:	102b883a 	mov	r21,r2
   1d2dc:	001d7a40 	call	1d7a4 <__udivsi3>
   1d2e0:	a806943a 	slli	r3,r21,16
   1d2e4:	a008d43a 	srli	r4,r20,16
   1d2e8:	1405383a 	mul	r2,r2,r16
   1d2ec:	190cb03a 	or	r6,r3,r4
   1d2f0:	3080032e 	bgeu	r6,r2,1d300 <__umoddi3+0x228>
   1d2f4:	34cd883a 	add	r6,r6,r19
   1d2f8:	34c00136 	bltu	r6,r19,1d300 <__umoddi3+0x228>
   1d2fc:	3080d436 	bltu	r6,r2,1d650 <__umoddi3+0x578>
   1d300:	30abc83a 	sub	r21,r6,r2
   1d304:	a809883a 	mov	r4,r21
   1d308:	b00b883a 	mov	r5,r22
   1d30c:	001d7b40 	call	1d7b4 <__umodsi3>
   1d310:	1023883a 	mov	r17,r2
   1d314:	a809883a 	mov	r4,r21
   1d318:	b00b883a 	mov	r5,r22
   1d31c:	001d7a40 	call	1d7a4 <__udivsi3>
   1d320:	8822943a 	slli	r17,r17,16
   1d324:	1405383a 	mul	r2,r2,r16
   1d328:	a13fffcc 	andi	r4,r20,65535
   1d32c:	8906b03a 	or	r3,r17,r4
   1d330:	1880042e 	bgeu	r3,r2,1d344 <__umoddi3+0x26c>
   1d334:	1cc7883a 	add	r3,r3,r19
   1d338:	1cc00236 	bltu	r3,r19,1d344 <__umoddi3+0x26c>
   1d33c:	1880012e 	bgeu	r3,r2,1d344 <__umoddi3+0x26c>
   1d340:	1cc7883a 	add	r3,r3,r19
   1d344:	1887c83a 	sub	r3,r3,r2
   1d348:	1c84d83a 	srl	r2,r3,r18
   1d34c:	0007883a 	mov	r3,zero
   1d350:	00000206 	br	1d35c <__umoddi3+0x284>
   1d354:	2005883a 	mov	r2,r4
   1d358:	2807883a 	mov	r3,r5
   1d35c:	dfc00b17 	ldw	ra,44(sp)
   1d360:	df000a17 	ldw	fp,40(sp)
   1d364:	ddc00917 	ldw	r23,36(sp)
   1d368:	dd800817 	ldw	r22,32(sp)
   1d36c:	dd400717 	ldw	r21,28(sp)
   1d370:	dd000617 	ldw	r20,24(sp)
   1d374:	dcc00517 	ldw	r19,20(sp)
   1d378:	dc800417 	ldw	r18,16(sp)
   1d37c:	dc400317 	ldw	r17,12(sp)
   1d380:	dc000217 	ldw	r16,8(sp)
   1d384:	dec00c04 	addi	sp,sp,48
   1d388:	f800283a 	ret
   1d38c:	00803fc4 	movi	r2,255
   1d390:	11c0952e 	bgeu	r2,r7,1d5e8 <__umoddi3+0x510>
   1d394:	01400204 	movi	r5,8
   1d398:	282b883a 	mov	r21,r5
   1d39c:	003f9f06 	br	1d21c <_gp+0xfffeb0fc>
   1d3a0:	00804034 	movhi	r2,256
   1d3a4:	10bfffc4 	addi	r2,r2,-1
   1d3a8:	1180952e 	bgeu	r2,r6,1d600 <__umoddi3+0x528>
   1d3ac:	01400604 	movi	r5,24
   1d3b0:	2805883a 	mov	r2,r5
   1d3b4:	003f6206 	br	1d140 <_gp+0xfffeb020>
   1d3b8:	00803fc4 	movi	r2,255
   1d3bc:	14c0932e 	bgeu	r2,r19,1d60c <__umoddi3+0x534>
   1d3c0:	00800204 	movi	r2,8
   1d3c4:	1007883a 	mov	r3,r2
   1d3c8:	003fb106 	br	1d290 <_gp+0xfffeb170>
   1d3cc:	3548d83a 	srl	r4,r6,r21
   1d3d0:	3d0e983a 	sll	r7,r7,r20
   1d3d4:	8d10983a 	sll	r8,r17,r20
   1d3d8:	8d6cd83a 	srl	r22,r17,r21
   1d3dc:	3922b03a 	or	r17,r7,r4
   1d3e0:	882ed43a 	srli	r23,r17,16
   1d3e4:	8564d83a 	srl	r18,r16,r21
   1d3e8:	b009883a 	mov	r4,r22
   1d3ec:	b80b883a 	mov	r5,r23
   1d3f0:	44a4b03a 	or	r18,r8,r18
   1d3f4:	3526983a 	sll	r19,r6,r20
   1d3f8:	001d7b40 	call	1d7b4 <__umodsi3>
   1d3fc:	b009883a 	mov	r4,r22
   1d400:	b80b883a 	mov	r5,r23
   1d404:	1039883a 	mov	fp,r2
   1d408:	001d7a40 	call	1d7a4 <__udivsi3>
   1d40c:	102d883a 	mov	r22,r2
   1d410:	8a3fffcc 	andi	r8,r17,65535
   1d414:	e004943a 	slli	r2,fp,16
   1d418:	900cd43a 	srli	r6,r18,16
   1d41c:	b239383a 	mul	fp,r22,r8
   1d420:	8520983a 	sll	r16,r16,r20
   1d424:	118ab03a 	or	r5,r2,r6
   1d428:	2f00042e 	bgeu	r5,fp,1d43c <__umoddi3+0x364>
   1d42c:	2c4b883a 	add	r5,r5,r17
   1d430:	b0bfffc4 	addi	r2,r22,-1
   1d434:	2c40822e 	bgeu	r5,r17,1d640 <__umoddi3+0x568>
   1d438:	102d883a 	mov	r22,r2
   1d43c:	2f39c83a 	sub	fp,r5,fp
   1d440:	e009883a 	mov	r4,fp
   1d444:	b80b883a 	mov	r5,r23
   1d448:	da000115 	stw	r8,4(sp)
   1d44c:	001d7b40 	call	1d7b4 <__umodsi3>
   1d450:	e009883a 	mov	r4,fp
   1d454:	b80b883a 	mov	r5,r23
   1d458:	d8800015 	stw	r2,0(sp)
   1d45c:	001d7a40 	call	1d7a4 <__udivsi3>
   1d460:	d9800017 	ldw	r6,0(sp)
   1d464:	da000117 	ldw	r8,4(sp)
   1d468:	94bfffcc 	andi	r18,r18,65535
   1d46c:	300c943a 	slli	r6,r6,16
   1d470:	1209383a 	mul	r4,r2,r8
   1d474:	3490b03a 	or	r8,r6,r18
   1d478:	4100042e 	bgeu	r8,r4,1d48c <__umoddi3+0x3b4>
   1d47c:	4451883a 	add	r8,r8,r17
   1d480:	10ffffc4 	addi	r3,r2,-1
   1d484:	44406a2e 	bgeu	r8,r17,1d630 <__umoddi3+0x558>
   1d488:	1805883a 	mov	r2,r3
   1d48c:	b012943a 	slli	r9,r22,16
   1d490:	9abfffcc 	andi	r10,r19,65535
   1d494:	980ed43a 	srli	r7,r19,16
   1d498:	124ab03a 	or	r5,r2,r9
   1d49c:	2a7fffcc 	andi	r9,r5,65535
   1d4a0:	280ad43a 	srli	r5,r5,16
   1d4a4:	4a8d383a 	mul	r6,r9,r10
   1d4a8:	49d3383a 	mul	r9,r9,r7
   1d4ac:	2a95383a 	mul	r10,r5,r10
   1d4b0:	3004d43a 	srli	r2,r6,16
   1d4b4:	4111c83a 	sub	r8,r8,r4
   1d4b8:	5253883a 	add	r9,r10,r9
   1d4bc:	4893883a 	add	r9,r9,r2
   1d4c0:	29cb383a 	mul	r5,r5,r7
   1d4c4:	4a80022e 	bgeu	r9,r10,1d4d0 <__umoddi3+0x3f8>
   1d4c8:	00800074 	movhi	r2,1
   1d4cc:	288b883a 	add	r5,r5,r2
   1d4d0:	4808d43a 	srli	r4,r9,16
   1d4d4:	4812943a 	slli	r9,r9,16
   1d4d8:	31bfffcc 	andi	r6,r6,65535
   1d4dc:	290b883a 	add	r5,r5,r4
   1d4e0:	498d883a 	add	r6,r9,r6
   1d4e4:	41403a36 	bltu	r8,r5,1d5d0 <__umoddi3+0x4f8>
   1d4e8:	41405d26 	beq	r8,r5,1d660 <__umoddi3+0x588>
   1d4ec:	4149c83a 	sub	r4,r8,r5
   1d4f0:	300f883a 	mov	r7,r6
   1d4f4:	81cfc83a 	sub	r7,r16,r7
   1d4f8:	81c7803a 	cmpltu	r3,r16,r7
   1d4fc:	20c7c83a 	sub	r3,r4,r3
   1d500:	1d44983a 	sll	r2,r3,r21
   1d504:	3d0ed83a 	srl	r7,r7,r20
   1d508:	1d06d83a 	srl	r3,r3,r20
   1d50c:	11c4b03a 	or	r2,r2,r7
   1d510:	003f9206 	br	1d35c <_gp+0xfffeb23c>
   1d514:	0025883a 	mov	r18,zero
   1d518:	003f1806 	br	1d17c <_gp+0xfffeb05c>
   1d51c:	98a6983a 	sll	r19,r19,r2
   1d520:	88e8d83a 	srl	r20,r17,r3
   1d524:	80c6d83a 	srl	r3,r16,r3
   1d528:	982cd43a 	srli	r22,r19,16
   1d52c:	88a2983a 	sll	r17,r17,r2
   1d530:	a009883a 	mov	r4,r20
   1d534:	b00b883a 	mov	r5,r22
   1d538:	88eab03a 	or	r21,r17,r3
   1d53c:	1025883a 	mov	r18,r2
   1d540:	001d7b40 	call	1d7b4 <__umodsi3>
   1d544:	a009883a 	mov	r4,r20
   1d548:	b00b883a 	mov	r5,r22
   1d54c:	1023883a 	mov	r17,r2
   1d550:	001d7a40 	call	1d7a4 <__udivsi3>
   1d554:	9f3fffcc 	andi	fp,r19,65535
   1d558:	8822943a 	slli	r17,r17,16
   1d55c:	a80ad43a 	srli	r5,r21,16
   1d560:	1705383a 	mul	r2,r2,fp
   1d564:	84a8983a 	sll	r20,r16,r18
   1d568:	8948b03a 	or	r4,r17,r5
   1d56c:	2080042e 	bgeu	r4,r2,1d580 <__umoddi3+0x4a8>
   1d570:	24c9883a 	add	r4,r4,r19
   1d574:	24c00236 	bltu	r4,r19,1d580 <__umoddi3+0x4a8>
   1d578:	2080012e 	bgeu	r4,r2,1d580 <__umoddi3+0x4a8>
   1d57c:	24c9883a 	add	r4,r4,r19
   1d580:	20afc83a 	sub	r23,r4,r2
   1d584:	b809883a 	mov	r4,r23
   1d588:	b00b883a 	mov	r5,r22
   1d58c:	001d7b40 	call	1d7b4 <__umodsi3>
   1d590:	1023883a 	mov	r17,r2
   1d594:	b809883a 	mov	r4,r23
   1d598:	b00b883a 	mov	r5,r22
   1d59c:	001d7a40 	call	1d7a4 <__udivsi3>
   1d5a0:	8822943a 	slli	r17,r17,16
   1d5a4:	1705383a 	mul	r2,r2,fp
   1d5a8:	a93fffcc 	andi	r4,r21,65535
   1d5ac:	8908b03a 	or	r4,r17,r4
   1d5b0:	2080042e 	bgeu	r4,r2,1d5c4 <__umoddi3+0x4ec>
   1d5b4:	24c9883a 	add	r4,r4,r19
   1d5b8:	24c00236 	bltu	r4,r19,1d5c4 <__umoddi3+0x4ec>
   1d5bc:	2080012e 	bgeu	r4,r2,1d5c4 <__umoddi3+0x4ec>
   1d5c0:	24c9883a 	add	r4,r4,r19
   1d5c4:	20a3c83a 	sub	r17,r4,r2
   1d5c8:	e021883a 	mov	r16,fp
   1d5cc:	003f3d06 	br	1d2c4 <_gp+0xfffeb1a4>
   1d5d0:	34cfc83a 	sub	r7,r6,r19
   1d5d4:	2c4bc83a 	sub	r5,r5,r17
   1d5d8:	31cd803a 	cmpltu	r6,r6,r7
   1d5dc:	298dc83a 	sub	r6,r5,r6
   1d5e0:	4189c83a 	sub	r4,r8,r6
   1d5e4:	003fc306 	br	1d4f4 <_gp+0xfffeb3d4>
   1d5e8:	000b883a 	mov	r5,zero
   1d5ec:	002b883a 	mov	r21,zero
   1d5f0:	003f0a06 	br	1d21c <_gp+0xfffeb0fc>
   1d5f4:	01400404 	movi	r5,16
   1d5f8:	282b883a 	mov	r21,r5
   1d5fc:	003f0706 	br	1d21c <_gp+0xfffeb0fc>
   1d600:	01400404 	movi	r5,16
   1d604:	2805883a 	mov	r2,r5
   1d608:	003ecd06 	br	1d140 <_gp+0xfffeb020>
   1d60c:	0005883a 	mov	r2,zero
   1d610:	0007883a 	mov	r3,zero
   1d614:	003f1e06 	br	1d290 <_gp+0xfffeb170>
   1d618:	00800404 	movi	r2,16
   1d61c:	1007883a 	mov	r3,r2
   1d620:	003f1b06 	br	1d290 <_gp+0xfffeb170>
   1d624:	000b883a 	mov	r5,zero
   1d628:	0005883a 	mov	r2,zero
   1d62c:	003ec406 	br	1d140 <_gp+0xfffeb020>
   1d630:	413f952e 	bgeu	r8,r4,1d488 <_gp+0xfffeb368>
   1d634:	10bfff84 	addi	r2,r2,-2
   1d638:	4451883a 	add	r8,r8,r17
   1d63c:	003f9306 	br	1d48c <_gp+0xfffeb36c>
   1d640:	2f3f7d2e 	bgeu	r5,fp,1d438 <_gp+0xfffeb318>
   1d644:	b5bfff84 	addi	r22,r22,-2
   1d648:	2c4b883a 	add	r5,r5,r17
   1d64c:	003f7b06 	br	1d43c <_gp+0xfffeb31c>
   1d650:	34cd883a 	add	r6,r6,r19
   1d654:	003f2a06 	br	1d300 <_gp+0xfffeb1e0>
   1d658:	8005883a 	mov	r2,r16
   1d65c:	003efe06 	br	1d258 <_gp+0xfffeb138>
   1d660:	81bfdb36 	bltu	r16,r6,1d5d0 <_gp+0xfffeb4b0>
   1d664:	300f883a 	mov	r7,r6
   1d668:	0009883a 	mov	r4,zero
   1d66c:	003fa106 	br	1d4f4 <_gp+0xfffeb3d4>

0001d670 <udivmodsi4>:
   1d670:	de00012e 	bgeu	sp,et,1d678 <udivmodsi4+0x8>
   1d674:	003b68fa 	trap	3
   1d678:	2900182e 	bgeu	r5,r4,1d6dc <udivmodsi4+0x6c>
   1d67c:	28001716 	blt	r5,zero,1d6dc <udivmodsi4+0x6c>
   1d680:	00800804 	movi	r2,32
   1d684:	00c00044 	movi	r3,1
   1d688:	00000206 	br	1d694 <udivmodsi4+0x24>
   1d68c:	10001126 	beq	r2,zero,1d6d4 <udivmodsi4+0x64>
   1d690:	28000516 	blt	r5,zero,1d6a8 <udivmodsi4+0x38>
   1d694:	294b883a 	add	r5,r5,r5
   1d698:	10bfffc4 	addi	r2,r2,-1
   1d69c:	18c7883a 	add	r3,r3,r3
   1d6a0:	293ffa36 	bltu	r5,r4,1d68c <_gp+0xfffeb56c>
   1d6a4:	18000b26 	beq	r3,zero,1d6d4 <udivmodsi4+0x64>
   1d6a8:	0005883a 	mov	r2,zero
   1d6ac:	21400236 	bltu	r4,r5,1d6b8 <udivmodsi4+0x48>
   1d6b0:	2149c83a 	sub	r4,r4,r5
   1d6b4:	10c4b03a 	or	r2,r2,r3
   1d6b8:	1806d07a 	srli	r3,r3,1
   1d6bc:	280ad07a 	srli	r5,r5,1
   1d6c0:	183ffa1e 	bne	r3,zero,1d6ac <_gp+0xfffeb58c>
   1d6c4:	3000011e 	bne	r6,zero,1d6cc <udivmodsi4+0x5c>
   1d6c8:	f800283a 	ret
   1d6cc:	2005883a 	mov	r2,r4
   1d6d0:	f800283a 	ret
   1d6d4:	0005883a 	mov	r2,zero
   1d6d8:	003ffa06 	br	1d6c4 <_gp+0xfffeb5a4>
   1d6dc:	00c00044 	movi	r3,1
   1d6e0:	003ff106 	br	1d6a8 <_gp+0xfffeb588>

0001d6e4 <__divsi3>:
   1d6e4:	defffe04 	addi	sp,sp,-8
   1d6e8:	de00012e 	bgeu	sp,et,1d6f0 <__divsi3+0xc>
   1d6ec:	003b68fa 	trap	3
   1d6f0:	dfc00115 	stw	ra,4(sp)
   1d6f4:	dc000015 	stw	r16,0(sp)
   1d6f8:	20000b16 	blt	r4,zero,1d728 <__divsi3+0x44>
   1d6fc:	0021883a 	mov	r16,zero
   1d700:	28000c16 	blt	r5,zero,1d734 <__divsi3+0x50>
   1d704:	000d883a 	mov	r6,zero
   1d708:	001d6700 	call	1d670 <udivmodsi4>
   1d70c:	0407c83a 	sub	r3,zero,r16
   1d710:	1884f03a 	xor	r2,r3,r2
   1d714:	1405883a 	add	r2,r2,r16
   1d718:	dfc00117 	ldw	ra,4(sp)
   1d71c:	dc000017 	ldw	r16,0(sp)
   1d720:	dec00204 	addi	sp,sp,8
   1d724:	f800283a 	ret
   1d728:	0109c83a 	sub	r4,zero,r4
   1d72c:	04000044 	movi	r16,1
   1d730:	283ff40e 	bge	r5,zero,1d704 <_gp+0xfffeb5e4>
   1d734:	014bc83a 	sub	r5,zero,r5
   1d738:	8400005c 	xori	r16,r16,1
   1d73c:	003ff106 	br	1d704 <_gp+0xfffeb5e4>

0001d740 <__modsi3>:
   1d740:	defffd04 	addi	sp,sp,-12
   1d744:	de00012e 	bgeu	sp,et,1d74c <__modsi3+0xc>
   1d748:	003b68fa 	trap	3
   1d74c:	dfc00215 	stw	ra,8(sp)
   1d750:	dc400115 	stw	r17,4(sp)
   1d754:	dc000015 	stw	r16,0(sp)
   1d758:	20000c16 	blt	r4,zero,1d78c <__modsi3+0x4c>
   1d75c:	0023883a 	mov	r17,zero
   1d760:	0021883a 	mov	r16,zero
   1d764:	28000d16 	blt	r5,zero,1d79c <__modsi3+0x5c>
   1d768:	01800044 	movi	r6,1
   1d76c:	001d6700 	call	1d670 <udivmodsi4>
   1d770:	1404f03a 	xor	r2,r2,r16
   1d774:	8885883a 	add	r2,r17,r2
   1d778:	dfc00217 	ldw	ra,8(sp)
   1d77c:	dc400117 	ldw	r17,4(sp)
   1d780:	dc000017 	ldw	r16,0(sp)
   1d784:	dec00304 	addi	sp,sp,12
   1d788:	f800283a 	ret
   1d78c:	0109c83a 	sub	r4,zero,r4
   1d790:	04400044 	movi	r17,1
   1d794:	043fffc4 	movi	r16,-1
   1d798:	283ff30e 	bge	r5,zero,1d768 <_gp+0xfffeb648>
   1d79c:	014bc83a 	sub	r5,zero,r5
   1d7a0:	003ff106 	br	1d768 <_gp+0xfffeb648>

0001d7a4 <__udivsi3>:
   1d7a4:	000d883a 	mov	r6,zero
   1d7a8:	de00012e 	bgeu	sp,et,1d7b0 <__udivsi3+0xc>
   1d7ac:	003b68fa 	trap	3
   1d7b0:	001d6701 	jmpi	1d670 <udivmodsi4>

0001d7b4 <__umodsi3>:
   1d7b4:	01800044 	movi	r6,1
   1d7b8:	de00012e 	bgeu	sp,et,1d7c0 <__umodsi3+0xc>
   1d7bc:	003b68fa 	trap	3
   1d7c0:	001d6701 	jmpi	1d670 <udivmodsi4>

0001d7c4 <__adddf3>:
   1d7c4:	02000434 	movhi	r8,16
   1d7c8:	423fffc4 	addi	r8,r8,-1
   1d7cc:	defffb04 	addi	sp,sp,-20
   1d7d0:	2a12703a 	and	r9,r5,r8
   1d7d4:	2806d7fa 	srli	r3,r5,31
   1d7d8:	3a10703a 	and	r8,r7,r8
   1d7dc:	de00012e 	bgeu	sp,et,1d7e4 <__adddf3+0x20>
   1d7e0:	003b68fa 	trap	3
   1d7e4:	3804d53a 	srli	r2,r7,20
   1d7e8:	3014d77a 	srli	r10,r6,29
   1d7ec:	dc000015 	stw	r16,0(sp)
   1d7f0:	481290fa 	slli	r9,r9,3
   1d7f4:	2820d53a 	srli	r16,r5,20
   1d7f8:	401090fa 	slli	r8,r8,3
   1d7fc:	200ad77a 	srli	r5,r4,29
   1d800:	380ed7fa 	srli	r7,r7,31
   1d804:	dc800215 	stw	r18,8(sp)
   1d808:	dc400115 	stw	r17,4(sp)
   1d80c:	dfc00415 	stw	ra,16(sp)
   1d810:	dcc00315 	stw	r19,12(sp)
   1d814:	1c803fcc 	andi	r18,r3,255
   1d818:	8401ffcc 	andi	r16,r16,2047
   1d81c:	494ab03a 	or	r5,r9,r5
   1d820:	202290fa 	slli	r17,r4,3
   1d824:	1081ffcc 	andi	r2,r2,2047
   1d828:	4290b03a 	or	r8,r8,r10
   1d82c:	300c90fa 	slli	r6,r6,3
   1d830:	91c07026 	beq	r18,r7,1d9f4 <__adddf3+0x230>
   1d834:	8087c83a 	sub	r3,r16,r2
   1d838:	00c0b30e 	bge	zero,r3,1db08 <__adddf3+0x344>
   1d83c:	10002a1e 	bne	r2,zero,1d8e8 <__adddf3+0x124>
   1d840:	4184b03a 	or	r2,r8,r6
   1d844:	1000991e 	bne	r2,zero,1daac <__adddf3+0x2e8>
   1d848:	888001cc 	andi	r2,r17,7
   1d84c:	10005b26 	beq	r2,zero,1d9bc <__adddf3+0x1f8>
   1d850:	88c003cc 	andi	r3,r17,15
   1d854:	00800104 	movi	r2,4
   1d858:	18805826 	beq	r3,r2,1d9bc <__adddf3+0x1f8>
   1d85c:	89800104 	addi	r6,r17,4
   1d860:	3463803a 	cmpltu	r17,r6,r17
   1d864:	2c4b883a 	add	r5,r5,r17
   1d868:	2880202c 	andhi	r2,r5,128
   1d86c:	9007883a 	mov	r3,r18
   1d870:	3023883a 	mov	r17,r6
   1d874:	10005426 	beq	r2,zero,1d9c8 <__adddf3+0x204>
   1d878:	84000044 	addi	r16,r16,1
   1d87c:	0081ffc4 	movi	r2,2047
   1d880:	8080c126 	beq	r16,r2,1db88 <__adddf3+0x3c4>
   1d884:	013fe034 	movhi	r4,65408
   1d888:	213fffc4 	addi	r4,r4,-1
   1d88c:	290a703a 	and	r5,r5,r4
   1d890:	2804977a 	slli	r2,r5,29
   1d894:	280a927a 	slli	r5,r5,9
   1d898:	8822d0fa 	srli	r17,r17,3
   1d89c:	8401ffcc 	andi	r16,r16,2047
   1d8a0:	2808d33a 	srli	r4,r5,12
   1d8a4:	1444b03a 	or	r2,r2,r17
   1d8a8:	8401ffcc 	andi	r16,r16,2047
   1d8ac:	800a953a 	slli	r5,r16,20
   1d8b0:	18c03fcc 	andi	r3,r3,255
   1d8b4:	04000434 	movhi	r16,16
   1d8b8:	180697fa 	slli	r3,r3,31
   1d8bc:	843fffc4 	addi	r16,r16,-1
   1d8c0:	2420703a 	and	r16,r4,r16
   1d8c4:	8160b03a 	or	r16,r16,r5
   1d8c8:	80c6b03a 	or	r3,r16,r3
   1d8cc:	dfc00417 	ldw	ra,16(sp)
   1d8d0:	dcc00317 	ldw	r19,12(sp)
   1d8d4:	dc800217 	ldw	r18,8(sp)
   1d8d8:	dc400117 	ldw	r17,4(sp)
   1d8dc:	dc000017 	ldw	r16,0(sp)
   1d8e0:	dec00504 	addi	sp,sp,20
   1d8e4:	f800283a 	ret
   1d8e8:	0081ffc4 	movi	r2,2047
   1d8ec:	80bfd626 	beq	r16,r2,1d848 <_gp+0xfffeb728>
   1d8f0:	42002034 	orhi	r8,r8,128
   1d8f4:	00800e04 	movi	r2,56
   1d8f8:	10c0a616 	blt	r2,r3,1db94 <__adddf3+0x3d0>
   1d8fc:	008007c4 	movi	r2,31
   1d900:	10c0c916 	blt	r2,r3,1dc28 <__adddf3+0x464>
   1d904:	00800804 	movi	r2,32
   1d908:	10c5c83a 	sub	r2,r2,r3
   1d90c:	408e983a 	sll	r7,r8,r2
   1d910:	30c8d83a 	srl	r4,r6,r3
   1d914:	3084983a 	sll	r2,r6,r2
   1d918:	40c6d83a 	srl	r3,r8,r3
   1d91c:	390cb03a 	or	r6,r7,r4
   1d920:	1004c03a 	cmpne	r2,r2,zero
   1d924:	308cb03a 	or	r6,r6,r2
   1d928:	898dc83a 	sub	r6,r17,r6
   1d92c:	89a3803a 	cmpltu	r17,r17,r6
   1d930:	28cbc83a 	sub	r5,r5,r3
   1d934:	2c4bc83a 	sub	r5,r5,r17
   1d938:	3023883a 	mov	r17,r6
   1d93c:	2880202c 	andhi	r2,r5,128
   1d940:	10006d26 	beq	r2,zero,1daf8 <__adddf3+0x334>
   1d944:	04c02034 	movhi	r19,128
   1d948:	9cffffc4 	addi	r19,r19,-1
   1d94c:	2ce6703a 	and	r19,r5,r19
   1d950:	98007e26 	beq	r19,zero,1db4c <__adddf3+0x388>
   1d954:	9809883a 	mov	r4,r19
   1d958:	001f4500 	call	1f450 <__clzsi2>
   1d95c:	10fffe04 	addi	r3,r2,-8
   1d960:	010007c4 	movi	r4,31
   1d964:	20c07f16 	blt	r4,r3,1db64 <__adddf3+0x3a0>
   1d968:	01400a04 	movi	r5,40
   1d96c:	2885c83a 	sub	r2,r5,r2
   1d970:	888ad83a 	srl	r5,r17,r2
   1d974:	98e6983a 	sll	r19,r19,r3
   1d978:	88e2983a 	sll	r17,r17,r3
   1d97c:	2ce6b03a 	or	r19,r5,r19
   1d980:	1c007c16 	blt	r3,r16,1db74 <__adddf3+0x3b0>
   1d984:	1c21c83a 	sub	r16,r3,r16
   1d988:	81400044 	addi	r5,r16,1
   1d98c:	00c007c4 	movi	r3,31
   1d990:	19409816 	blt	r3,r5,1dbf4 <__adddf3+0x430>
   1d994:	1c21c83a 	sub	r16,r3,r16
   1d998:	8c08983a 	sll	r4,r17,r16
   1d99c:	8946d83a 	srl	r3,r17,r5
   1d9a0:	9c20983a 	sll	r16,r19,r16
   1d9a4:	2008c03a 	cmpne	r4,r4,zero
   1d9a8:	994ad83a 	srl	r5,r19,r5
   1d9ac:	1c06b03a 	or	r3,r3,r16
   1d9b0:	1922b03a 	or	r17,r3,r4
   1d9b4:	0021883a 	mov	r16,zero
   1d9b8:	003fa306 	br	1d848 <_gp+0xfffeb728>
   1d9bc:	2880202c 	andhi	r2,r5,128
   1d9c0:	9007883a 	mov	r3,r18
   1d9c4:	103fac1e 	bne	r2,zero,1d878 <_gp+0xfffeb758>
   1d9c8:	2804977a 	slli	r2,r5,29
   1d9cc:	8822d0fa 	srli	r17,r17,3
   1d9d0:	0101ffc4 	movi	r4,2047
   1d9d4:	280ad0fa 	srli	r5,r5,3
   1d9d8:	1444b03a 	or	r2,r2,r17
   1d9dc:	81002c26 	beq	r16,r4,1da90 <__adddf3+0x2cc>
   1d9e0:	8120703a 	and	r16,r16,r4
   1d9e4:	01000434 	movhi	r4,16
   1d9e8:	213fffc4 	addi	r4,r4,-1
   1d9ec:	2908703a 	and	r4,r5,r4
   1d9f0:	003fad06 	br	1d8a8 <_gp+0xfffeb788>
   1d9f4:	8089c83a 	sub	r4,r16,r2
   1d9f8:	01006a0e 	bge	zero,r4,1dba4 <__adddf3+0x3e0>
   1d9fc:	10003326 	beq	r2,zero,1dacc <__adddf3+0x308>
   1da00:	0081ffc4 	movi	r2,2047
   1da04:	80bf9026 	beq	r16,r2,1d848 <_gp+0xfffeb728>
   1da08:	42002034 	orhi	r8,r8,128
   1da0c:	00800e04 	movi	r2,56
   1da10:	1100b116 	blt	r2,r4,1dcd8 <__adddf3+0x514>
   1da14:	008007c4 	movi	r2,31
   1da18:	1100e216 	blt	r2,r4,1dda4 <__adddf3+0x5e0>
   1da1c:	00800804 	movi	r2,32
   1da20:	1105c83a 	sub	r2,r2,r4
   1da24:	4092983a 	sll	r9,r8,r2
   1da28:	310ed83a 	srl	r7,r6,r4
   1da2c:	3084983a 	sll	r2,r6,r2
   1da30:	4110d83a 	srl	r8,r8,r4
   1da34:	49ccb03a 	or	r6,r9,r7
   1da38:	1004c03a 	cmpne	r2,r2,zero
   1da3c:	308cb03a 	or	r6,r6,r2
   1da40:	344d883a 	add	r6,r6,r17
   1da44:	3463803a 	cmpltu	r17,r6,r17
   1da48:	414b883a 	add	r5,r8,r5
   1da4c:	2c4b883a 	add	r5,r5,r17
   1da50:	3023883a 	mov	r17,r6
   1da54:	2880202c 	andhi	r2,r5,128
   1da58:	10002726 	beq	r2,zero,1daf8 <__adddf3+0x334>
   1da5c:	84000044 	addi	r16,r16,1
   1da60:	0081ffc4 	movi	r2,2047
   1da64:	8080ae26 	beq	r16,r2,1dd20 <__adddf3+0x55c>
   1da68:	00bfe034 	movhi	r2,65408
   1da6c:	10bfffc4 	addi	r2,r2,-1
   1da70:	288a703a 	and	r5,r5,r2
   1da74:	880cd07a 	srli	r6,r17,1
   1da78:	280897fa 	slli	r4,r5,31
   1da7c:	88c0004c 	andi	r3,r17,1
   1da80:	30e2b03a 	or	r17,r6,r3
   1da84:	280ad07a 	srli	r5,r5,1
   1da88:	8922b03a 	or	r17,r17,r4
   1da8c:	003f6e06 	br	1d848 <_gp+0xfffeb728>
   1da90:	1148b03a 	or	r4,r2,r5
   1da94:	20003c26 	beq	r4,zero,1db88 <__adddf3+0x3c4>
   1da98:	29000234 	orhi	r4,r5,8
   1da9c:	01400434 	movhi	r5,16
   1daa0:	297fffc4 	addi	r5,r5,-1
   1daa4:	2148703a 	and	r4,r4,r5
   1daa8:	003f7f06 	br	1d8a8 <_gp+0xfffeb788>
   1daac:	18ffffc4 	addi	r3,r3,-1
   1dab0:	18004d1e 	bne	r3,zero,1dbe8 <__adddf3+0x424>
   1dab4:	898dc83a 	sub	r6,r17,r6
   1dab8:	89a3803a 	cmpltu	r17,r17,r6
   1dabc:	2a0bc83a 	sub	r5,r5,r8
   1dac0:	2c4bc83a 	sub	r5,r5,r17
   1dac4:	3023883a 	mov	r17,r6
   1dac8:	003f9c06 	br	1d93c <_gp+0xfffeb81c>
   1dacc:	4184b03a 	or	r2,r8,r6
   1dad0:	103f5d26 	beq	r2,zero,1d848 <_gp+0xfffeb728>
   1dad4:	213fffc4 	addi	r4,r4,-1
   1dad8:	203fd926 	beq	r4,zero,1da40 <_gp+0xfffeb920>
   1dadc:	0081ffc4 	movi	r2,2047
   1dae0:	80bfca1e 	bne	r16,r2,1da0c <_gp+0xfffeb8ec>
   1dae4:	003f5806 	br	1d848 <_gp+0xfffeb728>
   1dae8:	10c8b03a 	or	r4,r2,r3
   1daec:	20008b26 	beq	r4,zero,1dd1c <__adddf3+0x558>
   1daf0:	100b883a 	mov	r5,r2
   1daf4:	1823883a 	mov	r17,r3
   1daf8:	888001cc 	andi	r2,r17,7
   1dafc:	103f541e 	bne	r2,zero,1d850 <_gp+0xfffeb730>
   1db00:	9007883a 	mov	r3,r18
   1db04:	003fb006 	br	1d9c8 <_gp+0xfffeb8a8>
   1db08:	1800531e 	bne	r3,zero,1dc58 <__adddf3+0x494>
   1db0c:	80800044 	addi	r2,r16,1
   1db10:	1081ffcc 	andi	r2,r2,2047
   1db14:	00c00044 	movi	r3,1
   1db18:	1880990e 	bge	r3,r2,1dd80 <__adddf3+0x5bc>
   1db1c:	8985c83a 	sub	r2,r17,r6
   1db20:	8887803a 	cmpltu	r3,r17,r2
   1db24:	2a27c83a 	sub	r19,r5,r8
   1db28:	98e7c83a 	sub	r19,r19,r3
   1db2c:	98c0202c 	andhi	r3,r19,128
   1db30:	18006226 	beq	r3,zero,1dcbc <__adddf3+0x4f8>
   1db34:	3463c83a 	sub	r17,r6,r17
   1db38:	4151c83a 	sub	r8,r8,r5
   1db3c:	344d803a 	cmpltu	r6,r6,r17
   1db40:	41a7c83a 	sub	r19,r8,r6
   1db44:	3825883a 	mov	r18,r7
   1db48:	983f821e 	bne	r19,zero,1d954 <_gp+0xfffeb834>
   1db4c:	8809883a 	mov	r4,r17
   1db50:	001f4500 	call	1f450 <__clzsi2>
   1db54:	10800804 	addi	r2,r2,32
   1db58:	10fffe04 	addi	r3,r2,-8
   1db5c:	010007c4 	movi	r4,31
   1db60:	20ff810e 	bge	r4,r3,1d968 <_gp+0xfffeb848>
   1db64:	14fff604 	addi	r19,r2,-40
   1db68:	8ce6983a 	sll	r19,r17,r19
   1db6c:	0023883a 	mov	r17,zero
   1db70:	1c3f840e 	bge	r3,r16,1d984 <_gp+0xfffeb864>
   1db74:	017fe034 	movhi	r5,65408
   1db78:	297fffc4 	addi	r5,r5,-1
   1db7c:	80e1c83a 	sub	r16,r16,r3
   1db80:	994a703a 	and	r5,r19,r5
   1db84:	003f3006 	br	1d848 <_gp+0xfffeb728>
   1db88:	0009883a 	mov	r4,zero
   1db8c:	0005883a 	mov	r2,zero
   1db90:	003f4506 	br	1d8a8 <_gp+0xfffeb788>
   1db94:	418cb03a 	or	r6,r8,r6
   1db98:	300cc03a 	cmpne	r6,r6,zero
   1db9c:	0007883a 	mov	r3,zero
   1dba0:	003f6106 	br	1d928 <_gp+0xfffeb808>
   1dba4:	2000921e 	bne	r4,zero,1ddf0 <__adddf3+0x62c>
   1dba8:	80800044 	addi	r2,r16,1
   1dbac:	11c1ffcc 	andi	r7,r2,2047
   1dbb0:	01000044 	movi	r4,1
   1dbb4:	21c0610e 	bge	r4,r7,1dd3c <__adddf3+0x578>
   1dbb8:	0101ffc4 	movi	r4,2047
   1dbbc:	1100a326 	beq	r2,r4,1de4c <__adddf3+0x688>
   1dbc0:	344d883a 	add	r6,r6,r17
   1dbc4:	3463803a 	cmpltu	r17,r6,r17
   1dbc8:	414b883a 	add	r5,r8,r5
   1dbcc:	2c4b883a 	add	r5,r5,r17
   1dbd0:	282297fa 	slli	r17,r5,31
   1dbd4:	300cd07a 	srli	r6,r6,1
   1dbd8:	280ad07a 	srli	r5,r5,1
   1dbdc:	1021883a 	mov	r16,r2
   1dbe0:	89a2b03a 	or	r17,r17,r6
   1dbe4:	003f1806 	br	1d848 <_gp+0xfffeb728>
   1dbe8:	0081ffc4 	movi	r2,2047
   1dbec:	80bf411e 	bne	r16,r2,1d8f4 <_gp+0xfffeb7d4>
   1dbf0:	003f1506 	br	1d848 <_gp+0xfffeb728>
   1dbf4:	80bff844 	addi	r2,r16,-31
   1dbf8:	00c00804 	movi	r3,32
   1dbfc:	9884d83a 	srl	r2,r19,r2
   1dc00:	28c04a26 	beq	r5,r3,1dd2c <__adddf3+0x568>
   1dc04:	00c00fc4 	movi	r3,63
   1dc08:	1c21c83a 	sub	r16,r3,r16
   1dc0c:	9c26983a 	sll	r19,r19,r16
   1dc10:	9c62b03a 	or	r17,r19,r17
   1dc14:	8822c03a 	cmpne	r17,r17,zero
   1dc18:	88a2b03a 	or	r17,r17,r2
   1dc1c:	000b883a 	mov	r5,zero
   1dc20:	0021883a 	mov	r16,zero
   1dc24:	003fb406 	br	1daf8 <_gp+0xfffeb9d8>
   1dc28:	18bff804 	addi	r2,r3,-32
   1dc2c:	01000804 	movi	r4,32
   1dc30:	4084d83a 	srl	r2,r8,r2
   1dc34:	19003f26 	beq	r3,r4,1dd34 <__adddf3+0x570>
   1dc38:	01001004 	movi	r4,64
   1dc3c:	20c7c83a 	sub	r3,r4,r3
   1dc40:	40d0983a 	sll	r8,r8,r3
   1dc44:	418cb03a 	or	r6,r8,r6
   1dc48:	300cc03a 	cmpne	r6,r6,zero
   1dc4c:	308cb03a 	or	r6,r6,r2
   1dc50:	0007883a 	mov	r3,zero
   1dc54:	003f3406 	br	1d928 <_gp+0xfffeb808>
   1dc58:	80002326 	beq	r16,zero,1dce8 <__adddf3+0x524>
   1dc5c:	0101ffc4 	movi	r4,2047
   1dc60:	11005e26 	beq	r2,r4,1dddc <__adddf3+0x618>
   1dc64:	00c7c83a 	sub	r3,zero,r3
   1dc68:	29402034 	orhi	r5,r5,128
   1dc6c:	01000e04 	movi	r4,56
   1dc70:	20c07216 	blt	r4,r3,1de3c <__adddf3+0x678>
   1dc74:	010007c4 	movi	r4,31
   1dc78:	20c0ce16 	blt	r4,r3,1dfb4 <__adddf3+0x7f0>
   1dc7c:	01000804 	movi	r4,32
   1dc80:	20c9c83a 	sub	r4,r4,r3
   1dc84:	2914983a 	sll	r10,r5,r4
   1dc88:	88d2d83a 	srl	r9,r17,r3
   1dc8c:	8908983a 	sll	r4,r17,r4
   1dc90:	28c6d83a 	srl	r3,r5,r3
   1dc94:	5262b03a 	or	r17,r10,r9
   1dc98:	2008c03a 	cmpne	r4,r4,zero
   1dc9c:	8922b03a 	or	r17,r17,r4
   1dca0:	3463c83a 	sub	r17,r6,r17
   1dca4:	40c7c83a 	sub	r3,r8,r3
   1dca8:	344d803a 	cmpltu	r6,r6,r17
   1dcac:	198bc83a 	sub	r5,r3,r6
   1dcb0:	1021883a 	mov	r16,r2
   1dcb4:	3825883a 	mov	r18,r7
   1dcb8:	003f2006 	br	1d93c <_gp+0xfffeb81c>
   1dcbc:	9886b03a 	or	r3,r19,r2
   1dcc0:	1800141e 	bne	r3,zero,1dd14 <__adddf3+0x550>
   1dcc4:	0007883a 	mov	r3,zero
   1dcc8:	000b883a 	mov	r5,zero
   1dccc:	0023883a 	mov	r17,zero
   1dcd0:	0021883a 	mov	r16,zero
   1dcd4:	003f3c06 	br	1d9c8 <_gp+0xfffeb8a8>
   1dcd8:	418cb03a 	or	r6,r8,r6
   1dcdc:	300cc03a 	cmpne	r6,r6,zero
   1dce0:	0011883a 	mov	r8,zero
   1dce4:	003f5606 	br	1da40 <_gp+0xfffeb920>
   1dce8:	2c48b03a 	or	r4,r5,r17
   1dcec:	20003b26 	beq	r4,zero,1dddc <__adddf3+0x618>
   1dcf0:	00c6303a 	nor	r3,zero,r3
   1dcf4:	1800371e 	bne	r3,zero,1ddd4 <__adddf3+0x610>
   1dcf8:	3463c83a 	sub	r17,r6,r17
   1dcfc:	414bc83a 	sub	r5,r8,r5
   1dd00:	344d803a 	cmpltu	r6,r6,r17
   1dd04:	298bc83a 	sub	r5,r5,r6
   1dd08:	1021883a 	mov	r16,r2
   1dd0c:	3825883a 	mov	r18,r7
   1dd10:	003f0a06 	br	1d93c <_gp+0xfffeb81c>
   1dd14:	1023883a 	mov	r17,r2
   1dd18:	003f0d06 	br	1d950 <_gp+0xfffeb830>
   1dd1c:	0007883a 	mov	r3,zero
   1dd20:	000b883a 	mov	r5,zero
   1dd24:	0023883a 	mov	r17,zero
   1dd28:	003f2706 	br	1d9c8 <_gp+0xfffeb8a8>
   1dd2c:	0027883a 	mov	r19,zero
   1dd30:	003fb706 	br	1dc10 <_gp+0xfffebaf0>
   1dd34:	0011883a 	mov	r8,zero
   1dd38:	003fc206 	br	1dc44 <_gp+0xfffebb24>
   1dd3c:	2c44b03a 	or	r2,r5,r17
   1dd40:	8000871e 	bne	r16,zero,1df60 <__adddf3+0x79c>
   1dd44:	1000b126 	beq	r2,zero,1e00c <__adddf3+0x848>
   1dd48:	4184b03a 	or	r2,r8,r6
   1dd4c:	103ebe26 	beq	r2,zero,1d848 <_gp+0xfffeb728>
   1dd50:	3445883a 	add	r2,r6,r17
   1dd54:	1463803a 	cmpltu	r17,r2,r17
   1dd58:	414b883a 	add	r5,r8,r5
   1dd5c:	2c4b883a 	add	r5,r5,r17
   1dd60:	28c0202c 	andhi	r3,r5,128
   1dd64:	1023883a 	mov	r17,r2
   1dd68:	183f6326 	beq	r3,zero,1daf8 <_gp+0xfffeb9d8>
   1dd6c:	00bfe034 	movhi	r2,65408
   1dd70:	10bfffc4 	addi	r2,r2,-1
   1dd74:	2021883a 	mov	r16,r4
   1dd78:	288a703a 	and	r5,r5,r2
   1dd7c:	003eb206 	br	1d848 <_gp+0xfffeb728>
   1dd80:	2c44b03a 	or	r2,r5,r17
   1dd84:	8000251e 	bne	r16,zero,1de1c <__adddf3+0x658>
   1dd88:	10004b1e 	bne	r2,zero,1deb8 <__adddf3+0x6f4>
   1dd8c:	4184b03a 	or	r2,r8,r6
   1dd90:	103fe226 	beq	r2,zero,1dd1c <_gp+0xfffebbfc>
   1dd94:	400b883a 	mov	r5,r8
   1dd98:	3023883a 	mov	r17,r6
   1dd9c:	3825883a 	mov	r18,r7
   1dda0:	003ea906 	br	1d848 <_gp+0xfffeb728>
   1dda4:	20bff804 	addi	r2,r4,-32
   1dda8:	01c00804 	movi	r7,32
   1ddac:	4084d83a 	srl	r2,r8,r2
   1ddb0:	21c07e26 	beq	r4,r7,1dfac <__adddf3+0x7e8>
   1ddb4:	01c01004 	movi	r7,64
   1ddb8:	3909c83a 	sub	r4,r7,r4
   1ddbc:	4110983a 	sll	r8,r8,r4
   1ddc0:	418cb03a 	or	r6,r8,r6
   1ddc4:	300cc03a 	cmpne	r6,r6,zero
   1ddc8:	308cb03a 	or	r6,r6,r2
   1ddcc:	0011883a 	mov	r8,zero
   1ddd0:	003f1b06 	br	1da40 <_gp+0xfffeb920>
   1ddd4:	0101ffc4 	movi	r4,2047
   1ddd8:	113fa41e 	bne	r2,r4,1dc6c <_gp+0xfffebb4c>
   1dddc:	400b883a 	mov	r5,r8
   1dde0:	3023883a 	mov	r17,r6
   1dde4:	1021883a 	mov	r16,r2
   1dde8:	3825883a 	mov	r18,r7
   1ddec:	003e9606 	br	1d848 <_gp+0xfffeb728>
   1ddf0:	80001a1e 	bne	r16,zero,1de5c <__adddf3+0x698>
   1ddf4:	2c4eb03a 	or	r7,r5,r17
   1ddf8:	38005526 	beq	r7,zero,1df50 <__adddf3+0x78c>
   1ddfc:	0108303a 	nor	r4,zero,r4
   1de00:	2000511e 	bne	r4,zero,1df48 <__adddf3+0x784>
   1de04:	89a3883a 	add	r17,r17,r6
   1de08:	414b883a 	add	r5,r8,r5
   1de0c:	898d803a 	cmpltu	r6,r17,r6
   1de10:	298b883a 	add	r5,r5,r6
   1de14:	1021883a 	mov	r16,r2
   1de18:	003f0e06 	br	1da54 <_gp+0xfffeb934>
   1de1c:	1000341e 	bne	r2,zero,1def0 <__adddf3+0x72c>
   1de20:	4184b03a 	or	r2,r8,r6
   1de24:	10006f26 	beq	r2,zero,1dfe4 <__adddf3+0x820>
   1de28:	400b883a 	mov	r5,r8
   1de2c:	3023883a 	mov	r17,r6
   1de30:	3825883a 	mov	r18,r7
   1de34:	0401ffc4 	movi	r16,2047
   1de38:	003e8306 	br	1d848 <_gp+0xfffeb728>
   1de3c:	2c62b03a 	or	r17,r5,r17
   1de40:	8822c03a 	cmpne	r17,r17,zero
   1de44:	0007883a 	mov	r3,zero
   1de48:	003f9506 	br	1dca0 <_gp+0xfffebb80>
   1de4c:	1021883a 	mov	r16,r2
   1de50:	000b883a 	mov	r5,zero
   1de54:	0023883a 	mov	r17,zero
   1de58:	003edb06 	br	1d9c8 <_gp+0xfffeb8a8>
   1de5c:	01c1ffc4 	movi	r7,2047
   1de60:	11c03b26 	beq	r2,r7,1df50 <__adddf3+0x78c>
   1de64:	0109c83a 	sub	r4,zero,r4
   1de68:	29402034 	orhi	r5,r5,128
   1de6c:	01c00e04 	movi	r7,56
   1de70:	39006216 	blt	r7,r4,1dffc <__adddf3+0x838>
   1de74:	01c007c4 	movi	r7,31
   1de78:	39006b16 	blt	r7,r4,1e028 <__adddf3+0x864>
   1de7c:	01c00804 	movi	r7,32
   1de80:	390fc83a 	sub	r7,r7,r4
   1de84:	29d4983a 	sll	r10,r5,r7
   1de88:	8912d83a 	srl	r9,r17,r4
   1de8c:	89ce983a 	sll	r7,r17,r7
   1de90:	2908d83a 	srl	r4,r5,r4
   1de94:	5262b03a 	or	r17,r10,r9
   1de98:	380ac03a 	cmpne	r5,r7,zero
   1de9c:	8962b03a 	or	r17,r17,r5
   1dea0:	89a3883a 	add	r17,r17,r6
   1dea4:	2211883a 	add	r8,r4,r8
   1dea8:	898d803a 	cmpltu	r6,r17,r6
   1deac:	418b883a 	add	r5,r8,r6
   1deb0:	1021883a 	mov	r16,r2
   1deb4:	003ee706 	br	1da54 <_gp+0xfffeb934>
   1deb8:	4184b03a 	or	r2,r8,r6
   1debc:	103e6226 	beq	r2,zero,1d848 <_gp+0xfffeb728>
   1dec0:	8987c83a 	sub	r3,r17,r6
   1dec4:	88c9803a 	cmpltu	r4,r17,r3
   1dec8:	2a05c83a 	sub	r2,r5,r8
   1decc:	1105c83a 	sub	r2,r2,r4
   1ded0:	1100202c 	andhi	r4,r2,128
   1ded4:	203f0426 	beq	r4,zero,1dae8 <_gp+0xfffeb9c8>
   1ded8:	3463c83a 	sub	r17,r6,r17
   1dedc:	414bc83a 	sub	r5,r8,r5
   1dee0:	344d803a 	cmpltu	r6,r6,r17
   1dee4:	298bc83a 	sub	r5,r5,r6
   1dee8:	3825883a 	mov	r18,r7
   1deec:	003e5606 	br	1d848 <_gp+0xfffeb728>
   1def0:	4184b03a 	or	r2,r8,r6
   1def4:	10002b26 	beq	r2,zero,1dfa4 <__adddf3+0x7e0>
   1def8:	2804d0fa 	srli	r2,r5,3
   1defc:	8822d0fa 	srli	r17,r17,3
   1df00:	280a977a 	slli	r5,r5,29
   1df04:	10c0022c 	andhi	r3,r2,8
   1df08:	2c62b03a 	or	r17,r5,r17
   1df0c:	18000826 	beq	r3,zero,1df30 <__adddf3+0x76c>
   1df10:	4008d0fa 	srli	r4,r8,3
   1df14:	20c0022c 	andhi	r3,r4,8
   1df18:	1800051e 	bne	r3,zero,1df30 <__adddf3+0x76c>
   1df1c:	300cd0fa 	srli	r6,r6,3
   1df20:	4010977a 	slli	r8,r8,29
   1df24:	2005883a 	mov	r2,r4
   1df28:	3825883a 	mov	r18,r7
   1df2c:	41a2b03a 	or	r17,r8,r6
   1df30:	880ad77a 	srli	r5,r17,29
   1df34:	100490fa 	slli	r2,r2,3
   1df38:	882290fa 	slli	r17,r17,3
   1df3c:	0401ffc4 	movi	r16,2047
   1df40:	288ab03a 	or	r5,r5,r2
   1df44:	003e4006 	br	1d848 <_gp+0xfffeb728>
   1df48:	01c1ffc4 	movi	r7,2047
   1df4c:	11ffc71e 	bne	r2,r7,1de6c <_gp+0xfffebd4c>
   1df50:	400b883a 	mov	r5,r8
   1df54:	3023883a 	mov	r17,r6
   1df58:	1021883a 	mov	r16,r2
   1df5c:	003e3a06 	br	1d848 <_gp+0xfffeb728>
   1df60:	10002d26 	beq	r2,zero,1e018 <__adddf3+0x854>
   1df64:	4184b03a 	or	r2,r8,r6
   1df68:	10000e26 	beq	r2,zero,1dfa4 <__adddf3+0x7e0>
   1df6c:	2804d0fa 	srli	r2,r5,3
   1df70:	8822d0fa 	srli	r17,r17,3
   1df74:	280a977a 	slli	r5,r5,29
   1df78:	10c0022c 	andhi	r3,r2,8
   1df7c:	2c62b03a 	or	r17,r5,r17
   1df80:	183feb26 	beq	r3,zero,1df30 <_gp+0xfffebe10>
   1df84:	4008d0fa 	srli	r4,r8,3
   1df88:	20c0022c 	andhi	r3,r4,8
   1df8c:	183fe81e 	bne	r3,zero,1df30 <_gp+0xfffebe10>
   1df90:	300cd0fa 	srli	r6,r6,3
   1df94:	4010977a 	slli	r8,r8,29
   1df98:	2005883a 	mov	r2,r4
   1df9c:	41a2b03a 	or	r17,r8,r6
   1dfa0:	003fe306 	br	1df30 <_gp+0xfffebe10>
   1dfa4:	0401ffc4 	movi	r16,2047
   1dfa8:	003e2706 	br	1d848 <_gp+0xfffeb728>
   1dfac:	0011883a 	mov	r8,zero
   1dfb0:	003f8306 	br	1ddc0 <_gp+0xfffebca0>
   1dfb4:	193ff804 	addi	r4,r3,-32
   1dfb8:	02400804 	movi	r9,32
   1dfbc:	2908d83a 	srl	r4,r5,r4
   1dfc0:	1a402526 	beq	r3,r9,1e058 <__adddf3+0x894>
   1dfc4:	02401004 	movi	r9,64
   1dfc8:	48c7c83a 	sub	r3,r9,r3
   1dfcc:	28ca983a 	sll	r5,r5,r3
   1dfd0:	2c62b03a 	or	r17,r5,r17
   1dfd4:	8822c03a 	cmpne	r17,r17,zero
   1dfd8:	8922b03a 	or	r17,r17,r4
   1dfdc:	0007883a 	mov	r3,zero
   1dfe0:	003f2f06 	br	1dca0 <_gp+0xfffebb80>
   1dfe4:	01402034 	movhi	r5,128
   1dfe8:	0007883a 	mov	r3,zero
   1dfec:	297fffc4 	addi	r5,r5,-1
   1dff0:	047ffe04 	movi	r17,-8
   1dff4:	0401ffc4 	movi	r16,2047
   1dff8:	003e7306 	br	1d9c8 <_gp+0xfffeb8a8>
   1dffc:	2c62b03a 	or	r17,r5,r17
   1e000:	8822c03a 	cmpne	r17,r17,zero
   1e004:	0009883a 	mov	r4,zero
   1e008:	003fa506 	br	1dea0 <_gp+0xfffebd80>
   1e00c:	400b883a 	mov	r5,r8
   1e010:	3023883a 	mov	r17,r6
   1e014:	003e0c06 	br	1d848 <_gp+0xfffeb728>
   1e018:	400b883a 	mov	r5,r8
   1e01c:	3023883a 	mov	r17,r6
   1e020:	0401ffc4 	movi	r16,2047
   1e024:	003e0806 	br	1d848 <_gp+0xfffeb728>
   1e028:	21fff804 	addi	r7,r4,-32
   1e02c:	02400804 	movi	r9,32
   1e030:	29ced83a 	srl	r7,r5,r7
   1e034:	22400a26 	beq	r4,r9,1e060 <__adddf3+0x89c>
   1e038:	02401004 	movi	r9,64
   1e03c:	4909c83a 	sub	r4,r9,r4
   1e040:	290a983a 	sll	r5,r5,r4
   1e044:	2c62b03a 	or	r17,r5,r17
   1e048:	8822c03a 	cmpne	r17,r17,zero
   1e04c:	89e2b03a 	or	r17,r17,r7
   1e050:	0009883a 	mov	r4,zero
   1e054:	003f9206 	br	1dea0 <_gp+0xfffebd80>
   1e058:	000b883a 	mov	r5,zero
   1e05c:	003fdc06 	br	1dfd0 <_gp+0xfffebeb0>
   1e060:	000b883a 	mov	r5,zero
   1e064:	003ff706 	br	1e044 <_gp+0xfffebf24>

0001e068 <__gedf2>:
   1e068:	2804d53a 	srli	r2,r5,20
   1e06c:	3806d53a 	srli	r3,r7,20
   1e070:	02000434 	movhi	r8,16
   1e074:	423fffc4 	addi	r8,r8,-1
   1e078:	0241ffc4 	movi	r9,2047
   1e07c:	1081ffcc 	andi	r2,r2,2047
   1e080:	2a14703a 	and	r10,r5,r8
   1e084:	de00012e 	bgeu	sp,et,1e08c <__gedf2+0x24>
   1e088:	003b68fa 	trap	3
   1e08c:	3a10703a 	and	r8,r7,r8
   1e090:	280ad7fa 	srli	r5,r5,31
   1e094:	1a46703a 	and	r3,r3,r9
   1e098:	380ed7fa 	srli	r7,r7,31
   1e09c:	12400b26 	beq	r2,r9,1e0cc <__gedf2+0x64>
   1e0a0:	1a401626 	beq	r3,r9,1e0fc <__gedf2+0x94>
   1e0a4:	10000c1e 	bne	r2,zero,1e0d8 <__gedf2+0x70>
   1e0a8:	5112b03a 	or	r9,r10,r4
   1e0ac:	4813003a 	cmpeq	r9,r9,zero
   1e0b0:	4817883a 	mov	r11,r9
   1e0b4:	18000c1e 	bne	r3,zero,1e0e8 <__gedf2+0x80>
   1e0b8:	4198b03a 	or	r12,r8,r6
   1e0bc:	60000a1e 	bne	r12,zero,1e0e8 <__gedf2+0x80>
   1e0c0:	48001326 	beq	r9,zero,1e110 <__gedf2+0xa8>
   1e0c4:	0005883a 	mov	r2,zero
   1e0c8:	f800283a 	ret
   1e0cc:	5112b03a 	or	r9,r10,r4
   1e0d0:	4800191e 	bne	r9,zero,1e138 <__gedf2+0xd0>
   1e0d4:	18800926 	beq	r3,r2,1e0fc <__gedf2+0x94>
   1e0d8:	18000b1e 	bne	r3,zero,1e108 <__gedf2+0xa0>
   1e0dc:	4192b03a 	or	r9,r8,r6
   1e0e0:	0017883a 	mov	r11,zero
   1e0e4:	48000a26 	beq	r9,zero,1e110 <__gedf2+0xa8>
   1e0e8:	39c03fcc 	andi	r7,r7,255
   1e0ec:	58000726 	beq	r11,zero,1e10c <__gedf2+0xa4>
   1e0f0:	3800081e 	bne	r7,zero,1e114 <__gedf2+0xac>
   1e0f4:	00bfffc4 	movi	r2,-1
   1e0f8:	f800283a 	ret
   1e0fc:	4192b03a 	or	r9,r8,r6
   1e100:	48000d1e 	bne	r9,zero,1e138 <__gedf2+0xd0>
   1e104:	103fe826 	beq	r2,zero,1e0a8 <_gp+0xfffebf88>
   1e108:	39c03fcc 	andi	r7,r7,255
   1e10c:	29c00326 	beq	r5,r7,1e11c <__gedf2+0xb4>
   1e110:	283ff81e 	bne	r5,zero,1e0f4 <_gp+0xfffebfd4>
   1e114:	00800044 	movi	r2,1
   1e118:	f800283a 	ret
   1e11c:	18bffc16 	blt	r3,r2,1e110 <_gp+0xfffebff0>
   1e120:	10c00316 	blt	r2,r3,1e130 <__gedf2+0xc8>
   1e124:	42bffa36 	bltu	r8,r10,1e110 <_gp+0xfffebff0>
   1e128:	52000526 	beq	r10,r8,1e140 <__gedf2+0xd8>
   1e12c:	523fe52e 	bgeu	r10,r8,1e0c4 <_gp+0xfffebfa4>
   1e130:	283ff026 	beq	r5,zero,1e0f4 <_gp+0xfffebfd4>
   1e134:	003ff706 	br	1e114 <_gp+0xfffebff4>
   1e138:	00bfff84 	movi	r2,-2
   1e13c:	f800283a 	ret
   1e140:	313ff336 	bltu	r6,r4,1e110 <_gp+0xfffebff0>
   1e144:	21bfdf2e 	bgeu	r4,r6,1e0c4 <_gp+0xfffebfa4>
   1e148:	283fea26 	beq	r5,zero,1e0f4 <_gp+0xfffebfd4>
   1e14c:	003ff106 	br	1e114 <_gp+0xfffebff4>

0001e150 <__ledf2>:
   1e150:	2804d53a 	srli	r2,r5,20
   1e154:	3810d53a 	srli	r8,r7,20
   1e158:	00c00434 	movhi	r3,16
   1e15c:	18ffffc4 	addi	r3,r3,-1
   1e160:	0241ffc4 	movi	r9,2047
   1e164:	1081ffcc 	andi	r2,r2,2047
   1e168:	28d4703a 	and	r10,r5,r3
   1e16c:	de00012e 	bgeu	sp,et,1e174 <__ledf2+0x24>
   1e170:	003b68fa 	trap	3
   1e174:	38c6703a 	and	r3,r7,r3
   1e178:	280ad7fa 	srli	r5,r5,31
   1e17c:	4250703a 	and	r8,r8,r9
   1e180:	380ed7fa 	srli	r7,r7,31
   1e184:	12400b26 	beq	r2,r9,1e1b4 <__ledf2+0x64>
   1e188:	42401926 	beq	r8,r9,1e1f0 <__ledf2+0xa0>
   1e18c:	10000c1e 	bne	r2,zero,1e1c0 <__ledf2+0x70>
   1e190:	5112b03a 	or	r9,r10,r4
   1e194:	4813003a 	cmpeq	r9,r9,zero
   1e198:	4817883a 	mov	r11,r9
   1e19c:	40000f26 	beq	r8,zero,1e1dc <__ledf2+0x8c>
   1e1a0:	39c03fcc 	andi	r7,r7,255
   1e1a4:	58001826 	beq	r11,zero,1e208 <__ledf2+0xb8>
   1e1a8:	38000a1e 	bne	r7,zero,1e1d4 <__ledf2+0x84>
   1e1ac:	00bfffc4 	movi	r2,-1
   1e1b0:	f800283a 	ret
   1e1b4:	5112b03a 	or	r9,r10,r4
   1e1b8:	48000f1e 	bne	r9,zero,1e1f8 <__ledf2+0xa8>
   1e1bc:	40800c26 	beq	r8,r2,1e1f0 <__ledf2+0xa0>
   1e1c0:	4000101e 	bne	r8,zero,1e204 <__ledf2+0xb4>
   1e1c4:	1992b03a 	or	r9,r3,r6
   1e1c8:	0017883a 	mov	r11,zero
   1e1cc:	483ff41e 	bne	r9,zero,1e1a0 <_gp+0xfffec080>
   1e1d0:	283ff61e 	bne	r5,zero,1e1ac <_gp+0xfffec08c>
   1e1d4:	00800044 	movi	r2,1
   1e1d8:	f800283a 	ret
   1e1dc:	1998b03a 	or	r12,r3,r6
   1e1e0:	603fef1e 	bne	r12,zero,1e1a0 <_gp+0xfffec080>
   1e1e4:	483ffa26 	beq	r9,zero,1e1d0 <_gp+0xfffec0b0>
   1e1e8:	0005883a 	mov	r2,zero
   1e1ec:	f800283a 	ret
   1e1f0:	1992b03a 	or	r9,r3,r6
   1e1f4:	48000226 	beq	r9,zero,1e200 <__ledf2+0xb0>
   1e1f8:	00800084 	movi	r2,2
   1e1fc:	f800283a 	ret
   1e200:	103fe326 	beq	r2,zero,1e190 <_gp+0xfffec070>
   1e204:	39c03fcc 	andi	r7,r7,255
   1e208:	29fff11e 	bne	r5,r7,1e1d0 <_gp+0xfffec0b0>
   1e20c:	40bff016 	blt	r8,r2,1e1d0 <_gp+0xfffec0b0>
   1e210:	12000316 	blt	r2,r8,1e220 <__ledf2+0xd0>
   1e214:	1abfee36 	bltu	r3,r10,1e1d0 <_gp+0xfffec0b0>
   1e218:	50c00326 	beq	r10,r3,1e228 <__ledf2+0xd8>
   1e21c:	50fff22e 	bgeu	r10,r3,1e1e8 <_gp+0xfffec0c8>
   1e220:	283fe226 	beq	r5,zero,1e1ac <_gp+0xfffec08c>
   1e224:	003feb06 	br	1e1d4 <_gp+0xfffec0b4>
   1e228:	313fe936 	bltu	r6,r4,1e1d0 <_gp+0xfffec0b0>
   1e22c:	21bfee2e 	bgeu	r4,r6,1e1e8 <_gp+0xfffec0c8>
   1e230:	283fde26 	beq	r5,zero,1e1ac <_gp+0xfffec08c>
   1e234:	003fe706 	br	1e1d4 <_gp+0xfffec0b4>

0001e238 <__muldf3>:
   1e238:	defff204 	addi	sp,sp,-56
   1e23c:	2804d53a 	srli	r2,r5,20
   1e240:	de00012e 	bgeu	sp,et,1e248 <__muldf3+0x10>
   1e244:	003b68fa 	trap	3
   1e248:	dd800a15 	stw	r22,40(sp)
   1e24c:	282cd7fa 	srli	r22,r5,31
   1e250:	dc000415 	stw	r16,16(sp)
   1e254:	04000434 	movhi	r16,16
   1e258:	df000c15 	stw	fp,48(sp)
   1e25c:	dd000815 	stw	r20,32(sp)
   1e260:	dcc00715 	stw	r19,28(sp)
   1e264:	dc800615 	stw	r18,24(sp)
   1e268:	dc400515 	stw	r17,20(sp)
   1e26c:	843fffc4 	addi	r16,r16,-1
   1e270:	dfc00d15 	stw	ra,52(sp)
   1e274:	ddc00b15 	stw	r23,44(sp)
   1e278:	dd400915 	stw	r21,36(sp)
   1e27c:	1501ffcc 	andi	r20,r2,2047
   1e280:	2023883a 	mov	r17,r4
   1e284:	2025883a 	mov	r18,r4
   1e288:	2c20703a 	and	r16,r5,r16
   1e28c:	b027883a 	mov	r19,r22
   1e290:	b7003fcc 	andi	fp,r22,255
   1e294:	a0005926 	beq	r20,zero,1e3fc <__muldf3+0x1c4>
   1e298:	0081ffc4 	movi	r2,2047
   1e29c:	a0803426 	beq	r20,r2,1e370 <__muldf3+0x138>
   1e2a0:	84000434 	orhi	r16,r16,16
   1e2a4:	2004d77a 	srli	r2,r4,29
   1e2a8:	802090fa 	slli	r16,r16,3
   1e2ac:	202490fa 	slli	r18,r4,3
   1e2b0:	a53f0044 	addi	r20,r20,-1023
   1e2b4:	80a0b03a 	or	r16,r16,r2
   1e2b8:	002b883a 	mov	r21,zero
   1e2bc:	0015883a 	mov	r10,zero
   1e2c0:	3812d53a 	srli	r9,r7,20
   1e2c4:	3806d7fa 	srli	r3,r7,31
   1e2c8:	02000434 	movhi	r8,16
   1e2cc:	423fffc4 	addi	r8,r8,-1
   1e2d0:	4941ffcc 	andi	r5,r9,2047
   1e2d4:	302f883a 	mov	r23,r6
   1e2d8:	3a22703a 	and	r17,r7,r8
   1e2dc:	1ac03fcc 	andi	r11,r3,255
   1e2e0:	28006226 	beq	r5,zero,1e46c <__muldf3+0x234>
   1e2e4:	0081ffc4 	movi	r2,2047
   1e2e8:	28805a26 	beq	r5,r2,1e454 <__muldf3+0x21c>
   1e2ec:	8a000434 	orhi	r8,r17,16
   1e2f0:	3004d77a 	srli	r2,r6,29
   1e2f4:	401090fa 	slli	r8,r8,3
   1e2f8:	302e90fa 	slli	r23,r6,3
   1e2fc:	297f0044 	addi	r5,r5,-1023
   1e300:	40a2b03a 	or	r17,r8,r2
   1e304:	0013883a 	mov	r9,zero
   1e308:	4d4cb03a 	or	r6,r9,r21
   1e30c:	300c90ba 	slli	r6,r6,2
   1e310:	020000b4 	movhi	r8,2
   1e314:	4238cc04 	addi	r8,r8,-7376
   1e318:	320d883a 	add	r6,r6,r8
   1e31c:	31800017 	ldw	r6,0(r6)
   1e320:	a14b883a 	add	r5,r20,r5
   1e324:	1dacf03a 	xor	r22,r3,r22
   1e328:	2b000044 	addi	r12,r5,1
   1e32c:	3000683a 	jmp	r6
   1e330:	0001e56c 	andhi	zero,zero,1941
   1e334:	0001e558 	cmpnei	zero,zero,1941
   1e338:	0001e558 	cmpnei	zero,zero,1941
   1e33c:	0001e544 	movi	zero,1941
   1e340:	0001e38c 	andi	zero,zero,1934
   1e344:	0001e38c 	andi	zero,zero,1934
   1e348:	0001e52c 	andhi	zero,zero,1940
   1e34c:	0001e544 	movi	zero,1941
   1e350:	0001e38c 	andi	zero,zero,1934
   1e354:	0001e52c 	andhi	zero,zero,1940
   1e358:	0001e38c 	andi	zero,zero,1934
   1e35c:	0001e544 	movi	zero,1941
   1e360:	0001e390 	cmplti	zero,zero,1934
   1e364:	0001e390 	cmplti	zero,zero,1934
   1e368:	0001e390 	cmplti	zero,zero,1934
   1e36c:	0001e768 	cmpgeui	zero,zero,1949
   1e370:	8104b03a 	or	r2,r16,r4
   1e374:	10006a1e 	bne	r2,zero,1e520 <__muldf3+0x2e8>
   1e378:	05400204 	movi	r21,8
   1e37c:	0021883a 	mov	r16,zero
   1e380:	0025883a 	mov	r18,zero
   1e384:	02800084 	movi	r10,2
   1e388:	003fcd06 	br	1e2c0 <_gp+0xfffec1a0>
   1e38c:	b039883a 	mov	fp,r22
   1e390:	00800084 	movi	r2,2
   1e394:	50804e1e 	bne	r10,r2,1e4d0 <__muldf3+0x298>
   1e398:	e4c0004c 	andi	r19,fp,1
   1e39c:	0101ffc4 	movi	r4,2047
   1e3a0:	0021883a 	mov	r16,zero
   1e3a4:	0025883a 	mov	r18,zero
   1e3a8:	2008953a 	slli	r4,r4,20
   1e3ac:	98c03fcc 	andi	r3,r19,255
   1e3b0:	01400434 	movhi	r5,16
   1e3b4:	297fffc4 	addi	r5,r5,-1
   1e3b8:	180697fa 	slli	r3,r3,31
   1e3bc:	8160703a 	and	r16,r16,r5
   1e3c0:	8120b03a 	or	r16,r16,r4
   1e3c4:	80c6b03a 	or	r3,r16,r3
   1e3c8:	9005883a 	mov	r2,r18
   1e3cc:	dfc00d17 	ldw	ra,52(sp)
   1e3d0:	df000c17 	ldw	fp,48(sp)
   1e3d4:	ddc00b17 	ldw	r23,44(sp)
   1e3d8:	dd800a17 	ldw	r22,40(sp)
   1e3dc:	dd400917 	ldw	r21,36(sp)
   1e3e0:	dd000817 	ldw	r20,32(sp)
   1e3e4:	dcc00717 	ldw	r19,28(sp)
   1e3e8:	dc800617 	ldw	r18,24(sp)
   1e3ec:	dc400517 	ldw	r17,20(sp)
   1e3f0:	dc000417 	ldw	r16,16(sp)
   1e3f4:	dec00e04 	addi	sp,sp,56
   1e3f8:	f800283a 	ret
   1e3fc:	8104b03a 	or	r2,r16,r4
   1e400:	10004226 	beq	r2,zero,1e50c <__muldf3+0x2d4>
   1e404:	8000f926 	beq	r16,zero,1e7ec <__muldf3+0x5b4>
   1e408:	8009883a 	mov	r4,r16
   1e40c:	d9800315 	stw	r6,12(sp)
   1e410:	d9c00015 	stw	r7,0(sp)
   1e414:	001f4500 	call	1f450 <__clzsi2>
   1e418:	d9800317 	ldw	r6,12(sp)
   1e41c:	d9c00017 	ldw	r7,0(sp)
   1e420:	1007883a 	mov	r3,r2
   1e424:	01000a04 	movi	r4,40
   1e428:	18bffe04 	addi	r2,r3,-8
   1e42c:	20c9c83a 	sub	r4,r4,r3
   1e430:	80a0983a 	sll	r16,r16,r2
   1e434:	8908d83a 	srl	r4,r17,r4
   1e438:	88a4983a 	sll	r18,r17,r2
   1e43c:	2420b03a 	or	r16,r4,r16
   1e440:	017f0344 	movi	r5,-1011
   1e444:	28e9c83a 	sub	r20,r5,r3
   1e448:	002b883a 	mov	r21,zero
   1e44c:	0015883a 	mov	r10,zero
   1e450:	003f9b06 	br	1e2c0 <_gp+0xfffec1a0>
   1e454:	8984b03a 	or	r2,r17,r6
   1e458:	10002a1e 	bne	r2,zero,1e504 <__muldf3+0x2cc>
   1e45c:	0023883a 	mov	r17,zero
   1e460:	002f883a 	mov	r23,zero
   1e464:	02400084 	movi	r9,2
   1e468:	003fa706 	br	1e308 <_gp+0xfffec1e8>
   1e46c:	8984b03a 	or	r2,r17,r6
   1e470:	10002026 	beq	r2,zero,1e4f4 <__muldf3+0x2bc>
   1e474:	8800cc26 	beq	r17,zero,1e7a8 <__muldf3+0x570>
   1e478:	8809883a 	mov	r4,r17
   1e47c:	d8c00215 	stw	r3,8(sp)
   1e480:	d9800315 	stw	r6,12(sp)
   1e484:	da800015 	stw	r10,0(sp)
   1e488:	dac00115 	stw	r11,4(sp)
   1e48c:	001f4500 	call	1f450 <__clzsi2>
   1e490:	d8c00217 	ldw	r3,8(sp)
   1e494:	d9800317 	ldw	r6,12(sp)
   1e498:	da800017 	ldw	r10,0(sp)
   1e49c:	dac00117 	ldw	r11,4(sp)
   1e4a0:	1009883a 	mov	r4,r2
   1e4a4:	01400a04 	movi	r5,40
   1e4a8:	25fffe04 	addi	r23,r4,-8
   1e4ac:	290bc83a 	sub	r5,r5,r4
   1e4b0:	8dd0983a 	sll	r8,r17,r23
   1e4b4:	314ad83a 	srl	r5,r6,r5
   1e4b8:	35ee983a 	sll	r23,r6,r23
   1e4bc:	2a22b03a 	or	r17,r5,r8
   1e4c0:	017f0344 	movi	r5,-1011
   1e4c4:	290bc83a 	sub	r5,r5,r4
   1e4c8:	0013883a 	mov	r9,zero
   1e4cc:	003f8e06 	br	1e308 <_gp+0xfffec1e8>
   1e4d0:	008000c4 	movi	r2,3
   1e4d4:	50811d26 	beq	r10,r2,1e94c <__muldf3+0x714>
   1e4d8:	00800044 	movi	r2,1
   1e4dc:	5080e01e 	bne	r10,r2,1e860 <__muldf3+0x628>
   1e4e0:	e0a6703a 	and	r19,fp,r2
   1e4e4:	0009883a 	mov	r4,zero
   1e4e8:	0021883a 	mov	r16,zero
   1e4ec:	0025883a 	mov	r18,zero
   1e4f0:	003fad06 	br	1e3a8 <_gp+0xfffec288>
   1e4f4:	0023883a 	mov	r17,zero
   1e4f8:	002f883a 	mov	r23,zero
   1e4fc:	02400044 	movi	r9,1
   1e500:	003f8106 	br	1e308 <_gp+0xfffec1e8>
   1e504:	024000c4 	movi	r9,3
   1e508:	003f7f06 	br	1e308 <_gp+0xfffec1e8>
   1e50c:	05400104 	movi	r21,4
   1e510:	0021883a 	mov	r16,zero
   1e514:	0025883a 	mov	r18,zero
   1e518:	02800044 	movi	r10,1
   1e51c:	003f6806 	br	1e2c0 <_gp+0xfffec1a0>
   1e520:	05400304 	movi	r21,12
   1e524:	028000c4 	movi	r10,3
   1e528:	003f6506 	br	1e2c0 <_gp+0xfffec1a0>
   1e52c:	04000434 	movhi	r16,16
   1e530:	0027883a 	mov	r19,zero
   1e534:	843fffc4 	addi	r16,r16,-1
   1e538:	04bfffc4 	movi	r18,-1
   1e53c:	0101ffc4 	movi	r4,2047
   1e540:	003f9906 	br	1e3a8 <_gp+0xfffec288>
   1e544:	8821883a 	mov	r16,r17
   1e548:	b825883a 	mov	r18,r23
   1e54c:	5839883a 	mov	fp,r11
   1e550:	4815883a 	mov	r10,r9
   1e554:	003f8e06 	br	1e390 <_gp+0xfffec270>
   1e558:	8821883a 	mov	r16,r17
   1e55c:	b825883a 	mov	r18,r23
   1e560:	b039883a 	mov	fp,r22
   1e564:	4815883a 	mov	r10,r9
   1e568:	003f8906 	br	1e390 <_gp+0xfffec270>
   1e56c:	b80cd43a 	srli	r6,r23,16
   1e570:	9006d43a 	srli	r3,r18,16
   1e574:	90bfffcc 	andi	r2,r18,65535
   1e578:	bdffffcc 	andi	r23,r23,65535
   1e57c:	b891383a 	mul	r8,r23,r2
   1e580:	b8c9383a 	mul	r4,r23,r3
   1e584:	309b383a 	mul	r13,r6,r2
   1e588:	400ed43a 	srli	r7,r8,16
   1e58c:	30df383a 	mul	r15,r6,r3
   1e590:	235b883a 	add	r13,r4,r13
   1e594:	69db883a 	add	r13,r13,r7
   1e598:	6900022e 	bgeu	r13,r4,1e5a4 <__muldf3+0x36c>
   1e59c:	01000074 	movhi	r4,1
   1e5a0:	791f883a 	add	r15,r15,r4
   1e5a4:	8828d43a 	srli	r20,r17,16
   1e5a8:	8c7fffcc 	andi	r17,r17,65535
   1e5ac:	888f383a 	mul	r7,r17,r2
   1e5b0:	88d3383a 	mul	r9,r17,r3
   1e5b4:	a0a5383a 	mul	r18,r20,r2
   1e5b8:	3816d43a 	srli	r11,r7,16
   1e5bc:	6814943a 	slli	r10,r13,16
   1e5c0:	4ca5883a 	add	r18,r9,r18
   1e5c4:	423fffcc 	andi	r8,r8,65535
   1e5c8:	92e5883a 	add	r18,r18,r11
   1e5cc:	6808d43a 	srli	r4,r13,16
   1e5d0:	5215883a 	add	r10,r10,r8
   1e5d4:	a0c7383a 	mul	r3,r20,r3
   1e5d8:	9240022e 	bgeu	r18,r9,1e5e4 <__muldf3+0x3ac>
   1e5dc:	00800074 	movhi	r2,1
   1e5e0:	1887883a 	add	r3,r3,r2
   1e5e4:	802ad43a 	srli	r21,r16,16
   1e5e8:	80bfffcc 	andi	r2,r16,65535
   1e5ec:	b893383a 	mul	r9,r23,r2
   1e5f0:	3091383a 	mul	r8,r6,r2
   1e5f4:	bd6f383a 	mul	r23,r23,r21
   1e5f8:	9026943a 	slli	r19,r18,16
   1e5fc:	481ad43a 	srli	r13,r9,16
   1e600:	9024d43a 	srli	r18,r18,16
   1e604:	39ffffcc 	andi	r7,r7,65535
   1e608:	ba11883a 	add	r8,r23,r8
   1e60c:	99e7883a 	add	r19,r19,r7
   1e610:	4351883a 	add	r8,r8,r13
   1e614:	1c97883a 	add	r11,r3,r18
   1e618:	354d383a 	mul	r6,r6,r21
   1e61c:	9925883a 	add	r18,r19,r4
   1e620:	45c0022e 	bgeu	r8,r23,1e62c <__muldf3+0x3f4>
   1e624:	00c00074 	movhi	r3,1
   1e628:	30cd883a 	add	r6,r6,r3
   1e62c:	8889383a 	mul	r4,r17,r2
   1e630:	8d63383a 	mul	r17,r17,r21
   1e634:	a085383a 	mul	r2,r20,r2
   1e638:	200ed43a 	srli	r7,r4,16
   1e63c:	401cd43a 	srli	r14,r8,16
   1e640:	401a943a 	slli	r13,r8,16
   1e644:	8885883a 	add	r2,r17,r2
   1e648:	4a3fffcc 	andi	r8,r9,65535
   1e64c:	11c5883a 	add	r2,r2,r7
   1e650:	339d883a 	add	r14,r6,r14
   1e654:	6a11883a 	add	r8,r13,r8
   1e658:	a561383a 	mul	r16,r20,r21
   1e65c:	1440022e 	bgeu	r2,r17,1e668 <__muldf3+0x430>
   1e660:	00c00074 	movhi	r3,1
   1e664:	80e1883a 	add	r16,r16,r3
   1e668:	1006943a 	slli	r3,r2,16
   1e66c:	213fffcc 	andi	r4,r4,65535
   1e670:	93db883a 	add	r13,r18,r15
   1e674:	1909883a 	add	r4,r3,r4
   1e678:	22c7883a 	add	r3,r4,r11
   1e67c:	6cd3803a 	cmpltu	r9,r13,r19
   1e680:	6a09883a 	add	r4,r13,r8
   1e684:	1a5b883a 	add	r13,r3,r9
   1e688:	2211803a 	cmpltu	r8,r4,r8
   1e68c:	734d883a 	add	r6,r14,r13
   1e690:	100ed43a 	srli	r7,r2,16
   1e694:	6a53803a 	cmpltu	r9,r13,r9
   1e698:	3205883a 	add	r2,r6,r8
   1e69c:	1ac7803a 	cmpltu	r3,r3,r11
   1e6a0:	1211803a 	cmpltu	r8,r2,r8
   1e6a4:	48c6b03a 	or	r3,r9,r3
   1e6a8:	338d803a 	cmpltu	r6,r6,r14
   1e6ac:	19c7883a 	add	r3,r3,r7
   1e6b0:	418cb03a 	or	r6,r8,r6
   1e6b4:	1987883a 	add	r3,r3,r6
   1e6b8:	2024927a 	slli	r18,r4,9
   1e6bc:	1c07883a 	add	r3,r3,r16
   1e6c0:	1806927a 	slli	r3,r3,9
   1e6c4:	1020d5fa 	srli	r16,r2,23
   1e6c8:	2008d5fa 	srli	r4,r4,23
   1e6cc:	9294b03a 	or	r10,r18,r10
   1e6d0:	1004927a 	slli	r2,r2,9
   1e6d4:	5024c03a 	cmpne	r18,r10,zero
   1e6d8:	1c20b03a 	or	r16,r3,r16
   1e6dc:	9108b03a 	or	r4,r18,r4
   1e6e0:	80c0402c 	andhi	r3,r16,256
   1e6e4:	20a4b03a 	or	r18,r4,r2
   1e6e8:	18000726 	beq	r3,zero,1e708 <__muldf3+0x4d0>
   1e6ec:	9006d07a 	srli	r3,r18,1
   1e6f0:	800897fa 	slli	r4,r16,31
   1e6f4:	9080004c 	andi	r2,r18,1
   1e6f8:	8020d07a 	srli	r16,r16,1
   1e6fc:	10c4b03a 	or	r2,r2,r3
   1e700:	1124b03a 	or	r18,r2,r4
   1e704:	600b883a 	mov	r5,r12
   1e708:	2900ffc4 	addi	r4,r5,1023
   1e70c:	01004b0e 	bge	zero,r4,1e83c <__muldf3+0x604>
   1e710:	908001cc 	andi	r2,r18,7
   1e714:	10000726 	beq	r2,zero,1e734 <__muldf3+0x4fc>
   1e718:	90c003cc 	andi	r3,r18,15
   1e71c:	00800104 	movi	r2,4
   1e720:	18800426 	beq	r3,r2,1e734 <__muldf3+0x4fc>
   1e724:	9087883a 	add	r3,r18,r2
   1e728:	1c85803a 	cmpltu	r2,r3,r18
   1e72c:	80a1883a 	add	r16,r16,r2
   1e730:	1825883a 	mov	r18,r3
   1e734:	8080402c 	andhi	r2,r16,256
   1e738:	10000426 	beq	r2,zero,1e74c <__muldf3+0x514>
   1e73c:	00bfc034 	movhi	r2,65280
   1e740:	10bfffc4 	addi	r2,r2,-1
   1e744:	29010004 	addi	r4,r5,1024
   1e748:	80a0703a 	and	r16,r16,r2
   1e74c:	0081ff84 	movi	r2,2046
   1e750:	1100320e 	bge	r2,r4,1e81c <__muldf3+0x5e4>
   1e754:	b4c0004c 	andi	r19,r22,1
   1e758:	0101ffc4 	movi	r4,2047
   1e75c:	0021883a 	mov	r16,zero
   1e760:	0025883a 	mov	r18,zero
   1e764:	003f1006 	br	1e3a8 <_gp+0xfffec288>
   1e768:	8080022c 	andhi	r2,r16,8
   1e76c:	10000926 	beq	r2,zero,1e794 <__muldf3+0x55c>
   1e770:	8880022c 	andhi	r2,r17,8
   1e774:	1000071e 	bne	r2,zero,1e794 <__muldf3+0x55c>
   1e778:	00800434 	movhi	r2,16
   1e77c:	8c000234 	orhi	r16,r17,8
   1e780:	10bfffc4 	addi	r2,r2,-1
   1e784:	1827883a 	mov	r19,r3
   1e788:	80a0703a 	and	r16,r16,r2
   1e78c:	b825883a 	mov	r18,r23
   1e790:	003f6a06 	br	1e53c <_gp+0xfffec41c>
   1e794:	00800434 	movhi	r2,16
   1e798:	84000234 	orhi	r16,r16,8
   1e79c:	10bfffc4 	addi	r2,r2,-1
   1e7a0:	80a0703a 	and	r16,r16,r2
   1e7a4:	003f6506 	br	1e53c <_gp+0xfffec41c>
   1e7a8:	3009883a 	mov	r4,r6
   1e7ac:	d8c00215 	stw	r3,8(sp)
   1e7b0:	d9800315 	stw	r6,12(sp)
   1e7b4:	da800015 	stw	r10,0(sp)
   1e7b8:	dac00115 	stw	r11,4(sp)
   1e7bc:	001f4500 	call	1f450 <__clzsi2>
   1e7c0:	11000804 	addi	r4,r2,32
   1e7c4:	014009c4 	movi	r5,39
   1e7c8:	d8c00217 	ldw	r3,8(sp)
   1e7cc:	d9800317 	ldw	r6,12(sp)
   1e7d0:	da800017 	ldw	r10,0(sp)
   1e7d4:	dac00117 	ldw	r11,4(sp)
   1e7d8:	293f320e 	bge	r5,r4,1e4a4 <_gp+0xfffec384>
   1e7dc:	10bffe04 	addi	r2,r2,-8
   1e7e0:	b8a2983a 	sll	r17,r23,r2
   1e7e4:	002f883a 	mov	r23,zero
   1e7e8:	003f3506 	br	1e4c0 <_gp+0xfffec3a0>
   1e7ec:	d9800315 	stw	r6,12(sp)
   1e7f0:	d9c00015 	stw	r7,0(sp)
   1e7f4:	001f4500 	call	1f450 <__clzsi2>
   1e7f8:	10c00804 	addi	r3,r2,32
   1e7fc:	010009c4 	movi	r4,39
   1e800:	d9800317 	ldw	r6,12(sp)
   1e804:	d9c00017 	ldw	r7,0(sp)
   1e808:	20ff060e 	bge	r4,r3,1e424 <_gp+0xfffec304>
   1e80c:	10bffe04 	addi	r2,r2,-8
   1e810:	88a0983a 	sll	r16,r17,r2
   1e814:	0025883a 	mov	r18,zero
   1e818:	003f0906 	br	1e440 <_gp+0xfffec320>
   1e81c:	9004d0fa 	srli	r2,r18,3
   1e820:	8024977a 	slli	r18,r16,29
   1e824:	8020927a 	slli	r16,r16,9
   1e828:	2101ffcc 	andi	r4,r4,2047
   1e82c:	90a4b03a 	or	r18,r18,r2
   1e830:	8020d33a 	srli	r16,r16,12
   1e834:	b4c0004c 	andi	r19,r22,1
   1e838:	003edb06 	br	1e3a8 <_gp+0xfffec288>
   1e83c:	00ff0084 	movi	r3,-1022
   1e840:	1947c83a 	sub	r3,r3,r5
   1e844:	00800e04 	movi	r2,56
   1e848:	10c0080e 	bge	r2,r3,1e86c <__muldf3+0x634>
   1e84c:	b4c0004c 	andi	r19,r22,1
   1e850:	0009883a 	mov	r4,zero
   1e854:	0021883a 	mov	r16,zero
   1e858:	0025883a 	mov	r18,zero
   1e85c:	003ed206 	br	1e3a8 <_gp+0xfffec288>
   1e860:	600b883a 	mov	r5,r12
   1e864:	e02d883a 	mov	r22,fp
   1e868:	003fa706 	br	1e708 <_gp+0xfffec5e8>
   1e86c:	008007c4 	movi	r2,31
   1e870:	10c01816 	blt	r2,r3,1e8d4 <__muldf3+0x69c>
   1e874:	29410784 	addi	r5,r5,1054
   1e878:	8144983a 	sll	r2,r16,r5
   1e87c:	90c8d83a 	srl	r4,r18,r3
   1e880:	914a983a 	sll	r5,r18,r5
   1e884:	80c6d83a 	srl	r3,r16,r3
   1e888:	2088b03a 	or	r4,r4,r2
   1e88c:	2804c03a 	cmpne	r2,r5,zero
   1e890:	2084b03a 	or	r2,r4,r2
   1e894:	110001cc 	andi	r4,r2,7
   1e898:	20000726 	beq	r4,zero,1e8b8 <__muldf3+0x680>
   1e89c:	114003cc 	andi	r5,r2,15
   1e8a0:	01000104 	movi	r4,4
   1e8a4:	29000426 	beq	r5,r4,1e8b8 <__muldf3+0x680>
   1e8a8:	11000104 	addi	r4,r2,4
   1e8ac:	2085803a 	cmpltu	r2,r4,r2
   1e8b0:	1887883a 	add	r3,r3,r2
   1e8b4:	2005883a 	mov	r2,r4
   1e8b8:	1900202c 	andhi	r4,r3,128
   1e8bc:	20001826 	beq	r4,zero,1e920 <__muldf3+0x6e8>
   1e8c0:	b4c0004c 	andi	r19,r22,1
   1e8c4:	01000044 	movi	r4,1
   1e8c8:	0021883a 	mov	r16,zero
   1e8cc:	0025883a 	mov	r18,zero
   1e8d0:	003eb506 	br	1e3a8 <_gp+0xfffec288>
   1e8d4:	00bef884 	movi	r2,-1054
   1e8d8:	1145c83a 	sub	r2,r2,r5
   1e8dc:	8088d83a 	srl	r4,r16,r2
   1e8e0:	00800804 	movi	r2,32
   1e8e4:	18801726 	beq	r3,r2,1e944 <__muldf3+0x70c>
   1e8e8:	28810f84 	addi	r2,r5,1086
   1e8ec:	8084983a 	sll	r2,r16,r2
   1e8f0:	1484b03a 	or	r2,r2,r18
   1e8f4:	1004c03a 	cmpne	r2,r2,zero
   1e8f8:	1104b03a 	or	r2,r2,r4
   1e8fc:	10c001cc 	andi	r3,r2,7
   1e900:	18000b1e 	bne	r3,zero,1e930 <__muldf3+0x6f8>
   1e904:	0021883a 	mov	r16,zero
   1e908:	1004d0fa 	srli	r2,r2,3
   1e90c:	b4c0004c 	andi	r19,r22,1
   1e910:	0009883a 	mov	r4,zero
   1e914:	10e4b03a 	or	r18,r2,r3
   1e918:	003ea306 	br	1e3a8 <_gp+0xfffec288>
   1e91c:	0007883a 	mov	r3,zero
   1e920:	1820927a 	slli	r16,r3,9
   1e924:	1806977a 	slli	r3,r3,29
   1e928:	8020d33a 	srli	r16,r16,12
   1e92c:	003ff606 	br	1e908 <_gp+0xfffec7e8>
   1e930:	110003cc 	andi	r4,r2,15
   1e934:	00c00104 	movi	r3,4
   1e938:	20fff826 	beq	r4,r3,1e91c <_gp+0xfffec7fc>
   1e93c:	0007883a 	mov	r3,zero
   1e940:	003fd906 	br	1e8a8 <_gp+0xfffec788>
   1e944:	0005883a 	mov	r2,zero
   1e948:	003fe906 	br	1e8f0 <_gp+0xfffec7d0>
   1e94c:	00800434 	movhi	r2,16
   1e950:	84000234 	orhi	r16,r16,8
   1e954:	10bfffc4 	addi	r2,r2,-1
   1e958:	e4c0004c 	andi	r19,fp,1
   1e95c:	80a0703a 	and	r16,r16,r2
   1e960:	003ef606 	br	1e53c <_gp+0xfffec41c>

0001e964 <__subdf3>:
   1e964:	00c00434 	movhi	r3,16
   1e968:	18ffffc4 	addi	r3,r3,-1
   1e96c:	defffb04 	addi	sp,sp,-20
   1e970:	28d2703a 	and	r9,r5,r3
   1e974:	3814d53a 	srli	r10,r7,20
   1e978:	38c6703a 	and	r3,r7,r3
   1e97c:	de00012e 	bgeu	sp,et,1e984 <__subdf3+0x20>
   1e980:	003b68fa 	trap	3
   1e984:	3004d77a 	srli	r2,r6,29
   1e988:	dc800215 	stw	r18,8(sp)
   1e98c:	dc000015 	stw	r16,0(sp)
   1e990:	2824d7fa 	srli	r18,r5,31
   1e994:	2820d53a 	srli	r16,r5,20
   1e998:	481290fa 	slli	r9,r9,3
   1e99c:	200ad77a 	srli	r5,r4,29
   1e9a0:	180690fa 	slli	r3,r3,3
   1e9a4:	dc400115 	stw	r17,4(sp)
   1e9a8:	dfc00415 	stw	ra,16(sp)
   1e9ac:	202290fa 	slli	r17,r4,3
   1e9b0:	dcc00315 	stw	r19,12(sp)
   1e9b4:	5281ffcc 	andi	r10,r10,2047
   1e9b8:	0101ffc4 	movi	r4,2047
   1e9bc:	9011883a 	mov	r8,r18
   1e9c0:	8401ffcc 	andi	r16,r16,2047
   1e9c4:	94803fcc 	andi	r18,r18,255
   1e9c8:	494ab03a 	or	r5,r9,r5
   1e9cc:	380ed7fa 	srli	r7,r7,31
   1e9d0:	1886b03a 	or	r3,r3,r2
   1e9d4:	300c90fa 	slli	r6,r6,3
   1e9d8:	51009026 	beq	r10,r4,1ec1c <__subdf3+0x2b8>
   1e9dc:	39c0005c 	xori	r7,r7,1
   1e9e0:	8285c83a 	sub	r2,r16,r10
   1e9e4:	91c06f26 	beq	r18,r7,1eba4 <__subdf3+0x240>
   1e9e8:	0080b10e 	bge	zero,r2,1ecb0 <__subdf3+0x34c>
   1e9ec:	50002a1e 	bne	r10,zero,1ea98 <__subdf3+0x134>
   1e9f0:	1988b03a 	or	r4,r3,r6
   1e9f4:	2000941e 	bne	r4,zero,1ec48 <__subdf3+0x2e4>
   1e9f8:	888001cc 	andi	r2,r17,7
   1e9fc:	10005b26 	beq	r2,zero,1eb6c <__subdf3+0x208>
   1ea00:	88c003cc 	andi	r3,r17,15
   1ea04:	00800104 	movi	r2,4
   1ea08:	18805826 	beq	r3,r2,1eb6c <__subdf3+0x208>
   1ea0c:	88c00104 	addi	r3,r17,4
   1ea10:	1c63803a 	cmpltu	r17,r3,r17
   1ea14:	2c4b883a 	add	r5,r5,r17
   1ea18:	2880202c 	andhi	r2,r5,128
   1ea1c:	9200004c 	andi	r8,r18,1
   1ea20:	1823883a 	mov	r17,r3
   1ea24:	10005426 	beq	r2,zero,1eb78 <__subdf3+0x214>
   1ea28:	84000044 	addi	r16,r16,1
   1ea2c:	0081ffc4 	movi	r2,2047
   1ea30:	8080bf26 	beq	r16,r2,1ed30 <__subdf3+0x3cc>
   1ea34:	013fe034 	movhi	r4,65408
   1ea38:	213fffc4 	addi	r4,r4,-1
   1ea3c:	290a703a 	and	r5,r5,r4
   1ea40:	2804977a 	slli	r2,r5,29
   1ea44:	280a927a 	slli	r5,r5,9
   1ea48:	8822d0fa 	srli	r17,r17,3
   1ea4c:	8401ffcc 	andi	r16,r16,2047
   1ea50:	2808d33a 	srli	r4,r5,12
   1ea54:	1444b03a 	or	r2,r2,r17
   1ea58:	8401ffcc 	andi	r16,r16,2047
   1ea5c:	800a953a 	slli	r5,r16,20
   1ea60:	40c03fcc 	andi	r3,r8,255
   1ea64:	04000434 	movhi	r16,16
   1ea68:	180697fa 	slli	r3,r3,31
   1ea6c:	843fffc4 	addi	r16,r16,-1
   1ea70:	2420703a 	and	r16,r4,r16
   1ea74:	8160b03a 	or	r16,r16,r5
   1ea78:	80c6b03a 	or	r3,r16,r3
   1ea7c:	dfc00417 	ldw	ra,16(sp)
   1ea80:	dcc00317 	ldw	r19,12(sp)
   1ea84:	dc800217 	ldw	r18,8(sp)
   1ea88:	dc400117 	ldw	r17,4(sp)
   1ea8c:	dc000017 	ldw	r16,0(sp)
   1ea90:	dec00504 	addi	sp,sp,20
   1ea94:	f800283a 	ret
   1ea98:	0101ffc4 	movi	r4,2047
   1ea9c:	813fd626 	beq	r16,r4,1e9f8 <_gp+0xfffec8d8>
   1eaa0:	18c02034 	orhi	r3,r3,128
   1eaa4:	01000e04 	movi	r4,56
   1eaa8:	2080a416 	blt	r4,r2,1ed3c <__subdf3+0x3d8>
   1eaac:	010007c4 	movi	r4,31
   1eab0:	2080c716 	blt	r4,r2,1edd0 <__subdf3+0x46c>
   1eab4:	01000804 	movi	r4,32
   1eab8:	2089c83a 	sub	r4,r4,r2
   1eabc:	1910983a 	sll	r8,r3,r4
   1eac0:	308ed83a 	srl	r7,r6,r2
   1eac4:	3108983a 	sll	r4,r6,r4
   1eac8:	1884d83a 	srl	r2,r3,r2
   1eacc:	41ccb03a 	or	r6,r8,r7
   1ead0:	2008c03a 	cmpne	r4,r4,zero
   1ead4:	310cb03a 	or	r6,r6,r4
   1ead8:	898dc83a 	sub	r6,r17,r6
   1eadc:	89a3803a 	cmpltu	r17,r17,r6
   1eae0:	288bc83a 	sub	r5,r5,r2
   1eae4:	2c4bc83a 	sub	r5,r5,r17
   1eae8:	3023883a 	mov	r17,r6
   1eaec:	2880202c 	andhi	r2,r5,128
   1eaf0:	10006b26 	beq	r2,zero,1eca0 <__subdf3+0x33c>
   1eaf4:	04c02034 	movhi	r19,128
   1eaf8:	9cffffc4 	addi	r19,r19,-1
   1eafc:	2ce6703a 	and	r19,r5,r19
   1eb00:	98007c26 	beq	r19,zero,1ecf4 <__subdf3+0x390>
   1eb04:	9809883a 	mov	r4,r19
   1eb08:	001f4500 	call	1f450 <__clzsi2>
   1eb0c:	10fffe04 	addi	r3,r2,-8
   1eb10:	010007c4 	movi	r4,31
   1eb14:	20c07d16 	blt	r4,r3,1ed0c <__subdf3+0x3a8>
   1eb18:	01400a04 	movi	r5,40
   1eb1c:	2885c83a 	sub	r2,r5,r2
   1eb20:	888ad83a 	srl	r5,r17,r2
   1eb24:	98e6983a 	sll	r19,r19,r3
   1eb28:	88e2983a 	sll	r17,r17,r3
   1eb2c:	2ce6b03a 	or	r19,r5,r19
   1eb30:	1c007a16 	blt	r3,r16,1ed1c <__subdf3+0x3b8>
   1eb34:	1c21c83a 	sub	r16,r3,r16
   1eb38:	81400044 	addi	r5,r16,1
   1eb3c:	00c007c4 	movi	r3,31
   1eb40:	19409616 	blt	r3,r5,1ed9c <__subdf3+0x438>
   1eb44:	1c21c83a 	sub	r16,r3,r16
   1eb48:	8c08983a 	sll	r4,r17,r16
   1eb4c:	8946d83a 	srl	r3,r17,r5
   1eb50:	9c20983a 	sll	r16,r19,r16
   1eb54:	2008c03a 	cmpne	r4,r4,zero
   1eb58:	994ad83a 	srl	r5,r19,r5
   1eb5c:	1c06b03a 	or	r3,r3,r16
   1eb60:	1922b03a 	or	r17,r3,r4
   1eb64:	0021883a 	mov	r16,zero
   1eb68:	003fa306 	br	1e9f8 <_gp+0xfffec8d8>
   1eb6c:	2880202c 	andhi	r2,r5,128
   1eb70:	9200004c 	andi	r8,r18,1
   1eb74:	103fac1e 	bne	r2,zero,1ea28 <_gp+0xfffec908>
   1eb78:	2804977a 	slli	r2,r5,29
   1eb7c:	8822d0fa 	srli	r17,r17,3
   1eb80:	00c1ffc4 	movi	r3,2047
   1eb84:	280ad0fa 	srli	r5,r5,3
   1eb88:	1444b03a 	or	r2,r2,r17
   1eb8c:	80c02726 	beq	r16,r3,1ec2c <__subdf3+0x2c8>
   1eb90:	01000434 	movhi	r4,16
   1eb94:	213fffc4 	addi	r4,r4,-1
   1eb98:	80e0703a 	and	r16,r16,r3
   1eb9c:	2908703a 	and	r4,r5,r4
   1eba0:	003fad06 	br	1ea58 <_gp+0xfffec938>
   1eba4:	0080690e 	bge	zero,r2,1ed4c <__subdf3+0x3e8>
   1eba8:	50002f26 	beq	r10,zero,1ec68 <__subdf3+0x304>
   1ebac:	0101ffc4 	movi	r4,2047
   1ebb0:	813f9126 	beq	r16,r4,1e9f8 <_gp+0xfffec8d8>
   1ebb4:	18c02034 	orhi	r3,r3,128
   1ebb8:	01000e04 	movi	r4,56
   1ebbc:	2080b00e 	bge	r4,r2,1ee80 <__subdf3+0x51c>
   1ebc0:	198cb03a 	or	r6,r3,r6
   1ebc4:	300ec03a 	cmpne	r7,r6,zero
   1ebc8:	0005883a 	mov	r2,zero
   1ebcc:	3c4f883a 	add	r7,r7,r17
   1ebd0:	3c63803a 	cmpltu	r17,r7,r17
   1ebd4:	114b883a 	add	r5,r2,r5
   1ebd8:	2c4b883a 	add	r5,r5,r17
   1ebdc:	3823883a 	mov	r17,r7
   1ebe0:	2880202c 	andhi	r2,r5,128
   1ebe4:	10002e26 	beq	r2,zero,1eca0 <__subdf3+0x33c>
   1ebe8:	84000044 	addi	r16,r16,1
   1ebec:	0081ffc4 	movi	r2,2047
   1ebf0:	8080de26 	beq	r16,r2,1ef6c <__subdf3+0x608>
   1ebf4:	00bfe034 	movhi	r2,65408
   1ebf8:	10bfffc4 	addi	r2,r2,-1
   1ebfc:	288a703a 	and	r5,r5,r2
   1ec00:	880cd07a 	srli	r6,r17,1
   1ec04:	280897fa 	slli	r4,r5,31
   1ec08:	88c0004c 	andi	r3,r17,1
   1ec0c:	30e2b03a 	or	r17,r6,r3
   1ec10:	280ad07a 	srli	r5,r5,1
   1ec14:	8922b03a 	or	r17,r17,r4
   1ec18:	003f7706 	br	1e9f8 <_gp+0xfffec8d8>
   1ec1c:	1984b03a 	or	r2,r3,r6
   1ec20:	103f6e26 	beq	r2,zero,1e9dc <_gp+0xfffec8bc>
   1ec24:	39c03fcc 	andi	r7,r7,255
   1ec28:	003f6d06 	br	1e9e0 <_gp+0xfffec8c0>
   1ec2c:	1146b03a 	or	r3,r2,r5
   1ec30:	18003f26 	beq	r3,zero,1ed30 <__subdf3+0x3cc>
   1ec34:	00c00434 	movhi	r3,16
   1ec38:	29000234 	orhi	r4,r5,8
   1ec3c:	18ffffc4 	addi	r3,r3,-1
   1ec40:	20c8703a 	and	r4,r4,r3
   1ec44:	003f8406 	br	1ea58 <_gp+0xfffec938>
   1ec48:	10bfffc4 	addi	r2,r2,-1
   1ec4c:	1000501e 	bne	r2,zero,1ed90 <__subdf3+0x42c>
   1ec50:	898fc83a 	sub	r7,r17,r6
   1ec54:	89e3803a 	cmpltu	r17,r17,r7
   1ec58:	28cbc83a 	sub	r5,r5,r3
   1ec5c:	2c4bc83a 	sub	r5,r5,r17
   1ec60:	3823883a 	mov	r17,r7
   1ec64:	003fa106 	br	1eaec <_gp+0xfffec9cc>
   1ec68:	1988b03a 	or	r4,r3,r6
   1ec6c:	203f6226 	beq	r4,zero,1e9f8 <_gp+0xfffec8d8>
   1ec70:	10bfffc4 	addi	r2,r2,-1
   1ec74:	10009b1e 	bne	r2,zero,1eee4 <__subdf3+0x580>
   1ec78:	344d883a 	add	r6,r6,r17
   1ec7c:	3463803a 	cmpltu	r17,r6,r17
   1ec80:	194b883a 	add	r5,r3,r5
   1ec84:	2c4b883a 	add	r5,r5,r17
   1ec88:	3023883a 	mov	r17,r6
   1ec8c:	003fd406 	br	1ebe0 <_gp+0xfffecac0>
   1ec90:	1106b03a 	or	r3,r2,r4
   1ec94:	1800b426 	beq	r3,zero,1ef68 <__subdf3+0x604>
   1ec98:	100b883a 	mov	r5,r2
   1ec9c:	2023883a 	mov	r17,r4
   1eca0:	888001cc 	andi	r2,r17,7
   1eca4:	103f561e 	bne	r2,zero,1ea00 <_gp+0xfffec8e0>
   1eca8:	9200004c 	andi	r8,r18,1
   1ecac:	003fb206 	br	1eb78 <_gp+0xfffeca58>
   1ecb0:	1000531e 	bne	r2,zero,1ee00 <__subdf3+0x49c>
   1ecb4:	80800044 	addi	r2,r16,1
   1ecb8:	1081ffcc 	andi	r2,r2,2047
   1ecbc:	01000044 	movi	r4,1
   1ecc0:	2080a00e 	bge	r4,r2,1ef44 <__subdf3+0x5e0>
   1ecc4:	8985c83a 	sub	r2,r17,r6
   1ecc8:	8889803a 	cmpltu	r4,r17,r2
   1eccc:	28e7c83a 	sub	r19,r5,r3
   1ecd0:	9927c83a 	sub	r19,r19,r4
   1ecd4:	9900202c 	andhi	r4,r19,128
   1ecd8:	20006226 	beq	r4,zero,1ee64 <__subdf3+0x500>
   1ecdc:	3463c83a 	sub	r17,r6,r17
   1ece0:	194bc83a 	sub	r5,r3,r5
   1ece4:	344d803a 	cmpltu	r6,r6,r17
   1ece8:	29a7c83a 	sub	r19,r5,r6
   1ecec:	3825883a 	mov	r18,r7
   1ecf0:	983f841e 	bne	r19,zero,1eb04 <_gp+0xfffec9e4>
   1ecf4:	8809883a 	mov	r4,r17
   1ecf8:	001f4500 	call	1f450 <__clzsi2>
   1ecfc:	10800804 	addi	r2,r2,32
   1ed00:	10fffe04 	addi	r3,r2,-8
   1ed04:	010007c4 	movi	r4,31
   1ed08:	20ff830e 	bge	r4,r3,1eb18 <_gp+0xfffec9f8>
   1ed0c:	14fff604 	addi	r19,r2,-40
   1ed10:	8ce6983a 	sll	r19,r17,r19
   1ed14:	0023883a 	mov	r17,zero
   1ed18:	1c3f860e 	bge	r3,r16,1eb34 <_gp+0xfffeca14>
   1ed1c:	017fe034 	movhi	r5,65408
   1ed20:	297fffc4 	addi	r5,r5,-1
   1ed24:	80e1c83a 	sub	r16,r16,r3
   1ed28:	994a703a 	and	r5,r19,r5
   1ed2c:	003f3206 	br	1e9f8 <_gp+0xfffec8d8>
   1ed30:	0009883a 	mov	r4,zero
   1ed34:	0005883a 	mov	r2,zero
   1ed38:	003f4706 	br	1ea58 <_gp+0xfffec938>
   1ed3c:	198cb03a 	or	r6,r3,r6
   1ed40:	300cc03a 	cmpne	r6,r6,zero
   1ed44:	0005883a 	mov	r2,zero
   1ed48:	003f6306 	br	1ead8 <_gp+0xfffec9b8>
   1ed4c:	10009d1e 	bne	r2,zero,1efc4 <__subdf3+0x660>
   1ed50:	81c00044 	addi	r7,r16,1
   1ed54:	3881ffcc 	andi	r2,r7,2047
   1ed58:	02400044 	movi	r9,1
   1ed5c:	4880680e 	bge	r9,r2,1ef00 <__subdf3+0x59c>
   1ed60:	0081ffc4 	movi	r2,2047
   1ed64:	3880ae26 	beq	r7,r2,1f020 <__subdf3+0x6bc>
   1ed68:	344d883a 	add	r6,r6,r17
   1ed6c:	3463803a 	cmpltu	r17,r6,r17
   1ed70:	194b883a 	add	r5,r3,r5
   1ed74:	2c4b883a 	add	r5,r5,r17
   1ed78:	282297fa 	slli	r17,r5,31
   1ed7c:	300cd07a 	srli	r6,r6,1
   1ed80:	280ad07a 	srli	r5,r5,1
   1ed84:	3821883a 	mov	r16,r7
   1ed88:	89a2b03a 	or	r17,r17,r6
   1ed8c:	003f1a06 	br	1e9f8 <_gp+0xfffec8d8>
   1ed90:	0101ffc4 	movi	r4,2047
   1ed94:	813f431e 	bne	r16,r4,1eaa4 <_gp+0xfffec984>
   1ed98:	003f1706 	br	1e9f8 <_gp+0xfffec8d8>
   1ed9c:	80bff844 	addi	r2,r16,-31
   1eda0:	00c00804 	movi	r3,32
   1eda4:	9884d83a 	srl	r2,r19,r2
   1eda8:	28c05126 	beq	r5,r3,1eef0 <__subdf3+0x58c>
   1edac:	00c00fc4 	movi	r3,63
   1edb0:	1c21c83a 	sub	r16,r3,r16
   1edb4:	9c26983a 	sll	r19,r19,r16
   1edb8:	9c62b03a 	or	r17,r19,r17
   1edbc:	8822c03a 	cmpne	r17,r17,zero
   1edc0:	88a2b03a 	or	r17,r17,r2
   1edc4:	000b883a 	mov	r5,zero
   1edc8:	0021883a 	mov	r16,zero
   1edcc:	003fb406 	br	1eca0 <_gp+0xfffecb80>
   1edd0:	113ff804 	addi	r4,r2,-32
   1edd4:	01c00804 	movi	r7,32
   1edd8:	1908d83a 	srl	r4,r3,r4
   1eddc:	11c04626 	beq	r2,r7,1eef8 <__subdf3+0x594>
   1ede0:	01c01004 	movi	r7,64
   1ede4:	3885c83a 	sub	r2,r7,r2
   1ede8:	1884983a 	sll	r2,r3,r2
   1edec:	118cb03a 	or	r6,r2,r6
   1edf0:	300cc03a 	cmpne	r6,r6,zero
   1edf4:	310cb03a 	or	r6,r6,r4
   1edf8:	0005883a 	mov	r2,zero
   1edfc:	003f3606 	br	1ead8 <_gp+0xfffec9b8>
   1ee00:	80002b26 	beq	r16,zero,1eeb0 <__subdf3+0x54c>
   1ee04:	0101ffc4 	movi	r4,2047
   1ee08:	51006926 	beq	r10,r4,1efb0 <__subdf3+0x64c>
   1ee0c:	0085c83a 	sub	r2,zero,r2
   1ee10:	29402034 	orhi	r5,r5,128
   1ee14:	01000e04 	movi	r4,56
   1ee18:	20807d16 	blt	r4,r2,1f010 <__subdf3+0x6ac>
   1ee1c:	010007c4 	movi	r4,31
   1ee20:	2080d916 	blt	r4,r2,1f188 <__subdf3+0x824>
   1ee24:	01000804 	movi	r4,32
   1ee28:	2089c83a 	sub	r4,r4,r2
   1ee2c:	2912983a 	sll	r9,r5,r4
   1ee30:	8890d83a 	srl	r8,r17,r2
   1ee34:	8908983a 	sll	r4,r17,r4
   1ee38:	2884d83a 	srl	r2,r5,r2
   1ee3c:	4a22b03a 	or	r17,r9,r8
   1ee40:	2008c03a 	cmpne	r4,r4,zero
   1ee44:	8922b03a 	or	r17,r17,r4
   1ee48:	3463c83a 	sub	r17,r6,r17
   1ee4c:	1885c83a 	sub	r2,r3,r2
   1ee50:	344d803a 	cmpltu	r6,r6,r17
   1ee54:	118bc83a 	sub	r5,r2,r6
   1ee58:	5021883a 	mov	r16,r10
   1ee5c:	3825883a 	mov	r18,r7
   1ee60:	003f2206 	br	1eaec <_gp+0xfffec9cc>
   1ee64:	9886b03a 	or	r3,r19,r2
   1ee68:	18001c1e 	bne	r3,zero,1eedc <__subdf3+0x578>
   1ee6c:	0011883a 	mov	r8,zero
   1ee70:	000b883a 	mov	r5,zero
   1ee74:	0023883a 	mov	r17,zero
   1ee78:	0021883a 	mov	r16,zero
   1ee7c:	003f3e06 	br	1eb78 <_gp+0xfffeca58>
   1ee80:	010007c4 	movi	r4,31
   1ee84:	20803c16 	blt	r4,r2,1ef78 <__subdf3+0x614>
   1ee88:	01000804 	movi	r4,32
   1ee8c:	2089c83a 	sub	r4,r4,r2
   1ee90:	1912983a 	sll	r9,r3,r4
   1ee94:	308ed83a 	srl	r7,r6,r2
   1ee98:	3108983a 	sll	r4,r6,r4
   1ee9c:	1884d83a 	srl	r2,r3,r2
   1eea0:	49ceb03a 	or	r7,r9,r7
   1eea4:	2008c03a 	cmpne	r4,r4,zero
   1eea8:	390eb03a 	or	r7,r7,r4
   1eeac:	003f4706 	br	1ebcc <_gp+0xfffecaac>
   1eeb0:	2c48b03a 	or	r4,r5,r17
   1eeb4:	20003e26 	beq	r4,zero,1efb0 <__subdf3+0x64c>
   1eeb8:	0084303a 	nor	r2,zero,r2
   1eebc:	10003a1e 	bne	r2,zero,1efa8 <__subdf3+0x644>
   1eec0:	3463c83a 	sub	r17,r6,r17
   1eec4:	194bc83a 	sub	r5,r3,r5
   1eec8:	344d803a 	cmpltu	r6,r6,r17
   1eecc:	298bc83a 	sub	r5,r5,r6
   1eed0:	5021883a 	mov	r16,r10
   1eed4:	3825883a 	mov	r18,r7
   1eed8:	003f0406 	br	1eaec <_gp+0xfffec9cc>
   1eedc:	1023883a 	mov	r17,r2
   1eee0:	003f0706 	br	1eb00 <_gp+0xfffec9e0>
   1eee4:	0101ffc4 	movi	r4,2047
   1eee8:	813f331e 	bne	r16,r4,1ebb8 <_gp+0xfffeca98>
   1eeec:	003ec206 	br	1e9f8 <_gp+0xfffec8d8>
   1eef0:	0027883a 	mov	r19,zero
   1eef4:	003fb006 	br	1edb8 <_gp+0xfffecc98>
   1eef8:	0005883a 	mov	r2,zero
   1eefc:	003fbb06 	br	1edec <_gp+0xfffecccc>
   1ef00:	2c44b03a 	or	r2,r5,r17
   1ef04:	80008b1e 	bne	r16,zero,1f134 <__subdf3+0x7d0>
   1ef08:	1000b526 	beq	r2,zero,1f1e0 <__subdf3+0x87c>
   1ef0c:	1984b03a 	or	r2,r3,r6
   1ef10:	103eb926 	beq	r2,zero,1e9f8 <_gp+0xfffec8d8>
   1ef14:	3449883a 	add	r4,r6,r17
   1ef18:	2463803a 	cmpltu	r17,r4,r17
   1ef1c:	194b883a 	add	r5,r3,r5
   1ef20:	2c4b883a 	add	r5,r5,r17
   1ef24:	2880202c 	andhi	r2,r5,128
   1ef28:	2023883a 	mov	r17,r4
   1ef2c:	103f5c26 	beq	r2,zero,1eca0 <_gp+0xfffecb80>
   1ef30:	00bfe034 	movhi	r2,65408
   1ef34:	10bfffc4 	addi	r2,r2,-1
   1ef38:	4821883a 	mov	r16,r9
   1ef3c:	288a703a 	and	r5,r5,r2
   1ef40:	003ead06 	br	1e9f8 <_gp+0xfffec8d8>
   1ef44:	2c44b03a 	or	r2,r5,r17
   1ef48:	8000291e 	bne	r16,zero,1eff0 <__subdf3+0x68c>
   1ef4c:	10004f1e 	bne	r2,zero,1f08c <__subdf3+0x728>
   1ef50:	1984b03a 	or	r2,r3,r6
   1ef54:	10000426 	beq	r2,zero,1ef68 <__subdf3+0x604>
   1ef58:	180b883a 	mov	r5,r3
   1ef5c:	3023883a 	mov	r17,r6
   1ef60:	3825883a 	mov	r18,r7
   1ef64:	003ea406 	br	1e9f8 <_gp+0xfffec8d8>
   1ef68:	0011883a 	mov	r8,zero
   1ef6c:	000b883a 	mov	r5,zero
   1ef70:	0023883a 	mov	r17,zero
   1ef74:	003f0006 	br	1eb78 <_gp+0xfffeca58>
   1ef78:	11fff804 	addi	r7,r2,-32
   1ef7c:	19c8d83a 	srl	r4,r3,r7
   1ef80:	01c00804 	movi	r7,32
   1ef84:	11c07e26 	beq	r2,r7,1f180 <__subdf3+0x81c>
   1ef88:	01c01004 	movi	r7,64
   1ef8c:	3885c83a 	sub	r2,r7,r2
   1ef90:	1884983a 	sll	r2,r3,r2
   1ef94:	118cb03a 	or	r6,r2,r6
   1ef98:	300ec03a 	cmpne	r7,r6,zero
   1ef9c:	390eb03a 	or	r7,r7,r4
   1efa0:	0005883a 	mov	r2,zero
   1efa4:	003f0906 	br	1ebcc <_gp+0xfffecaac>
   1efa8:	0101ffc4 	movi	r4,2047
   1efac:	513f991e 	bne	r10,r4,1ee14 <_gp+0xfffeccf4>
   1efb0:	180b883a 	mov	r5,r3
   1efb4:	3023883a 	mov	r17,r6
   1efb8:	5021883a 	mov	r16,r10
   1efbc:	3825883a 	mov	r18,r7
   1efc0:	003e8d06 	br	1e9f8 <_gp+0xfffec8d8>
   1efc4:	80001a1e 	bne	r16,zero,1f030 <__subdf3+0x6cc>
   1efc8:	2c48b03a 	or	r4,r5,r17
   1efcc:	20005526 	beq	r4,zero,1f124 <__subdf3+0x7c0>
   1efd0:	0084303a 	nor	r2,zero,r2
   1efd4:	1000511e 	bne	r2,zero,1f11c <__subdf3+0x7b8>
   1efd8:	89a3883a 	add	r17,r17,r6
   1efdc:	194b883a 	add	r5,r3,r5
   1efe0:	898d803a 	cmpltu	r6,r17,r6
   1efe4:	298b883a 	add	r5,r5,r6
   1efe8:	5021883a 	mov	r16,r10
   1efec:	003efc06 	br	1ebe0 <_gp+0xfffecac0>
   1eff0:	1000341e 	bne	r2,zero,1f0c4 <__subdf3+0x760>
   1eff4:	1984b03a 	or	r2,r3,r6
   1eff8:	10006f26 	beq	r2,zero,1f1b8 <__subdf3+0x854>
   1effc:	180b883a 	mov	r5,r3
   1f000:	3023883a 	mov	r17,r6
   1f004:	3825883a 	mov	r18,r7
   1f008:	0401ffc4 	movi	r16,2047
   1f00c:	003e7a06 	br	1e9f8 <_gp+0xfffec8d8>
   1f010:	2c62b03a 	or	r17,r5,r17
   1f014:	8822c03a 	cmpne	r17,r17,zero
   1f018:	0005883a 	mov	r2,zero
   1f01c:	003f8a06 	br	1ee48 <_gp+0xfffecd28>
   1f020:	3821883a 	mov	r16,r7
   1f024:	000b883a 	mov	r5,zero
   1f028:	0023883a 	mov	r17,zero
   1f02c:	003ed206 	br	1eb78 <_gp+0xfffeca58>
   1f030:	0101ffc4 	movi	r4,2047
   1f034:	51003b26 	beq	r10,r4,1f124 <__subdf3+0x7c0>
   1f038:	0085c83a 	sub	r2,zero,r2
   1f03c:	29402034 	orhi	r5,r5,128
   1f040:	01000e04 	movi	r4,56
   1f044:	20806216 	blt	r4,r2,1f1d0 <__subdf3+0x86c>
   1f048:	010007c4 	movi	r4,31
   1f04c:	20806b16 	blt	r4,r2,1f1fc <__subdf3+0x898>
   1f050:	01000804 	movi	r4,32
   1f054:	2089c83a 	sub	r4,r4,r2
   1f058:	2912983a 	sll	r9,r5,r4
   1f05c:	888ed83a 	srl	r7,r17,r2
   1f060:	8908983a 	sll	r4,r17,r4
   1f064:	2884d83a 	srl	r2,r5,r2
   1f068:	49e2b03a 	or	r17,r9,r7
   1f06c:	2008c03a 	cmpne	r4,r4,zero
   1f070:	8922b03a 	or	r17,r17,r4
   1f074:	89a3883a 	add	r17,r17,r6
   1f078:	10c5883a 	add	r2,r2,r3
   1f07c:	898d803a 	cmpltu	r6,r17,r6
   1f080:	118b883a 	add	r5,r2,r6
   1f084:	5021883a 	mov	r16,r10
   1f088:	003ed506 	br	1ebe0 <_gp+0xfffecac0>
   1f08c:	1984b03a 	or	r2,r3,r6
   1f090:	103e5926 	beq	r2,zero,1e9f8 <_gp+0xfffec8d8>
   1f094:	8989c83a 	sub	r4,r17,r6
   1f098:	8911803a 	cmpltu	r8,r17,r4
   1f09c:	28c5c83a 	sub	r2,r5,r3
   1f0a0:	1205c83a 	sub	r2,r2,r8
   1f0a4:	1200202c 	andhi	r8,r2,128
   1f0a8:	403ef926 	beq	r8,zero,1ec90 <_gp+0xfffecb70>
   1f0ac:	3463c83a 	sub	r17,r6,r17
   1f0b0:	194bc83a 	sub	r5,r3,r5
   1f0b4:	344d803a 	cmpltu	r6,r6,r17
   1f0b8:	298bc83a 	sub	r5,r5,r6
   1f0bc:	3825883a 	mov	r18,r7
   1f0c0:	003e4d06 	br	1e9f8 <_gp+0xfffec8d8>
   1f0c4:	1984b03a 	or	r2,r3,r6
   1f0c8:	10002b26 	beq	r2,zero,1f178 <__subdf3+0x814>
   1f0cc:	2808d0fa 	srli	r4,r5,3
   1f0d0:	8822d0fa 	srli	r17,r17,3
   1f0d4:	280a977a 	slli	r5,r5,29
   1f0d8:	2080022c 	andhi	r2,r4,8
   1f0dc:	2c62b03a 	or	r17,r5,r17
   1f0e0:	10000826 	beq	r2,zero,1f104 <__subdf3+0x7a0>
   1f0e4:	1810d0fa 	srli	r8,r3,3
   1f0e8:	4080022c 	andhi	r2,r8,8
   1f0ec:	1000051e 	bne	r2,zero,1f104 <__subdf3+0x7a0>
   1f0f0:	300cd0fa 	srli	r6,r6,3
   1f0f4:	1804977a 	slli	r2,r3,29
   1f0f8:	4009883a 	mov	r4,r8
   1f0fc:	3825883a 	mov	r18,r7
   1f100:	11a2b03a 	or	r17,r2,r6
   1f104:	880ad77a 	srli	r5,r17,29
   1f108:	200890fa 	slli	r4,r4,3
   1f10c:	882290fa 	slli	r17,r17,3
   1f110:	0401ffc4 	movi	r16,2047
   1f114:	290ab03a 	or	r5,r5,r4
   1f118:	003e3706 	br	1e9f8 <_gp+0xfffec8d8>
   1f11c:	0101ffc4 	movi	r4,2047
   1f120:	513fc71e 	bne	r10,r4,1f040 <_gp+0xfffecf20>
   1f124:	180b883a 	mov	r5,r3
   1f128:	3023883a 	mov	r17,r6
   1f12c:	5021883a 	mov	r16,r10
   1f130:	003e3106 	br	1e9f8 <_gp+0xfffec8d8>
   1f134:	10002d26 	beq	r2,zero,1f1ec <__subdf3+0x888>
   1f138:	1984b03a 	or	r2,r3,r6
   1f13c:	10000e26 	beq	r2,zero,1f178 <__subdf3+0x814>
   1f140:	2808d0fa 	srli	r4,r5,3
   1f144:	8822d0fa 	srli	r17,r17,3
   1f148:	280a977a 	slli	r5,r5,29
   1f14c:	2080022c 	andhi	r2,r4,8
   1f150:	2c62b03a 	or	r17,r5,r17
   1f154:	103feb26 	beq	r2,zero,1f104 <_gp+0xfffecfe4>
   1f158:	180ed0fa 	srli	r7,r3,3
   1f15c:	3880022c 	andhi	r2,r7,8
   1f160:	103fe81e 	bne	r2,zero,1f104 <_gp+0xfffecfe4>
   1f164:	300cd0fa 	srli	r6,r6,3
   1f168:	1804977a 	slli	r2,r3,29
   1f16c:	3809883a 	mov	r4,r7
   1f170:	11a2b03a 	or	r17,r2,r6
   1f174:	003fe306 	br	1f104 <_gp+0xfffecfe4>
   1f178:	0401ffc4 	movi	r16,2047
   1f17c:	003e1e06 	br	1e9f8 <_gp+0xfffec8d8>
   1f180:	0005883a 	mov	r2,zero
   1f184:	003f8306 	br	1ef94 <_gp+0xfffece74>
   1f188:	113ff804 	addi	r4,r2,-32
   1f18c:	02000804 	movi	r8,32
   1f190:	2908d83a 	srl	r4,r5,r4
   1f194:	12002526 	beq	r2,r8,1f22c <__subdf3+0x8c8>
   1f198:	02001004 	movi	r8,64
   1f19c:	4085c83a 	sub	r2,r8,r2
   1f1a0:	288a983a 	sll	r5,r5,r2
   1f1a4:	2c62b03a 	or	r17,r5,r17
   1f1a8:	8822c03a 	cmpne	r17,r17,zero
   1f1ac:	8922b03a 	or	r17,r17,r4
   1f1b0:	0005883a 	mov	r2,zero
   1f1b4:	003f2406 	br	1ee48 <_gp+0xfffecd28>
   1f1b8:	01402034 	movhi	r5,128
   1f1bc:	0011883a 	mov	r8,zero
   1f1c0:	297fffc4 	addi	r5,r5,-1
   1f1c4:	047ffe04 	movi	r17,-8
   1f1c8:	0401ffc4 	movi	r16,2047
   1f1cc:	003e6a06 	br	1eb78 <_gp+0xfffeca58>
   1f1d0:	2c62b03a 	or	r17,r5,r17
   1f1d4:	8822c03a 	cmpne	r17,r17,zero
   1f1d8:	0005883a 	mov	r2,zero
   1f1dc:	003fa506 	br	1f074 <_gp+0xfffecf54>
   1f1e0:	180b883a 	mov	r5,r3
   1f1e4:	3023883a 	mov	r17,r6
   1f1e8:	003e0306 	br	1e9f8 <_gp+0xfffec8d8>
   1f1ec:	180b883a 	mov	r5,r3
   1f1f0:	3023883a 	mov	r17,r6
   1f1f4:	0401ffc4 	movi	r16,2047
   1f1f8:	003dff06 	br	1e9f8 <_gp+0xfffec8d8>
   1f1fc:	113ff804 	addi	r4,r2,-32
   1f200:	01c00804 	movi	r7,32
   1f204:	2908d83a 	srl	r4,r5,r4
   1f208:	11c00a26 	beq	r2,r7,1f234 <__subdf3+0x8d0>
   1f20c:	01c01004 	movi	r7,64
   1f210:	3885c83a 	sub	r2,r7,r2
   1f214:	288a983a 	sll	r5,r5,r2
   1f218:	2c62b03a 	or	r17,r5,r17
   1f21c:	8822c03a 	cmpne	r17,r17,zero
   1f220:	8922b03a 	or	r17,r17,r4
   1f224:	0005883a 	mov	r2,zero
   1f228:	003f9206 	br	1f074 <_gp+0xfffecf54>
   1f22c:	000b883a 	mov	r5,zero
   1f230:	003fdc06 	br	1f1a4 <_gp+0xfffed084>
   1f234:	000b883a 	mov	r5,zero
   1f238:	003ff706 	br	1f218 <_gp+0xfffed0f8>

0001f23c <__fixdfsi>:
   1f23c:	2806d53a 	srli	r3,r5,20
   1f240:	00800434 	movhi	r2,16
   1f244:	10bfffc4 	addi	r2,r2,-1
   1f248:	18c1ffcc 	andi	r3,r3,2047
   1f24c:	0180ff84 	movi	r6,1022
   1f250:	2884703a 	and	r2,r5,r2
   1f254:	de00012e 	bgeu	sp,et,1f25c <__fixdfsi+0x20>
   1f258:	003b68fa 	trap	3
   1f25c:	280ad7fa 	srli	r5,r5,31
   1f260:	30c0130e 	bge	r6,r3,1f2b0 <__fixdfsi+0x74>
   1f264:	01810744 	movi	r6,1053
   1f268:	30c00d16 	blt	r6,r3,1f2a0 <__fixdfsi+0x64>
   1f26c:	01810cc4 	movi	r6,1075
   1f270:	30cdc83a 	sub	r6,r6,r3
   1f274:	01c007c4 	movi	r7,31
   1f278:	10800434 	orhi	r2,r2,16
   1f27c:	39800e0e 	bge	r7,r6,1f2b8 <__fixdfsi+0x7c>
   1f280:	010104c4 	movi	r4,1043
   1f284:	20c7c83a 	sub	r3,r4,r3
   1f288:	10c6d83a 	srl	r3,r2,r3
   1f28c:	29403fcc 	andi	r5,r5,255
   1f290:	0145c83a 	sub	r2,zero,r5
   1f294:	1884f03a 	xor	r2,r3,r2
   1f298:	1145883a 	add	r2,r2,r5
   1f29c:	f800283a 	ret
   1f2a0:	00a00034 	movhi	r2,32768
   1f2a4:	10bfffc4 	addi	r2,r2,-1
   1f2a8:	2885883a 	add	r2,r5,r2
   1f2ac:	f800283a 	ret
   1f2b0:	0005883a 	mov	r2,zero
   1f2b4:	f800283a 	ret
   1f2b8:	18fefb44 	addi	r3,r3,-1043
   1f2bc:	2188d83a 	srl	r4,r4,r6
   1f2c0:	10c6983a 	sll	r3,r2,r3
   1f2c4:	20c6b03a 	or	r3,r4,r3
   1f2c8:	003ff006 	br	1f28c <_gp+0xfffed16c>

0001f2cc <__floatsidf>:
   1f2cc:	defffd04 	addi	sp,sp,-12
   1f2d0:	de00012e 	bgeu	sp,et,1f2d8 <__floatsidf+0xc>
   1f2d4:	003b68fa 	trap	3
   1f2d8:	dc400115 	stw	r17,4(sp)
   1f2dc:	dfc00215 	stw	ra,8(sp)
   1f2e0:	dc000015 	stw	r16,0(sp)
   1f2e4:	2023883a 	mov	r17,r4
   1f2e8:	20001426 	beq	r4,zero,1f33c <__floatsidf+0x70>
   1f2ec:	2020d7fa 	srli	r16,r4,31
   1f2f0:	80000126 	beq	r16,zero,1f2f8 <__floatsidf+0x2c>
   1f2f4:	0123c83a 	sub	r17,zero,r4
   1f2f8:	8809883a 	mov	r4,r17
   1f2fc:	001f4500 	call	1f450 <__clzsi2>
   1f300:	01410784 	movi	r5,1054
   1f304:	00c00284 	movi	r3,10
   1f308:	288bc83a 	sub	r5,r5,r2
   1f30c:	18801c16 	blt	r3,r2,1f380 <__floatsidf+0xb4>
   1f310:	00c002c4 	movi	r3,11
   1f314:	1887c83a 	sub	r3,r3,r2
   1f318:	88c8d83a 	srl	r4,r17,r3
   1f31c:	00c00434 	movhi	r3,16
   1f320:	18ffffc4 	addi	r3,r3,-1
   1f324:	10800544 	addi	r2,r2,21
   1f328:	20c8703a 	and	r4,r4,r3
   1f32c:	8884983a 	sll	r2,r17,r2
   1f330:	28c1ffcc 	andi	r3,r5,2047
   1f334:	800d883a 	mov	r6,r16
   1f338:	00000406 	br	1f34c <__floatsidf+0x80>
   1f33c:	000d883a 	mov	r6,zero
   1f340:	0007883a 	mov	r3,zero
   1f344:	0009883a 	mov	r4,zero
   1f348:	0005883a 	mov	r2,zero
   1f34c:	180a953a 	slli	r5,r3,20
   1f350:	31803fcc 	andi	r6,r6,255
   1f354:	00c00434 	movhi	r3,16
   1f358:	300c97fa 	slli	r6,r6,31
   1f35c:	18ffffc4 	addi	r3,r3,-1
   1f360:	20c6703a 	and	r3,r4,r3
   1f364:	1946b03a 	or	r3,r3,r5
   1f368:	1986b03a 	or	r3,r3,r6
   1f36c:	dfc00217 	ldw	ra,8(sp)
   1f370:	dc400117 	ldw	r17,4(sp)
   1f374:	dc000017 	ldw	r16,0(sp)
   1f378:	dec00304 	addi	sp,sp,12
   1f37c:	f800283a 	ret
   1f380:	10fffd44 	addi	r3,r2,-11
   1f384:	88c8983a 	sll	r4,r17,r3
   1f388:	00800434 	movhi	r2,16
   1f38c:	10bfffc4 	addi	r2,r2,-1
   1f390:	2088703a 	and	r4,r4,r2
   1f394:	28c1ffcc 	andi	r3,r5,2047
   1f398:	800d883a 	mov	r6,r16
   1f39c:	0005883a 	mov	r2,zero
   1f3a0:	003fea06 	br	1f34c <_gp+0xfffed22c>

0001f3a4 <__floatunsidf>:
   1f3a4:	defffe04 	addi	sp,sp,-8
   1f3a8:	de00012e 	bgeu	sp,et,1f3b0 <__floatunsidf+0xc>
   1f3ac:	003b68fa 	trap	3
   1f3b0:	dc000015 	stw	r16,0(sp)
   1f3b4:	dfc00115 	stw	ra,4(sp)
   1f3b8:	2021883a 	mov	r16,r4
   1f3bc:	20001026 	beq	r4,zero,1f400 <__floatunsidf+0x5c>
   1f3c0:	001f4500 	call	1f450 <__clzsi2>
   1f3c4:	01410784 	movi	r5,1054
   1f3c8:	100d883a 	mov	r6,r2
   1f3cc:	288bc83a 	sub	r5,r5,r2
   1f3d0:	00800284 	movi	r2,10
   1f3d4:	11801616 	blt	r2,r6,1f430 <__floatunsidf+0x8c>
   1f3d8:	008002c4 	movi	r2,11
   1f3dc:	1185c83a 	sub	r2,r2,r6
   1f3e0:	8084d83a 	srl	r2,r16,r2
   1f3e4:	00c00434 	movhi	r3,16
   1f3e8:	31c00544 	addi	r7,r6,21
   1f3ec:	18ffffc4 	addi	r3,r3,-1
   1f3f0:	81e0983a 	sll	r16,r16,r7
   1f3f4:	10cc703a 	and	r6,r2,r3
   1f3f8:	2941ffcc 	andi	r5,r5,2047
   1f3fc:	00000206 	br	1f408 <__floatunsidf+0x64>
   1f400:	000b883a 	mov	r5,zero
   1f404:	000d883a 	mov	r6,zero
   1f408:	280a953a 	slli	r5,r5,20
   1f40c:	00c00434 	movhi	r3,16
   1f410:	18ffffc4 	addi	r3,r3,-1
   1f414:	30c6703a 	and	r3,r6,r3
   1f418:	8005883a 	mov	r2,r16
   1f41c:	1946b03a 	or	r3,r3,r5
   1f420:	dfc00117 	ldw	ra,4(sp)
   1f424:	dc000017 	ldw	r16,0(sp)
   1f428:	dec00204 	addi	sp,sp,8
   1f42c:	f800283a 	ret
   1f430:	31bffd44 	addi	r6,r6,-11
   1f434:	818c983a 	sll	r6,r16,r6
   1f438:	00800434 	movhi	r2,16
   1f43c:	10bfffc4 	addi	r2,r2,-1
   1f440:	2941ffcc 	andi	r5,r5,2047
   1f444:	0021883a 	mov	r16,zero
   1f448:	308c703a 	and	r6,r6,r2
   1f44c:	003fee06 	br	1f408 <_gp+0xfffed2e8>

0001f450 <__clzsi2>:
   1f450:	00bfffd4 	movui	r2,65535
   1f454:	de00012e 	bgeu	sp,et,1f45c <__clzsi2+0xc>
   1f458:	003b68fa 	trap	3
   1f45c:	11000b36 	bltu	r2,r4,1f48c <__clzsi2+0x3c>
   1f460:	00803fc4 	movi	r2,255
   1f464:	1100122e 	bgeu	r2,r4,1f4b0 <__clzsi2+0x60>
   1f468:	00c00204 	movi	r3,8
   1f46c:	01400604 	movi	r5,24
   1f470:	20c8d83a 	srl	r4,r4,r3
   1f474:	008000f4 	movhi	r2,3
   1f478:	10a48904 	addi	r2,r2,-28124
   1f47c:	1109883a 	add	r4,r2,r4
   1f480:	20800003 	ldbu	r2,0(r4)
   1f484:	2885c83a 	sub	r2,r5,r2
   1f488:	f800283a 	ret
   1f48c:	00804034 	movhi	r2,256
   1f490:	10bfffc4 	addi	r2,r2,-1
   1f494:	11000336 	bltu	r2,r4,1f4a4 <__clzsi2+0x54>
   1f498:	00c00404 	movi	r3,16
   1f49c:	180b883a 	mov	r5,r3
   1f4a0:	003ff306 	br	1f470 <_gp+0xfffed350>
   1f4a4:	00c00604 	movi	r3,24
   1f4a8:	01400204 	movi	r5,8
   1f4ac:	003ff006 	br	1f470 <_gp+0xfffed350>
   1f4b0:	0007883a 	mov	r3,zero
   1f4b4:	01400804 	movi	r5,32
   1f4b8:	003fed06 	br	1f470 <_gp+0xfffed350>

0001f4bc <atof>:
   1f4bc:	000b883a 	mov	r5,zero
   1f4c0:	de00012e 	bgeu	sp,et,1f4c8 <atof+0xc>
   1f4c4:	003b68fa 	trap	3
   1f4c8:	0020f241 	jmpi	20f24 <strtod>

0001f4cc <atoi>:
   1f4cc:	000b883a 	mov	r5,zero
   1f4d0:	01800284 	movi	r6,10
   1f4d4:	de00012e 	bgeu	sp,et,1f4dc <atoi+0x10>
   1f4d8:	003b68fa 	trap	3
   1f4dc:	002126c1 	jmpi	2126c <strtol>

0001f4e0 <_atoi_r>:
   1f4e0:	000d883a 	mov	r6,zero
   1f4e4:	01c00284 	movi	r7,10
   1f4e8:	de00012e 	bgeu	sp,et,1f4f0 <_atoi_r+0x10>
   1f4ec:	003b68fa 	trap	3
   1f4f0:	00210501 	jmpi	21050 <_strtol_r>

0001f4f4 <malloc>:
   1f4f4:	008000f4 	movhi	r2,3
   1f4f8:	10a84c04 	addi	r2,r2,-24272
   1f4fc:	de00012e 	bgeu	sp,et,1f504 <malloc+0x10>
   1f500:	003b68fa 	trap	3
   1f504:	200b883a 	mov	r5,r4
   1f508:	11000017 	ldw	r4,0(r2)
   1f50c:	001f6701 	jmpi	1f670 <_malloc_r>

0001f510 <free>:
   1f510:	008000f4 	movhi	r2,3
   1f514:	10a84c04 	addi	r2,r2,-24272
   1f518:	de00012e 	bgeu	sp,et,1f520 <free+0x10>
   1f51c:	003b68fa 	trap	3
   1f520:	200b883a 	mov	r5,r4
   1f524:	11000017 	ldw	r4,0(r2)
   1f528:	001f5841 	jmpi	1f584 <_free_r>

0001f52c <memcpy>:
   1f52c:	de00012e 	bgeu	sp,et,1f534 <memcpy+0x8>
   1f530:	003b68fa 	trap	3
   1f534:	2005883a 	mov	r2,r4
   1f538:	0007883a 	mov	r3,zero
   1f53c:	19800626 	beq	r3,r6,1f558 <memcpy+0x2c>
   1f540:	28c9883a 	add	r4,r5,r3
   1f544:	21c00003 	ldbu	r7,0(r4)
   1f548:	10c9883a 	add	r4,r2,r3
   1f54c:	18c00044 	addi	r3,r3,1
   1f550:	21c00005 	stb	r7,0(r4)
   1f554:	003ff906 	br	1f53c <_gp+0xfffed41c>
   1f558:	f800283a 	ret

0001f55c <memset>:
   1f55c:	de00012e 	bgeu	sp,et,1f564 <memset+0x8>
   1f560:	003b68fa 	trap	3
   1f564:	2005883a 	mov	r2,r4
   1f568:	2007883a 	mov	r3,r4
   1f56c:	218d883a 	add	r6,r4,r6
   1f570:	19800326 	beq	r3,r6,1f580 <memset+0x24>
   1f574:	19400005 	stb	r5,0(r3)
   1f578:	18c00044 	addi	r3,r3,1
   1f57c:	003ffc06 	br	1f570 <_gp+0xfffed450>
   1f580:	f800283a 	ret

0001f584 <_free_r>:
   1f584:	de00012e 	bgeu	sp,et,1f58c <_free_r+0x8>
   1f588:	003b68fa 	trap	3
   1f58c:	28003726 	beq	r5,zero,1f66c <_free_r+0xe8>
   1f590:	28ffff17 	ldw	r3,-4(r5)
   1f594:	28bfff04 	addi	r2,r5,-4
   1f598:	1800010e 	bge	r3,zero,1f5a0 <_free_r+0x1c>
   1f59c:	10c5883a 	add	r2,r2,r3
   1f5a0:	014000f4 	movhi	r5,3
   1f5a4:	296add04 	addi	r5,r5,-21644
   1f5a8:	28c00017 	ldw	r3,0(r5)
   1f5ac:	280d883a 	mov	r6,r5
   1f5b0:	1800031e 	bne	r3,zero,1f5c0 <_free_r+0x3c>
   1f5b4:	10000115 	stw	zero,4(r2)
   1f5b8:	28800015 	stw	r2,0(r5)
   1f5bc:	f800283a 	ret
   1f5c0:	10c00c2e 	bgeu	r2,r3,1f5f4 <_free_r+0x70>
   1f5c4:	11400017 	ldw	r5,0(r2)
   1f5c8:	1149883a 	add	r4,r2,r5
   1f5cc:	20c0041e 	bne	r4,r3,1f5e0 <_free_r+0x5c>
   1f5d0:	20c00017 	ldw	r3,0(r4)
   1f5d4:	28c7883a 	add	r3,r5,r3
   1f5d8:	10c00015 	stw	r3,0(r2)
   1f5dc:	20c00117 	ldw	r3,4(r4)
   1f5e0:	10c00115 	stw	r3,4(r2)
   1f5e4:	30800015 	stw	r2,0(r6)
   1f5e8:	f800283a 	ret
   1f5ec:	11400336 	bltu	r2,r5,1f5fc <_free_r+0x78>
   1f5f0:	2807883a 	mov	r3,r5
   1f5f4:	19400117 	ldw	r5,4(r3)
   1f5f8:	283ffc1e 	bne	r5,zero,1f5ec <_gp+0xfffed4cc>
   1f5fc:	19c00017 	ldw	r7,0(r3)
   1f600:	19cd883a 	add	r6,r3,r7
   1f604:	30800a1e 	bne	r6,r2,1f630 <_free_r+0xac>
   1f608:	10800017 	ldw	r2,0(r2)
   1f60c:	3885883a 	add	r2,r7,r2
   1f610:	18800015 	stw	r2,0(r3)
   1f614:	1889883a 	add	r4,r3,r2
   1f618:	2140141e 	bne	r4,r5,1f66c <_free_r+0xe8>
   1f61c:	29000017 	ldw	r4,0(r5)
   1f620:	1105883a 	add	r2,r2,r4
   1f624:	18800015 	stw	r2,0(r3)
   1f628:	28800117 	ldw	r2,4(r5)
   1f62c:	00000e06 	br	1f668 <_free_r+0xe4>
   1f630:	1180032e 	bgeu	r2,r6,1f640 <_free_r+0xbc>
   1f634:	00800304 	movi	r2,12
   1f638:	20800015 	stw	r2,0(r4)
   1f63c:	f800283a 	ret
   1f640:	11800017 	ldw	r6,0(r2)
   1f644:	1189883a 	add	r4,r2,r6
   1f648:	2140061e 	bne	r4,r5,1f664 <_free_r+0xe0>
   1f64c:	29000017 	ldw	r4,0(r5)
   1f650:	3109883a 	add	r4,r6,r4
   1f654:	11000015 	stw	r4,0(r2)
   1f658:	29000117 	ldw	r4,4(r5)
   1f65c:	11000115 	stw	r4,4(r2)
   1f660:	00000106 	br	1f668 <_free_r+0xe4>
   1f664:	11400115 	stw	r5,4(r2)
   1f668:	18800115 	stw	r2,4(r3)
   1f66c:	f800283a 	ret

0001f670 <_malloc_r>:
   1f670:	defffb04 	addi	sp,sp,-20
   1f674:	de00012e 	bgeu	sp,et,1f67c <_malloc_r+0xc>
   1f678:	003b68fa 	trap	3
   1f67c:	00bfff04 	movi	r2,-4
   1f680:	dc000015 	stw	r16,0(sp)
   1f684:	2c0000c4 	addi	r16,r5,3
   1f688:	80a0703a 	and	r16,r16,r2
   1f68c:	dc800215 	stw	r18,8(sp)
   1f690:	dfc00415 	stw	ra,16(sp)
   1f694:	dcc00315 	stw	r19,12(sp)
   1f698:	dc400115 	stw	r17,4(sp)
   1f69c:	84000204 	addi	r16,r16,8
   1f6a0:	00800304 	movi	r2,12
   1f6a4:	2025883a 	mov	r18,r4
   1f6a8:	8080022e 	bgeu	r16,r2,1f6b4 <_malloc_r+0x44>
   1f6ac:	1021883a 	mov	r16,r2
   1f6b0:	00000506 	br	1f6c8 <_malloc_r+0x58>
   1f6b4:	8000040e 	bge	r16,zero,1f6c8 <_malloc_r+0x58>
   1f6b8:	00800304 	movi	r2,12
   1f6bc:	90800015 	stw	r2,0(r18)
   1f6c0:	0005883a 	mov	r2,zero
   1f6c4:	00003c06 	br	1f7b8 <_malloc_r+0x148>
   1f6c8:	817ffb36 	bltu	r16,r5,1f6b8 <_gp+0xfffed598>
   1f6cc:	010000f4 	movhi	r4,3
   1f6d0:	212add04 	addi	r4,r4,-21644
   1f6d4:	20800017 	ldw	r2,0(r4)
   1f6d8:	1007883a 	mov	r3,r2
   1f6dc:	18000926 	beq	r3,zero,1f704 <_malloc_r+0x94>
   1f6e0:	19400017 	ldw	r5,0(r3)
   1f6e4:	2c0bc83a 	sub	r5,r5,r16
   1f6e8:	28001716 	blt	r5,zero,1f748 <_malloc_r+0xd8>
   1f6ec:	018002c4 	movi	r6,11
   1f6f0:	31400d2e 	bgeu	r6,r5,1f728 <_malloc_r+0xb8>
   1f6f4:	19400015 	stw	r5,0(r3)
   1f6f8:	1945883a 	add	r2,r3,r5
   1f6fc:	14000015 	stw	r16,0(r2)
   1f700:	1000231e 	bne	r2,zero,1f790 <_malloc_r+0x120>
   1f704:	044000f4 	movhi	r17,3
   1f708:	8c6adc04 	addi	r17,r17,-21648
   1f70c:	88800017 	ldw	r2,0(r17)
   1f710:	1000101e 	bne	r2,zero,1f754 <_malloc_r+0xe4>
   1f714:	9009883a 	mov	r4,r18
   1f718:	000b883a 	mov	r5,zero
   1f71c:	001f9fc0 	call	1f9fc <_sbrk_r>
   1f720:	88800015 	stw	r2,0(r17)
   1f724:	00000b06 	br	1f754 <_malloc_r+0xe4>
   1f728:	10c0031e 	bne	r2,r3,1f738 <_malloc_r+0xc8>
   1f72c:	10c00117 	ldw	r3,4(r2)
   1f730:	20c00015 	stw	r3,0(r4)
   1f734:	00001606 	br	1f790 <_malloc_r+0x120>
   1f738:	19000117 	ldw	r4,4(r3)
   1f73c:	11000115 	stw	r4,4(r2)
   1f740:	1805883a 	mov	r2,r3
   1f744:	00001206 	br	1f790 <_malloc_r+0x120>
   1f748:	1805883a 	mov	r2,r3
   1f74c:	18c00117 	ldw	r3,4(r3)
   1f750:	003fe206 	br	1f6dc <_gp+0xfffed5bc>
   1f754:	9009883a 	mov	r4,r18
   1f758:	800b883a 	mov	r5,r16
   1f75c:	001f9fc0 	call	1f9fc <_sbrk_r>
   1f760:	04ffffc4 	movi	r19,-1
   1f764:	14ffd426 	beq	r2,r19,1f6b8 <_gp+0xfffed598>
   1f768:	144000c4 	addi	r17,r2,3
   1f76c:	00ffff04 	movi	r3,-4
   1f770:	88e2703a 	and	r17,r17,r3
   1f774:	88800526 	beq	r17,r2,1f78c <_malloc_r+0x11c>
   1f778:	9009883a 	mov	r4,r18
   1f77c:	888bc83a 	sub	r5,r17,r2
   1f780:	001f9fc0 	call	1f9fc <_sbrk_r>
   1f784:	14ffcc26 	beq	r2,r19,1f6b8 <_gp+0xfffed598>
   1f788:	8805883a 	mov	r2,r17
   1f78c:	14000015 	stw	r16,0(r2)
   1f790:	114002c4 	addi	r5,r2,11
   1f794:	00fffe04 	movi	r3,-8
   1f798:	11000104 	addi	r4,r2,4
   1f79c:	28c6703a 	and	r3,r5,r3
   1f7a0:	1909c83a 	sub	r4,r3,r4
   1f7a4:	20000326 	beq	r4,zero,1f7b4 <_malloc_r+0x144>
   1f7a8:	110b883a 	add	r5,r2,r4
   1f7ac:	0109c83a 	sub	r4,zero,r4
   1f7b0:	29000015 	stw	r4,0(r5)
   1f7b4:	1805883a 	mov	r2,r3
   1f7b8:	dfc00417 	ldw	ra,16(sp)
   1f7bc:	dcc00317 	ldw	r19,12(sp)
   1f7c0:	dc800217 	ldw	r18,8(sp)
   1f7c4:	dc400117 	ldw	r17,4(sp)
   1f7c8:	dc000017 	ldw	r16,0(sp)
   1f7cc:	dec00504 	addi	sp,sp,20
   1f7d0:	f800283a 	ret

0001f7d4 <_printf_r>:
   1f7d4:	defffd04 	addi	sp,sp,-12
   1f7d8:	de00012e 	bgeu	sp,et,1f7e0 <_printf_r+0xc>
   1f7dc:	003b68fa 	trap	3
   1f7e0:	dfc00015 	stw	ra,0(sp)
   1f7e4:	d9800115 	stw	r6,4(sp)
   1f7e8:	d9c00215 	stw	r7,8(sp)
   1f7ec:	20c00217 	ldw	r3,8(r4)
   1f7f0:	280d883a 	mov	r6,r5
   1f7f4:	014000b4 	movhi	r5,2
   1f7f8:	29479c04 	addi	r5,r5,7792
   1f7fc:	19400115 	stw	r5,4(r3)
   1f800:	21400217 	ldw	r5,8(r4)
   1f804:	d9c00104 	addi	r7,sp,4
   1f808:	00218f80 	call	218f8 <___vfprintf_internal_r>
   1f80c:	dfc00017 	ldw	ra,0(sp)
   1f810:	dec00304 	addi	sp,sp,12
   1f814:	f800283a 	ret

0001f818 <printf>:
   1f818:	defffc04 	addi	sp,sp,-16
   1f81c:	de00012e 	bgeu	sp,et,1f824 <printf+0xc>
   1f820:	003b68fa 	trap	3
   1f824:	dfc00015 	stw	ra,0(sp)
   1f828:	d9400115 	stw	r5,4(sp)
   1f82c:	d9800215 	stw	r6,8(sp)
   1f830:	d9c00315 	stw	r7,12(sp)
   1f834:	008000f4 	movhi	r2,3
   1f838:	10a84c04 	addi	r2,r2,-24272
   1f83c:	10800017 	ldw	r2,0(r2)
   1f840:	200b883a 	mov	r5,r4
   1f844:	010000b4 	movhi	r4,2
   1f848:	10c00217 	ldw	r3,8(r2)
   1f84c:	21079c04 	addi	r4,r4,7792
   1f850:	d9800104 	addi	r6,sp,4
   1f854:	19000115 	stw	r4,4(r3)
   1f858:	11000217 	ldw	r4,8(r2)
   1f85c:	0021e440 	call	21e44 <__vfprintf_internal>
   1f860:	dfc00017 	ldw	ra,0(sp)
   1f864:	dec00404 	addi	sp,sp,16
   1f868:	f800283a 	ret

0001f86c <putc>:
   1f86c:	defffd04 	addi	sp,sp,-12
   1f870:	008000b4 	movhi	r2,2
   1f874:	de00012e 	bgeu	sp,et,1f87c <putc+0x10>
   1f878:	003b68fa 	trap	3
   1f87c:	10879c04 	addi	r2,r2,7792
   1f880:	dc000115 	stw	r16,4(sp)
   1f884:	dfc00215 	stw	ra,8(sp)
   1f888:	28800115 	stw	r2,4(r5)
   1f88c:	008000f4 	movhi	r2,3
   1f890:	10a84c04 	addi	r2,r2,-24272
   1f894:	d9000005 	stb	r4,0(sp)
   1f898:	2021883a 	mov	r16,r4
   1f89c:	11000017 	ldw	r4,0(r2)
   1f8a0:	d80d883a 	mov	r6,sp
   1f8a4:	01c00044 	movi	r7,1
   1f8a8:	0021e700 	call	21e70 <__sfvwrite_small_dev>
   1f8ac:	00ffffc4 	movi	r3,-1
   1f8b0:	10c00126 	beq	r2,r3,1f8b8 <putc+0x4c>
   1f8b4:	8005883a 	mov	r2,r16
   1f8b8:	dfc00217 	ldw	ra,8(sp)
   1f8bc:	dc000117 	ldw	r16,4(sp)
   1f8c0:	dec00304 	addi	sp,sp,12
   1f8c4:	f800283a 	ret

0001f8c8 <_putc_r>:
   1f8c8:	defffd04 	addi	sp,sp,-12
   1f8cc:	008000b4 	movhi	r2,2
   1f8d0:	de00012e 	bgeu	sp,et,1f8d8 <_putc_r+0x10>
   1f8d4:	003b68fa 	trap	3
   1f8d8:	10879c04 	addi	r2,r2,7792
   1f8dc:	dc000115 	stw	r16,4(sp)
   1f8e0:	dfc00215 	stw	ra,8(sp)
   1f8e4:	30800115 	stw	r2,4(r6)
   1f8e8:	008000f4 	movhi	r2,3
   1f8ec:	10a84c04 	addi	r2,r2,-24272
   1f8f0:	11000017 	ldw	r4,0(r2)
   1f8f4:	2821883a 	mov	r16,r5
   1f8f8:	01c00044 	movi	r7,1
   1f8fc:	300b883a 	mov	r5,r6
   1f900:	d80d883a 	mov	r6,sp
   1f904:	dc000005 	stb	r16,0(sp)
   1f908:	0021e700 	call	21e70 <__sfvwrite_small_dev>
   1f90c:	00ffffc4 	movi	r3,-1
   1f910:	10c00126 	beq	r2,r3,1f918 <_putc_r+0x50>
   1f914:	8005883a 	mov	r2,r16
   1f918:	dfc00217 	ldw	ra,8(sp)
   1f91c:	dc000117 	ldw	r16,4(sp)
   1f920:	dec00304 	addi	sp,sp,12
   1f924:	f800283a 	ret

0001f928 <_putchar_r>:
   1f928:	de00012e 	bgeu	sp,et,1f930 <_putchar_r+0x8>
   1f92c:	003b68fa 	trap	3
   1f930:	21800217 	ldw	r6,8(r4)
   1f934:	001f8c81 	jmpi	1f8c8 <_putc_r>

0001f938 <putchar>:
   1f938:	008000f4 	movhi	r2,3
   1f93c:	10a84c04 	addi	r2,r2,-24272
   1f940:	de00012e 	bgeu	sp,et,1f948 <putchar+0x10>
   1f944:	003b68fa 	trap	3
   1f948:	200b883a 	mov	r5,r4
   1f94c:	11000017 	ldw	r4,0(r2)
   1f950:	21800217 	ldw	r6,8(r4)
   1f954:	001f8c81 	jmpi	1f8c8 <_putc_r>

0001f958 <_puts_r>:
   1f958:	defffd04 	addi	sp,sp,-12
   1f95c:	de00012e 	bgeu	sp,et,1f964 <_puts_r+0xc>
   1f960:	003b68fa 	trap	3
   1f964:	dc000015 	stw	r16,0(sp)
   1f968:	2021883a 	mov	r16,r4
   1f96c:	2809883a 	mov	r4,r5
   1f970:	dfc00215 	stw	ra,8(sp)
   1f974:	dc400115 	stw	r17,4(sp)
   1f978:	2823883a 	mov	r17,r5
   1f97c:	001fbcc0 	call	1fbcc <strlen>
   1f980:	81400217 	ldw	r5,8(r16)
   1f984:	00c000b4 	movhi	r3,2
   1f988:	18c79c04 	addi	r3,r3,7792
   1f98c:	28c00115 	stw	r3,4(r5)
   1f990:	8009883a 	mov	r4,r16
   1f994:	880d883a 	mov	r6,r17
   1f998:	100f883a 	mov	r7,r2
   1f99c:	0021e700 	call	21e70 <__sfvwrite_small_dev>
   1f9a0:	00ffffc4 	movi	r3,-1
   1f9a4:	10c00926 	beq	r2,r3,1f9cc <_puts_r+0x74>
   1f9a8:	81400217 	ldw	r5,8(r16)
   1f9ac:	018000f4 	movhi	r6,3
   1f9b0:	8009883a 	mov	r4,r16
   1f9b4:	28800117 	ldw	r2,4(r5)
   1f9b8:	31a4c904 	addi	r6,r6,-27868
   1f9bc:	01c00044 	movi	r7,1
   1f9c0:	103ee83a 	callr	r2
   1f9c4:	10bfffe0 	cmpeqi	r2,r2,-1
   1f9c8:	0085c83a 	sub	r2,zero,r2
   1f9cc:	dfc00217 	ldw	ra,8(sp)
   1f9d0:	dc400117 	ldw	r17,4(sp)
   1f9d4:	dc000017 	ldw	r16,0(sp)
   1f9d8:	dec00304 	addi	sp,sp,12
   1f9dc:	f800283a 	ret

0001f9e0 <puts>:
   1f9e0:	008000f4 	movhi	r2,3
   1f9e4:	10a84c04 	addi	r2,r2,-24272
   1f9e8:	de00012e 	bgeu	sp,et,1f9f0 <puts+0x10>
   1f9ec:	003b68fa 	trap	3
   1f9f0:	200b883a 	mov	r5,r4
   1f9f4:	11000017 	ldw	r4,0(r2)
   1f9f8:	001f9581 	jmpi	1f958 <_puts_r>

0001f9fc <_sbrk_r>:
   1f9fc:	defffd04 	addi	sp,sp,-12
   1fa00:	de00012e 	bgeu	sp,et,1fa08 <_sbrk_r+0xc>
   1fa04:	003b68fa 	trap	3
   1fa08:	dc000015 	stw	r16,0(sp)
   1fa0c:	040000f4 	movhi	r16,3
   1fa10:	dc400115 	stw	r17,4(sp)
   1fa14:	842ade04 	addi	r16,r16,-21640
   1fa18:	2023883a 	mov	r17,r4
   1fa1c:	2809883a 	mov	r4,r5
   1fa20:	dfc00215 	stw	ra,8(sp)
   1fa24:	80000015 	stw	zero,0(r16)
   1fa28:	0024a300 	call	24a30 <sbrk>
   1fa2c:	00ffffc4 	movi	r3,-1
   1fa30:	10c0031e 	bne	r2,r3,1fa40 <_sbrk_r+0x44>
   1fa34:	80c00017 	ldw	r3,0(r16)
   1fa38:	18000126 	beq	r3,zero,1fa40 <_sbrk_r+0x44>
   1fa3c:	88c00015 	stw	r3,0(r17)
   1fa40:	dfc00217 	ldw	ra,8(sp)
   1fa44:	dc400117 	ldw	r17,4(sp)
   1fa48:	dc000017 	ldw	r16,0(sp)
   1fa4c:	dec00304 	addi	sp,sp,12
   1fa50:	f800283a 	ret

0001fa54 <_snprintf_r>:
   1fa54:	3005883a 	mov	r2,r6
   1fa58:	3000040e 	bge	r6,zero,1fa6c <_snprintf_r+0x18>
   1fa5c:	008022c4 	movi	r2,139
   1fa60:	20800015 	stw	r2,0(r4)
   1fa64:	00bfffc4 	movi	r2,-1
   1fa68:	f800283a 	ret
   1fa6c:	defff604 	addi	sp,sp,-40
   1fa70:	00c08204 	movi	r3,520
   1fa74:	de00012e 	bgeu	sp,et,1fa7c <_snprintf_r+0x28>
   1fa78:	003b68fa 	trap	3
   1fa7c:	dfc00915 	stw	ra,36(sp)
   1fa80:	dc400815 	stw	r17,32(sp)
   1fa84:	dc000715 	stw	r16,28(sp)
   1fa88:	d8c0000d 	sth	r3,0(sp)
   1fa8c:	d9400415 	stw	r5,16(sp)
   1fa90:	d9400215 	stw	r5,8(sp)
   1fa94:	30000226 	beq	r6,zero,1faa0 <_snprintf_r+0x4c>
   1fa98:	30ffffc4 	addi	r3,r6,-1
   1fa9c:	00000106 	br	1faa4 <_snprintf_r+0x50>
   1faa0:	0007883a 	mov	r3,zero
   1faa4:	1021883a 	mov	r16,r2
   1faa8:	00bfffc4 	movi	r2,-1
   1faac:	d880008d 	sth	r2,2(sp)
   1fab0:	008000b4 	movhi	r2,2
   1fab4:	380d883a 	mov	r6,r7
   1fab8:	1087c904 	addi	r2,r2,7972
   1fabc:	d80b883a 	mov	r5,sp
   1fac0:	d9c00a04 	addi	r7,sp,40
   1fac4:	d8c00515 	stw	r3,20(sp)
   1fac8:	d8c00315 	stw	r3,12(sp)
   1facc:	2023883a 	mov	r17,r4
   1fad0:	d8800115 	stw	r2,4(sp)
   1fad4:	d8000615 	stw	zero,24(sp)
   1fad8:	002130c0 	call	2130c <___svfprintf_internal_r>
   1fadc:	00ffffc4 	movi	r3,-1
   1fae0:	10c0020e 	bge	r2,r3,1faec <_snprintf_r+0x98>
   1fae4:	00c022c4 	movi	r3,139
   1fae8:	88c00015 	stw	r3,0(r17)
   1faec:	80000226 	beq	r16,zero,1faf8 <_snprintf_r+0xa4>
   1faf0:	d8c00417 	ldw	r3,16(sp)
   1faf4:	18000005 	stb	zero,0(r3)
   1faf8:	dfc00917 	ldw	ra,36(sp)
   1fafc:	dc400817 	ldw	r17,32(sp)
   1fb00:	dc000717 	ldw	r16,28(sp)
   1fb04:	dec00a04 	addi	sp,sp,40
   1fb08:	f800283a 	ret

0001fb0c <snprintf>:
   1fb0c:	defff504 	addi	sp,sp,-44
   1fb10:	de00012e 	bgeu	sp,et,1fb18 <snprintf+0xc>
   1fb14:	003b68fa 	trap	3
   1fb18:	dfc00915 	stw	ra,36(sp)
   1fb1c:	dc400815 	stw	r17,32(sp)
   1fb20:	dc000715 	stw	r16,28(sp)
   1fb24:	d9c00a15 	stw	r7,40(sp)
   1fb28:	008000f4 	movhi	r2,3
   1fb2c:	10a84c04 	addi	r2,r2,-24272
   1fb30:	14400017 	ldw	r17,0(r2)
   1fb34:	2800040e 	bge	r5,zero,1fb48 <snprintf+0x3c>
   1fb38:	008022c4 	movi	r2,139
   1fb3c:	88800015 	stw	r2,0(r17)
   1fb40:	00bfffc4 	movi	r2,-1
   1fb44:	00001c06 	br	1fbb8 <snprintf+0xac>
   1fb48:	00c08204 	movi	r3,520
   1fb4c:	d8c0000d 	sth	r3,0(sp)
   1fb50:	d9000415 	stw	r4,16(sp)
   1fb54:	d9000215 	stw	r4,8(sp)
   1fb58:	28000226 	beq	r5,zero,1fb64 <snprintf+0x58>
   1fb5c:	28ffffc4 	addi	r3,r5,-1
   1fb60:	00000106 	br	1fb68 <snprintf+0x5c>
   1fb64:	0007883a 	mov	r3,zero
   1fb68:	d8c00515 	stw	r3,20(sp)
   1fb6c:	d8c00315 	stw	r3,12(sp)
   1fb70:	11000017 	ldw	r4,0(r2)
   1fb74:	00ffffc4 	movi	r3,-1
   1fb78:	d8c0008d 	sth	r3,2(sp)
   1fb7c:	00c000b4 	movhi	r3,2
   1fb80:	18c7c904 	addi	r3,r3,7972
   1fb84:	2821883a 	mov	r16,r5
   1fb88:	d9c00a04 	addi	r7,sp,40
   1fb8c:	d80b883a 	mov	r5,sp
   1fb90:	d8c00115 	stw	r3,4(sp)
   1fb94:	d8000615 	stw	zero,24(sp)
   1fb98:	002130c0 	call	2130c <___svfprintf_internal_r>
   1fb9c:	00ffffc4 	movi	r3,-1
   1fba0:	10c0020e 	bge	r2,r3,1fbac <snprintf+0xa0>
   1fba4:	00c022c4 	movi	r3,139
   1fba8:	88c00015 	stw	r3,0(r17)
   1fbac:	80000226 	beq	r16,zero,1fbb8 <snprintf+0xac>
   1fbb0:	d8c00417 	ldw	r3,16(sp)
   1fbb4:	18000005 	stb	zero,0(r3)
   1fbb8:	dfc00917 	ldw	ra,36(sp)
   1fbbc:	dc400817 	ldw	r17,32(sp)
   1fbc0:	dc000717 	ldw	r16,28(sp)
   1fbc4:	dec00b04 	addi	sp,sp,44
   1fbc8:	f800283a 	ret

0001fbcc <strlen>:
   1fbcc:	de00012e 	bgeu	sp,et,1fbd4 <strlen+0x8>
   1fbd0:	003b68fa 	trap	3
   1fbd4:	2005883a 	mov	r2,r4
   1fbd8:	10c00007 	ldb	r3,0(r2)
   1fbdc:	18000226 	beq	r3,zero,1fbe8 <strlen+0x1c>
   1fbe0:	10800044 	addi	r2,r2,1
   1fbe4:	003ffc06 	br	1fbd8 <_gp+0xfffedab8>
   1fbe8:	1105c83a 	sub	r2,r2,r4
   1fbec:	f800283a 	ret

0001fbf0 <match>:
   1fbf0:	de00012e 	bgeu	sp,et,1fbf8 <match+0x8>
   1fbf4:	003b68fa 	trap	3
   1fbf8:	20800017 	ldw	r2,0(r4)
   1fbfc:	02000644 	movi	r8,25
   1fc00:	29c00007 	ldb	r7,0(r5)
   1fc04:	10800044 	addi	r2,r2,1
   1fc08:	38000c26 	beq	r7,zero,1fc3c <match+0x4c>
   1fc0c:	10c00003 	ldbu	r3,0(r2)
   1fc10:	19803fcc 	andi	r6,r3,255
   1fc14:	18ffefc4 	addi	r3,r3,-65
   1fc18:	3180201c 	xori	r6,r6,128
   1fc1c:	18c03fcc 	andi	r3,r3,255
   1fc20:	31bfe004 	addi	r6,r6,-128
   1fc24:	40c00136 	bltu	r8,r3,1fc2c <match+0x3c>
   1fc28:	31800804 	addi	r6,r6,32
   1fc2c:	29400044 	addi	r5,r5,1
   1fc30:	31fff326 	beq	r6,r7,1fc00 <_gp+0xfffedae0>
   1fc34:	0005883a 	mov	r2,zero
   1fc38:	f800283a 	ret
   1fc3c:	20800015 	stw	r2,0(r4)
   1fc40:	00800044 	movi	r2,1
   1fc44:	f800283a 	ret

0001fc48 <sulp>:
   1fc48:	defffd04 	addi	sp,sp,-12
   1fc4c:	de00012e 	bgeu	sp,et,1fc54 <sulp+0xc>
   1fc50:	003b68fa 	trap	3
   1fc54:	dc400115 	stw	r17,4(sp)
   1fc58:	3023883a 	mov	r17,r6
   1fc5c:	dc000015 	stw	r16,0(sp)
   1fc60:	dfc00215 	stw	ra,8(sp)
   1fc64:	2821883a 	mov	r16,r5
   1fc68:	00236380 	call	23638 <__ulp>
   1fc6c:	88000c26 	beq	r17,zero,1fca0 <sulp+0x58>
   1fc70:	81dffc2c 	andhi	r7,r16,32752
   1fc74:	380ed53a 	srli	r7,r7,20
   1fc78:	01001ac4 	movi	r4,107
   1fc7c:	21cfc83a 	sub	r7,r4,r7
   1fc80:	01c0070e 	bge	zero,r7,1fca0 <sulp+0x58>
   1fc84:	380e953a 	slli	r7,r7,20
   1fc88:	1009883a 	mov	r4,r2
   1fc8c:	008ffc34 	movhi	r2,16368
   1fc90:	180b883a 	mov	r5,r3
   1fc94:	000d883a 	mov	r6,zero
   1fc98:	388f883a 	add	r7,r7,r2
   1fc9c:	001e2380 	call	1e238 <__muldf3>
   1fca0:	dfc00217 	ldw	ra,8(sp)
   1fca4:	dc400117 	ldw	r17,4(sp)
   1fca8:	dc000017 	ldw	r16,0(sp)
   1fcac:	dec00304 	addi	sp,sp,12
   1fcb0:	f800283a 	ret

0001fcb4 <_strtod_r>:
   1fcb4:	deffe104 	addi	sp,sp,-124
   1fcb8:	de00012e 	bgeu	sp,et,1fcc0 <_strtod_r+0xc>
   1fcbc:	003b68fa 	trap	3
   1fcc0:	02000804 	movi	r8,32
   1fcc4:	dd801b15 	stw	r22,108(sp)
   1fcc8:	dc801715 	stw	r18,92(sp)
   1fccc:	dc401615 	stw	r17,88(sp)
   1fcd0:	dc001515 	stw	r16,84(sp)
   1fcd4:	2025883a 	mov	r18,r4
   1fcd8:	282d883a 	mov	r22,r5
   1fcdc:	d9800e15 	stw	r6,56(sp)
   1fce0:	d9400615 	stw	r5,24(sp)
   1fce4:	dfc01e15 	stw	ra,120(sp)
   1fce8:	df001d15 	stw	fp,116(sp)
   1fcec:	ddc01c15 	stw	r23,112(sp)
   1fcf0:	dd401a15 	stw	r21,104(sp)
   1fcf4:	dd001915 	stw	r20,100(sp)
   1fcf8:	dcc01815 	stw	r19,96(sp)
   1fcfc:	d8000515 	stw	zero,20(sp)
   1fd00:	0023883a 	mov	r17,zero
   1fd04:	0021883a 	mov	r16,zero
   1fd08:	01000344 	movi	r4,13
   1fd0c:	01400ac4 	movi	r5,43
   1fd10:	01800b44 	movi	r6,45
   1fd14:	02400244 	movi	r9,9
   1fd18:	d8800617 	ldw	r2,24(sp)
   1fd1c:	10c00007 	ldb	r3,0(r2)
   1fd20:	20c00316 	blt	r4,r3,1fd30 <_strtod_r+0x7c>
   1fd24:	1a400f0e 	bge	r3,r9,1fd64 <_strtod_r+0xb0>
   1fd28:	18015b26 	beq	r3,zero,20298 <_strtod_r+0x5e4>
   1fd2c:	00001006 	br	1fd70 <_strtod_r+0xbc>
   1fd30:	19400626 	beq	r3,r5,1fd4c <_strtod_r+0x98>
   1fd34:	19800226 	beq	r3,r6,1fd40 <_strtod_r+0x8c>
   1fd38:	1a000d1e 	bne	r3,r8,1fd70 <_strtod_r+0xbc>
   1fd3c:	00000906 	br	1fd64 <_strtod_r+0xb0>
   1fd40:	00c00044 	movi	r3,1
   1fd44:	d8c00a15 	stw	r3,40(sp)
   1fd48:	00000106 	br	1fd50 <_strtod_r+0x9c>
   1fd4c:	d8000a15 	stw	zero,40(sp)
   1fd50:	10c00044 	addi	r3,r2,1
   1fd54:	d8c00615 	stw	r3,24(sp)
   1fd58:	10800047 	ldb	r2,1(r2)
   1fd5c:	1000051e 	bne	r2,zero,1fd74 <_strtod_r+0xc0>
   1fd60:	00014d06 	br	20298 <_strtod_r+0x5e4>
   1fd64:	10800044 	addi	r2,r2,1
   1fd68:	d8800615 	stw	r2,24(sp)
   1fd6c:	003fea06 	br	1fd18 <_gp+0xfffedbf8>
   1fd70:	d8000a15 	stw	zero,40(sp)
   1fd74:	dd000617 	ldw	r20,24(sp)
   1fd78:	00c00c04 	movi	r3,48
   1fd7c:	a0800007 	ldb	r2,0(r20)
   1fd80:	10c0501e 	bne	r2,r3,1fec4 <_strtod_r+0x210>
   1fd84:	a0c00047 	ldb	r3,1(r20)
   1fd88:	01001604 	movi	r4,88
   1fd8c:	19000226 	beq	r3,r4,1fd98 <_strtod_r+0xe4>
   1fd90:	01001e04 	movi	r4,120
   1fd94:	1900431e 	bne	r3,r4,1fea4 <_strtod_r+0x1f0>
   1fd98:	d9000a17 	ldw	r4,40(sp)
   1fd9c:	d8800504 	addi	r2,sp,20
   1fda0:	018000f4 	movhi	r6,3
   1fda4:	d9000115 	stw	r4,4(sp)
   1fda8:	d8800015 	stw	r2,0(sp)
   1fdac:	9009883a 	mov	r4,r18
   1fdb0:	d9400604 	addi	r5,sp,24
   1fdb4:	31a4d304 	addi	r6,r6,-27828
   1fdb8:	d9c00404 	addi	r7,sp,16
   1fdbc:	00220e80 	call	220e8 <__gethex>
   1fdc0:	14c001cc 	andi	r19,r2,7
   1fdc4:	102b883a 	mov	r21,r2
   1fdc8:	98043a26 	beq	r19,zero,20eb4 <_strtod_r+0x1200>
   1fdcc:	00800184 	movi	r2,6
   1fdd0:	9880041e 	bne	r19,r2,1fde4 <_strtod_r+0x130>
   1fdd4:	a5000044 	addi	r20,r20,1
   1fdd8:	dd000615 	stw	r20,24(sp)
   1fddc:	d8000a15 	stw	zero,40(sp)
   1fde0:	00043406 	br	20eb4 <_strtod_r+0x1200>
   1fde4:	d9800517 	ldw	r6,20(sp)
   1fde8:	30000626 	beq	r6,zero,1fe04 <_strtod_r+0x150>
   1fdec:	d9000204 	addi	r4,sp,8
   1fdf0:	01400d44 	movi	r5,53
   1fdf4:	00239fc0 	call	239fc <__copybits>
   1fdf8:	d9400517 	ldw	r5,20(sp)
   1fdfc:	9009883a 	mov	r4,r18
   1fe00:	0022bec0 	call	22bec <_Bfree>
   1fe04:	00800184 	movi	r2,6
   1fe08:	d9000417 	ldw	r4,16(sp)
   1fe0c:	14c02136 	bltu	r2,r19,1fe94 <_strtod_r+0x1e0>
   1fe10:	982690ba 	slli	r19,r19,2
   1fe14:	008000b4 	movhi	r2,2
   1fe18:	10bf8a04 	addi	r2,r2,-472
   1fe1c:	98a7883a 	add	r19,r19,r2
   1fe20:	98800017 	ldw	r2,0(r19)
   1fe24:	1000683a 	jmp	r2
   1fe28:	0001fe44 	movi	zero,2041
   1fe2c:	0001fe58 	cmpnei	zero,zero,2041
   1fe30:	0001fe4c 	andi	zero,zero,2041
   1fe34:	0001fe7c 	xorhi	zero,zero,2041
   1fe38:	0001fe88 	cmpgei	zero,zero,2042
   1fe3c:	0001fe58 	cmpnei	zero,zero,2041
   1fe40:	0001fe44 	movi	zero,2041
   1fe44:	0021883a 	mov	r16,zero
   1fe48:	00000d06 	br	1fe80 <_strtod_r+0x1cc>
   1fe4c:	dc400217 	ldw	r17,8(sp)
   1fe50:	dc000317 	ldw	r16,12(sp)
   1fe54:	00000f06 	br	1fe94 <_strtod_r+0x1e0>
   1fe58:	24010cc4 	addi	r16,r4,1075
   1fe5c:	d8c00317 	ldw	r3,12(sp)
   1fe60:	8008953a 	slli	r4,r16,20
   1fe64:	00bffc34 	movhi	r2,65520
   1fe68:	10bfffc4 	addi	r2,r2,-1
   1fe6c:	1886703a 	and	r3,r3,r2
   1fe70:	dc400217 	ldw	r17,8(sp)
   1fe74:	20e0b03a 	or	r16,r4,r3
   1fe78:	00000606 	br	1fe94 <_strtod_r+0x1e0>
   1fe7c:	041ffc34 	movhi	r16,32752
   1fe80:	0023883a 	mov	r17,zero
   1fe84:	00000306 	br	1fe94 <_strtod_r+0x1e0>
   1fe88:	04200034 	movhi	r16,32768
   1fe8c:	843fffc4 	addi	r16,r16,-1
   1fe90:	047fffc4 	movi	r17,-1
   1fe94:	ad40020c 	andi	r21,r21,8
   1fe98:	a8040626 	beq	r21,zero,20eb4 <_strtod_r+0x1200>
   1fe9c:	84200034 	orhi	r16,r16,32768
   1fea0:	00040406 	br	20eb4 <_strtod_r+0x1200>
   1fea4:	d8c00617 	ldw	r3,24(sp)
   1fea8:	19000044 	addi	r4,r3,1
   1feac:	d9000615 	stw	r4,24(sp)
   1feb0:	18c00047 	ldb	r3,1(r3)
   1feb4:	18bffb26 	beq	r3,r2,1fea4 <_gp+0xfffedd84>
   1feb8:	1803fe26 	beq	r3,zero,20eb4 <_strtod_r+0x1200>
   1febc:	05000044 	movi	r20,1
   1fec0:	00000106 	br	1fec8 <_strtod_r+0x214>
   1fec4:	0029883a 	mov	r20,zero
   1fec8:	d8800617 	ldw	r2,24(sp)
   1fecc:	002b883a 	mov	r21,zero
   1fed0:	0027883a 	mov	r19,zero
   1fed4:	d8800815 	stw	r2,32(sp)
   1fed8:	002f883a 	mov	r23,zero
   1fedc:	00c00244 	movi	r3,9
   1fee0:	01000204 	movi	r4,8
   1fee4:	df000617 	ldw	fp,24(sp)
   1fee8:	e1c00003 	ldbu	r7,0(fp)
   1feec:	38bff404 	addi	r2,r7,-48
   1fef0:	10803fcc 	andi	r2,r2,255
   1fef4:	18800f36 	bltu	r3,r2,1ff34 <_strtod_r+0x280>
   1fef8:	38803fcc 	andi	r2,r7,255
   1fefc:	1080201c 	xori	r2,r2,128
   1ff00:	10bfe004 	addi	r2,r2,-128
   1ff04:	25c00416 	blt	r4,r23,1ff18 <_strtod_r+0x264>
   1ff08:	9cc002a4 	muli	r19,r19,10
   1ff0c:	10bff404 	addi	r2,r2,-48
   1ff10:	14e7883a 	add	r19,r2,r19
   1ff14:	00000306 	br	1ff24 <_strtod_r+0x270>
   1ff18:	aa0002a4 	muli	r8,r21,10
   1ff1c:	10bff404 	addi	r2,r2,-48
   1ff20:	122b883a 	add	r21,r2,r8
   1ff24:	e7000044 	addi	fp,fp,1
   1ff28:	bdc00044 	addi	r23,r23,1
   1ff2c:	df000615 	stw	fp,24(sp)
   1ff30:	003fec06 	br	1fee4 <_gp+0xfffeddc4>
   1ff34:	9009883a 	mov	r4,r18
   1ff38:	d9c01315 	stw	r7,76(sp)
   1ff3c:	ddc00915 	stw	r23,36(sp)
   1ff40:	001963c0 	call	1963c <_localeconv_r>
   1ff44:	11400017 	ldw	r5,0(r2)
   1ff48:	9009883a 	mov	r4,r18
   1ff4c:	d9401215 	stw	r5,72(sp)
   1ff50:	001963c0 	call	1963c <_localeconv_r>
   1ff54:	11000017 	ldw	r4,0(r2)
   1ff58:	001fbcc0 	call	1fbcc <strlen>
   1ff5c:	d9401217 	ldw	r5,72(sp)
   1ff60:	e009883a 	mov	r4,fp
   1ff64:	100d883a 	mov	r6,r2
   1ff68:	0023b280 	call	23b28 <strncmp>
   1ff6c:	d9c01317 	ldw	r7,76(sp)
   1ff70:	10000826 	beq	r2,zero,1ff94 <_strtod_r+0x2e0>
   1ff74:	38803fcc 	andi	r2,r7,255
   1ff78:	1080201c 	xori	r2,r2,128
   1ff7c:	10bfe004 	addi	r2,r2,-128
   1ff80:	b839883a 	mov	fp,r23
   1ff84:	0009883a 	mov	r4,zero
   1ff88:	000b883a 	mov	r5,zero
   1ff8c:	0015883a 	mov	r10,zero
   1ff90:	00004306 	br	200a0 <_strtod_r+0x3ec>
   1ff94:	9009883a 	mov	r4,r18
   1ff98:	001963c0 	call	1963c <_localeconv_r>
   1ff9c:	11000017 	ldw	r4,0(r2)
   1ffa0:	001fbcc0 	call	1fbcc <strlen>
   1ffa4:	d8c00617 	ldw	r3,24(sp)
   1ffa8:	1885883a 	add	r2,r3,r2
   1ffac:	d8800615 	stw	r2,24(sp)
   1ffb0:	10800007 	ldb	r2,0(r2)
   1ffb4:	b800331e 	bne	r23,zero,20084 <_strtod_r+0x3d0>
   1ffb8:	0009883a 	mov	r4,zero
   1ffbc:	00c00c04 	movi	r3,48
   1ffc0:	10c0061e 	bne	r2,r3,1ffdc <_strtod_r+0x328>
   1ffc4:	d8800617 	ldw	r2,24(sp)
   1ffc8:	21000044 	addi	r4,r4,1
   1ffcc:	11400044 	addi	r5,r2,1
   1ffd0:	d9400615 	stw	r5,24(sp)
   1ffd4:	10800047 	ldb	r2,1(r2)
   1ffd8:	003ff906 	br	1ffc0 <_gp+0xfffedea0>
   1ffdc:	10fff3c4 	addi	r3,r2,-49
   1ffe0:	01400204 	movi	r5,8
   1ffe4:	28c03436 	bltu	r5,r3,200b8 <_strtod_r+0x404>
   1ffe8:	d8c00617 	ldw	r3,24(sp)
   1ffec:	200b883a 	mov	r5,r4
   1fff0:	0039883a 	mov	fp,zero
   1fff4:	d8c00815 	stw	r3,32(sp)
   1fff8:	0009883a 	mov	r4,zero
   1fffc:	11bff404 	addi	r6,r2,-48
   20000:	20c00044 	addi	r3,r4,1
   20004:	30001926 	beq	r6,zero,2006c <_strtod_r+0x3b8>
   20008:	28cb883a 	add	r5,r5,r3
   2000c:	2709883a 	add	r4,r4,fp
   20010:	e007883a 	mov	r3,fp
   20014:	00800204 	movi	r2,8
   20018:	02800404 	movi	r10,16
   2001c:	19000826 	beq	r3,r4,20040 <_strtod_r+0x38c>
   20020:	18c00044 	addi	r3,r3,1
   20024:	1affffc4 	addi	r11,r3,-1
   20028:	12c00216 	blt	r2,r11,20034 <_strtod_r+0x380>
   2002c:	9cc002a4 	muli	r19,r19,10
   20030:	003ffa06 	br	2001c <_gp+0xfffedefc>
   20034:	50fff916 	blt	r10,r3,2001c <_gp+0xfffedefc>
   20038:	ad4002a4 	muli	r21,r21,10
   2003c:	003ff706 	br	2001c <_gp+0xfffedefc>
   20040:	00800204 	movi	r2,8
   20044:	1f000044 	addi	fp,r3,1
   20048:	10c00316 	blt	r2,r3,20058 <_strtod_r+0x3a4>
   2004c:	9cc002a4 	muli	r19,r19,10
   20050:	99a7883a 	add	r19,r19,r6
   20054:	00000406 	br	20068 <_strtod_r+0x3b4>
   20058:	00800404 	movi	r2,16
   2005c:	17000216 	blt	r2,fp,20068 <_strtod_r+0x3b4>
   20060:	a88002a4 	muli	r2,r21,10
   20064:	11ab883a 	add	r21,r2,r6
   20068:	0007883a 	mov	r3,zero
   2006c:	d8800617 	ldw	r2,24(sp)
   20070:	11000044 	addi	r4,r2,1
   20074:	d9000615 	stw	r4,24(sp)
   20078:	10800047 	ldb	r2,1(r2)
   2007c:	1809883a 	mov	r4,r3
   20080:	00000306 	br	20090 <_strtod_r+0x3dc>
   20084:	b839883a 	mov	fp,r23
   20088:	0009883a 	mov	r4,zero
   2008c:	000b883a 	mov	r5,zero
   20090:	10fff404 	addi	r3,r2,-48
   20094:	01800244 	movi	r6,9
   20098:	30ffd82e 	bgeu	r6,r3,1fffc <_gp+0xfffededc>
   2009c:	02800044 	movi	r10,1
   200a0:	00c01944 	movi	r3,101
   200a4:	10c00226 	beq	r2,r3,200b0 <_strtod_r+0x3fc>
   200a8:	00c01144 	movi	r3,69
   200ac:	10c0411e 	bne	r2,r3,201b4 <_strtod_r+0x500>
   200b0:	e000081e 	bne	fp,zero,200d4 <_strtod_r+0x420>
   200b4:	00000406 	br	200c8 <_strtod_r+0x414>
   200b8:	00c01944 	movi	r3,101
   200bc:	10c3881e 	bne	r2,r3,20ee0 <_strtod_r+0x122c>
   200c0:	000b883a 	mov	r5,zero
   200c4:	02800044 	movi	r10,1
   200c8:	2000011e 	bne	r4,zero,200d0 <_strtod_r+0x41c>
   200cc:	a0007226 	beq	r20,zero,20298 <_strtod_r+0x5e4>
   200d0:	0039883a 	mov	fp,zero
   200d4:	dd800617 	ldw	r22,24(sp)
   200d8:	00c00ac4 	movi	r3,43
   200dc:	b0800044 	addi	r2,r22,1
   200e0:	d8800615 	stw	r2,24(sp)
   200e4:	b0800047 	ldb	r2,1(r22)
   200e8:	10c00626 	beq	r2,r3,20104 <_strtod_r+0x450>
   200ec:	00c00b44 	movi	r3,45
   200f0:	10c00226 	beq	r2,r3,200fc <_strtod_r+0x448>
   200f4:	0019883a 	mov	r12,zero
   200f8:	00000606 	br	20114 <_strtod_r+0x460>
   200fc:	03000044 	movi	r12,1
   20100:	00000106 	br	20108 <_strtod_r+0x454>
   20104:	0019883a 	mov	r12,zero
   20108:	b0800084 	addi	r2,r22,2
   2010c:	d8800615 	stw	r2,24(sp)
   20110:	b0800087 	ldb	r2,2(r22)
   20114:	10fff404 	addi	r3,r2,-48
   20118:	01800244 	movi	r6,9
   2011c:	30c02436 	bltu	r6,r3,201b0 <_strtod_r+0x4fc>
   20120:	00c00c04 	movi	r3,48
   20124:	10c0051e 	bne	r2,r3,2013c <_strtod_r+0x488>
   20128:	d8800617 	ldw	r2,24(sp)
   2012c:	11800044 	addi	r6,r2,1
   20130:	d9800615 	stw	r6,24(sp)
   20134:	10800047 	ldb	r2,1(r2)
   20138:	003ffa06 	br	20124 <_gp+0xfffee004>
   2013c:	10fff3c4 	addi	r3,r2,-49
   20140:	01800204 	movi	r6,8
   20144:	30c01b36 	bltu	r6,r3,201b4 <_strtod_r+0x500>
   20148:	db400617 	ldw	r13,24(sp)
   2014c:	10fff404 	addi	r3,r2,-48
   20150:	03800244 	movi	r14,9
   20154:	d8800617 	ldw	r2,24(sp)
   20158:	12c00044 	addi	r11,r2,1
   2015c:	dac00615 	stw	r11,24(sp)
   20160:	11800043 	ldbu	r6,1(r2)
   20164:	30803fcc 	andi	r2,r6,255
   20168:	31bff404 	addi	r6,r6,-48
   2016c:	1080201c 	xori	r2,r2,128
   20170:	31803fcc 	andi	r6,r6,255
   20174:	10bfe004 	addi	r2,r2,-128
   20178:	71800436 	bltu	r14,r6,2018c <_strtod_r+0x4d8>
   2017c:	18c002a4 	muli	r3,r3,10
   20180:	1887883a 	add	r3,r3,r2
   20184:	18fff404 	addi	r3,r3,-48
   20188:	003ff206 	br	20154 <_gp+0xfffee034>
   2018c:	5b57c83a 	sub	r11,r11,r13
   20190:	03400204 	movi	r13,8
   20194:	019387c4 	movi	r6,19999
   20198:	6ac00116 	blt	r13,r11,201a0 <_strtod_r+0x4ec>
   2019c:	30c0010e 	bge	r6,r3,201a4 <_strtod_r+0x4f0>
   201a0:	3007883a 	mov	r3,r6
   201a4:	60000426 	beq	r12,zero,201b8 <_strtod_r+0x504>
   201a8:	00c7c83a 	sub	r3,zero,r3
   201ac:	00000206 	br	201b8 <_strtod_r+0x504>
   201b0:	dd800615 	stw	r22,24(sp)
   201b4:	0007883a 	mov	r3,zero
   201b8:	e0003c1e 	bne	fp,zero,202ac <_strtod_r+0x5f8>
   201bc:	20033d1e 	bne	r4,zero,20eb4 <_strtod_r+0x1200>
   201c0:	a0033c1e 	bne	r20,zero,20eb4 <_strtod_r+0x1200>
   201c4:	5000341e 	bne	r10,zero,20298 <_strtod_r+0x5e4>
   201c8:	00c01384 	movi	r3,78
   201cc:	10c01b26 	beq	r2,r3,2023c <_strtod_r+0x588>
   201d0:	18800316 	blt	r3,r2,201e0 <_strtod_r+0x52c>
   201d4:	00c01244 	movi	r3,73
   201d8:	10c00626 	beq	r2,r3,201f4 <_strtod_r+0x540>
   201dc:	00002e06 	br	20298 <_strtod_r+0x5e4>
   201e0:	00c01a44 	movi	r3,105
   201e4:	10c00326 	beq	r2,r3,201f4 <_strtod_r+0x540>
   201e8:	00c01b84 	movi	r3,110
   201ec:	10c01326 	beq	r2,r3,2023c <_strtod_r+0x588>
   201f0:	00002906 	br	20298 <_strtod_r+0x5e4>
   201f4:	014000f4 	movhi	r5,3
   201f8:	d9000604 	addi	r4,sp,24
   201fc:	2964ca04 	addi	r5,r5,-27864
   20200:	001fbf00 	call	1fbf0 <match>
   20204:	10002426 	beq	r2,zero,20298 <_strtod_r+0x5e4>
   20208:	d8800617 	ldw	r2,24(sp)
   2020c:	014000f4 	movhi	r5,3
   20210:	d9000604 	addi	r4,sp,24
   20214:	10bfffc4 	addi	r2,r2,-1
   20218:	2964cb04 	addi	r5,r5,-27860
   2021c:	d8800615 	stw	r2,24(sp)
   20220:	001fbf00 	call	1fbf0 <match>
   20224:	1000031e 	bne	r2,zero,20234 <_strtod_r+0x580>
   20228:	d8800617 	ldw	r2,24(sp)
   2022c:	10800044 	addi	r2,r2,1
   20230:	d8800615 	stw	r2,24(sp)
   20234:	041ffc34 	movhi	r16,32752
   20238:	00001506 	br	20290 <_strtod_r+0x5dc>
   2023c:	014000f4 	movhi	r5,3
   20240:	d9000604 	addi	r4,sp,24
   20244:	2964cd04 	addi	r5,r5,-27852
   20248:	001fbf00 	call	1fbf0 <match>
   2024c:	10001226 	beq	r2,zero,20298 <_strtod_r+0x5e4>
   20250:	d8800617 	ldw	r2,24(sp)
   20254:	10c00007 	ldb	r3,0(r2)
   20258:	00800a04 	movi	r2,40
   2025c:	18800b1e 	bne	r3,r2,2028c <_strtod_r+0x5d8>
   20260:	014000f4 	movhi	r5,3
   20264:	d9000604 	addi	r4,sp,24
   20268:	2964ce04 	addi	r5,r5,-27848
   2026c:	d9800204 	addi	r6,sp,8
   20270:	002288c0 	call	2288c <__hexnan>
   20274:	00c00144 	movi	r3,5
   20278:	10c0041e 	bne	r2,r3,2028c <_strtod_r+0x5d8>
   2027c:	d8c00317 	ldw	r3,12(sp)
   20280:	dc400217 	ldw	r17,8(sp)
   20284:	1c1ffc34 	orhi	r16,r3,32752
   20288:	00030a06 	br	20eb4 <_strtod_r+0x1200>
   2028c:	043ffe34 	movhi	r16,65528
   20290:	0023883a 	mov	r17,zero
   20294:	00030706 	br	20eb4 <_strtod_r+0x1200>
   20298:	d9000e17 	ldw	r4,56(sp)
   2029c:	dd800615 	stw	r22,24(sp)
   202a0:	20030d26 	beq	r4,zero,20ed8 <_strtod_r+0x1224>
   202a4:	d8000a15 	stw	zero,40(sp)
   202a8:	00030406 	br	20ebc <_strtod_r+0x1208>
   202ac:	194bc83a 	sub	r5,r3,r5
   202b0:	d9400715 	stw	r5,28(sp)
   202b4:	b800011e 	bne	r23,zero,202bc <_strtod_r+0x608>
   202b8:	df000915 	stw	fp,36(sp)
   202bc:	00800404 	movi	r2,16
   202c0:	e02f883a 	mov	r23,fp
   202c4:	1700010e 	bge	r2,fp,202cc <_strtod_r+0x618>
   202c8:	102f883a 	mov	r23,r2
   202cc:	9809883a 	mov	r4,r19
   202d0:	001f3a40 	call	1f3a4 <__floatunsidf>
   202d4:	1023883a 	mov	r17,r2
   202d8:	00800244 	movi	r2,9
   202dc:	1821883a 	mov	r16,r3
   202e0:	15c0150e 	bge	r2,r23,20338 <_strtod_r+0x684>
   202e4:	b8bffdc4 	addi	r2,r23,-9
   202e8:	100490fa 	slli	r2,r2,3
   202ec:	00c000f4 	movhi	r3,3
   202f0:	18e59a04 	addi	r3,r3,-27032
   202f4:	1885883a 	add	r2,r3,r2
   202f8:	11800017 	ldw	r6,0(r2)
   202fc:	11c00117 	ldw	r7,4(r2)
   20300:	800b883a 	mov	r5,r16
   20304:	8809883a 	mov	r4,r17
   20308:	001e2380 	call	1e238 <__muldf3>
   2030c:	a809883a 	mov	r4,r21
   20310:	1023883a 	mov	r17,r2
   20314:	1821883a 	mov	r16,r3
   20318:	001f3a40 	call	1f3a4 <__floatunsidf>
   2031c:	8809883a 	mov	r4,r17
   20320:	800b883a 	mov	r5,r16
   20324:	100d883a 	mov	r6,r2
   20328:	180f883a 	mov	r7,r3
   2032c:	001d7c40 	call	1d7c4 <__adddf3>
   20330:	1023883a 	mov	r17,r2
   20334:	1821883a 	mov	r16,r3
   20338:	008003c4 	movi	r2,15
   2033c:	17003616 	blt	r2,fp,20418 <_strtod_r+0x764>
   20340:	d8c00717 	ldw	r3,28(sp)
   20344:	1802db26 	beq	r3,zero,20eb4 <_strtod_r+0x1200>
   20348:	00c0260e 	bge	zero,r3,203e4 <_strtod_r+0x730>
   2034c:	d9000717 	ldw	r4,28(sp)
   20350:	00c00584 	movi	r3,22
   20354:	19000916 	blt	r3,r4,2037c <_strtod_r+0x6c8>
   20358:	200490fa 	slli	r2,r4,3
   2035c:	00c000f4 	movhi	r3,3
   20360:	18e59a04 	addi	r3,r3,-27032
   20364:	1885883a 	add	r2,r3,r2
   20368:	11000017 	ldw	r4,0(r2)
   2036c:	11400117 	ldw	r5,4(r2)
   20370:	880d883a 	mov	r6,r17
   20374:	800f883a 	mov	r7,r16
   20378:	00001606 	br	203d4 <_strtod_r+0x720>
   2037c:	d9000717 	ldw	r4,28(sp)
   20380:	00c00944 	movi	r3,37
   20384:	1f07c83a 	sub	r3,r3,fp
   20388:	19002316 	blt	r3,r4,20418 <_strtod_r+0x764>
   2038c:	1739c83a 	sub	fp,r2,fp
   20390:	e00490fa 	slli	r2,fp,3
   20394:	048000f4 	movhi	r18,3
   20398:	94a59a04 	addi	r18,r18,-27032
   2039c:	9085883a 	add	r2,r18,r2
   203a0:	11000017 	ldw	r4,0(r2)
   203a4:	11400117 	ldw	r5,4(r2)
   203a8:	880d883a 	mov	r6,r17
   203ac:	800f883a 	mov	r7,r16
   203b0:	001e2380 	call	1e238 <__muldf3>
   203b4:	d9000717 	ldw	r4,28(sp)
   203b8:	180b883a 	mov	r5,r3
   203bc:	2739c83a 	sub	fp,r4,fp
   203c0:	e03890fa 	slli	fp,fp,3
   203c4:	1009883a 	mov	r4,r2
   203c8:	9739883a 	add	fp,r18,fp
   203cc:	e1800017 	ldw	r6,0(fp)
   203d0:	e1c00117 	ldw	r7,4(fp)
   203d4:	001e2380 	call	1e238 <__muldf3>
   203d8:	1023883a 	mov	r17,r2
   203dc:	1821883a 	mov	r16,r3
   203e0:	0002b406 	br	20eb4 <_strtod_r+0x1200>
   203e4:	d8c00717 	ldw	r3,28(sp)
   203e8:	00bffa84 	movi	r2,-22
   203ec:	18800a16 	blt	r3,r2,20418 <_strtod_r+0x764>
   203f0:	180690fa 	slli	r3,r3,3
   203f4:	008000f4 	movhi	r2,3
   203f8:	10a59a04 	addi	r2,r2,-27032
   203fc:	10c5c83a 	sub	r2,r2,r3
   20400:	11800017 	ldw	r6,0(r2)
   20404:	11c00117 	ldw	r7,4(r2)
   20408:	8809883a 	mov	r4,r17
   2040c:	800b883a 	mov	r5,r16
   20410:	0023dd00 	call	23dd0 <__divdf3>
   20414:	003ff006 	br	203d8 <_gp+0xfffee2b8>
   20418:	d9000717 	ldw	r4,28(sp)
   2041c:	e5efc83a 	sub	r23,fp,r23
   20420:	25ef883a 	add	r23,r4,r23
   20424:	05c0480e 	bge	zero,r23,20548 <_strtod_r+0x894>
   20428:	b88003cc 	andi	r2,r23,15
   2042c:	10000b26 	beq	r2,zero,2045c <_strtod_r+0x7a8>
   20430:	100490fa 	slli	r2,r2,3
   20434:	00c000f4 	movhi	r3,3
   20438:	18e59a04 	addi	r3,r3,-27032
   2043c:	1885883a 	add	r2,r3,r2
   20440:	11000017 	ldw	r4,0(r2)
   20444:	11400117 	ldw	r5,4(r2)
   20448:	880d883a 	mov	r6,r17
   2044c:	800f883a 	mov	r7,r16
   20450:	001e2380 	call	1e238 <__muldf3>
   20454:	1023883a 	mov	r17,r2
   20458:	1821883a 	mov	r16,r3
   2045c:	00bffc04 	movi	r2,-16
   20460:	b8ae703a 	and	r23,r23,r2
   20464:	b8008426 	beq	r23,zero,20678 <_strtod_r+0x9c4>
   20468:	00804d04 	movi	r2,308
   2046c:	15c00b0e 	bge	r2,r23,2049c <_strtod_r+0x7e8>
   20470:	0029883a 	mov	r20,zero
   20474:	0027883a 	mov	r19,zero
   20478:	d8000915 	stw	zero,36(sp)
   2047c:	002f883a 	mov	r23,zero
   20480:	00800884 	movi	r2,34
   20484:	90800015 	stw	r2,0(r18)
   20488:	d8800917 	ldw	r2,36(sp)
   2048c:	041ffc34 	movhi	r16,32752
   20490:	0023883a 	mov	r17,zero
   20494:	1002781e 	bne	r2,zero,20e78 <_strtod_r+0x11c4>
   20498:	00028606 	br	20eb4 <_strtod_r+0x1200>
   2049c:	b82fd13a 	srai	r23,r23,4
   204a0:	8805883a 	mov	r2,r17
   204a4:	044000f4 	movhi	r17,3
   204a8:	8007883a 	mov	r3,r16
   204ac:	002d883a 	mov	r22,zero
   204b0:	04000044 	movi	r16,1
   204b4:	8c659004 	addi	r17,r17,-27072
   204b8:	85c00c0e 	bge	r16,r23,204ec <_strtod_r+0x838>
   204bc:	b900004c 	andi	r4,r23,1
   204c0:	20000726 	beq	r4,zero,204e0 <_strtod_r+0x82c>
   204c4:	b01090fa 	slli	r8,r22,3
   204c8:	1009883a 	mov	r4,r2
   204cc:	180b883a 	mov	r5,r3
   204d0:	4451883a 	add	r8,r8,r17
   204d4:	41800017 	ldw	r6,0(r8)
   204d8:	41c00117 	ldw	r7,4(r8)
   204dc:	001e2380 	call	1e238 <__muldf3>
   204e0:	b5800044 	addi	r22,r22,1
   204e4:	b82fd07a 	srai	r23,r23,1
   204e8:	003ff306 	br	204b8 <_gp+0xfffee398>
   204ec:	b02c90fa 	slli	r22,r22,3
   204f0:	010000f4 	movhi	r4,3
   204f4:	21259004 	addi	r4,r4,-27072
   204f8:	25ad883a 	add	r22,r4,r22
   204fc:	b1000017 	ldw	r4,0(r22)
   20500:	b1400117 	ldw	r5,4(r22)
   20504:	01ff2c34 	movhi	r7,64688
   20508:	100d883a 	mov	r6,r2
   2050c:	19cf883a 	add	r7,r3,r7
   20510:	001e2380 	call	1e238 <__muldf3>
   20514:	1023883a 	mov	r17,r2
   20518:	011f2834 	movhi	r4,31904
   2051c:	189ffc2c 	andhi	r2,r3,32752
   20520:	20bfd336 	bltu	r4,r2,20470 <_gp+0xfffee350>
   20524:	011f2434 	movhi	r4,31888
   20528:	2080042e 	bgeu	r4,r2,2053c <_strtod_r+0x888>
   2052c:	041ffc34 	movhi	r16,32752
   20530:	843fffc4 	addi	r16,r16,-1
   20534:	047fffc4 	movi	r17,-1
   20538:	00004f06 	br	20678 <_strtod_r+0x9c4>
   2053c:	0400d434 	movhi	r16,848
   20540:	1c21883a 	add	r16,r3,r16
   20544:	00004c06 	br	20678 <_strtod_r+0x9c4>
   20548:	b8004b26 	beq	r23,zero,20678 <_strtod_r+0x9c4>
   2054c:	05efc83a 	sub	r23,zero,r23
   20550:	b88003cc 	andi	r2,r23,15
   20554:	10000b26 	beq	r2,zero,20584 <_strtod_r+0x8d0>
   20558:	100490fa 	slli	r2,r2,3
   2055c:	00c000f4 	movhi	r3,3
   20560:	18e59a04 	addi	r3,r3,-27032
   20564:	1885883a 	add	r2,r3,r2
   20568:	11800017 	ldw	r6,0(r2)
   2056c:	11c00117 	ldw	r7,4(r2)
   20570:	8809883a 	mov	r4,r17
   20574:	800b883a 	mov	r5,r16
   20578:	0023dd00 	call	23dd0 <__divdf3>
   2057c:	1023883a 	mov	r17,r2
   20580:	1821883a 	mov	r16,r3
   20584:	b82fd13a 	srai	r23,r23,4
   20588:	b8003b26 	beq	r23,zero,20678 <_strtod_r+0x9c4>
   2058c:	008007c4 	movi	r2,31
   20590:	15c0050e 	bge	r2,r23,205a8 <_strtod_r+0x8f4>
   20594:	0029883a 	mov	r20,zero
   20598:	0027883a 	mov	r19,zero
   2059c:	d8000915 	stw	zero,36(sp)
   205a0:	002f883a 	mov	r23,zero
   205a4:	0000b606 	br	20880 <_strtod_r+0xbcc>
   205a8:	b880040c 	andi	r2,r23,16
   205ac:	10000226 	beq	r2,zero,205b8 <_strtod_r+0x904>
   205b0:	05801a84 	movi	r22,106
   205b4:	00000106 	br	205bc <_strtod_r+0x908>
   205b8:	002d883a 	mov	r22,zero
   205bc:	8805883a 	mov	r2,r17
   205c0:	044000f4 	movhi	r17,3
   205c4:	8007883a 	mov	r3,r16
   205c8:	8c64d804 	addi	r17,r17,-27808
   205cc:	0021883a 	mov	r16,zero
   205d0:	05c00b0e 	bge	zero,r23,20600 <_strtod_r+0x94c>
   205d4:	b900004c 	andi	r4,r23,1
   205d8:	20000626 	beq	r4,zero,205f4 <_strtod_r+0x940>
   205dc:	8451883a 	add	r8,r16,r17
   205e0:	41800017 	ldw	r6,0(r8)
   205e4:	41c00117 	ldw	r7,4(r8)
   205e8:	1009883a 	mov	r4,r2
   205ec:	180b883a 	mov	r5,r3
   205f0:	001e2380 	call	1e238 <__muldf3>
   205f4:	b82fd07a 	srai	r23,r23,1
   205f8:	84000204 	addi	r16,r16,8
   205fc:	003ff406 	br	205d0 <_gp+0xfffee4b0>
   20600:	1023883a 	mov	r17,r2
   20604:	1821883a 	mov	r16,r3
   20608:	b0001426 	beq	r22,zero,2065c <_strtod_r+0x9a8>
   2060c:	189ffc2c 	andhi	r2,r3,32752
   20610:	1006d53a 	srli	r3,r2,20
   20614:	00801ac4 	movi	r2,107
   20618:	10c5c83a 	sub	r2,r2,r3
   2061c:	00800f0e 	bge	zero,r2,2065c <_strtod_r+0x9a8>
   20620:	00c007c4 	movi	r3,31
   20624:	18800a0e 	bge	r3,r2,20650 <_strtod_r+0x99c>
   20628:	00c00d04 	movi	r3,52
   2062c:	0023883a 	mov	r17,zero
   20630:	1880020e 	bge	r3,r2,2063c <_strtod_r+0x988>
   20634:	0400dc34 	movhi	r16,880
   20638:	00000806 	br	2065c <_strtod_r+0x9a8>
   2063c:	10bff804 	addi	r2,r2,-32
   20640:	00ffffc4 	movi	r3,-1
   20644:	1884983a 	sll	r2,r3,r2
   20648:	1420703a 	and	r16,r2,r16
   2064c:	00000306 	br	2065c <_strtod_r+0x9a8>
   20650:	00ffffc4 	movi	r3,-1
   20654:	1884983a 	sll	r2,r3,r2
   20658:	1462703a 	and	r17,r2,r17
   2065c:	8809883a 	mov	r4,r17
   20660:	800b883a 	mov	r5,r16
   20664:	000d883a 	mov	r6,zero
   20668:	000f883a 	mov	r7,zero
   2066c:	00246a40 	call	246a4 <__eqdf2>
   20670:	103fc826 	beq	r2,zero,20594 <_gp+0xfffee474>
   20674:	00000106 	br	2067c <_strtod_r+0x9c8>
   20678:	002d883a 	mov	r22,zero
   2067c:	d9400817 	ldw	r5,32(sp)
   20680:	d9800917 	ldw	r6,36(sp)
   20684:	dcc00015 	stw	r19,0(sp)
   20688:	9009883a 	mov	r4,r18
   2068c:	e00f883a 	mov	r7,fp
   20690:	0022d740 	call	22d74 <__s2b>
   20694:	d8800915 	stw	r2,36(sp)
   20698:	103f7526 	beq	r2,zero,20470 <_gp+0xfffee350>
   2069c:	d9000717 	ldw	r4,28(sp)
   206a0:	0029883a 	mov	r20,zero
   206a4:	0027883a 	mov	r19,zero
   206a8:	2007d7fa 	srai	r3,r4,31
   206ac:	0105c83a 	sub	r2,zero,r4
   206b0:	1886703a 	and	r3,r3,r2
   206b4:	d8800917 	ldw	r2,36(sp)
   206b8:	d8c00c15 	stw	r3,48(sp)
   206bc:	10800304 	addi	r2,r2,12
   206c0:	d8801115 	stw	r2,68(sp)
   206c4:	d8c00917 	ldw	r3,36(sp)
   206c8:	9009883a 	mov	r4,r18
   206cc:	19400117 	ldw	r5,4(r3)
   206d0:	0022b000 	call	22b00 <_Balloc>
   206d4:	102f883a 	mov	r23,r2
   206d8:	103f6926 	beq	r2,zero,20480 <_gp+0xfffee360>
   206dc:	d9000917 	ldw	r4,36(sp)
   206e0:	d9401117 	ldw	r5,68(sp)
   206e4:	21800417 	ldw	r6,16(r4)
   206e8:	11000304 	addi	r4,r2,12
   206ec:	31800084 	addi	r6,r6,2
   206f0:	318d883a 	add	r6,r6,r6
   206f4:	318d883a 	add	r6,r6,r6
   206f8:	001f52c0 	call	1f52c <memcpy>
   206fc:	d8800204 	addi	r2,sp,8
   20700:	d8800015 	stw	r2,0(sp)
   20704:	9009883a 	mov	r4,r18
   20708:	880b883a 	mov	r5,r17
   2070c:	800d883a 	mov	r6,r16
   20710:	d9c00404 	addi	r7,sp,16
   20714:	dc400f15 	stw	r17,60(sp)
   20718:	dc001015 	stw	r16,64(sp)
   2071c:	00237a00 	call	237a0 <__d2b>
   20720:	d8800515 	stw	r2,20(sp)
   20724:	103f5626 	beq	r2,zero,20480 <_gp+0xfffee360>
   20728:	9009883a 	mov	r4,r18
   2072c:	01400044 	movi	r5,1
   20730:	0022fac0 	call	22fac <__i2b>
   20734:	1027883a 	mov	r19,r2
   20738:	103f5126 	beq	r2,zero,20480 <_gp+0xfffee360>
   2073c:	d8c00717 	ldw	r3,28(sp)
   20740:	d8000815 	stw	zero,32(sp)
   20744:	00c0010e 	bge	zero,r3,2074c <_strtod_r+0xa98>
   20748:	d8c00815 	stw	r3,32(sp)
   2074c:	d8800417 	ldw	r2,16(sp)
   20750:	10005216 	blt	r2,zero,2089c <_strtod_r+0xbe8>
   20754:	d9000c17 	ldw	r4,48(sp)
   20758:	dd400817 	ldw	r21,32(sp)
   2075c:	20b9883a 	add	fp,r4,r2
   20760:	d8c00217 	ldw	r3,8(sp)
   20764:	01000d84 	movi	r4,54
   20768:	1585c83a 	sub	r2,r2,r22
   2076c:	10c5883a 	add	r2,r2,r3
   20770:	20c7c83a 	sub	r3,r4,r3
   20774:	013f00c4 	movi	r4,-1021
   20778:	01400044 	movi	r5,1
   2077c:	1100500e 	bge	r2,r4,208c0 <_strtod_r+0xc0c>
   20780:	2089c83a 	sub	r4,r4,r2
   20784:	018007c4 	movi	r6,31
   20788:	1907c83a 	sub	r3,r3,r4
   2078c:	31004716 	blt	r6,r4,208ac <_strtod_r+0xbf8>
   20790:	290a983a 	sll	r5,r5,r4
   20794:	d8000b15 	stw	zero,44(sp)
   20798:	d9400d15 	stw	r5,52(sp)
   2079c:	e0cf883a 	add	r7,fp,r3
   207a0:	a8eb883a 	add	r21,r21,r3
   207a4:	adab883a 	add	r21,r21,r22
   207a8:	3805883a 	mov	r2,r7
   207ac:	e1c0010e 	bge	fp,r7,207b4 <_strtod_r+0xb00>
   207b0:	e005883a 	mov	r2,fp
   207b4:	a880010e 	bge	r21,r2,207bc <_strtod_r+0xb08>
   207b8:	a805883a 	mov	r2,r21
   207bc:	0080030e 	bge	zero,r2,207cc <_strtod_r+0xb18>
   207c0:	388fc83a 	sub	r7,r7,r2
   207c4:	a8abc83a 	sub	r21,r21,r2
   207c8:	e0b9c83a 	sub	fp,fp,r2
   207cc:	d9000c17 	ldw	r4,48(sp)
   207d0:	20003e1e 	bne	r4,zero,208cc <_strtod_r+0xc18>
   207d4:	01c05116 	blt	zero,r7,2091c <_strtod_r+0xc68>
   207d8:	d8c00817 	ldw	r3,32(sp)
   207dc:	1800561e 	bne	r3,zero,20938 <_strtod_r+0xc84>
   207e0:	05405c16 	blt	zero,r21,20954 <_strtod_r+0xca0>
   207e4:	07006216 	blt	zero,fp,20970 <_strtod_r+0xcbc>
   207e8:	d9400517 	ldw	r5,20(sp)
   207ec:	9009883a 	mov	r4,r18
   207f0:	b80d883a 	mov	r6,r23
   207f4:	00234c00 	call	234c0 <__mdiff>
   207f8:	1029883a 	mov	r20,r2
   207fc:	103f2026 	beq	r2,zero,20480 <_gp+0xfffee360>
   20800:	15400317 	ldw	r21,12(r2)
   20804:	1009883a 	mov	r4,r2
   20808:	10000315 	stw	zero,12(r2)
   2080c:	980b883a 	mov	r5,r19
   20810:	002345c0 	call	2345c <__mcmp>
   20814:	1000610e 	bge	r2,zero,2099c <_strtod_r+0xce8>
   20818:	a8018b1e 	bne	r21,zero,20e48 <_strtod_r+0x1194>
   2081c:	88018a1e 	bne	r17,zero,20e48 <_strtod_r+0x1194>
   20820:	00800434 	movhi	r2,16
   20824:	10bfffc4 	addi	r2,r2,-1
   20828:	8084703a 	and	r2,r16,r2
   2082c:	1001861e 	bne	r2,zero,20e48 <_strtod_r+0x1194>
   20830:	809ffc2c 	andhi	r2,r16,32752
   20834:	00c1ac34 	movhi	r3,1712
   20838:	1881832e 	bgeu	r3,r2,20e48 <_strtod_r+0x1194>
   2083c:	a0800517 	ldw	r2,20(r20)
   20840:	10005226 	beq	r2,zero,2098c <_strtod_r+0xcd8>
   20844:	a00b883a 	mov	r5,r20
   20848:	9009883a 	mov	r4,r18
   2084c:	01800044 	movi	r6,1
   20850:	00233080 	call	23308 <__lshift>
   20854:	1009883a 	mov	r4,r2
   20858:	980b883a 	mov	r5,r19
   2085c:	1029883a 	mov	r20,r2
   20860:	002345c0 	call	2345c <__mcmp>
   20864:	0081780e 	bge	zero,r2,20e48 <_strtod_r+0x1194>
   20868:	80dffc2c 	andhi	r3,r16,32752
   2086c:	b0006926 	beq	r22,zero,20a14 <_strtod_r+0xd60>
   20870:	0081ac34 	movhi	r2,1712
   20874:	10c06716 	blt	r2,r3,20a14 <_strtod_r+0xd60>
   20878:	0080dc34 	movhi	r2,880
   2087c:	10c17316 	blt	r2,r3,20e4c <_strtod_r+0x1198>
   20880:	d8c00917 	ldw	r3,36(sp)
   20884:	00800884 	movi	r2,34
   20888:	90800015 	stw	r2,0(r18)
   2088c:	0023883a 	mov	r17,zero
   20890:	0021883a 	mov	r16,zero
   20894:	1801781e 	bne	r3,zero,20e78 <_strtod_r+0x11c4>
   20898:	00018606 	br	20eb4 <_strtod_r+0x1200>
   2089c:	d8c00817 	ldw	r3,32(sp)
   208a0:	df000c17 	ldw	fp,48(sp)
   208a4:	18abc83a 	sub	r21,r3,r2
   208a8:	003fad06 	br	20760 <_gp+0xfffee640>
   208ac:	013ef8c4 	movi	r4,-1053
   208b0:	2085c83a 	sub	r2,r4,r2
   208b4:	2884983a 	sll	r2,r5,r2
   208b8:	d8800b15 	stw	r2,44(sp)
   208bc:	00000106 	br	208c4 <_strtod_r+0xc10>
   208c0:	d8000b15 	stw	zero,44(sp)
   208c4:	d9400d15 	stw	r5,52(sp)
   208c8:	003fb406 	br	2079c <_gp+0xfffee67c>
   208cc:	d9800c17 	ldw	r6,48(sp)
   208d0:	980b883a 	mov	r5,r19
   208d4:	9009883a 	mov	r4,r18
   208d8:	d9c01315 	stw	r7,76(sp)
   208dc:	00231d00 	call	231d0 <__pow5mult>
   208e0:	1027883a 	mov	r19,r2
   208e4:	103ee626 	beq	r2,zero,20480 <_gp+0xfffee360>
   208e8:	d9800517 	ldw	r6,20(sp)
   208ec:	9009883a 	mov	r4,r18
   208f0:	100b883a 	mov	r5,r2
   208f4:	0022ff00 	call	22ff0 <__multiply>
   208f8:	103ee126 	beq	r2,zero,20480 <_gp+0xfffee360>
   208fc:	d9400517 	ldw	r5,20(sp)
   20900:	9009883a 	mov	r4,r18
   20904:	d8801215 	stw	r2,72(sp)
   20908:	0022bec0 	call	22bec <_Bfree>
   2090c:	d8801217 	ldw	r2,72(sp)
   20910:	d9c01317 	ldw	r7,76(sp)
   20914:	d8800515 	stw	r2,20(sp)
   20918:	003fae06 	br	207d4 <_gp+0xfffee6b4>
   2091c:	d9400517 	ldw	r5,20(sp)
   20920:	9009883a 	mov	r4,r18
   20924:	380d883a 	mov	r6,r7
   20928:	00233080 	call	23308 <__lshift>
   2092c:	d8800515 	stw	r2,20(sp)
   20930:	103fa91e 	bne	r2,zero,207d8 <_gp+0xfffee6b8>
   20934:	003ed206 	br	20480 <_gp+0xfffee360>
   20938:	d9800817 	ldw	r6,32(sp)
   2093c:	b80b883a 	mov	r5,r23
   20940:	9009883a 	mov	r4,r18
   20944:	00231d00 	call	231d0 <__pow5mult>
   20948:	102f883a 	mov	r23,r2
   2094c:	103fa41e 	bne	r2,zero,207e0 <_gp+0xfffee6c0>
   20950:	003ecb06 	br	20480 <_gp+0xfffee360>
   20954:	b80b883a 	mov	r5,r23
   20958:	9009883a 	mov	r4,r18
   2095c:	a80d883a 	mov	r6,r21
   20960:	00233080 	call	23308 <__lshift>
   20964:	102f883a 	mov	r23,r2
   20968:	103f9e1e 	bne	r2,zero,207e4 <_gp+0xfffee6c4>
   2096c:	003ec406 	br	20480 <_gp+0xfffee360>
   20970:	980b883a 	mov	r5,r19
   20974:	9009883a 	mov	r4,r18
   20978:	e00d883a 	mov	r6,fp
   2097c:	00233080 	call	23308 <__lshift>
   20980:	1027883a 	mov	r19,r2
   20984:	103f981e 	bne	r2,zero,207e8 <_gp+0xfffee6c8>
   20988:	003ebd06 	br	20480 <_gp+0xfffee360>
   2098c:	a0800417 	ldw	r2,16(r20)
   20990:	00c00044 	movi	r3,1
   20994:	18bfab16 	blt	r3,r2,20844 <_gp+0xfffee724>
   20998:	00012b06 	br	20e48 <_strtod_r+0x1194>
   2099c:	1000471e 	bne	r2,zero,20abc <_strtod_r+0xe08>
   209a0:	00800434 	movhi	r2,16
   209a4:	10bfffc4 	addi	r2,r2,-1
   209a8:	a8001626 	beq	r21,zero,20a04 <_strtod_r+0xd50>
   209ac:	8086703a 	and	r3,r16,r2
   209b0:	18801f1e 	bne	r3,r2,20a30 <_strtod_r+0xd7c>
   209b4:	00bfffc4 	movi	r2,-1
   209b8:	b0000726 	beq	r22,zero,209d8 <_strtod_r+0xd24>
   209bc:	80dffc2c 	andhi	r3,r16,32752
   209c0:	0101a834 	movhi	r4,1696
   209c4:	20c00436 	bltu	r4,r3,209d8 <_strtod_r+0xd24>
   209c8:	1806d53a 	srli	r3,r3,20
   209cc:	01001ac4 	movi	r4,107
   209d0:	20c7c83a 	sub	r3,r4,r3
   209d4:	10c4983a 	sll	r2,r2,r3
   209d8:	8880151e 	bne	r17,r2,20a30 <_strtod_r+0xd7c>
   209dc:	009ffc34 	movhi	r2,32752
   209e0:	10bfffc4 	addi	r2,r2,-1
   209e4:	8080021e 	bne	r16,r2,209f0 <_strtod_r+0xd3c>
   209e8:	00bfffc4 	movi	r2,-1
   209ec:	88bea426 	beq	r17,r2,20480 <_gp+0xfffee360>
   209f0:	80dffc2c 	andhi	r3,r16,32752
   209f4:	00800434 	movhi	r2,16
   209f8:	18a1883a 	add	r16,r3,r2
   209fc:	0023883a 	mov	r17,zero
   20a00:	00011106 	br	20e48 <_strtod_r+0x1194>
   20a04:	8084703a 	and	r2,r16,r2
   20a08:	1000091e 	bne	r2,zero,20a30 <_strtod_r+0xd7c>
   20a0c:	8800081e 	bne	r17,zero,20a30 <_strtod_r+0xd7c>
   20a10:	003f9506 	br	20868 <_gp+0xfffee748>
   20a14:	00bffc34 	movhi	r2,65520
   20a18:	1885883a 	add	r2,r3,r2
   20a1c:	00c00434 	movhi	r3,16
   20a20:	18ffffc4 	addi	r3,r3,-1
   20a24:	10e0b03a 	or	r16,r2,r3
   20a28:	047fffc4 	movi	r17,-1
   20a2c:	00010606 	br	20e48 <_strtod_r+0x1194>
   20a30:	d8c00b17 	ldw	r3,44(sp)
   20a34:	18000226 	beq	r3,zero,20a40 <_strtod_r+0xd8c>
   20a38:	1c04703a 	and	r2,r3,r16
   20a3c:	00000206 	br	20a48 <_strtod_r+0xd94>
   20a40:	d8c00d17 	ldw	r3,52(sp)
   20a44:	1c44703a 	and	r2,r3,r17
   20a48:	1000ff26 	beq	r2,zero,20e48 <_strtod_r+0x1194>
   20a4c:	8809883a 	mov	r4,r17
   20a50:	800b883a 	mov	r5,r16
   20a54:	b00d883a 	mov	r6,r22
   20a58:	a8000926 	beq	r21,zero,20a80 <_strtod_r+0xdcc>
   20a5c:	001fc480 	call	1fc48 <sulp>
   20a60:	8809883a 	mov	r4,r17
   20a64:	800b883a 	mov	r5,r16
   20a68:	100d883a 	mov	r6,r2
   20a6c:	180f883a 	mov	r7,r3
   20a70:	001d7c40 	call	1d7c4 <__adddf3>
   20a74:	1023883a 	mov	r17,r2
   20a78:	1821883a 	mov	r16,r3
   20a7c:	0000f206 	br	20e48 <_strtod_r+0x1194>
   20a80:	001fc480 	call	1fc48 <sulp>
   20a84:	8809883a 	mov	r4,r17
   20a88:	800b883a 	mov	r5,r16
   20a8c:	100d883a 	mov	r6,r2
   20a90:	180f883a 	mov	r7,r3
   20a94:	001e9640 	call	1e964 <__subdf3>
   20a98:	1009883a 	mov	r4,r2
   20a9c:	180b883a 	mov	r5,r3
   20aa0:	000d883a 	mov	r6,zero
   20aa4:	000f883a 	mov	r7,zero
   20aa8:	1023883a 	mov	r17,r2
   20aac:	1821883a 	mov	r16,r3
   20ab0:	00246a40 	call	246a4 <__eqdf2>
   20ab4:	103f7226 	beq	r2,zero,20880 <_gp+0xfffee760>
   20ab8:	0000e306 	br	20e48 <_strtod_r+0x1194>
   20abc:	a009883a 	mov	r4,r20
   20ac0:	980b883a 	mov	r5,r19
   20ac4:	00238e00 	call	238e0 <__ratio>
   20ac8:	1009883a 	mov	r4,r2
   20acc:	180b883a 	mov	r5,r3
   20ad0:	000d883a 	mov	r6,zero
   20ad4:	01d00034 	movhi	r7,16384
   20ad8:	1839883a 	mov	fp,r3
   20adc:	d8801315 	stw	r2,76(sp)
   20ae0:	001e1500 	call	1e150 <__ledf2>
   20ae4:	da001317 	ldw	r8,76(sp)
   20ae8:	00802716 	blt	zero,r2,20b88 <_strtod_r+0xed4>
   20aec:	a8000326 	beq	r21,zero,20afc <_strtod_r+0xe48>
   20af0:	0015883a 	mov	r10,zero
   20af4:	020ffc34 	movhi	r8,16368
   20af8:	00000b06 	br	20b28 <_strtod_r+0xe74>
   20afc:	8800051e 	bne	r17,zero,20b14 <_strtod_r+0xe60>
   20b00:	01000434 	movhi	r4,16
   20b04:	213fffc4 	addi	r4,r4,-1
   20b08:	8104703a 	and	r2,r16,r4
   20b0c:	1000041e 	bne	r2,zero,20b20 <_strtod_r+0xe6c>
   20b10:	00000806 	br	20b34 <_strtod_r+0xe80>
   20b14:	00800044 	movi	r2,1
   20b18:	8880011e 	bne	r17,r2,20b20 <_strtod_r+0xe6c>
   20b1c:	803f5826 	beq	r16,zero,20880 <_gp+0xfffee760>
   20b20:	0015883a 	mov	r10,zero
   20b24:	022ffc34 	movhi	r8,49136
   20b28:	0017883a 	mov	r11,zero
   20b2c:	070ffc34 	movhi	fp,16368
   20b30:	00002106 	br	20bb8 <_strtod_r+0xf04>
   20b34:	4009883a 	mov	r4,r8
   20b38:	e00b883a 	mov	r5,fp
   20b3c:	000d883a 	mov	r6,zero
   20b40:	01cffc34 	movhi	r7,16368
   20b44:	da001315 	stw	r8,76(sp)
   20b48:	001e1500 	call	1e150 <__ledf2>
   20b4c:	da001317 	ldw	r8,76(sp)
   20b50:	10000816 	blt	r2,zero,20b74 <_strtod_r+0xec0>
   20b54:	e00b883a 	mov	r5,fp
   20b58:	4009883a 	mov	r4,r8
   20b5c:	000d883a 	mov	r6,zero
   20b60:	01cff834 	movhi	r7,16352
   20b64:	001e2380 	call	1e238 <__muldf3>
   20b68:	1017883a 	mov	r11,r2
   20b6c:	1839883a 	mov	fp,r3
   20b70:	00000206 	br	20b7c <_strtod_r+0xec8>
   20b74:	0017883a 	mov	r11,zero
   20b78:	070ff834 	movhi	fp,16352
   20b7c:	e220003c 	xorhi	r8,fp,32768
   20b80:	5815883a 	mov	r10,r11
   20b84:	00000c06 	br	20bb8 <_strtod_r+0xf04>
   20b88:	e00b883a 	mov	r5,fp
   20b8c:	4009883a 	mov	r4,r8
   20b90:	000d883a 	mov	r6,zero
   20b94:	01cff834 	movhi	r7,16352
   20b98:	001e2380 	call	1e238 <__muldf3>
   20b9c:	1017883a 	mov	r11,r2
   20ba0:	1839883a 	mov	fp,r3
   20ba4:	a800021e 	bne	r21,zero,20bb0 <_strtod_r+0xefc>
   20ba8:	1a20003c 	xorhi	r8,r3,32768
   20bac:	00000106 	br	20bb4 <_strtod_r+0xf00>
   20bb0:	1811883a 	mov	r8,r3
   20bb4:	1015883a 	mov	r10,r2
   20bb8:	809ffc2c 	andhi	r2,r16,32752
   20bbc:	d8800815 	stw	r2,32(sp)
   20bc0:	d8c00817 	ldw	r3,32(sp)
   20bc4:	009ff834 	movhi	r2,32736
   20bc8:	1880281e 	bne	r3,r2,20c6c <_strtod_r+0xfb8>
   20bcc:	00bf2c34 	movhi	r2,64688
   20bd0:	80a1883a 	add	r16,r16,r2
   20bd4:	8809883a 	mov	r4,r17
   20bd8:	800b883a 	mov	r5,r16
   20bdc:	dac01415 	stw	r11,80(sp)
   20be0:	da001315 	stw	r8,76(sp)
   20be4:	da801215 	stw	r10,72(sp)
   20be8:	00236380 	call	23638 <__ulp>
   20bec:	da801217 	ldw	r10,72(sp)
   20bf0:	da001317 	ldw	r8,76(sp)
   20bf4:	100d883a 	mov	r6,r2
   20bf8:	5009883a 	mov	r4,r10
   20bfc:	400b883a 	mov	r5,r8
   20c00:	180f883a 	mov	r7,r3
   20c04:	001e2380 	call	1e238 <__muldf3>
   20c08:	8809883a 	mov	r4,r17
   20c0c:	800b883a 	mov	r5,r16
   20c10:	100d883a 	mov	r6,r2
   20c14:	180f883a 	mov	r7,r3
   20c18:	001d7c40 	call	1d7c4 <__adddf3>
   20c1c:	011f2834 	movhi	r4,31904
   20c20:	1023883a 	mov	r17,r2
   20c24:	213fffc4 	addi	r4,r4,-1
   20c28:	189ffc2c 	andhi	r2,r3,32752
   20c2c:	dac01417 	ldw	r11,80(sp)
   20c30:	20800b2e 	bgeu	r4,r2,20c60 <_strtod_r+0xfac>
   20c34:	d8801017 	ldw	r2,64(sp)
   20c38:	00dffc34 	movhi	r3,32752
   20c3c:	18ffffc4 	addi	r3,r3,-1
   20c40:	10c0031e 	bne	r2,r3,20c50 <_strtod_r+0xf9c>
   20c44:	d9000f17 	ldw	r4,60(sp)
   20c48:	00bfffc4 	movi	r2,-1
   20c4c:	20be0c26 	beq	r4,r2,20480 <_gp+0xfffee360>
   20c50:	041ffc34 	movhi	r16,32752
   20c54:	843fffc4 	addi	r16,r16,-1
   20c58:	047fffc4 	movi	r17,-1
   20c5c:	00006d06 	br	20e14 <_strtod_r+0x1160>
   20c60:	0400d434 	movhi	r16,848
   20c64:	1c21883a 	add	r16,r3,r16
   20c68:	00003806 	br	20d4c <_strtod_r+0x1098>
   20c6c:	b0002226 	beq	r22,zero,20cf8 <_strtod_r+0x1044>
   20c70:	d8c00817 	ldw	r3,32(sp)
   20c74:	0081a834 	movhi	r2,1696
   20c78:	10c01f36 	bltu	r2,r3,20cf8 <_strtod_r+0x1044>
   20c7c:	01d07834 	movhi	r7,16864
   20c80:	5809883a 	mov	r4,r11
   20c84:	e00b883a 	mov	r5,fp
   20c88:	01bff034 	movhi	r6,65472
   20c8c:	39ffffc4 	addi	r7,r7,-1
   20c90:	da001315 	stw	r8,76(sp)
   20c94:	da801215 	stw	r10,72(sp)
   20c98:	dac01415 	stw	r11,80(sp)
   20c9c:	001e1500 	call	1e150 <__ledf2>
   20ca0:	da001317 	ldw	r8,76(sp)
   20ca4:	da801217 	ldw	r10,72(sp)
   20ca8:	dac01417 	ldw	r11,80(sp)
   20cac:	00800e16 	blt	zero,r2,20ce8 <_strtod_r+0x1034>
   20cb0:	5809883a 	mov	r4,r11
   20cb4:	e00b883a 	mov	r5,fp
   20cb8:	001c9fc0 	call	1c9fc <__fixunsdfsi>
   20cbc:	1000011e 	bne	r2,zero,20cc4 <_strtod_r+0x1010>
   20cc0:	00800044 	movi	r2,1
   20cc4:	1009883a 	mov	r4,r2
   20cc8:	001f3a40 	call	1f3a4 <__floatunsidf>
   20ccc:	1017883a 	mov	r11,r2
   20cd0:	1839883a 	mov	fp,r3
   20cd4:	a800021e 	bne	r21,zero,20ce0 <_strtod_r+0x102c>
   20cd8:	1a20003c 	xorhi	r8,r3,32768
   20cdc:	00000106 	br	20ce4 <_strtod_r+0x1030>
   20ce0:	1811883a 	mov	r8,r3
   20ce4:	1015883a 	mov	r10,r2
   20ce8:	d9000817 	ldw	r4,32(sp)
   20cec:	0081ac34 	movhi	r2,1712
   20cf0:	4091883a 	add	r8,r8,r2
   20cf4:	4111c83a 	sub	r8,r8,r4
   20cf8:	8809883a 	mov	r4,r17
   20cfc:	800b883a 	mov	r5,r16
   20d00:	dac01415 	stw	r11,80(sp)
   20d04:	da001315 	stw	r8,76(sp)
   20d08:	da801215 	stw	r10,72(sp)
   20d0c:	00236380 	call	23638 <__ulp>
   20d10:	da801217 	ldw	r10,72(sp)
   20d14:	da001317 	ldw	r8,76(sp)
   20d18:	100d883a 	mov	r6,r2
   20d1c:	5009883a 	mov	r4,r10
   20d20:	400b883a 	mov	r5,r8
   20d24:	180f883a 	mov	r7,r3
   20d28:	001e2380 	call	1e238 <__muldf3>
   20d2c:	8809883a 	mov	r4,r17
   20d30:	800b883a 	mov	r5,r16
   20d34:	100d883a 	mov	r6,r2
   20d38:	180f883a 	mov	r7,r3
   20d3c:	001d7c40 	call	1d7c4 <__adddf3>
   20d40:	dac01417 	ldw	r11,80(sp)
   20d44:	1023883a 	mov	r17,r2
   20d48:	1821883a 	mov	r16,r3
   20d4c:	b000311e 	bne	r22,zero,20e14 <_strtod_r+0x1160>
   20d50:	d8c00817 	ldw	r3,32(sp)
   20d54:	809ffc2c 	andhi	r2,r16,32752
   20d58:	18802e1e 	bne	r3,r2,20e14 <_strtod_r+0x1160>
   20d5c:	5809883a 	mov	r4,r11
   20d60:	e00b883a 	mov	r5,fp
   20d64:	dac01415 	stw	r11,80(sp)
   20d68:	001f23c0 	call	1f23c <__fixdfsi>
   20d6c:	1009883a 	mov	r4,r2
   20d70:	001f2cc0 	call	1f2cc <__floatsidf>
   20d74:	dac01417 	ldw	r11,80(sp)
   20d78:	e00b883a 	mov	r5,fp
   20d7c:	100d883a 	mov	r6,r2
   20d80:	5809883a 	mov	r4,r11
   20d84:	180f883a 	mov	r7,r3
   20d88:	001e9640 	call	1e964 <__subdf3>
   20d8c:	1011883a 	mov	r8,r2
   20d90:	1839883a 	mov	fp,r3
   20d94:	a800051e 	bne	r21,zero,20dac <_strtod_r+0x10f8>
   20d98:	8800041e 	bne	r17,zero,20dac <_strtod_r+0x10f8>
   20d9c:	01000434 	movhi	r4,16
   20da0:	213fffc4 	addi	r4,r4,-1
   20da4:	8104703a 	and	r2,r16,r4
   20da8:	10001226 	beq	r2,zero,20df4 <_strtod_r+0x1140>
   20dac:	01a52834 	movhi	r6,38048
   20db0:	01cff834 	movhi	r7,16352
   20db4:	4009883a 	mov	r4,r8
   20db8:	e00b883a 	mov	r5,fp
   20dbc:	318d6544 	addi	r6,r6,13717
   20dc0:	39ffffc4 	addi	r7,r7,-1
   20dc4:	da001315 	stw	r8,76(sp)
   20dc8:	001e1500 	call	1e150 <__ledf2>
   20dcc:	da001317 	ldw	r8,76(sp)
   20dd0:	10002916 	blt	r2,zero,20e78 <_strtod_r+0x11c4>
   20dd4:	018d6c34 	movhi	r6,13744
   20dd8:	4009883a 	mov	r4,r8
   20ddc:	e00b883a 	mov	r5,fp
   20de0:	31b94d44 	addi	r6,r6,-6859
   20de4:	01cff834 	movhi	r7,16352
   20de8:	001e0680 	call	1e068 <__gedf2>
   20dec:	0080090e 	bge	zero,r2,20e14 <_strtod_r+0x1160>
   20df0:	00002106 	br	20e78 <_strtod_r+0x11c4>
   20df4:	01a52834 	movhi	r6,38048
   20df8:	01cff434 	movhi	r7,16336
   20dfc:	4009883a 	mov	r4,r8
   20e00:	180b883a 	mov	r5,r3
   20e04:	318d6544 	addi	r6,r6,13717
   20e08:	39ffffc4 	addi	r7,r7,-1
   20e0c:	001e1500 	call	1e150 <__ledf2>
   20e10:	10001916 	blt	r2,zero,20e78 <_strtod_r+0x11c4>
   20e14:	d9400517 	ldw	r5,20(sp)
   20e18:	9009883a 	mov	r4,r18
   20e1c:	0022bec0 	call	22bec <_Bfree>
   20e20:	9009883a 	mov	r4,r18
   20e24:	b80b883a 	mov	r5,r23
   20e28:	0022bec0 	call	22bec <_Bfree>
   20e2c:	9009883a 	mov	r4,r18
   20e30:	980b883a 	mov	r5,r19
   20e34:	0022bec0 	call	22bec <_Bfree>
   20e38:	9009883a 	mov	r4,r18
   20e3c:	a00b883a 	mov	r5,r20
   20e40:	0022bec0 	call	22bec <_Bfree>
   20e44:	003e1f06 	br	206c4 <_gp+0xfffee5a4>
   20e48:	b0000b26 	beq	r22,zero,20e78 <_strtod_r+0x11c4>
   20e4c:	8809883a 	mov	r4,r17
   20e50:	800b883a 	mov	r5,r16
   20e54:	000d883a 	mov	r6,zero
   20e58:	01ce5434 	movhi	r7,14672
   20e5c:	001e2380 	call	1e238 <__muldf3>
   20e60:	1023883a 	mov	r17,r2
   20e64:	1821883a 	mov	r16,r3
   20e68:	1800031e 	bne	r3,zero,20e78 <_strtod_r+0x11c4>
   20e6c:	1000021e 	bne	r2,zero,20e78 <_strtod_r+0x11c4>
   20e70:	00800884 	movi	r2,34
   20e74:	90800015 	stw	r2,0(r18)
   20e78:	d9400517 	ldw	r5,20(sp)
   20e7c:	9009883a 	mov	r4,r18
   20e80:	0022bec0 	call	22bec <_Bfree>
   20e84:	9009883a 	mov	r4,r18
   20e88:	b80b883a 	mov	r5,r23
   20e8c:	0022bec0 	call	22bec <_Bfree>
   20e90:	9009883a 	mov	r4,r18
   20e94:	980b883a 	mov	r5,r19
   20e98:	0022bec0 	call	22bec <_Bfree>
   20e9c:	d9400917 	ldw	r5,36(sp)
   20ea0:	9009883a 	mov	r4,r18
   20ea4:	0022bec0 	call	22bec <_Bfree>
   20ea8:	9009883a 	mov	r4,r18
   20eac:	a00b883a 	mov	r5,r20
   20eb0:	0022bec0 	call	22bec <_Bfree>
   20eb4:	d8800e17 	ldw	r2,56(sp)
   20eb8:	10000326 	beq	r2,zero,20ec8 <_strtod_r+0x1214>
   20ebc:	d8800617 	ldw	r2,24(sp)
   20ec0:	d8c00e17 	ldw	r3,56(sp)
   20ec4:	18800015 	stw	r2,0(r3)
   20ec8:	d9000a17 	ldw	r4,40(sp)
   20ecc:	20000226 	beq	r4,zero,20ed8 <_strtod_r+0x1224>
   20ed0:	80e0003c 	xorhi	r3,r16,32768
   20ed4:	00000606 	br	20ef0 <_strtod_r+0x123c>
   20ed8:	8007883a 	mov	r3,r16
   20edc:	00000406 	br	20ef0 <_strtod_r+0x123c>
   20ee0:	0039883a 	mov	fp,zero
   20ee4:	000b883a 	mov	r5,zero
   20ee8:	02800044 	movi	r10,1
   20eec:	003c6e06 	br	200a8 <_gp+0xfffedf88>
   20ef0:	8805883a 	mov	r2,r17
   20ef4:	dfc01e17 	ldw	ra,120(sp)
   20ef8:	df001d17 	ldw	fp,116(sp)
   20efc:	ddc01c17 	ldw	r23,112(sp)
   20f00:	dd801b17 	ldw	r22,108(sp)
   20f04:	dd401a17 	ldw	r21,104(sp)
   20f08:	dd001917 	ldw	r20,100(sp)
   20f0c:	dcc01817 	ldw	r19,96(sp)
   20f10:	dc801717 	ldw	r18,92(sp)
   20f14:	dc401617 	ldw	r17,88(sp)
   20f18:	dc001517 	ldw	r16,84(sp)
   20f1c:	dec01f04 	addi	sp,sp,124
   20f20:	f800283a 	ret

00020f24 <strtod>:
   20f24:	00c000f4 	movhi	r3,3
   20f28:	18e84c04 	addi	r3,r3,-24272
   20f2c:	2005883a 	mov	r2,r4
   20f30:	de00012e 	bgeu	sp,et,20f38 <strtod+0x14>
   20f34:	003b68fa 	trap	3
   20f38:	19000017 	ldw	r4,0(r3)
   20f3c:	280d883a 	mov	r6,r5
   20f40:	100b883a 	mov	r5,r2
   20f44:	001fcb41 	jmpi	1fcb4 <_strtod_r>

00020f48 <strtof>:
   20f48:	defffb04 	addi	sp,sp,-20
   20f4c:	de00012e 	bgeu	sp,et,20f54 <strtof+0xc>
   20f50:	003b68fa 	trap	3
   20f54:	dc400115 	stw	r17,4(sp)
   20f58:	044000f4 	movhi	r17,3
   20f5c:	8c684c04 	addi	r17,r17,-24272
   20f60:	2005883a 	mov	r2,r4
   20f64:	89000017 	ldw	r4,0(r17)
   20f68:	280d883a 	mov	r6,r5
   20f6c:	100b883a 	mov	r5,r2
   20f70:	dfc00415 	stw	ra,16(sp)
   20f74:	dcc00315 	stw	r19,12(sp)
   20f78:	dc800215 	stw	r18,8(sp)
   20f7c:	dc000015 	stw	r16,0(sp)
   20f80:	001fcb40 	call	1fcb4 <_strtod_r>
   20f84:	1009883a 	mov	r4,r2
   20f88:	180b883a 	mov	r5,r3
   20f8c:	1027883a 	mov	r19,r2
   20f90:	1825883a 	mov	r18,r3
   20f94:	00247300 	call	24730 <__truncdfsf2>
   20f98:	1009883a 	mov	r4,r2
   20f9c:	000b883a 	mov	r5,zero
   20fa0:	1021883a 	mov	r16,r2
   20fa4:	0023bd40 	call	23bd4 <__eqsf2>
   20fa8:	1000061e 	bne	r2,zero,20fc4 <strtof+0x7c>
   20fac:	9809883a 	mov	r4,r19
   20fb0:	900b883a 	mov	r5,r18
   20fb4:	000d883a 	mov	r6,zero
   20fb8:	000f883a 	mov	r7,zero
   20fbc:	00246a40 	call	246a4 <__eqdf2>
   20fc0:	1000181e 	bne	r2,zero,21024 <strtof+0xdc>
   20fc4:	015fe034 	movhi	r5,32640
   20fc8:	8009883a 	mov	r4,r16
   20fcc:	297fffc4 	addi	r5,r5,-1
   20fd0:	0023c500 	call	23c50 <__gesf2>
   20fd4:	0080070e 	bge	zero,r2,20ff4 <strtof+0xac>
   20fd8:	01bfffc4 	movi	r6,-1
   20fdc:	01dffc34 	movhi	r7,32752
   20fe0:	9809883a 	mov	r4,r19
   20fe4:	900b883a 	mov	r5,r18
   20fe8:	398f883a 	add	r7,r7,r6
   20fec:	001e0680 	call	1e068 <__gedf2>
   20ff0:	00800c0e 	bge	zero,r2,21024 <strtof+0xdc>
   20ff4:	017fe034 	movhi	r5,65408
   20ff8:	8009883a 	mov	r4,r16
   20ffc:	297fffc4 	addi	r5,r5,-1
   21000:	0023d100 	call	23d10 <__lesf2>
   21004:	10000a0e 	bge	r2,zero,21030 <strtof+0xe8>
   21008:	01bfffc4 	movi	r6,-1
   2100c:	01fffc34 	movhi	r7,65520
   21010:	9809883a 	mov	r4,r19
   21014:	900b883a 	mov	r5,r18
   21018:	398f883a 	add	r7,r7,r6
   2101c:	001e1500 	call	1e150 <__ledf2>
   21020:	10000316 	blt	r2,zero,21030 <strtof+0xe8>
   21024:	88800017 	ldw	r2,0(r17)
   21028:	00c00884 	movi	r3,34
   2102c:	10c00015 	stw	r3,0(r2)
   21030:	8005883a 	mov	r2,r16
   21034:	dfc00417 	ldw	ra,16(sp)
   21038:	dcc00317 	ldw	r19,12(sp)
   2103c:	dc800217 	ldw	r18,8(sp)
   21040:	dc400117 	ldw	r17,4(sp)
   21044:	dc000017 	ldw	r16,0(sp)
   21048:	dec00504 	addi	sp,sp,20
   2104c:	f800283a 	ret

00021050 <_strtol_r>:
   21050:	008000f4 	movhi	r2,3
   21054:	defff504 	addi	sp,sp,-44
   21058:	10a84d04 	addi	r2,r2,-24268
   2105c:	de00012e 	bgeu	sp,et,21064 <_strtol_r+0x14>
   21060:	003b68fa 	trap	3
   21064:	df000915 	stw	fp,36(sp)
   21068:	17000017 	ldw	fp,0(r2)
   2106c:	dd800715 	stw	r22,28(sp)
   21070:	dd400615 	stw	r21,24(sp)
   21074:	dd000515 	stw	r20,20(sp)
   21078:	dcc00415 	stw	r19,16(sp)
   2107c:	dfc00a15 	stw	ra,40(sp)
   21080:	ddc00815 	stw	r23,32(sp)
   21084:	dc800315 	stw	r18,12(sp)
   21088:	dc400215 	stw	r17,8(sp)
   2108c:	dc000115 	stw	r16,4(sp)
   21090:	2029883a 	mov	r20,r4
   21094:	282b883a 	mov	r21,r5
   21098:	3027883a 	mov	r19,r6
   2109c:	382d883a 	mov	r22,r7
   210a0:	2807883a 	mov	r3,r5
   210a4:	1805883a 	mov	r2,r3
   210a8:	12000003 	ldbu	r8,0(r2)
   210ac:	18c00044 	addi	r3,r3,1
   210b0:	e209883a 	add	r4,fp,r8
   210b4:	21000043 	ldbu	r4,1(r4)
   210b8:	2100020c 	andi	r4,r4,8
   210bc:	203ff91e 	bne	r4,zero,210a4 <_gp+0xfffeef84>
   210c0:	1821883a 	mov	r16,r3
   210c4:	00c00b44 	movi	r3,45
   210c8:	4025883a 	mov	r18,r8
   210cc:	40c0041e 	bne	r8,r3,210e0 <_strtol_r+0x90>
   210d0:	14000084 	addi	r16,r2,2
   210d4:	14800043 	ldbu	r18,1(r2)
   210d8:	05c00044 	movi	r23,1
   210dc:	00000506 	br	210f4 <_strtol_r+0xa4>
   210e0:	00c00ac4 	movi	r3,43
   210e4:	40c0021e 	bne	r8,r3,210f0 <_strtol_r+0xa0>
   210e8:	14800043 	ldbu	r18,1(r2)
   210ec:	14000084 	addi	r16,r2,2
   210f0:	002f883a 	mov	r23,zero
   210f4:	b0000326 	beq	r22,zero,21104 <_strtol_r+0xb4>
   210f8:	00800404 	movi	r2,16
   210fc:	b0800a1e 	bne	r22,r2,21128 <_strtol_r+0xd8>
   21100:	00004b06 	br	21230 <_strtol_r+0x1e0>
   21104:	00800c04 	movi	r2,48
   21108:	9080471e 	bne	r18,r2,21228 <_strtol_r+0x1d8>
   2110c:	80800003 	ldbu	r2,0(r16)
   21110:	00c01604 	movi	r3,88
   21114:	108037cc 	andi	r2,r2,223
   21118:	10c03f1e 	bne	r2,r3,21218 <_strtol_r+0x1c8>
   2111c:	84800043 	ldbu	r18,1(r16)
   21120:	05800404 	movi	r22,16
   21124:	84000084 	addi	r16,r16,2
   21128:	04600034 	movhi	r17,32768
   2112c:	8c7fffc4 	addi	r17,r17,-1
   21130:	bc63883a 	add	r17,r23,r17
   21134:	8809883a 	mov	r4,r17
   21138:	b00b883a 	mov	r5,r22
   2113c:	001d7b40 	call	1d7b4 <__umodsi3>
   21140:	8809883a 	mov	r4,r17
   21144:	b00b883a 	mov	r5,r22
   21148:	d8800015 	stw	r2,0(sp)
   2114c:	001d7a40 	call	1d7a4 <__udivsi3>
   21150:	d9800017 	ldw	r6,0(sp)
   21154:	0015883a 	mov	r10,zero
   21158:	0007883a 	mov	r3,zero
   2115c:	01000044 	movi	r4,1
   21160:	017fffc4 	movi	r5,-1
   21164:	e48f883a 	add	r7,fp,r18
   21168:	3a400043 	ldbu	r9,1(r7)
   2116c:	49c0010c 	andi	r7,r9,4
   21170:	38000226 	beq	r7,zero,2117c <_strtol_r+0x12c>
   21174:	923ff404 	addi	r8,r18,-48
   21178:	00000706 	br	21198 <_strtol_r+0x148>
   2117c:	4a4000cc 	andi	r9,r9,3
   21180:	48001226 	beq	r9,zero,211cc <_strtol_r+0x17c>
   21184:	49000226 	beq	r9,r4,21190 <_strtol_r+0x140>
   21188:	024015c4 	movi	r9,87
   2118c:	00000106 	br	21194 <_strtol_r+0x144>
   21190:	02400dc4 	movi	r9,55
   21194:	9251c83a 	sub	r8,r18,r9
   21198:	45800c0e 	bge	r8,r22,211cc <_strtol_r+0x17c>
   2119c:	51400826 	beq	r10,r5,211c0 <_strtol_r+0x170>
   211a0:	10c00636 	bltu	r2,r3,211bc <_strtol_r+0x16c>
   211a4:	1880011e 	bne	r3,r2,211ac <_strtol_r+0x15c>
   211a8:	32000416 	blt	r6,r8,211bc <_strtol_r+0x16c>
   211ac:	1d87383a 	mul	r3,r3,r22
   211b0:	02800044 	movi	r10,1
   211b4:	40c7883a 	add	r3,r8,r3
   211b8:	00000106 	br	211c0 <_strtol_r+0x170>
   211bc:	02bfffc4 	movi	r10,-1
   211c0:	84800003 	ldbu	r18,0(r16)
   211c4:	84000044 	addi	r16,r16,1
   211c8:	003fe606 	br	21164 <_gp+0xfffef044>
   211cc:	013fffc4 	movi	r4,-1
   211d0:	1805883a 	mov	r2,r3
   211d4:	5100071e 	bne	r10,r4,211f4 <_strtol_r+0x1a4>
   211d8:	00a00034 	movhi	r2,32768
   211dc:	00c00884 	movi	r3,34
   211e0:	1105883a 	add	r2,r2,r4
   211e4:	a0c00015 	stw	r3,0(r20)
   211e8:	b885883a 	add	r2,r23,r2
   211ec:	9800051e 	bne	r19,zero,21204 <_strtol_r+0x1b4>
   211f0:	00001206 	br	2123c <_strtol_r+0x1ec>
   211f4:	b8000126 	beq	r23,zero,211fc <_strtol_r+0x1ac>
   211f8:	00c5c83a 	sub	r2,zero,r3
   211fc:	98000f26 	beq	r19,zero,2123c <_strtol_r+0x1ec>
   21200:	50000226 	beq	r10,zero,2120c <_strtol_r+0x1bc>
   21204:	843fffc4 	addi	r16,r16,-1
   21208:	00000106 	br	21210 <_strtol_r+0x1c0>
   2120c:	a821883a 	mov	r16,r21
   21210:	9c000015 	stw	r16,0(r19)
   21214:	00000906 	br	2123c <_strtol_r+0x1ec>
   21218:	04800c04 	movi	r18,48
   2121c:	b03fc21e 	bne	r22,zero,21128 <_gp+0xfffef008>
   21220:	05800204 	movi	r22,8
   21224:	003fc006 	br	21128 <_gp+0xfffef008>
   21228:	05800284 	movi	r22,10
   2122c:	003fbe06 	br	21128 <_gp+0xfffef008>
   21230:	00800c04 	movi	r2,48
   21234:	90bfbc1e 	bne	r18,r2,21128 <_gp+0xfffef008>
   21238:	003fb406 	br	2110c <_gp+0xfffeefec>
   2123c:	dfc00a17 	ldw	ra,40(sp)
   21240:	df000917 	ldw	fp,36(sp)
   21244:	ddc00817 	ldw	r23,32(sp)
   21248:	dd800717 	ldw	r22,28(sp)
   2124c:	dd400617 	ldw	r21,24(sp)
   21250:	dd000517 	ldw	r20,20(sp)
   21254:	dcc00417 	ldw	r19,16(sp)
   21258:	dc800317 	ldw	r18,12(sp)
   2125c:	dc400217 	ldw	r17,8(sp)
   21260:	dc000117 	ldw	r16,4(sp)
   21264:	dec00b04 	addi	sp,sp,44
   21268:	f800283a 	ret

0002126c <strtol>:
   2126c:	2007883a 	mov	r3,r4
   21270:	010000f4 	movhi	r4,3
   21274:	21284c04 	addi	r4,r4,-24272
   21278:	de00012e 	bgeu	sp,et,21280 <strtol+0x14>
   2127c:	003b68fa 	trap	3
   21280:	21000017 	ldw	r4,0(r4)
   21284:	2805883a 	mov	r2,r5
   21288:	300f883a 	mov	r7,r6
   2128c:	180b883a 	mov	r5,r3
   21290:	100d883a 	mov	r6,r2
   21294:	00210501 	jmpi	21050 <_strtol_r>

00021298 <print_repeat>:
   21298:	defffb04 	addi	sp,sp,-20
   2129c:	de00012e 	bgeu	sp,et,212a4 <print_repeat+0xc>
   212a0:	003b68fa 	trap	3
   212a4:	dc800315 	stw	r18,12(sp)
   212a8:	dc400215 	stw	r17,8(sp)
   212ac:	dc000115 	stw	r16,4(sp)
   212b0:	dfc00415 	stw	ra,16(sp)
   212b4:	2025883a 	mov	r18,r4
   212b8:	2823883a 	mov	r17,r5
   212bc:	d9800005 	stb	r6,0(sp)
   212c0:	3821883a 	mov	r16,r7
   212c4:	04000a0e 	bge	zero,r16,212f0 <print_repeat+0x58>
   212c8:	88800117 	ldw	r2,4(r17)
   212cc:	9009883a 	mov	r4,r18
   212d0:	880b883a 	mov	r5,r17
   212d4:	d80d883a 	mov	r6,sp
   212d8:	01c00044 	movi	r7,1
   212dc:	103ee83a 	callr	r2
   212e0:	843fffc4 	addi	r16,r16,-1
   212e4:	103ff726 	beq	r2,zero,212c4 <_gp+0xfffef1a4>
   212e8:	00bfffc4 	movi	r2,-1
   212ec:	00000106 	br	212f4 <print_repeat+0x5c>
   212f0:	0005883a 	mov	r2,zero
   212f4:	dfc00417 	ldw	ra,16(sp)
   212f8:	dc800317 	ldw	r18,12(sp)
   212fc:	dc400217 	ldw	r17,8(sp)
   21300:	dc000117 	ldw	r16,4(sp)
   21304:	dec00504 	addi	sp,sp,20
   21308:	f800283a 	ret

0002130c <___svfprintf_internal_r>:
   2130c:	deffe404 	addi	sp,sp,-112
   21310:	d8c00804 	addi	r3,sp,32
   21314:	de00012e 	bgeu	sp,et,2131c <___svfprintf_internal_r+0x10>
   21318:	003b68fa 	trap	3
   2131c:	df001a15 	stw	fp,104(sp)
   21320:	ddc01915 	stw	r23,100(sp)
   21324:	dd801815 	stw	r22,96(sp)
   21328:	dd401715 	stw	r21,92(sp)
   2132c:	dd001615 	stw	r20,88(sp)
   21330:	dcc01515 	stw	r19,84(sp)
   21334:	dc801415 	stw	r18,80(sp)
   21338:	dc401315 	stw	r17,76(sp)
   2133c:	dc001215 	stw	r16,72(sp)
   21340:	dfc01b15 	stw	ra,108(sp)
   21344:	2027883a 	mov	r19,r4
   21348:	2839883a 	mov	fp,r5
   2134c:	382f883a 	mov	r23,r7
   21350:	d9800f15 	stw	r6,60(sp)
   21354:	0021883a 	mov	r16,zero
   21358:	d8000e15 	stw	zero,56(sp)
   2135c:	002d883a 	mov	r22,zero
   21360:	0029883a 	mov	r20,zero
   21364:	0025883a 	mov	r18,zero
   21368:	0023883a 	mov	r17,zero
   2136c:	d8000c15 	stw	zero,48(sp)
   21370:	d8000b15 	stw	zero,44(sp)
   21374:	002b883a 	mov	r21,zero
   21378:	d8c00915 	stw	r3,36(sp)
   2137c:	d8c00f17 	ldw	r3,60(sp)
   21380:	19000003 	ldbu	r4,0(r3)
   21384:	20803fcc 	andi	r2,r4,255
   21388:	1080201c 	xori	r2,r2,128
   2138c:	10bfe004 	addi	r2,r2,-128
   21390:	10012426 	beq	r2,zero,21824 <___svfprintf_internal_r+0x518>
   21394:	00c00044 	movi	r3,1
   21398:	a8c01426 	beq	r21,r3,213ec <___svfprintf_internal_r+0xe0>
   2139c:	1d400216 	blt	r3,r21,213a8 <___svfprintf_internal_r+0x9c>
   213a0:	a8000626 	beq	r21,zero,213bc <___svfprintf_internal_r+0xb0>
   213a4:	00011b06 	br	21814 <___svfprintf_internal_r+0x508>
   213a8:	01400084 	movi	r5,2
   213ac:	a9401d26 	beq	r21,r5,21424 <___svfprintf_internal_r+0x118>
   213b0:	014000c4 	movi	r5,3
   213b4:	a9402926 	beq	r21,r5,2145c <___svfprintf_internal_r+0x150>
   213b8:	00011606 	br	21814 <___svfprintf_internal_r+0x508>
   213bc:	01400944 	movi	r5,37
   213c0:	11410326 	beq	r2,r5,217d0 <___svfprintf_internal_r+0x4c4>
   213c4:	e0800117 	ldw	r2,4(fp)
   213c8:	d9000005 	stb	r4,0(sp)
   213cc:	e00b883a 	mov	r5,fp
   213d0:	9809883a 	mov	r4,r19
   213d4:	d80d883a 	mov	r6,sp
   213d8:	01c00044 	movi	r7,1
   213dc:	103ee83a 	callr	r2
   213e0:	1000de1e 	bne	r2,zero,2175c <___svfprintf_internal_r+0x450>
   213e4:	84000044 	addi	r16,r16,1
   213e8:	00010a06 	br	21814 <___svfprintf_internal_r+0x508>
   213ec:	01400c04 	movi	r5,48
   213f0:	11410026 	beq	r2,r5,217f4 <___svfprintf_internal_r+0x4e8>
   213f4:	01400944 	movi	r5,37
   213f8:	11400a1e 	bne	r2,r5,21424 <___svfprintf_internal_r+0x118>
   213fc:	d8800005 	stb	r2,0(sp)
   21400:	e0800117 	ldw	r2,4(fp)
   21404:	9809883a 	mov	r4,r19
   21408:	e00b883a 	mov	r5,fp
   2140c:	d80d883a 	mov	r6,sp
   21410:	a80f883a 	mov	r7,r21
   21414:	103ee83a 	callr	r2
   21418:	1000d01e 	bne	r2,zero,2175c <___svfprintf_internal_r+0x450>
   2141c:	84000044 	addi	r16,r16,1
   21420:	0000fb06 	br	21810 <___svfprintf_internal_r+0x504>
   21424:	217ff404 	addi	r5,r4,-48
   21428:	29403fcc 	andi	r5,r5,255
   2142c:	00c00244 	movi	r3,9
   21430:	19400736 	bltu	r3,r5,21450 <___svfprintf_internal_r+0x144>
   21434:	00bfffc4 	movi	r2,-1
   21438:	88800226 	beq	r17,r2,21444 <___svfprintf_internal_r+0x138>
   2143c:	8c4002a4 	muli	r17,r17,10
   21440:	00000106 	br	21448 <___svfprintf_internal_r+0x13c>
   21444:	0023883a 	mov	r17,zero
   21448:	8963883a 	add	r17,r17,r5
   2144c:	0000ea06 	br	217f8 <___svfprintf_internal_r+0x4ec>
   21450:	01400b84 	movi	r5,46
   21454:	1140ec26 	beq	r2,r5,21808 <___svfprintf_internal_r+0x4fc>
   21458:	05400084 	movi	r21,2
   2145c:	213ff404 	addi	r4,r4,-48
   21460:	21003fcc 	andi	r4,r4,255
   21464:	00c00244 	movi	r3,9
   21468:	19000736 	bltu	r3,r4,21488 <___svfprintf_internal_r+0x17c>
   2146c:	00bfffc4 	movi	r2,-1
   21470:	90800226 	beq	r18,r2,2147c <___svfprintf_internal_r+0x170>
   21474:	948002a4 	muli	r18,r18,10
   21478:	00000106 	br	21480 <___svfprintf_internal_r+0x174>
   2147c:	0025883a 	mov	r18,zero
   21480:	9125883a 	add	r18,r18,r4
   21484:	0000e306 	br	21814 <___svfprintf_internal_r+0x508>
   21488:	00c01b04 	movi	r3,108
   2148c:	10c0dc26 	beq	r2,r3,21800 <___svfprintf_internal_r+0x4f4>
   21490:	013fffc4 	movi	r4,-1
   21494:	91000226 	beq	r18,r4,214a0 <___svfprintf_internal_r+0x194>
   21498:	d8000b15 	stw	zero,44(sp)
   2149c:	00000106 	br	214a4 <___svfprintf_internal_r+0x198>
   214a0:	04800044 	movi	r18,1
   214a4:	01001a44 	movi	r4,105
   214a8:	11001626 	beq	r2,r4,21504 <___svfprintf_internal_r+0x1f8>
   214ac:	20800916 	blt	r4,r2,214d4 <___svfprintf_internal_r+0x1c8>
   214b0:	010018c4 	movi	r4,99
   214b4:	11009226 	beq	r2,r4,21700 <___svfprintf_internal_r+0x3f4>
   214b8:	01001904 	movi	r4,100
   214bc:	11001126 	beq	r2,r4,21504 <___svfprintf_internal_r+0x1f8>
   214c0:	01001604 	movi	r4,88
   214c4:	1100d21e 	bne	r2,r4,21810 <___svfprintf_internal_r+0x504>
   214c8:	00c00044 	movi	r3,1
   214cc:	d8c00e15 	stw	r3,56(sp)
   214d0:	00001406 	br	21524 <___svfprintf_internal_r+0x218>
   214d4:	01001cc4 	movi	r4,115
   214d8:	1100a226 	beq	r2,r4,21764 <___svfprintf_internal_r+0x458>
   214dc:	20800416 	blt	r4,r2,214f0 <___svfprintf_internal_r+0x1e4>
   214e0:	01001bc4 	movi	r4,111
   214e4:	1100ca1e 	bne	r2,r4,21810 <___svfprintf_internal_r+0x504>
   214e8:	05000204 	movi	r20,8
   214ec:	00000e06 	br	21528 <___svfprintf_internal_r+0x21c>
   214f0:	01001d44 	movi	r4,117
   214f4:	11000c26 	beq	r2,r4,21528 <___svfprintf_internal_r+0x21c>
   214f8:	01001e04 	movi	r4,120
   214fc:	11000926 	beq	r2,r4,21524 <___svfprintf_internal_r+0x218>
   21500:	0000c306 	br	21810 <___svfprintf_internal_r+0x504>
   21504:	b8800104 	addi	r2,r23,4
   21508:	b0000726 	beq	r22,zero,21528 <___svfprintf_internal_r+0x21c>
   2150c:	d8800d15 	stw	r2,52(sp)
   21510:	bdc00017 	ldw	r23,0(r23)
   21514:	b800080e 	bge	r23,zero,21538 <___svfprintf_internal_r+0x22c>
   21518:	05efc83a 	sub	r23,zero,r23
   2151c:	02400044 	movi	r9,1
   21520:	00000606 	br	2153c <___svfprintf_internal_r+0x230>
   21524:	05000404 	movi	r20,16
   21528:	b8c00104 	addi	r3,r23,4
   2152c:	d8c00d15 	stw	r3,52(sp)
   21530:	bdc00017 	ldw	r23,0(r23)
   21534:	002d883a 	mov	r22,zero
   21538:	0013883a 	mov	r9,zero
   2153c:	002b883a 	mov	r21,zero
   21540:	dd4d883a 	add	r6,sp,r21
   21544:	b8001626 	beq	r23,zero,215a0 <___svfprintf_internal_r+0x294>
   21548:	b809883a 	mov	r4,r23
   2154c:	a00b883a 	mov	r5,r20
   21550:	d9801015 	stw	r6,64(sp)
   21554:	da401115 	stw	r9,68(sp)
   21558:	001d7a40 	call	1d7a4 <__udivsi3>
   2155c:	a089383a 	mul	r4,r20,r2
   21560:	00c00244 	movi	r3,9
   21564:	d9801017 	ldw	r6,64(sp)
   21568:	b92fc83a 	sub	r23,r23,r4
   2156c:	da401117 	ldw	r9,68(sp)
   21570:	1dc00216 	blt	r3,r23,2157c <___svfprintf_internal_r+0x270>
   21574:	bdc00c04 	addi	r23,r23,48
   21578:	00000506 	br	21590 <___svfprintf_internal_r+0x284>
   2157c:	d8c00e17 	ldw	r3,56(sp)
   21580:	18000226 	beq	r3,zero,2158c <___svfprintf_internal_r+0x280>
   21584:	bdc00dc4 	addi	r23,r23,55
   21588:	00000106 	br	21590 <___svfprintf_internal_r+0x284>
   2158c:	bdc015c4 	addi	r23,r23,87
   21590:	35c00005 	stb	r23,0(r6)
   21594:	ad400044 	addi	r21,r21,1
   21598:	102f883a 	mov	r23,r2
   2159c:	003fe806 	br	21540 <_gp+0xfffef420>
   215a0:	36c7c83a 	sub	r3,r6,sp
   215a4:	d8c00a15 	stw	r3,40(sp)
   215a8:	90c5c83a 	sub	r2,r18,r3
   215ac:	302f883a 	mov	r23,r6
   215b0:	00800e0e 	bge	zero,r2,215ec <___svfprintf_internal_r+0x2e0>
   215b4:	302b883a 	mov	r21,r6
   215b8:	3085883a 	add	r2,r6,r2
   215bc:	01400c04 	movi	r5,48
   215c0:	d8c00917 	ldw	r3,36(sp)
   215c4:	a809883a 	mov	r4,r21
   215c8:	a8c0052e 	bgeu	r21,r3,215e0 <___svfprintf_internal_r+0x2d4>
   215cc:	ad400044 	addi	r21,r21,1
   215d0:	21400005 	stb	r5,0(r4)
   215d4:	a82f883a 	mov	r23,r21
   215d8:	a8bff91e 	bne	r21,r2,215c0 <_gp+0xfffef4a0>
   215dc:	00000106 	br	215e4 <___svfprintf_internal_r+0x2d8>
   215e0:	a82f883a 	mov	r23,r21
   215e4:	aeebc83a 	sub	r21,r21,sp
   215e8:	dd400a15 	stw	r21,40(sp)
   215ec:	d8c00a17 	ldw	r3,40(sp)
   215f0:	1a51883a 	add	r8,r3,r9
   215f4:	d8c00b17 	ldw	r3,44(sp)
   215f8:	8a2bc83a 	sub	r21,r17,r8
   215fc:	18001726 	beq	r3,zero,2165c <___svfprintf_internal_r+0x350>
   21600:	48000a26 	beq	r9,zero,2162c <___svfprintf_internal_r+0x320>
   21604:	00800b44 	movi	r2,45
   21608:	d8800805 	stb	r2,32(sp)
   2160c:	e0800117 	ldw	r2,4(fp)
   21610:	9809883a 	mov	r4,r19
   21614:	e00b883a 	mov	r5,fp
   21618:	d9800804 	addi	r6,sp,32
   2161c:	01c00044 	movi	r7,1
   21620:	103ee83a 	callr	r2
   21624:	10004d1e 	bne	r2,zero,2175c <___svfprintf_internal_r+0x450>
   21628:	84000044 	addi	r16,r16,1
   2162c:	0540070e 	bge	zero,r21,2164c <___svfprintf_internal_r+0x340>
   21630:	9809883a 	mov	r4,r19
   21634:	e00b883a 	mov	r5,fp
   21638:	01800c04 	movi	r6,48
   2163c:	a80f883a 	mov	r7,r21
   21640:	00212980 	call	21298 <print_repeat>
   21644:	1000451e 	bne	r2,zero,2175c <___svfprintf_internal_r+0x450>
   21648:	8561883a 	add	r16,r16,r21
   2164c:	d8c00a17 	ldw	r3,40(sp)
   21650:	b811883a 	mov	r8,r23
   21654:	1debc83a 	sub	r21,r3,r23
   21658:	00002206 	br	216e4 <___svfprintf_internal_r+0x3d8>
   2165c:	0540090e 	bge	zero,r21,21684 <___svfprintf_internal_r+0x378>
   21660:	9809883a 	mov	r4,r19
   21664:	e00b883a 	mov	r5,fp
   21668:	01800804 	movi	r6,32
   2166c:	a80f883a 	mov	r7,r21
   21670:	da401115 	stw	r9,68(sp)
   21674:	00212980 	call	21298 <print_repeat>
   21678:	da401117 	ldw	r9,68(sp)
   2167c:	1000371e 	bne	r2,zero,2175c <___svfprintf_internal_r+0x450>
   21680:	8561883a 	add	r16,r16,r21
   21684:	483ff126 	beq	r9,zero,2164c <_gp+0xfffef52c>
   21688:	00800b44 	movi	r2,45
   2168c:	d8800805 	stb	r2,32(sp)
   21690:	e0800117 	ldw	r2,4(fp)
   21694:	9809883a 	mov	r4,r19
   21698:	e00b883a 	mov	r5,fp
   2169c:	d9800804 	addi	r6,sp,32
   216a0:	01c00044 	movi	r7,1
   216a4:	103ee83a 	callr	r2
   216a8:	10002c1e 	bne	r2,zero,2175c <___svfprintf_internal_r+0x450>
   216ac:	84000044 	addi	r16,r16,1
   216b0:	003fe606 	br	2164c <_gp+0xfffef52c>
   216b4:	423fffc4 	addi	r8,r8,-1
   216b8:	40800003 	ldbu	r2,0(r8)
   216bc:	9809883a 	mov	r4,r19
   216c0:	e00b883a 	mov	r5,fp
   216c4:	d8800805 	stb	r2,32(sp)
   216c8:	e0800117 	ldw	r2,4(fp)
   216cc:	d9800804 	addi	r6,sp,32
   216d0:	da001015 	stw	r8,64(sp)
   216d4:	01c00044 	movi	r7,1
   216d8:	103ee83a 	callr	r2
   216dc:	da001017 	ldw	r8,64(sp)
   216e0:	10001e1e 	bne	r2,zero,2175c <___svfprintf_internal_r+0x450>
   216e4:	8205c83a 	sub	r2,r16,r8
   216e8:	4549883a 	add	r4,r8,r21
   216ec:	b885883a 	add	r2,r23,r2
   216f0:	013ff016 	blt	zero,r4,216b4 <_gp+0xfffef594>
   216f4:	1021883a 	mov	r16,r2
   216f8:	ddc00d17 	ldw	r23,52(sp)
   216fc:	00004406 	br	21810 <___svfprintf_internal_r+0x504>
   21700:	00800044 	movi	r2,1
   21704:	1440080e 	bge	r2,r17,21728 <___svfprintf_internal_r+0x41c>
   21708:	8d7fffc4 	addi	r21,r17,-1
   2170c:	9809883a 	mov	r4,r19
   21710:	e00b883a 	mov	r5,fp
   21714:	01800804 	movi	r6,32
   21718:	a80f883a 	mov	r7,r21
   2171c:	00212980 	call	21298 <print_repeat>
   21720:	10000e1e 	bne	r2,zero,2175c <___svfprintf_internal_r+0x450>
   21724:	8561883a 	add	r16,r16,r21
   21728:	b8800017 	ldw	r2,0(r23)
   2172c:	9809883a 	mov	r4,r19
   21730:	e00b883a 	mov	r5,fp
   21734:	d8800005 	stb	r2,0(sp)
   21738:	e0800117 	ldw	r2,4(fp)
   2173c:	d80d883a 	mov	r6,sp
   21740:	01c00044 	movi	r7,1
   21744:	bd400104 	addi	r21,r23,4
   21748:	103ee83a 	callr	r2
   2174c:	1000031e 	bne	r2,zero,2175c <___svfprintf_internal_r+0x450>
   21750:	84000044 	addi	r16,r16,1
   21754:	a82f883a 	mov	r23,r21
   21758:	00002d06 	br	21810 <___svfprintf_internal_r+0x504>
   2175c:	00bfffc4 	movi	r2,-1
   21760:	00003106 	br	21828 <___svfprintf_internal_r+0x51c>
   21764:	bd400017 	ldw	r21,0(r23)
   21768:	b8c00104 	addi	r3,r23,4
   2176c:	d8c00a15 	stw	r3,40(sp)
   21770:	a809883a 	mov	r4,r21
   21774:	001fbcc0 	call	1fbcc <strlen>
   21778:	8893c83a 	sub	r9,r17,r2
   2177c:	102f883a 	mov	r23,r2
   21780:	0240090e 	bge	zero,r9,217a8 <___svfprintf_internal_r+0x49c>
   21784:	480f883a 	mov	r7,r9
   21788:	9809883a 	mov	r4,r19
   2178c:	e00b883a 	mov	r5,fp
   21790:	01800804 	movi	r6,32
   21794:	da401115 	stw	r9,68(sp)
   21798:	00212980 	call	21298 <print_repeat>
   2179c:	da401117 	ldw	r9,68(sp)
   217a0:	103fee1e 	bne	r2,zero,2175c <_gp+0xfffef63c>
   217a4:	8261883a 	add	r16,r16,r9
   217a8:	e0800117 	ldw	r2,4(fp)
   217ac:	9809883a 	mov	r4,r19
   217b0:	e00b883a 	mov	r5,fp
   217b4:	a80d883a 	mov	r6,r21
   217b8:	b80f883a 	mov	r7,r23
   217bc:	103ee83a 	callr	r2
   217c0:	103fe61e 	bne	r2,zero,2175c <_gp+0xfffef63c>
   217c4:	85e1883a 	add	r16,r16,r23
   217c8:	ddc00a17 	ldw	r23,40(sp)
   217cc:	00001006 	br	21810 <___svfprintf_internal_r+0x504>
   217d0:	05800044 	movi	r22,1
   217d4:	04bfffc4 	movi	r18,-1
   217d8:	d8000e15 	stw	zero,56(sp)
   217dc:	05000284 	movi	r20,10
   217e0:	9023883a 	mov	r17,r18
   217e4:	d8000c15 	stw	zero,48(sp)
   217e8:	d8000b15 	stw	zero,44(sp)
   217ec:	b02b883a 	mov	r21,r22
   217f0:	00000806 	br	21814 <___svfprintf_internal_r+0x508>
   217f4:	dd400b15 	stw	r21,44(sp)
   217f8:	05400084 	movi	r21,2
   217fc:	00000506 	br	21814 <___svfprintf_internal_r+0x508>
   21800:	00c00044 	movi	r3,1
   21804:	d8c00c15 	stw	r3,48(sp)
   21808:	054000c4 	movi	r21,3
   2180c:	00000106 	br	21814 <___svfprintf_internal_r+0x508>
   21810:	002b883a 	mov	r21,zero
   21814:	d8c00f17 	ldw	r3,60(sp)
   21818:	18c00044 	addi	r3,r3,1
   2181c:	d8c00f15 	stw	r3,60(sp)
   21820:	003ed606 	br	2137c <_gp+0xfffef25c>
   21824:	8005883a 	mov	r2,r16
   21828:	dfc01b17 	ldw	ra,108(sp)
   2182c:	df001a17 	ldw	fp,104(sp)
   21830:	ddc01917 	ldw	r23,100(sp)
   21834:	dd801817 	ldw	r22,96(sp)
   21838:	dd401717 	ldw	r21,92(sp)
   2183c:	dd001617 	ldw	r20,88(sp)
   21840:	dcc01517 	ldw	r19,84(sp)
   21844:	dc801417 	ldw	r18,80(sp)
   21848:	dc401317 	ldw	r17,76(sp)
   2184c:	dc001217 	ldw	r16,72(sp)
   21850:	dec01c04 	addi	sp,sp,112
   21854:	f800283a 	ret

00021858 <__vfprintf_internal_unused>:
   21858:	2007883a 	mov	r3,r4
   2185c:	010000f4 	movhi	r4,3
   21860:	21284c04 	addi	r4,r4,-24272
   21864:	de00012e 	bgeu	sp,et,2186c <__vfprintf_internal_unused+0x14>
   21868:	003b68fa 	trap	3
   2186c:	21000017 	ldw	r4,0(r4)
   21870:	2805883a 	mov	r2,r5
   21874:	300f883a 	mov	r7,r6
   21878:	180b883a 	mov	r5,r3
   2187c:	100d883a 	mov	r6,r2
   21880:	002130c1 	jmpi	2130c <___svfprintf_internal_r>

00021884 <print_repeat>:
   21884:	defffb04 	addi	sp,sp,-20
   21888:	de00012e 	bgeu	sp,et,21890 <print_repeat+0xc>
   2188c:	003b68fa 	trap	3
   21890:	dc800315 	stw	r18,12(sp)
   21894:	dc400215 	stw	r17,8(sp)
   21898:	dc000115 	stw	r16,4(sp)
   2189c:	dfc00415 	stw	ra,16(sp)
   218a0:	2025883a 	mov	r18,r4
   218a4:	2823883a 	mov	r17,r5
   218a8:	d9800005 	stb	r6,0(sp)
   218ac:	3821883a 	mov	r16,r7
   218b0:	04000a0e 	bge	zero,r16,218dc <print_repeat+0x58>
   218b4:	88800117 	ldw	r2,4(r17)
   218b8:	9009883a 	mov	r4,r18
   218bc:	880b883a 	mov	r5,r17
   218c0:	d80d883a 	mov	r6,sp
   218c4:	01c00044 	movi	r7,1
   218c8:	103ee83a 	callr	r2
   218cc:	843fffc4 	addi	r16,r16,-1
   218d0:	103ff726 	beq	r2,zero,218b0 <_gp+0xfffef790>
   218d4:	00bfffc4 	movi	r2,-1
   218d8:	00000106 	br	218e0 <print_repeat+0x5c>
   218dc:	0005883a 	mov	r2,zero
   218e0:	dfc00417 	ldw	ra,16(sp)
   218e4:	dc800317 	ldw	r18,12(sp)
   218e8:	dc400217 	ldw	r17,8(sp)
   218ec:	dc000117 	ldw	r16,4(sp)
   218f0:	dec00504 	addi	sp,sp,20
   218f4:	f800283a 	ret

000218f8 <___vfprintf_internal_r>:
   218f8:	deffe404 	addi	sp,sp,-112
   218fc:	d8c00804 	addi	r3,sp,32
   21900:	de00012e 	bgeu	sp,et,21908 <___vfprintf_internal_r+0x10>
   21904:	003b68fa 	trap	3
   21908:	df001a15 	stw	fp,104(sp)
   2190c:	ddc01915 	stw	r23,100(sp)
   21910:	dd801815 	stw	r22,96(sp)
   21914:	dd401715 	stw	r21,92(sp)
   21918:	dd001615 	stw	r20,88(sp)
   2191c:	dcc01515 	stw	r19,84(sp)
   21920:	dc801415 	stw	r18,80(sp)
   21924:	dc401315 	stw	r17,76(sp)
   21928:	dc001215 	stw	r16,72(sp)
   2192c:	dfc01b15 	stw	ra,108(sp)
   21930:	2027883a 	mov	r19,r4
   21934:	2839883a 	mov	fp,r5
   21938:	382f883a 	mov	r23,r7
   2193c:	d9800f15 	stw	r6,60(sp)
   21940:	0021883a 	mov	r16,zero
   21944:	d8000e15 	stw	zero,56(sp)
   21948:	002d883a 	mov	r22,zero
   2194c:	0029883a 	mov	r20,zero
   21950:	0025883a 	mov	r18,zero
   21954:	0023883a 	mov	r17,zero
   21958:	d8000c15 	stw	zero,48(sp)
   2195c:	d8000b15 	stw	zero,44(sp)
   21960:	002b883a 	mov	r21,zero
   21964:	d8c00915 	stw	r3,36(sp)
   21968:	d8c00f17 	ldw	r3,60(sp)
   2196c:	19000003 	ldbu	r4,0(r3)
   21970:	20803fcc 	andi	r2,r4,255
   21974:	1080201c 	xori	r2,r2,128
   21978:	10bfe004 	addi	r2,r2,-128
   2197c:	10012426 	beq	r2,zero,21e10 <___vfprintf_internal_r+0x518>
   21980:	00c00044 	movi	r3,1
   21984:	a8c01426 	beq	r21,r3,219d8 <___vfprintf_internal_r+0xe0>
   21988:	1d400216 	blt	r3,r21,21994 <___vfprintf_internal_r+0x9c>
   2198c:	a8000626 	beq	r21,zero,219a8 <___vfprintf_internal_r+0xb0>
   21990:	00011b06 	br	21e00 <___vfprintf_internal_r+0x508>
   21994:	01400084 	movi	r5,2
   21998:	a9401d26 	beq	r21,r5,21a10 <___vfprintf_internal_r+0x118>
   2199c:	014000c4 	movi	r5,3
   219a0:	a9402926 	beq	r21,r5,21a48 <___vfprintf_internal_r+0x150>
   219a4:	00011606 	br	21e00 <___vfprintf_internal_r+0x508>
   219a8:	01400944 	movi	r5,37
   219ac:	11410326 	beq	r2,r5,21dbc <___vfprintf_internal_r+0x4c4>
   219b0:	e0800117 	ldw	r2,4(fp)
   219b4:	d9000005 	stb	r4,0(sp)
   219b8:	e00b883a 	mov	r5,fp
   219bc:	9809883a 	mov	r4,r19
   219c0:	d80d883a 	mov	r6,sp
   219c4:	01c00044 	movi	r7,1
   219c8:	103ee83a 	callr	r2
   219cc:	1000de1e 	bne	r2,zero,21d48 <___vfprintf_internal_r+0x450>
   219d0:	84000044 	addi	r16,r16,1
   219d4:	00010a06 	br	21e00 <___vfprintf_internal_r+0x508>
   219d8:	01400c04 	movi	r5,48
   219dc:	11410026 	beq	r2,r5,21de0 <___vfprintf_internal_r+0x4e8>
   219e0:	01400944 	movi	r5,37
   219e4:	11400a1e 	bne	r2,r5,21a10 <___vfprintf_internal_r+0x118>
   219e8:	d8800005 	stb	r2,0(sp)
   219ec:	e0800117 	ldw	r2,4(fp)
   219f0:	9809883a 	mov	r4,r19
   219f4:	e00b883a 	mov	r5,fp
   219f8:	d80d883a 	mov	r6,sp
   219fc:	a80f883a 	mov	r7,r21
   21a00:	103ee83a 	callr	r2
   21a04:	1000d01e 	bne	r2,zero,21d48 <___vfprintf_internal_r+0x450>
   21a08:	84000044 	addi	r16,r16,1
   21a0c:	0000fb06 	br	21dfc <___vfprintf_internal_r+0x504>
   21a10:	217ff404 	addi	r5,r4,-48
   21a14:	29403fcc 	andi	r5,r5,255
   21a18:	00c00244 	movi	r3,9
   21a1c:	19400736 	bltu	r3,r5,21a3c <___vfprintf_internal_r+0x144>
   21a20:	00bfffc4 	movi	r2,-1
   21a24:	88800226 	beq	r17,r2,21a30 <___vfprintf_internal_r+0x138>
   21a28:	8c4002a4 	muli	r17,r17,10
   21a2c:	00000106 	br	21a34 <___vfprintf_internal_r+0x13c>
   21a30:	0023883a 	mov	r17,zero
   21a34:	8963883a 	add	r17,r17,r5
   21a38:	0000ea06 	br	21de4 <___vfprintf_internal_r+0x4ec>
   21a3c:	01400b84 	movi	r5,46
   21a40:	1140ec26 	beq	r2,r5,21df4 <___vfprintf_internal_r+0x4fc>
   21a44:	05400084 	movi	r21,2
   21a48:	213ff404 	addi	r4,r4,-48
   21a4c:	21003fcc 	andi	r4,r4,255
   21a50:	00c00244 	movi	r3,9
   21a54:	19000736 	bltu	r3,r4,21a74 <___vfprintf_internal_r+0x17c>
   21a58:	00bfffc4 	movi	r2,-1
   21a5c:	90800226 	beq	r18,r2,21a68 <___vfprintf_internal_r+0x170>
   21a60:	948002a4 	muli	r18,r18,10
   21a64:	00000106 	br	21a6c <___vfprintf_internal_r+0x174>
   21a68:	0025883a 	mov	r18,zero
   21a6c:	9125883a 	add	r18,r18,r4
   21a70:	0000e306 	br	21e00 <___vfprintf_internal_r+0x508>
   21a74:	00c01b04 	movi	r3,108
   21a78:	10c0dc26 	beq	r2,r3,21dec <___vfprintf_internal_r+0x4f4>
   21a7c:	013fffc4 	movi	r4,-1
   21a80:	91000226 	beq	r18,r4,21a8c <___vfprintf_internal_r+0x194>
   21a84:	d8000b15 	stw	zero,44(sp)
   21a88:	00000106 	br	21a90 <___vfprintf_internal_r+0x198>
   21a8c:	04800044 	movi	r18,1
   21a90:	01001a44 	movi	r4,105
   21a94:	11001626 	beq	r2,r4,21af0 <___vfprintf_internal_r+0x1f8>
   21a98:	20800916 	blt	r4,r2,21ac0 <___vfprintf_internal_r+0x1c8>
   21a9c:	010018c4 	movi	r4,99
   21aa0:	11009226 	beq	r2,r4,21cec <___vfprintf_internal_r+0x3f4>
   21aa4:	01001904 	movi	r4,100
   21aa8:	11001126 	beq	r2,r4,21af0 <___vfprintf_internal_r+0x1f8>
   21aac:	01001604 	movi	r4,88
   21ab0:	1100d21e 	bne	r2,r4,21dfc <___vfprintf_internal_r+0x504>
   21ab4:	00c00044 	movi	r3,1
   21ab8:	d8c00e15 	stw	r3,56(sp)
   21abc:	00001406 	br	21b10 <___vfprintf_internal_r+0x218>
   21ac0:	01001cc4 	movi	r4,115
   21ac4:	1100a226 	beq	r2,r4,21d50 <___vfprintf_internal_r+0x458>
   21ac8:	20800416 	blt	r4,r2,21adc <___vfprintf_internal_r+0x1e4>
   21acc:	01001bc4 	movi	r4,111
   21ad0:	1100ca1e 	bne	r2,r4,21dfc <___vfprintf_internal_r+0x504>
   21ad4:	05000204 	movi	r20,8
   21ad8:	00000e06 	br	21b14 <___vfprintf_internal_r+0x21c>
   21adc:	01001d44 	movi	r4,117
   21ae0:	11000c26 	beq	r2,r4,21b14 <___vfprintf_internal_r+0x21c>
   21ae4:	01001e04 	movi	r4,120
   21ae8:	11000926 	beq	r2,r4,21b10 <___vfprintf_internal_r+0x218>
   21aec:	0000c306 	br	21dfc <___vfprintf_internal_r+0x504>
   21af0:	b8800104 	addi	r2,r23,4
   21af4:	b0000726 	beq	r22,zero,21b14 <___vfprintf_internal_r+0x21c>
   21af8:	d8800d15 	stw	r2,52(sp)
   21afc:	bdc00017 	ldw	r23,0(r23)
   21b00:	b800080e 	bge	r23,zero,21b24 <___vfprintf_internal_r+0x22c>
   21b04:	05efc83a 	sub	r23,zero,r23
   21b08:	02400044 	movi	r9,1
   21b0c:	00000606 	br	21b28 <___vfprintf_internal_r+0x230>
   21b10:	05000404 	movi	r20,16
   21b14:	b8c00104 	addi	r3,r23,4
   21b18:	d8c00d15 	stw	r3,52(sp)
   21b1c:	bdc00017 	ldw	r23,0(r23)
   21b20:	002d883a 	mov	r22,zero
   21b24:	0013883a 	mov	r9,zero
   21b28:	002b883a 	mov	r21,zero
   21b2c:	dd4d883a 	add	r6,sp,r21
   21b30:	b8001626 	beq	r23,zero,21b8c <___vfprintf_internal_r+0x294>
   21b34:	b809883a 	mov	r4,r23
   21b38:	a00b883a 	mov	r5,r20
   21b3c:	d9801015 	stw	r6,64(sp)
   21b40:	da401115 	stw	r9,68(sp)
   21b44:	001d7a40 	call	1d7a4 <__udivsi3>
   21b48:	a089383a 	mul	r4,r20,r2
   21b4c:	00c00244 	movi	r3,9
   21b50:	d9801017 	ldw	r6,64(sp)
   21b54:	b92fc83a 	sub	r23,r23,r4
   21b58:	da401117 	ldw	r9,68(sp)
   21b5c:	1dc00216 	blt	r3,r23,21b68 <___vfprintf_internal_r+0x270>
   21b60:	bdc00c04 	addi	r23,r23,48
   21b64:	00000506 	br	21b7c <___vfprintf_internal_r+0x284>
   21b68:	d8c00e17 	ldw	r3,56(sp)
   21b6c:	18000226 	beq	r3,zero,21b78 <___vfprintf_internal_r+0x280>
   21b70:	bdc00dc4 	addi	r23,r23,55
   21b74:	00000106 	br	21b7c <___vfprintf_internal_r+0x284>
   21b78:	bdc015c4 	addi	r23,r23,87
   21b7c:	35c00005 	stb	r23,0(r6)
   21b80:	ad400044 	addi	r21,r21,1
   21b84:	102f883a 	mov	r23,r2
   21b88:	003fe806 	br	21b2c <_gp+0xfffefa0c>
   21b8c:	36c7c83a 	sub	r3,r6,sp
   21b90:	d8c00a15 	stw	r3,40(sp)
   21b94:	90c5c83a 	sub	r2,r18,r3
   21b98:	302f883a 	mov	r23,r6
   21b9c:	00800e0e 	bge	zero,r2,21bd8 <___vfprintf_internal_r+0x2e0>
   21ba0:	302b883a 	mov	r21,r6
   21ba4:	3085883a 	add	r2,r6,r2
   21ba8:	01400c04 	movi	r5,48
   21bac:	d8c00917 	ldw	r3,36(sp)
   21bb0:	a809883a 	mov	r4,r21
   21bb4:	a8c0052e 	bgeu	r21,r3,21bcc <___vfprintf_internal_r+0x2d4>
   21bb8:	ad400044 	addi	r21,r21,1
   21bbc:	21400005 	stb	r5,0(r4)
   21bc0:	a82f883a 	mov	r23,r21
   21bc4:	a8bff91e 	bne	r21,r2,21bac <_gp+0xfffefa8c>
   21bc8:	00000106 	br	21bd0 <___vfprintf_internal_r+0x2d8>
   21bcc:	a82f883a 	mov	r23,r21
   21bd0:	aeebc83a 	sub	r21,r21,sp
   21bd4:	dd400a15 	stw	r21,40(sp)
   21bd8:	d8c00a17 	ldw	r3,40(sp)
   21bdc:	1a51883a 	add	r8,r3,r9
   21be0:	d8c00b17 	ldw	r3,44(sp)
   21be4:	8a2bc83a 	sub	r21,r17,r8
   21be8:	18001726 	beq	r3,zero,21c48 <___vfprintf_internal_r+0x350>
   21bec:	48000a26 	beq	r9,zero,21c18 <___vfprintf_internal_r+0x320>
   21bf0:	00800b44 	movi	r2,45
   21bf4:	d8800805 	stb	r2,32(sp)
   21bf8:	e0800117 	ldw	r2,4(fp)
   21bfc:	9809883a 	mov	r4,r19
   21c00:	e00b883a 	mov	r5,fp
   21c04:	d9800804 	addi	r6,sp,32
   21c08:	01c00044 	movi	r7,1
   21c0c:	103ee83a 	callr	r2
   21c10:	10004d1e 	bne	r2,zero,21d48 <___vfprintf_internal_r+0x450>
   21c14:	84000044 	addi	r16,r16,1
   21c18:	0540070e 	bge	zero,r21,21c38 <___vfprintf_internal_r+0x340>
   21c1c:	9809883a 	mov	r4,r19
   21c20:	e00b883a 	mov	r5,fp
   21c24:	01800c04 	movi	r6,48
   21c28:	a80f883a 	mov	r7,r21
   21c2c:	00218840 	call	21884 <print_repeat>
   21c30:	1000451e 	bne	r2,zero,21d48 <___vfprintf_internal_r+0x450>
   21c34:	8561883a 	add	r16,r16,r21
   21c38:	d8c00a17 	ldw	r3,40(sp)
   21c3c:	b811883a 	mov	r8,r23
   21c40:	1debc83a 	sub	r21,r3,r23
   21c44:	00002206 	br	21cd0 <___vfprintf_internal_r+0x3d8>
   21c48:	0540090e 	bge	zero,r21,21c70 <___vfprintf_internal_r+0x378>
   21c4c:	9809883a 	mov	r4,r19
   21c50:	e00b883a 	mov	r5,fp
   21c54:	01800804 	movi	r6,32
   21c58:	a80f883a 	mov	r7,r21
   21c5c:	da401115 	stw	r9,68(sp)
   21c60:	00218840 	call	21884 <print_repeat>
   21c64:	da401117 	ldw	r9,68(sp)
   21c68:	1000371e 	bne	r2,zero,21d48 <___vfprintf_internal_r+0x450>
   21c6c:	8561883a 	add	r16,r16,r21
   21c70:	483ff126 	beq	r9,zero,21c38 <_gp+0xfffefb18>
   21c74:	00800b44 	movi	r2,45
   21c78:	d8800805 	stb	r2,32(sp)
   21c7c:	e0800117 	ldw	r2,4(fp)
   21c80:	9809883a 	mov	r4,r19
   21c84:	e00b883a 	mov	r5,fp
   21c88:	d9800804 	addi	r6,sp,32
   21c8c:	01c00044 	movi	r7,1
   21c90:	103ee83a 	callr	r2
   21c94:	10002c1e 	bne	r2,zero,21d48 <___vfprintf_internal_r+0x450>
   21c98:	84000044 	addi	r16,r16,1
   21c9c:	003fe606 	br	21c38 <_gp+0xfffefb18>
   21ca0:	423fffc4 	addi	r8,r8,-1
   21ca4:	40800003 	ldbu	r2,0(r8)
   21ca8:	9809883a 	mov	r4,r19
   21cac:	e00b883a 	mov	r5,fp
   21cb0:	d8800805 	stb	r2,32(sp)
   21cb4:	e0800117 	ldw	r2,4(fp)
   21cb8:	d9800804 	addi	r6,sp,32
   21cbc:	da001015 	stw	r8,64(sp)
   21cc0:	01c00044 	movi	r7,1
   21cc4:	103ee83a 	callr	r2
   21cc8:	da001017 	ldw	r8,64(sp)
   21ccc:	10001e1e 	bne	r2,zero,21d48 <___vfprintf_internal_r+0x450>
   21cd0:	8205c83a 	sub	r2,r16,r8
   21cd4:	4549883a 	add	r4,r8,r21
   21cd8:	b885883a 	add	r2,r23,r2
   21cdc:	013ff016 	blt	zero,r4,21ca0 <_gp+0xfffefb80>
   21ce0:	1021883a 	mov	r16,r2
   21ce4:	ddc00d17 	ldw	r23,52(sp)
   21ce8:	00004406 	br	21dfc <___vfprintf_internal_r+0x504>
   21cec:	00800044 	movi	r2,1
   21cf0:	1440080e 	bge	r2,r17,21d14 <___vfprintf_internal_r+0x41c>
   21cf4:	8d7fffc4 	addi	r21,r17,-1
   21cf8:	9809883a 	mov	r4,r19
   21cfc:	e00b883a 	mov	r5,fp
   21d00:	01800804 	movi	r6,32
   21d04:	a80f883a 	mov	r7,r21
   21d08:	00218840 	call	21884 <print_repeat>
   21d0c:	10000e1e 	bne	r2,zero,21d48 <___vfprintf_internal_r+0x450>
   21d10:	8561883a 	add	r16,r16,r21
   21d14:	b8800017 	ldw	r2,0(r23)
   21d18:	9809883a 	mov	r4,r19
   21d1c:	e00b883a 	mov	r5,fp
   21d20:	d8800005 	stb	r2,0(sp)
   21d24:	e0800117 	ldw	r2,4(fp)
   21d28:	d80d883a 	mov	r6,sp
   21d2c:	01c00044 	movi	r7,1
   21d30:	bd400104 	addi	r21,r23,4
   21d34:	103ee83a 	callr	r2
   21d38:	1000031e 	bne	r2,zero,21d48 <___vfprintf_internal_r+0x450>
   21d3c:	84000044 	addi	r16,r16,1
   21d40:	a82f883a 	mov	r23,r21
   21d44:	00002d06 	br	21dfc <___vfprintf_internal_r+0x504>
   21d48:	00bfffc4 	movi	r2,-1
   21d4c:	00003106 	br	21e14 <___vfprintf_internal_r+0x51c>
   21d50:	bd400017 	ldw	r21,0(r23)
   21d54:	b8c00104 	addi	r3,r23,4
   21d58:	d8c00a15 	stw	r3,40(sp)
   21d5c:	a809883a 	mov	r4,r21
   21d60:	001fbcc0 	call	1fbcc <strlen>
   21d64:	8893c83a 	sub	r9,r17,r2
   21d68:	102f883a 	mov	r23,r2
   21d6c:	0240090e 	bge	zero,r9,21d94 <___vfprintf_internal_r+0x49c>
   21d70:	480f883a 	mov	r7,r9
   21d74:	9809883a 	mov	r4,r19
   21d78:	e00b883a 	mov	r5,fp
   21d7c:	01800804 	movi	r6,32
   21d80:	da401115 	stw	r9,68(sp)
   21d84:	00218840 	call	21884 <print_repeat>
   21d88:	da401117 	ldw	r9,68(sp)
   21d8c:	103fee1e 	bne	r2,zero,21d48 <_gp+0xfffefc28>
   21d90:	8261883a 	add	r16,r16,r9
   21d94:	e0800117 	ldw	r2,4(fp)
   21d98:	9809883a 	mov	r4,r19
   21d9c:	e00b883a 	mov	r5,fp
   21da0:	a80d883a 	mov	r6,r21
   21da4:	b80f883a 	mov	r7,r23
   21da8:	103ee83a 	callr	r2
   21dac:	103fe61e 	bne	r2,zero,21d48 <_gp+0xfffefc28>
   21db0:	85e1883a 	add	r16,r16,r23
   21db4:	ddc00a17 	ldw	r23,40(sp)
   21db8:	00001006 	br	21dfc <___vfprintf_internal_r+0x504>
   21dbc:	05800044 	movi	r22,1
   21dc0:	04bfffc4 	movi	r18,-1
   21dc4:	d8000e15 	stw	zero,56(sp)
   21dc8:	05000284 	movi	r20,10
   21dcc:	9023883a 	mov	r17,r18
   21dd0:	d8000c15 	stw	zero,48(sp)
   21dd4:	d8000b15 	stw	zero,44(sp)
   21dd8:	b02b883a 	mov	r21,r22
   21ddc:	00000806 	br	21e00 <___vfprintf_internal_r+0x508>
   21de0:	dd400b15 	stw	r21,44(sp)
   21de4:	05400084 	movi	r21,2
   21de8:	00000506 	br	21e00 <___vfprintf_internal_r+0x508>
   21dec:	00c00044 	movi	r3,1
   21df0:	d8c00c15 	stw	r3,48(sp)
   21df4:	054000c4 	movi	r21,3
   21df8:	00000106 	br	21e00 <___vfprintf_internal_r+0x508>
   21dfc:	002b883a 	mov	r21,zero
   21e00:	d8c00f17 	ldw	r3,60(sp)
   21e04:	18c00044 	addi	r3,r3,1
   21e08:	d8c00f15 	stw	r3,60(sp)
   21e0c:	003ed606 	br	21968 <_gp+0xfffef848>
   21e10:	8005883a 	mov	r2,r16
   21e14:	dfc01b17 	ldw	ra,108(sp)
   21e18:	df001a17 	ldw	fp,104(sp)
   21e1c:	ddc01917 	ldw	r23,100(sp)
   21e20:	dd801817 	ldw	r22,96(sp)
   21e24:	dd401717 	ldw	r21,92(sp)
   21e28:	dd001617 	ldw	r20,88(sp)
   21e2c:	dcc01517 	ldw	r19,84(sp)
   21e30:	dc801417 	ldw	r18,80(sp)
   21e34:	dc401317 	ldw	r17,76(sp)
   21e38:	dc001217 	ldw	r16,72(sp)
   21e3c:	dec01c04 	addi	sp,sp,112
   21e40:	f800283a 	ret

00021e44 <__vfprintf_internal>:
   21e44:	2007883a 	mov	r3,r4
   21e48:	010000f4 	movhi	r4,3
   21e4c:	21284c04 	addi	r4,r4,-24272
   21e50:	de00012e 	bgeu	sp,et,21e58 <__vfprintf_internal+0x14>
   21e54:	003b68fa 	trap	3
   21e58:	21000017 	ldw	r4,0(r4)
   21e5c:	2805883a 	mov	r2,r5
   21e60:	300f883a 	mov	r7,r6
   21e64:	180b883a 	mov	r5,r3
   21e68:	100d883a 	mov	r6,r2
   21e6c:	00218f81 	jmpi	218f8 <___vfprintf_internal_r>

00021e70 <__sfvwrite_small_dev>:
   21e70:	defffa04 	addi	sp,sp,-24
   21e74:	de00012e 	bgeu	sp,et,21e7c <__sfvwrite_small_dev+0xc>
   21e78:	003b68fa 	trap	3
   21e7c:	2880000b 	ldhu	r2,0(r5)
   21e80:	dc000015 	stw	r16,0(sp)
   21e84:	dfc00515 	stw	ra,20(sp)
   21e88:	dd000415 	stw	r20,16(sp)
   21e8c:	dcc00315 	stw	r19,12(sp)
   21e90:	dc800215 	stw	r18,8(sp)
   21e94:	dc400115 	stw	r17,4(sp)
   21e98:	1080020c 	andi	r2,r2,8
   21e9c:	2821883a 	mov	r16,r5
   21ea0:	10001726 	beq	r2,zero,21f00 <__sfvwrite_small_dev+0x90>
   21ea4:	2880008f 	ldh	r2,2(r5)
   21ea8:	10001216 	blt	r2,zero,21ef4 <__sfvwrite_small_dev+0x84>
   21eac:	2027883a 	mov	r19,r4
   21eb0:	3025883a 	mov	r18,r6
   21eb4:	3823883a 	mov	r17,r7
   21eb8:	05010004 	movi	r20,1024
   21ebc:	04400b0e 	bge	zero,r17,21eec <__sfvwrite_small_dev+0x7c>
   21ec0:	8140008f 	ldh	r5,2(r16)
   21ec4:	880f883a 	mov	r7,r17
   21ec8:	a440010e 	bge	r20,r17,21ed0 <__sfvwrite_small_dev+0x60>
   21ecc:	01c10004 	movi	r7,1024
   21ed0:	9809883a 	mov	r4,r19
   21ed4:	900d883a 	mov	r6,r18
   21ed8:	0023b740 	call	23b74 <_write_r>
   21edc:	0080050e 	bge	zero,r2,21ef4 <__sfvwrite_small_dev+0x84>
   21ee0:	88a3c83a 	sub	r17,r17,r2
   21ee4:	90a5883a 	add	r18,r18,r2
   21ee8:	003ff406 	br	21ebc <_gp+0xfffefd9c>
   21eec:	0005883a 	mov	r2,zero
   21ef0:	00000406 	br	21f04 <__sfvwrite_small_dev+0x94>
   21ef4:	8080000b 	ldhu	r2,0(r16)
   21ef8:	10801014 	ori	r2,r2,64
   21efc:	8080000d 	sth	r2,0(r16)
   21f00:	00bfffc4 	movi	r2,-1
   21f04:	dfc00517 	ldw	ra,20(sp)
   21f08:	dd000417 	ldw	r20,16(sp)
   21f0c:	dcc00317 	ldw	r19,12(sp)
   21f10:	dc800217 	ldw	r18,8(sp)
   21f14:	dc400117 	ldw	r17,4(sp)
   21f18:	dc000017 	ldw	r16,0(sp)
   21f1c:	dec00604 	addi	sp,sp,24
   21f20:	f800283a 	ret

00021f24 <__sfvwrite_small_str>:
   21f24:	defffd04 	addi	sp,sp,-12
   21f28:	de00012e 	bgeu	sp,et,21f30 <__sfvwrite_small_str+0xc>
   21f2c:	003b68fa 	trap	3
   21f30:	2880000b 	ldhu	r2,0(r5)
   21f34:	dc000015 	stw	r16,0(sp)
   21f38:	dfc00215 	stw	ra,8(sp)
   21f3c:	dc400115 	stw	r17,4(sp)
   21f40:	10c0020c 	andi	r3,r2,8
   21f44:	2821883a 	mov	r16,r5
   21f48:	18001926 	beq	r3,zero,21fb0 <__sfvwrite_small_str+0x8c>
   21f4c:	28c0008f 	ldh	r3,2(r5)
   21f50:	1800150e 	bge	r3,zero,21fa8 <__sfvwrite_small_str+0x84>
   21f54:	10c0800c 	andi	r3,r2,512
   21f58:	18001326 	beq	r3,zero,21fa8 <__sfvwrite_small_str+0x84>
   21f5c:	2c400517 	ldw	r17,20(r5)
   21f60:	89c0030e 	bge	r17,r7,21f70 <__sfvwrite_small_str+0x4c>
   21f64:	10c0200c 	andi	r3,r2,128
   21f68:	18000326 	beq	r3,zero,21f78 <__sfvwrite_small_str+0x54>
   21f6c:	00000e06 	br	21fa8 <__sfvwrite_small_str+0x84>
   21f70:	3c40010e 	bge	r7,r17,21f78 <__sfvwrite_small_str+0x54>
   21f74:	3823883a 	mov	r17,r7
   21f78:	81000417 	ldw	r4,16(r16)
   21f7c:	300b883a 	mov	r5,r6
   21f80:	880d883a 	mov	r6,r17
   21f84:	0022a980 	call	22a98 <memmove>
   21f88:	80800517 	ldw	r2,20(r16)
   21f8c:	1445c83a 	sub	r2,r2,r17
   21f90:	80800515 	stw	r2,20(r16)
   21f94:	80800417 	ldw	r2,16(r16)
   21f98:	1463883a 	add	r17,r2,r17
   21f9c:	84400415 	stw	r17,16(r16)
   21fa0:	0005883a 	mov	r2,zero
   21fa4:	00000306 	br	21fb4 <__sfvwrite_small_str+0x90>
   21fa8:	10801014 	ori	r2,r2,64
   21fac:	8080000d 	sth	r2,0(r16)
   21fb0:	00bfffc4 	movi	r2,-1
   21fb4:	dfc00217 	ldw	ra,8(sp)
   21fb8:	dc400117 	ldw	r17,4(sp)
   21fbc:	dc000017 	ldw	r16,0(sp)
   21fc0:	dec00304 	addi	sp,sp,12
   21fc4:	f800283a 	ret

00021fc8 <rshift>:
   21fc8:	de00012e 	bgeu	sp,et,21fd0 <rshift+0x8>
   21fcc:	003b68fa 	trap	3
   21fd0:	2805d17a 	srai	r2,r5,5
   21fd4:	21800417 	ldw	r6,16(r4)
   21fd8:	22000504 	addi	r8,r4,20
   21fdc:	1180260e 	bge	r2,r6,22078 <rshift+0xb0>
   21fe0:	318d883a 	add	r6,r6,r6
   21fe4:	1085883a 	add	r2,r2,r2
   21fe8:	318d883a 	add	r6,r6,r6
   21fec:	1085883a 	add	r2,r2,r2
   21ff0:	294007cc 	andi	r5,r5,31
   21ff4:	418d883a 	add	r6,r8,r6
   21ff8:	4085883a 	add	r2,r8,r2
   21ffc:	2800021e 	bne	r5,zero,22008 <rshift+0x40>
   22000:	400b883a 	mov	r5,r8
   22004:	00001506 	br	2205c <rshift+0x94>
   22008:	11c00017 	ldw	r7,0(r2)
   2200c:	02800804 	movi	r10,32
   22010:	5155c83a 	sub	r10,r10,r5
   22014:	394ed83a 	srl	r7,r7,r5
   22018:	10800104 	addi	r2,r2,4
   2201c:	4013883a 	mov	r9,r8
   22020:	4807883a 	mov	r3,r9
   22024:	1180092e 	bgeu	r2,r6,2204c <rshift+0x84>
   22028:	10c00017 	ldw	r3,0(r2)
   2202c:	4a400104 	addi	r9,r9,4
   22030:	10800104 	addi	r2,r2,4
   22034:	1a86983a 	sll	r3,r3,r10
   22038:	19ceb03a 	or	r7,r3,r7
   2203c:	49ffff15 	stw	r7,-4(r9)
   22040:	11ffff17 	ldw	r7,-4(r2)
   22044:	394ed83a 	srl	r7,r7,r5
   22048:	003ff506 	br	22020 <_gp+0xfffeff00>
   2204c:	49c00015 	stw	r7,0(r9)
   22050:	38000a26 	beq	r7,zero,2207c <rshift+0xb4>
   22054:	48c00104 	addi	r3,r9,4
   22058:	00000806 	br	2207c <rshift+0xb4>
   2205c:	2807883a 	mov	r3,r5
   22060:	1180062e 	bgeu	r2,r6,2207c <rshift+0xb4>
   22064:	10c00017 	ldw	r3,0(r2)
   22068:	29400104 	addi	r5,r5,4
   2206c:	10800104 	addi	r2,r2,4
   22070:	28ffff15 	stw	r3,-4(r5)
   22074:	003ff906 	br	2205c <_gp+0xfffeff3c>
   22078:	4007883a 	mov	r3,r8
   2207c:	1a07c83a 	sub	r3,r3,r8
   22080:	1807d0ba 	srai	r3,r3,2
   22084:	20c00415 	stw	r3,16(r4)
   22088:	1800011e 	bne	r3,zero,22090 <rshift+0xc8>
   2208c:	20000515 	stw	zero,20(r4)
   22090:	f800283a 	ret

00022094 <__hexdig_fun>:
   22094:	20bff404 	addi	r2,r4,-48
   22098:	10803fcc 	andi	r2,r2,255
   2209c:	00c00244 	movi	r3,9
   220a0:	de00012e 	bgeu	sp,et,220a8 <__hexdig_fun+0x14>
   220a4:	003b68fa 	trap	3
   220a8:	18800236 	bltu	r3,r2,220b4 <__hexdig_fun+0x20>
   220ac:	20bff804 	addi	r2,r4,-32
   220b0:	f800283a 	ret
   220b4:	20bfe7c4 	addi	r2,r4,-97
   220b8:	10803fcc 	andi	r2,r2,255
   220bc:	00c00144 	movi	r3,5
   220c0:	18800236 	bltu	r3,r2,220cc <__hexdig_fun+0x38>
   220c4:	20bfee44 	addi	r2,r4,-71
   220c8:	f800283a 	ret
   220cc:	20bfefc4 	addi	r2,r4,-65
   220d0:	10803fcc 	andi	r2,r2,255
   220d4:	18800236 	bltu	r3,r2,220e0 <__hexdig_fun+0x4c>
   220d8:	20bff644 	addi	r2,r4,-39
   220dc:	f800283a 	ret
   220e0:	0005883a 	mov	r2,zero
   220e4:	f800283a 	ret

000220e8 <__gethex>:
   220e8:	deffee04 	addi	sp,sp,-72
   220ec:	de00012e 	bgeu	sp,et,220f4 <__gethex+0xc>
   220f0:	003b68fa 	trap	3
   220f4:	dfc01115 	stw	ra,68(sp)
   220f8:	df001015 	stw	fp,64(sp)
   220fc:	ddc00f15 	stw	r23,60(sp)
   22100:	2839883a 	mov	fp,r5
   22104:	dd000c15 	stw	r20,48(sp)
   22108:	dcc00b15 	stw	r19,44(sp)
   2210c:	dc800a15 	stw	r18,40(sp)
   22110:	2029883a 	mov	r20,r4
   22114:	3025883a 	mov	r18,r6
   22118:	d9c00215 	stw	r7,8(sp)
   2211c:	dd800e15 	stw	r22,56(sp)
   22120:	dd400d15 	stw	r21,52(sp)
   22124:	dc400915 	stw	r17,36(sp)
   22128:	dc000815 	stw	r16,32(sp)
   2212c:	001963c0 	call	1963c <_localeconv_r>
   22130:	15c00017 	ldw	r23,0(r2)
   22134:	b809883a 	mov	r4,r23
   22138:	001fbcc0 	call	1fbcc <strlen>
   2213c:	1027883a 	mov	r19,r2
   22140:	b885883a 	add	r2,r23,r2
   22144:	10bfffc3 	ldbu	r2,-1(r2)
   22148:	e1000017 	ldw	r4,0(fp)
   2214c:	00ffff84 	movi	r3,-2
   22150:	d8800105 	stb	r2,4(sp)
   22154:	1907c83a 	sub	r3,r3,r4
   22158:	20800084 	addi	r2,r4,2
   2215c:	01800c04 	movi	r6,48
   22160:	1023883a 	mov	r17,r2
   22164:	89000003 	ldbu	r4,0(r17)
   22168:	188b883a 	add	r5,r3,r2
   2216c:	10800044 	addi	r2,r2,1
   22170:	21bffb26 	beq	r4,r6,22160 <_gp+0xffff0040>
   22174:	d9400015 	stw	r5,0(sp)
   22178:	00220940 	call	22094 <__hexdig_fun>
   2217c:	10803fcc 	andi	r2,r2,255
   22180:	1000171e 	bne	r2,zero,221e0 <__gethex+0xf8>
   22184:	8809883a 	mov	r4,r17
   22188:	b80b883a 	mov	r5,r23
   2218c:	980d883a 	mov	r6,r19
   22190:	0023b280 	call	23b28 <strncmp>
   22194:	10002f1e 	bne	r2,zero,22254 <__gethex+0x16c>
   22198:	8ced883a 	add	r22,r17,r19
   2219c:	b1000003 	ldbu	r4,0(r22)
   221a0:	00220940 	call	22094 <__hexdig_fun>
   221a4:	10803fcc 	andi	r2,r2,255
   221a8:	10002b26 	beq	r2,zero,22258 <__gethex+0x170>
   221ac:	b023883a 	mov	r17,r22
   221b0:	00800c04 	movi	r2,48
   221b4:	89000003 	ldbu	r4,0(r17)
   221b8:	2080021e 	bne	r4,r2,221c4 <__gethex+0xdc>
   221bc:	8c400044 	addi	r17,r17,1
   221c0:	003ffc06 	br	221b4 <_gp+0xffff0094>
   221c4:	00220940 	call	22094 <__hexdig_fun>
   221c8:	10803fcc 	andi	r2,r2,255
   221cc:	00c00044 	movi	r3,1
   221d0:	102b003a 	cmpeq	r21,r2,zero
   221d4:	b021883a 	mov	r16,r22
   221d8:	d8c00015 	stw	r3,0(sp)
   221dc:	00000206 	br	221e8 <__gethex+0x100>
   221e0:	002b883a 	mov	r21,zero
   221e4:	0021883a 	mov	r16,zero
   221e8:	882d883a 	mov	r22,r17
   221ec:	b1000003 	ldbu	r4,0(r22)
   221f0:	00220940 	call	22094 <__hexdig_fun>
   221f4:	10803fcc 	andi	r2,r2,255
   221f8:	10000226 	beq	r2,zero,22204 <__gethex+0x11c>
   221fc:	b5800044 	addi	r22,r22,1
   22200:	003ffa06 	br	221ec <_gp+0xffff00cc>
   22204:	b009883a 	mov	r4,r22
   22208:	b80b883a 	mov	r5,r23
   2220c:	980d883a 	mov	r6,r19
   22210:	0023b280 	call	23b28 <strncmp>
   22214:	1000091e 	bne	r2,zero,2223c <__gethex+0x154>
   22218:	8000091e 	bne	r16,zero,22240 <__gethex+0x158>
   2221c:	b4e1883a 	add	r16,r22,r19
   22220:	802d883a 	mov	r22,r16
   22224:	b1000003 	ldbu	r4,0(r22)
   22228:	00220940 	call	22094 <__hexdig_fun>
   2222c:	10803fcc 	andi	r2,r2,255
   22230:	10000226 	beq	r2,zero,2223c <__gethex+0x154>
   22234:	b5800044 	addi	r22,r22,1
   22238:	003ffa06 	br	22224 <_gp+0xffff0104>
   2223c:	80000926 	beq	r16,zero,22264 <__gethex+0x17c>
   22240:	b421c83a 	sub	r16,r22,r16
   22244:	8421883a 	add	r16,r16,r16
   22248:	8421883a 	add	r16,r16,r16
   2224c:	0421c83a 	sub	r16,zero,r16
   22250:	00000506 	br	22268 <__gethex+0x180>
   22254:	882d883a 	mov	r22,r17
   22258:	0021883a 	mov	r16,zero
   2225c:	05400044 	movi	r21,1
   22260:	00000106 	br	22268 <__gethex+0x180>
   22264:	0021883a 	mov	r16,zero
   22268:	b0800003 	ldbu	r2,0(r22)
   2226c:	00c01404 	movi	r3,80
   22270:	10c00226 	beq	r2,r3,2227c <__gethex+0x194>
   22274:	00c01c04 	movi	r3,112
   22278:	10c0301e 	bne	r2,r3,2233c <__gethex+0x254>
   2227c:	b0800043 	ldbu	r2,1(r22)
   22280:	00c00ac4 	movi	r3,43
   22284:	10c00726 	beq	r2,r3,222a4 <__gethex+0x1bc>
   22288:	00c00b44 	movi	r3,45
   2228c:	10c00326 	beq	r2,r3,2229c <__gethex+0x1b4>
   22290:	b1400044 	addi	r5,r22,1
   22294:	0011883a 	mov	r8,zero
   22298:	00000406 	br	222ac <__gethex+0x1c4>
   2229c:	02000044 	movi	r8,1
   222a0:	00000106 	br	222a8 <__gethex+0x1c0>
   222a4:	0011883a 	mov	r8,zero
   222a8:	b1400084 	addi	r5,r22,2
   222ac:	29000003 	ldbu	r4,0(r5)
   222b0:	d9400615 	stw	r5,24(sp)
   222b4:	da000715 	stw	r8,28(sp)
   222b8:	00220940 	call	22094 <__hexdig_fun>
   222bc:	10ffffc4 	addi	r3,r2,-1
   222c0:	18c03fcc 	andi	r3,r3,255
   222c4:	01000604 	movi	r4,24
   222c8:	d9400617 	ldw	r5,24(sp)
   222cc:	da000717 	ldw	r8,28(sp)
   222d0:	20c01a36 	bltu	r4,r3,2233c <__gethex+0x254>
   222d4:	10803fcc 	andi	r2,r2,255
   222d8:	10fffc04 	addi	r3,r2,-16
   222dc:	200d883a 	mov	r6,r4
   222e0:	29400044 	addi	r5,r5,1
   222e4:	29000003 	ldbu	r4,0(r5)
   222e8:	d8c00415 	stw	r3,16(sp)
   222ec:	d9400615 	stw	r5,24(sp)
   222f0:	d9800515 	stw	r6,20(sp)
   222f4:	da000715 	stw	r8,28(sp)
   222f8:	00220940 	call	22094 <__hexdig_fun>
   222fc:	d9800517 	ldw	r6,20(sp)
   22300:	11003fcc 	andi	r4,r2,255
   22304:	10bfffc4 	addi	r2,r2,-1
   22308:	10803fcc 	andi	r2,r2,255
   2230c:	d8c00417 	ldw	r3,16(sp)
   22310:	d9400617 	ldw	r5,24(sp)
   22314:	da000717 	ldw	r8,28(sp)
   22318:	30800436 	bltu	r6,r2,2232c <__gethex+0x244>
   2231c:	18c002a4 	muli	r3,r3,10
   22320:	1907883a 	add	r3,r3,r4
   22324:	18fffc04 	addi	r3,r3,-16
   22328:	003fed06 	br	222e0 <_gp+0xffff01c0>
   2232c:	40000126 	beq	r8,zero,22334 <__gethex+0x24c>
   22330:	00c7c83a 	sub	r3,zero,r3
   22334:	80e1883a 	add	r16,r16,r3
   22338:	00000106 	br	22340 <__gethex+0x258>
   2233c:	b00b883a 	mov	r5,r22
   22340:	e1400015 	stw	r5,0(fp)
   22344:	a8000426 	beq	r21,zero,22358 <__gethex+0x270>
   22348:	d8c00017 	ldw	r3,0(sp)
   2234c:	18012e1e 	bne	r3,zero,22808 <__gethex+0x720>
   22350:	00800184 	movi	r2,6
   22354:	00012d06 	br	2280c <__gethex+0x724>
   22358:	b445c83a 	sub	r2,r22,r17
   2235c:	10bfffc4 	addi	r2,r2,-1
   22360:	000b883a 	mov	r5,zero
   22364:	00c001c4 	movi	r3,7
   22368:	1880030e 	bge	r3,r2,22378 <__gethex+0x290>
   2236c:	29400044 	addi	r5,r5,1
   22370:	1005d07a 	srai	r2,r2,1
   22374:	003ffc06 	br	22368 <_gp+0xffff0248>
   22378:	a009883a 	mov	r4,r20
   2237c:	0022b000 	call	22b00 <_Balloc>
   22380:	d8c00103 	ldbu	r3,4(sp)
   22384:	15400504 	addi	r21,r2,20
   22388:	1039883a 	mov	fp,r2
   2238c:	00800044 	movi	r2,1
   22390:	14c5c83a 	sub	r2,r2,r19
   22394:	a811883a 	mov	r8,r21
   22398:	0013883a 	mov	r9,zero
   2239c:	0015883a 	mov	r10,zero
   223a0:	d8c00115 	stw	r3,4(sp)
   223a4:	d8800315 	stw	r2,12(sp)
   223a8:	8d802d2e 	bgeu	r17,r22,22460 <__gethex+0x378>
   223ac:	b0ffffc4 	addi	r3,r22,-1
   223b0:	d8c00015 	stw	r3,0(sp)
   223b4:	b0bfffc3 	ldbu	r2,-1(r22)
   223b8:	d8c00117 	ldw	r3,4(sp)
   223bc:	10c00726 	beq	r2,r3,223dc <__gethex+0x2f4>
   223c0:	00800804 	movi	r2,32
   223c4:	5080171e 	bne	r10,r2,22424 <__gethex+0x33c>
   223c8:	42400015 	stw	r9,0(r8)
   223cc:	0015883a 	mov	r10,zero
   223d0:	42000104 	addi	r8,r8,4
   223d4:	0013883a 	mov	r9,zero
   223d8:	00001206 	br	22424 <__gethex+0x33c>
   223dc:	d8c00017 	ldw	r3,0(sp)
   223e0:	d8800317 	ldw	r2,12(sp)
   223e4:	1897883a 	add	r11,r3,r2
   223e8:	5c7ff536 	bltu	r11,r17,223c0 <_gp+0xffff02a0>
   223ec:	5809883a 	mov	r4,r11
   223f0:	b80b883a 	mov	r5,r23
   223f4:	980d883a 	mov	r6,r19
   223f8:	da000715 	stw	r8,28(sp)
   223fc:	da400615 	stw	r9,24(sp)
   22400:	da800515 	stw	r10,20(sp)
   22404:	dac00415 	stw	r11,16(sp)
   22408:	0023b280 	call	23b28 <strncmp>
   2240c:	da000717 	ldw	r8,28(sp)
   22410:	da400617 	ldw	r9,24(sp)
   22414:	da800517 	ldw	r10,20(sp)
   22418:	dac00417 	ldw	r11,16(sp)
   2241c:	10000e26 	beq	r2,zero,22458 <__gethex+0x370>
   22420:	003fe706 	br	223c0 <_gp+0xffff02a0>
   22424:	b13fffc3 	ldbu	r4,-1(r22)
   22428:	da000715 	stw	r8,28(sp)
   2242c:	da400615 	stw	r9,24(sp)
   22430:	da800515 	stw	r10,20(sp)
   22434:	00220940 	call	22094 <__hexdig_fun>
   22438:	da800517 	ldw	r10,20(sp)
   2243c:	108003cc 	andi	r2,r2,15
   22440:	da400617 	ldw	r9,24(sp)
   22444:	1284983a 	sll	r2,r2,r10
   22448:	dac00017 	ldw	r11,0(sp)
   2244c:	da000717 	ldw	r8,28(sp)
   22450:	4892b03a 	or	r9,r9,r2
   22454:	52800104 	addi	r10,r10,4
   22458:	582d883a 	mov	r22,r11
   2245c:	003fd206 	br	223a8 <_gp+0xffff0288>
   22460:	40800104 	addi	r2,r8,4
   22464:	1545c83a 	sub	r2,r2,r21
   22468:	1005d0ba 	srai	r2,r2,2
   2246c:	42400015 	stw	r9,0(r8)
   22470:	4809883a 	mov	r4,r9
   22474:	1022917a 	slli	r17,r2,5
   22478:	e0800415 	stw	r2,16(fp)
   2247c:	0022e840 	call	22e84 <__hi0bits>
   22480:	94c00017 	ldw	r19,0(r18)
   22484:	8885c83a 	sub	r2,r17,r2
   22488:	98801f0e 	bge	r19,r2,22508 <__gethex+0x420>
   2248c:	14e3c83a 	sub	r17,r2,r19
   22490:	e009883a 	mov	r4,fp
   22494:	880b883a 	mov	r5,r17
   22498:	0023a5c0 	call	23a5c <__any_on>
   2249c:	10001426 	beq	r2,zero,224f0 <__gethex+0x408>
   224a0:	897fffc4 	addi	r5,r17,-1
   224a4:	2805d17a 	srai	r2,r5,5
   224a8:	05c00044 	movi	r23,1
   224ac:	1085883a 	add	r2,r2,r2
   224b0:	1085883a 	add	r2,r2,r2
   224b4:	a889883a 	add	r4,r21,r2
   224b8:	288007cc 	andi	r2,r5,31
   224bc:	b88c983a 	sll	r6,r23,r2
   224c0:	20800017 	ldw	r2,0(r4)
   224c4:	3084703a 	and	r2,r6,r2
   224c8:	10000a26 	beq	r2,zero,224f4 <__gethex+0x40c>
   224cc:	b9400216 	blt	r23,r5,224d8 <__gethex+0x3f0>
   224d0:	05c00084 	movi	r23,2
   224d4:	00000706 	br	224f4 <__gethex+0x40c>
   224d8:	e009883a 	mov	r4,fp
   224dc:	897fff84 	addi	r5,r17,-2
   224e0:	0023a5c0 	call	23a5c <__any_on>
   224e4:	103ffa26 	beq	r2,zero,224d0 <_gp+0xffff03b0>
   224e8:	05c000c4 	movi	r23,3
   224ec:	00000106 	br	224f4 <__gethex+0x40c>
   224f0:	002f883a 	mov	r23,zero
   224f4:	e009883a 	mov	r4,fp
   224f8:	880b883a 	mov	r5,r17
   224fc:	0021fc80 	call	21fc8 <rshift>
   22500:	8461883a 	add	r16,r16,r17
   22504:	00000a06 	br	22530 <__gethex+0x448>
   22508:	14c0080e 	bge	r2,r19,2252c <__gethex+0x444>
   2250c:	98a3c83a 	sub	r17,r19,r2
   22510:	e00b883a 	mov	r5,fp
   22514:	a009883a 	mov	r4,r20
   22518:	880d883a 	mov	r6,r17
   2251c:	00233080 	call	23308 <__lshift>
   22520:	1039883a 	mov	fp,r2
   22524:	8461c83a 	sub	r16,r16,r17
   22528:	15400504 	addi	r21,r2,20
   2252c:	002f883a 	mov	r23,zero
   22530:	90800217 	ldw	r2,8(r18)
   22534:	1400070e 	bge	r2,r16,22554 <__gethex+0x46c>
   22538:	a009883a 	mov	r4,r20
   2253c:	e00b883a 	mov	r5,fp
   22540:	0022bec0 	call	22bec <_Bfree>
   22544:	d8c01217 	ldw	r3,72(sp)
   22548:	008028c4 	movi	r2,163
   2254c:	18000015 	stw	zero,0(r3)
   22550:	0000ae06 	br	2280c <__gethex+0x724>
   22554:	90800117 	ldw	r2,4(r18)
   22558:	8080410e 	bge	r16,r2,22660 <__gethex+0x578>
   2255c:	1421c83a 	sub	r16,r2,r16
   22560:	84c02416 	blt	r16,r19,225f4 <__gethex+0x50c>
   22564:	90800317 	ldw	r2,12(r18)
   22568:	01000084 	movi	r4,2
   2256c:	11001526 	beq	r2,r4,225c4 <__gethex+0x4dc>
   22570:	010000c4 	movi	r4,3
   22574:	11001626 	beq	r2,r4,225d0 <__gethex+0x4e8>
   22578:	01000044 	movi	r4,1
   2257c:	1100161e 	bne	r2,r4,225d8 <__gethex+0x4f0>
   22580:	84c0151e 	bne	r16,r19,225d8 <__gethex+0x4f0>
   22584:	14c00a16 	blt	r2,r19,225b0 <__gethex+0x4c8>
   22588:	90800117 	ldw	r2,4(r18)
   2258c:	d8c00217 	ldw	r3,8(sp)
   22590:	18800015 	stw	r2,0(r3)
   22594:	00800044 	movi	r2,1
   22598:	d8c01217 	ldw	r3,72(sp)
   2259c:	e0800415 	stw	r2,16(fp)
   225a0:	a8800015 	stw	r2,0(r21)
   225a4:	1f000015 	stw	fp,0(r3)
   225a8:	00801884 	movi	r2,98
   225ac:	00009706 	br	2280c <__gethex+0x724>
   225b0:	e009883a 	mov	r4,fp
   225b4:	997fffc4 	addi	r5,r19,-1
   225b8:	0023a5c0 	call	23a5c <__any_on>
   225bc:	103ff21e 	bne	r2,zero,22588 <_gp+0xffff0468>
   225c0:	00000506 	br	225d8 <__gethex+0x4f0>
   225c4:	d8c01317 	ldw	r3,76(sp)
   225c8:	183fef26 	beq	r3,zero,22588 <_gp+0xffff0468>
   225cc:	00000206 	br	225d8 <__gethex+0x4f0>
   225d0:	d8c01317 	ldw	r3,76(sp)
   225d4:	183fec1e 	bne	r3,zero,22588 <_gp+0xffff0468>
   225d8:	a009883a 	mov	r4,r20
   225dc:	e00b883a 	mov	r5,fp
   225e0:	0022bec0 	call	22bec <_Bfree>
   225e4:	d8c01217 	ldw	r3,72(sp)
   225e8:	00801404 	movi	r2,80
   225ec:	18000015 	stw	zero,0(r3)
   225f0:	00008606 	br	2280c <__gethex+0x724>
   225f4:	847fffc4 	addi	r17,r16,-1
   225f8:	b800061e 	bne	r23,zero,22614 <__gethex+0x52c>
   225fc:	0440060e 	bge	zero,r17,22618 <__gethex+0x530>
   22600:	e009883a 	mov	r4,fp
   22604:	880b883a 	mov	r5,r17
   22608:	0023a5c0 	call	23a5c <__any_on>
   2260c:	102f883a 	mov	r23,r2
   22610:	00000106 	br	22618 <__gethex+0x530>
   22614:	05c00044 	movi	r23,1
   22618:	8805d17a 	srai	r2,r17,5
   2261c:	01000044 	movi	r4,1
   22620:	8c4007cc 	andi	r17,r17,31
   22624:	1085883a 	add	r2,r2,r2
   22628:	1085883a 	add	r2,r2,r2
   2262c:	a885883a 	add	r2,r21,r2
   22630:	2462983a 	sll	r17,r4,r17
   22634:	10800017 	ldw	r2,0(r2)
   22638:	88a2703a 	and	r17,r17,r2
   2263c:	88000126 	beq	r17,zero,22644 <__gethex+0x55c>
   22640:	bdc00094 	ori	r23,r23,2
   22644:	800b883a 	mov	r5,r16
   22648:	e009883a 	mov	r4,fp
   2264c:	9c27c83a 	sub	r19,r19,r16
   22650:	0021fc80 	call	21fc8 <rshift>
   22654:	04400084 	movi	r17,2
   22658:	94000117 	ldw	r16,4(r18)
   2265c:	00000106 	br	22664 <__gethex+0x57c>
   22660:	04400044 	movi	r17,1
   22664:	b8006226 	beq	r23,zero,227f0 <__gethex+0x708>
   22668:	90800317 	ldw	r2,12(r18)
   2266c:	01000084 	movi	r4,2
   22670:	11000b26 	beq	r2,r4,226a0 <__gethex+0x5b8>
   22674:	010000c4 	movi	r4,3
   22678:	11000d26 	beq	r2,r4,226b0 <__gethex+0x5c8>
   2267c:	01000044 	movi	r4,1
   22680:	11005a1e 	bne	r2,r4,227ec <__gethex+0x704>
   22684:	b880008c 	andi	r2,r23,2
   22688:	10005826 	beq	r2,zero,227ec <__gethex+0x704>
   2268c:	a8800017 	ldw	r2,0(r21)
   22690:	b8aeb03a 	or	r23,r23,r2
   22694:	b92e703a 	and	r23,r23,r4
   22698:	b800071e 	bne	r23,zero,226b8 <__gethex+0x5d0>
   2269c:	00005306 	br	227ec <__gethex+0x704>
   226a0:	d8c01317 	ldw	r3,76(sp)
   226a4:	00800044 	movi	r2,1
   226a8:	10c7c83a 	sub	r3,r2,r3
   226ac:	d8c01315 	stw	r3,76(sp)
   226b0:	d8c01317 	ldw	r3,76(sp)
   226b4:	18004d26 	beq	r3,zero,227ec <__gethex+0x704>
   226b8:	e5800417 	ldw	r22,16(fp)
   226bc:	e0800504 	addi	r2,fp,20
   226c0:	01bfffc4 	movi	r6,-1
   226c4:	b5ab883a 	add	r21,r22,r22
   226c8:	ad6b883a 	add	r21,r21,r21
   226cc:	154b883a 	add	r5,r2,r21
   226d0:	11000017 	ldw	r4,0(r2)
   226d4:	21800226 	beq	r4,r6,226e0 <__gethex+0x5f8>
   226d8:	21000044 	addi	r4,r4,1
   226dc:	00001d06 	br	22754 <__gethex+0x66c>
   226e0:	10000015 	stw	zero,0(r2)
   226e4:	10800104 	addi	r2,r2,4
   226e8:	117ff936 	bltu	r2,r5,226d0 <_gp+0xffff05b0>
   226ec:	e0800217 	ldw	r2,8(fp)
   226f0:	b0801016 	blt	r22,r2,22734 <__gethex+0x64c>
   226f4:	e1400117 	ldw	r5,4(fp)
   226f8:	a009883a 	mov	r4,r20
   226fc:	29400044 	addi	r5,r5,1
   22700:	0022b000 	call	22b00 <_Balloc>
   22704:	e1800417 	ldw	r6,16(fp)
   22708:	e1400304 	addi	r5,fp,12
   2270c:	11000304 	addi	r4,r2,12
   22710:	31800084 	addi	r6,r6,2
   22714:	318d883a 	add	r6,r6,r6
   22718:	318d883a 	add	r6,r6,r6
   2271c:	102f883a 	mov	r23,r2
   22720:	001f52c0 	call	1f52c <memcpy>
   22724:	e00b883a 	mov	r5,fp
   22728:	a009883a 	mov	r4,r20
   2272c:	0022bec0 	call	22bec <_Bfree>
   22730:	b839883a 	mov	fp,r23
   22734:	e0800417 	ldw	r2,16(fp)
   22738:	11000044 	addi	r4,r2,1
   2273c:	10800144 	addi	r2,r2,5
   22740:	1085883a 	add	r2,r2,r2
   22744:	1085883a 	add	r2,r2,r2
   22748:	e1000415 	stw	r4,16(fp)
   2274c:	e085883a 	add	r2,fp,r2
   22750:	01000044 	movi	r4,1
   22754:	11000015 	stw	r4,0(r2)
   22758:	00800084 	movi	r2,2
   2275c:	e1400504 	addi	r5,fp,20
   22760:	88800e1e 	bne	r17,r2,2279c <__gethex+0x6b4>
   22764:	91000017 	ldw	r4,0(r18)
   22768:	213fffc4 	addi	r4,r4,-1
   2276c:	99001d1e 	bne	r19,r4,227e4 <__gethex+0x6fc>
   22770:	9805d17a 	srai	r2,r19,5
   22774:	01000044 	movi	r4,1
   22778:	9cc007cc 	andi	r19,r19,31
   2277c:	1085883a 	add	r2,r2,r2
   22780:	1085883a 	add	r2,r2,r2
   22784:	2885883a 	add	r2,r5,r2
   22788:	24e6983a 	sll	r19,r4,r19
   2278c:	10800017 	ldw	r2,0(r2)
   22790:	98a6703a 	and	r19,r19,r2
   22794:	98001326 	beq	r19,zero,227e4 <__gethex+0x6fc>
   22798:	00001106 	br	227e0 <__gethex+0x6f8>
   2279c:	e0800417 	ldw	r2,16(fp)
   227a0:	b080070e 	bge	r22,r2,227c0 <__gethex+0x6d8>
   227a4:	e009883a 	mov	r4,fp
   227a8:	01400044 	movi	r5,1
   227ac:	0021fc80 	call	21fc8 <rshift>
   227b0:	90800217 	ldw	r2,8(r18)
   227b4:	84000044 	addi	r16,r16,1
   227b8:	143f5f16 	blt	r2,r16,22538 <_gp+0xffff0418>
   227bc:	00000806 	br	227e0 <__gethex+0x6f8>
   227c0:	9cc007cc 	andi	r19,r19,31
   227c4:	98000626 	beq	r19,zero,227e0 <__gethex+0x6f8>
   227c8:	2d6b883a 	add	r21,r5,r21
   227cc:	a93fff17 	ldw	r4,-4(r21)
   227d0:	0022e840 	call	22e84 <__hi0bits>
   227d4:	01000804 	movi	r4,32
   227d8:	24e7c83a 	sub	r19,r4,r19
   227dc:	14fff116 	blt	r2,r19,227a4 <_gp+0xffff0684>
   227e0:	04400044 	movi	r17,1
   227e4:	8c400814 	ori	r17,r17,32
   227e8:	00000106 	br	227f0 <__gethex+0x708>
   227ec:	8c400414 	ori	r17,r17,16
   227f0:	d8c01217 	ldw	r3,72(sp)
   227f4:	8805883a 	mov	r2,r17
   227f8:	1f000015 	stw	fp,0(r3)
   227fc:	d8c00217 	ldw	r3,8(sp)
   22800:	1c000015 	stw	r16,0(r3)
   22804:	00000106 	br	2280c <__gethex+0x724>
   22808:	0005883a 	mov	r2,zero
   2280c:	dfc01117 	ldw	ra,68(sp)
   22810:	df001017 	ldw	fp,64(sp)
   22814:	ddc00f17 	ldw	r23,60(sp)
   22818:	dd800e17 	ldw	r22,56(sp)
   2281c:	dd400d17 	ldw	r21,52(sp)
   22820:	dd000c17 	ldw	r20,48(sp)
   22824:	dcc00b17 	ldw	r19,44(sp)
   22828:	dc800a17 	ldw	r18,40(sp)
   2282c:	dc400917 	ldw	r17,36(sp)
   22830:	dc000817 	ldw	r16,32(sp)
   22834:	dec01204 	addi	sp,sp,72
   22838:	f800283a 	ret

0002283c <L_shift>:
   2283c:	00800204 	movi	r2,8
   22840:	118dc83a 	sub	r6,r2,r6
   22844:	318d883a 	add	r6,r6,r6
   22848:	318d883a 	add	r6,r6,r6
   2284c:	02000804 	movi	r8,32
   22850:	de00012e 	bgeu	sp,et,22858 <L_shift+0x1c>
   22854:	003b68fa 	trap	3
   22858:	4191c83a 	sub	r8,r8,r6
   2285c:	20800104 	addi	r2,r4,4
   22860:	10c00017 	ldw	r3,0(r2)
   22864:	22400017 	ldw	r9,0(r4)
   22868:	21000104 	addi	r4,r4,4
   2286c:	1a0e983a 	sll	r7,r3,r8
   22870:	1986d83a 	srl	r3,r3,r6
   22874:	10800104 	addi	r2,r2,4
   22878:	49ceb03a 	or	r7,r9,r7
   2287c:	21ffff15 	stw	r7,-4(r4)
   22880:	10ffff15 	stw	r3,-4(r2)
   22884:	217ff636 	bltu	r4,r5,22860 <_gp+0xffff0740>
   22888:	f800283a 	ret

0002288c <__hexnan>:
   2288c:	defff304 	addi	sp,sp,-52
   22890:	de00012e 	bgeu	sp,et,22898 <__hexnan+0xc>
   22894:	003b68fa 	trap	3
   22898:	dcc00615 	stw	r19,24(sp)
   2289c:	2cc00017 	ldw	r19,0(r5)
   228a0:	dc400415 	stw	r17,16(sp)
   228a4:	ddc00a15 	stw	r23,40(sp)
   228a8:	9823d17a 	srai	r17,r19,5
   228ac:	dfc00c15 	stw	ra,48(sp)
   228b0:	df000b15 	stw	fp,44(sp)
   228b4:	8c63883a 	add	r17,r17,r17
   228b8:	8c63883a 	add	r17,r17,r17
   228bc:	dd800915 	stw	r22,36(sp)
   228c0:	dd400815 	stw	r21,32(sp)
   228c4:	dd000715 	stw	r20,28(sp)
   228c8:	dc800515 	stw	r18,20(sp)
   228cc:	dc000315 	stw	r16,12(sp)
   228d0:	d9000115 	stw	r4,4(sp)
   228d4:	9cc007cc 	andi	r19,r19,31
   228d8:	302f883a 	mov	r23,r6
   228dc:	3463883a 	add	r17,r6,r17
   228e0:	98000126 	beq	r19,zero,228e8 <__hexnan+0x5c>
   228e4:	8c400104 	addi	r17,r17,4
   228e8:	d8c00117 	ldw	r3,4(sp)
   228ec:	8dbfff04 	addi	r22,r17,-4
   228f0:	883fff15 	stw	zero,-4(r17)
   228f4:	1d400017 	ldw	r21,0(r3)
   228f8:	b039883a 	mov	fp,r22
   228fc:	b021883a 	mov	r16,r22
   22900:	0025883a 	mov	r18,zero
   22904:	d8000015 	stw	zero,0(sp)
   22908:	0029883a 	mov	r20,zero
   2290c:	ad400044 	addi	r21,r21,1
   22910:	a9400003 	ldbu	r5,0(r21)
   22914:	28002e26 	beq	r5,zero,229d0 <__hexnan+0x144>
   22918:	2809883a 	mov	r4,r5
   2291c:	d9400215 	stw	r5,8(sp)
   22920:	00220940 	call	22094 <__hexdig_fun>
   22924:	11003fcc 	andi	r4,r2,255
   22928:	d9400217 	ldw	r5,8(sp)
   2292c:	2000181e 	bne	r4,zero,22990 <__hexnan+0x104>
   22930:	00800804 	movi	r2,32
   22934:	11401036 	bltu	r2,r5,22978 <__hexnan+0xec>
   22938:	d8c00017 	ldw	r3,0(sp)
   2293c:	1d3ff30e 	bge	r3,r20,2290c <_gp+0xffff07ec>
   22940:	8700062e 	bgeu	r16,fp,2295c <__hexnan+0xd0>
   22944:	008001c4 	movi	r2,7
   22948:	14800416 	blt	r2,r18,2295c <__hexnan+0xd0>
   2294c:	8009883a 	mov	r4,r16
   22950:	e00b883a 	mov	r5,fp
   22954:	900d883a 	mov	r6,r18
   22958:	002283c0 	call	2283c <L_shift>
   2295c:	bc001a2e 	bgeu	r23,r16,229c8 <__hexnan+0x13c>
   22960:	873fff04 	addi	fp,r16,-4
   22964:	803fff15 	stw	zero,-4(r16)
   22968:	dd000015 	stw	r20,0(sp)
   2296c:	e021883a 	mov	r16,fp
   22970:	0025883a 	mov	r18,zero
   22974:	003fe506 	br	2290c <_gp+0xffff07ec>
   22978:	00800a44 	movi	r2,41
   2297c:	2880371e 	bne	r5,r2,22a5c <__hexnan+0x1d0>
   22980:	d8c00117 	ldw	r3,4(sp)
   22984:	aa400044 	addi	r9,r21,1
   22988:	1a400015 	stw	r9,0(r3)
   2298c:	00001006 	br	229d0 <__hexnan+0x144>
   22990:	94800044 	addi	r18,r18,1
   22994:	00c00204 	movi	r3,8
   22998:	a5000044 	addi	r20,r20,1
   2299c:	1c80040e 	bge	r3,r18,229b0 <__hexnan+0x124>
   229a0:	bc3fda2e 	bgeu	r23,r16,2290c <_gp+0xffff07ec>
   229a4:	803fff15 	stw	zero,-4(r16)
   229a8:	04800044 	movi	r18,1
   229ac:	843fff04 	addi	r16,r16,-4
   229b0:	81000017 	ldw	r4,0(r16)
   229b4:	108003cc 	andi	r2,r2,15
   229b8:	2008913a 	slli	r4,r4,4
   229bc:	2084b03a 	or	r2,r4,r2
   229c0:	80800015 	stw	r2,0(r16)
   229c4:	003fd106 	br	2290c <_gp+0xffff07ec>
   229c8:	04800204 	movi	r18,8
   229cc:	003fcf06 	br	2290c <_gp+0xffff07ec>
   229d0:	a0002226 	beq	r20,zero,22a5c <__hexnan+0x1d0>
   229d4:	8700062e 	bgeu	r16,fp,229f0 <__hexnan+0x164>
   229d8:	008001c4 	movi	r2,7
   229dc:	14800416 	blt	r2,r18,229f0 <__hexnan+0x164>
   229e0:	8009883a 	mov	r4,r16
   229e4:	e00b883a 	mov	r5,fp
   229e8:	900d883a 	mov	r6,r18
   229ec:	002283c0 	call	2283c <L_shift>
   229f0:	bc000a2e 	bgeu	r23,r16,22a1c <__hexnan+0x190>
   229f4:	b805883a 	mov	r2,r23
   229f8:	81000017 	ldw	r4,0(r16)
   229fc:	84000104 	addi	r16,r16,4
   22a00:	10800104 	addi	r2,r2,4
   22a04:	113fff15 	stw	r4,-4(r2)
   22a08:	b43ffb2e 	bgeu	r22,r16,229f8 <_gp+0xffff08d8>
   22a0c:	10000015 	stw	zero,0(r2)
   22a10:	10800104 	addi	r2,r2,4
   22a14:	b0bffd2e 	bgeu	r22,r2,22a0c <_gp+0xffff08ec>
   22a18:	00000806 	br	22a3c <__hexnan+0x1b0>
   22a1c:	98000726 	beq	r19,zero,22a3c <__hexnan+0x1b0>
   22a20:	00800804 	movi	r2,32
   22a24:	14e7c83a 	sub	r19,r2,r19
   22a28:	00bfffc4 	movi	r2,-1
   22a2c:	14e6d83a 	srl	r19,r2,r19
   22a30:	88bfff17 	ldw	r2,-4(r17)
   22a34:	14e6703a 	and	r19,r2,r19
   22a38:	8cffff15 	stw	r19,-4(r17)
   22a3c:	b0800017 	ldw	r2,0(r22)
   22a40:	1000081e 	bne	r2,zero,22a64 <__hexnan+0x1d8>
   22a44:	b5c0031e 	bne	r22,r23,22a54 <__hexnan+0x1c8>
   22a48:	00800044 	movi	r2,1
   22a4c:	b0800015 	stw	r2,0(r22)
   22a50:	00000406 	br	22a64 <__hexnan+0x1d8>
   22a54:	b5bfff04 	addi	r22,r22,-4
   22a58:	003ff806 	br	22a3c <_gp+0xffff091c>
   22a5c:	00800104 	movi	r2,4
   22a60:	00000106 	br	22a68 <__hexnan+0x1dc>
   22a64:	00800144 	movi	r2,5
   22a68:	dfc00c17 	ldw	ra,48(sp)
   22a6c:	df000b17 	ldw	fp,44(sp)
   22a70:	ddc00a17 	ldw	r23,40(sp)
   22a74:	dd800917 	ldw	r22,36(sp)
   22a78:	dd400817 	ldw	r21,32(sp)
   22a7c:	dd000717 	ldw	r20,28(sp)
   22a80:	dcc00617 	ldw	r19,24(sp)
   22a84:	dc800517 	ldw	r18,20(sp)
   22a88:	dc400417 	ldw	r17,16(sp)
   22a8c:	dc000317 	ldw	r16,12(sp)
   22a90:	dec00d04 	addi	sp,sp,52
   22a94:	f800283a 	ret

00022a98 <memmove>:
   22a98:	de00012e 	bgeu	sp,et,22aa0 <memmove+0x8>
   22a9c:	003b68fa 	trap	3
   22aa0:	2005883a 	mov	r2,r4
   22aa4:	29000d2e 	bgeu	r5,r4,22adc <memmove+0x44>
   22aa8:	298f883a 	add	r7,r5,r6
   22aac:	21c00b2e 	bgeu	r4,r7,22adc <memmove+0x44>
   22ab0:	3007883a 	mov	r3,r6
   22ab4:	017fffc4 	movi	r5,-1
   22ab8:	18ffffc4 	addi	r3,r3,-1
   22abc:	19400626 	beq	r3,r5,22ad8 <memmove+0x40>
   22ac0:	1989c83a 	sub	r4,r3,r6
   22ac4:	3909883a 	add	r4,r7,r4
   22ac8:	22000003 	ldbu	r8,0(r4)
   22acc:	10c9883a 	add	r4,r2,r3
   22ad0:	22000005 	stb	r8,0(r4)
   22ad4:	003ff806 	br	22ab8 <_gp+0xffff0998>
   22ad8:	f800283a 	ret
   22adc:	0007883a 	mov	r3,zero
   22ae0:	19800626 	beq	r3,r6,22afc <memmove+0x64>
   22ae4:	28c9883a 	add	r4,r5,r3
   22ae8:	21c00003 	ldbu	r7,0(r4)
   22aec:	10c9883a 	add	r4,r2,r3
   22af0:	18c00044 	addi	r3,r3,1
   22af4:	21c00005 	stb	r7,0(r4)
   22af8:	003ff906 	br	22ae0 <_gp+0xffff09c0>
   22afc:	f800283a 	ret

00022b00 <_Balloc>:
   22b00:	defffc04 	addi	sp,sp,-16
   22b04:	de00012e 	bgeu	sp,et,22b0c <_Balloc+0xc>
   22b08:	003b68fa 	trap	3
   22b0c:	20800417 	ldw	r2,16(r4)
   22b10:	dc400115 	stw	r17,4(sp)
   22b14:	dc000015 	stw	r16,0(sp)
   22b18:	dfc00315 	stw	ra,12(sp)
   22b1c:	dc800215 	stw	r18,8(sp)
   22b20:	2021883a 	mov	r16,r4
   22b24:	2823883a 	mov	r17,r5
   22b28:	1000071e 	bne	r2,zero,22b48 <_Balloc+0x48>
   22b2c:	01000404 	movi	r4,16
   22b30:	001f4f40 	call	1f4f4 <malloc>
   22b34:	80800415 	stw	r2,16(r16)
   22b38:	10000115 	stw	zero,4(r2)
   22b3c:	10000215 	stw	zero,8(r2)
   22b40:	10000015 	stw	zero,0(r2)
   22b44:	10000315 	stw	zero,12(r2)
   22b48:	84800417 	ldw	r18,16(r16)
   22b4c:	90800317 	ldw	r2,12(r18)
   22b50:	10000a26 	beq	r2,zero,22b7c <_Balloc+0x7c>
   22b54:	80800417 	ldw	r2,16(r16)
   22b58:	8c47883a 	add	r3,r17,r17
   22b5c:	18c7883a 	add	r3,r3,r3
   22b60:	10800317 	ldw	r2,12(r2)
   22b64:	10c7883a 	add	r3,r2,r3
   22b68:	18800017 	ldw	r2,0(r3)
   22b6c:	10000d26 	beq	r2,zero,22ba4 <_Balloc+0xa4>
   22b70:	11000017 	ldw	r4,0(r2)
   22b74:	19000015 	stw	r4,0(r3)
   22b78:	00001406 	br	22bcc <_Balloc+0xcc>
   22b7c:	8009883a 	mov	r4,r16
   22b80:	01400104 	movi	r5,4
   22b84:	01800844 	movi	r6,33
   22b88:	0023ad40 	call	23ad4 <_calloc_r>
   22b8c:	90800315 	stw	r2,12(r18)
   22b90:	80800417 	ldw	r2,16(r16)
   22b94:	10800317 	ldw	r2,12(r2)
   22b98:	103fee1e 	bne	r2,zero,22b54 <_gp+0xffff0a34>
   22b9c:	0005883a 	mov	r2,zero
   22ba0:	00000c06 	br	22bd4 <_Balloc+0xd4>
   22ba4:	01400044 	movi	r5,1
   22ba8:	2c64983a 	sll	r18,r5,r17
   22bac:	8009883a 	mov	r4,r16
   22bb0:	91800144 	addi	r6,r18,5
   22bb4:	318d883a 	add	r6,r6,r6
   22bb8:	318d883a 	add	r6,r6,r6
   22bbc:	0023ad40 	call	23ad4 <_calloc_r>
   22bc0:	103ff626 	beq	r2,zero,22b9c <_gp+0xffff0a7c>
   22bc4:	14400115 	stw	r17,4(r2)
   22bc8:	14800215 	stw	r18,8(r2)
   22bcc:	10000415 	stw	zero,16(r2)
   22bd0:	10000315 	stw	zero,12(r2)
   22bd4:	dfc00317 	ldw	ra,12(sp)
   22bd8:	dc800217 	ldw	r18,8(sp)
   22bdc:	dc400117 	ldw	r17,4(sp)
   22be0:	dc000017 	ldw	r16,0(sp)
   22be4:	dec00404 	addi	sp,sp,16
   22be8:	f800283a 	ret

00022bec <_Bfree>:
   22bec:	defffd04 	addi	sp,sp,-12
   22bf0:	de00012e 	bgeu	sp,et,22bf8 <_Bfree+0xc>
   22bf4:	003b68fa 	trap	3
   22bf8:	20800417 	ldw	r2,16(r4)
   22bfc:	dc400115 	stw	r17,4(sp)
   22c00:	dc000015 	stw	r16,0(sp)
   22c04:	dfc00215 	stw	ra,8(sp)
   22c08:	2023883a 	mov	r17,r4
   22c0c:	2821883a 	mov	r16,r5
   22c10:	1000071e 	bne	r2,zero,22c30 <_Bfree+0x44>
   22c14:	01000404 	movi	r4,16
   22c18:	001f4f40 	call	1f4f4 <malloc>
   22c1c:	88800415 	stw	r2,16(r17)
   22c20:	10000115 	stw	zero,4(r2)
   22c24:	10000215 	stw	zero,8(r2)
   22c28:	10000015 	stw	zero,0(r2)
   22c2c:	10000315 	stw	zero,12(r2)
   22c30:	80000926 	beq	r16,zero,22c58 <_Bfree+0x6c>
   22c34:	88c00417 	ldw	r3,16(r17)
   22c38:	80800117 	ldw	r2,4(r16)
   22c3c:	18c00317 	ldw	r3,12(r3)
   22c40:	1085883a 	add	r2,r2,r2
   22c44:	1085883a 	add	r2,r2,r2
   22c48:	1885883a 	add	r2,r3,r2
   22c4c:	10c00017 	ldw	r3,0(r2)
   22c50:	80c00015 	stw	r3,0(r16)
   22c54:	14000015 	stw	r16,0(r2)
   22c58:	dfc00217 	ldw	ra,8(sp)
   22c5c:	dc400117 	ldw	r17,4(sp)
   22c60:	dc000017 	ldw	r16,0(sp)
   22c64:	dec00304 	addi	sp,sp,12
   22c68:	f800283a 	ret

00022c6c <__multadd>:
   22c6c:	defffa04 	addi	sp,sp,-24
   22c70:	de00012e 	bgeu	sp,et,22c78 <__multadd+0xc>
   22c74:	003b68fa 	trap	3
   22c78:	dc400115 	stw	r17,4(sp)
   22c7c:	2c400417 	ldw	r17,16(r5)
   22c80:	dcc00315 	stw	r19,12(sp)
   22c84:	dc800215 	stw	r18,8(sp)
   22c88:	dc000015 	stw	r16,0(sp)
   22c8c:	2027883a 	mov	r19,r4
   22c90:	3825883a 	mov	r18,r7
   22c94:	dfc00515 	stw	ra,20(sp)
   22c98:	dd000415 	stw	r20,16(sp)
   22c9c:	2821883a 	mov	r16,r5
   22ca0:	29c00504 	addi	r7,r5,20
   22ca4:	0009883a 	mov	r4,zero
   22ca8:	38c00017 	ldw	r3,0(r7)
   22cac:	21000044 	addi	r4,r4,1
   22cb0:	39c00104 	addi	r7,r7,4
   22cb4:	197fffcc 	andi	r5,r3,65535
   22cb8:	298b383a 	mul	r5,r5,r6
   22cbc:	1806d43a 	srli	r3,r3,16
   22cc0:	2c8b883a 	add	r5,r5,r18
   22cc4:	2804d43a 	srli	r2,r5,16
   22cc8:	1987383a 	mul	r3,r3,r6
   22ccc:	297fffcc 	andi	r5,r5,65535
   22cd0:	10c5883a 	add	r2,r2,r3
   22cd4:	1024d43a 	srli	r18,r2,16
   22cd8:	1004943a 	slli	r2,r2,16
   22cdc:	1145883a 	add	r2,r2,r5
   22ce0:	38bfff15 	stw	r2,-4(r7)
   22ce4:	247ff016 	blt	r4,r17,22ca8 <_gp+0xffff0b88>
   22ce8:	90001926 	beq	r18,zero,22d50 <__multadd+0xe4>
   22cec:	80800217 	ldw	r2,8(r16)
   22cf0:	88801016 	blt	r17,r2,22d34 <__multadd+0xc8>
   22cf4:	81400117 	ldw	r5,4(r16)
   22cf8:	9809883a 	mov	r4,r19
   22cfc:	29400044 	addi	r5,r5,1
   22d00:	0022b000 	call	22b00 <_Balloc>
   22d04:	81800417 	ldw	r6,16(r16)
   22d08:	81400304 	addi	r5,r16,12
   22d0c:	11000304 	addi	r4,r2,12
   22d10:	31800084 	addi	r6,r6,2
   22d14:	318d883a 	add	r6,r6,r6
   22d18:	318d883a 	add	r6,r6,r6
   22d1c:	1029883a 	mov	r20,r2
   22d20:	001f52c0 	call	1f52c <memcpy>
   22d24:	800b883a 	mov	r5,r16
   22d28:	9809883a 	mov	r4,r19
   22d2c:	0022bec0 	call	22bec <_Bfree>
   22d30:	a021883a 	mov	r16,r20
   22d34:	88800144 	addi	r2,r17,5
   22d38:	1085883a 	add	r2,r2,r2
   22d3c:	1085883a 	add	r2,r2,r2
   22d40:	8085883a 	add	r2,r16,r2
   22d44:	14800015 	stw	r18,0(r2)
   22d48:	8c400044 	addi	r17,r17,1
   22d4c:	84400415 	stw	r17,16(r16)
   22d50:	8005883a 	mov	r2,r16
   22d54:	dfc00517 	ldw	ra,20(sp)
   22d58:	dd000417 	ldw	r20,16(sp)
   22d5c:	dcc00317 	ldw	r19,12(sp)
   22d60:	dc800217 	ldw	r18,8(sp)
   22d64:	dc400117 	ldw	r17,4(sp)
   22d68:	dc000017 	ldw	r16,0(sp)
   22d6c:	dec00604 	addi	sp,sp,24
   22d70:	f800283a 	ret

00022d74 <__s2b>:
   22d74:	defff904 	addi	sp,sp,-28
   22d78:	de00012e 	bgeu	sp,et,22d80 <__s2b+0xc>
   22d7c:	003b68fa 	trap	3
   22d80:	dcc00315 	stw	r19,12(sp)
   22d84:	dc000015 	stw	r16,0(sp)
   22d88:	2027883a 	mov	r19,r4
   22d8c:	2821883a 	mov	r16,r5
   22d90:	39000204 	addi	r4,r7,8
   22d94:	01400244 	movi	r5,9
   22d98:	dd000415 	stw	r20,16(sp)
   22d9c:	dc400115 	stw	r17,4(sp)
   22da0:	dfc00615 	stw	ra,24(sp)
   22da4:	dd400515 	stw	r21,20(sp)
   22da8:	dc800215 	stw	r18,8(sp)
   22dac:	3023883a 	mov	r17,r6
   22db0:	3829883a 	mov	r20,r7
   22db4:	001d6e40 	call	1d6e4 <__divsi3>
   22db8:	00c00044 	movi	r3,1
   22dbc:	000b883a 	mov	r5,zero
   22dc0:	1880030e 	bge	r3,r2,22dd0 <__s2b+0x5c>
   22dc4:	18c7883a 	add	r3,r3,r3
   22dc8:	29400044 	addi	r5,r5,1
   22dcc:	003ffc06 	br	22dc0 <_gp+0xffff0ca0>
   22dd0:	9809883a 	mov	r4,r19
   22dd4:	0022b000 	call	22b00 <_Balloc>
   22dd8:	d8c00717 	ldw	r3,28(sp)
   22ddc:	10c00515 	stw	r3,20(r2)
   22de0:	00c00044 	movi	r3,1
   22de4:	10c00415 	stw	r3,16(r2)
   22de8:	00c00244 	movi	r3,9
   22dec:	1c400e0e 	bge	r3,r17,22e28 <__s2b+0xb4>
   22df0:	80e5883a 	add	r18,r16,r3
   22df4:	902b883a 	mov	r21,r18
   22df8:	8461883a 	add	r16,r16,r17
   22dfc:	a9c00007 	ldb	r7,0(r21)
   22e00:	9809883a 	mov	r4,r19
   22e04:	100b883a 	mov	r5,r2
   22e08:	01800284 	movi	r6,10
   22e0c:	39fff404 	addi	r7,r7,-48
   22e10:	ad400044 	addi	r21,r21,1
   22e14:	0022c6c0 	call	22c6c <__multadd>
   22e18:	ac3ff81e 	bne	r21,r16,22dfc <_gp+0xffff0cdc>
   22e1c:	9461883a 	add	r16,r18,r17
   22e20:	843ffe04 	addi	r16,r16,-8
   22e24:	00000206 	br	22e30 <__s2b+0xbc>
   22e28:	84000284 	addi	r16,r16,10
   22e2c:	1823883a 	mov	r17,r3
   22e30:	8825883a 	mov	r18,r17
   22e34:	95000a0e 	bge	r18,r20,22e60 <__s2b+0xec>
   22e38:	9447c83a 	sub	r3,r18,r17
   22e3c:	80c7883a 	add	r3,r16,r3
   22e40:	19c00007 	ldb	r7,0(r3)
   22e44:	9809883a 	mov	r4,r19
   22e48:	100b883a 	mov	r5,r2
   22e4c:	01800284 	movi	r6,10
   22e50:	39fff404 	addi	r7,r7,-48
   22e54:	0022c6c0 	call	22c6c <__multadd>
   22e58:	94800044 	addi	r18,r18,1
   22e5c:	003ff506 	br	22e34 <_gp+0xffff0d14>
   22e60:	dfc00617 	ldw	ra,24(sp)
   22e64:	dd400517 	ldw	r21,20(sp)
   22e68:	dd000417 	ldw	r20,16(sp)
   22e6c:	dcc00317 	ldw	r19,12(sp)
   22e70:	dc800217 	ldw	r18,8(sp)
   22e74:	dc400117 	ldw	r17,4(sp)
   22e78:	dc000017 	ldw	r16,0(sp)
   22e7c:	dec00704 	addi	sp,sp,28
   22e80:	f800283a 	ret

00022e84 <__hi0bits>:
   22e84:	20bfffec 	andhi	r2,r4,65535
   22e88:	de00012e 	bgeu	sp,et,22e90 <__hi0bits+0xc>
   22e8c:	003b68fa 	trap	3
   22e90:	1000031e 	bne	r2,zero,22ea0 <__hi0bits+0x1c>
   22e94:	2008943a 	slli	r4,r4,16
   22e98:	00800404 	movi	r2,16
   22e9c:	00000106 	br	22ea4 <__hi0bits+0x20>
   22ea0:	0005883a 	mov	r2,zero
   22ea4:	20ffc02c 	andhi	r3,r4,65280
   22ea8:	1800021e 	bne	r3,zero,22eb4 <__hi0bits+0x30>
   22eac:	2008923a 	slli	r4,r4,8
   22eb0:	10800204 	addi	r2,r2,8
   22eb4:	20fc002c 	andhi	r3,r4,61440
   22eb8:	1800021e 	bne	r3,zero,22ec4 <__hi0bits+0x40>
   22ebc:	2008913a 	slli	r4,r4,4
   22ec0:	10800104 	addi	r2,r2,4
   22ec4:	20f0002c 	andhi	r3,r4,49152
   22ec8:	1800031e 	bne	r3,zero,22ed8 <__hi0bits+0x54>
   22ecc:	2109883a 	add	r4,r4,r4
   22ed0:	10800084 	addi	r2,r2,2
   22ed4:	2109883a 	add	r4,r4,r4
   22ed8:	20000516 	blt	r4,zero,22ef0 <__hi0bits+0x6c>
   22edc:	2110002c 	andhi	r4,r4,16384
   22ee0:	20000226 	beq	r4,zero,22eec <__hi0bits+0x68>
   22ee4:	10800044 	addi	r2,r2,1
   22ee8:	f800283a 	ret
   22eec:	00800804 	movi	r2,32
   22ef0:	f800283a 	ret

00022ef4 <__lo0bits>:
   22ef4:	de00012e 	bgeu	sp,et,22efc <__lo0bits+0x8>
   22ef8:	003b68fa 	trap	3
   22efc:	20c00017 	ldw	r3,0(r4)
   22f00:	188001cc 	andi	r2,r3,7
   22f04:	10000c26 	beq	r2,zero,22f38 <__lo0bits+0x44>
   22f08:	1880004c 	andi	r2,r3,1
   22f0c:	1000231e 	bne	r2,zero,22f9c <__lo0bits+0xa8>
   22f10:	1880008c 	andi	r2,r3,2
   22f14:	10000426 	beq	r2,zero,22f28 <__lo0bits+0x34>
   22f18:	1806d07a 	srli	r3,r3,1
   22f1c:	00800044 	movi	r2,1
   22f20:	20c00015 	stw	r3,0(r4)
   22f24:	f800283a 	ret
   22f28:	1806d0ba 	srli	r3,r3,2
   22f2c:	00800084 	movi	r2,2
   22f30:	20c00015 	stw	r3,0(r4)
   22f34:	f800283a 	ret
   22f38:	18bfffcc 	andi	r2,r3,65535
   22f3c:	1000031e 	bne	r2,zero,22f4c <__lo0bits+0x58>
   22f40:	1806d43a 	srli	r3,r3,16
   22f44:	00800404 	movi	r2,16
   22f48:	00000106 	br	22f50 <__lo0bits+0x5c>
   22f4c:	0005883a 	mov	r2,zero
   22f50:	19403fcc 	andi	r5,r3,255
   22f54:	2800021e 	bne	r5,zero,22f60 <__lo0bits+0x6c>
   22f58:	1806d23a 	srli	r3,r3,8
   22f5c:	10800204 	addi	r2,r2,8
   22f60:	194003cc 	andi	r5,r3,15
   22f64:	2800021e 	bne	r5,zero,22f70 <__lo0bits+0x7c>
   22f68:	1806d13a 	srli	r3,r3,4
   22f6c:	10800104 	addi	r2,r2,4
   22f70:	194000cc 	andi	r5,r3,3
   22f74:	2800021e 	bne	r5,zero,22f80 <__lo0bits+0x8c>
   22f78:	1806d0ba 	srli	r3,r3,2
   22f7c:	10800084 	addi	r2,r2,2
   22f80:	1940004c 	andi	r5,r3,1
   22f84:	2800031e 	bne	r5,zero,22f94 <__lo0bits+0xa0>
   22f88:	1806d07a 	srli	r3,r3,1
   22f8c:	18000526 	beq	r3,zero,22fa4 <__lo0bits+0xb0>
   22f90:	10800044 	addi	r2,r2,1
   22f94:	20c00015 	stw	r3,0(r4)
   22f98:	f800283a 	ret
   22f9c:	0005883a 	mov	r2,zero
   22fa0:	f800283a 	ret
   22fa4:	00800804 	movi	r2,32
   22fa8:	f800283a 	ret

00022fac <__i2b>:
   22fac:	defffd04 	addi	sp,sp,-12
   22fb0:	de00012e 	bgeu	sp,et,22fb8 <__i2b+0xc>
   22fb4:	003b68fa 	trap	3
   22fb8:	dc000015 	stw	r16,0(sp)
   22fbc:	04000044 	movi	r16,1
   22fc0:	dc400115 	stw	r17,4(sp)
   22fc4:	2823883a 	mov	r17,r5
   22fc8:	800b883a 	mov	r5,r16
   22fcc:	dfc00215 	stw	ra,8(sp)
   22fd0:	0022b000 	call	22b00 <_Balloc>
   22fd4:	14400515 	stw	r17,20(r2)
   22fd8:	14000415 	stw	r16,16(r2)
   22fdc:	dfc00217 	ldw	ra,8(sp)
   22fe0:	dc400117 	ldw	r17,4(sp)
   22fe4:	dc000017 	ldw	r16,0(sp)
   22fe8:	dec00304 	addi	sp,sp,12
   22fec:	f800283a 	ret

00022ff0 <__multiply>:
   22ff0:	defffa04 	addi	sp,sp,-24
   22ff4:	de00012e 	bgeu	sp,et,22ffc <__multiply+0xc>
   22ff8:	003b68fa 	trap	3
   22ffc:	28c00417 	ldw	r3,16(r5)
   23000:	30800417 	ldw	r2,16(r6)
   23004:	dd000415 	stw	r20,16(sp)
   23008:	dcc00315 	stw	r19,12(sp)
   2300c:	dfc00515 	stw	ra,20(sp)
   23010:	dc800215 	stw	r18,8(sp)
   23014:	dc400115 	stw	r17,4(sp)
   23018:	dc000015 	stw	r16,0(sp)
   2301c:	2827883a 	mov	r19,r5
   23020:	3029883a 	mov	r20,r6
   23024:	1880020e 	bge	r3,r2,23030 <__multiply+0x40>
   23028:	3027883a 	mov	r19,r6
   2302c:	2829883a 	mov	r20,r5
   23030:	9c800417 	ldw	r18,16(r19)
   23034:	a4000417 	ldw	r16,16(r20)
   23038:	98800217 	ldw	r2,8(r19)
   2303c:	99400117 	ldw	r5,4(r19)
   23040:	9423883a 	add	r17,r18,r16
   23044:	1440010e 	bge	r2,r17,2304c <__multiply+0x5c>
   23048:	29400044 	addi	r5,r5,1
   2304c:	0022b000 	call	22b00 <_Balloc>
   23050:	8c51883a 	add	r8,r17,r17
   23054:	12400504 	addi	r9,r2,20
   23058:	4211883a 	add	r8,r8,r8
   2305c:	4a11883a 	add	r8,r9,r8
   23060:	4807883a 	mov	r3,r9
   23064:	1a00032e 	bgeu	r3,r8,23074 <__multiply+0x84>
   23068:	18000015 	stw	zero,0(r3)
   2306c:	18c00104 	addi	r3,r3,4
   23070:	003ffc06 	br	23064 <_gp+0xffff0f44>
   23074:	94a5883a 	add	r18,r18,r18
   23078:	8421883a 	add	r16,r16,r16
   2307c:	99400504 	addi	r5,r19,20
   23080:	94a5883a 	add	r18,r18,r18
   23084:	a1800504 	addi	r6,r20,20
   23088:	8421883a 	add	r16,r16,r16
   2308c:	2c8f883a 	add	r7,r5,r18
   23090:	3421883a 	add	r16,r6,r16
   23094:	3400442e 	bgeu	r6,r16,231a8 <__multiply+0x1b8>
   23098:	3300000b 	ldhu	r12,0(r6)
   2309c:	60001a26 	beq	r12,zero,23108 <__multiply+0x118>
   230a0:	4815883a 	mov	r10,r9
   230a4:	2817883a 	mov	r11,r5
   230a8:	001f883a 	mov	r15,zero
   230ac:	59000017 	ldw	r4,0(r11)
   230b0:	53800017 	ldw	r14,0(r10)
   230b4:	5ac00104 	addi	r11,r11,4
   230b8:	20ffffcc 	andi	r3,r4,65535
   230bc:	2008d43a 	srli	r4,r4,16
   230c0:	1b07383a 	mul	r3,r3,r12
   230c4:	74bfffcc 	andi	r18,r14,65535
   230c8:	2309383a 	mul	r4,r4,r12
   230cc:	701cd43a 	srli	r14,r14,16
   230d0:	90c7883a 	add	r3,r18,r3
   230d4:	1bc7883a 	add	r3,r3,r15
   230d8:	7109883a 	add	r4,r14,r4
   230dc:	181cd43a 	srli	r14,r3,16
   230e0:	18ffffcc 	andi	r3,r3,65535
   230e4:	501b883a 	mov	r13,r10
   230e8:	2389883a 	add	r4,r4,r14
   230ec:	201ed43a 	srli	r15,r4,16
   230f0:	2008943a 	slli	r4,r4,16
   230f4:	52800104 	addi	r10,r10,4
   230f8:	20c6b03a 	or	r3,r4,r3
   230fc:	50ffff15 	stw	r3,-4(r10)
   23100:	59ffea36 	bltu	r11,r7,230ac <_gp+0xffff0f8c>
   23104:	6bc00115 	stw	r15,4(r13)
   23108:	33000017 	ldw	r12,0(r6)
   2310c:	6018d43a 	srli	r12,r12,16
   23110:	60001e26 	beq	r12,zero,2318c <__multiply+0x19c>
   23114:	48c00017 	ldw	r3,0(r9)
   23118:	2817883a 	mov	r11,r5
   2311c:	481d883a 	mov	r14,r9
   23120:	481b883a 	mov	r13,r9
   23124:	0009883a 	mov	r4,zero
   23128:	5a80000b 	ldhu	r10,0(r11)
   2312c:	18ffffcc 	andi	r3,r3,65535
   23130:	5ac00104 	addi	r11,r11,4
   23134:	531f383a 	mul	r15,r10,r12
   23138:	6a800017 	ldw	r10,0(r13)
   2313c:	73800104 	addi	r14,r14,4
   23140:	5014d43a 	srli	r10,r10,16
   23144:	7a95883a 	add	r10,r15,r10
   23148:	5115883a 	add	r10,r10,r4
   2314c:	5008943a 	slli	r4,r10,16
   23150:	6bc00104 	addi	r15,r13,4
   23154:	20c6b03a 	or	r3,r4,r3
   23158:	70ffff15 	stw	r3,-4(r14)
   2315c:	58ffff17 	ldw	r3,-4(r11)
   23160:	7900000b 	ldhu	r4,0(r15)
   23164:	1806d43a 	srli	r3,r3,16
   23168:	1b07383a 	mul	r3,r3,r12
   2316c:	1909883a 	add	r4,r3,r4
   23170:	5006d43a 	srli	r3,r10,16
   23174:	20c7883a 	add	r3,r4,r3
   23178:	1808d43a 	srli	r4,r3,16
   2317c:	59c0022e 	bgeu	r11,r7,23188 <__multiply+0x198>
   23180:	781b883a 	mov	r13,r15
   23184:	003fe806 	br	23128 <_gp+0xffff1008>
   23188:	68c00115 	stw	r3,4(r13)
   2318c:	31800104 	addi	r6,r6,4
   23190:	4a400104 	addi	r9,r9,4
   23194:	003fbf06 	br	23094 <_gp+0xffff0f74>
   23198:	423fff04 	addi	r8,r8,-4
   2319c:	40c00017 	ldw	r3,0(r8)
   231a0:	1800021e 	bne	r3,zero,231ac <__multiply+0x1bc>
   231a4:	8c7fffc4 	addi	r17,r17,-1
   231a8:	047ffb16 	blt	zero,r17,23198 <_gp+0xffff1078>
   231ac:	14400415 	stw	r17,16(r2)
   231b0:	dfc00517 	ldw	ra,20(sp)
   231b4:	dd000417 	ldw	r20,16(sp)
   231b8:	dcc00317 	ldw	r19,12(sp)
   231bc:	dc800217 	ldw	r18,8(sp)
   231c0:	dc400117 	ldw	r17,4(sp)
   231c4:	dc000017 	ldw	r16,0(sp)
   231c8:	dec00604 	addi	sp,sp,24
   231cc:	f800283a 	ret

000231d0 <__pow5mult>:
   231d0:	defffa04 	addi	sp,sp,-24
   231d4:	de00012e 	bgeu	sp,et,231dc <__pow5mult+0xc>
   231d8:	003b68fa 	trap	3
   231dc:	30c000cc 	andi	r3,r6,3
   231e0:	dd000415 	stw	r20,16(sp)
   231e4:	dc800215 	stw	r18,8(sp)
   231e8:	dc400115 	stw	r17,4(sp)
   231ec:	dfc00515 	stw	ra,20(sp)
   231f0:	dcc00315 	stw	r19,12(sp)
   231f4:	dc000015 	stw	r16,0(sp)
   231f8:	2025883a 	mov	r18,r4
   231fc:	2829883a 	mov	r20,r5
   23200:	3023883a 	mov	r17,r6
   23204:	18000a26 	beq	r3,zero,23230 <__pow5mult+0x60>
   23208:	18bfffc4 	addi	r2,r3,-1
   2320c:	1085883a 	add	r2,r2,r2
   23210:	00c000f4 	movhi	r3,3
   23214:	18e58304 	addi	r3,r3,-27124
   23218:	1085883a 	add	r2,r2,r2
   2321c:	1885883a 	add	r2,r3,r2
   23220:	11800017 	ldw	r6,0(r2)
   23224:	000f883a 	mov	r7,zero
   23228:	0022c6c0 	call	22c6c <__multadd>
   2322c:	1029883a 	mov	r20,r2
   23230:	8823d0ba 	srai	r17,r17,2
   23234:	88002b26 	beq	r17,zero,232e4 <__pow5mult+0x114>
   23238:	90800417 	ldw	r2,16(r18)
   2323c:	1000071e 	bne	r2,zero,2325c <__pow5mult+0x8c>
   23240:	01000404 	movi	r4,16
   23244:	001f4f40 	call	1f4f4 <malloc>
   23248:	90800415 	stw	r2,16(r18)
   2324c:	10000115 	stw	zero,4(r2)
   23250:	10000215 	stw	zero,8(r2)
   23254:	10000015 	stw	zero,0(r2)
   23258:	10000315 	stw	zero,12(r2)
   2325c:	94c00417 	ldw	r19,16(r18)
   23260:	9c000217 	ldw	r16,8(r19)
   23264:	80000c1e 	bne	r16,zero,23298 <__pow5mult+0xc8>
   23268:	9009883a 	mov	r4,r18
   2326c:	01409c44 	movi	r5,625
   23270:	0022fac0 	call	22fac <__i2b>
   23274:	98800215 	stw	r2,8(r19)
   23278:	1021883a 	mov	r16,r2
   2327c:	10000015 	stw	zero,0(r2)
   23280:	00000506 	br	23298 <__pow5mult+0xc8>
   23284:	8823d07a 	srai	r17,r17,1
   23288:	88001626 	beq	r17,zero,232e4 <__pow5mult+0x114>
   2328c:	80800017 	ldw	r2,0(r16)
   23290:	10000d26 	beq	r2,zero,232c8 <__pow5mult+0xf8>
   23294:	1021883a 	mov	r16,r2
   23298:	8880004c 	andi	r2,r17,1
   2329c:	103ff926 	beq	r2,zero,23284 <_gp+0xffff1164>
   232a0:	a00b883a 	mov	r5,r20
   232a4:	9009883a 	mov	r4,r18
   232a8:	800d883a 	mov	r6,r16
   232ac:	0022ff00 	call	22ff0 <__multiply>
   232b0:	1027883a 	mov	r19,r2
   232b4:	a00b883a 	mov	r5,r20
   232b8:	9009883a 	mov	r4,r18
   232bc:	0022bec0 	call	22bec <_Bfree>
   232c0:	9829883a 	mov	r20,r19
   232c4:	003fef06 	br	23284 <_gp+0xffff1164>
   232c8:	9009883a 	mov	r4,r18
   232cc:	800b883a 	mov	r5,r16
   232d0:	800d883a 	mov	r6,r16
   232d4:	0022ff00 	call	22ff0 <__multiply>
   232d8:	80800015 	stw	r2,0(r16)
   232dc:	10000015 	stw	zero,0(r2)
   232e0:	003fec06 	br	23294 <_gp+0xffff1174>
   232e4:	a005883a 	mov	r2,r20
   232e8:	dfc00517 	ldw	ra,20(sp)
   232ec:	dd000417 	ldw	r20,16(sp)
   232f0:	dcc00317 	ldw	r19,12(sp)
   232f4:	dc800217 	ldw	r18,8(sp)
   232f8:	dc400117 	ldw	r17,4(sp)
   232fc:	dc000017 	ldw	r16,0(sp)
   23300:	dec00604 	addi	sp,sp,24
   23304:	f800283a 	ret

00023308 <__lshift>:
   23308:	defff804 	addi	sp,sp,-32
   2330c:	de00012e 	bgeu	sp,et,23314 <__lshift+0xc>
   23310:	003b68fa 	trap	3
   23314:	dc400215 	stw	r17,8(sp)
   23318:	2823883a 	mov	r17,r5
   2331c:	dd000515 	stw	r20,20(sp)
   23320:	dc000115 	stw	r16,4(sp)
   23324:	8d000417 	ldw	r20,16(r17)
   23328:	3021d17a 	srai	r16,r6,5
   2332c:	29400117 	ldw	r5,4(r5)
   23330:	88800217 	ldw	r2,8(r17)
   23334:	8529883a 	add	r20,r16,r20
   23338:	dd400615 	stw	r21,24(sp)
   2333c:	dcc00415 	stw	r19,16(sp)
   23340:	dc800315 	stw	r18,12(sp)
   23344:	dfc00715 	stw	ra,28(sp)
   23348:	2025883a 	mov	r18,r4
   2334c:	302b883a 	mov	r21,r6
   23350:	a4c00044 	addi	r19,r20,1
   23354:	14c0030e 	bge	r2,r19,23364 <__lshift+0x5c>
   23358:	29400044 	addi	r5,r5,1
   2335c:	1085883a 	add	r2,r2,r2
   23360:	003ffc06 	br	23354 <_gp+0xffff1234>
   23364:	9009883a 	mov	r4,r18
   23368:	0022b000 	call	22b00 <_Balloc>
   2336c:	10c00504 	addi	r3,r2,20
   23370:	000b883a 	mov	r5,zero
   23374:	2c00060e 	bge	r5,r16,23390 <__lshift+0x88>
   23378:	2949883a 	add	r4,r5,r5
   2337c:	2109883a 	add	r4,r4,r4
   23380:	1909883a 	add	r4,r3,r4
   23384:	20000015 	stw	zero,0(r4)
   23388:	29400044 	addi	r5,r5,1
   2338c:	003ff906 	br	23374 <_gp+0xffff1254>
   23390:	800f883a 	mov	r7,r16
   23394:	8000010e 	bge	r16,zero,2339c <__lshift+0x94>
   23398:	000f883a 	mov	r7,zero
   2339c:	8a000417 	ldw	r8,16(r17)
   233a0:	39cf883a 	add	r7,r7,r7
   233a4:	39cf883a 	add	r7,r7,r7
   233a8:	4211883a 	add	r8,r8,r8
   233ac:	19c7883a 	add	r3,r3,r7
   233b0:	4211883a 	add	r8,r8,r8
   233b4:	89c00504 	addi	r7,r17,20
   233b8:	a98007cc 	andi	r6,r21,31
   233bc:	3a11883a 	add	r8,r7,r8
   233c0:	30001126 	beq	r6,zero,23408 <__lshift+0x100>
   233c4:	02400804 	movi	r9,32
   233c8:	4993c83a 	sub	r9,r9,r6
   233cc:	000b883a 	mov	r5,zero
   233d0:	39000017 	ldw	r4,0(r7)
   233d4:	39c00104 	addi	r7,r7,4
   233d8:	1815883a 	mov	r10,r3
   233dc:	2188983a 	sll	r4,r4,r6
   233e0:	18c00104 	addi	r3,r3,4
   233e4:	290ab03a 	or	r5,r5,r4
   233e8:	197fff15 	stw	r5,-4(r3)
   233ec:	397fff17 	ldw	r5,-4(r7)
   233f0:	2a4ad83a 	srl	r5,r5,r9
   233f4:	3a3ff636 	bltu	r7,r8,233d0 <_gp+0xffff12b0>
   233f8:	51400115 	stw	r5,4(r10)
   233fc:	28000726 	beq	r5,zero,2341c <__lshift+0x114>
   23400:	a4c00084 	addi	r19,r20,2
   23404:	00000506 	br	2341c <__lshift+0x114>
   23408:	39000017 	ldw	r4,0(r7)
   2340c:	39c00104 	addi	r7,r7,4
   23410:	18c00104 	addi	r3,r3,4
   23414:	193fff15 	stw	r4,-4(r3)
   23418:	3a3ffb36 	bltu	r7,r8,23408 <_gp+0xffff12e8>
   2341c:	9cffffc4 	addi	r19,r19,-1
   23420:	14c00415 	stw	r19,16(r2)
   23424:	9009883a 	mov	r4,r18
   23428:	880b883a 	mov	r5,r17
   2342c:	d8800015 	stw	r2,0(sp)
   23430:	0022bec0 	call	22bec <_Bfree>
   23434:	d8800017 	ldw	r2,0(sp)
   23438:	dfc00717 	ldw	ra,28(sp)
   2343c:	dd400617 	ldw	r21,24(sp)
   23440:	dd000517 	ldw	r20,20(sp)
   23444:	dcc00417 	ldw	r19,16(sp)
   23448:	dc800317 	ldw	r18,12(sp)
   2344c:	dc400217 	ldw	r17,8(sp)
   23450:	dc000117 	ldw	r16,4(sp)
   23454:	dec00804 	addi	sp,sp,32
   23458:	f800283a 	ret

0002345c <__mcmp>:
   2345c:	de00012e 	bgeu	sp,et,23464 <__mcmp+0x8>
   23460:	003b68fa 	trap	3
   23464:	20800417 	ldw	r2,16(r4)
   23468:	28c00417 	ldw	r3,16(r5)
   2346c:	10c5c83a 	sub	r2,r2,r3
   23470:	1000121e 	bne	r2,zero,234bc <__mcmp+0x60>
   23474:	18c7883a 	add	r3,r3,r3
   23478:	18c7883a 	add	r3,r3,r3
   2347c:	21000504 	addi	r4,r4,20
   23480:	29400504 	addi	r5,r5,20
   23484:	20c5883a 	add	r2,r4,r3
   23488:	28cb883a 	add	r5,r5,r3
   2348c:	10bfff04 	addi	r2,r2,-4
   23490:	297fff04 	addi	r5,r5,-4
   23494:	11800017 	ldw	r6,0(r2)
   23498:	28c00017 	ldw	r3,0(r5)
   2349c:	30c00326 	beq	r6,r3,234ac <__mcmp+0x50>
   234a0:	30c00536 	bltu	r6,r3,234b8 <__mcmp+0x5c>
   234a4:	00800044 	movi	r2,1
   234a8:	f800283a 	ret
   234ac:	20bff736 	bltu	r4,r2,2348c <_gp+0xffff136c>
   234b0:	0005883a 	mov	r2,zero
   234b4:	f800283a 	ret
   234b8:	00bfffc4 	movi	r2,-1
   234bc:	f800283a 	ret

000234c0 <__mdiff>:
   234c0:	defffb04 	addi	sp,sp,-20
   234c4:	de00012e 	bgeu	sp,et,234cc <__mdiff+0xc>
   234c8:	003b68fa 	trap	3
   234cc:	dcc00315 	stw	r19,12(sp)
   234d0:	dc000015 	stw	r16,0(sp)
   234d4:	2027883a 	mov	r19,r4
   234d8:	2821883a 	mov	r16,r5
   234dc:	2809883a 	mov	r4,r5
   234e0:	300b883a 	mov	r5,r6
   234e4:	dc400115 	stw	r17,4(sp)
   234e8:	dfc00415 	stw	ra,16(sp)
   234ec:	dc800215 	stw	r18,8(sp)
   234f0:	3023883a 	mov	r17,r6
   234f4:	002345c0 	call	2345c <__mcmp>
   234f8:	1000071e 	bne	r2,zero,23518 <__mdiff+0x58>
   234fc:	9809883a 	mov	r4,r19
   23500:	000b883a 	mov	r5,zero
   23504:	0022b000 	call	22b00 <_Balloc>
   23508:	00c00044 	movi	r3,1
   2350c:	10c00415 	stw	r3,16(r2)
   23510:	10000515 	stw	zero,20(r2)
   23514:	00004106 	br	2361c <__mdiff+0x15c>
   23518:	1000050e 	bge	r2,zero,23530 <__mdiff+0x70>
   2351c:	8005883a 	mov	r2,r16
   23520:	04800044 	movi	r18,1
   23524:	8821883a 	mov	r16,r17
   23528:	1023883a 	mov	r17,r2
   2352c:	00000106 	br	23534 <__mdiff+0x74>
   23530:	0025883a 	mov	r18,zero
   23534:	81400117 	ldw	r5,4(r16)
   23538:	9809883a 	mov	r4,r19
   2353c:	0022b000 	call	22b00 <_Balloc>
   23540:	82800417 	ldw	r10,16(r16)
   23544:	88c00417 	ldw	r3,16(r17)
   23548:	81000504 	addi	r4,r16,20
   2354c:	5293883a 	add	r9,r10,r10
   23550:	18c7883a 	add	r3,r3,r3
   23554:	4a53883a 	add	r9,r9,r9
   23558:	8ac00504 	addi	r11,r17,20
   2355c:	18c7883a 	add	r3,r3,r3
   23560:	14800315 	stw	r18,12(r2)
   23564:	2253883a 	add	r9,r4,r9
   23568:	58cd883a 	add	r6,r11,r3
   2356c:	11400504 	addi	r5,r2,20
   23570:	0019883a 	mov	r12,zero
   23574:	21c00017 	ldw	r7,0(r4)
   23578:	5a000017 	ldw	r8,0(r11)
   2357c:	5ac00104 	addi	r11,r11,4
   23580:	38ffffcc 	andi	r3,r7,65535
   23584:	1b07883a 	add	r3,r3,r12
   23588:	380ed43a 	srli	r7,r7,16
   2358c:	433fffcc 	andi	r12,r8,65535
   23590:	4010d43a 	srli	r8,r8,16
   23594:	1b07c83a 	sub	r3,r3,r12
   23598:	21000104 	addi	r4,r4,4
   2359c:	3a11c83a 	sub	r8,r7,r8
   235a0:	180fd43a 	srai	r7,r3,16
   235a4:	18ffffcc 	andi	r3,r3,65535
   235a8:	29400104 	addi	r5,r5,4
   235ac:	41cf883a 	add	r7,r8,r7
   235b0:	3819d43a 	srai	r12,r7,16
   235b4:	380e943a 	slli	r7,r7,16
   235b8:	38c6b03a 	or	r3,r7,r3
   235bc:	28ffff15 	stw	r3,-4(r5)
   235c0:	59bfec36 	bltu	r11,r6,23574 <_gp+0xffff1454>
   235c4:	2807883a 	mov	r3,r5
   235c8:	22400e2e 	bgeu	r4,r9,23604 <__mdiff+0x144>
   235cc:	21c00017 	ldw	r7,0(r4)
   235d0:	29400104 	addi	r5,r5,4
   235d4:	21000104 	addi	r4,r4,4
   235d8:	3a3fffcc 	andi	r8,r7,65535
   235dc:	4311883a 	add	r8,r8,r12
   235e0:	400dd43a 	srai	r6,r8,16
   235e4:	380ed43a 	srli	r7,r7,16
   235e8:	423fffcc 	andi	r8,r8,65535
   235ec:	31cd883a 	add	r6,r6,r7
   235f0:	3019d43a 	srai	r12,r6,16
   235f4:	300c943a 	slli	r6,r6,16
   235f8:	320cb03a 	or	r6,r6,r8
   235fc:	29bfff15 	stw	r6,-4(r5)
   23600:	003ff006 	br	235c4 <_gp+0xffff14a4>
   23604:	18ffff04 	addi	r3,r3,-4
   23608:	19000017 	ldw	r4,0(r3)
   2360c:	2000021e 	bne	r4,zero,23618 <__mdiff+0x158>
   23610:	52bfffc4 	addi	r10,r10,-1
   23614:	003ffb06 	br	23604 <_gp+0xffff14e4>
   23618:	12800415 	stw	r10,16(r2)
   2361c:	dfc00417 	ldw	ra,16(sp)
   23620:	dcc00317 	ldw	r19,12(sp)
   23624:	dc800217 	ldw	r18,8(sp)
   23628:	dc400117 	ldw	r17,4(sp)
   2362c:	dc000017 	ldw	r16,0(sp)
   23630:	dec00504 	addi	sp,sp,20
   23634:	f800283a 	ret

00023638 <__ulp>:
   23638:	295ffc2c 	andhi	r5,r5,32752
   2363c:	00bf3034 	movhi	r2,64704
   23640:	2887883a 	add	r3,r5,r2
   23644:	de00012e 	bgeu	sp,et,2364c <__ulp+0x14>
   23648:	003b68fa 	trap	3
   2364c:	00c00616 	blt	zero,r3,23668 <__ulp+0x30>
   23650:	00c7c83a 	sub	r3,zero,r3
   23654:	180bd53a 	srai	r5,r3,20
   23658:	008004c4 	movi	r2,19
   2365c:	11400416 	blt	r2,r5,23670 <__ulp+0x38>
   23660:	00c00234 	movhi	r3,8
   23664:	1947d83a 	sra	r3,r3,r5
   23668:	0005883a 	mov	r2,zero
   2366c:	f800283a 	ret
   23670:	01000c84 	movi	r4,50
   23674:	0007883a 	mov	r3,zero
   23678:	00800044 	movi	r2,1
   2367c:	21400316 	blt	r4,r5,2368c <__ulp+0x54>
   23680:	01000cc4 	movi	r4,51
   23684:	214bc83a 	sub	r5,r4,r5
   23688:	1144983a 	sll	r2,r2,r5
   2368c:	f800283a 	ret

00023690 <__b2d>:
   23690:	defffa04 	addi	sp,sp,-24
   23694:	de00012e 	bgeu	sp,et,2369c <__b2d+0xc>
   23698:	003b68fa 	trap	3
   2369c:	dc000015 	stw	r16,0(sp)
   236a0:	24000417 	ldw	r16,16(r4)
   236a4:	dcc00315 	stw	r19,12(sp)
   236a8:	24c00504 	addi	r19,r4,20
   236ac:	8421883a 	add	r16,r16,r16
   236b0:	8421883a 	add	r16,r16,r16
   236b4:	9c21883a 	add	r16,r19,r16
   236b8:	dc400115 	stw	r17,4(sp)
   236bc:	847fff17 	ldw	r17,-4(r16)
   236c0:	dd000415 	stw	r20,16(sp)
   236c4:	dc800215 	stw	r18,8(sp)
   236c8:	8809883a 	mov	r4,r17
   236cc:	2829883a 	mov	r20,r5
   236d0:	dfc00515 	stw	ra,20(sp)
   236d4:	0022e840 	call	22e84 <__hi0bits>
   236d8:	00c00804 	movi	r3,32
   236dc:	1887c83a 	sub	r3,r3,r2
   236e0:	a0c00015 	stw	r3,0(r20)
   236e4:	00c00284 	movi	r3,10
   236e8:	84bfff04 	addi	r18,r16,-4
   236ec:	18800d16 	blt	r3,r2,23724 <__b2d+0x94>
   236f0:	018002c4 	movi	r6,11
   236f4:	308bc83a 	sub	r5,r6,r2
   236f8:	8946d83a 	srl	r3,r17,r5
   236fc:	18cffc34 	orhi	r3,r3,16368
   23700:	9c80022e 	bgeu	r19,r18,2370c <__b2d+0x7c>
   23704:	81bffe17 	ldw	r6,-8(r16)
   23708:	00000106 	br	23710 <__b2d+0x80>
   2370c:	000d883a 	mov	r6,zero
   23710:	10800544 	addi	r2,r2,21
   23714:	314cd83a 	srl	r6,r6,r5
   23718:	8884983a 	sll	r2,r17,r2
   2371c:	3084b03a 	or	r2,r6,r2
   23720:	00001706 	br	23780 <__b2d+0xf0>
   23724:	9c80032e 	bgeu	r19,r18,23734 <__b2d+0xa4>
   23728:	84bffe04 	addi	r18,r16,-8
   2372c:	817ffe17 	ldw	r5,-8(r16)
   23730:	00000106 	br	23738 <__b2d+0xa8>
   23734:	000b883a 	mov	r5,zero
   23738:	11bffd44 	addi	r6,r2,-11
   2373c:	30000e26 	beq	r6,zero,23778 <__b2d+0xe8>
   23740:	01000ac4 	movi	r4,43
   23744:	2085c83a 	sub	r2,r4,r2
   23748:	89a2983a 	sll	r17,r17,r6
   2374c:	2886d83a 	srl	r3,r5,r2
   23750:	8c4ffc34 	orhi	r17,r17,16368
   23754:	88c6b03a 	or	r3,r17,r3
   23758:	9c80022e 	bgeu	r19,r18,23764 <__b2d+0xd4>
   2375c:	913fff17 	ldw	r4,-4(r18)
   23760:	00000106 	br	23768 <__b2d+0xd8>
   23764:	0009883a 	mov	r4,zero
   23768:	2088d83a 	srl	r4,r4,r2
   2376c:	298a983a 	sll	r5,r5,r6
   23770:	2144b03a 	or	r2,r4,r5
   23774:	00000206 	br	23780 <__b2d+0xf0>
   23778:	88cffc34 	orhi	r3,r17,16368
   2377c:	2805883a 	mov	r2,r5
   23780:	dfc00517 	ldw	ra,20(sp)
   23784:	dd000417 	ldw	r20,16(sp)
   23788:	dcc00317 	ldw	r19,12(sp)
   2378c:	dc800217 	ldw	r18,8(sp)
   23790:	dc400117 	ldw	r17,4(sp)
   23794:	dc000017 	ldw	r16,0(sp)
   23798:	dec00604 	addi	sp,sp,24
   2379c:	f800283a 	ret

000237a0 <__d2b>:
   237a0:	defff804 	addi	sp,sp,-32
   237a4:	de00012e 	bgeu	sp,et,237ac <__d2b+0xc>
   237a8:	003b68fa 	trap	3
   237ac:	dc000215 	stw	r16,8(sp)
   237b0:	2821883a 	mov	r16,r5
   237b4:	01400044 	movi	r5,1
   237b8:	dd000615 	stw	r20,24(sp)
   237bc:	dcc00515 	stw	r19,20(sp)
   237c0:	dc800415 	stw	r18,16(sp)
   237c4:	dc400315 	stw	r17,12(sp)
   237c8:	dfc00715 	stw	ra,28(sp)
   237cc:	3023883a 	mov	r17,r6
   237d0:	3827883a 	mov	r19,r7
   237d4:	dc800817 	ldw	r18,32(sp)
   237d8:	0022b000 	call	22b00 <_Balloc>
   237dc:	1029883a 	mov	r20,r2
   237e0:	00800434 	movhi	r2,16
   237e4:	10bfffc4 	addi	r2,r2,-1
   237e8:	8884703a 	and	r2,r17,r2
   237ec:	8822907a 	slli	r17,r17,1
   237f0:	8822d57a 	srli	r17,r17,21
   237f4:	88000126 	beq	r17,zero,237fc <__d2b+0x5c>
   237f8:	10800434 	orhi	r2,r2,16
   237fc:	d8800015 	stw	r2,0(sp)
   23800:	80001626 	beq	r16,zero,2385c <__d2b+0xbc>
   23804:	d9000104 	addi	r4,sp,4
   23808:	dc000115 	stw	r16,4(sp)
   2380c:	0022ef40 	call	22ef4 <__lo0bits>
   23810:	1007883a 	mov	r3,r2
   23814:	d9000117 	ldw	r4,4(sp)
   23818:	10000926 	beq	r2,zero,23840 <__d2b+0xa0>
   2381c:	d9400017 	ldw	r5,0(sp)
   23820:	00800804 	movi	r2,32
   23824:	10c5c83a 	sub	r2,r2,r3
   23828:	2884983a 	sll	r2,r5,r2
   2382c:	28cad83a 	srl	r5,r5,r3
   23830:	1104b03a 	or	r2,r2,r4
   23834:	a0800515 	stw	r2,20(r20)
   23838:	d9400015 	stw	r5,0(sp)
   2383c:	00000106 	br	23844 <__d2b+0xa4>
   23840:	a1000515 	stw	r4,20(r20)
   23844:	dc000017 	ldw	r16,0(sp)
   23848:	a4000615 	stw	r16,24(r20)
   2384c:	8020c03a 	cmpne	r16,r16,zero
   23850:	84000044 	addi	r16,r16,1
   23854:	a4000415 	stw	r16,16(r20)
   23858:	00000706 	br	23878 <__d2b+0xd8>
   2385c:	d809883a 	mov	r4,sp
   23860:	0022ef40 	call	22ef4 <__lo0bits>
   23864:	d8c00017 	ldw	r3,0(sp)
   23868:	04000044 	movi	r16,1
   2386c:	a4000415 	stw	r16,16(r20)
   23870:	a0c00515 	stw	r3,20(r20)
   23874:	10c00804 	addi	r3,r2,32
   23878:	88000726 	beq	r17,zero,23898 <__d2b+0xf8>
   2387c:	8c7ef344 	addi	r17,r17,-1075
   23880:	88e3883a 	add	r17,r17,r3
   23884:	00800d44 	movi	r2,53
   23888:	9c400015 	stw	r17,0(r19)
   2388c:	10c7c83a 	sub	r3,r2,r3
   23890:	90c00015 	stw	r3,0(r18)
   23894:	00000906 	br	238bc <__d2b+0x11c>
   23898:	800490ba 	slli	r2,r16,2
   2389c:	18fef384 	addi	r3,r3,-1074
   238a0:	8020917a 	slli	r16,r16,5
   238a4:	a085883a 	add	r2,r20,r2
   238a8:	11000417 	ldw	r4,16(r2)
   238ac:	98c00015 	stw	r3,0(r19)
   238b0:	0022e840 	call	22e84 <__hi0bits>
   238b4:	8085c83a 	sub	r2,r16,r2
   238b8:	90800015 	stw	r2,0(r18)
   238bc:	a005883a 	mov	r2,r20
   238c0:	dfc00717 	ldw	ra,28(sp)
   238c4:	dd000617 	ldw	r20,24(sp)
   238c8:	dcc00517 	ldw	r19,20(sp)
   238cc:	dc800417 	ldw	r18,16(sp)
   238d0:	dc400317 	ldw	r17,12(sp)
   238d4:	dc000217 	ldw	r16,8(sp)
   238d8:	dec00804 	addi	sp,sp,32
   238dc:	f800283a 	ret

000238e0 <__ratio>:
   238e0:	defff904 	addi	sp,sp,-28
   238e4:	de00012e 	bgeu	sp,et,238ec <__ratio+0xc>
   238e8:	003b68fa 	trap	3
   238ec:	dc400315 	stw	r17,12(sp)
   238f0:	2823883a 	mov	r17,r5
   238f4:	d9400104 	addi	r5,sp,4
   238f8:	dfc00615 	stw	ra,24(sp)
   238fc:	dcc00515 	stw	r19,20(sp)
   23900:	dc800415 	stw	r18,16(sp)
   23904:	2027883a 	mov	r19,r4
   23908:	dc000215 	stw	r16,8(sp)
   2390c:	00236900 	call	23690 <__b2d>
   23910:	8809883a 	mov	r4,r17
   23914:	d80b883a 	mov	r5,sp
   23918:	1025883a 	mov	r18,r2
   2391c:	1821883a 	mov	r16,r3
   23920:	00236900 	call	23690 <__b2d>
   23924:	da000017 	ldw	r8,0(sp)
   23928:	180f883a 	mov	r7,r3
   2392c:	d8c00117 	ldw	r3,4(sp)
   23930:	9a400417 	ldw	r9,16(r19)
   23934:	100d883a 	mov	r6,r2
   23938:	1a07c83a 	sub	r3,r3,r8
   2393c:	8a000417 	ldw	r8,16(r17)
   23940:	4a11c83a 	sub	r8,r9,r8
   23944:	4010917a 	slli	r8,r8,5
   23948:	1a11883a 	add	r8,r3,r8
   2394c:	0200030e 	bge	zero,r8,2395c <__ratio+0x7c>
   23950:	4010953a 	slli	r8,r8,20
   23954:	4421883a 	add	r16,r8,r16
   23958:	00000206 	br	23964 <__ratio+0x84>
   2395c:	4010953a 	slli	r8,r8,20
   23960:	3a0fc83a 	sub	r7,r7,r8
   23964:	9009883a 	mov	r4,r18
   23968:	800b883a 	mov	r5,r16
   2396c:	0023dd00 	call	23dd0 <__divdf3>
   23970:	dfc00617 	ldw	ra,24(sp)
   23974:	dcc00517 	ldw	r19,20(sp)
   23978:	dc800417 	ldw	r18,16(sp)
   2397c:	dc400317 	ldw	r17,12(sp)
   23980:	dc000217 	ldw	r16,8(sp)
   23984:	dec00704 	addi	sp,sp,28
   23988:	f800283a 	ret

0002398c <_mprec_log10>:
   2398c:	defffe04 	addi	sp,sp,-8
   23990:	de00012e 	bgeu	sp,et,23998 <_mprec_log10+0xc>
   23994:	003b68fa 	trap	3
   23998:	008005c4 	movi	r2,23
   2399c:	dc000015 	stw	r16,0(sp)
   239a0:	dfc00115 	stw	ra,4(sp)
   239a4:	2021883a 	mov	r16,r4
   239a8:	11000716 	blt	r2,r4,239c8 <_mprec_log10+0x3c>
   239ac:	202090fa 	slli	r16,r4,3
   239b0:	008000f4 	movhi	r2,3
   239b4:	10a59a04 	addi	r2,r2,-27032
   239b8:	1421883a 	add	r16,r2,r16
   239bc:	80800017 	ldw	r2,0(r16)
   239c0:	80c00117 	ldw	r3,4(r16)
   239c4:	00000906 	br	239ec <_mprec_log10+0x60>
   239c8:	0005883a 	mov	r2,zero
   239cc:	00cffc34 	movhi	r3,16368
   239d0:	1009883a 	mov	r4,r2
   239d4:	180b883a 	mov	r5,r3
   239d8:	000d883a 	mov	r6,zero
   239dc:	01d00934 	movhi	r7,16420
   239e0:	843fffc4 	addi	r16,r16,-1
   239e4:	001e2380 	call	1e238 <__muldf3>
   239e8:	803ff91e 	bne	r16,zero,239d0 <_gp+0xffff18b0>
   239ec:	dfc00117 	ldw	ra,4(sp)
   239f0:	dc000017 	ldw	r16,0(sp)
   239f4:	dec00204 	addi	sp,sp,8
   239f8:	f800283a 	ret

000239fc <__copybits>:
   239fc:	297fffc4 	addi	r5,r5,-1
   23a00:	280bd17a 	srai	r5,r5,5
   23a04:	de00012e 	bgeu	sp,et,23a0c <__copybits+0x10>
   23a08:	003b68fa 	trap	3
   23a0c:	30800417 	ldw	r2,16(r6)
   23a10:	29400044 	addi	r5,r5,1
   23a14:	294b883a 	add	r5,r5,r5
   23a18:	1085883a 	add	r2,r2,r2
   23a1c:	294b883a 	add	r5,r5,r5
   23a20:	30c00504 	addi	r3,r6,20
   23a24:	1085883a 	add	r2,r2,r2
   23a28:	214b883a 	add	r5,r4,r5
   23a2c:	1885883a 	add	r2,r3,r2
   23a30:	1880052e 	bgeu	r3,r2,23a48 <__copybits+0x4c>
   23a34:	19800017 	ldw	r6,0(r3)
   23a38:	21000104 	addi	r4,r4,4
   23a3c:	18c00104 	addi	r3,r3,4
   23a40:	21bfff15 	stw	r6,-4(r4)
   23a44:	003ffa06 	br	23a30 <_gp+0xffff1910>
   23a48:	2140032e 	bgeu	r4,r5,23a58 <__copybits+0x5c>
   23a4c:	20000015 	stw	zero,0(r4)
   23a50:	21000104 	addi	r4,r4,4
   23a54:	003ffc06 	br	23a48 <_gp+0xffff1928>
   23a58:	f800283a 	ret

00023a5c <__any_on>:
   23a5c:	de00012e 	bgeu	sp,et,23a64 <__any_on+0x8>
   23a60:	003b68fa 	trap	3
   23a64:	2805d17a 	srai	r2,r5,5
   23a68:	20c00417 	ldw	r3,16(r4)
   23a6c:	21800504 	addi	r6,r4,20
   23a70:	18800b16 	blt	r3,r2,23aa0 <__any_on+0x44>
   23a74:	10c00b0e 	bge	r2,r3,23aa4 <__any_on+0x48>
   23a78:	294007cc 	andi	r5,r5,31
   23a7c:	28000926 	beq	r5,zero,23aa4 <__any_on+0x48>
   23a80:	1087883a 	add	r3,r2,r2
   23a84:	18c7883a 	add	r3,r3,r3
   23a88:	30c7883a 	add	r3,r6,r3
   23a8c:	19000017 	ldw	r4,0(r3)
   23a90:	2146d83a 	srl	r3,r4,r5
   23a94:	194a983a 	sll	r5,r3,r5
   23a98:	29000c1e 	bne	r5,r4,23acc <__any_on+0x70>
   23a9c:	00000106 	br	23aa4 <__any_on+0x48>
   23aa0:	1805883a 	mov	r2,r3
   23aa4:	1085883a 	add	r2,r2,r2
   23aa8:	1085883a 	add	r2,r2,r2
   23aac:	3085883a 	add	r2,r6,r2
   23ab0:	3080042e 	bgeu	r6,r2,23ac4 <__any_on+0x68>
   23ab4:	10bfff04 	addi	r2,r2,-4
   23ab8:	10c00017 	ldw	r3,0(r2)
   23abc:	183ffc26 	beq	r3,zero,23ab0 <_gp+0xffff1990>
   23ac0:	00000206 	br	23acc <__any_on+0x70>
   23ac4:	0005883a 	mov	r2,zero
   23ac8:	f800283a 	ret
   23acc:	00800044 	movi	r2,1
   23ad0:	f800283a 	ret

00023ad4 <_calloc_r>:
   23ad4:	defffd04 	addi	sp,sp,-12
   23ad8:	de00012e 	bgeu	sp,et,23ae0 <_calloc_r+0xc>
   23adc:	003b68fa 	trap	3
   23ae0:	dc400115 	stw	r17,4(sp)
   23ae4:	29a3383a 	mul	r17,r5,r6
   23ae8:	dc000015 	stw	r16,0(sp)
   23aec:	dfc00215 	stw	ra,8(sp)
   23af0:	880b883a 	mov	r5,r17
   23af4:	001f6700 	call	1f670 <_malloc_r>
   23af8:	1021883a 	mov	r16,r2
   23afc:	10000426 	beq	r2,zero,23b10 <_calloc_r+0x3c>
   23b00:	1009883a 	mov	r4,r2
   23b04:	000b883a 	mov	r5,zero
   23b08:	880d883a 	mov	r6,r17
   23b0c:	001f55c0 	call	1f55c <memset>
   23b10:	8005883a 	mov	r2,r16
   23b14:	dfc00217 	ldw	ra,8(sp)
   23b18:	dc400117 	ldw	r17,4(sp)
   23b1c:	dc000017 	ldw	r16,0(sp)
   23b20:	dec00304 	addi	sp,sp,12
   23b24:	f800283a 	ret

00023b28 <strncmp>:
   23b28:	de00012e 	bgeu	sp,et,23b30 <strncmp+0x8>
   23b2c:	003b68fa 	trap	3
   23b30:	30000e26 	beq	r6,zero,23b6c <strncmp+0x44>
   23b34:	31bfffc4 	addi	r6,r6,-1
   23b38:	218d883a 	add	r6,r4,r6
   23b3c:	20800007 	ldb	r2,0(r4)
   23b40:	28c00007 	ldb	r3,0(r5)
   23b44:	10c0011e 	bne	r2,r3,23b4c <strncmp+0x24>
   23b48:	2180041e 	bne	r4,r6,23b5c <strncmp+0x34>
   23b4c:	20800003 	ldbu	r2,0(r4)
   23b50:	28c00003 	ldbu	r3,0(r5)
   23b54:	10c5c83a 	sub	r2,r2,r3
   23b58:	f800283a 	ret
   23b5c:	103ffb26 	beq	r2,zero,23b4c <_gp+0xffff1a2c>
   23b60:	21000044 	addi	r4,r4,1
   23b64:	29400044 	addi	r5,r5,1
   23b68:	003ff406 	br	23b3c <_gp+0xffff1a1c>
   23b6c:	0005883a 	mov	r2,zero
   23b70:	f800283a 	ret

00023b74 <_write_r>:
   23b74:	defffd04 	addi	sp,sp,-12
   23b78:	de00012e 	bgeu	sp,et,23b80 <_write_r+0xc>
   23b7c:	003b68fa 	trap	3
   23b80:	dc000015 	stw	r16,0(sp)
   23b84:	040000f4 	movhi	r16,3
   23b88:	dc400115 	stw	r17,4(sp)
   23b8c:	842ade04 	addi	r16,r16,-21640
   23b90:	2023883a 	mov	r17,r4
   23b94:	2809883a 	mov	r4,r5
   23b98:	300b883a 	mov	r5,r6
   23b9c:	380d883a 	mov	r6,r7
   23ba0:	dfc00215 	stw	ra,8(sp)
   23ba4:	80000015 	stw	zero,0(r16)
   23ba8:	0024ab00 	call	24ab0 <write>
   23bac:	00ffffc4 	movi	r3,-1
   23bb0:	10c0031e 	bne	r2,r3,23bc0 <_write_r+0x4c>
   23bb4:	80c00017 	ldw	r3,0(r16)
   23bb8:	18000126 	beq	r3,zero,23bc0 <_write_r+0x4c>
   23bbc:	88c00015 	stw	r3,0(r17)
   23bc0:	dfc00217 	ldw	ra,8(sp)
   23bc4:	dc400117 	ldw	r17,4(sp)
   23bc8:	dc000017 	ldw	r16,0(sp)
   23bcc:	dec00304 	addi	sp,sp,12
   23bd0:	f800283a 	ret

00023bd4 <__eqsf2>:
   23bd4:	2006d5fa 	srli	r3,r4,23
   23bd8:	280cd5fa 	srli	r6,r5,23
   23bdc:	01c02034 	movhi	r7,128
   23be0:	39ffffc4 	addi	r7,r7,-1
   23be4:	18c03fcc 	andi	r3,r3,255
   23be8:	02003fc4 	movi	r8,255
   23bec:	3904703a 	and	r2,r7,r4
   23bf0:	de00012e 	bgeu	sp,et,23bf8 <__eqsf2+0x24>
   23bf4:	003b68fa 	trap	3
   23bf8:	394e703a 	and	r7,r7,r5
   23bfc:	2008d7fa 	srli	r4,r4,31
   23c00:	31803fcc 	andi	r6,r6,255
   23c04:	280ad7fa 	srli	r5,r5,31
   23c08:	1a000c26 	beq	r3,r8,23c3c <__eqsf2+0x68>
   23c0c:	02003fc4 	movi	r8,255
   23c10:	32000326 	beq	r6,r8,23c20 <__eqsf2+0x4c>
   23c14:	19800426 	beq	r3,r6,23c28 <__eqsf2+0x54>
   23c18:	00800044 	movi	r2,1
   23c1c:	f800283a 	ret
   23c20:	383ffd1e 	bne	r7,zero,23c18 <_gp+0xffff1af8>
   23c24:	19bffc1e 	bne	r3,r6,23c18 <_gp+0xffff1af8>
   23c28:	11fffb1e 	bne	r2,r7,23c18 <_gp+0xffff1af8>
   23c2c:	21400626 	beq	r4,r5,23c48 <__eqsf2+0x74>
   23c30:	183ff91e 	bne	r3,zero,23c18 <_gp+0xffff1af8>
   23c34:	1004c03a 	cmpne	r2,r2,zero
   23c38:	f800283a 	ret
   23c3c:	103ff326 	beq	r2,zero,23c0c <_gp+0xffff1aec>
   23c40:	00800044 	movi	r2,1
   23c44:	f800283a 	ret
   23c48:	0005883a 	mov	r2,zero
   23c4c:	f800283a 	ret

00023c50 <__gesf2>:
   23c50:	2004d5fa 	srli	r2,r4,23
   23c54:	2806d5fa 	srli	r3,r5,23
   23c58:	01802034 	movhi	r6,128
   23c5c:	31bfffc4 	addi	r6,r6,-1
   23c60:	10803fcc 	andi	r2,r2,255
   23c64:	01c03fc4 	movi	r7,255
   23c68:	3110703a 	and	r8,r6,r4
   23c6c:	de00012e 	bgeu	sp,et,23c74 <__gesf2+0x24>
   23c70:	003b68fa 	trap	3
   23c74:	314c703a 	and	r6,r6,r5
   23c78:	2008d7fa 	srli	r4,r4,31
   23c7c:	18c03fcc 	andi	r3,r3,255
   23c80:	280ad7fa 	srli	r5,r5,31
   23c84:	11c00926 	beq	r2,r7,23cac <__gesf2+0x5c>
   23c88:	19c01226 	beq	r3,r7,23cd4 <__gesf2+0x84>
   23c8c:	1000091e 	bne	r2,zero,23cb4 <__gesf2+0x64>
   23c90:	4013003a 	cmpeq	r9,r8,zero
   23c94:	480f883a 	mov	r7,r9
   23c98:	1800091e 	bne	r3,zero,23cc0 <__gesf2+0x70>
   23c9c:	3000081e 	bne	r6,zero,23cc0 <__gesf2+0x70>
   23ca0:	48001026 	beq	r9,zero,23ce4 <__gesf2+0x94>
   23ca4:	0005883a 	mov	r2,zero
   23ca8:	f800283a 	ret
   23cac:	4000161e 	bne	r8,zero,23d08 <__gesf2+0xb8>
   23cb0:	18800826 	beq	r3,r2,23cd4 <__gesf2+0x84>
   23cb4:	1800091e 	bne	r3,zero,23cdc <__gesf2+0x8c>
   23cb8:	000f883a 	mov	r7,zero
   23cbc:	30000926 	beq	r6,zero,23ce4 <__gesf2+0x94>
   23cc0:	29403fcc 	andi	r5,r5,255
   23cc4:	38000626 	beq	r7,zero,23ce0 <__gesf2+0x90>
   23cc8:	2800071e 	bne	r5,zero,23ce8 <__gesf2+0x98>
   23ccc:	00bfffc4 	movi	r2,-1
   23cd0:	f800283a 	ret
   23cd4:	30000c1e 	bne	r6,zero,23d08 <__gesf2+0xb8>
   23cd8:	103fed26 	beq	r2,zero,23c90 <_gp+0xffff1b70>
   23cdc:	29403fcc 	andi	r5,r5,255
   23ce0:	21400326 	beq	r4,r5,23cf0 <__gesf2+0xa0>
   23ce4:	203ff91e 	bne	r4,zero,23ccc <_gp+0xffff1bac>
   23ce8:	00800044 	movi	r2,1
   23cec:	f800283a 	ret
   23cf0:	18bffc16 	blt	r3,r2,23ce4 <_gp+0xffff1bc4>
   23cf4:	10c00216 	blt	r2,r3,23d00 <__gesf2+0xb0>
   23cf8:	323ffa36 	bltu	r6,r8,23ce4 <_gp+0xffff1bc4>
   23cfc:	41bfe92e 	bgeu	r8,r6,23ca4 <_gp+0xffff1b84>
   23d00:	203ff226 	beq	r4,zero,23ccc <_gp+0xffff1bac>
   23d04:	003ff806 	br	23ce8 <_gp+0xffff1bc8>
   23d08:	00bfff84 	movi	r2,-2
   23d0c:	f800283a 	ret

00023d10 <__lesf2>:
   23d10:	2004d5fa 	srli	r2,r4,23
   23d14:	280cd5fa 	srli	r6,r5,23
   23d18:	00c02034 	movhi	r3,128
   23d1c:	18ffffc4 	addi	r3,r3,-1
   23d20:	10803fcc 	andi	r2,r2,255
   23d24:	01c03fc4 	movi	r7,255
   23d28:	1910703a 	and	r8,r3,r4
   23d2c:	de00012e 	bgeu	sp,et,23d34 <__lesf2+0x24>
   23d30:	003b68fa 	trap	3
   23d34:	1946703a 	and	r3,r3,r5
   23d38:	2008d7fa 	srli	r4,r4,31
   23d3c:	31803fcc 	andi	r6,r6,255
   23d40:	280ad7fa 	srli	r5,r5,31
   23d44:	11c00a26 	beq	r2,r7,23d70 <__lesf2+0x60>
   23d48:	31c01526 	beq	r6,r7,23da0 <__lesf2+0x90>
   23d4c:	10000a1e 	bne	r2,zero,23d78 <__lesf2+0x68>
   23d50:	4013003a 	cmpeq	r9,r8,zero
   23d54:	480f883a 	mov	r7,r9
   23d58:	30000d26 	beq	r6,zero,23d90 <__lesf2+0x80>
   23d5c:	29403fcc 	andi	r5,r5,255
   23d60:	38001426 	beq	r7,zero,23db4 <__lesf2+0xa4>
   23d64:	2800081e 	bne	r5,zero,23d88 <__lesf2+0x78>
   23d68:	00bfffc4 	movi	r2,-1
   23d6c:	f800283a 	ret
   23d70:	40000c1e 	bne	r8,zero,23da4 <__lesf2+0x94>
   23d74:	30800a26 	beq	r6,r2,23da0 <__lesf2+0x90>
   23d78:	30000d1e 	bne	r6,zero,23db0 <__lesf2+0xa0>
   23d7c:	000f883a 	mov	r7,zero
   23d80:	183ff61e 	bne	r3,zero,23d5c <_gp+0xffff1c3c>
   23d84:	203ff81e 	bne	r4,zero,23d68 <_gp+0xffff1c48>
   23d88:	00800044 	movi	r2,1
   23d8c:	f800283a 	ret
   23d90:	183ff21e 	bne	r3,zero,23d5c <_gp+0xffff1c3c>
   23d94:	483ffb26 	beq	r9,zero,23d84 <_gp+0xffff1c64>
   23d98:	0005883a 	mov	r2,zero
   23d9c:	f800283a 	ret
   23da0:	18000226 	beq	r3,zero,23dac <__lesf2+0x9c>
   23da4:	00800084 	movi	r2,2
   23da8:	f800283a 	ret
   23dac:	103fe826 	beq	r2,zero,23d50 <_gp+0xffff1c30>
   23db0:	29403fcc 	andi	r5,r5,255
   23db4:	217ff31e 	bne	r4,r5,23d84 <_gp+0xffff1c64>
   23db8:	30bff216 	blt	r6,r2,23d84 <_gp+0xffff1c64>
   23dbc:	11800216 	blt	r2,r6,23dc8 <__lesf2+0xb8>
   23dc0:	1a3ff036 	bltu	r3,r8,23d84 <_gp+0xffff1c64>
   23dc4:	40fff42e 	bgeu	r8,r3,23d98 <_gp+0xffff1c78>
   23dc8:	203fe726 	beq	r4,zero,23d68 <_gp+0xffff1c48>
   23dcc:	003fee06 	br	23d88 <_gp+0xffff1c68>

00023dd0 <__divdf3>:
   23dd0:	defff204 	addi	sp,sp,-56
   23dd4:	de00012e 	bgeu	sp,et,23ddc <__divdf3+0xc>
   23dd8:	003b68fa 	trap	3
   23ddc:	dd000815 	stw	r20,32(sp)
   23de0:	2828d53a 	srli	r20,r5,20
   23de4:	dd800a15 	stw	r22,40(sp)
   23de8:	282cd7fa 	srli	r22,r5,31
   23dec:	dc000415 	stw	r16,16(sp)
   23df0:	04000434 	movhi	r16,16
   23df4:	df000c15 	stw	fp,48(sp)
   23df8:	dcc00715 	stw	r19,28(sp)
   23dfc:	dc800615 	stw	r18,24(sp)
   23e00:	dc400515 	stw	r17,20(sp)
   23e04:	843fffc4 	addi	r16,r16,-1
   23e08:	dfc00d15 	stw	ra,52(sp)
   23e0c:	ddc00b15 	stw	r23,44(sp)
   23e10:	dd400915 	stw	r21,36(sp)
   23e14:	a501ffcc 	andi	r20,r20,2047
   23e18:	2025883a 	mov	r18,r4
   23e1c:	2027883a 	mov	r19,r4
   23e20:	2c22703a 	and	r17,r5,r16
   23e24:	b7003fcc 	andi	fp,r22,255
   23e28:	a0005e26 	beq	r20,zero,23fa4 <__divdf3+0x1d4>
   23e2c:	0081ffc4 	movi	r2,2047
   23e30:	a0803526 	beq	r20,r2,23f08 <__divdf3+0x138>
   23e34:	8c000434 	orhi	r16,r17,16
   23e38:	2004d77a 	srli	r2,r4,29
   23e3c:	802090fa 	slli	r16,r16,3
   23e40:	202690fa 	slli	r19,r4,3
   23e44:	a53f0044 	addi	r20,r20,-1023
   23e48:	80a2b03a 	or	r17,r16,r2
   23e4c:	0025883a 	mov	r18,zero
   23e50:	0011883a 	mov	r8,zero
   23e54:	380ad53a 	srli	r5,r7,20
   23e58:	382ed7fa 	srli	r23,r7,31
   23e5c:	04000434 	movhi	r16,16
   23e60:	843fffc4 	addi	r16,r16,-1
   23e64:	2941ffcc 	andi	r5,r5,2047
   23e68:	302b883a 	mov	r21,r6
   23e6c:	3c20703a 	and	r16,r7,r16
   23e70:	ba403fcc 	andi	r9,r23,255
   23e74:	28006726 	beq	r5,zero,24014 <__divdf3+0x244>
   23e78:	0081ffc4 	movi	r2,2047
   23e7c:	28805f26 	beq	r5,r2,23ffc <__divdf3+0x22c>
   23e80:	84000434 	orhi	r16,r16,16
   23e84:	3004d77a 	srli	r2,r6,29
   23e88:	802090fa 	slli	r16,r16,3
   23e8c:	302a90fa 	slli	r21,r6,3
   23e90:	297f0044 	addi	r5,r5,-1023
   23e94:	80a0b03a 	or	r16,r16,r2
   23e98:	000f883a 	mov	r7,zero
   23e9c:	3c86b03a 	or	r3,r7,r18
   23ea0:	180690ba 	slli	r3,r3,2
   23ea4:	008000b4 	movhi	r2,2
   23ea8:	108fb204 	addi	r2,r2,16072
   23eac:	1887883a 	add	r3,r3,r2
   23eb0:	18c00017 	ldw	r3,0(r3)
   23eb4:	b5c8f03a 	xor	r4,r22,r23
   23eb8:	200d883a 	mov	r6,r4
   23ebc:	24803fcc 	andi	r18,r4,255
   23ec0:	a169c83a 	sub	r20,r20,r5
   23ec4:	1800683a 	jmp	r3
   23ec8:	00024110 	cmplti	zero,zero,2308
   23ecc:	00023f40 	call	23f4 <ad9361_get_rx_gain+0x188>
   23ed0:	000240d4 	movui	zero,2307
   23ed4:	00023f24 	muli	zero,zero,2300
   23ed8:	000240d4 	movui	zero,2307
   23edc:	000240a8 	cmpgeui	zero,zero,2306
   23ee0:	000240d4 	movui	zero,2307
   23ee4:	00023f24 	muli	zero,zero,2300
   23ee8:	00023f40 	call	23f4 <ad9361_get_rx_gain+0x188>
   23eec:	00023f40 	call	23f4 <ad9361_get_rx_gain+0x188>
   23ef0:	000240a8 	cmpgeui	zero,zero,2306
   23ef4:	00023f24 	muli	zero,zero,2300
   23ef8:	00023f34 	movhi	zero,2300
   23efc:	00023f34 	movhi	zero,2300
   23f00:	00023f34 	movhi	zero,2300
   23f04:	000240e4 	muli	zero,zero,2307
   23f08:	8904b03a 	or	r2,r17,r4
   23f0c:	1000631e 	bne	r2,zero,2409c <__divdf3+0x2cc>
   23f10:	04800204 	movi	r18,8
   23f14:	0023883a 	mov	r17,zero
   23f18:	0027883a 	mov	r19,zero
   23f1c:	02000084 	movi	r8,2
   23f20:	003fcc06 	br	23e54 <_gp+0xffff1d34>
   23f24:	8023883a 	mov	r17,r16
   23f28:	a827883a 	mov	r19,r21
   23f2c:	4839883a 	mov	fp,r9
   23f30:	3811883a 	mov	r8,r7
   23f34:	00800084 	movi	r2,2
   23f38:	40812a1e 	bne	r8,r2,243e4 <__divdf3+0x614>
   23f3c:	e025883a 	mov	r18,fp
   23f40:	9180004c 	andi	r6,r18,1
   23f44:	0101ffc4 	movi	r4,2047
   23f48:	000b883a 	mov	r5,zero
   23f4c:	0027883a 	mov	r19,zero
   23f50:	2008953a 	slli	r4,r4,20
   23f54:	30c03fcc 	andi	r3,r6,255
   23f58:	04000434 	movhi	r16,16
   23f5c:	180697fa 	slli	r3,r3,31
   23f60:	843fffc4 	addi	r16,r16,-1
   23f64:	2c20703a 	and	r16,r5,r16
   23f68:	8120b03a 	or	r16,r16,r4
   23f6c:	80c6b03a 	or	r3,r16,r3
   23f70:	9805883a 	mov	r2,r19
   23f74:	dfc00d17 	ldw	ra,52(sp)
   23f78:	df000c17 	ldw	fp,48(sp)
   23f7c:	ddc00b17 	ldw	r23,44(sp)
   23f80:	dd800a17 	ldw	r22,40(sp)
   23f84:	dd400917 	ldw	r21,36(sp)
   23f88:	dd000817 	ldw	r20,32(sp)
   23f8c:	dcc00717 	ldw	r19,28(sp)
   23f90:	dc800617 	ldw	r18,24(sp)
   23f94:	dc400517 	ldw	r17,20(sp)
   23f98:	dc000417 	ldw	r16,16(sp)
   23f9c:	dec00e04 	addi	sp,sp,56
   23fa0:	f800283a 	ret
   23fa4:	8904b03a 	or	r2,r17,r4
   23fa8:	10003726 	beq	r2,zero,24088 <__divdf3+0x2b8>
   23fac:	88011c26 	beq	r17,zero,24420 <__divdf3+0x650>
   23fb0:	8809883a 	mov	r4,r17
   23fb4:	d9800315 	stw	r6,12(sp)
   23fb8:	d9c00115 	stw	r7,4(sp)
   23fbc:	001f4500 	call	1f450 <__clzsi2>
   23fc0:	d9800317 	ldw	r6,12(sp)
   23fc4:	d9c00117 	ldw	r7,4(sp)
   23fc8:	1007883a 	mov	r3,r2
   23fcc:	01000a04 	movi	r4,40
   23fd0:	1cfffe04 	addi	r19,r3,-8
   23fd4:	20c9c83a 	sub	r4,r4,r3
   23fd8:	8cca983a 	sll	r5,r17,r19
   23fdc:	9108d83a 	srl	r4,r18,r4
   23fe0:	94e6983a 	sll	r19,r18,r19
   23fe4:	2162b03a 	or	r17,r4,r5
   23fe8:	053f0344 	movi	r20,-1011
   23fec:	a0e9c83a 	sub	r20,r20,r3
   23ff0:	0025883a 	mov	r18,zero
   23ff4:	0011883a 	mov	r8,zero
   23ff8:	003f9606 	br	23e54 <_gp+0xffff1d34>
   23ffc:	8184b03a 	or	r2,r16,r6
   24000:	10001f1e 	bne	r2,zero,24080 <__divdf3+0x2b0>
   24004:	0021883a 	mov	r16,zero
   24008:	002b883a 	mov	r21,zero
   2400c:	01c00084 	movi	r7,2
   24010:	003fa206 	br	23e9c <_gp+0xffff1d7c>
   24014:	8184b03a 	or	r2,r16,r6
   24018:	10001526 	beq	r2,zero,24070 <__divdf3+0x2a0>
   2401c:	80010c26 	beq	r16,zero,24450 <__divdf3+0x680>
   24020:	8009883a 	mov	r4,r16
   24024:	d9800315 	stw	r6,12(sp)
   24028:	da000215 	stw	r8,8(sp)
   2402c:	da400015 	stw	r9,0(sp)
   24030:	001f4500 	call	1f450 <__clzsi2>
   24034:	d9800317 	ldw	r6,12(sp)
   24038:	da000217 	ldw	r8,8(sp)
   2403c:	da400017 	ldw	r9,0(sp)
   24040:	1007883a 	mov	r3,r2
   24044:	01000a04 	movi	r4,40
   24048:	1d7ffe04 	addi	r21,r3,-8
   2404c:	20c9c83a 	sub	r4,r4,r3
   24050:	8560983a 	sll	r16,r16,r21
   24054:	3108d83a 	srl	r4,r6,r4
   24058:	356a983a 	sll	r21,r6,r21
   2405c:	2420b03a 	or	r16,r4,r16
   24060:	017f0344 	movi	r5,-1011
   24064:	28cbc83a 	sub	r5,r5,r3
   24068:	000f883a 	mov	r7,zero
   2406c:	003f8b06 	br	23e9c <_gp+0xffff1d7c>
   24070:	0021883a 	mov	r16,zero
   24074:	002b883a 	mov	r21,zero
   24078:	01c00044 	movi	r7,1
   2407c:	003f8706 	br	23e9c <_gp+0xffff1d7c>
   24080:	01c000c4 	movi	r7,3
   24084:	003f8506 	br	23e9c <_gp+0xffff1d7c>
   24088:	04800104 	movi	r18,4
   2408c:	0023883a 	mov	r17,zero
   24090:	0027883a 	mov	r19,zero
   24094:	02000044 	movi	r8,1
   24098:	003f6e06 	br	23e54 <_gp+0xffff1d34>
   2409c:	04800304 	movi	r18,12
   240a0:	020000c4 	movi	r8,3
   240a4:	003f6b06 	br	23e54 <_gp+0xffff1d34>
   240a8:	01400434 	movhi	r5,16
   240ac:	000d883a 	mov	r6,zero
   240b0:	297fffc4 	addi	r5,r5,-1
   240b4:	04ffffc4 	movi	r19,-1
   240b8:	0101ffc4 	movi	r4,2047
   240bc:	003fa406 	br	23f50 <_gp+0xffff1e30>
   240c0:	043f0084 	movi	r16,-1022
   240c4:	8521c83a 	sub	r16,r16,r20
   240c8:	00800e04 	movi	r2,56
   240cc:	1401200e 	bge	r2,r16,24550 <__divdf3+0x780>
   240d0:	9180004c 	andi	r6,r18,1
   240d4:	0009883a 	mov	r4,zero
   240d8:	000b883a 	mov	r5,zero
   240dc:	0027883a 	mov	r19,zero
   240e0:	003f9b06 	br	23f50 <_gp+0xffff1e30>
   240e4:	8880022c 	andhi	r2,r17,8
   240e8:	1000c726 	beq	r2,zero,24408 <__divdf3+0x638>
   240ec:	8080022c 	andhi	r2,r16,8
   240f0:	1000c51e 	bne	r2,zero,24408 <__divdf3+0x638>
   240f4:	00800434 	movhi	r2,16
   240f8:	81400234 	orhi	r5,r16,8
   240fc:	10bfffc4 	addi	r2,r2,-1
   24100:	b80d883a 	mov	r6,r23
   24104:	288a703a 	and	r5,r5,r2
   24108:	a827883a 	mov	r19,r21
   2410c:	003fea06 	br	240b8 <_gp+0xffff1f98>
   24110:	8440ea36 	bltu	r16,r17,244bc <__divdf3+0x6ec>
   24114:	8c00e826 	beq	r17,r16,244b8 <__divdf3+0x6e8>
   24118:	a53fffc4 	addi	r20,r20,-1
   2411c:	882d883a 	mov	r22,r17
   24120:	000d883a 	mov	r6,zero
   24124:	a804d63a 	srli	r2,r21,24
   24128:	8020923a 	slli	r16,r16,8
   2412c:	b009883a 	mov	r4,r22
   24130:	d9800315 	stw	r6,12(sp)
   24134:	1420b03a 	or	r16,r2,r16
   24138:	802ed43a 	srli	r23,r16,16
   2413c:	873fffcc 	andi	fp,r16,65535
   24140:	a82a923a 	slli	r21,r21,8
   24144:	b80b883a 	mov	r5,r23
   24148:	001d7a40 	call	1d7a4 <__udivsi3>
   2414c:	b009883a 	mov	r4,r22
   24150:	b80b883a 	mov	r5,r23
   24154:	1023883a 	mov	r17,r2
   24158:	001d7b40 	call	1d7b4 <__umodsi3>
   2415c:	1004943a 	slli	r2,r2,16
   24160:	9808d43a 	srli	r4,r19,16
   24164:	8f2d383a 	mul	r22,r17,fp
   24168:	d9800317 	ldw	r6,12(sp)
   2416c:	1106b03a 	or	r3,r2,r4
   24170:	1d80062e 	bgeu	r3,r22,2418c <__divdf3+0x3bc>
   24174:	1c07883a 	add	r3,r3,r16
   24178:	88bfffc4 	addi	r2,r17,-1
   2417c:	1c00dc36 	bltu	r3,r16,244f0 <__divdf3+0x720>
   24180:	1d80db2e 	bgeu	r3,r22,244f0 <__divdf3+0x720>
   24184:	8c7fff84 	addi	r17,r17,-2
   24188:	1c07883a 	add	r3,r3,r16
   2418c:	1dadc83a 	sub	r22,r3,r22
   24190:	b009883a 	mov	r4,r22
   24194:	b80b883a 	mov	r5,r23
   24198:	d9800315 	stw	r6,12(sp)
   2419c:	001d7a40 	call	1d7a4 <__udivsi3>
   241a0:	b009883a 	mov	r4,r22
   241a4:	b80b883a 	mov	r5,r23
   241a8:	d8800015 	stw	r2,0(sp)
   241ac:	001d7b40 	call	1d7b4 <__umodsi3>
   241b0:	da400017 	ldw	r9,0(sp)
   241b4:	1004943a 	slli	r2,r2,16
   241b8:	9cffffcc 	andi	r19,r19,65535
   241bc:	4f07383a 	mul	r3,r9,fp
   241c0:	14c8b03a 	or	r4,r2,r19
   241c4:	d9800317 	ldw	r6,12(sp)
   241c8:	20c0062e 	bgeu	r4,r3,241e4 <__divdf3+0x414>
   241cc:	2409883a 	add	r4,r4,r16
   241d0:	48bfffc4 	addi	r2,r9,-1
   241d4:	2400c436 	bltu	r4,r16,244e8 <__divdf3+0x718>
   241d8:	20c0c32e 	bgeu	r4,r3,244e8 <__divdf3+0x718>
   241dc:	4a7fff84 	addi	r9,r9,-2
   241e0:	2409883a 	add	r4,r4,r16
   241e4:	8822943a 	slli	r17,r17,16
   241e8:	a80ed43a 	srli	r7,r21,16
   241ec:	aa3fffcc 	andi	r8,r21,65535
   241f0:	4c62b03a 	or	r17,r9,r17
   241f4:	8816d43a 	srli	r11,r17,16
   241f8:	897fffcc 	andi	r5,r17,65535
   241fc:	2a15383a 	mul	r10,r5,r8
   24200:	5a19383a 	mul	r12,r11,r8
   24204:	29cb383a 	mul	r5,r5,r7
   24208:	5012d43a 	srli	r9,r10,16
   2420c:	20c5c83a 	sub	r2,r4,r3
   24210:	614b883a 	add	r5,r12,r5
   24214:	2a4b883a 	add	r5,r5,r9
   24218:	59c7383a 	mul	r3,r11,r7
   2421c:	2b00022e 	bgeu	r5,r12,24228 <__divdf3+0x458>
   24220:	01000074 	movhi	r4,1
   24224:	1907883a 	add	r3,r3,r4
   24228:	2808d43a 	srli	r4,r5,16
   2422c:	280a943a 	slli	r5,r5,16
   24230:	54ffffcc 	andi	r19,r10,65535
   24234:	1907883a 	add	r3,r3,r4
   24238:	2ccb883a 	add	r5,r5,r19
   2423c:	10c09336 	bltu	r2,r3,2448c <__divdf3+0x6bc>
   24240:	10c0ad26 	beq	r2,r3,244f8 <__divdf3+0x728>
   24244:	10c7c83a 	sub	r3,r2,r3
   24248:	3167c83a 	sub	r19,r6,r5
   2424c:	34ed803a 	cmpltu	r22,r6,r19
   24250:	1dadc83a 	sub	r22,r3,r22
   24254:	b400b226 	beq	r22,r16,24520 <__divdf3+0x750>
   24258:	b009883a 	mov	r4,r22
   2425c:	b80b883a 	mov	r5,r23
   24260:	d9c00115 	stw	r7,4(sp)
   24264:	da000215 	stw	r8,8(sp)
   24268:	001d7a40 	call	1d7a4 <__udivsi3>
   2426c:	b009883a 	mov	r4,r22
   24270:	b80b883a 	mov	r5,r23
   24274:	d8800315 	stw	r2,12(sp)
   24278:	001d7b40 	call	1d7b4 <__umodsi3>
   2427c:	d9800317 	ldw	r6,12(sp)
   24280:	1004943a 	slli	r2,r2,16
   24284:	9808d43a 	srli	r4,r19,16
   24288:	372d383a 	mul	r22,r6,fp
   2428c:	d9c00117 	ldw	r7,4(sp)
   24290:	1106b03a 	or	r3,r2,r4
   24294:	da000217 	ldw	r8,8(sp)
   24298:	1d80062e 	bgeu	r3,r22,242b4 <__divdf3+0x4e4>
   2429c:	1c07883a 	add	r3,r3,r16
   242a0:	30bfffc4 	addi	r2,r6,-1
   242a4:	1c00a036 	bltu	r3,r16,24528 <__divdf3+0x758>
   242a8:	1d809f2e 	bgeu	r3,r22,24528 <__divdf3+0x758>
   242ac:	31bfff84 	addi	r6,r6,-2
   242b0:	1c07883a 	add	r3,r3,r16
   242b4:	1dadc83a 	sub	r22,r3,r22
   242b8:	b009883a 	mov	r4,r22
   242bc:	b80b883a 	mov	r5,r23
   242c0:	d9800315 	stw	r6,12(sp)
   242c4:	d9c00115 	stw	r7,4(sp)
   242c8:	da000215 	stw	r8,8(sp)
   242cc:	001d7a40 	call	1d7a4 <__udivsi3>
   242d0:	b009883a 	mov	r4,r22
   242d4:	b80b883a 	mov	r5,r23
   242d8:	d8800015 	stw	r2,0(sp)
   242dc:	001d7b40 	call	1d7b4 <__umodsi3>
   242e0:	da400017 	ldw	r9,0(sp)
   242e4:	1004943a 	slli	r2,r2,16
   242e8:	993fffcc 	andi	r4,r19,65535
   242ec:	4f39383a 	mul	fp,r9,fp
   242f0:	1106b03a 	or	r3,r2,r4
   242f4:	d9800317 	ldw	r6,12(sp)
   242f8:	d9c00117 	ldw	r7,4(sp)
   242fc:	da000217 	ldw	r8,8(sp)
   24300:	1f00062e 	bgeu	r3,fp,2431c <__divdf3+0x54c>
   24304:	1c07883a 	add	r3,r3,r16
   24308:	48bfffc4 	addi	r2,r9,-1
   2430c:	1c008836 	bltu	r3,r16,24530 <__divdf3+0x760>
   24310:	1f00872e 	bgeu	r3,fp,24530 <__divdf3+0x760>
   24314:	4a7fff84 	addi	r9,r9,-2
   24318:	1c07883a 	add	r3,r3,r16
   2431c:	3008943a 	slli	r4,r6,16
   24320:	1f07c83a 	sub	r3,r3,fp
   24324:	4926b03a 	or	r19,r9,r4
   24328:	993fffcc 	andi	r4,r19,65535
   2432c:	980cd43a 	srli	r6,r19,16
   24330:	220b383a 	mul	r5,r4,r8
   24334:	21c5383a 	mul	r2,r4,r7
   24338:	3211383a 	mul	r8,r6,r8
   2433c:	2808d43a 	srli	r4,r5,16
   24340:	31cf383a 	mul	r7,r6,r7
   24344:	4085883a 	add	r2,r8,r2
   24348:	1105883a 	add	r2,r2,r4
   2434c:	1200022e 	bgeu	r2,r8,24358 <__divdf3+0x588>
   24350:	01000074 	movhi	r4,1
   24354:	390f883a 	add	r7,r7,r4
   24358:	1008d43a 	srli	r4,r2,16
   2435c:	1004943a 	slli	r2,r2,16
   24360:	297fffcc 	andi	r5,r5,65535
   24364:	390f883a 	add	r7,r7,r4
   24368:	1145883a 	add	r2,r2,r5
   2436c:	19c06536 	bltu	r3,r7,24504 <__divdf3+0x734>
   24370:	19c09f26 	beq	r3,r7,245f0 <__divdf3+0x820>
   24374:	9cc00054 	ori	r19,r19,1
   24378:	a100ffc4 	addi	r4,r20,1023
   2437c:	013f500e 	bge	zero,r4,240c0 <_gp+0xffff1fa0>
   24380:	988001cc 	andi	r2,r19,7
   24384:	10000726 	beq	r2,zero,243a4 <__divdf3+0x5d4>
   24388:	98c003cc 	andi	r3,r19,15
   2438c:	00800104 	movi	r2,4
   24390:	18800426 	beq	r3,r2,243a4 <__divdf3+0x5d4>
   24394:	9885883a 	add	r2,r19,r2
   24398:	14e1803a 	cmpltu	r16,r2,r19
   2439c:	8c23883a 	add	r17,r17,r16
   243a0:	1027883a 	mov	r19,r2
   243a4:	8880402c 	andhi	r2,r17,256
   243a8:	10000426 	beq	r2,zero,243bc <__divdf3+0x5ec>
   243ac:	00bfc034 	movhi	r2,65280
   243b0:	10bfffc4 	addi	r2,r2,-1
   243b4:	a1010004 	addi	r4,r20,1024
   243b8:	88a2703a 	and	r17,r17,r2
   243bc:	0081ff84 	movi	r2,2046
   243c0:	113edf16 	blt	r2,r4,23f40 <_gp+0xffff1e20>
   243c4:	9826d0fa 	srli	r19,r19,3
   243c8:	8804977a 	slli	r2,r17,29
   243cc:	8820927a 	slli	r16,r17,9
   243d0:	2101ffcc 	andi	r4,r4,2047
   243d4:	14e6b03a 	or	r19,r2,r19
   243d8:	800ad33a 	srli	r5,r16,12
   243dc:	9180004c 	andi	r6,r18,1
   243e0:	003edb06 	br	23f50 <_gp+0xffff1e30>
   243e4:	008000c4 	movi	r2,3
   243e8:	4080a826 	beq	r8,r2,2468c <__divdf3+0x8bc>
   243ec:	00800044 	movi	r2,1
   243f0:	4080551e 	bne	r8,r2,24548 <__divdf3+0x778>
   243f4:	e00d883a 	mov	r6,fp
   243f8:	0009883a 	mov	r4,zero
   243fc:	000b883a 	mov	r5,zero
   24400:	0027883a 	mov	r19,zero
   24404:	003ed206 	br	23f50 <_gp+0xffff1e30>
   24408:	00800434 	movhi	r2,16
   2440c:	89400234 	orhi	r5,r17,8
   24410:	10bfffc4 	addi	r2,r2,-1
   24414:	b00d883a 	mov	r6,r22
   24418:	288a703a 	and	r5,r5,r2
   2441c:	003f2606 	br	240b8 <_gp+0xffff1f98>
   24420:	d9800315 	stw	r6,12(sp)
   24424:	d9c00115 	stw	r7,4(sp)
   24428:	001f4500 	call	1f450 <__clzsi2>
   2442c:	10c00804 	addi	r3,r2,32
   24430:	010009c4 	movi	r4,39
   24434:	d9800317 	ldw	r6,12(sp)
   24438:	d9c00117 	ldw	r7,4(sp)
   2443c:	20fee30e 	bge	r4,r3,23fcc <_gp+0xffff1eac>
   24440:	117ffe04 	addi	r5,r2,-8
   24444:	9162983a 	sll	r17,r18,r5
   24448:	0027883a 	mov	r19,zero
   2444c:	003ee606 	br	23fe8 <_gp+0xffff1ec8>
   24450:	3009883a 	mov	r4,r6
   24454:	d9800315 	stw	r6,12(sp)
   24458:	da000215 	stw	r8,8(sp)
   2445c:	da400015 	stw	r9,0(sp)
   24460:	001f4500 	call	1f450 <__clzsi2>
   24464:	10c00804 	addi	r3,r2,32
   24468:	010009c4 	movi	r4,39
   2446c:	d9800317 	ldw	r6,12(sp)
   24470:	da000217 	ldw	r8,8(sp)
   24474:	da400017 	ldw	r9,0(sp)
   24478:	20fef20e 	bge	r4,r3,24044 <_gp+0xffff1f24>
   2447c:	10bffe04 	addi	r2,r2,-8
   24480:	a8a0983a 	sll	r16,r21,r2
   24484:	002b883a 	mov	r21,zero
   24488:	003ef506 	br	24060 <_gp+0xffff1f40>
   2448c:	354d883a 	add	r6,r6,r21
   24490:	3549803a 	cmpltu	r4,r6,r21
   24494:	2409883a 	add	r4,r4,r16
   24498:	2089883a 	add	r4,r4,r2
   2449c:	88bfffc4 	addi	r2,r17,-1
   244a0:	81000c2e 	bgeu	r16,r4,244d4 <__divdf3+0x704>
   244a4:	20c04436 	bltu	r4,r3,245b8 <__divdf3+0x7e8>
   244a8:	19006f26 	beq	r3,r4,24668 <__divdf3+0x898>
   244ac:	20c7c83a 	sub	r3,r4,r3
   244b0:	1023883a 	mov	r17,r2
   244b4:	003f6406 	br	24248 <_gp+0xffff2128>
   244b8:	9d7f1736 	bltu	r19,r21,24118 <_gp+0xffff1ff8>
   244bc:	9806d07a 	srli	r3,r19,1
   244c0:	880497fa 	slli	r2,r17,31
   244c4:	980c97fa 	slli	r6,r19,31
   244c8:	882cd07a 	srli	r22,r17,1
   244cc:	18a6b03a 	or	r19,r3,r2
   244d0:	003f1406 	br	24124 <_gp+0xffff2004>
   244d4:	243ff51e 	bne	r4,r16,244ac <_gp+0xffff238c>
   244d8:	357ff22e 	bgeu	r6,r21,244a4 <_gp+0xffff2384>
   244dc:	80c7c83a 	sub	r3,r16,r3
   244e0:	1023883a 	mov	r17,r2
   244e4:	003f5806 	br	24248 <_gp+0xffff2128>
   244e8:	1013883a 	mov	r9,r2
   244ec:	003f3d06 	br	241e4 <_gp+0xffff20c4>
   244f0:	1023883a 	mov	r17,r2
   244f4:	003f2506 	br	2418c <_gp+0xffff206c>
   244f8:	317fe436 	bltu	r6,r5,2448c <_gp+0xffff236c>
   244fc:	0007883a 	mov	r3,zero
   24500:	003f5106 	br	24248 <_gp+0xffff2128>
   24504:	1c07883a 	add	r3,r3,r16
   24508:	993fffc4 	addi	r4,r19,-1
   2450c:	1c000a2e 	bgeu	r3,r16,24538 <__divdf3+0x768>
   24510:	2027883a 	mov	r19,r4
   24514:	19ff971e 	bne	r3,r7,24374 <_gp+0xffff2254>
   24518:	a8bf961e 	bne	r21,r2,24374 <_gp+0xffff2254>
   2451c:	003f9606 	br	24378 <_gp+0xffff2258>
   24520:	04ffffc4 	movi	r19,-1
   24524:	003f9406 	br	24378 <_gp+0xffff2258>
   24528:	100d883a 	mov	r6,r2
   2452c:	003f6106 	br	242b4 <_gp+0xffff2194>
   24530:	1013883a 	mov	r9,r2
   24534:	003f7906 	br	2431c <_gp+0xffff21fc>
   24538:	19c02636 	bltu	r3,r7,245d4 <__divdf3+0x804>
   2453c:	38c04d26 	beq	r7,r3,24674 <__divdf3+0x8a4>
   24540:	2027883a 	mov	r19,r4
   24544:	003f8b06 	br	24374 <_gp+0xffff2254>
   24548:	e025883a 	mov	r18,fp
   2454c:	003f8a06 	br	24378 <_gp+0xffff2258>
   24550:	008007c4 	movi	r2,31
   24554:	14002a16 	blt	r2,r16,24600 <__divdf3+0x830>
   24558:	a5010784 	addi	r20,r20,1054
   2455c:	8d04983a 	sll	r2,r17,r20
   24560:	9c06d83a 	srl	r3,r19,r16
   24564:	9d28983a 	sll	r20,r19,r20
   24568:	8c20d83a 	srl	r16,r17,r16
   2456c:	1886b03a 	or	r3,r3,r2
   24570:	a004c03a 	cmpne	r2,r20,zero
   24574:	1884b03a 	or	r2,r3,r2
   24578:	10c001cc 	andi	r3,r2,7
   2457c:	18000726 	beq	r3,zero,2459c <__divdf3+0x7cc>
   24580:	110003cc 	andi	r4,r2,15
   24584:	00c00104 	movi	r3,4
   24588:	20c00426 	beq	r4,r3,2459c <__divdf3+0x7cc>
   2458c:	10c00104 	addi	r3,r2,4
   24590:	1885803a 	cmpltu	r2,r3,r2
   24594:	80a1883a 	add	r16,r16,r2
   24598:	1805883a 	mov	r2,r3
   2459c:	80c0202c 	andhi	r3,r16,128
   245a0:	18002d26 	beq	r3,zero,24658 <__divdf3+0x888>
   245a4:	9180004c 	andi	r6,r18,1
   245a8:	01000044 	movi	r4,1
   245ac:	000b883a 	mov	r5,zero
   245b0:	0027883a 	mov	r19,zero
   245b4:	003e6606 	br	23f50 <_gp+0xffff1e30>
   245b8:	354d883a 	add	r6,r6,r21
   245bc:	356d803a 	cmpltu	r22,r6,r21
   245c0:	b42d883a 	add	r22,r22,r16
   245c4:	b12d883a 	add	r22,r22,r4
   245c8:	8c7fff84 	addi	r17,r17,-2
   245cc:	b0c7c83a 	sub	r3,r22,r3
   245d0:	003f1d06 	br	24248 <_gp+0xffff2128>
   245d4:	ad4b883a 	add	r5,r21,r21
   245d8:	2d6b803a 	cmpltu	r21,r5,r21
   245dc:	ac2b883a 	add	r21,r21,r16
   245e0:	1d47883a 	add	r3,r3,r21
   245e4:	993fff84 	addi	r4,r19,-2
   245e8:	282b883a 	mov	r21,r5
   245ec:	003fc806 	br	24510 <_gp+0xffff23f0>
   245f0:	103fc41e 	bne	r2,zero,24504 <_gp+0xffff23e4>
   245f4:	002b883a 	mov	r21,zero
   245f8:	a8bf5e1e 	bne	r21,r2,24374 <_gp+0xffff2254>
   245fc:	003f5e06 	br	24378 <_gp+0xffff2258>
   24600:	00bef884 	movi	r2,-1054
   24604:	1505c83a 	sub	r2,r2,r20
   24608:	00c00804 	movi	r3,32
   2460c:	8884d83a 	srl	r2,r17,r2
   24610:	80c01c26 	beq	r16,r3,24684 <__divdf3+0x8b4>
   24614:	a0c10f84 	addi	r3,r20,1086
   24618:	88c6983a 	sll	r3,r17,r3
   2461c:	1cc6b03a 	or	r3,r3,r19
   24620:	1806c03a 	cmpne	r3,r3,zero
   24624:	1884b03a 	or	r2,r3,r2
   24628:	140001cc 	andi	r16,r2,7
   2462c:	8000061e 	bne	r16,zero,24648 <__divdf3+0x878>
   24630:	000b883a 	mov	r5,zero
   24634:	1004d0fa 	srli	r2,r2,3
   24638:	9180004c 	andi	r6,r18,1
   2463c:	0009883a 	mov	r4,zero
   24640:	1426b03a 	or	r19,r2,r16
   24644:	003e4206 	br	23f50 <_gp+0xffff1e30>
   24648:	110003cc 	andi	r4,r2,15
   2464c:	00c00104 	movi	r3,4
   24650:	0021883a 	mov	r16,zero
   24654:	20ffcd1e 	bne	r4,r3,2458c <_gp+0xffff246c>
   24658:	800a927a 	slli	r5,r16,9
   2465c:	8020977a 	slli	r16,r16,29
   24660:	280ad33a 	srli	r5,r5,12
   24664:	003ff306 	br	24634 <_gp+0xffff2514>
   24668:	317fd336 	bltu	r6,r5,245b8 <_gp+0xffff2498>
   2466c:	1023883a 	mov	r17,r2
   24670:	003fa206 	br	244fc <_gp+0xffff23dc>
   24674:	a8bfd736 	bltu	r21,r2,245d4 <_gp+0xffff24b4>
   24678:	2027883a 	mov	r19,r4
   2467c:	a8bf3d1e 	bne	r21,r2,24374 <_gp+0xffff2254>
   24680:	003f3d06 	br	24378 <_gp+0xffff2258>
   24684:	0007883a 	mov	r3,zero
   24688:	003fe406 	br	2461c <_gp+0xffff24fc>
   2468c:	00800434 	movhi	r2,16
   24690:	89400234 	orhi	r5,r17,8
   24694:	10bfffc4 	addi	r2,r2,-1
   24698:	e00d883a 	mov	r6,fp
   2469c:	288a703a 	and	r5,r5,r2
   246a0:	003e8506 	br	240b8 <_gp+0xffff1f98>

000246a4 <__eqdf2>:
   246a4:	2804d53a 	srli	r2,r5,20
   246a8:	3806d53a 	srli	r3,r7,20
   246ac:	02000434 	movhi	r8,16
   246b0:	423fffc4 	addi	r8,r8,-1
   246b4:	1081ffcc 	andi	r2,r2,2047
   246b8:	0241ffc4 	movi	r9,2047
   246bc:	2a14703a 	and	r10,r5,r8
   246c0:	de00012e 	bgeu	sp,et,246c8 <__eqdf2+0x24>
   246c4:	003b68fa 	trap	3
   246c8:	3a10703a 	and	r8,r7,r8
   246cc:	280ad7fa 	srli	r5,r5,31
   246d0:	18c1ffcc 	andi	r3,r3,2047
   246d4:	380ed7fa 	srli	r7,r7,31
   246d8:	12400f26 	beq	r2,r9,24718 <__eqdf2+0x74>
   246dc:	0241ffc4 	movi	r9,2047
   246e0:	1a400326 	beq	r3,r9,246f0 <__eqdf2+0x4c>
   246e4:	10c00526 	beq	r2,r3,246fc <__eqdf2+0x58>
   246e8:	00800044 	movi	r2,1
   246ec:	f800283a 	ret
   246f0:	4192b03a 	or	r9,r8,r6
   246f4:	483ffc1e 	bne	r9,zero,246e8 <_gp+0xffff25c8>
   246f8:	10fffb1e 	bne	r2,r3,246e8 <_gp+0xffff25c8>
   246fc:	523ffa1e 	bne	r10,r8,246e8 <_gp+0xffff25c8>
   24700:	21bff91e 	bne	r4,r6,246e8 <_gp+0xffff25c8>
   24704:	29c00826 	beq	r5,r7,24728 <__eqdf2+0x84>
   24708:	103ff71e 	bne	r2,zero,246e8 <_gp+0xffff25c8>
   2470c:	5104b03a 	or	r2,r10,r4
   24710:	1004c03a 	cmpne	r2,r2,zero
   24714:	f800283a 	ret
   24718:	5112b03a 	or	r9,r10,r4
   2471c:	483fef26 	beq	r9,zero,246dc <_gp+0xffff25bc>
   24720:	00800044 	movi	r2,1
   24724:	f800283a 	ret
   24728:	0005883a 	mov	r2,zero
   2472c:	f800283a 	ret

00024730 <__truncdfsf2>:
   24730:	2810d53a 	srli	r8,r5,20
   24734:	01c00434 	movhi	r7,16
   24738:	39ffffc4 	addi	r7,r7,-1
   2473c:	29ce703a 	and	r7,r5,r7
   24740:	380e90fa 	slli	r7,r7,3
   24744:	4201ffcc 	andi	r8,r8,2047
   24748:	200cd77a 	srli	r6,r4,29
   2474c:	42400044 	addi	r9,r8,1
   24750:	4a41ffcc 	andi	r9,r9,2047
   24754:	00800044 	movi	r2,1
   24758:	398cb03a 	or	r6,r7,r6
   2475c:	de00012e 	bgeu	sp,et,24764 <__truncdfsf2+0x34>
   24760:	003b68fa 	trap	3
   24764:	280ad7fa 	srli	r5,r5,31
   24768:	200e90fa 	slli	r7,r4,3
   2476c:	1240230e 	bge	r2,r9,247fc <__truncdfsf2+0xcc>
   24770:	40ff2004 	addi	r3,r8,-896
   24774:	00803f84 	movi	r2,254
   24778:	10c01516 	blt	r2,r3,247d0 <__truncdfsf2+0xa0>
   2477c:	00c02d0e 	bge	zero,r3,24834 <__truncdfsf2+0x104>
   24780:	200891ba 	slli	r4,r4,6
   24784:	300c90fa 	slli	r6,r6,3
   24788:	380ed77a 	srli	r7,r7,29
   2478c:	2008c03a 	cmpne	r4,r4,zero
   24790:	310cb03a 	or	r6,r6,r4
   24794:	31ccb03a 	or	r6,r6,r7
   24798:	308001cc 	andi	r2,r6,7
   2479c:	10000426 	beq	r2,zero,247b0 <__truncdfsf2+0x80>
   247a0:	310003cc 	andi	r4,r6,15
   247a4:	00800104 	movi	r2,4
   247a8:	20800126 	beq	r4,r2,247b0 <__truncdfsf2+0x80>
   247ac:	31800104 	addi	r6,r6,4
   247b0:	3081002c 	andhi	r2,r6,1024
   247b4:	10002326 	beq	r2,zero,24844 <__truncdfsf2+0x114>
   247b8:	18c00044 	addi	r3,r3,1
   247bc:	00803fc4 	movi	r2,255
   247c0:	18800326 	beq	r3,r2,247d0 <__truncdfsf2+0xa0>
   247c4:	300c91ba 	slli	r6,r6,6
   247c8:	300cd27a 	srli	r6,r6,9
   247cc:	00000206 	br	247d8 <__truncdfsf2+0xa8>
   247d0:	00ffffc4 	movi	r3,-1
   247d4:	000d883a 	mov	r6,zero
   247d8:	18c03fcc 	andi	r3,r3,255
   247dc:	180895fa 	slli	r4,r3,23
   247e0:	00c02034 	movhi	r3,128
   247e4:	280a97fa 	slli	r5,r5,31
   247e8:	18ffffc4 	addi	r3,r3,-1
   247ec:	30c6703a 	and	r3,r6,r3
   247f0:	1906b03a 	or	r3,r3,r4
   247f4:	1944b03a 	or	r2,r3,r5
   247f8:	f800283a 	ret
   247fc:	4000071e 	bne	r8,zero,2481c <__truncdfsf2+0xec>
   24800:	31ccb03a 	or	r6,r6,r7
   24804:	30000d1e 	bne	r6,zero,2483c <__truncdfsf2+0x10c>
   24808:	0007883a 	mov	r3,zero
   2480c:	00802034 	movhi	r2,128
   24810:	10bfffc4 	addi	r2,r2,-1
   24814:	308c703a 	and	r6,r6,r2
   24818:	003fef06 	br	247d8 <_gp+0xffff26b8>
   2481c:	31c8b03a 	or	r4,r6,r7
   24820:	203feb26 	beq	r4,zero,247d0 <_gp+0xffff26b0>
   24824:	300c90fa 	slli	r6,r6,3
   24828:	00c03fc4 	movi	r3,255
   2482c:	31808034 	orhi	r6,r6,512
   24830:	003fd906 	br	24798 <_gp+0xffff2678>
   24834:	00bffa44 	movi	r2,-23
   24838:	1880090e 	bge	r3,r2,24860 <__truncdfsf2+0x130>
   2483c:	01800144 	movi	r6,5
   24840:	0007883a 	mov	r3,zero
   24844:	00803fc4 	movi	r2,255
   24848:	300cd0fa 	srli	r6,r6,3
   2484c:	18bfef1e 	bne	r3,r2,2480c <_gp+0xffff26ec>
   24850:	303fdf26 	beq	r6,zero,247d0 <_gp+0xffff26b0>
   24854:	31801034 	orhi	r6,r6,64
   24858:	00ffffc4 	movi	r3,-1
   2485c:	003feb06 	br	2480c <_gp+0xffff26ec>
   24860:	0080e784 	movi	r2,926
   24864:	1205c83a 	sub	r2,r2,r8
   24868:	00c007c4 	movi	r3,31
   2486c:	31802034 	orhi	r6,r6,128
   24870:	18800916 	blt	r3,r2,24898 <__truncdfsf2+0x168>
   24874:	423f2084 	addi	r8,r8,-894
   24878:	3a06983a 	sll	r3,r7,r8
   2487c:	3210983a 	sll	r8,r6,r8
   24880:	388ed83a 	srl	r7,r7,r2
   24884:	180cc03a 	cmpne	r6,r3,zero
   24888:	418cb03a 	or	r6,r8,r6
   2488c:	31ccb03a 	or	r6,r6,r7
   24890:	0007883a 	mov	r3,zero
   24894:	003fc006 	br	24798 <_gp+0xffff2678>
   24898:	00c0df84 	movi	r3,894
   2489c:	1a07c83a 	sub	r3,r3,r8
   248a0:	01000804 	movi	r4,32
   248a4:	30c6d83a 	srl	r3,r6,r3
   248a8:	11000726 	beq	r2,r4,248c8 <__truncdfsf2+0x198>
   248ac:	423f2884 	addi	r8,r8,-862
   248b0:	3210983a 	sll	r8,r6,r8
   248b4:	41ceb03a 	or	r7,r8,r7
   248b8:	380ec03a 	cmpne	r7,r7,zero
   248bc:	38ccb03a 	or	r6,r7,r3
   248c0:	0007883a 	mov	r3,zero
   248c4:	003fb406 	br	24798 <_gp+0xffff2678>
   248c8:	0011883a 	mov	r8,zero
   248cc:	003ff906 	br	248b4 <_gp+0xffff2794>

000248d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   248d0:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   248d4:	018000f4 	movhi	r6,3
   248d8:	01c000f4 	movhi	r7,3
   248dc:	de00012e 	bgeu	sp,et,248e4 <alt_load+0x14>
   248e0:	003b68fa 	trap	3
   248e4:	31a5d604 	addi	r6,r6,-26792
   248e8:	dfc00015 	stw	ra,0(sp)
   248ec:	39e85504 	addi	r7,r7,-24236
   248f0:	31c01026 	beq	r6,r7,24934 <alt_load+0x64>
  {
    while( to != end )
   248f4:	008000f4 	movhi	r2,3
   248f8:	10a85504 	addi	r2,r2,-24236
   248fc:	30800d26 	beq	r6,r2,24934 <alt_load+0x64>
   24900:	30c00104 	addi	r3,r6,4
   24904:	10c7c83a 	sub	r3,r2,r3
   24908:	1806d0ba 	srli	r3,r3,2
   2490c:	0005883a 	mov	r2,zero
   24910:	18c00044 	addi	r3,r3,1
   24914:	18c7883a 	add	r3,r3,r3
   24918:	18c7883a 	add	r3,r3,r3
   2491c:	11c9883a 	add	r4,r2,r7
    {
      *to++ = *from++;
   24920:	21400017 	ldw	r5,0(r4)
   24924:	1189883a 	add	r4,r2,r6
   24928:	10800104 	addi	r2,r2,4
   2492c:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   24930:	10fffa1e 	bne	r2,r3,2491c <_gp+0xffff27fc>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   24934:	01800034 	movhi	r6,0
   24938:	01c00034 	movhi	r7,0
   2493c:	31800804 	addi	r6,r6,32
   24940:	39c00804 	addi	r7,r7,32
   24944:	31c01026 	beq	r6,r7,24988 <alt_load+0xb8>
  {
    while( to != end )
   24948:	00800034 	movhi	r2,0
   2494c:	10800804 	addi	r2,r2,32
   24950:	30800d26 	beq	r6,r2,24988 <alt_load+0xb8>
   24954:	30c00104 	addi	r3,r6,4
   24958:	10c7c83a 	sub	r3,r2,r3
   2495c:	1806d0ba 	srli	r3,r3,2
   24960:	0005883a 	mov	r2,zero
   24964:	18c00044 	addi	r3,r3,1
   24968:	18c7883a 	add	r3,r3,r3
   2496c:	18c7883a 	add	r3,r3,r3
   24970:	11c9883a 	add	r4,r2,r7
    {
      *to++ = *from++;
   24974:	21400017 	ldw	r5,0(r4)
   24978:	1189883a 	add	r4,r2,r6
   2497c:	10800104 	addi	r2,r2,4
   24980:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   24984:	10fffa1e 	bne	r2,r3,24970 <_gp+0xffff2850>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   24988:	018000b4 	movhi	r6,2
   2498c:	01c000b4 	movhi	r7,2
   24990:	3194d204 	addi	r6,r6,21320
   24994:	39d4d204 	addi	r7,r7,21320
   24998:	31c01026 	beq	r6,r7,249dc <alt_load+0x10c>
  {
    while( to != end )
   2499c:	008000f4 	movhi	r2,3
   249a0:	10a5d604 	addi	r2,r2,-26792
   249a4:	30800d26 	beq	r6,r2,249dc <alt_load+0x10c>
   249a8:	30c00104 	addi	r3,r6,4
   249ac:	10c7c83a 	sub	r3,r2,r3
   249b0:	1806d0ba 	srli	r3,r3,2
   249b4:	0005883a 	mov	r2,zero
   249b8:	18c00044 	addi	r3,r3,1
   249bc:	18c7883a 	add	r3,r3,r3
   249c0:	18c7883a 	add	r3,r3,r3
   249c4:	11c9883a 	add	r4,r2,r7
    {
      *to++ = *from++;
   249c8:	21400017 	ldw	r5,0(r4)
   249cc:	1189883a 	add	r4,r2,r6
   249d0:	10800104 	addi	r2,r2,4
   249d4:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   249d8:	10fffa1e 	bne	r2,r3,249c4 <_gp+0xffff28a4>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   249dc:	00250080 	call	25008 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   249e0:	dfc00017 	ldw	ra,0(sp)
   249e4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   249e8:	00250b81 	jmpi	250b8 <alt_icache_flush_all>

000249ec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   249ec:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   249f0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   249f4:	de00012e 	bgeu	sp,et,249fc <alt_main+0x10>
   249f8:	003b68fa 	trap	3
   249fc:	dfc00115 	stw	ra,4(sp)
   24a00:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   24a04:	0024ba00 	call	24ba0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   24a08:	0024bc80 	call	24bc8 <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   24a0c:	d1229917 	ldw	r4,-30108(gp)
   24a10:	d1629817 	ldw	r5,-30112(gp)
   24a14:	d1a29717 	ldw	r6,-30116(gp)
   24a18:	00196f40 	call	196f4 <main>
  close(STDOUT_FILENO);
   24a1c:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   24a20:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
   24a24:	0024f2c0 	call	24f2c <close>
  exit (result);
   24a28:	8009883a 	mov	r4,r16
   24a2c:	00251600 	call	25160 <exit>

00024a30 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   24a30:	de00012e 	bgeu	sp,et,24a38 <sbrk+0x8>
   24a34:	003b68fa 	trap	3
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24a38:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24a3c:	00bfff84 	movi	r2,-2
   24a40:	2884703a 	and	r2,r5,r2
   24a44:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   24a48:	d0a00617 	ldw	r2,-32744(gp)
   24a4c:	00ffff04 	movi	r3,-4
   24a50:	108000c4 	addi	r2,r2,3
   24a54:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   24a58:	00c000f4 	movhi	r3,3
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   24a5c:	d0a00615 	stw	r2,-32744(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   24a60:	1109883a 	add	r4,r2,r4
   24a64:	18c00004 	addi	r3,r3,0
   24a68:	19000536 	bltu	r3,r4,24a80 <sbrk+0x50>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   24a6c:	d1200615 	stw	r4,-32744(gp)
 */

static ALT_INLINE char * ALT_ALWAYS_INLINE alt_stack_limit (void)
{
  char * limit;
  NIOS2_READ_ET(limit);
   24a70:	c007883a 	mov	r3,et
   * pointer overflow. 
   * If the stack limit isn't pointing at the top of the heap then the code
   * is using a different stack so none of this needs to be done.
   */

  if (alt_stack_limit() == prev_heap_end)
   24a74:	10c00526 	beq	r2,r3,24a8c <sbrk+0x5c>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24a78:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   24a7c:	f800283a 	ret
   24a80:	2801703a 	wrctl	status,r5
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   24a84:	00bfffc4 	movi	r2,-1
   24a88:	f800283a 	ret
 */

static ALT_INLINE char * ALT_ALWAYS_INLINE alt_stack_pointer (void)
{
  char * pointer;
  NIOS2_READ_SP(pointer);
   24a8c:	d807883a 	mov	r3,sp
   * is using a different stack so none of this needs to be done.
   */

  if (alt_stack_limit() == prev_heap_end)
  {
    if (alt_stack_pointer() <= heap_end)
   24a90:	20c00136 	bltu	r4,r3,24a98 <sbrk+0x68>
 * alt_report_stack_overflow reports that a stack overflow happened.
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_report_stack_overflow (void)
{
  NIOS2_REPORT_STACK_OVERFLOW();
   24a94:	003da0fa 	break	3
 * limit register.
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_set_stack_limit (char * limit)
{
  alt_stack_limit_value = limit;
   24a98:	00c000f4 	movhi	r3,3
   24a9c:	18e84804 	addi	r3,r3,-24288
   24aa0:	19000015 	stw	r4,0(r3)
  NIOS2_WRITE_ET(limit);
   24aa4:	2031883a 	mov	et,r4
   24aa8:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   24aac:	f800283a 	ret

00024ab0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   24ab0:	defffe04 	addi	sp,sp,-8
   24ab4:	de00012e 	bgeu	sp,et,24abc <write+0xc>
   24ab8:	003b68fa 	trap	3
   24abc:	dfc00115 	stw	ra,4(sp)
   24ac0:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   24ac4:	20002716 	blt	r4,zero,24b64 <write+0xb4>
   24ac8:	20800324 	muli	r2,r4,12
   24acc:	00c000f4 	movhi	r3,3
   24ad0:	18e7de04 	addi	r3,r3,-24712
   24ad4:	10c9883a 	add	r4,r2,r3
  
  if (fd)
   24ad8:	20002226 	beq	r4,zero,24b64 <write+0xb4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   24adc:	20800217 	ldw	r2,8(r4)
   24ae0:	108000cc 	andi	r2,r2,3
   24ae4:	10000a26 	beq	r2,zero,24b10 <write+0x60>
   24ae8:	20800017 	ldw	r2,0(r4)
   24aec:	10800617 	ldw	r2,24(r2)
   24af0:	10000726 	beq	r2,zero,24b10 <write+0x60>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   24af4:	103ee83a 	callr	r2
   24af8:	1021883a 	mov	r16,r2
   24afc:	80001016 	blt	r16,zero,24b40 <write+0x90>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
   24b00:	dfc00117 	ldw	ra,4(sp)
   24b04:	dc000017 	ldw	r16,0(sp)
   24b08:	dec00204 	addi	sp,sp,8
   24b0c:	f800283a 	ret

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   24b10:	008000f4 	movhi	r2,3
   24b14:	10a85404 	addi	r2,r2,-24240
   24b18:	10800017 	ldw	r2,0(r2)
   24b1c:	10000526 	beq	r2,zero,24b34 <write+0x84>
   24b20:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
   24b24:	00c00344 	movi	r3,13
   24b28:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
   24b2c:	00bfffc4 	movi	r2,-1
   24b30:	003ff306 	br	24b00 <_gp+0xffff29e0>
   24b34:	008000f4 	movhi	r2,3
   24b38:	10aade04 	addi	r2,r2,-21640
   24b3c:	003ff906 	br	24b24 <_gp+0xffff2a04>
   24b40:	008000f4 	movhi	r2,3
   24b44:	10a85404 	addi	r2,r2,-24240
   24b48:	10800017 	ldw	r2,0(r2)
   24b4c:	10000e26 	beq	r2,zero,24b88 <write+0xd8>
   24b50:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
   24b54:	0421c83a 	sub	r16,zero,r16
   24b58:	14000015 	stw	r16,0(r2)
        return -1;
   24b5c:	00bfffc4 	movi	r2,-1
   24b60:	003fe706 	br	24b00 <_gp+0xffff29e0>
   24b64:	008000f4 	movhi	r2,3
   24b68:	10a85404 	addi	r2,r2,-24240
   24b6c:	10800017 	ldw	r2,0(r2)
   24b70:	10000826 	beq	r2,zero,24b94 <write+0xe4>
   24b74:	103ee83a 	callr	r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   24b78:	00c01444 	movi	r3,81
   24b7c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   24b80:	00bfffc4 	movi	r2,-1
   24b84:	003fde06 	br	24b00 <_gp+0xffff29e0>
   24b88:	008000f4 	movhi	r2,3
   24b8c:	10aade04 	addi	r2,r2,-21640
   24b90:	003ff006 	br	24b54 <_gp+0xffff2a34>
   24b94:	008000f4 	movhi	r2,3
   24b98:	10aade04 	addi	r2,r2,-21640
   24b9c:	003ff606 	br	24b78 <_gp+0xffff2a58>

00024ba0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   24ba0:	deffff04 	addi	sp,sp,-4
   24ba4:	de00012e 	bgeu	sp,et,24bac <alt_irq_init+0xc>
   24ba8:	003b68fa 	trap	3
   24bac:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_CPU, nios2_cpu);
   24bb0:	00250f80 	call	250f8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   24bb4:	00800044 	movi	r2,1
   24bb8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   24bbc:	dfc00017 	ldw	ra,0(sp)
   24bc0:	dec00104 	addi	sp,sp,4
   24bc4:	f800283a 	ret

00024bc8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   24bc8:	defffe04 	addi	sp,sp,-8
   24bcc:	de00012e 	bgeu	sp,et,24bd4 <alt_sys_init+0xc>
   24bd0:	003b68fa 	trap	3
   24bd4:	dc000015 	stw	r16,0(sp)

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   24bd8:	040000f4 	movhi	r16,3
   24bdc:	84285004 	addi	r16,r16,-24256
   24be0:	010000f4 	movhi	r4,3
   24be4:	800b883a 	mov	r5,r16
   24be8:	2127d304 	addi	r4,r4,-24756
   24bec:	dfc00115 	stw	ra,4(sp)
   24bf0:	00250380 	call	25038 <alt_dev_llist_insert>
   24bf4:	010000f4 	movhi	r4,3
   24bf8:	2127c804 	addi	r4,r4,-24800
   24bfc:	800b883a 	mov	r5,r16
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ALTERA_AVALON_SPI_INIT ( SPI_AD9361, spi_ad9361);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYS_ID, sys_id);
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
}
   24c00:	dfc00117 	ldw	ra,4(sp)
   24c04:	dc000017 	ldw	r16,0(sp)
   24c08:	dec00204 	addi	sp,sp,8
   24c0c:	00250381 	jmpi	25038 <alt_dev_llist_insert>

00024c10 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   24c10:	de00012e 	bgeu	sp,et,24c18 <altera_avalon_jtag_uart_read_fd+0x8>
   24c14:	003b68fa 	trap	3
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   24c18:	20800017 	ldw	r2,0(r4)
   24c1c:	21c00217 	ldw	r7,8(r4)
   24c20:	11000a04 	addi	r4,r2,40
   24c24:	0024c401 	jmpi	24c40 <altera_avalon_jtag_uart_read>

00024c28 <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   24c28:	de00012e 	bgeu	sp,et,24c30 <altera_avalon_jtag_uart_write_fd+0x8>
   24c2c:	003b68fa 	trap	3
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   24c30:	20800017 	ldw	r2,0(r4)
   24c34:	21c00217 	ldw	r7,8(r4)
   24c38:	11000a04 	addi	r4,r2,40
   24c3c:	0024cb41 	jmpi	24cb4 <altera_avalon_jtag_uart_write>

00024c40 <altera_avalon_jtag_uart_read>:
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;
   24c40:	298d883a 	add	r6,r5,r6
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   24c44:	de00012e 	bgeu	sp,et,24c4c <altera_avalon_jtag_uart_read+0xc>
   24c48:	003b68fa 	trap	3
  unsigned int base = sp->base;
   24c4c:	22400017 	ldw	r9,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   24c50:	2980142e 	bgeu	r5,r6,24ca4 <altera_avalon_jtag_uart_read+0x64>
   24c54:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
   24c58:	3a90000c 	andi	r10,r7,16384
   24c5c:	00000306 	br	24c6c <altera_avalon_jtag_uart_read+0x2c>
  while (ptr < end)
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   24c60:	11000005 	stb	r4,0(r2)
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   24c64:	1980092e 	bgeu	r3,r6,24c8c <altera_avalon_jtag_uart_read+0x4c>
   24c68:	1805883a 	mov	r2,r3
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   24c6c:	49000037 	ldwio	r4,0(r9)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   24c70:	2220000c 	andi	r8,r4,32768
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   24c74:	10c00044 	addi	r3,r2,1

  while (ptr < end)
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   24c78:	403ff91e 	bne	r8,zero,24c60 <_gp+0xffff2b40>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
   24c7c:	1140051e 	bne	r2,r5,24c94 <altera_avalon_jtag_uart_read+0x54>
      break;
    else if(flags & O_NONBLOCK)
   24c80:	5000061e 	bne	r10,zero,24c9c <altera_avalon_jtag_uart_read+0x5c>
   24c84:	2807883a 	mov	r3,r5
   24c88:	003ff706 	br	24c68 <_gp+0xffff2b48>
   24c8c:	1805883a 	mov	r2,r3
      break;   
    
  }

  if (ptr != buffer)
   24c90:	28c00426 	beq	r5,r3,24ca4 <altera_avalon_jtag_uart_read+0x64>
    return ptr - buffer;
   24c94:	1145c83a 	sub	r2,r2,r5
   24c98:	f800283a 	ret
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   24c9c:	00bffd44 	movi	r2,-11
   24ca0:	f800283a 	ret
    
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
   24ca4:	39d0000c 	andi	r7,r7,16384
   24ca8:	383ffc1e 	bne	r7,zero,24c9c <_gp+0xffff2b7c>
    return -EWOULDBLOCK;
  else
    return -EIO;
   24cac:	00bffec4 	movi	r2,-5
}
   24cb0:	f800283a 	ret

00024cb4 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   24cb4:	de00012e 	bgeu	sp,et,24cbc <altera_avalon_jtag_uart_write+0x8>
   24cb8:	003b68fa 	trap	3
  unsigned int base = sp->base;
   24cbc:	21c00017 	ldw	r7,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   24cc0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   24cc4:	298d883a 	add	r6,r5,r6
   24cc8:	39000104 	addi	r4,r7,4

  while (ptr < end)
   24ccc:	2980072e 	bgeu	r5,r6,24cec <altera_avalon_jtag_uart_write+0x38>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   24cd0:	20c00037 	ldwio	r3,0(r4)
   24cd4:	18ffffec 	andhi	r3,r3,65535
   24cd8:	183ffd26 	beq	r3,zero,24cd0 <_gp+0xffff2bb0>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   24cdc:	28c00007 	ldb	r3,0(r5)
   24ce0:	38c00035 	stwio	r3,0(r7)
   24ce4:	29400044 	addi	r5,r5,1
   24ce8:	003ff806 	br	24ccc <_gp+0xffff2bac>

  return count;
}
   24cec:	f800283a 	ret

00024cf0 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   24cf0:	de00012e 	bgeu	sp,et,24cf8 <alt_avalon_spi_command+0x8>
   24cf4:	003b68fa 	trap	3
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   24cf8:	00c00044 	movi	r3,1

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   24cfc:	d8800017 	ldw	r2,0(sp)
   24d00:	da800117 	ldw	r10,4(sp)
   24d04:	db800217 	ldw	r14,8(sp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   24d08:	194a983a 	sll	r5,r3,r5
int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
  const alt_u8 * write_end = write_data + write_length;
   24d0c:	3999883a 	add	r12,r7,r6
  alt_u8 * read_end = read_data + read_length;
   24d10:	509b883a 	add	r13,r10,r2
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   24d14:	21400535 	stwio	r5,20(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   24d18:	70c0008c 	andi	r3,r14,2
   24d1c:	18002b26 	beq	r3,zero,24dcc <alt_avalon_spi_command+0xdc>
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   24d20:	20c00037 	ldwio	r3,0(r4)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   24d24:	01400044 	movi	r5,1
   24d28:	22400204 	addi	r9,r4,8
                           alt_u32 flags)
{
  const alt_u8 * write_end = write_data + write_length;
  alt_u8 * read_end = read_data + read_length;

  alt_u32 write_zeros = read_length;
   24d2c:	1017883a 	mov	r11,r2
      if (write_data < write_end)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
      else if (write_zeros > 0)
      {
        write_zeros--;
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   24d30:	23c00104 	addi	r15,r4,4
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   24d34:	48c00037 	ldwio	r3,0(r9)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   24d38:	1a00100c 	andi	r8,r3,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   24d3c:	18c0200c 	andi	r3,r3,128
   24d40:	40000626 	beq	r8,zero,24d5c <alt_avalon_spi_command+0x6c>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   24d44:	28000526 	beq	r5,zero,24d5c <alt_avalon_spi_command+0x6c>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   24d48:	0140040e 	bge	zero,r5,24d5c <alt_avalon_spi_command+0x6c>
    {
      credits--;
   24d4c:	297fffc4 	addi	r5,r5,-1

      if (write_data < write_end)
   24d50:	3b001536 	bltu	r7,r12,24da8 <alt_avalon_spi_command+0xb8>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
      else if (write_zeros > 0)
   24d54:	5800181e 	bne	r11,zero,24db8 <alt_avalon_spi_command+0xc8>
      {
        write_zeros--;
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
      }
      else
        credits = -1024;
   24d58:	017f0004 	movi	r5,-1024
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   24d5c:	183ff526 	beq	r3,zero,24d34 <_gp+0xffff2c14>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   24d60:	20c00037 	ldwio	r3,0(r4)

      if (read_ignore > 0)
   24d64:	30000c26 	beq	r6,zero,24d98 <alt_avalon_spi_command+0xa8>
        read_ignore--;
   24d68:	31bfffc4 	addi	r6,r6,-1
      else
        *read_data++ = (alt_u8)rxdata;
      credits++;
   24d6c:	29400044 	addi	r5,r5,1

      if (read_ignore == 0 && read_data == read_end)
   24d70:	303ff01e 	bne	r6,zero,24d34 <_gp+0xffff2c14>
   24d74:	53400226 	beq	r10,r13,24d80 <alt_avalon_spi_command+0x90>
   24d78:	000d883a 	mov	r6,zero
   24d7c:	003fed06 	br	24d34 <_gp+0xffff2c14>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   24d80:	48c00037 	ldwio	r3,0(r9)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   24d84:	18c0080c 	andi	r3,r3,32
   24d88:	183ffd26 	beq	r3,zero,24d80 <_gp+0xffff2c60>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   24d8c:	7380004c 	andi	r14,r14,1
   24d90:	70000c26 	beq	r14,zero,24dc4 <alt_avalon_spi_command+0xd4>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);

  return read_length;
}
   24d94:	f800283a 	ret
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);

      if (read_ignore > 0)
        read_ignore--;
      else
        *read_data++ = (alt_u8)rxdata;
   24d98:	50c00005 	stb	r3,0(r10)
      credits++;
   24d9c:	29400044 	addi	r5,r5,1
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);

      if (read_ignore > 0)
        read_ignore--;
      else
        *read_data++ = (alt_u8)rxdata;
   24da0:	52800044 	addi	r10,r10,1
   24da4:	003ff306 	br	24d74 <_gp+0xffff2c54>
    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    {
      credits--;

      if (write_data < write_end)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   24da8:	3a000003 	ldbu	r8,0(r7)
   24dac:	39c00044 	addi	r7,r7,1
   24db0:	7a000035 	stwio	r8,0(r15)
   24db4:	003fe906 	br	24d5c <_gp+0xffff2c3c>
      else if (write_zeros > 0)
      {
        write_zeros--;
   24db8:	5affffc4 	addi	r11,r11,-1
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   24dbc:	78000035 	stwio	zero,0(r15)
   24dc0:	003fe606 	br	24d5c <_gp+0xffff2c3c>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   24dc4:	20000335 	stwio	zero,12(r4)
   24dc8:	f800283a 	ret

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   24dcc:	00c10004 	movi	r3,1024
   24dd0:	20c00335 	stwio	r3,12(r4)
   24dd4:	003fd206 	br	24d20 <_gp+0xffff2c00>

00024dd8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   24dd8:	de00012e 	bgeu	sp,et,24de0 <altera_avalon_uart_read_fd+0x8>
   24ddc:	003b68fa 	trap	3
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
   24de0:	20800017 	ldw	r2,0(r4)
   24de4:	21c00217 	ldw	r7,8(r4)
   24de8:	11000a04 	addi	r4,r2,40
   24dec:	0024e081 	jmpi	24e08 <altera_avalon_uart_read>

00024df0 <altera_avalon_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   24df0:	de00012e 	bgeu	sp,et,24df8 <altera_avalon_uart_write_fd+0x8>
   24df4:	003b68fa 	trap	3
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
   24df8:	20800017 	ldw	r2,0(r4)
   24dfc:	21c00217 	ldw	r7,8(r4)
   24e00:	11000a04 	addi	r4,r2,40
   24e04:	0024e981 	jmpi	24e98 <altera_avalon_uart_write>

00024e08 <altera_avalon_uart_read>:
  int flags)
{
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
   24e08:	39d0000c 	andi	r7,r7,16384

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   24e0c:	20800017 	ldw	r2,0(r4)
   24e10:	10800204 	addi	r2,r2,8
   24e14:	10c00037 	ldwio	r3,0(r2)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
   24e18:	10000035 	stwio	zero,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
   24e1c:	1880200c 	andi	r2,r3,128
   24e20:	1000101e 	bne	r2,zero,24e64 <altera_avalon_uart_read+0x5c>
      {
        return 1;
      }
    }
  }
  while (block);
   24e24:	383ff926 	beq	r7,zero,24e0c <_gp+0xffff2cec>
   24e28:	008000f4 	movhi	r2,3
   24e2c:	10a85404 	addi	r2,r2,-24240
   24e30:	10800017 	ldw	r2,0(r2)
   24e34:	10001226 	beq	r2,zero,24e80 <altera_avalon_uart_read+0x78>
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   24e38:	deffff04 	addi	sp,sp,-4
   24e3c:	de00012e 	bgeu	sp,et,24e44 <altera_avalon_uart_read+0x3c>
   24e40:	003b68fa 	trap	3
   24e44:	dfc00015 	stw	ra,0(sp)
   24e48:	103ee83a 	callr	r2
      }
    }
  }
  while (block);

  ALT_ERRNO = EWOULDBLOCK;
   24e4c:	00c002c4 	movi	r3,11
   24e50:	10c00015 	stw	r3,0(r2)
 
  return 0;
   24e54:	0005883a 	mov	r2,zero
}
   24e58:	dfc00017 	ldw	ra,0(sp)
   24e5c:	dec00104 	addi	sp,sp,4
   24e60:	f800283a 	ret

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   24e64:	20800017 	ldw	r2,0(r4)
   24e68:	10800037 	ldwio	r2,0(r2)
   24e6c:	28800005 	stb	r2,0(r5)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   24e70:	18c000cc 	andi	r3,r3,3
   24e74:	183feb1e 	bne	r3,zero,24e24 <_gp+0xffff2d04>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
   24e78:	00800044 	movi	r2,1
   24e7c:	f800283a 	ret
   24e80:	008000f4 	movhi	r2,3
   24e84:	10aade04 	addi	r2,r2,-21640
      }
    }
  }
  while (block);

  ALT_ERRNO = EWOULDBLOCK;
   24e88:	00c002c4 	movi	r3,11
   24e8c:	10c00015 	stw	r3,0(r2)
 
  return 0;
   24e90:	0005883a 	mov	r2,zero
}
   24e94:	f800283a 	ret

00024e98 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   24e98:	defffd04 	addi	sp,sp,-12
   24e9c:	de00012e 	bgeu	sp,et,24ea4 <altera_avalon_uart_write+0xc>
   24ea0:	003b68fa 	trap	3
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
   24ea4:	39d0000c 	andi	r7,r7,16384
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   24ea8:	dc000115 	stw	r16,4(sp)
   24eac:	dfc00215 	stw	ra,8(sp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
  count = len;
   24eb0:	3021883a 	mov	r16,r6

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   24eb4:	22000017 	ldw	r8,0(r4)
   24eb8:	40c00237 	ldwio	r3,8(r8)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
   24ebc:	18c0100c 	andi	r3,r3,64
   24ec0:	1800071e 	bne	r3,zero,24ee0 <altera_avalon_uart_write+0x48>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
      count--;
    }
  }
  while (block && count);
   24ec4:	38000b1e 	bne	r7,zero,24ef4 <altera_avalon_uart_write+0x5c>
   24ec8:	803ffa1e 	bne	r16,zero,24eb4 <_gp+0xffff2d94>
  {
    ALT_ERRNO = EWOULDBLOCK;
  }

  return (len - count);
}
   24ecc:	3405c83a 	sub	r2,r6,r16
   24ed0:	dfc00217 	ldw	ra,8(sp)
   24ed4:	dc000117 	ldw	r16,4(sp)
   24ed8:	dec00304 	addi	sp,sp,12
   24edc:	f800283a 	ret
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
   24ee0:	28c00007 	ldb	r3,0(r5)
   24ee4:	29400044 	addi	r5,r5,1
   24ee8:	40c00135 	stwio	r3,4(r8)
      count--;
   24eec:	843fffc4 	addi	r16,r16,-1
    }
  }
  while (block && count);
   24ef0:	383ff526 	beq	r7,zero,24ec8 <_gp+0xffff2da8>

  if (count)
   24ef4:	803ff526 	beq	r16,zero,24ecc <_gp+0xffff2dac>
   24ef8:	008000f4 	movhi	r2,3
   24efc:	10a85404 	addi	r2,r2,-24240
   24f00:	10800017 	ldw	r2,0(r2)
   24f04:	10000626 	beq	r2,zero,24f20 <altera_avalon_uart_write+0x88>
   24f08:	d9800015 	stw	r6,0(sp)
   24f0c:	103ee83a 	callr	r2
   24f10:	d9800017 	ldw	r6,0(sp)
  {
    ALT_ERRNO = EWOULDBLOCK;
   24f14:	00c002c4 	movi	r3,11
   24f18:	10c00015 	stw	r3,0(r2)
   24f1c:	003feb06 	br	24ecc <_gp+0xffff2dac>
   24f20:	008000f4 	movhi	r2,3
   24f24:	10aade04 	addi	r2,r2,-21640
   24f28:	003ffa06 	br	24f14 <_gp+0xffff2df4>

00024f2c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   24f2c:	defffd04 	addi	sp,sp,-12
   24f30:	de00012e 	bgeu	sp,et,24f38 <close+0xc>
   24f34:	003b68fa 	trap	3
   24f38:	dc000015 	stw	r16,0(sp)
   24f3c:	dfc00215 	stw	ra,8(sp)
   24f40:	dc400115 	stw	r17,4(sp)
   24f44:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   24f48:	20002016 	blt	r4,zero,24fcc <close+0xa0>
   24f4c:	20c00324 	muli	r3,r4,12
   24f50:	008000f4 	movhi	r2,3
   24f54:	10a7de04 	addi	r2,r2,-24712
   24f58:	1885883a 	add	r2,r3,r2

  if (fd)
   24f5c:	10001b26 	beq	r2,zero,24fcc <close+0xa0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   24f60:	10c00017 	ldw	r3,0(r2)
   24f64:	18c00417 	ldw	r3,16(r3)
   24f68:	18000c26 	beq	r3,zero,24f9c <close+0x70>
   24f6c:	1009883a 	mov	r4,r2
   24f70:	183ee83a 	callr	r3

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   24f74:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   24f78:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   24f7c:	00250cc0 	call	250cc <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
   24f80:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
   24f84:	88000816 	blt	r17,zero,24fa8 <close+0x7c>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
   24f88:	dfc00217 	ldw	ra,8(sp)
   24f8c:	dc400117 	ldw	r17,4(sp)
   24f90:	dc000017 	ldw	r16,0(sp)
   24f94:	dec00304 	addi	sp,sp,12
   24f98:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   24f9c:	00250cc0 	call	250cc <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
   24fa0:	0005883a 	mov	r2,zero
   24fa4:	003ff806 	br	24f88 <_gp+0xffff2e68>
   24fa8:	008000f4 	movhi	r2,3
   24fac:	10a85404 	addi	r2,r2,-24240
   24fb0:	10800017 	ldw	r2,0(r2)
   24fb4:	10000e26 	beq	r2,zero,24ff0 <close+0xc4>
   24fb8:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
   24fbc:	0463c83a 	sub	r17,zero,r17
   24fc0:	14400015 	stw	r17,0(r2)
      return -1;
   24fc4:	00bfffc4 	movi	r2,-1
   24fc8:	003fef06 	br	24f88 <_gp+0xffff2e68>
   24fcc:	008000f4 	movhi	r2,3
   24fd0:	10a85404 	addi	r2,r2,-24240
   24fd4:	10800017 	ldw	r2,0(r2)
   24fd8:	10000826 	beq	r2,zero,24ffc <close+0xd0>
   24fdc:	103ee83a 	callr	r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
   24fe0:	00c01444 	movi	r3,81
   24fe4:	10c00015 	stw	r3,0(r2)
    return -1;
   24fe8:	00bfffc4 	movi	r2,-1
   24fec:	003fe606 	br	24f88 <_gp+0xffff2e68>
   24ff0:	008000f4 	movhi	r2,3
   24ff4:	10aade04 	addi	r2,r2,-21640
   24ff8:	003ff006 	br	24fbc <_gp+0xffff2e9c>
   24ffc:	008000f4 	movhi	r2,3
   25000:	10aade04 	addi	r2,r2,-21640
   25004:	003ff606 	br	24fe0 <_gp+0xffff2ec0>

00025008 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   25008:	de00012e 	bgeu	sp,et,25010 <alt_dcache_flush_all+0x8>
   2500c:	003b68fa 	trap	3
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   25010:	0005883a 	mov	r2,zero
   25014:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   25018:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   2501c:	10800804 	addi	r2,r2,32
   25020:	10fffd1e 	bne	r2,r3,25018 <_gp+0xffff2ef8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   25024:	f800283a 	ret

00025028 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   25028:	de00012e 	bgeu	sp,et,25030 <alt_dev_null_write+0x8>
   2502c:	003b68fa 	trap	3
  return len;
}
   25030:	3005883a 	mov	r2,r6
   25034:	f800283a 	ret

00025038 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   25038:	20000a26 	beq	r4,zero,25064 <alt_dev_llist_insert+0x2c>
   2503c:	20800217 	ldw	r2,8(r4)
   25040:	10000826 	beq	r2,zero,25064 <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   25044:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   25048:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   2504c:	0005883a 	mov	r2,zero
  entry->next     = list->next;
   25050:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
   25054:	28c00017 	ldw	r3,0(r5)
   25058:	19000115 	stw	r4,4(r3)
  list->next           = entry;
   2505c:	29000015 	stw	r4,0(r5)
   25060:	f800283a 	ret
   25064:	008000f4 	movhi	r2,3
   25068:	10a85404 	addi	r2,r2,-24240
   2506c:	10800017 	ldw	r2,0(r2)
   25070:	10000b26 	beq	r2,zero,250a0 <alt_dev_llist_insert+0x68>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   25074:	deffff04 	addi	sp,sp,-4
   25078:	de00012e 	bgeu	sp,et,25080 <alt_dev_llist_insert+0x48>
   2507c:	003b68fa 	trap	3
   25080:	dfc00015 	stw	ra,0(sp)
   25084:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   25088:	00c00584 	movi	r3,22
   2508c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   25090:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   25094:	dfc00017 	ldw	ra,0(sp)
   25098:	dec00104 	addi	sp,sp,4
   2509c:	f800283a 	ret
   250a0:	008000f4 	movhi	r2,3
   250a4:	10aade04 	addi	r2,r2,-21640
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   250a8:	00c00584 	movi	r3,22
   250ac:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   250b0:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   250b4:	f800283a 	ret

000250b8 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   250b8:	0009883a 	mov	r4,zero
   250bc:	01440004 	movi	r5,4096
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   250c0:	de00012e 	bgeu	sp,et,250c8 <alt_icache_flush_all+0x10>
   250c4:	003b68fa 	trap	3
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   250c8:	00251081 	jmpi	25108 <alt_icache_flush>

000250cc <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
   250cc:	00800084 	movi	r2,2
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   250d0:	de00012e 	bgeu	sp,et,250d8 <alt_release_fd+0xc>
   250d4:	003b68fa 	trap	3
  if (fd > 2)
   250d8:	1100060e 	bge	r2,r4,250f4 <alt_release_fd+0x28>
  {
    alt_fd_list[fd].fd_flags = 0;
   250dc:	21000324 	muli	r4,r4,12
   250e0:	008000f4 	movhi	r2,3
   250e4:	10a7de04 	addi	r2,r2,-24712
   250e8:	1107883a 	add	r3,r2,r4
   250ec:	18000215 	stw	zero,8(r3)
    alt_fd_list[fd].dev      = 0;
   250f0:	18000015 	stw	zero,0(r3)
   250f4:	f800283a 	ret

000250f8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   250f8:	de00012e 	bgeu	sp,et,25100 <altera_nios2_gen2_irq_init+0x8>
   250fc:	003b68fa 	trap	3
    NIOS2_WRITE_IENABLE(0);
   25100:	000170fa 	wrctl	ienable,zero
   25104:	f800283a 	ret

00025108 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   25108:	00840004 	movi	r2,4096
   2510c:	de00012e 	bgeu	sp,et,25114 <alt_icache_flush+0xc>
   25110:	003b68fa 	trap	3
   25114:	1140012e 	bgeu	r2,r5,2511c <alt_icache_flush+0x14>
   25118:	100b883a 	mov	r5,r2
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
   2511c:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   25120:	2005883a 	mov	r2,r4
   25124:	2140092e 	bgeu	r4,r5,2514c <alt_icache_flush+0x44>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   25128:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   2512c:	10800804 	addi	r2,r2,32
   25130:	117ffd36 	bltu	r2,r5,25128 <_gp+0xffff3008>
   25134:	0104303a 	nor	r2,zero,r4
   25138:	2885883a 	add	r2,r5,r2
   2513c:	1004d17a 	srli	r2,r2,5
   25140:	10800044 	addi	r2,r2,1
   25144:	1004917a 	slli	r2,r2,5
   25148:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   2514c:	210007cc 	andi	r4,r4,31
   25150:	20000126 	beq	r4,zero,25158 <alt_icache_flush+0x50>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   25154:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   25158:	0000203a 	flushp
   2515c:	f800283a 	ret

00025160 <exit>:
   25160:	defffe04 	addi	sp,sp,-8
   25164:	000b883a 	mov	r5,zero
   25168:	de00012e 	bgeu	sp,et,25170 <exit+0x10>
   2516c:	003b68fa 	trap	3
   25170:	dc000015 	stw	r16,0(sp)
   25174:	dfc00115 	stw	ra,4(sp)
   25178:	2021883a 	mov	r16,r4
   2517c:	00251880 	call	25188 <__call_exitprocs>
   25180:	8009883a 	mov	r4,r16
   25184:	002532c0 	call	2532c <_exit>

00025188 <__call_exitprocs>:
   25188:	008000f4 	movhi	r2,3
   2518c:	defff304 	addi	sp,sp,-52
   25190:	10a84b04 	addi	r2,r2,-24276
   25194:	de00012e 	bgeu	sp,et,2519c <__call_exitprocs+0x14>
   25198:	003b68fa 	trap	3
   2519c:	10800017 	ldw	r2,0(r2)
   251a0:	ddc00a15 	stw	r23,40(sp)
   251a4:	05c000b4 	movhi	r23,2
   251a8:	d8800015 	stw	r2,0(sp)
   251ac:	10800c04 	addi	r2,r2,48
   251b0:	dc800515 	stw	r18,20(sp)
   251b4:	dfc00c15 	stw	ra,48(sp)
   251b8:	df000b15 	stw	fp,44(sp)
   251bc:	dd800915 	stw	r22,36(sp)
   251c0:	dd400815 	stw	r21,32(sp)
   251c4:	dd000715 	stw	r20,28(sp)
   251c8:	dcc00615 	stw	r19,24(sp)
   251cc:	dc400415 	stw	r17,16(sp)
   251d0:	dc000315 	stw	r16,12(sp)
   251d4:	d9000115 	stw	r4,4(sp)
   251d8:	2825883a 	mov	r18,r5
   251dc:	d8800215 	stw	r2,8(sp)
   251e0:	bdfd4404 	addi	r23,r23,-2800
   251e4:	d8800017 	ldw	r2,0(sp)
   251e8:	dc400217 	ldw	r17,8(sp)
   251ec:	14c00c17 	ldw	r19,48(r2)
   251f0:	98004226 	beq	r19,zero,252fc <__call_exitprocs+0x174>
   251f4:	9c000117 	ldw	r16,4(r19)
   251f8:	00900034 	movhi	r2,16384
   251fc:	10bfffc4 	addi	r2,r2,-1
   25200:	9d002217 	ldw	r20,136(r19)
   25204:	857fffc4 	addi	r21,r16,-1
   25208:	80a1883a 	add	r16,r16,r2
   2520c:	8421883a 	add	r16,r16,r16
   25210:	8421883a 	add	r16,r16,r16
   25214:	a42d883a 	add	r22,r20,r16
   25218:	84000204 	addi	r16,r16,8
   2521c:	9c21883a 	add	r16,r19,r16
   25220:	a8002616 	blt	r21,zero,252bc <__call_exitprocs+0x134>
   25224:	90000326 	beq	r18,zero,25234 <__call_exitprocs+0xac>
   25228:	a0002026 	beq	r20,zero,252ac <__call_exitprocs+0x124>
   2522c:	b1002017 	ldw	r4,128(r22)
   25230:	24801e1e 	bne	r4,r18,252ac <__call_exitprocs+0x124>
   25234:	99000117 	ldw	r4,4(r19)
   25238:	82000017 	ldw	r8,0(r16)
   2523c:	213fffc4 	addi	r4,r4,-1
   25240:	a900021e 	bne	r21,r4,2524c <__call_exitprocs+0xc4>
   25244:	9d400115 	stw	r21,4(r19)
   25248:	00000106 	br	25250 <__call_exitprocs+0xc8>
   2524c:	80000015 	stw	zero,0(r16)
   25250:	40001626 	beq	r8,zero,252ac <__call_exitprocs+0x124>
   25254:	9f000117 	ldw	fp,4(r19)
   25258:	a0000526 	beq	r20,zero,25270 <__call_exitprocs+0xe8>
   2525c:	00800044 	movi	r2,1
   25260:	1552983a 	sll	r9,r2,r21
   25264:	a1404017 	ldw	r5,256(r20)
   25268:	494a703a 	and	r5,r9,r5
   2526c:	2800021e 	bne	r5,zero,25278 <__call_exitprocs+0xf0>
   25270:	403ee83a 	callr	r8
   25274:	00000906 	br	2529c <__call_exitprocs+0x114>
   25278:	a1004117 	ldw	r4,260(r20)
   2527c:	4908703a 	and	r4,r9,r4
   25280:	2000041e 	bne	r4,zero,25294 <__call_exitprocs+0x10c>
   25284:	d9000117 	ldw	r4,4(sp)
   25288:	b1400017 	ldw	r5,0(r22)
   2528c:	403ee83a 	callr	r8
   25290:	00000206 	br	2529c <__call_exitprocs+0x114>
   25294:	b1000017 	ldw	r4,0(r22)
   25298:	403ee83a 	callr	r8
   2529c:	99000117 	ldw	r4,4(r19)
   252a0:	e13fd01e 	bne	fp,r4,251e4 <_gp+0xffff30c4>
   252a4:	89000017 	ldw	r4,0(r17)
   252a8:	24ffce1e 	bne	r4,r19,251e4 <_gp+0xffff30c4>
   252ac:	ad7fffc4 	addi	r21,r21,-1
   252b0:	b5bfff04 	addi	r22,r22,-4
   252b4:	843fff04 	addi	r16,r16,-4
   252b8:	003fd906 	br	25220 <_gp+0xffff3100>
   252bc:	b8000f26 	beq	r23,zero,252fc <__call_exitprocs+0x174>
   252c0:	99400117 	ldw	r5,4(r19)
   252c4:	99000017 	ldw	r4,0(r19)
   252c8:	2800091e 	bne	r5,zero,252f0 <__call_exitprocs+0x168>
   252cc:	20000826 	beq	r4,zero,252f0 <__call_exitprocs+0x168>
   252d0:	89000015 	stw	r4,0(r17)
   252d4:	a0000226 	beq	r20,zero,252e0 <__call_exitprocs+0x158>
   252d8:	a009883a 	mov	r4,r20
   252dc:	001f5100 	call	1f510 <free>
   252e0:	9809883a 	mov	r4,r19
   252e4:	001f5100 	call	1f510 <free>
   252e8:	8cc00017 	ldw	r19,0(r17)
   252ec:	003fc006 	br	251f0 <_gp+0xffff30d0>
   252f0:	9823883a 	mov	r17,r19
   252f4:	2027883a 	mov	r19,r4
   252f8:	003fbd06 	br	251f0 <_gp+0xffff30d0>
   252fc:	dfc00c17 	ldw	ra,48(sp)
   25300:	df000b17 	ldw	fp,44(sp)
   25304:	ddc00a17 	ldw	r23,40(sp)
   25308:	dd800917 	ldw	r22,36(sp)
   2530c:	dd400817 	ldw	r21,32(sp)
   25310:	dd000717 	ldw	r20,28(sp)
   25314:	dcc00617 	ldw	r19,24(sp)
   25318:	dc800517 	ldw	r18,20(sp)
   2531c:	dc400417 	ldw	r17,16(sp)
   25320:	dc000317 	ldw	r16,12(sp)
   25324:	dec00d04 	addi	sp,sp,52
   25328:	f800283a 	ret

0002532c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2532c:	de00012e 	bgeu	sp,et,25334 <_exit+0x8>
   25330:	003b68fa 	trap	3
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   25334:	20000226 	beq	r4,zero,25340 <_exit+0x14>
    ALT_SIM_FAIL();
   25338:	002af070 	cmpltui	zero,zero,43969
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   2533c:	003fff06 	br	2533c <_gp+0xffff321c>
  } else {
    ALT_SIM_PASS();
   25340:	002af0b0 	cmpltui	zero,zero,43970
   25344:	003ffd06 	br	2533c <_gp+0xffff321c>
