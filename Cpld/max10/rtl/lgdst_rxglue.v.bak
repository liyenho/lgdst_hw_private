/*
 *
 */

`timescale 1ns / 10ps

module lgdst_rxglue(
  input             clk, 
  
  // IOs for ADRF_brg
  input             spi0_spck,
  input             spi0_npcs0, 
  input             spi0_mosi, 
  output            spi0_miso,

  output            ad_spi_cs, 
  output            ad_spi_sclk,
  inout             ad_spi_sdio, 

  // IOs for TS_brg
  output reg        spi5_spck = 1'b1,
  output reg        spi5_npcs0 = 1'b1, 
  output reg        spi5_mosi = 1'b0, 

  input             ts_clk, 
  input             ts_d0, 
  input             ts_valid,
  input             ts_sync
);

  // Signals for ADRF_brg
  reg  [3:0]    spi0_ck_cnt = 4'd0;
  reg           ad_spi_rw   = 1'b0;
  reg           ad_spi_oe_b = 1'b1;

  assign {ad_spi_cs, ad_spi_sclk} = {spi0_npcs0, spi0_spck};

  alt_iobuf i_iobuf(
    .io(ad_spi_sdio),           .oe(~(ad_spi_oe_b | spi0_npcs0)),
    .o(spi0_miso),              .i(spi0_mosi) 
  );
  //assign ad_spi_sdio = (ad_spi_oe_b | spi0_npcs0)? 1'bz: spi0_mosi; //_sync[1]; 
  //assign spi0_miso = ad_spi_sdio;

  always @(negedge spi0_spck or posedge spi0_npcs0)
  begin
    if (spi0_npcs0)
      ad_spi_oe_b <= 1'b0;
    else
      ad_spi_oe_b <= ad_spi_rw;
  end
  always @(posedge spi0_spck or posedge spi0_npcs0)
  begin
    if (spi0_npcs0)
    begin
      spi0_ck_cnt <= 4'd8;
      //spi0_ck_cnt <= 8'd0;
      ad_spi_rw <= 1'd0;
    end
    else
    begin
      spi0_ck_cnt <= spi0_ck_cnt + {4{|spi0_ck_cnt}};
      //spi0_ck_cnt <= {spi0_ck_cnt[6:0], 1'b1};
      ad_spi_rw <= (~|spi0_ck_cnt[2:1] & spi0_ck_cnt[0])? spi0_mosi:
      //ad_spi_rw <= (~spi0_ck_cnt[7] & spi0_ck_cnt[6])? spi0_mosi:
                   ad_spi_rw;
    end
  end

  // Signals for TS_brg
  reg       ts_active = 1'd0;
  reg [1:0] ts_active_sync = 2'd0;
  wire      ts_active_rise = ~ts_active_sync[1] & ts_active_sync[0];

  reg [1:0] ts_clk_sync = 2'd0;
  wire      ts_clk_rise = ~ts_clk_sync[1] & ts_clk_sync[0];
  wire      ts_tick = ts_clk_rise & (ts_active | ~spi5_npcs0);

  reg [2:0] spi5_ck_gen = 3'd0;

  always @(posedge clk)
  begin
    ts_active_sync  <= (~ts_valid)? 2'd0:
                       {ts_active_sync[0], ts_sync};
    ts_active <= (ts_active_rise)? 1'b1:
                 (ts_clk_rise)? 1'b0: ts_active;
    ts_clk_sync <= {ts_clk_sync[0], ts_clk};
  end

  always @(posedge clk)
  begin
    spi5_npcs0 <= (~ts_valid | (ts_active & ~ts_clk_rise))? 1'b1:
                  (ts_active & ts_clk_rise)? 1'b0:spi5_npcs0;
    spi5_spck = ~|spi5_ck_gen;
    spi5_mosi <= (ts_tick)? ts_d0: spi5_mosi;

    spi5_ck_gen <= (ts_tick)? 3'd7:
                      spi5_ck_gen + {3{|spi5_ck_gen}};
  end
  
endmodule
